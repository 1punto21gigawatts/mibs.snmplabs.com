#
# PySNMP MIB module ZhoneVdsl-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZhoneVdsl-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
HCPerfCurrentCount, HCPerfIntervalCount, HCPerfTimeElapsed = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfCurrentCount", "HCPerfIntervalCount", "HCPerfTimeElapsed")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, transmission, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, TimeTicks, IpAddress, MibIdentifier, Integer32, Counter32, ModuleIdentity, NotificationType, Bits, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "transmission", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "TimeTicks", "IpAddress", "MibIdentifier", "Integer32", "Counter32", "ModuleIdentity", "NotificationType", "Bits", "Counter64", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
zhoneVdsl, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneVdsl", "zhoneModules")
zhoneVdslMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 110))
zhoneVdslMib.setRevisions(('2013-10-08 06:43', '2013-02-27 18:00', '2013-02-11 14:15', '2011-12-01 05:59', '2011-11-16 12:14', '2011-10-18 11:13', '2011-10-14 11:24', '2011-04-28 11:55', '2010-11-05 07:16', '2010-10-13 04:59', '2010-06-07 11:29', '2010-05-31 00:11', '2010-04-02 06:40', '2010-03-29 05:54', '2010-03-02 08:44', '2008-04-14 12:28', '2008-02-05 08:56', '2007-10-23 16:53', '2007-10-05 13:24', '2007-06-20 10:56', '2007-03-14 16:08', '2006-12-05 15:09', '2006-11-10 08:58', '2006-10-10 15:25', '2006-09-10 11:16', '2006-08-22 17:21', '2006-06-15 15:29', '2004-02-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneVdslMib.setRevisionsDescriptions(('Add ATM or PTM transport mode retrieval support', 'Adding support for G.INP / ITU-T G.998.4', 'Add VDSL2 Vectoring statistics retrieval support.', 'V.01.24 - fix vpi/vci valid ranges', 'V.01.24 - add default VPI/VCI for line when its in single-vc mode', 'V.01.23 - add A3/A4/B3/B4 parameters for UPBO configuration', 'V.01.22 - split psdShape for Hytec into two shapes for 17a and 30a', 'V.01.21 - add new PSD Shape values and fix units for SNR and Attn', 'V.01.20 Modify defaults for max power and max SNR', 'V.01.19 -added zhoneVdslPhysPhyRActive object ', 'V.01.18 VDSL upstream minINP values expanded', 'V.01.17 VDSL phyR Statistics Objects are added', 'V.01.16 - modified defaults for zhoneVdslLineConfLineType to fastOnly, zhoneVdslLineConfDownPhyRSupport and zhoneVdslLineConfUpPhyRSupport to enable. ', 'V.01.15 Expanded lower end of range on zhoneVdslLineConfDownMaxPwr, zhoneVdslLineConfUpMaxPwr', 'V.01.14 Added zhoneVdslLineConfProfileEntry objects 113-123 to support BroadCOM VDSL.', 'V.01.13 - cleanup traps - config SNR values changed from 0..127 to 0.310 in 1/10 DBm steps.', 'V.01.12 - add more values to zhoneVdslLineConfDownPsdMaskSelect - add more values to zhoneVdslLineConfUpPsdMaskSelect', 'V.01.11 - add more values to zhoneVdslLineConfDownPsdMaskSelect - add more values to zhoneVdslLineConfUppsdMaskSelect', 'V.01.10 - Add zhoneVdslPhysCurrConnType - Add zhoneVdslPhysCurrProfile', "V.01.09 Accelity-2 additions - Add 'dynamic' option to zhoneVdslLineConfDownRateMode - Add 'dynamic' option to zhoneVdslLineConfUpRateMode - Add zhoneVdslLineConfDownBitSwap - Add zhoneVdslLineConfUpBitSwap - Add zhoneVdslLineConfAdslAnnexMModeEnabled - Add zhoneVdslLineConfAdslAnnexMPsdMask - Add zhoneVdslLineConfUS0BoundaryTone - Add zhoneVdslLineConfDownInp - Add zhoneVdslLineConfUpInp - Add zhoneVdslLineConfDownMaxInterleavingDelay - Add zhoneVdslLineConfUpMaxInterleavingDelay - Add zhoneVdslLineConfDownPsdMaskEnable - Add zhoneVdslLineConfUpPsdMaskEnable - Add zhoneVdslLineConfDownPsdMaskSelect - Add zhoneVdslLineConfUpPsdMaskSelect", 'V.01.08 - ADSL Fallback additions - add ADSL transmission modes - add ADSL objects to VDSL CO Profile - add ADSL objecst to VDSL CPE Profile', 'V.01.07 - modify zhoneVdslLineConfUpMaxAggregateTxPwr to conform with Conexant driver - modify zhoneVdslLineConfDownMaxAggregateTxPwr to conform with Conexant driver - mark up mib for vdslPerfDataTable - mark up mib for vdslChanPerfDataTable - In ZhoneVdslChanPerfDataTable, convert Counter64 objects to Integer32 objects. ', 'V.01.06 - modify zhoneVdslLineConfDownPsdShape to conform with Conexant driver values - modify zhoneVdslLineConfUpPsdShape to conform with Conexant driver values', 'V.01.05 - zhoneVdslLineAlarmConfProfileEntry is now indexed by ifIndex - add MIN/MAX values - add zhoneVdslPhysStatus ZHONE KEYWORDS - add zhoneVdslChanStatus ZHONE KEYWORDS - make phyVdsl.mib reflect new default values - vdslConfig: line-type - vdslConfig: band-opt-uasge - vdslCoConfig: pbo-control - vdslCoConfig: trellis - vdslCpeConfig: pbo-control - vdslCpeConfig: psd-template - vdslCpeConfig: trellis - fix spelling zhoneVdslLineConfDownGhsA43cTonePwr - cleanup min/max data rates and def values for them', 'V.01.04 - rename zhoneVdslLineConfSeltNoiseMeasurementTme to zhoneVdslLineConfSeltNoiseMeasurementTime', 'V.01.03 - move tables from phyDsl.mib - move zhoneVdslStatusTable from phyDsl.mib - move zhoneVdslPerfTable from phyDsl.mib ', 'V01.02 - add ZHONE-KEYWORDS', 'Initial version, published as RFC 3728.',))
if mibBuilder.loadTexts: zhoneVdslMib.setLastUpdated('201302271600Z')
if mibBuilder.loadTexts: zhoneVdslMib.setOrganization('ADSLMIB Working Group')
if mibBuilder.loadTexts: zhoneVdslMib.setContactInfo('WG-email: adslmib@ietf.org Info: https://www1.ietf.org/mailman/listinfo/adslmib Chair: Mike Sneed Sand Channel Systems Postal: P.O. Box 37324 Raleigh, NC 27627-7324 USA Email: sneedmike@hotmail.com Phone: +1 206 600 7022 Co-editor: Bob Ray PESA Switching Systems, Inc. Postal: 330-A Wynn Drive Huntsville, AL 35805 USA Email: rray@pesa.com Phone: +1 256 726 9200 ext. 142 Co-editor: Rajesh Abbi Alcatel USA Postal: 2301 Sugar Bush Road Raleigh, NC 27612-3339 USA Email: Rajesh.Abbi@alcatel.com Phone: +1 919 850 6194 ')
if mibBuilder.loadTexts: zhoneVdslMib.setDescription('The MIB module defining objects for the management of a pair of VDSL transceivers at each end of the VDSL line. Each such line has an entry in an ifTable which may include multiple transceiver lines. An agent may reside at either end of the VDSL line. However, the MIB is designed to require no management communication between them beyond that inherent in the low-level VDSL line protocol. The agent may monitor and control this protocol for its needs. VDSL lines may support optional Fast or Interleaved channels. If these are supported, additional entries corresponding to the supported channels must be created in the ifTable. Thus a VDSL line that supports both channels will have three entries in the ifTable, one for each physical, fast, and interleaved, whose ifType values are equal to vdsl(97), fast(125), and interleaved(124), respectively. The ifStackTable is used to represent the relationship between the entries. Naming Conventions: Vtuc -- (VTUC) transceiver at near (Central) end of line Vtur -- (VTUR) transceiver at Remote end of line Vtu -- One of either Vtuc or Vtur Curr -- Current Prev -- Previous Atn -- Attenuation ES -- Errored Second. SES -- Severely Errored Second UAS -- Unavailable Second LCS -- Line Code Specific Lof -- Loss of Frame Lol -- Loss of Link Los -- Loss of Signal Lpr -- Loss of Power xxxs -- Sum of Seconds in which xxx has occured (e.g., xxx = Lof, Los, Lpr, Lol) Max -- Maximum Mgn -- Margin Min -- Minimum Psd -- Power Spectral Density Snr -- Signal to Noise Ratio Tx -- Transmit Blks -- Blocks Copyright (C) The Internet Society (2004). This version of this MIB module is part of RFC 3728: see the RFC itself for full legal notices.')
class ZhoneVdslLineCodingType(TextualConvention, Integer32):
    description = 'This data type is used as the syntax for the VDSL Line Code. Attributes with this syntax identify the line coding used. Specified as an INTEGER, the three values are: other(1) -- none of the following mcm(2) -- Multiple Carrier Modulation scm(3) -- Single Carrier Modulation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("mcm", 2), ("scm", 3))

class ZhoneVdslLineEntity(TextualConvention, Integer32):
    description = 'Identifies a transceiver as being either Vtuc or Vtur. A VDSL line consists of two transceivers, a Vtuc and a Vtur. Attributes with this syntax reference the two sides of a line. Specified as an INTEGER, the two values are: vtuc(1) -- central site transceiver vtur(2) -- remote site transceiver'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vtuc", 1), ("vtur", 2))

zhoneVdslLineMib = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1))
zhoneVdslNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0))
vdslXtucPerf15MinLofsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 1)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLofs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLofsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf15MinLofsThreshTrap.setDescription('Loss of Framing 15-minute interval threshold (vdslLineAlarmConfThresh15MinLofs) reached.')
vdslXtucPerf15MinLossThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 2)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLoss"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLossThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf15MinLossThreshTrap.setDescription('Loss of Signal 15-minute interval threshold (vdslLineAlarmConfThresh15MinLoss) reached.')
vdslXtucPerf15MinLprsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 3)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLprs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLprsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf15MinLprsThreshTrap.setDescription('Loss of Power 15-minute interval threshold (vdslLineAlarmConfThresh15MinLprs) reached.')
vdslXtucPerf15MinLolsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 4)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLols"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLolsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf15MinLolsThreshTrap.setDescription('Loss of Link 15-minute interval threshold (vdslLineAlarmConfThresh15MinLols) reached.')
vdslXtucPerf15MinESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 5)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinESs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinESsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf15MinESsThreshTrap.setDescription('Errored Seconds 15-minute interval threshold (vdslLineAlarmConfThresh15MinESs) reached.')
vdslXtucPerf15MinSESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 6)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinSESs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinSESsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf15MinSESsThreshTrap.setDescription('Severely Errored Seconds 15-minute interval threshold (vdslLineAlarmConfThresh15MinSESs) reached.')
vdslXtucPerf15MinUASsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 7)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinUASs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinUASsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf15MinUASsThreshTrap.setDescription('Unavailable Seconds 15-minute interval threshold (vdslLineAlarmConfThresh15MinUASs) reached.')
vdslXtucPerf1DayLofsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 8)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLofs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLofsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf1DayLofsThreshTrap.setDescription('Loss of Framing 1-day interval threshold (vdslLineAlarmConfThresh1DayLofs) reached.')
vdslXtucPerf1DayLossThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 9)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLoss"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLossThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf1DayLossThreshTrap.setDescription('Loss of Signal 1-day interval threshold (vdslLineAlarmConfThresh1DayLoss) reached.')
vdslXtucPerf1DayLprsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 10)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLprs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLprsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf1DayLprsThreshTrap.setDescription('Loss of Power 1-day interval threshold (vdslLineAlarmConfThresh1DayLprs) reached.')
vdslXtucPerf1DayLolsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 11)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLols"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLolsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf1DayLolsThreshTrap.setDescription('Loss of Link 1-day interval threshold (vdslLineAlarmConfThresh1DayLols) reached.')
vdslXtucPerf1DayESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 12)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayESs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayESsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf1DayESsThreshTrap.setDescription('Errored Seconds 1-day interval threshold (vdslLineAlarmConfThresh1DayESs) reached.')
vdslXtucPerf1DaySESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 13)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DaySESs"))
if mibBuilder.loadTexts: vdslXtucPerf1DaySESsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf1DaySESsThreshTrap.setDescription('Severely Errored Seconds 1-day interval threshold (vdslLineAlarmConfThresh1DaySESs) reached.')
vdslXtucPerf1DayUASsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 14)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayUASs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayUASsThreshTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucPerf1DayUASsThreshTrap.setDescription('Unavailable Seconds 1-day interval threshold (vdslLineAlarmConfThresh1DayUASs) reached.')
zhoneVdslInitFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 15)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataInits"))
if mibBuilder.loadTexts: zhoneVdslInitFailureTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslInitFailureTrap.setDescription('Vtu initialization failed. ')
vdslXtucMinTxThresholdAlarmFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 16)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinTxThresholdAlarm"))
if mibBuilder.loadTexts: vdslXtucMinTxThresholdAlarmFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXtucMinTxThresholdAlarmFailureTrap.setDescription('This trap is thrown when the XTUC line rate syncs below the threshold rate as defined by zhoneVdslLineConfDownMinTxThresholdAlarm.')
vdslXturMinTxThresholdAlarmFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 17)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinTxThresholdAlarm"))
if mibBuilder.loadTexts: vdslXturMinTxThresholdAlarmFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vdslXturMinTxThresholdAlarmFailureTrap.setDescription('This trap is thrown when the XTUR line rate syncs below the threshold rate as defined by zhoneVdslLineConfUpMinTxThresholdAlarm.')
zhoneVdslMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1))
zhoneVdslLineTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1), )
if mibBuilder.loadTexts: zhoneVdslLineTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineTable.setDescription('This table includes common attributes describing both ends of the line. It is required for all VDSL physical interfaces. VDSL physical interfaces are those ifEntries where ifType is equal to vdsl(97).')
zhoneVdslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslLineEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineEntry.setDescription('An entry in the vdslLineTable.')
zhoneVdslLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 1), ZhoneVdslLineCodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslLineCoding.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineCoding.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineCoding.setDescription('Specifies the VDSL coding type used on this line.')
zhoneVdslLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noChannel", 1), ("fastOnly", 2), ("interleavedOnly", 3), ("fastOrInterleaved", 4), ("fastAndInterleaved", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslLineType.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineType.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineType.setDescription("Defines the type of VDSL physical line entity that exists, by defining whether and how the line is channelized. If the line is channelized, the value will be other than noChannel(1). This object defines which channel type(s) are supported. Defined values are: noChannel(1) -- no channels exist fastOnly(2) -- only fast channel exists interleavedOnly(3) -- only interleaved channel exists fastOrInterleaved(4) -- either fast or interleaved channel -- exist, but only one at a time fastAndInterleaved(5) -- both fast and interleaved channels -- exist Note that 'slow' and 'interleaved' refer to the same channel. In the case that the line is channelized, the manager can use the ifStackTable to determine the ifIndex for the associated channel(s).")
zhoneVdslLineConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineConfProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfProfile.setDescription('The value of this object identifies the row in the VDSL Line Configuration Profile Table, zhoneVdslLineConfProfileTable, which applies for this VDSL line, and channels if applicable. This object MUST be maintained in a persistent manner.')
zhoneVdslLineAlarmConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfile.setDescription('The value of this object identifies the row in the VDSL Line Alarm Configuration Profile Table, zhoneVdslLineAlarmConfProfileTable, which applies to this VDSL line, and channels if applicable. This object MUST be maintained in a persistent manner.')
zhoneVdslPhysTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2), )
if mibBuilder.loadTexts: zhoneVdslPhysTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysTable.setDescription('This table provides one row for each Vtu. Each row contains the Physical Layer Parameters table for that Vtu. VDSL physical interfaces are those ifEntries where ifType is equal to vdsl(97).')
zhoneVdslPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslPhysEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysEntry.setDescription('An entry in the vdslPhysTable.')
zhoneVdslPhysSide = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 1), ZhoneVdslLineEntity())
if mibBuilder.loadTexts: zhoneVdslPhysSide.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysSide.setDescription('Identifies whether the transceiver is the Vtuc or Vtur.')
zhoneVdslPhysInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysInvSerialNumber.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysInvSerialNumber.setDescription('The vendor specific string that identifies the vendor equipment.')
zhoneVdslPhysInvVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysInvVendorID.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysInvVendorID.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysInvVendorID.setDescription('The vendor ID code is a copy of the binary vendor identification field expressed as readable characters in hexadecimal notation.')
zhoneVdslPhysInvVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysInvVersionNumber.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysInvVersionNumber.setDescription('The vendor specific version number sent by this Vtu as part of the initialization messages. It is a copy of the binary version number field expressed as readable characters in hexadecimal notation.')
zhoneVdslPhysCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127))).setUnits('0.10dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrSnrMgn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrSnrMgn.setDescription('Noise Margin as seen by this Vtu with respect to its received signal in 0.10dB. The effective range is -31.75 to +31.75 dB.')
zhoneVdslPhysCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.10dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrAtn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrAtn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrAtn.setDescription('Measured difference in the total power transmitted by the peer Vtu and the total power received by this Vtu. The effective range is 0 to +63.75 dB.')
zhoneVdslPhysCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("lossOfFraming", 1), ("lossOfSignal", 2), ("lossOfPower", 3), ("lossOfSignalQuality", 4), ("lossOfLink", 5), ("dataInitFailure", 6), ("configInitFailure", 7), ("protocolInitFailure", 8), ("noPeerVtuPresent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrStatus.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrStatus.setDescription("Indicates current state of the Vtu line. This is a bit-map of possible conditions. The various bit positions are: 0 noDefect There are no defects on the line. 1 lossOfFraming Vtu failure due to not receiving a valid frame. 2 lossOfSignal Vtu failure due to not receiving signal. 3 lossOfPower Vtu failure due to loss of power. 4 lossOfSignalQuality Loss of Signal Quality is declared when the Noise Margin falls below the Minimum Noise Margin, or the bit-error-rate exceeds 10^-7. 5 lossOfLink Vtu failure due to inability to link with peer Vtu. Set whenever the transceiver is in the 'Warm Start' state. 6 dataInitFailure Vtu failure during initialization due to bit errors corrupting startup exchange data. 7 configInitFailure Vtu failure during initialization due to peer Vtu not able to support requested configuration. 8 protocolInitFailure Vtu failure during initialization due to incompatible protocol used by the peer Vtu. 9 noPeerVtuPresent Vtu failure during initialization due to no activation sequence detected from peer Vtu. This is intended to supplement ifOperStatus.")
zhoneVdslPhysCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setUnits('0.1dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrOutputPwr.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrOutputPwr.setDescription('Measured total output power transmitted by this VTU. This is the measurement that was reported during the last activation sequence.')
zhoneVdslPhysCurrAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 9), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrAttainableRate.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrAttainableRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrAttainableRate.setDescription('Indicates the maximum currently attainable data rate in steps of 1000 bits/second by the Vtu. This value will be equal to or greater than vdslPhysCurrLineRate. Note that for SCM, the minimum and maximum data rates are equal. Note: 1 kbps = 1000 bps.')
zhoneVdslPhysCurrLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 10), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrLineRate.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrLineRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrLineRate.setDescription('Indicates the current data rate in steps of 1000 bits/second by the Vtu. This value will be less than or equal to vdslPhysCurrAttainableRate. Note: 1 kbps = 1000 bps.')
zhoneVdslPhysCurrConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("not-connected", 2), ("invalid", 3), ("adsl", 4), ("adsl2", 5), ("adsl2-annexm", 6), ("adsl2plus", 7), ("adsl2plus-annexm", 8), ("vdsl1", 9), ("vdsl2", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrConnType.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrConnType.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrConnType.setDescription('Indicates current connection type. unknown(1) - could not determine connection type not-connected(2) - connection has not been established invalid(3) - unknown connection established adsl(4) - G.992.1/2 adsl2(5) - G.992.3/4 adsl2-annexm(6) - G.992.3/4 with Annex M adsl2plus(7) - G.992.5 adsl2plus-annexm(8) - G.992.5 with Annex M vdsl1(9) - G.993.1 vdsl2(10) - G.993.2 ')
zhoneVdslPhysCurrProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("g993-2-8a", 1), ("g993-2-8b", 2), ("g993-2-8c", 3), ("g993-2-8d", 4), ("g993-2-12a", 5), ("g993-2-12b", 6), ("g993-2-17a", 7), ("g993-2-30a", 8), ("no-vdsl-connection", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrProfile.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPhysCurrProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysCurrProfile.setDescription('Indicates current VDSL profile being used in the connection. This object is only valid for VDSL connections.')
zhoneVdslPhysPhyRActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysPhyRActive.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysPhyRActive.setDescription('Phy Retransmit Rx Queue Active.')
zhoneVdslPhysGinpActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysGinpActive.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslPhysGinpActive.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysGinpActive.setDescription('G.INP/ITU-G.998.4 feature active')
zhoneVdslPhysTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atm", 1), ("ptm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysTransportMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhysTransportMode.setDescription('Transport mode, either ATM or PTM')
zhoneVdslChanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3), )
if mibBuilder.loadTexts: zhoneVdslChanTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanTable.setDescription('This table provides one row for each Vtu channel. VDSL channel interfaces are those ifEntries where ifType is equal to interleave(124) or fast(125).')
zhoneVdslChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslChanEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanEntry.setDescription('An entry in the vdslChanTable.')
zhoneVdslChanInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanInterleaveDelay.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanInterleaveDelay.setDescription('Interleave Delay for this channel. Interleave delay applies only to the interleave (slow) channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency. In the case where the ifType is fast(125), return a value of zero.')
zhoneVdslChanCrcBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 2), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCrcBlockLength.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanCrcBlockLength.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCrcBlockLength.setDescription('Indicates the length of the channel data-block on which the CRC operates.')
zhoneVdslChanCurrTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 3), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurrTxRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurrTxRate.setDescription('Actual transmit data rate on this channel. Note: 1 kbps = 1000 bps.')
zhoneVdslChanCurrTxSlowBurstProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1275))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurrTxSlowBurstProtect.setReference('ITU-T G.997.1, section 7.3.2.3')
if mibBuilder.loadTexts: zhoneVdslChanCurrTxSlowBurstProtect.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurrTxSlowBurstProtect.setDescription('Actual level of impulse noise (burst) protection for an interleaved (slow) channel. This parameter is not applicable to fast channels. For fast channels, a value of zero shall be returned.')
zhoneVdslChanCurrTxFastFec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurrTxFastFec.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurrTxFastFec.setDescription('Actual Forward Error Correction (FEC) redundancy related overhead for a fast channel. This parameter is not applicable to an interleaved (slow) channel. For interleaved channels, a value of zero shall be returned.')
zhoneVdslPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4), )
if mibBuilder.loadTexts: zhoneVdslPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataTable.setDescription('This table provides one row for each VDSL physical interface. VDSL physical interfaces are those ifEntries where ifType is equal to vdsl(97).')
zhoneVdslPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataEntry.setDescription('An entry in the vdslPerfDataTable.')
zhoneVdslPerfDataValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataValidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataValidIntervals.setDescription('Valid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslPerfDataInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataInvalidIntervals.setDescription('Invalid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslPerfDataLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLofs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataLofs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataLofs.setDescription('Count of seconds since the unit was last reset that there was Loss of Framing.')
zhoneVdslPerfDataLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLoss.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataLoss.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataLoss.setDescription('Count of seconds since the unit was last reset that there was Loss of Signal.')
zhoneVdslPerfDataLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLprs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataLprs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataLprs.setDescription('Count of seconds since the unit was last reset that there was Loss of Power.')
zhoneVdslPerfDataLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLols.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataLols.setDescription('Count of seconds since the unit was last reset that there was Loss of Link.')
zhoneVdslPerfDataESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataESs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataESs.setDescription('Count of Errored Seconds since the unit was last reset. An Errored Second is a one-second interval containing one or more CRC anomalies, or one or more LOS or LOF defects.')
zhoneVdslPerfDataSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataSESs.setDescription('Count of Severely Errored Seconds since the unit was last reset.')
zhoneVdslPerfDataUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataUASs.setDescription('Count of Unavailable Seconds since the unit was last reset.')
zhoneVdslPerfDataInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 10), Unsigned32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataInits.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataInits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataInits.setDescription('Count of the line initialization attempts since the unit was last reset. This count includes both successful and failed attempts.')
zhoneVdslPerfDataCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval.')
zhoneVdslPerfDataCurr15MinLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLofs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLofs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLofs.setDescription('Count of seconds during this interval that there was Loss of Framing.')
zhoneVdslPerfDataCurr15MinLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLoss.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLoss.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLoss.setDescription('Count of seconds during this interval that there was Loss of Signal.')
zhoneVdslPerfDataCurr15MinLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLprs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLprs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLprs.setDescription('Count of seconds during this interval that there was Loss of Power.')
zhoneVdslPerfDataCurr15MinLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLols.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLols.setDescription('Count of seconds during this interval that there was Loss of Link.')
zhoneVdslPerfDataCurr15MinESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinESs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinESs.setDescription('Count of Errored Seconds during this interval. An Errored Second is a one-second interval containing one or more CRC anomalies, or one or more LOS or LOF defects.')
zhoneVdslPerfDataCurr15MinSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinSESs.setDescription('Count of Severely Errored Seconds during this interval.')
zhoneVdslPerfDataCurr15MinUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 18), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinUASs.setDescription('Count of Unavailable Seconds during this interval.')
zhoneVdslPerfDataCurr15MinInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 19), Unsigned32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinInits.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinInits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinInits.setDescription('Count of the line initialization attempts during this interval. This count includes both successful and failed attempts.')
zhoneVdslPerfData1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfData1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfData1DayValidIntervals.setDescription('Valid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslPerfData1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfData1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfData1DayInvalidIntervals.setDescription('Invalid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslPerfDataCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayTimeElapsed.setDescription('Number of seconds that have elapsed since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DayLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLofs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLofs.setDescription('Count of Loss of Framing (LOF) Seconds since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DayLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 24), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLoss.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLoss.setDescription('Count of Loss of Signal (LOS) Seconds since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DayLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 25), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLprs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLprs.setDescription('Count of Loss of Power (LPR) Seconds since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DayLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 26), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLols.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLols.setDescription('Count of Loss of Link (LOL) Seconds since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 27), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayESs.setDescription('Count of Errored Seconds (ES) since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 28), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DaySESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DaySESs.setDescription('Count of Severely Errored Seconds (SES) since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 29), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayUASs.setDescription('Count of Unavailable Seconds (UAS) since the beginning of the current 1-day interval.')
zhoneVdslPerfDataCurr1DayInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 30), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayInits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayInits.setDescription('Count of the line initialization attempts since the beginning of the current 1-day interval. This count includes both successful and failed attempts.')
zhoneVdslPhyrRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrRetransmittedCodewords.setDescription('Retransmitted Codewords')
zhoneVdslPhyrCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCorrectedRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrCorrectedRetransmittedCodewords.setDescription('Retransmitted corrected Codewords')
zhoneVdslPhyrUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrUncorrectableRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrUncorrectableRetransmittedCodewords.setDescription('Retransmitted uncorrectable Codewords')
zhoneVdslPhyrCurr15MinRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinRetransmittedCodewords.setDescription('Current 15 minutes Retransmitted Codewords')
zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords.setDescription('Current 15 minutes Retransmitted Corrected Codewords')
zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords.setDescription('Current 15 minutes Retransmitted Uncorrectable Codewords')
zhoneVdslPhyrCurr1DayRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayRetransmittedCodewords.setDescription('Current Day Retransmitted Codewords')
zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords.setDescription('Current Day Retransmitted Corrected Codewords')
zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords.setDescription('Current Day Retransmitted Uncorrectable Codewords')
zhoneVdslPhyrPrev1DayRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayRetransmittedCodewords.setDescription('Previous Day Retransmitted Codewords')
zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords.setDescription('Previous Day Retransmitted Corrected Codewords')
zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords.setDescription('Previous Day Retransmitted Uncorrectable Codewords')
zhoneVdslGinpLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpLeftrSecs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpLeftrSecs.setDescription('LEFTRS - This counter counts the number of seconds that experienced a Low Error Free Throughput Rate (LEFTR), i,e., seconds during which the Error Free Throughput dropped below the configured threshold.')
zhoneVdslGinpErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpErrorFreeBits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpErrorFreeBits.setDescription('errorFreeBits - This counter counts the number of bits that crossed the alpha1/beta1 interface (bits available to carry user payload). ')
zhoneVdslGinpMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpMinEftr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpMinEftr.setDescription('minEFTR - This performance monitoring parameter records the lowest value of Error Free Throughput during the current interval.')
zhoneVdslGinpCurr15MinLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinLeftrSecs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinLeftrSecs.setDescription('LEFTRS - This counter counts the number of seconds that experienced a Low Error Free Throughput Rate (LEFTR), i,e., seconds during which the Error Free Throughput dropped below the configured threshold. This is the count for the current 15 minutes.')
zhoneVdslGinpCurr15MinErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinErrorFreeBits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinErrorFreeBits.setDescription('errorFreeBits - This counter counts the number of bits that crossed the alpha1/beta1 interface (bits available to carry user payload). This is the count for the current 15 minutes.')
zhoneVdslGinpCurr15MinMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinMinEftr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinMinEftr.setDescription('minEFTR - This performance monitoring parameter records the lowest value of Error Free Throughput during the current interval. This is the count for the current 15 minutes.')
zhoneVdslGinpCurr1DayLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayLeftrSecs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayLeftrSecs.setDescription('LEFTRS - This counter counts the number of seconds that experienced a Low Error Free Throughput Rate (LEFTR), i,e., seconds during which the Error Free Throughput dropped below the configured threshold. This is the count for the current day.')
zhoneVdslGinpCurr1DayErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayErrorFreeBits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayErrorFreeBits.setDescription('errorFreeBits - This counter counts the number of bits that crossed the alpha1/beta1 interface (bits available to carry user payload). This is the count for the current day.')
zhoneVdslGinpCurr1DayMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayMinEftr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayMinEftr.setDescription('minEFTR - This performance monitoring parameter records the lowest value of Error Free Throughput during the current interval. This is the count for the current day.')
zhoneVdslGinpPrev1DayLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayLeftrSecs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayLeftrSecs.setDescription('LEFTRS - This counter counts the number of seconds that experienced a Low Error Free Throughput Rate (LEFTR), i,e., seconds during which the Error Free Throughput dropped below the configured threshold. This is the count for the previous day.')
zhoneVdslGinpPrev1DayErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayErrorFreeBits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayErrorFreeBits.setDescription('errorFreeBits - This counter counts the number of bits that crossed the alpha1/beta1 interface (bits available to carry user payload). This is the count for the previous day.')
zhoneVdslGinpPrev1DayMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayMinEftr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayMinEftr.setDescription('minEFTR - This performance monitoring parameter records the lowest value of Error Free Throughput during the current interval. This is the count for the previous day.')
zhoneVdslPerfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5), )
if mibBuilder.loadTexts: zhoneVdslPerfIntervalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalTable.setDescription('This table provides one row for each Vtu performance data collection interval. VDSL physical interfaces are those ifEntries where ifType is equal to vdsl(97).')
zhoneVdslPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslPerfIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslPerfIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalEntry.setDescription('An entry in the vdslPerfIntervalTable.')
zhoneVdslPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: zhoneVdslPerfIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalNumber.setDescription('Performance Data Interval number 1 is the most recent previous interval; interval 96 is 24 hours ago. Intervals 2 to 96 are optional.')
zhoneVdslPerfIntervalLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 2), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLofs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLofs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLofs.setDescription('Count of seconds in the interval when there was Loss of Framing.')
zhoneVdslPerfIntervalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLoss.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLoss.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLoss.setDescription('Count of seconds in the interval when there was Loss of Signal.')
zhoneVdslPerfIntervalLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 4), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLprs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLprs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLprs.setDescription('Count of seconds in the interval when there was Loss of Power.')
zhoneVdslPerfIntervalLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 5), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLols.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLols.setDescription('Count of seconds in the interval when there was Loss of Link.')
zhoneVdslPerfIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 6), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalESs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalESs.setDescription('Count of Errored Seconds (ES) in the interval. An Errored Second is a one-second interval containing one or more CRC anomalies, one or more LOS or LOF defects.')
zhoneVdslPerfIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 7), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalSESs.setDescription('Count of Severely Errored Seconds in the interval.')
zhoneVdslPerfIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 8), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalUASs.setDescription('Count of Unavailable Seconds in the interval.')
zhoneVdslPerfIntervalInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 9), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalInits.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalInits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerfIntervalInits.setDescription('Count of the line initialization attempts during this interval. This count includes both successful and failed attempts.')
zhoneVdslPerf1DayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6), )
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalTable.setDescription('This table provides one row for each VDSL performance data collection interval. This table contains live data from equipment. As such, it is NOT persistent.')
zhoneVdslPerf1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalEntry.setDescription('An entry in the vdslPerf1DayIntervalTable.')
zhoneVdslPerf1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalNumber.setDescription('History Data Interval number. Interval 1 is the most recent previous day; interval 30 is 30 days ago. Intervals 2 to 30 are optional.')
zhoneVdslPerf1DayIntervalMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalMoniSecs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalMoniSecs.setDescription('The amount of time in the 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
zhoneVdslPerf1DayIntervalLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLofs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLofs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLofs.setDescription('Count of Loss of Frame (LOF) Seconds during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs.')
zhoneVdslPerf1DayIntervalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLoss.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLoss.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLoss.setDescription('Count of Loss of Signal (LOS) Seconds during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs.')
zhoneVdslPerf1DayIntervalLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLprs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLprs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLprs.setDescription('Count of Loss of Power (LPR) Seconds during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs.')
zhoneVdslPerf1DayIntervalLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLols.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLols.setDescription('Count of Loss of Link (LOL) Seconds during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs.')
zhoneVdslPerf1DayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalESs.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalESs.setDescription('Count of Errored Seconds (ES) during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs.')
zhoneVdslPerf1DayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalSESs.setDescription('Count of Severely Errored Seconds (SES) during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs.')
zhoneVdslPerf1DayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalUASs.setDescription('Count of Unavailable Seconds (UAS) during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs.')
zhoneVdslPerf1DayIntervalInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalInits.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalInits.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalInits.setDescription('Count of the line initialization attempts during the 1-day interval as measured by vdslPerf1DayIntervalMoniSecs. This count includes both successful and failed attempts.')
zhoneVdslChanPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7), )
if mibBuilder.loadTexts: zhoneVdslChanPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanPerfDataTable.setDescription('This table provides one row for each Vtu channel. VDSL channel interfaces are those ifEntries where ifType is equal to interleave(124) or fast(125).')
zhoneVdslChanPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslChanPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanPerfDataEntry.setDescription('An entry in the vdslChanPerfDataTable.')
zhoneVdslChanValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanValidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanValidIntervals.setDescription('Valid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslChanInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanInvalidIntervals.setDescription('Invalid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslChanFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 3), Integer32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanFixedOctets.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanFixedOctets.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanFixedOctets.setDescription('Count of corrected octets since the unit was last reset.')
zhoneVdslChanBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 4), Integer32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanBadBlks.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanBadBlks.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanBadBlks.setDescription('Count of uncorrectable blocks since the unit was last reset.')
zhoneVdslChanCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval.')
zhoneVdslChanCurr15MinFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 6), Integer32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinFixedOctets.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinFixedOctets.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinFixedOctets.setDescription('Count of corrected octets in this interval.')
zhoneVdslChanCurr15MinBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 7), Integer32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinBadBlks.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinBadBlks.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinBadBlks.setDescription('Count of uncorrectable blocks in this interval.')
zhoneVdslChan1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayValidIntervals.setDescription('Valid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslChan1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayInvalidIntervals.setDescription('Invalid Intervals per definition found in HC-PerfHist-TC-MIB.')
zhoneVdslChanCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayTimeElapsed.setDescription('Number of seconds that have elapsed since the beginning of the current 1-day interval.')
zhoneVdslChanCurr1DayFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 11), Integer32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayFixedOctets.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayFixedOctets.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayFixedOctets.setDescription('Count of corrected octets since the beginning of the current 1-day interval.')
zhoneVdslChanCurr1DayBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 12), Integer32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayBadBlks.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayBadBlks.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayBadBlks.setDescription('Count of uncorrectable blocks since the beginning of the current 1-day interval.')
zhoneVdslChanIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8), )
if mibBuilder.loadTexts: zhoneVdslChanIntervalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanIntervalTable.setDescription('This table provides one row for each Vtu channel data collection interval. VDSL channel interfaces are those ifEntries where ifType is equal to interleave(124) or fast(125).')
zhoneVdslChanIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslChanIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslChanIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanIntervalEntry.setDescription('An entry in the vdslChanIntervalTable.')
zhoneVdslChanIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: zhoneVdslChanIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanIntervalNumber.setDescription('Performance Data Interval number 1 is the most recent previous interval; interval 96 is 24 hours ago. Intervals 2 to 96 are optional.')
zhoneVdslChanIntervalFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1, 2), HCPerfIntervalCount()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanIntervalFixedOctets.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanIntervalFixedOctets.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanIntervalFixedOctets.setDescription('Count of corrected octets in this interval.')
zhoneVdslChanIntervalBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1, 3), HCPerfIntervalCount()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanIntervalBadBlks.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChanIntervalBadBlks.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChanIntervalBadBlks.setDescription('Count of uncorrectable blocks in this interval.')
zhoneVdslChan1DayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9), )
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalTable.setDescription('This table provides one row for each VDSL performance data collection interval. This table contains live data from equipment. As such, it is NOT persistent.')
zhoneVdslChan1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalEntry.setDescription('An entry in the vdslChan1DayIntervalTable.')
zhoneVdslChan1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalNumber.setDescription('History Data Interval number. Interval 1 is the most recent previous day; interval 30 is 30 days ago. Intervals 2 to 30 are optional.')
zhoneVdslChan1DayIntervalMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalMoniSecs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalMoniSecs.setDescription('The amount of time in the 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
zhoneVdslChan1DayIntervalFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 3), HCPerfCurrentCount()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalFixedOctets.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalFixedOctets.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalFixedOctets.setDescription('Count of corrected octets in this interval.')
zhoneVdslChan1DayIntervalBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 4), HCPerfCurrentCount()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalBadBlks.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalBadBlks.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalBadBlks.setDescription('Count of uncorrectable blocks in this interval.')
zhoneVdslLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11), )
if mibBuilder.loadTexts: zhoneVdslLineConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfProfileTable.setDescription('This table contains information on the VDSL line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the VDSL line. Entries in this table MUST be maintained in a persistent manner.')
zhoneVdslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslLineConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfProfileEntry.setDescription("Each entry consists of a list of parameters that represents the configuration of a VDSL line. A default profile with an index of 'DEFVAL', will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.")
zhoneVdslLineConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: zhoneVdslLineConfProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfProfileName.setDescription("This object identifies a row in this table. A default profile with an index of 'DEFVAL', will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.")
zhoneVdslLineConfDownRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("adapt-at-init", 2), ("dynamic", 3))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownRateMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownRateMode.setDescription('Specifies the rate selection behavior for the line in the downstream direction. manual(1) forces the rate to the configured rate adaptAtInit(2) adapts the line at initialization only dynamic(3) adapts the line at initialization and showtime')
zhoneVdslLineConfUpRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("adapt-at-init", 2), ("dynamic", 3))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpRateMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpRateMode.setDescription('Specifies the rate selection behavior for the line in the upstream direction. manual(1) forces the rate to the configured rate adaptAtInit(2) adapts the line at initialization only dynamic(3) adapts the line at initialization and showtime')
zhoneVdslLineConfDownMaxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 200)).clone(145)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxPwr.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxPwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxPwr.setDescription('Specifies the maximum aggregate downstream power level in the range -5.0 to 20.0 dBm.')
zhoneVdslLineConfUpMaxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 200)).clone(145)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxPwr.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxPwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxPwr.setDescription('Specifies the maximum aggregate upstream power level in the range -13.0 to 20.0 dBm.')
zhoneVdslLineConfDownMaxSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(160)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxSnrMgn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxSnrMgn.setDescription('Specifies the maximum downstream Signal/Noise Margin in units of 0.10 dB, for a range of 0 to 31.0 dB.')
zhoneVdslLineConfDownMinSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinSnrMgn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinSnrMgn.setDescription('Specifies the minimum downstream Signal/Noise Margin in units of 0.10 dB, for a range of 0 to 31.0 dB.')
zhoneVdslLineConfDownTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(24)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSnrMgn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSnrMgn.setDescription('Specifies the target downstream Signal/Noise Margin in units of 0.10 dB, for a range of 0 to 31.0 dB. This is the Noise Margin the transceivers must achieve with a BER of 10^-7 or better to successfully complete initialization.')
zhoneVdslLineConfUpMaxSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(160)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxSnrMgn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxSnrMgn.setDescription('Specifies the maximum upstream Signal/Noise Margin in units of 0.10 dB, for a range of 0 to 31.0 dB.')
zhoneVdslLineConfUpMinSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinSnrMgn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinSnrMgn.setDescription('Specifies the minimum upstream Signal/Noise Margin in units of 0.10 dB, for a range of 0 to 31.0 dB.')
zhoneVdslLineConfUpTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(24)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSnrMgn.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSnrMgn.setDescription('Specifies the target upstream Signal/Noise Margin in units of 0.10 dB, for a range of 0 to 31.0 dB. This is the Noise Margin the transceivers must achieve with a BER of 10^-7 or better to successfully complete initialization.')
zhoneVdslLineConfDownFastMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownFastMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownFastMaxDataRate.setDescription('Specifies the maximum downstream fast channel data rate in steps of 1000 bits/second.')
zhoneVdslLineConfDownFastMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownFastMinDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownFastMinDataRate.setDescription('Specifies the minimum downstream fast channel data rate in steps of 1000 bits/second.')
zhoneVdslLineConfDownSlowMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownSlowMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownSlowMaxDataRate.setDescription('Specifies the maximum downstream slow channel data rate in steps of 1000 bits/second. The maximum aggregate downstream transmit speed of the line can be derived from the sum of maximum downstream fast and slow channel data rates.')
zhoneVdslLineConfDownSlowMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownSlowMinDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownSlowMinDataRate.setDescription('Specifies the minimum downstream slow channel data rate in steps of 1000 bits/second. The minimum aggregate downstream transmit speed of the line can be derived from the sum of minimum downstream fast and slow channel data rates.')
zhoneVdslLineConfUpFastMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpFastMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpFastMaxDataRate.setDescription('Specifies the maximum upstream fast channel data rate in steps of 1000 bits/second. The maximum aggregate upstream transmit speed of the line can be derived from the sum of maximum upstream fast and slow channel data rates.')
zhoneVdslLineConfUpFastMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpFastMinDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpFastMinDataRate.setDescription('Specifies the minimum upstream fast channel data rate in steps of 1000 bits/second. The minimum aggregate upstream transmit speed of the line can be derived from the sum of minimum upstream fast and slow channel data rates.')
zhoneVdslLineConfUpSlowMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpSlowMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpSlowMaxDataRate.setDescription('Specifies the maximum upstream slow channel data rate in steps of 1000 bits/second.')
zhoneVdslLineConfUpSlowMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpSlowMinDataRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpSlowMinDataRate.setDescription('Specifies the minimum upstream slow channel data rate in steps of 1000 bits/second.')
zhoneVdslLineConfDownRateRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownRateRatio.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownRateRatio.setDescription('For dynamic rate adaptation at startup, the allocation of data rate in excess of the minimum data rate for each channel is controlled by the object. This object specifies the ratio of the allocation of the excess data rate between the fast and the slow channels. This allocation represents downstream Fast Channel Allocation / Slow Channel Allocation.')
zhoneVdslLineConfUpRateRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpRateRatio.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpRateRatio.setDescription('For dynamic rate adaptation at startup, the allocation of data rate in excess of the minimum data rate for each channel is controlled by the object. This object specifies the ratio of the allocation of the excess data rate between the fast and the slow channels. This allocation represents upstream Fast Channel Allocation/Slow Channel Allocation.')
zhoneVdslLineConfDownMaxInterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxInterDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxInterDelay.setDescription('Specifies the maximum interleave delay for the downstream slow channel.')
zhoneVdslLineConfUpMaxInterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxInterDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxInterDelay.setDescription('Specifies the maximum interleave delay for the upstream slow channel.')
zhoneVdslLineConfDownPboControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2), ("manual", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPboControl.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPboControl.setDescription('Downstream power backoff (PBO) control for this line. For transceivers which do not support downstream PBO control, this object MUST be fixed at disabled(1). If auto(2) is selected, the transceiver will automatically adjust the power backoff. If manual(3) is selected, then the transceiver will use the value from zhoneVdslLineConfDownPboLevel.')
zhoneVdslLineConfUpPboControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2), ("manual", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboControl.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboControl.setDescription('Upstream power backoff (PBO) control for this line. For transceivers which do not support upstream PBO control, this object MUST be fixed at disabled(1). If auto(2) is selected, the transceiver will automatically adjust the power backoff. If manual(3) is selected, then the transceiver will use the value from zhoneVdslLineConfUpPboLevel.')
zhoneVdslLineConfDownPboLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setUnits('0.25dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPboLevel.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPboLevel.setDescription('Specifies the downstream backoff level to be used when vdslLineConfDownPboControl = manual(3).')
zhoneVdslLineConfUpPboLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setUnits('0.25dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboLevel.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboLevel.setDescription('Specifies the upstream backoff level to be used when vdslLineConfUpPboControl = manual(3).')
zhoneVdslLineConfDeploymentScenario = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fttCab", 1), ("fttEx", 2), ("other", 3))).clone('fttCab')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDeploymentScenario.setReference('DSL Forum TR-057')
if mibBuilder.loadTexts: zhoneVdslLineConfDeploymentScenario.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDeploymentScenario.setDescription('The VDSL line deployment scenario. When using fttCab(1), the VTU-C is located in a street cabinet. When using fttEx(2), the VTU-C is located at the central office. Changes to this value will have no effect on the transceiver.')
zhoneVdslLineConfAdslPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("adslOverPots", 2), ("adslOverISDN", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslPresence.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfAdslPresence.setDescription('Indicates presence of ADSL service in the associated cable bundle/binder. none(1) indicates no ADSL service in the bundle adslOverPots(2) indicates ADSL service over POTS is present in the bundle adslOverISDN(3) indicates ADSL service over ISDN is present in the bundle')
zhoneVdslLineConfApplicableStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ansi", 1), ("etsi", 2), ("itu", 3), ("other", 4))).clone('ansi')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfApplicableStandard.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfApplicableStandard.setDescription('The VDSL standard to be used for the line. ansi(1) indicates ANSI standard etsi(2) indicates ETSI standard itu(3) indicates ITU standard other(4) indicates a standard other than the above.')
zhoneVdslLineConfBandPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("bandPlan997", 1), ("bandPlan998", 2), ("bandPlanFx", 3), ("other", 4), ("bandPlan997-2", 5), ("bandPlan997-3", 6), ("bandPlan998-2", 7), ("bandPlan998-3", 8), ("bandPlan998-17-6", 9), ("fx-2", 10), ("fx-3", 11), ("china-a-2", 12), ("china-a-3", 13), ("china-b-2", 14), ("china-b-3", 15))).clone('bandPlan998')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfBandPlan.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfBandPlan.setDescription('The VDSL band plan to be used for the line. bandPlan997(1) is to be used for ITU-T G.993.1 Bandplan-B ETSI Bandplan ANSI Plan 997 bandPlan998(2) is to be used for ITU-T G.993.1 Bandplan-A ANSI Plan 998 bandPlanFx(3) is to be used for ITU-T G.993.1 Bandplan-C. other(4) is to be used for non-standard bandplans. If this object is set to bandPlanFx(3), then the object vdslLineConfBandPlanFx MUST also be set.')
zhoneVdslLineConfBandPlanFx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3750, 12000)).clone(3750)).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfBandPlanFx.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfBandPlanFx.setDescription('The frequency limit between bands D2 and U2 when zhoneVdslLineConfBandPlan is set to bandPlanFx(3).')
zhoneVdslLineConfBandOptUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("upstream", 2), ("downstream", 3), ("upstream-forced", 4))).clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfBandOptUsage.setReference('ITU-T G.993.1, section 6.1')
if mibBuilder.loadTexts: zhoneVdslLineConfBandOptUsage.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfBandOptUsage.setDescription('Defines the VDSL link use of the optional frequency range [25kHz - 138kHz] (Opt). unused(1) indicates Opt is unused upstream(2) indicates Opt usage is for upstream downstream(3) indicates Opt usage is for downstream. upstreamForced(4) indicates forced upstream')
zhoneVdslLineConfUpPsdTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ansi-fftex-m1", 3), ("ansi-fftex-m2", 4), ("ansi-fftcab-m1", 5), ("fftcab-m2", 6), ("etsi-m1", 7), ("etsi-m2", 8), ("psd-custom", 9))).clone('ansi-fftcab-m1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdTemplate.setReference('DSL TR-057')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdTemplate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdTemplate.setDescription('This object has been modified by Zhone. The upstream PSD template to be used for the line. Here, templateMask1(1) refers to a notched mask that limits the transmitted PSD within the internationally standardized HAM (Handheld Amateur Radio) radio bands, while templateMask2(2) refers to an unnotched mask. The masks themselves depend upon the applicable standard being used (vdslLineConfApplicableStandard).')
zhoneVdslLineConfDownPsdTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("ansi-fftex-m1", 3), ("ansi-fftex-m2", 4), ("ansi-fftcab-m1", 5), ("fftcab-m2", 6), ("fftcab-m1-adsl", 7), ("fftcab-m1-adslplus", 8), ("fftcab-m2-adsl", 9), ("fftcab-m2-adslplus", 10), ("etsi-pexp1-m1", 11), ("etsi-pexp1-m2", 12), ("etsi-pexp2-m1", 13), ("etsi-pexp2-m2", 14), ("psd-custom", 15), ("etsi-pexm2-sample1", 16), ("etsi-pexm2-sample2", 17), ("etsi-pexm2-sample3", 18), ("etsi-pexm2-sample4", 19), ("etsi-pcab-m1", 20), ("etsi-pcab-m2", 21))).clone('ansi-fftcab-m1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdTemplate.setReference('DSL TR-057')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdTemplate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdTemplate.setDescription('This object has been modified by Zhone. The downstream PSD template to be used for the line. Here, templateMask1(1) refers to a notched mask that limits the transmitted PSD within the internationally standardized HAM (Handheld Amateur Radio) radio bands, while templateMask2(2) refers to an unnotched mask. The masks themselves depend upon the applicable standard being used (vdslLineConfApplicableStandard).')
zhoneVdslLineConfHamBandMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 36), Bits().clone(namedValues=NamedValues(("customNotch1", 0), ("customNotch2", 1), ("amateurBand30m", 2), ("amateurBand40m", 3), ("amateurBand80m", 4), ("amateurBand160m", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfHamBandMask.setReference('DSLF TR-057, section 2.6')
if mibBuilder.loadTexts: zhoneVdslLineConfHamBandMask.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfHamBandMask.setDescription('The transmit power spectral density mask code, used to avoid interference with HAM (Handheld Amateur Radio) radio bands by introducing power control (notching) in one or more of these bands. Amateur radio band notching is defined in the VDSL spectrum as follows: Band Start Frequency Stop Frequency ---- ------------------ -------------------------------- 30m 1810 kHz 2000 kHz 40m 3500 kHz 3800 kHz (ETSI); 4000 kHz (ANSI) 80m 7000 kHz 7100 kHz (ETSI); 7300 kHz (ANSI) 160m 10100 kHz 10150 kHz Notching for each standard band can be enabled or disabled via the bit mask. Two custom notches may be specified. If either of these are enabled via the bit mask, then the following objects MUST be specified: If customNotch1 is enabled, then both zhoneVdslLineConfCustomNotch1Start zhoneVdslLineConfCustomNotch1Stop MUST be specified. If customNotch2 is enabled, then both zhoneVdslLineConfCustomNotch2Start zhoneVdslLineConfCustomNotch2Stop MUST be specified.')
zhoneVdslLineConfCustomNotch1Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 37), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch1Start.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch1Start.setDescription('Specifies the start frequency of custom HAM (Handheld Amateur Radio) notch 1. zhoneVdslLineConfCustomNotch1Start MUST be less than or equal to vdslLineConfCustomNotch1Stop.')
zhoneVdslLineConfCustomNotch1Stop = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 38), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch1Stop.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch1Stop.setDescription('Specifies the stop frequency of custom HAM (Handheld Amateur Radio) notch 1. zhoneVdslLineConfCustomNotch1Stop MUST be greater than or equal to vdslLineConfCustomNotch1Start.')
zhoneVdslLineConfCustomNotch2Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 39), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch2Start.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch2Start.setDescription('Specifies the start frequency of custom HAM (Handheld Amateur Radio) notch 2. zhoneVdslLineConfCustomNotch2Start MUST be less than or equal to vdslLineConfCustomNotch2Stop.')
zhoneVdslLineConfCustomNotch2Stop = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 40), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch2Stop.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch2Stop.setDescription('Specifies the stop frequency of custom HAM (Handheld Amateur Radio) notch 2. zhoneVdslLineConfCustomNotch2Stop MUST be greater than or equal to vdslLineConfCustomNotch2Start.')
zhoneVdslLineConfDownTargetSlowBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1275)).clone(5)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSlowBurst.setReference('ITU-T G.997.1, section 7.3.2.3')
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSlowBurst.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSlowBurst.setDescription('Specifies the target level of impulse noise (burst) protection for an interleaved (slow) channel.')
zhoneVdslLineConfUpTargetSlowBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1275)).clone(5)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSlowBurst.setReference('ITU-T G.997.1, section 7.3.2.3')
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSlowBurst.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSlowBurst.setDescription('Specifies the target level of impulse noise (burst) protection for an interleaved (slow) channel.')
zhoneVdslLineConfDownMaxFastFec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxFastFec.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxFastFec.setDescription('This parameter provisions the maximum level of Forward Error Correction (FEC) redundancy related overhead to be maintained for a fast channel.')
zhoneVdslLineConfUpMaxFastFec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxFastFec.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxFastFec.setDescription('This parameter provisions the maximum level of Forward Error Correction (FEC) redundancy related overhead to be maintained for a fast channel.')
zhoneVdslLineConfLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noChannel", 1), ("fastOnly", 2), ("interleavedOnly", 3), ("fastOrInterleaved", 4), ("fastAndInterleaved", 5))).clone('fastOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfLineType.setReference('T1E1.4/2000-009R3, Part 1, common spec')
if mibBuilder.loadTexts: zhoneVdslLineConfLineType.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfLineType.setDescription("This parameter provisions the VDSL physical entity at start-up by defining whether and how the line will be channelized, i.e., which channel type(s) are supported. If the line is to be channelized, the value will be other than noChannel(1). This configuration can be activated only during start-up. Afterwards, the value of zhoneVdslLineType coincides with the value of zhoneVdslLineConfLineType. Depending on this value, the corresponding entries in the ifTable for the interleaved and the fast channels are enabled or disabled according to the value of their ifOperStatus. Defined values are: noChannel(1) -- no channels exist fastOnly(2) -- only fast channel exists interleavedOnly(3) -- only interleaved channel exists fastOrInterleaved(4) -- either fast or interleaved channel -- exists, but only one at a time fastAndInterleaved(5) -- both fast and interleaved channels -- exist Note that 'slow' and 'interleaved' refer to the same channel.")
zhoneVdslLineConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 47), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfProfRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'outOfService'), it must be first unreferenced from all associated lines. An 'active' profile may be modified at any time. Note that some changes may require that any referenced lines be restarted (e.g., zhoneVdslLineConfLineType).")
zhoneVdslLineConfTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("autoNegotiateMode", 1), ("vdslMode", 2), ("vdsl2Mode", 3), ("adsl2PlusMode", 4), ("adsl2Mode", 5), ("gdmtMode", 6))).clone('autoNegotiateMode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfTransmissionMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfTransmissionMode.setDescription('The transmission standard to be used for the line.')
zhoneVdslLineConfVdsl2Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("g993-2-8a", 1), ("g993-2-8b", 2), ("g993-2-8c", 3), ("g993-2-8d", 4), ("g993-2-12a", 5), ("g993-2-12b", 6), ("g993-2-17a", 7), ("g993-2-30a", 8))).clone('g993-2-12a')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfVdsl2Profile.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfVdsl2Profile.setDescription('The VDSL2 standard to be used for the line.')
zhoneVdslLineConfVdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("standard", 1), ("long-reach-8k", 2), ("r8k", 3), ("std-8k", 4), ("lr-8k", 5), ("std-lr", 6), ("std-lr-8k", 7))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfVdslMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfVdslMode.setDescription('Controls which VDSL modes are available on the line.')
zhoneVdslLineConfPboElectricalOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setUnits('.5 dBm/Mhz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfPboElectricalOverride.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfPboElectricalOverride.setDescription('Override electrical length estimated by VUTU_C. The special value 256 means do not perform override.')
zhoneVdslLineConfAutoModeCrtrn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crtrn-chip-prop", 1), ("optimize-us", 2), ("optimize-ds", 3))).clone('optimize-us')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAutoModeCrtrn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfAutoModeCrtrn.setDescription('Determines the policy to select optimal mode of oepration.')
zhoneVdslLineConfNetworkTimingRef = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslLineConfNetworkTimingRef.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfNetworkTimingRef.setDescription('Enable/disable reference clock source.')
zhoneVdslLineConfAdslBandMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("not-allowed", 2))).clone('allowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslBandMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfAdslBandMode.setDescription('Specifies whether the XDSL can use the ADSL spectrum or not.')
zhoneVdslLineConfAdslBandModeEndFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(276, 2208)).clone(1104)).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslBandModeEndFreq.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfAdslBandModeEndFreq.setDescription('Specifies the ADSL band end frequency when the ADSL band usage is not allowed.')
zhoneVdslLineConfSeltEchoMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 240)).clone(50)).setUnits('secs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfSeltEchoMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfSeltEchoMeasurementTime.setDescription('Contains the SELT echo measurement time')
zhoneVdslLineConfSeltNoiseMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 240)).clone(50)).setUnits('secs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfSeltNoiseMeasurementTime.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfSeltNoiseMeasurementTime.setDescription('Contains the SELT noise measurement time.')
zhoneVdslLineConfSeltAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfSeltAgc.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfSeltAgc.setDescription('Contains the SELT AGC gain value.')
zhoneVdslLineConfDownTrellis = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownTrellis.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownTrellis.setDescription('Enables/disables downstream Trellis coding.')
zhoneVdslLineConfUpTrellis = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpTrellis.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpTrellis.setDescription('Enables/disables upstream Trellis coding.')
zhoneVdslLineConfDownMaxAggregateTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("unlimited", 4))).clone('unlimited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxAggregateTxPwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxAggregateTxPwr.setDescription('Maximum total power that is allowed to be transmitted in the downstream direction.')
zhoneVdslLineConfUpMaxAggregateTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("unlimited", 4))).clone('unlimited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxAggregateTxPwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxAggregateTxPwr.setDescription('Maximum total power that is allowed to be transmitted in the upstream direction.')
zhoneVdslLineConfDownMaxPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-955, 0)).clone(-1)).setUnits('.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxPsd.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxPsd.setDescription('The maximum power spectral density level allowed on the line at the transmitter output downstream for initialization and showtime signals.')
zhoneVdslLineConfUpMaxPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-955, 0)).clone(-1)).setUnits('.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxPsd.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxPsd.setDescription('The maximum power spectral density level allowed on the line at the transmitter output upstream for initialization and showtime signals.')
zhoneVdslLineConfDownPsdShape = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("custom-psd", 1), ("region-a-psd", 2), ("region-c-psd", 3), ("region-b-m1-a-psd", 4), ("region-b-m1-b-psd", 5), ("region-b-m1-us0-psd", 6), ("region-b-m2-a-psd", 7), ("region-b-m2-m-psd", 8), ("region-b-m2-b-psd", 9), ("region-b-m2-us0-psd", 10))).clone('region-a-psd')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdShape.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdShape.setDescription('Maximum transmit PSD allowed in the downstream channel on a VDSL2 line.')
zhoneVdslLineConfUpPsdShape = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("custom-psd", 1), ("region-a-psd", 2), ("region-c-psd", 3), ("region-b-m1-a-psd", 4), ("region-b-m1-b-psd", 5), ("region-b-m1-us0-psd", 6), ("region-b-m2-a-psd", 7), ("region-b-m2-m-psd", 8), ("region-b-m2-b-psd", 9), ("region-b-m2-us0-psd", 10))).clone('region-a-psd')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdShape.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdShape.setDescription('Maximum transmit PSD allowed in the upstream channel on a VDSL2 line.')
zhoneVdslLineConfDownVirtualNoiseSnrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2), ("mode3", 3))).clone('mode1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownVirtualNoiseSnrMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownVirtualNoiseSnrMode.setDescription('Downstream virtual noise SNR mode on a VDSL2 line.')
zhoneVdslLineConfUpVirtualNoiseSnrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2), ("mode3", 3))).clone('mode1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpVirtualNoiseSnrMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpVirtualNoiseSnrMode.setDescription('Upstream virtual noise SNR mode on a VDSL2 line.')
zhoneVdslLineConfDownErasureDetectionFast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownErasureDetectionFast.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownErasureDetectionFast.setDescription('Indicates whether the erasure detection mechanism should be enabled or disabled in the downstream fast channel.')
zhoneVdslLineConfUpErasureDetectionFast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpErasureDetectionFast.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpErasureDetectionFast.setDescription('Indicates whether the erasure detection mechanism should be enabled or disabled in the downstream fast channel.')
zhoneVdslLineConfDownErasureDetectionInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownErasureDetectionInterleave.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownErasureDetectionInterleave.setDescription('Indicates whether the erasure detection mechanism should be enabled or disabled in the downstream slow channel (interleave).')
zhoneVdslLineConfUpErasureDetectionInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpErasureDetectionInterleave.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpErasureDetectionInterleave.setDescription('Indicates whether the erasure detection mechanism should be enabled or disabled in the uptream slow channel (interleave).')
zhoneVdslLineConfDownGhsA43TonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43TonePwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43TonePwr.setDescription('Determines the mode of the downstream tones power used during handshake, during A43 mode.')
zhoneVdslLineConfDownGhsB43TonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsB43TonePwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsB43TonePwr.setDescription('Determines the mode of the downstream tones power used during handshake, during B43 mode.')
zhoneVdslLineConfDownGhsA43cTonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43cTonePwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43cTonePwr.setDescription('Determines the mode of the downstream tones power used during handshake, during A43c mode.')
zhoneVdslLineConfDownGhsV43TonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsV43TonePwr.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsV43TonePwr.setDescription('Determines the mode of the downstream tone power used during handshake, during V43 mode.')
zhoneVdslLineConfDownGhsA43TonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43TonePwrMaxLvl.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43TonePwrMaxLvl.setDescription('Determines the maximum power of downstream tones used, in manual mode, during handshake in A43 mode. A value of -99 indicates no power used.')
zhoneVdslLineConfDownGhsB43TonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsB43TonePwrMaxLvl.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsB43TonePwrMaxLvl.setDescription('Determines the maximum power of downstream tones used, in manual mode, during handshake in B43 mode. A value of -99 indicates no power used.')
zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl.setDescription('Determines the maximum power of downstream tones used, in manual mode, during handshake in A43c mode. A value of -99 indicates no power used.')
zhoneVdslLineConfDownGhsV43TonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsV43TonePwrMaxLvl.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsV43TonePwrMaxLvl.setDescription('Determines the maximum power of downstream tones used, in manual mode, during handshake in V43 mode. A value of -99 indicates no power used.')
zhoneVdslLineConfDownRsCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownRsCoding.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownRsCoding.setDescription('Parameter to enable/disable RS Coding in downstream channel.')
zhoneVdslLineConfUpRsCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpRsCoding.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpRsCoding.setDescription('Parameter to enable/disable RS Coding in upsream channel.')
zhoneVdslLineConfUpPboPsdTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ansi-a", 1), ("ansi-f", 2), ("etsi-a", 3), ("etsi-b", 4), ("etsi-c", 5), ("etsi-d", 6), ("etsi-e", 7), ("etsi-f", 8), ("custom", 9), ("ab-param", 10))).clone('ansi-a')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdTemplate.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdTemplate.setDescription('Specifies the maximum received PSD allowed in the upstream channel on the VDSLx line.')
zhoneVdslLineConfUpPboPsdParamA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA1.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA1.setDescription('Upstream power backoff PSD parameter A1. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfUpPboPsdParamA2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA2.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA2.setDescription('Upstream power backoff PSD parameter A2. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfUpPboPsdParamB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB1.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB1.setDescription('Upstream power backoff PSD parameter B1. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfUpPboPsdParamB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB2.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB2.setDescription('Upstream power backoff PSD parameter B2. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfDownDownshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(30)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownDownshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownDownshiftSnrMgn.setDescription('Configured Signal/Noise Margin for rate downshift. If the noise margin falls below this level, the modem should attempt to decrease its transmit rate.')
zhoneVdslLineConfDownUpshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(90)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownUpshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownUpshiftSnrMgn.setDescription('Configured Signal/Noise Margin for rate upshift. If the noise margin rises above this level, the modem should attempt to increase its transmit rate.')
zhoneVdslLineConfDownMinDownshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinDownshiftTime.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinDownshiftTime.setDescription('Minimum time that the current margin is below DownshiftSnrMgn before a downshift occurs.')
zhoneVdslLineConfDownMinUpshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinUpshiftTime.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinUpshiftTime.setDescription('Minimum time that the current margin is above UpshiftSnrMgn before an upshift occurs.')
zhoneVdslLineConfUpDownshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(30)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpDownshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpDownshiftSnrMgn.setDescription('Configured Signal/Noise Margin for rate downshift. If the noise margin falls below this level, the modem should attempt to decrease its transmit rate.')
zhoneVdslLineConfUpUpshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(90)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpUpshiftSnrMgn.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpUpshiftSnrMgn.setDescription('Configured Signal/Noise Margin for rate upshift. If the noise margin rises above this level, the modem should attempt to increase its transmit rate.')
zhoneVdslLineConfUpMinDownshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinDownshiftTime.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinDownshiftTime.setDescription('Minimum time that the current margin is below DownshiftSnrMgn before a downshift occurs.')
zhoneVdslLineConfUpMinUpshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinUpshiftTime.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinUpshiftTime.setDescription('Minimum time that the current margin is above UpshiftSnrMgn before an upshift occurs.')
zhoneVdslLineConfDownMinTxThresholdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 96), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinTxThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinTxThresholdAlarm.setDescription('Minimum CO Tx Sync rate threshold alarm. If set to 0, this field is disregarded. Otherwise, if Tx Sync rate falls below this value, a trap and alarm will be issued')
zhoneVdslLineConfUpMinTxThresholdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 97), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinTxThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinTxThresholdAlarm.setDescription('Minimum CPE Tx Sync rate threshold alarm. If set to 0, this field is disregarded. Otherwise, if Tx Sync rate falls below this value, a trap and alarm will be issued')
zhoneVdslLineConfPotsBypassRelayMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setUnits('secs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfPotsBypassRelayMaxDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfPotsBypassRelayMaxDuration.setDescription('The maximum duration in seconds that an Adsl Pots Low Pass Filter Bypass Relay will remain active (meaning closed/energized). As a fail-safe mechanism, the relay will automatically return a line back to normal operational mode when this timer has expired. This object is only valid for Adsl Pots Splitter cards containing the Pots LPF Bypass Relays.')
zhoneVdslLineConfDMTConfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("echocancel", 1), ("freqdivmux", 2))).clone('freqdivmux')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDMTConfMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDMTConfMode.setDescription('Discrete Multi-Tone parameter that selects whether there is overlap (echoCancel) or no overlap (freqDivMux) of bins.')
zhoneVdslLineConfDownBitSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownBitSwap.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownBitSwap.setDescription('Enable or disable downstream bit swap.')
zhoneVdslLineConfUpBitSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpBitSwap.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpBitSwap.setDescription('Enable or disable upstream bit swap.')
zhoneVdslLineConfAdslAnnexMModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 102), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslAnnexMModeEnabled.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfAdslAnnexMModeEnabled.setDescription("This object indicates whether Annex-M mode is enabled on the Adsl modem. If this object is set to 'true' then Annex-M mode is enabled. If it is set to 'false then Annex-M mode is disabled.")
zhoneVdslLineConfAdslAnnexMPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("eu64", 1), ("eu60", 2), ("eu56", 3), ("eu52", 4), ("eu48", 5), ("eu44", 6), ("eu40", 7), ("eu36", 8), ("eu32", 9), ("all", 10))).clone('eu32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslAnnexMPsdMask.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfAdslAnnexMPsdMask.setDescription('This object specifies the maximum transmit PSD allowed in the downstream channel on an BIS Annex-M line.')
zhoneVdslLineConfUs0BoundaryTone = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("d32", 1), ("d36", 2), ("d40", 3), ("d44", 4), ("d48", 5), ("d52", 6), ("d56", 7), ("d64", 8))).clone('d32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUs0BoundaryTone.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUs0BoundaryTone.setDescription('This object configures the upper boundary of US0. US0 is used in long reach mode when there is no more capacity in US1. The switchover is typically around 3500 feet.')
zhoneVdslLineConfDownInp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noProtection", 1), ("halfSymbol", 2), ("singleSymbol", 3), ("twoSymbols", 4), ("threeSymbols", 5), ("fourSymbols", 6), ("fiveSymbols", 7), ("sixSymbols", 8), ("sevenSymbols", 9), ("eightSymbols", 10), ("nineSymbols", 11), ("tenSymbols", 12), ("elevenSymbols", 13), ("twelveSymbols", 14), ("thirteenSymbols", 15), ("fourteenSymbols", 16), ("fifteenSymbols", 17), ("sixteenSymbols", 18))).clone('twoSymbols')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownInp.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownInp.setDescription('The minimum impulse noise protection for the downstream bearer channel expressed in symbols. One symbol equals 250 uS.')
zhoneVdslLineConfUpInp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noProtection", 1), ("halfSymbol", 2), ("singleSymbol", 3), ("twoSymbols", 4), ("fourSymbols", 5), ("eightSymbols", 6), ("sixteenSymbols", 7), ("threeSymbols", 8), ("fiveSymbols", 9), ("sixSymbols", 10), ("sevenSymbols", 11), ("nineSymbols", 12), ("tenSymbols", 13), ("elevenSymbols", 14), ("twelveSymbols", 15), ("thirteenSymbols", 16), ("fourteenSymbols", 17), ("fifteenSymbols", 18))).clone('twoSymbols')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpInp.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpInp.setDescription('The minimum impulse noise protection for the upstream bearer channel expressed in symbols. One symbol equals 250 uS.')
zhoneVdslLineConfDownMaxInterleavingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxInterleavingDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxInterleavingDelay.setDescription('The maximum inteleaving delay in the downstream direction. A value of zero indicates no delay introduced.')
zhoneVdslLineConfUpMaxInterleavingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxInterleavingDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxInterleavingDelay.setDescription('The maximum inteleaving delay in the upstream direction. A value of zero indicates no delay introduced.')
zhoneVdslLineConfDownPsdMaskEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("standard", 2), ("mod", 3), ("modFallback", 4))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdMaskEnable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdMaskEnable.setDescription("This object selects the Psd Mask in the downstream direction. 'standard' : use the PSD Mask specified in the object zhoneVdslLineConfDownPsdSelect 'mod' : use the pre-defined Mask-On-Demand PSD Mask 'modFallback': use the pre-defined Mask-On-Demand PSD Mask with fallback")
zhoneVdslLineConfUpPsdMaskEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("standard", 2), ("mod", 3), ("modFallback", 4))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdMaskEnable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdMaskEnable.setDescription("This object selects the Psd Mask in the upstream direction. 'standard' : use the PSD Mask specified in the object zhoneVdslLineConfDownPsdSelect 'mod' : use the pre-defined Mask-On-Demand PSD Mask 'modFallback': use the pre-defined Mask-On-Demand PSD Mask with fallback")
zhoneVdslLineConfDownPsdMaskSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("custom", 1), ("customMOD", 2), ("dmtPSDCOMSK2", 3), ("dmtPSDFLATMSK", 4), ("dmtPSDCABMSK2", 5), ("dmtPSDCOMSK2RFI", 6), ("dmtPSDFLATMSKRFI", 7), ("dmtPSDCABMSK2RFI", 8), ("dmtPSDADSL2NONOVLPM1", 9), ("dmtPSDADSL2NONOVLPM2", 10), ("dmtPSDADSL2NONOVLPFLAT", 11), ("g993RegionC", 12), ("g993RegionA", 13), ("g993RegionA-E17a-D-32", 14), ("g993RegionA-E17a-D-48", 15), ("g993RegionA-E17a-D-64", 16), ("g993RegionA-E17a-D-128", 17), ("g998RegionB-M1x-A", 18), ("g998RegionB-M1x-B", 19), ("g998RegionB-M1x-NUS0", 20), ("g998RegionB-M2x-A", 21), ("g998RegionB-M2x-M", 22), ("g998RegionB-M2x-B", 23), ("g998RegionB-M2x-NUS0", 24), ("g998RegionB-E17-M2x-NUS0", 25), ("g998RegionB-E17-M2x-NUS0-M", 26), ("g998RegionB-ADE17-M2x-NUS0-M", 27), ("g998RegionB-ADE17-M2x-A", 28), ("g998RegionB-ADE17-M2x-B", 29), ("g998RegionB-E30-M2x-NUS0", 30), ("g998RegionB-E30-M2x-NUS0-M", 31), ("g998RegionB-ADE30-M2x-NUS0-M", 32), ("g998RegionB-ADE30-M2x-NUS0-A", 33), ("g998RegionB-NONSTD-E17-M2x", 34), ("g998RegionB-NONSTD-E17-M2x-M", 35), ("g997RegionB-M1c-A-7", 36), ("g997RegionB-M1x-M-8", 37), ("g997RegionB-M1x-M", 38), ("g997RegionB-M2x-M-8", 39), ("g997RegionB-M2x-A", 40), ("g997RegionB-M2x-M", 41), ("g997RegionB-HPE17-M1-NUS0", 42), ("g997RegionB-HPE30-M1-NUS0", 43), ("g997RegionB-E17-M2x-A", 44), ("g997RegionB-E30-M2x-NUS0", 45))).clone('g993RegionA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdMaskSelect.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdMaskSelect.setDescription("This object selects one of the standards based PSD mask for the downstream direction. The object zhoneVdslLineConfDownPsdMaskEnable must be set to 'standard' for this object to be active.")
zhoneVdslLineConfUpPsdMaskSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("custom", 1), ("g993J-ADLU-32", 2), ("g993J-ADLU-36", 3), ("g993J-ADLU-40", 4), ("g993J-ADLU-44", 5), ("g993J-ADLU-48", 6), ("g993J-ADLU-52", 7), ("g993J-ADLU-60", 8), ("g993J-ADLU-64", 9), ("g993JM-EU-32", 10), ("g993JM-EU-36", 11), ("g993JM-EU-40", 12), ("g993JM-EU-44", 13), ("g993JM-EU-48", 14), ("g993JM-EU-52", 15), ("g993JM-EU-60", 16), ("g993JM-EU-64", 17), ("dmtExtended", 18), ("dmtJJ100", 19), ("dmtStandard", 20), ("g993RegionA-EU-32", 21), ("g993RegionA-EU-36", 22), ("g993RegionA-EU-40", 23), ("g993RegionA-EU-44", 24), ("g993RegionA-EU-48", 25), ("g993RegionA-EU-52", 26), ("g993RegionA-EU-56", 27), ("g993RegionA-EU-60", 28), ("g993RegionA-EU-64", 29), ("g998RegionB-M1x-A", 30), ("g998RegionB-M1x-B", 31), ("g998RegionB-M1x-NUS0", 32), ("g998RegionB-M2x-A", 33), ("g998RegionB-M2x-M", 34), ("g998RegionB-M2x-B", 35), ("g998RegionB-M2x-NUS0", 36), ("g998RegionB-E17-M2x-NUS0", 37), ("g998RegionB-E17-M2x-NUS0-M", 38), ("g998RegionB-ADE17-M2x-NUS0-M", 39), ("g998RegionB-ADE17-M2x-A", 40), ("g998RegionB-ADE17-M2x-B", 41), ("g998RegionB-E30-M2x-NUS0", 42), ("g998RegionB-E30-M2x-NUS0-M", 43), ("g998RegionB-ADE30-M2x-NUS0-M", 44), ("g998RegionB-ADE30-M2x-NUS0-A", 45), ("g998RegionB-NONSTD-E17-M2x", 46), ("g998RegionB-NONSTD-E17-M2x-M", 47), ("g997RegionB-M1c-A-7", 48), ("g997RegionB-M1x-M-8", 49), ("g997RegionB-M1x-M", 50), ("g997RegionB-M2x-M-8", 51), ("g997RegionB-M2x-A", 52), ("g997RegionB-M2x-M", 53), ("g997RegionB-HPE17-M1-NUS0", 54), ("g997RegionB-HPE30-M1-NUS0", 55), ("g997RegionB-E17-M2x-A", 56), ("g997RegionB-E30-M2x-NUS0", 57))).clone('g993RegionA-EU-32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdMaskSelect.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdMaskSelect.setDescription("This object selects one of the standards based PSD mask for the upstream direction. The object zhoneVdslLineConfUpPsdMaskEnable must be set to 'standard' for this object to be active.")
zhoneVdslLineEnableTrellisCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 113), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineEnableTrellisCoding.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineEnableTrellisCoding.setDescription('Enables/disables Trellis coding.')
zhoneVdslLineEnableRsCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 114), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineEnableRsCoding.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineEnableRsCoding.setDescription('Enables/disables Rs coding.')
zhoneVdslLineConfPsdShape = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55))).clone(namedValues=NamedValues(("region-a-nus0", 1), ("region-a-eu-32", 2), ("region-a-eu-36", 3), ("region-a-eu-40", 4), ("region-a-eu-44", 5), ("region-a-eu-48", 6), ("region-a-eu-52", 7), ("region-a-eu-56", 8), ("region-a-eu-60", 9), ("region-a-eu-64", 10), ("region-a-eu-128", 11), ("region-a-adlu-32", 12), ("region-a-adlu-36", 13), ("region-a-adlu-40", 14), ("region-a-adlu-44", 15), ("region-a-adlu-48", 16), ("region-a-adlu-52", 17), ("region-a-adlu-56", 18), ("region-a-adlu-60", 19), ("region-a-adlu-64", 20), ("region-a-adlu-128", 21), ("region-b-998-m1x-a", 22), ("region-b-998-m1x-b", 23), ("region-b-998-m1x-nus0", 24), ("region-b-998-m2x-a", 25), ("region-b-998-m2x-m", 26), ("region-b-998-m2x-b", 27), ("region-b-998-m2x-nus0", 28), ("region-b-998-e17-m2x-nus0", 29), ("region-b-998-e17-m2x-nus0-m", 30), ("region-b-998-ade17-m2x-nus0-m", 31), ("region-b-998-ade17-m2x-a", 32), ("region-b-998-ade17-m2x-b", 33), ("region-b-998-e30-m2x-nus0", 34), ("region-b-998-e30-m2x-nus0-m", 35), ("region-b-998-ade30-m2x-nus0-m", 36), ("region-b-998-ade30-m2x-nus0-a", 37), ("region-b-997-m1c-a-7", 38), ("region-b-997-m1x-m-8", 39), ("region-b-997-m1x-m", 40), ("region-b-997-m2x-m-8", 41), ("region-b-997-m2x-a", 42), ("region-b-997-m2x-m", 43), ("region-b-997-hpe17-m1-nus0", 44), ("region-b-997-hpe30-m1-nus0", 45), ("region-b-997-e17-m2x-a", 46), ("region-b-997-e30-m2x-nus0", 47), ("region-b-997-bt-anfp", 48), ("region-c-138-b", 49), ("region-c-276-b", 50), ("region-c-138-co", 51), ("region-c-276-co", 52), ("region-c-tcmisdn", 53), ("region-c-1104-co-17a", 54), ("region-c-1104-co-30a", 55))).clone('region-a-eu-32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfPsdShape.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfPsdShape.setDescription('Maximum transmit PSD allowed on a VDSL2 line.')
zhoneVdslLineConfDownPhyRSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRSupport.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRSupport.setDescription('Enable or disable downstream PHYR. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfUpPhyRSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRSupport.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRSupport.setDescription('Enable or disable upstream PHYR. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfDownPhyRmaxINP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 160), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRmaxINP.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRmaxINP.setDescription('PHYR maximum downstream impulse noise protection. A value of 0 specifies no protection. The values 5 through 160 specify the number of symbols in 1/10 increments. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfUpPhyRmaxINP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 160), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRmaxINP.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRmaxINP.setDescription('PHYR maximum upstream impulse noise protection. A value of 0 specifies no protection. The values 5 through 160 specify the number of symbols in 1/10 increments. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfDownPhyRminRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 120), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRminRSoverhead.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRminRSoverhead.setDescription('PHYR minimum downstream RS overhead. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfUpPhyRminRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 121), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRminRSoverhead.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRminRSoverhead.setDescription('PHYR minimum upstream RS overhead. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfDownPhyRRtxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 122), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRRtxRatio.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRRtxRatio.setDescription('PHYR minimum downstream fraction of the line rate allocated for retransmission. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfUpPhyRRtxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 123), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRRtxRatio.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRRtxRatio.setDescription('PHYR minimum upstream fraction of the line rate allocated for retransmission. Only supported by Broadcom PHYR ports.')
zhoneVdslLineConfUpPboPsdParamA3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 124), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA3.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA3.setDescription('Upstream power backoff PSD parameter A3. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfUpPboPsdParamA4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 125), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA4.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA4.setDescription('Upstream power backoff PSD parameter A4. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfUpPboPsdParamB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 126), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB3.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB3.setDescription('Upstream power backoff PSD parameter B3. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfUpPboPsdParamB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 127), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB4.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB4.setDescription('Upstream power backoff PSD parameter B4. This parameter is only used if the mask selection is set to PSDMaskABParameters')
zhoneVdslLineConfFallbackDefaultVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 128), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfFallbackDefaultVpi.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfFallbackDefaultVpi.setDescription('ATM VPI to be used by the line when it trains in ADSL/ATM mode and bridges are configured for single-vc mode')
zhoneVdslLineConfFallbackDefaultVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 129), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfFallbackDefaultVci.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfFallbackDefaultVci.setDescription('ATM VCI to be used by the line when it trains in ADSL/ATM mode and bridges are configured for single-vc mode')
zhoneVdslLineConfDownGinpSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpSupport.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpSupport.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpSupport.setDescription('Enable or disable downstream G.INP / ITU-G.998.4. Only supported by Broadcom ports.')
zhoneVdslLineConfUpGinpSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpSupport.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpSupport.setDescription('Enable or disable upstream G.INP / ITU-G.998.4. Only supported by Broadcom ports.')
zhoneVdslLineConfDownGinpEtrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 132), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(100000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMax.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMax.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMax.setDescription('gInpEtrMax - Maximum allowed value for downstream expected throughput (ETR) in kbit/s. The valid values are all multiples of 8 from 0 to the maximum of the valid values of the maximum net data rate specified in the associated Recommendation. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations. ')
zhoneVdslLineConfUpGinpEtrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 133), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 2000000)).clone(60000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMax.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMax.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMax.setDescription('gInpEtrMax - Maximum allowed value for upstream expected throughput (ETR) in kbit/s. The valid values are all multiples of 8 from 0 to the maximum of the valid values of the maximum net data rate specified in the associated Recommendation. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfDownGinpEtrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 134), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(64)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMin.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMin.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMin.setDescription('gInpEtrMin - Minimum allowed value for downstream expected throughput (ETR) in kbit/s. The valid values are all multiples of 8 from 0 to the maximum of the valid values of the minimum net data rate specified in the associated Recommendation. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfUpGinpEtrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 135), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(64)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMin.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMin.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMin.setDescription('gInpEtrMin - Minimum allowed value for upstream expected throughput (ETR) in kbit/s. The valid values are all multiples of 8 from 0 to the maximum of the valid values of the minimum net data rate specified in the associated Recommendation. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfDownGinpNdrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 136), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(100000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpNdrMax.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpNdrMax.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpNdrMax.setDescription('gInpNdrMax - Maximum allowed value for downstream net data rate (NDR) in kbit/s. The valid values are all multiples of 8 from 0 to the maximum of the valid values of the maximum net data rate specified in the associated Recommendation. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfUpGinpNdrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 137), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(60000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpNdrMax.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpNdrMax.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpNdrMax.setDescription('gInpNdrMax - Maximum allowed value for upstream net data rate (NDR) in kbit/s. The valid values are all multiples of 8 from 0 to the maximum of the valid values of the maximum net data rate specified in the associated Recommendation. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfDownGinpShineRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 138), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpShineRatio.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpShineRatio.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpShineRatio.setDescription('gInpShineRatio - The downstream loss of rate in a 1 second interval expressed as a fraction of NDR due to a single high impulse noise event (SHINE) impulse noise environment expected by the operator to occur at a probability acceptable for the services. The valid values are all multiples of 0.001 from 0 to 0.1. This field uses 1 to equal 0.001 and 100 to equal 0.1. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfUpGinpShineRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 139), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpShineRatio.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpShineRatio.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpShineRatio.setDescription('gInpShineRatio - The upstream loss of rate in a 1 second interval expressed as a fraction of NDR due to a single high impulse noise event (SHINE) impulse noise environment expected by the operator to occur at a probability acceptable for the services. The valid values are all multiples of 0.001 from 0 to 0.1. This field uses 1 to equal 0.001 and 100 to equal 0.1. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfDownGinpLeftrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 140), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpLeftrThreshold.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpLeftrThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpLeftrThreshold.setDescription('gInpLeftrThreshold - The downstream rate Threshold below which the Low Error Free Rate (LEFTR) defect is declared. The threshold used to declare leftr defects is expressed in fraction of the net data rate (NDR). The value 0 is a special value to indicate that the receiver shall use a special value for declaring leftr defect. The minimum valid threshold to declare leftr is ETR/2. The receiver shall ignore threshold values that are less than the minimum and shall use ETR/2 for declaring leftr defect instead. The valid values are all multiples of 0.01 from 0.01 to 0.99. This field uses 1 to equal 0.01 and 99 to equal 0.99.')
zhoneVdslLineConfUpGinpLeftrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 141), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpLeftrThreshold.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpLeftrThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpLeftrThreshold.setDescription('gInpLeftrThreshold - The upstream rate Threshold below which the Low Error Free Rate (LEFTR) defect is declared. The threshold used to declare leftr defects is expressed in fraction of the net data rate (NDR). The value 0 is a special value to indicate that the receiver shall use a special value for declaring leftr defect. The minimum valid threshold to declare leftr is ETR/2. The receiver shall ignore threshold values that are less than the minimum and shall use ETR/2 for declaring leftr defect instead. The valid values are all multiples of 0.01 from 0.01 to 0.99. This field uses 1 to equal 0.01 and 99 to equal 0.99.')
zhoneVdslLineConfDownGinpMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 142), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(20)).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMaxDelay.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMaxDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMaxDelay.setDescription('gInpMaxDelay - The maximum downstream delay in ms. This is the upper limit for the delay that is added to the transmission delay only caused by retransmissions. Here the receiver and/or the transmitter shall identify and discard all DTUs whose payload cannot be transferred over the reference point at the receiver without violating the delay_max limit. The time stamp shall be the criterion for discarding the DTUs. The processing delay between the U-interface and the retransmission sub-layer of the receiver in the retransmission data path direction shall be excluded from consideration for delay_max in the retransmission data path direction. The valid values are all integers from 1 to 63. ITU-T G.998.4 7.1.1 Control parameters, 7.1.2 Valid configurations, and 8.1.6 Time Stamp.')
zhoneVdslLineConfUpGinpMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 143), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(20)).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMaxDelay.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMaxDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMaxDelay.setDescription('gInpMaxDelay - The maximum upstream delay in ms. This is the upper limit for the delay that is added to the transmission delay only caused by retransmissions. Here the receiver and/or the transmitter shall identify and discard all DTUs whose payload cannot be transferred over the reference point at the receiver without violating the delay_max limit. The time stamp shall be the criterion for discarding the DTUs. The processing delay between the U-interface and the retransmission sub-layer of the receiver in the retransmission data path direction shall be excluded from consideration for delay_max in the retransmission data path direction. The valid values are all integers from 1 to 63. ITU-T G.998.4 7.1.1 Control parameters, 7.1.2 Valid configurations, and 8.1.6 Time Stamp.')
zhoneVdslLineConfDownGinpMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 144), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinDelay.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinDelay.setDescription('gInpMinDelay - The minimum downstream delay in ms. This is the lower limit for the delay that is added to the transmission delay caused by retransmissions only. The time stamp shall be used by the outlet shaping function to determine when the payload of the DTU shall be sent to the reference point to meet the delay limits. The outlet shaping function shall minimize the additional delay that may be introduced above delay_ min , and shall never exceed delay_max. The valid values are all integers from 0 to 63. ITU-T G.998.4 7.1.1 Control parameters, 7.1.2 Valid configurations, and 8.1.6 Time Stamp.')
zhoneVdslLineConfUpGinpMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 145), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinDelay.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinDelay.setDescription('gInpMinDelay - The minimum upstream delay in ms. This is the lower limit for the delay that is added to the transmission delay caused by retransmissions only. The time stamp shall be used by the outlet shaping function to determine when the payload of the DTU shall be sent to the reference point to meet the delay limits. The outlet shaping function shall minimize the additional delay that may be introduced above delay_ min , and shall never exceed delay_max. The valid values are all integers from 0 to 63. ITU-T G.998.4 7.1.1 Control parameters, 7.1.2 Valid configurations, and 8.1.6 Time Stamp.')
zhoneVdslLineConfDownGinpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 146), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMin.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMin.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMin.setDescription('ginpMin - The minimum downstream impulse noise protection (INP) against single high impulse noise event (SHINE) in discrete multitone (DMT) symbols. The valid values are all integers from 0 to 63 for system with a sub-carrier spacing of 4.3125 kHz. The valid values are all integers from 0 to 127 for system with a sub-carrier spacing of 8.625 kHz. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfUpGinpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 147), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMin.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMin.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMin.setDescription('ginpMin - The minimum upstream impulse noise protection (INP) against single high impulse noise event (SHINE) in discrete multitone (DMT) symbols. The valid values are all integers from 0 to 63 for system with a sub-carrier spacing of 4.3125 kHz. The valid values are all integers from 0 to 127 for system with a sub-carrier spacing of 8.625 kHz. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfDownGinpMinRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 148), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinRSoverhead.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinRSoverhead.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinRSoverhead.setDescription('gInpMinRSoverhead - This value specifies the downstream bandwidth reserved for RS (reed-solomon) codewords. The minimum guaranteed R/N ratio. The unit is 1/256th and the range is 0..64 (0 to 25%).')
zhoneVdslLineConfUpGinpMinRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 149), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinRSoverhead.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinRSoverhead.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinRSoverhead.setDescription('gInpMinRSoverhead - This value specifies the upstream bandwidth reserved for RS (reed-solomon) codewords. The minimum guaranteed R/N ratio. The unit is 1/256th and the range is 0..64 (0 to 25%).')
zhoneVdslLineConfDownGinpReinCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 150), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpReinCfg.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpReinCfg.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpReinCfg.setDescription('gInpReinCfg - The minimum downstream impulse protection against electrical repetitive impulse noise (REIN) in DMT symbols. The valid values are all integers from 0 to 7 for system with a sub-carrier spacing of 4.3125 kHz. The valid values are all integers from 0 to 13 for system with a sub-carrier spacing of 8.625 kHz. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfUpGinpReinCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 151), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpReinCfg.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpReinCfg.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpReinCfg.setDescription('gInpReinCfg - The minimum upstream impulse protection against electrical repetitive impulse noise (REIN) in DMT symbols. The valid values are all integers from 0 to 7 for system with a sub-carrier spacing of 4.3125 kHz. The valid values are all integers from 0 to 13 for system with a sub-carrier spacing of 8.625 kHz. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfDownGinpReinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq100hz", 1), ("freq120hz", 2))).clone('freq120hz')).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpReinFreq.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpReinFreq.setDescription('ginpReinFreq specifies the frequency of REIN inter-arrival time. It is used in the Channel Initialization Policy and on-line reconfiguration procedures. REIN is commonly coupled from electrical power cables appliances drawing power from the AC electrical power network, having a repetition rate of twice the AC power frequency (100 or 120 Hz). The valid values are integers 100 hz or 120 hz. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfUpGinpReinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 153), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq100hz", 1), ("freq120hz", 2))).clone('freq120hz')).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpReinFreq.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpReinFreq.setDescription('ginpReinFreq specifies the frequency of REIN inter-arrival time. It is used in the Channel Initialization Policy and on-line reconfiguration procedures. REIN is commonly coupled from electrical power cables appliances drawing power from the AC electrical power network, having a repetition rate of twice the AC power frequency (100 or 120 Hz). The valid values are integers 100 hz or 120 hz. ITU-T G.998.4 7.1.1 Control parameters and 7.1.2 Valid configurations.')
zhoneVdslLineConfDownGinpRtxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 154), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forbidden", 1), ("preferred", 2), ("forced", 3), ("testmode", 4))).clone('preferred')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpRtxMode.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpRtxMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpRtxMode.setDescription("gInpRtxMode - Downstream retransmission Mode (RTX MODE). The RTX_MODE is a configuration parameter used to control activation of retransmission during initialization. This parameter has 4 valid values: FORBIDDEN: ITU-T G.998.4 retransmission not allowed. PREFERRED: ITU-T G.998.4 retransmission is preferred by the operator. (i.e., if ITU-T G.998.4 RTX capability is supported by both XTU's, the XTU's shall select ITU-T G.998.4 operation for this direction). FORCED: Force the use of the ITU-T G.998.4 retransmission. (i.e., if ITU-T G.998.4 RTX capability in this direction is not supported by both XTU's or not selected by the XTU's, an initialization failure shall result). NOTE: Due to the optionality of ITU-T G.998.4 retransmission in upstream direction, the use of FORCED in upstream may lead to initialization failure, even if the XTU is supporting ITU-T G.998.4 (in downstream). TESTMODE: Force the use of the ITU-T G.998.4 retransmission in the test mode described in clause 10.4. (i.e., if ITU-T G.998.4 RTX capability is not supported by both XTU's or not selected by the XTU's, an initialization failure shall result). ITU-T G.998.4 11.1.13 Retransmission Mode (RTX_MODE) ")
zhoneVdslLineConfUpGinpRtxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forbidden", 1), ("preferred", 2), ("forced", 3), ("testmode", 4))).clone('preferred')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpRtxMode.setReference('ITU-G.998.4')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpRtxMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpRtxMode.setDescription("gInpRtxMode - Upstream retransmission Mode (RTX MODE). The RTX_MODE is a configuration parameter used to control activation of retransmission during initialization. This parameter has 4 valid values: FORBIDDEN: ITU-T G.998.4 retransmission not allowed. PREFERRED: ITU-T G.998.4 retransmission is preferred by the operator. (i.e., if ITU-T G.998.4 RTX capability is supported by both XTU's, the XTU's shall select ITU-T G.998.4 operation for this direction). FORCED: Force the use of the ITU-T G.998.4 retransmission. (i.e., if ITU-T G.998.4 RTX capability in this direction is not supported by both XTU's or not selected by the XTU's, an initialization failure shall result). NOTE: Due to the optionality of ITU-T G.998.4 retransmission in upstream direction, the use of FORCED in upstream may lead to initialization failure, even if the XTU is supporting ITU-T G.998.4 (in downstream). TESTMODE: Force the use of the ITU-T G.998.4 retransmission in the test mode described in clause 10.4. (i.e., if ITU-T G.998.4 RTX capability is not supported by both XTU's or not selected by the XTU's, an initialization failure shall result). ITU-T G.998.4 11.1.13 Retransmission Mode (RTX_MODE)")
zhoneVdslLineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20), )
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileTable.setDescription('This table contains information on the VDSL line alarm configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the VDSL line alarm thresholds. Entries in this table MUST be maintained in a persistent manner.')
zhoneVdslLineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileEntry.setDescription("Each entry consists of a list of parameters that represents the configuration of a VDSL line alarm profile. A default profile with an index of 'DEFVAL', will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.")
zhoneVdslLineAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileName.setDescription('The name for this profile as specified by an administrator.')
zhoneVdslLineAlarmConfThresh15MinLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLofs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLofs.setDescription('This object configures the threshold for the number of loss of frame seconds (LOFs) within any given 15-minute performance data collection interval. If the value of loss of frame seconds in a particular 15-minute collection interval reaches/exceeds this value, a zhoneVdslPerfLofsThreshNotification notification will be generated. No more than one notification will be sent per interval.')
zhoneVdslLineAlarmConfThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLoss.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLoss.setDescription('This object configures the threshold for the number of loss of signal seconds (LOSs) within any given 15-minute performance data collection interval. If the value of loss of signal seconds in a particular 15-minute collection interval reaches/exceeds this value, a zhoneVdslPerfLossThreshNotification notification will be generated. One notification will be sent per interval per endpoint.')
zhoneVdslLineAlarmConfThresh15MinLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLprs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLprs.setDescription('This object configures the threshold for the number of loss of power seconds (LPRs) within any given 15-minute performance data collection interval. If the value of loss of power seconds in a particular 15-minute collection interval reaches/exceeds this value, a zhoneVdslPerfLprsThreshNotification notification will be generated. No more than one notification will be sent per interval.')
zhoneVdslLineAlarmConfThresh15MinLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLols.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLols.setDescription('This object configures the threshold for the number of loss of link seconds (LOLs) within any given 15-minute performance data collection interval. If the value of loss of link seconds in a particular 15-minute collection interval reaches/exceeds this value, a zhoneVdslPerfLolsThreshNotification notification will be generated. No more than one notification will be sent per interval.')
zhoneVdslLineAlarmConfThresh15MinESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinESs.setDescription('This object configures the threshold for the number of errored seconds (ESs) within any given 15-minute performance data collection interval. If the value of errored seconds in a particular 15-minute collection interval reaches/exceeds this value, a zhoneVdslPerfEssThreshNotification notification will be generated. No more than one notification will be sent per interval.')
zhoneVdslLineAlarmConfThresh15MinSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinSESs.setDescription('This object configures the threshold for the number of severely errored seconds (SESs) within any given 15-minute performance data collection interval. If the value of severely errored seconds in a particular 15-minute collection interval reaches/exceeds this value, a zhoneVdslPerfSessThreshNotification notification will be generated. No more than one notification will be sent per interval.')
zhoneVdslLineAlarmConfThresh15MinUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinUASs.setDescription('This object configures the threshold for the number of unavailable seconds (UASs) within any given 15-minute performance data collection interval. If the value of unavailable seconds in a particular 15-minute collection interval reaches/exceeds this value, a zhoneVdslPerfUassThreshNotification notification will be generated. No more than one notification will be sent per interval.')
zhoneVdslLineAlarmConfInitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfInitFailure.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfInitFailure.setDescription('This object specifies if a vdslInitFailureNotification notification will be generated if an initialization failure occurs.')
zhoneVdslLineAlarmConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to 'destroy' or 'outOfService') it must be first unreferenced from all associated lines. An 'active' profile may be modified at any time.")
zhoneVdslLineAlarmConfThresh1DayLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLofs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLofs.setDescription('This object configures the threshold for the number of loss of frame seconds (LOFs) within any given 1-day performance data collection interval. If the value of loss of frame seconds in a particular 1-day collection interval reaches/exceeds this value, a zhoneVdslPerfLofsThreshNotification notification will be generated. No more than one notification will be sent per interval')
zhoneVdslLineAlarmConfThresh1DayLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLoss.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLoss.setDescription('This object configures the threshold for the number of loss of signal seconds (LOSs) within any given 1-day performance data collection interval. If the value of loss of signal seconds in a particular 1-day collection interval reaches/exceeds this value, a zhoneVdslPerfLossThreshNotification notification will be generated. No more than one notification will be sent per interval')
zhoneVdslLineAlarmConfThresh1DayLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLprs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLprs.setDescription('This object configures the threshold for the number of loss of power seconds (LPRs) within any given 1-day performance data collection interval. If the value of loss of power seconds in a particular 1-day collection interval reaches/exceeds this value, a zhoneVdslPerfLprsThreshNotification notification will be generated. No more than one notification will be sent per interval')
zhoneVdslLineAlarmConfThresh1DayLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLols.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLols.setDescription('This object configures the threshold for the number of loss of link seconds (LOLs) within any given 1-day performance data collection interval. If the value of loss of link seconds in a particular 1-day collection interval reaches/exceeds this value, a zhoneVdslPerfLolsThreshNotification notification will be generated. No more than one notification will be sent per interval')
zhoneVdslLineAlarmConfThresh1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayESs.setDescription('This object configures the threshold for the number of errored seconds (ESs) within any given 1-day performance data collection interval. If the value of errored seconds in a particular 1-day collection interval reaches/exceeds this value, a zhoneVdslPerfEssThreshNotification notification will be generated. No more than one notification will be sent per interval')
zhoneVdslLineAlarmConfThresh1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DaySESs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DaySESs.setDescription('This object configures the threshold for the number of severely errored seconds (SESs) within any given 1-day performance data collection interval. If the value of severely errored seconds in a particular 1-day collection interval reaches/exceeds this value, a zhoneVdslPerfSessThreshNotification notification will be generated. No more than one notification will be sent per interval')
zhoneVdslLineAlarmConfThresh1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayUASs.setDescription('This object configures the threshold for the number of unavailable seconds (UASs) within any given 1-day performance data collection interval. If the value of unavailable seconds in a particular 1-day collection interval reaches/exceeds this value, a zhoneVdslPerfUasThreshNotification notification will be generated. No more than one notification will be sent per interval')
zhoneVdslLineAlarmConfThresh1DayInitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayInitFailure.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayInitFailure.setDescription('This object specifies if a vdslThresh1DayInitFailureNotification notification will be generated if an initialization failure occurs.')
zhoneVdslCustomNotchConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21), )
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfProfileTable.setDescription('This table contains HAM (Handheld Amateur Radio) custom notch information.')
zhoneVdslCustomNotchConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfId"))
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfProfileEntry.setDescription('Each VDSL port can have custom notches.')
zhoneVdslCustomNotchConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfId.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfId.setDescription('Each VDSL2 port can have eight (8) custom notch pairs.')
zhoneVdslCustomNotchConfStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfStart.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfStart.setDescription('Specifies the start frequency of custom HAM (Handheld Amateur Radio) notch. zhoneVdslCustomNotchConfStart MUST be less than or equal to zhoneVdslCustomNotchConfStop.')
zhoneVdslCustomNotchConfStop = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfStop.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfStop.setDescription('Specifies the end frequency of custom HAM (Handheld Amateur Radio) notch. zhoneVdslCustomNotchConfStop MUST be greater than or equal to zhoneVdslCustomNotchConfStart.')
zhoneVdslVectDataTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22), )
if mibBuilder.loadTexts: zhoneVdslVectDataTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslVectDataTable.setDescription('Used to retrieve the vectoring packet counts.')
zhoneVdslVectDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslVectDataEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslVectDataEntry.setDescription('Vectoring Packet statistics data')
zhoneVdslVectDataEsDsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataEsDsCounter.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslVectDataEsDsCounter.setDescription('Error Sample Downstream Packet Counter')
zhoneVdslVectDataEsUsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataEsUsCounter.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslVectDataEsUsCounter.setDescription('Error Sample Upstream Packet Counter')
zhoneVdslVectDataIsDsFeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataIsDsFeValid.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslVectDataIsDsFeValid.setDescription('Is Downstream Fe Valid')
zhoneVdslVectDataEsFeDsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataEsFeDsCounter.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslVectDataEsFeDsCounter.setDescription('Error Sample Fe Downstream Counter')
zhoneVdslConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3))
zhoneVdslGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 1))
zhoneVdslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 1, 1)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslLineCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineType"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfProfile"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfProfile"), ("ZhoneVdsl-MIB", "zhoneVdslPhysInvSerialNumber"), ("ZhoneVdsl-MIB", "zhoneVdslPhysInvVendorID"), ("ZhoneVdsl-MIB", "zhoneVdslPhysInvVersionNumber"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrAtn"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrStatus"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrOutputPwr"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrAttainableRate"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrLineRate"), ("ZhoneVdsl-MIB", "zhoneVdslChanInterleaveDelay"), ("ZhoneVdsl-MIB", "zhoneVdslChanCrcBlockLength"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxRate"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxSlowBurstProtect"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxFastFec"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerfData1DayValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfData1DayInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DaySESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalMoniSecs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalInits"), ("ZhoneVdsl-MIB", "zhoneVdslChanValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChanInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChanFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr15MinTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr15MinFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr15MinBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr1DayTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr1DayFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr1DayBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChanIntervalFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanIntervalBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalMoniSecs"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownRateMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpRateMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownTargetSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpTargetSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownFastMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownFastMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownSlowMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownSlowMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpFastMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpFastMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpSlowMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpSlowMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownRateRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpRateRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxInterDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxInterDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPboControl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboControl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPboLevel"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboLevel"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDeploymentScenario"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslPresence"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfApplicableStandard"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfBandPlan"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfBandPlanFx"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfBandOptUsage"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdTemplate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdTemplate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfHamBandMask"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch1Start"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch1Stop"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch2Start"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch2Stop"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownTargetSlowBurst"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpTargetSlowBurst"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxFastFec"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxFastFec"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfLineType"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfProfRowStatus"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLofs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLoss"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLprs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLols"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinSESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinUASs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfInitFailure"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLofs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLoss"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLprs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLols"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayInitFailure"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAutoModeCrtrn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslBandMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslBandModeEndFreq"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfSeltAgc"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfVdsl2Profile"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfVdslMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfPboElectricalOverride"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxPsd"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxAggregateTxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdShape"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownVirtualNoiseSnrMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43TonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownErasureDetectionFast"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownErasureDetectionInterleave"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsB43TonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsV43TonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43TonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsB43TonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsV43TonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownRsCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfProfRowStatus"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpErasureDetectionFast"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB1"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA1"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA2"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB2"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpVirtualNoiseSnrMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpErasureDetectionInterleave"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpRsCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdShape"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdTemplate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfNetworkTimingRef"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxAggregateTxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownTrellis"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpTrellis"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxPsd"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DaySESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayUASs"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfSeltEchoMeasurementTime"), ("ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfStop"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfSeltNoiseMeasurementTime"), ("ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfStart"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfTransmissionMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownDownshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownUpshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinDownshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinUpshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpDownshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpUpshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinDownshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinUpshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfId"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43cTonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDMTConfMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfPotsBypassRelayMaxDuration"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownBitSwap"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpBitSwap"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslAnnexMModeEnabled"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslAnnexMPsdMask"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUs0BoundaryTone"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownInp"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpInp"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxInterleavingDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxInterleavingDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdMaskEnable"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdMaskEnable"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdMaskSelect"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdMaskSelect"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrProfile"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrConnType"), ("ZhoneVdsl-MIB", "zhoneVdslLineEnableTrellisCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineEnableRsCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfPsdShape"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRSupport"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRSupport"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRmaxINP"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRmaxINP"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRminRSoverhead"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRminRSoverhead"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRRtxRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRRtxRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA3"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA4"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB3"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB4"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfFallbackDefaultVpi"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfFallbackDefaultVci"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinTxThresholdAlarm"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinTxThresholdAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneVdslGroup = zhoneVdslGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslGroup.setDescription('A collection of objects providing information about a VDSL Line.')
zhoneVdslNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 1, 2)).setObjects(("ZhoneVdsl-MIB", "vdslXtucPerf15MinLofsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinLossThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinLprsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinLolsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinSESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinUASsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLofsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLossThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLprsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLolsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DaySESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayUASsThreshTrap"), ("ZhoneVdsl-MIB", "zhoneVdslInitFailureTrap"), ("ZhoneVdsl-MIB", "vdslXtucMinTxThresholdAlarmFailureTrap"), ("ZhoneVdsl-MIB", "vdslXturMinTxThresholdAlarmFailureTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneVdslNotificationGroup = zhoneVdslNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslNotificationGroup.setDescription('This group supports notifications of significant conditions associated with VDSL Lines.')
zhoneVdslCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 2))
zhoneVdslLineMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 2, 1)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslGroup"), ("ZhoneVdsl-MIB", "zhoneVdslNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneVdslLineMibCompliance = zhoneVdslLineMibCompliance.setStatus('current')
if mibBuilder.loadTexts: zhoneVdslLineMibCompliance.setDescription('The compliance statement for SNMP entities which manage VDSL interfaces.')
mibBuilder.exportSymbols("ZhoneVdsl-MIB", zhoneVdslLineConfUpRateMode=zhoneVdslLineConfUpRateMode, zhoneVdslPhysCurrOutputPwr=zhoneVdslPhysCurrOutputPwr, zhoneVdslLineConfDownGinpMin=zhoneVdslLineConfDownGinpMin, zhoneVdslLineConfDownPsdShape=zhoneVdslLineConfDownPsdShape, zhoneVdslLineConfSeltAgc=zhoneVdslLineConfSeltAgc, zhoneVdslPhysCurrAttainableRate=zhoneVdslPhysCurrAttainableRate, zhoneVdslLineAlarmConfThresh15MinESs=zhoneVdslLineAlarmConfThresh15MinESs, zhoneVdslLineConfHamBandMask=zhoneVdslLineConfHamBandMask, zhoneVdslLineConfUpRateRatio=zhoneVdslLineConfUpRateRatio, zhoneVdslMib=zhoneVdslMib, zhoneVdslPhysCurrStatus=zhoneVdslPhysCurrStatus, zhoneVdslChanBadBlks=zhoneVdslChanBadBlks, zhoneVdslGinpLeftrSecs=zhoneVdslGinpLeftrSecs, zhoneVdslLineConfLineType=zhoneVdslLineConfLineType, zhoneVdslPhysSide=zhoneVdslPhysSide, zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl=zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl, zhoneVdslVectDataTable=zhoneVdslVectDataTable, zhoneVdslLineConfUpErasureDetectionInterleave=zhoneVdslLineConfUpErasureDetectionInterleave, zhoneVdslPhysCurrAtn=zhoneVdslPhysCurrAtn, zhoneVdslPerfDataCurr1DaySESs=zhoneVdslPerfDataCurr1DaySESs, zhoneVdslChanCurrTxRate=zhoneVdslChanCurrTxRate, zhoneVdslLineConfUpPboLevel=zhoneVdslLineConfUpPboLevel, vdslXtucPerf1DayLofsThreshTrap=vdslXtucPerf1DayLofsThreshTrap, zhoneVdslChanInvalidIntervals=zhoneVdslChanInvalidIntervals, zhoneVdslLineConfDownMinDownshiftTime=zhoneVdslLineConfDownMinDownshiftTime, zhoneVdslPhysTransportMode=zhoneVdslPhysTransportMode, zhoneVdslLineConfDownTargetSnrMgn=zhoneVdslLineConfDownTargetSnrMgn, zhoneVdslPerfDataLoss=zhoneVdslPerfDataLoss, zhoneVdslLineConfDownPboLevel=zhoneVdslLineConfDownPboLevel, zhoneVdslLineConfProfRowStatus=zhoneVdslLineConfProfRowStatus, zhoneVdslNotifications=zhoneVdslNotifications, zhoneVdslLineConfDownMinUpshiftTime=zhoneVdslLineConfDownMinUpshiftTime, zhoneVdslLineConfUpUpshiftSnrMgn=zhoneVdslLineConfUpUpshiftSnrMgn, zhoneVdslLineConfVdsl2Profile=zhoneVdslLineConfVdsl2Profile, zhoneVdslLineAlarmConfProfile=zhoneVdslLineAlarmConfProfile, zhoneVdslChanCurr1DayBadBlks=zhoneVdslChanCurr1DayBadBlks, zhoneVdslLineConfDownSlowMinDataRate=zhoneVdslLineConfDownSlowMinDataRate, zhoneVdslPerfIntervalNumber=zhoneVdslPerfIntervalNumber, zhoneVdslLineConfUpMaxAggregateTxPwr=zhoneVdslLineConfUpMaxAggregateTxPwr, zhoneVdslPerfDataTable=zhoneVdslPerfDataTable, ZhoneVdslLineCodingType=ZhoneVdslLineCodingType, zhoneVdslPerfDataUASs=zhoneVdslPerfDataUASs, zhoneVdslLineConfUpErasureDetectionFast=zhoneVdslLineConfUpErasureDetectionFast, zhoneVdslLineConfUpMaxFastFec=zhoneVdslLineConfUpMaxFastFec, zhoneVdslVectDataEsDsCounter=zhoneVdslVectDataEsDsCounter, zhoneVdslVectDataEsUsCounter=zhoneVdslVectDataEsUsCounter, zhoneVdslGinpCurr15MinLeftrSecs=zhoneVdslGinpCurr15MinLeftrSecs, zhoneVdslLineConfCustomNotch2Stop=zhoneVdslLineConfCustomNotch2Stop, zhoneVdslPerfDataCurr15MinUASs=zhoneVdslPerfDataCurr15MinUASs, zhoneVdslLineConfDeploymentScenario=zhoneVdslLineConfDeploymentScenario, zhoneVdslLineConfDownPhyRminRSoverhead=zhoneVdslLineConfDownPhyRminRSoverhead, zhoneVdslGinpErrorFreeBits=zhoneVdslGinpErrorFreeBits, vdslXtucMinTxThresholdAlarmFailureTrap=vdslXtucMinTxThresholdAlarmFailureTrap, zhoneVdslChan1DayIntervalFixedOctets=zhoneVdslChan1DayIntervalFixedOctets, zhoneVdslLineConfUpInp=zhoneVdslLineConfUpInp, zhoneVdslPerf1DayIntervalLprs=zhoneVdslPerf1DayIntervalLprs, zhoneVdslPerfIntervalSESs=zhoneVdslPerfIntervalSESs, zhoneVdslPerfDataCurr1DayLoss=zhoneVdslPerfDataCurr1DayLoss, zhoneVdslChanFixedOctets=zhoneVdslChanFixedOctets, zhoneVdslLineConfDownFastMinDataRate=zhoneVdslLineConfDownFastMinDataRate, zhoneVdslLineConfDownUpshiftSnrMgn=zhoneVdslLineConfDownUpshiftSnrMgn, zhoneVdslLineConfUpGinpSupport=zhoneVdslLineConfUpGinpSupport, zhoneVdslLineConfDownMaxInterDelay=zhoneVdslLineConfDownMaxInterDelay, zhoneVdslLineConfDownPhyRSupport=zhoneVdslLineConfDownPhyRSupport, zhoneVdslChan1DayIntervalBadBlks=zhoneVdslChan1DayIntervalBadBlks, zhoneVdslLineConfAdslAnnexMModeEnabled=zhoneVdslLineConfAdslAnnexMModeEnabled, zhoneVdslLineConfTransmissionMode=zhoneVdslLineConfTransmissionMode, zhoneVdslPerfDataCurr1DayTimeElapsed=zhoneVdslPerfDataCurr1DayTimeElapsed, zhoneVdslLineConfDownMaxSnrMgn=zhoneVdslLineConfDownMaxSnrMgn, zhoneVdslLineConfDownGhsA43TonePwr=zhoneVdslLineConfDownGhsA43TonePwr, vdslXtucPerf15MinLolsThreshTrap=vdslXtucPerf15MinLolsThreshTrap, zhoneVdslLineConfUpMinSnrMgn=zhoneVdslLineConfUpMinSnrMgn, zhoneVdslLineConfDMTConfMode=zhoneVdslLineConfDMTConfMode, zhoneVdslVectDataEntry=zhoneVdslVectDataEntry, zhoneVdslChan1DayIntervalTable=zhoneVdslChan1DayIntervalTable, zhoneVdslLineAlarmConfProfRowStatus=zhoneVdslLineAlarmConfProfRowStatus, zhoneVdslCustomNotchConfProfileTable=zhoneVdslCustomNotchConfProfileTable, zhoneVdslLineConfDownPhyRRtxRatio=zhoneVdslLineConfDownPhyRRtxRatio, zhoneVdslLineConfProfileName=zhoneVdslLineConfProfileName, zhoneVdslPerfIntervalUASs=zhoneVdslPerfIntervalUASs, zhoneVdslLineConfUpPsdMaskSelect=zhoneVdslLineConfUpPsdMaskSelect, zhoneVdslLineConfDownGinpEtrMax=zhoneVdslLineConfDownGinpEtrMax, zhoneVdslChanIntervalEntry=zhoneVdslChanIntervalEntry, zhoneVdslPerfDataValidIntervals=zhoneVdslPerfDataValidIntervals, zhoneVdslLineConfProfile=zhoneVdslLineConfProfile, zhoneVdslLineConfUpPboControl=zhoneVdslLineConfUpPboControl, zhoneVdslLineConfDownGinpRtxMode=zhoneVdslLineConfDownGinpRtxMode, zhoneVdslLineConfDownGinpMaxDelay=zhoneVdslLineConfDownGinpMaxDelay, zhoneVdslPerfDataLprs=zhoneVdslPerfDataLprs, zhoneVdslLineMib=zhoneVdslLineMib, zhoneVdslCustomNotchConfProfileEntry=zhoneVdslCustomNotchConfProfileEntry, zhoneVdslPerfDataCurr1DayLofs=zhoneVdslPerfDataCurr1DayLofs, zhoneVdslLineConfBandOptUsage=zhoneVdslLineConfBandOptUsage, zhoneVdslLineConfDownGinpNdrMax=zhoneVdslLineConfDownGinpNdrMax, zhoneVdslLineConfDownGhsB43TonePwrMaxLvl=zhoneVdslLineConfDownGhsB43TonePwrMaxLvl, zhoneVdslLineAlarmConfThresh15MinSESs=zhoneVdslLineAlarmConfThresh15MinSESs, zhoneVdslLineConfProfileEntry=zhoneVdslLineConfProfileEntry, zhoneVdslLineConfUpGinpNdrMax=zhoneVdslLineConfUpGinpNdrMax, zhoneVdslVectDataIsDsFeValid=zhoneVdslVectDataIsDsFeValid, zhoneVdslLineConfAdslAnnexMPsdMask=zhoneVdslLineConfAdslAnnexMPsdMask, zhoneVdslLineConfDownGhsA43TonePwrMaxLvl=zhoneVdslLineConfDownGhsA43TonePwrMaxLvl, zhoneVdslPerf1DayIntervalUASs=zhoneVdslPerf1DayIntervalUASs, zhoneVdslPhysInvSerialNumber=zhoneVdslPhysInvSerialNumber, zhoneVdslLineConfDownPsdTemplate=zhoneVdslLineConfDownPsdTemplate, zhoneVdslLineConfUpSlowMinDataRate=zhoneVdslLineConfUpSlowMinDataRate, zhoneVdslLineConfUpGinpMin=zhoneVdslLineConfUpGinpMin, zhoneVdslLineTable=zhoneVdslLineTable, zhoneVdslLineConfUpTrellis=zhoneVdslLineConfUpTrellis, zhoneVdslLineConfDownGhsV43TonePwrMaxLvl=zhoneVdslLineConfDownGhsV43TonePwrMaxLvl, zhoneVdslGinpCurr1DayLeftrSecs=zhoneVdslGinpCurr1DayLeftrSecs, zhoneVdslChanIntervalFixedOctets=zhoneVdslChanIntervalFixedOctets, zhoneVdslLineConfProfileTable=zhoneVdslLineConfProfileTable, zhoneVdslChanPerfDataEntry=zhoneVdslChanPerfDataEntry, zhoneVdslPhysCurrSnrMgn=zhoneVdslPhysCurrSnrMgn, zhoneVdslLineType=zhoneVdslLineType, zhoneVdslLineConfUpPboPsdParamB4=zhoneVdslLineConfUpPboPsdParamB4, zhoneVdslLineConfDownGhsV43TonePwr=zhoneVdslLineConfDownGhsV43TonePwr, zhoneVdslLineConfDownMinTxThresholdAlarm=zhoneVdslLineConfDownMinTxThresholdAlarm, zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords=zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords, zhoneVdslLineConfDownGinpReinCfg=zhoneVdslLineConfDownGinpReinCfg, zhoneVdslPerfDataCurr15MinInits=zhoneVdslPerfDataCurr15MinInits, zhoneVdslChanCurr15MinFixedOctets=zhoneVdslChanCurr15MinFixedOctets, zhoneVdslLineConfFallbackDefaultVpi=zhoneVdslLineConfFallbackDefaultVpi, zhoneVdslLineConfAutoModeCrtrn=zhoneVdslLineConfAutoModeCrtrn, zhoneVdslGinpCurr15MinMinEftr=zhoneVdslGinpCurr15MinMinEftr, zhoneVdslLineConfVdslMode=zhoneVdslLineConfVdslMode, zhoneVdslLineAlarmConfThresh1DayUASs=zhoneVdslLineAlarmConfThresh1DayUASs, zhoneVdslLineConfDownGhsB43TonePwr=zhoneVdslLineConfDownGhsB43TonePwr, zhoneVdslPerfDataESs=zhoneVdslPerfDataESs, zhoneVdslLineConfUpGinpMinDelay=zhoneVdslLineConfUpGinpMinDelay, zhoneVdslChan1DayValidIntervals=zhoneVdslChan1DayValidIntervals, zhoneVdslLineConfUpMaxInterDelay=zhoneVdslLineConfUpMaxInterDelay, zhoneVdslChanCrcBlockLength=zhoneVdslChanCrcBlockLength, zhoneVdslPerfIntervalLoss=zhoneVdslPerfIntervalLoss, zhoneVdslLineConfCustomNotch2Start=zhoneVdslLineConfCustomNotch2Start, vdslXtucPerf1DayLprsThreshTrap=vdslXtucPerf1DayLprsThreshTrap, vdslXtucPerf15MinLprsThreshTrap=vdslXtucPerf15MinLprsThreshTrap, zhoneVdslLineConfDownTargetSlowBurst=zhoneVdslLineConfDownTargetSlowBurst, zhoneVdslLineConfUpPboPsdTemplate=zhoneVdslLineConfUpPboPsdTemplate, zhoneVdslLineConfSeltNoiseMeasurementTime=zhoneVdslLineConfSeltNoiseMeasurementTime, zhoneVdslPerfDataCurr15MinESs=zhoneVdslPerfDataCurr15MinESs, vdslXtucPerf15MinUASsThreshTrap=vdslXtucPerf15MinUASsThreshTrap, zhoneVdslLineAlarmConfThresh15MinLols=zhoneVdslLineAlarmConfThresh15MinLols, zhoneVdslLineConfPotsBypassRelayMaxDuration=zhoneVdslLineConfPotsBypassRelayMaxDuration, zhoneVdslPerfDataInvalidIntervals=zhoneVdslPerfDataInvalidIntervals, zhoneVdslLineConfUpPsdMaskEnable=zhoneVdslLineConfUpPsdMaskEnable, zhoneVdslLineConfUpMinUpshiftTime=zhoneVdslLineConfUpMinUpshiftTime, zhoneVdslPerfDataCurr15MinSESs=zhoneVdslPerfDataCurr15MinSESs, zhoneVdslPerfDataCurr15MinTimeElapsed=zhoneVdslPerfDataCurr15MinTimeElapsed, zhoneVdslChanCurr15MinBadBlks=zhoneVdslChanCurr15MinBadBlks, zhoneVdslGinpCurr1DayErrorFreeBits=zhoneVdslGinpCurr1DayErrorFreeBits, zhoneVdslLineConfUpPboPsdParamA1=zhoneVdslLineConfUpPboPsdParamA1, zhoneVdslLineConfDownPhyRmaxINP=zhoneVdslLineConfDownPhyRmaxINP, vdslXtucPerf15MinSESsThreshTrap=vdslXtucPerf15MinSESsThreshTrap, zhoneVdslLineConfUpGinpReinFreq=zhoneVdslLineConfUpGinpReinFreq, zhoneVdslGinpPrev1DayErrorFreeBits=zhoneVdslGinpPrev1DayErrorFreeBits, zhoneVdslLineConfAdslPresence=zhoneVdslLineConfAdslPresence, zhoneVdslPerfDataCurr15MinLoss=zhoneVdslPerfDataCurr15MinLoss, zhoneVdslLineConfDownRateMode=zhoneVdslLineConfDownRateMode, zhoneVdslLineConfDownPsdMaskSelect=zhoneVdslLineConfDownPsdMaskSelect, zhoneVdslPerf1DayIntervalSESs=zhoneVdslPerf1DayIntervalSESs, zhoneVdslPhyrPrev1DayRetransmittedCodewords=zhoneVdslPhyrPrev1DayRetransmittedCodewords, zhoneVdslLineConfDownGinpEtrMin=zhoneVdslLineConfDownGinpEtrMin, zhoneVdslLineEnableRsCoding=zhoneVdslLineEnableRsCoding, zhoneVdslPerfDataCurr1DayLols=zhoneVdslPerfDataCurr1DayLols, zhoneVdslLineConfBandPlan=zhoneVdslLineConfBandPlan, zhoneVdslChanIntervalBadBlks=zhoneVdslChanIntervalBadBlks, zhoneVdslPerfDataCurr1DayInits=zhoneVdslPerfDataCurr1DayInits, zhoneVdslChan1DayIntervalEntry=zhoneVdslChan1DayIntervalEntry, zhoneVdslLineConfUs0BoundaryTone=zhoneVdslLineConfUs0BoundaryTone, zhoneVdslLineAlarmConfThresh15MinLoss=zhoneVdslLineAlarmConfThresh15MinLoss, zhoneVdslLineConfUpVirtualNoiseSnrMode=zhoneVdslLineConfUpVirtualNoiseSnrMode, zhoneVdslLineConfDownGinpLeftrThreshold=zhoneVdslLineConfDownGinpLeftrThreshold, zhoneVdslGinpMinEftr=zhoneVdslGinpMinEftr, zhoneVdslPhyrCurr1DayRetransmittedCodewords=zhoneVdslPhyrCurr1DayRetransmittedCodewords, zhoneVdslLineConfDownGinpMinRSoverhead=zhoneVdslLineConfDownGinpMinRSoverhead, vdslXtucPerf1DayUASsThreshTrap=vdslXtucPerf1DayUASsThreshTrap, zhoneVdslLineConfUpGinpMaxDelay=zhoneVdslLineConfUpGinpMaxDelay, zhoneVdslLineConfUpPboPsdParamB3=zhoneVdslLineConfUpPboPsdParamB3, zhoneVdslLineConfUpGinpShineRatio=zhoneVdslLineConfUpGinpShineRatio, zhoneVdslChanInterleaveDelay=zhoneVdslChanInterleaveDelay, zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords=zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords, zhoneVdslNotificationGroup=zhoneVdslNotificationGroup, zhoneVdslChan1DayIntervalNumber=zhoneVdslChan1DayIntervalNumber, zhoneVdslInitFailureTrap=zhoneVdslInitFailureTrap, zhoneVdslPerfDataInits=zhoneVdslPerfDataInits, zhoneVdslPerfData1DayValidIntervals=zhoneVdslPerfData1DayValidIntervals, zhoneVdslCompliances=zhoneVdslCompliances, zhoneVdslLineEnableTrellisCoding=zhoneVdslLineEnableTrellisCoding, zhoneVdslLineConfUpPhyRmaxINP=zhoneVdslLineConfUpPhyRmaxINP, zhoneVdslLineConfDownRateRatio=zhoneVdslLineConfDownRateRatio, zhoneVdslLineConfDownMaxInterleavingDelay=zhoneVdslLineConfDownMaxInterleavingDelay, zhoneVdslPerfIntervalLols=zhoneVdslPerfIntervalLols, zhoneVdslLineConfApplicableStandard=zhoneVdslLineConfApplicableStandard, zhoneVdslLineConfUpPboPsdParamB2=zhoneVdslLineConfUpPboPsdParamB2, zhoneVdslLineConfUpTargetSlowBurst=zhoneVdslLineConfUpTargetSlowBurst, zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords=zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords, zhoneVdslPerfDataCurr1DayESs=zhoneVdslPerfDataCurr1DayESs, zhoneVdslPhysPhyRActive=zhoneVdslPhysPhyRActive, zhoneVdslPerfDataLofs=zhoneVdslPerfDataLofs, zhoneVdslLineConfUpGinpReinCfg=zhoneVdslLineConfUpGinpReinCfg, zhoneVdslLineConfPboElectricalOverride=zhoneVdslLineConfPboElectricalOverride, zhoneVdslLineConfUpTargetSnrMgn=zhoneVdslLineConfUpTargetSnrMgn, zhoneVdslLineAlarmConfProfileTable=zhoneVdslLineAlarmConfProfileTable, zhoneVdslPerfIntervalLofs=zhoneVdslPerfIntervalLofs, zhoneVdslLineConfUpMinDownshiftTime=zhoneVdslLineConfUpMinDownshiftTime, zhoneVdslLineConfDownTrellis=zhoneVdslLineConfDownTrellis, zhoneVdslLineAlarmConfThresh15MinUASs=zhoneVdslLineAlarmConfThresh15MinUASs, zhoneVdslPerf1DayIntervalNumber=zhoneVdslPerf1DayIntervalNumber, zhoneVdslLineAlarmConfThresh15MinLofs=zhoneVdslLineAlarmConfThresh15MinLofs, zhoneVdslLineConfDownGinpShineRatio=zhoneVdslLineConfDownGinpShineRatio, zhoneVdslLineConfUpDownshiftSnrMgn=zhoneVdslLineConfUpDownshiftSnrMgn, zhoneVdslLineConfDownVirtualNoiseSnrMode=zhoneVdslLineConfDownVirtualNoiseSnrMode, zhoneVdslLineConfUpGinpEtrMin=zhoneVdslLineConfUpGinpEtrMin, zhoneVdslPerfIntervalLprs=zhoneVdslPerfIntervalLprs, zhoneVdslLineConfUpGinpRtxMode=zhoneVdslLineConfUpGinpRtxMode, zhoneVdslLineConfDownDownshiftSnrMgn=zhoneVdslLineConfDownDownshiftSnrMgn, zhoneVdslLineAlarmConfThresh1DaySESs=zhoneVdslLineAlarmConfThresh1DaySESs, zhoneVdslLineConfDownBitSwap=zhoneVdslLineConfDownBitSwap, zhoneVdslChanIntervalNumber=zhoneVdslChanIntervalNumber, zhoneVdslChanCurr1DayFixedOctets=zhoneVdslChanCurr1DayFixedOctets, zhoneVdslLineAlarmConfThresh1DayLofs=zhoneVdslLineAlarmConfThresh1DayLofs, zhoneVdslLineAlarmConfThresh1DayLoss=zhoneVdslLineAlarmConfThresh1DayLoss, vdslXtucPerf1DayLolsThreshTrap=vdslXtucPerf1DayLolsThreshTrap, zhoneVdslGinpPrev1DayLeftrSecs=zhoneVdslGinpPrev1DayLeftrSecs, zhoneVdslLineConfDownGhsA43cTonePwr=zhoneVdslLineConfDownGhsA43cTonePwr, zhoneVdslLineConfDownGinpMinDelay=zhoneVdslLineConfDownGinpMinDelay, vdslXtucPerf1DaySESsThreshTrap=vdslXtucPerf1DaySESsThreshTrap, zhoneVdslLineConfUpGinpEtrMax=zhoneVdslLineConfUpGinpEtrMax, zhoneVdslPerfData1DayInvalidIntervals=zhoneVdslPerfData1DayInvalidIntervals, zhoneVdslLineConfDownGinpSupport=zhoneVdslLineConfDownGinpSupport, zhoneVdslPhysCurrProfile=zhoneVdslPhysCurrProfile, zhoneVdslLineConfDownMaxPwr=zhoneVdslLineConfDownMaxPwr, zhoneVdslGinpCurr1DayMinEftr=zhoneVdslGinpCurr1DayMinEftr, zhoneVdslLineConfUpPboPsdParamA2=zhoneVdslLineConfUpPboPsdParamA2, zhoneVdslLineConfUpRsCoding=zhoneVdslLineConfUpRsCoding, vdslXtucPerf15MinLossThreshTrap=vdslXtucPerf15MinLossThreshTrap, zhoneVdslLineConfUpPsdShape=zhoneVdslLineConfUpPsdShape, zhoneVdslPerfDataCurr1DayLprs=zhoneVdslPerfDataCurr1DayLprs, zhoneVdslGroup=zhoneVdslGroup, zhoneVdslLineConfDownPsdMaskEnable=zhoneVdslLineConfDownPsdMaskEnable, zhoneVdslLineAlarmConfThresh15MinLprs=zhoneVdslLineAlarmConfThresh15MinLprs, zhoneVdslLineConfDownErasureDetectionFast=zhoneVdslLineConfDownErasureDetectionFast, zhoneVdslPhyrCorrectedRetransmittedCodewords=zhoneVdslPhyrCorrectedRetransmittedCodewords, vdslXtucPerf15MinLofsThreshTrap=vdslXtucPerf15MinLofsThreshTrap, zhoneVdslLineConfDownFastMaxDataRate=zhoneVdslLineConfDownFastMaxDataRate, zhoneVdslLineConfUpSlowMaxDataRate=zhoneVdslLineConfUpSlowMaxDataRate, zhoneVdslLineConfUpPhyRSupport=zhoneVdslLineConfUpPhyRSupport, zhoneVdslLineConfDownRsCoding=zhoneVdslLineConfDownRsCoding, zhoneVdslChanIntervalTable=zhoneVdslChanIntervalTable, zhoneVdslLineConfUpPboPsdParamA4=zhoneVdslLineConfUpPboPsdParamA4, zhoneVdslPerf1DayIntervalInits=zhoneVdslPerf1DayIntervalInits, zhoneVdslVectDataEsFeDsCounter=zhoneVdslVectDataEsFeDsCounter, vdslXtucPerf1DayLossThreshTrap=vdslXtucPerf1DayLossThreshTrap)
mibBuilder.exportSymbols("ZhoneVdsl-MIB", zhoneVdslLineConfUpMaxInterleavingDelay=zhoneVdslLineConfUpMaxInterleavingDelay, zhoneVdslPerf1DayIntervalLols=zhoneVdslPerf1DayIntervalLols, zhoneVdslChanCurr15MinTimeElapsed=zhoneVdslChanCurr15MinTimeElapsed, PYSNMP_MODULE_ID=zhoneVdslMib, zhoneVdslLineConfAdslBandModeEndFreq=zhoneVdslLineConfAdslBandModeEndFreq, zhoneVdslLineAlarmConfProfileName=zhoneVdslLineAlarmConfProfileName, vdslXtucPerf1DayESsThreshTrap=vdslXtucPerf1DayESsThreshTrap, zhoneVdslChanTable=zhoneVdslChanTable, zhoneVdslLineConfUpMaxPsd=zhoneVdslLineConfUpMaxPsd, zhoneVdslLineConfUpPhyRminRSoverhead=zhoneVdslLineConfUpPhyRminRSoverhead, zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords=zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords, zhoneVdslPhyrRetransmittedCodewords=zhoneVdslPhyrRetransmittedCodewords, zhoneVdslPerfIntervalTable=zhoneVdslPerfIntervalTable, zhoneVdslLineAlarmConfThresh1DayInitFailure=zhoneVdslLineAlarmConfThresh1DayInitFailure, zhoneVdslLineCoding=zhoneVdslLineCoding, zhoneVdslPerfDataLols=zhoneVdslPerfDataLols, zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords=zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords, zhoneVdslLineConfFallbackDefaultVci=zhoneVdslLineConfFallbackDefaultVci, ZhoneVdslLineEntity=ZhoneVdslLineEntity, zhoneVdslPhysTable=zhoneVdslPhysTable, zhoneVdslLineConfSeltEchoMeasurementTime=zhoneVdslLineConfSeltEchoMeasurementTime, zhoneVdslChan1DayIntervalMoniSecs=zhoneVdslChan1DayIntervalMoniSecs, zhoneVdslPerfIntervalEntry=zhoneVdslPerfIntervalEntry, zhoneVdslPerfDataEntry=zhoneVdslPerfDataEntry, zhoneVdslPerfDataCurr15MinLofs=zhoneVdslPerfDataCurr15MinLofs, zhoneVdslLineConfAdslBandMode=zhoneVdslLineConfAdslBandMode, zhoneVdslCustomNotchConfStop=zhoneVdslCustomNotchConfStop, zhoneVdslChanValidIntervals=zhoneVdslChanValidIntervals, zhoneVdslLineConfUpFastMinDataRate=zhoneVdslLineConfUpFastMinDataRate, zhoneVdslLineConfDownMinSnrMgn=zhoneVdslLineConfDownMinSnrMgn, vdslXturMinTxThresholdAlarmFailureTrap=vdslXturMinTxThresholdAlarmFailureTrap, zhoneVdslChanEntry=zhoneVdslChanEntry, zhoneVdslLineConfUpMaxSnrMgn=zhoneVdslLineConfUpMaxSnrMgn, zhoneVdslLineConfCustomNotch1Start=zhoneVdslLineConfCustomNotch1Start, zhoneVdslLineConfBandPlanFx=zhoneVdslLineConfBandPlanFx, zhoneVdslGinpCurr15MinErrorFreeBits=zhoneVdslGinpCurr15MinErrorFreeBits, zhoneVdslChanCurr1DayTimeElapsed=zhoneVdslChanCurr1DayTimeElapsed, zhoneVdslLineAlarmConfThresh1DayESs=zhoneVdslLineAlarmConfThresh1DayESs, zhoneVdslPerfDataCurr1DayUASs=zhoneVdslPerfDataCurr1DayUASs, zhoneVdslLineConfDownMaxFastFec=zhoneVdslLineConfDownMaxFastFec, zhoneVdslLineConfDownMaxAggregateTxPwr=zhoneVdslLineConfDownMaxAggregateTxPwr, zhoneVdslLineConfUpMinTxThresholdAlarm=zhoneVdslLineConfUpMinTxThresholdAlarm, zhoneVdslLineConfDownInp=zhoneVdslLineConfDownInp, zhoneVdslPhyrUncorrectableRetransmittedCodewords=zhoneVdslPhyrUncorrectableRetransmittedCodewords, zhoneVdslLineConfUpBitSwap=zhoneVdslLineConfUpBitSwap, zhoneVdslLineConfUpPhyRRtxRatio=zhoneVdslLineConfUpPhyRRtxRatio, zhoneVdslLineAlarmConfProfileEntry=zhoneVdslLineAlarmConfProfileEntry, zhoneVdslLineConfDownGinpReinFreq=zhoneVdslLineConfDownGinpReinFreq, vdslXtucPerf15MinESsThreshTrap=vdslXtucPerf15MinESsThreshTrap, zhoneVdslLineConfUpGinpLeftrThreshold=zhoneVdslLineConfUpGinpLeftrThreshold, zhoneVdslCustomNotchConfId=zhoneVdslCustomNotchConfId, zhoneVdslLineConfNetworkTimingRef=zhoneVdslLineConfNetworkTimingRef, zhoneVdslPerf1DayIntervalLoss=zhoneVdslPerf1DayIntervalLoss, zhoneVdslChan1DayInvalidIntervals=zhoneVdslChan1DayInvalidIntervals, zhoneVdslLineConfCustomNotch1Stop=zhoneVdslLineConfCustomNotch1Stop, zhoneVdslCustomNotchConfStart=zhoneVdslCustomNotchConfStart, zhoneVdslPerfDataCurr15MinLprs=zhoneVdslPerfDataCurr15MinLprs, zhoneVdslLineMibCompliance=zhoneVdslLineMibCompliance, zhoneVdslPhysInvVersionNumber=zhoneVdslPhysInvVersionNumber, zhoneVdslPerfDataSESs=zhoneVdslPerfDataSESs, zhoneVdslPerf1DayIntervalEntry=zhoneVdslPerf1DayIntervalEntry, zhoneVdslLineConfDownMaxPsd=zhoneVdslLineConfDownMaxPsd, zhoneVdslLineConfUpFastMaxDataRate=zhoneVdslLineConfUpFastMaxDataRate, zhoneVdslChanCurrTxFastFec=zhoneVdslChanCurrTxFastFec, zhoneVdslPerfIntervalESs=zhoneVdslPerfIntervalESs, zhoneVdslGroups=zhoneVdslGroups, zhoneVdslGinpPrev1DayMinEftr=zhoneVdslGinpPrev1DayMinEftr, zhoneVdslLineAlarmConfThresh1DayLprs=zhoneVdslLineAlarmConfThresh1DayLprs, zhoneVdslLineAlarmConfInitFailure=zhoneVdslLineAlarmConfInitFailure, zhoneVdslPhysCurrLineRate=zhoneVdslPhysCurrLineRate, zhoneVdslLineEntry=zhoneVdslLineEntry, zhoneVdslChanCurrTxSlowBurstProtect=zhoneVdslChanCurrTxSlowBurstProtect, zhoneVdslPhysCurrConnType=zhoneVdslPhysCurrConnType, zhoneVdslLineConfUpMaxPwr=zhoneVdslLineConfUpMaxPwr, zhoneVdslLineConfUpPboPsdParamA3=zhoneVdslLineConfUpPboPsdParamA3, zhoneVdslLineConfDownSlowMaxDataRate=zhoneVdslLineConfDownSlowMaxDataRate, zhoneVdslLineConfDownPboControl=zhoneVdslLineConfDownPboControl, zhoneVdslLineConfUpGinpMinRSoverhead=zhoneVdslLineConfUpGinpMinRSoverhead, zhoneVdslPerfDataCurr15MinLols=zhoneVdslPerfDataCurr15MinLols, zhoneVdslPerf1DayIntervalESs=zhoneVdslPerf1DayIntervalESs, zhoneVdslLineConfPsdShape=zhoneVdslLineConfPsdShape, zhoneVdslConformance=zhoneVdslConformance, zhoneVdslPhyrCurr15MinRetransmittedCodewords=zhoneVdslPhyrCurr15MinRetransmittedCodewords, zhoneVdslPerf1DayIntervalLofs=zhoneVdslPerf1DayIntervalLofs, zhoneVdslPhysInvVendorID=zhoneVdslPhysInvVendorID, zhoneVdslLineConfDownErasureDetectionInterleave=zhoneVdslLineConfDownErasureDetectionInterleave, zhoneVdslMibObjects=zhoneVdslMibObjects, zhoneVdslLineConfUpPsdTemplate=zhoneVdslLineConfUpPsdTemplate, zhoneVdslPerf1DayIntervalMoniSecs=zhoneVdslPerf1DayIntervalMoniSecs, zhoneVdslPhysEntry=zhoneVdslPhysEntry, zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords=zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords, zhoneVdslLineConfUpPboPsdParamB1=zhoneVdslLineConfUpPboPsdParamB1, zhoneVdslLineAlarmConfThresh1DayLols=zhoneVdslLineAlarmConfThresh1DayLols, zhoneVdslChanPerfDataTable=zhoneVdslChanPerfDataTable, zhoneVdslPerfIntervalInits=zhoneVdslPerfIntervalInits, zhoneVdslPerf1DayIntervalTable=zhoneVdslPerf1DayIntervalTable, zhoneVdslPhysGinpActive=zhoneVdslPhysGinpActive)
