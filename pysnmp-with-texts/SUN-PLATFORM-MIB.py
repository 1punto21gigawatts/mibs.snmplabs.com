#
# PySNMP MIB module SUN-PLATFORM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SUN-PLATFORM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
entPhysicalEntry, entLogicalEntry, entPhysicalIndex, entLogicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalEntry", "entLogicalEntry", "entPhysicalIndex", "entLogicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, enterprises, Gauge32, ObjectIdentity, Bits, IpAddress, Counter32, MibIdentifier, iso, Unsigned32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "enterprises", "Gauge32", "ObjectIdentity", "Bits", "IpAddress", "Counter32", "MibIdentifier", "iso", "Unsigned32", "Counter64", "ModuleIdentity")
TDomain, VariablePointer, DateAndTime, DisplayString, RowPointer, TruthValue, TAddress, TextualConvention, RowStatus, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "TDomain", "VariablePointer", "DateAndTime", "DisplayString", "RowPointer", "TruthValue", "TAddress", "TextualConvention", "RowStatus", "TestAndIncr")
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
sunFire = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70))
sunPlatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 70, 101))
sunPlatMIB.setRevisions(('2002-11-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sunPlatMIB.setRevisionsDescriptions(('Version: 1.18 Initial Release',))
if mibBuilder.loadTexts: sunPlatMIB.setLastUpdated('200211140000Z')
if mibBuilder.loadTexts: sunPlatMIB.setOrganization('Sun Microsystems, Inc.')
if mibBuilder.loadTexts: sunPlatMIB.setContactInfo('Sun Microsystems, Inc 4150 Network Circle Santa Clara, CA 95054 1-800-555-9SUN or 1-650-960-1300 http://www.sun.com')
if mibBuilder.loadTexts: sunPlatMIB.setDescription('SUN-PLATFORM-MIB.mib Version 1.19 Copyright 2003, by Sun Microsystems, Inc. All rights reserved. Use is subject to license terms. The SUN-PLATFORM-MIB provides extensions to the ENTITY-MIB (RFC2737) where each entity modelled in the system is represented by means of extensions to the entPhysicalTable. Certain of the attributes in the entPhysicalTable are applicable to the model presented by the SUN-PLATFORM-MIB and are explained below: The entries in the entPhysicalTable have the following significance with respect to the SUN-PLATFORM-MIB model: entPhysicalIndex containment, M.3100, fig. 2, index for table extensions. entPhysicalContainedIn containment, M.3100, fig. 2 entPhysicalClass Used to select applicable table extensions, Managed Object Class, M.3100, Table 1 entPhysicalHardwareRev version, M.3100, sec. 5.71 entPhysicalFirmwareRev version, M.3100, sec. 5.71 entPhysicalSoftwareRev version, M.3100, sec. 5.71 entPhysicalMfgName vendorName, M.3100, sec. 5.70 entPhysicalAlias userLabel, M.3100, sec. 5.69 Part of this MIB module is an SNMP version of the Generic Network Information Model (NIM) presented in ITU-T M.3100. This information is further extended by attributes derived from the CIM v2.5 Schema. The containment hierarchy is modelled using the ENTITY-MIB (RFC2737) where each entity modelled in the system is represented by means of extensions to the entPhysicalTable. Where an entity is an instance of a managed object class which is sub-classed from another, the attributes of each class are modelled in a separate table extension. For example for an entity with an entPhysicalClass of module(9), which corresponds to a Circuit Pack, sub-classed from Equipment, an entry will exist in the sunPlatEquipmentTable, with additional attributes in the sunPlatCircuitPackTable. References are made to the following recommendations/revisions: ITU-T M.3100 (07/95) CCITT X.721 (1992 E) CCITT X.731 (1992 E) (01/92) CCITT X.733 (1992 E) CCITT X.734 (1992 E) CCITT X.735 (1992 E) (09/92) CIM Schema: Version 2.5')
sunPlatMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1))
sunPlatMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2))
sunPlatMIBPhysicalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1))
sunPlatMIBLogicalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2))
sunPlatMIBLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3))
sunPlatMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0))
sunPlatMIBTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1))
sunPlatMIBConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3))
sunPlatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 1))
sunPlatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2))
sunPlatMIBObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1))
sunPlatMIBNotifGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 2))
class SunPlatLogAdministrativeState(TextualConvention, Integer32):
    reference = 'X.735, sec. 8.1.1.1.3'
    description = 'An enumerated value which describes the Administrative State of the log as defined in X.735, sec. 8.1.1.1.3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("locked", 1), ("unlocked", 2))

class SunPlatAdministrativeState(TextualConvention, Integer32):
    reference = 'X.731, sec. 8.1.1.3'
    description = 'An enumerated value which describes the Administrative State of the managed object as defined in X.731, sec. 8.1.1.3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("locked", 1), ("unlocked", 2), ("shuttingDown", 3))

class SunPlatOperationalState(TextualConvention, Integer32):
    reference = 'X.731, sec. 8.1.1.1.'
    description = 'An enumerated value which describes the Operational State of the managed object as defined in X.731, sec. 8.1.1.1.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class SunPlatAlarmPerceivedSeverity(TextualConvention, Integer32):
    reference = 'X.733, sec. 8.1.2.3.'
    description = "The value of this object identifies the Perceived Severity of an alarm in the log, including 'cleared' as defined in X.733, sec. 8.1.2.3."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("indeterminate", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("cleared", 6))

class SunPlatAlarmStatus(TextualConvention, Integer32):
    reference = 'M.3100, sec. 5.8.'
    description = 'The value of this object identifies the Alarm Status of the managed object as defined in M.3100, sec. 5.8.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("indeterminate", 4), ("warning", 5), ("pending", 6), ("cleared", 7))

class SunPlatEquipmentHolderType(TextualConvention, Integer32):
    reference = 'M.3100, sec. 5.26.'
    description = 'The Equipment Holder Type as defined in M.3100, sec. 5.26.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("bay", 1), ("shelf", 2), ("drawer", 3), ("slot", 4), ("rack", 5))

class SunPlatEquipmentHolderStatus(TextualConvention, Integer32):
    reference = 'M.3100, sec. 5.32.'
    description = 'This attribute identifies whether or not a Circuit Pack is present in the slot and if so, is it recognised/acceptable as defined as Holder Status in M.3100, sec. 5.32.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("holderEmpty", 1), ("inTheAcceptableList", 2), ("notInTheAcceptableList", 3), ("unknownType", 4))

class SunPlatEquipmentHolderPower(TextualConvention, Integer32):
    description = 'An enumeration of possible power management states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("powerOff", 3), ("powerOn", 4))

class SunPlatCircuitPackAvailabilityStatus(TextualConvention, Bits):
    reference = 'X.731, sec. 8.1.2.3.'
    description = 'An enumeration of possible AvailabilityStatus flags as defined in X.731, sec. 8.1.2.3.'
    status = 'current'
    namedValues = NamedValues(("inTest", 0), ("failed", 1), ("powerOff", 2), ("offLine", 3), ("offDuty", 4), ("dependency", 5), ("degraded", 6), ("notInstalled", 7))

class SunPlatProbableCause(TextualConvention, Integer32):
    reference = 'M.3100, sec. 10.2; X.733, sec. 8.1.2.1; X.736, sec. 8.1.2.1'
    description = 'A Probable Cause which provides additional information associated with and alarm notification as per ITU-T M.3100 sec. 10.2, X.733, sec. 8.1.2.1., and X.736.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 201, 202, 203, 204, 205, 206, 207, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303))
    namedValues = NamedValues(("aIS", 1), ("callSetUpFailure", 2), ("degradedSignal", 3), ("farEndReceiverFailure", 4), ("framingError", 5), ("lossOfFrame", 6), ("lossOfPointer", 7), ("lossOfSignal", 8), ("payloadTypeMismatch", 9), ("transmissionError", 10), ("remoteAlarmInterface", 11), ("excessiveBER", 12), ("pathTraceMismatch", 13), ("unavailable", 14), ("signalLabelMismatch", 15), ("lossOfMultiFrame", 16), ("receiveFailure", 17), ("transmitFailure", 18), ("modulationFailure", 19), ("demodulationFailure", 20), ("broadcastChannelFailure", 21), ("connectionEstablishmentError", 22), ("invalidMessageReceived", 23), ("localNodeTransmissionError", 24), ("remoteNodeTransmissionError", 25), ("routingFailure", 26), ("backplaneFailure", 51), ("dataSetProblem", 52), ("equipmentIdentifierDuplication", 53), ("externalIFDeviceProblem", 54), ("lineCardProblem", 55), ("multiplexerProblem", 56), ("nEIdentifierDuplication", 57), ("powerProblem", 58), ("processorProblem", 59), ("protectionPathFailure", 60), ("receiverFailure", 61), ("replaceableUnitMissing", 62), ("replaceableUnitTypeMismatch", 63), ("synchronizationSourceMismatch", 64), ("terminalProblem", 65), ("timingProblem", 66), ("transmitterFailure", 67), ("trunkCardProblem", 68), ("replaceableUnitProblem", 69), ("realTimeClockFailure", 70), ("antennaFailure", 71), ("batteryChargingFailure", 72), ("diskFailure", 73), ("frequencyHoppingFailure", 74), ("iODeviceError", 75), ("lossOfSynchronisation", 76), ("lossOfRedundancy", 77), ("powerSupplyFailure", 78), ("signalQualityEvaluationFailure", 79), ("tranceiverFailure", 80), ("protectionMechanismFailure", 81), ("protectingResourceFailure", 82), ("airCompressorFailure", 101), ("airConditioningFailure", 102), ("airDryerFailure", 103), ("batteryDischarging", 104), ("batteryFailure", 105), ("commercialPowerFailure", 106), ("coolingFanFailure", 107), ("engineFailure", 108), ("fireDetectorFailure", 109), ("fuseFailure", 110), ("generatorFailure", 111), ("lowBatteryThreshold", 112), ("pumpFailure", 113), ("rectifierFailure", 114), ("rectifierHighVoltage", 115), ("rectifierLowFVoltage", 116), ("ventilationsSystemFailure", 117), ("enclosureDoorOpen", 118), ("explosiveGas", 119), ("fire", 120), ("flood", 121), ("highHumidity", 122), ("highTemperature", 123), ("highWind", 124), ("iceBuildUp", 125), ("intrusionDetection", 126), ("lowFuel", 127), ("lowHumidity", 128), ("lowCablePressure", 129), ("lowTemperature", 130), ("lowWater", 131), ("smoke", 132), ("toxicGas", 133), ("coolingSystemFailure", 134), ("externalEquipmentFailure", 135), ("externalPointFailure", 136), ("storageCapacityProblem", 151), ("memoryMismatch", 152), ("corruptData", 153), ("outOfCPUCycles", 154), ("sfwrEnvironmentProblem", 155), ("sfwrDownloadFailure", 156), ("lossOfRealTime", 157), ("reinitialized", 158), ("applicationSubsystemFailure", 159), ("configurationOrCustomisationError", 160), ("databaseInconsistency", 161), ("fileError", 162), ("outOfMemory", 163), ("softwareError", 164), ("timeoutExpired", 165), ("underlayingResourceUnavailable", 166), ("versionMismatch", 167), ("bandwidthReduced", 201), ("congestion", 202), ("excessiveErrorRate", 203), ("excessiveResponseTime", 204), ("excessiveRetransmissionRate", 205), ("reducedLoggingCapability", 206), ("systemResourcesOverload", 207), ("other", 255), ("adapterError", 256), ("callEstablishmentError", 257), ("communicationsProtocolError", 258), ("communicationsSubsystemFailure", 259), ("configurationOrCustomizationError", 260), ("cpuCyclesLimitExceeded", 261), ("dataSetOrModemError", 262), ("dteDceInterfaceError", 263), ("equipmentMalfunction", 264), ("excessiveVibration", 265), ("fireDetected", 266), ("floodDetected", 267), ("heatingVentCoolingSystemProblem", 268), ("humidityUnacceptable", 269), ("inputOutputDeviceError", 270), ("inputDeviceError", 271), ("lanError", 272), ("leakDetected", 273), ("materialSupplyExhausted", 274), ("ouputDeviceError", 275), ("performanceDegraded", 276), ("pressureUnacceptable", 277), ("queueSizeExceeded", 278), ("resourceAtOrNearingCapacity", 279), ("responseTimeExecessive", 280), ("retransmissionRateExcessive", 281), ("softwareProgramAbnormallyTerminated", 282), ("softwareProgramError", 283), ("temperatureUnacceptable", 284), ("thresholdCrossed", 285), ("toxicLeakDetected", 286), ("underlyingResourceUnavailable", 287), ("authenticationFailure", 288), ("breachOfConfidentiality", 289), ("cableTamper", 290), ("delayedInformation", 291), ("denialOfService", 292), ("duplicateInformation", 293), ("informationMissing", 294), ("informationModificationDetected", 295), ("informationOutOfSequence", 296), ("keyExpired", 297), ("nonRepudiationFailure", 298), ("outOfHoursActivity", 299), ("outOfService", 300), ("proceduralError", 301), ("unauthorizedAccessAttempt", 302), ("unexpectedInformation", 303))

class SunPlatPhysicalClass(TextualConvention, Integer32):
    description = 'An enumeration of possible physical classes where entPhysicalClass is specified as other(1).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("alarm", 2), ("watchdog", 3))

class SunPlatSensorClass(TextualConvention, Integer32):
    description = 'An enumeration of possible sensor classes where entPhysicalClass is specified as sensor(8).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("binary", 1), ("numeric", 2), ("discrete", 3))

class SunPlatSensorType(TextualConvention, Integer32):
    description = 'An enumeration of possible sensor types where entPhysicalClass is specified as sensor(8).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("temperature", 3), ("voltage", 4), ("current", 5), ("tachometer", 6), ("counter", 7), ("switch", 8), ("lock", 9), ("humidity", 10), ("smokeDetection", 11), ("presence", 12), ("airFlow", 13))

class SunPlatBaseUnits(TextualConvention, Integer32):
    description = 'Physical values are represented in the units obtained by (sunPlatBaseUnits * 10 raised to the power of sunPlatExponent). For example, if sunPlatBaseUnits is volts(6) and sunPlatExponent is -6, then the units of the values returned are microVolts.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("degC", 3), ("degF", 4), ("degK", 5), ("volts", 6), ("amps", 7), ("watts", 8), ("joules", 9), ("coulombs", 10), ("va", 11), ("nits", 12), ("lumens", 13), ("lux", 14), ("candelas", 15), ("kPa", 16), ("psi", 17), ("newtons", 18), ("cfm", 19), ("rpm", 20), ("hertz", 21), ("seconds", 22), ("minutes", 23), ("hours", 24), ("days", 25), ("weeks", 26), ("mils", 27), ("inches", 28), ("feet", 29), ("cubicInches", 30), ("cubicFeet", 31), ("meters", 32), ("cubicCentimeters", 33), ("cubicMeters", 34), ("liters", 35), ("fluidOunces", 36), ("radians", 37), ("steradians", 38), ("revolutions", 39), ("cycles", 40), ("gravities", 41), ("ounces", 42), ("pounds", 43), ("footPounds", 44), ("ounceInches", 45), ("gauss", 46), ("gilberts", 47), ("henries", 48), ("farads", 49), ("ohms", 50), ("siemens", 51), ("moles", 52), ("becquerels", 53), ("ppm", 54), ("decibels", 55), ("dBA", 56), ("dbC", 57), ("grays", 58), ("sieverts", 59), ("colorTemperatureDegK", 60), ("bits", 61), ("bytes", 62), ("words", 63), ("doubleWords", 64), ("quadWords", 65), ("percentage", 66))

class SunPlatRateUnits(TextualConvention, Integer32):
    description = 'If sunPlatRateUnits is set to a value other than none(1), then the units specified by sunPlatBaseUnits are further qualified as rate units. For example, if sunPlatBaseUnits is set to degC(3), and sunPlatRateUnits is set to perSecond(4), then the value represented has the units degC/Second.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 1), ("perMicroSecond", 2), ("perMilliSecond", 3), ("perSecond", 4), ("perMinute", 5), ("perHour", 6), ("perDay", 7), ("perWeek", 8), ("perMonth", 9), ("perYear", 10))

class SunPlatNumericSensorEnabledThresholds(TextualConvention, Bits):
    description = 'The possible thresholds that may be enabled by a sensor.'
    status = 'current'
    namedValues = NamedValues(("lowerThresholdNonCritical", 0), ("upperThresholdNonCritical", 1), ("lowerThresholdCritical", 2), ("upperThresholdCritical", 3), ("lowerThresholdFatal", 4), ("upperThresholdFatal", 5))

class SunPlatNumericSensorThresholdResetAction(TextualConvention, Integer32):
    description = 'The possible reset actions that may be performed on a sensor.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("reset", 1))

class SunPlatAlarmType(TextualConvention, Integer32):
    description = 'This indicates the type of alarm - i.e. the means by which the alarm condition is communicated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("audible", 2), ("visible", 3), ("motion", 4), ("switch", 5))

class SunPlatAlarmState(TextualConvention, Integer32):
    description = 'This indicates the state of the alarm.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("off", 2), ("steady", 3), ("alternating", 4))

class SunPlatAlarmUrgency(TextualConvention, Integer32):
    reference = 'CIM Schema v2.5, CIM_AlarmDevice.Urgency'
    description = 'An enumeration of possible alarm urgencies, as defined for CIM_AlarmDevice.Urgency.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("notSupported", 3), ("informational", 4), ("nonCritical", 5), ("critical", 6), ("unrecoverable", 7))

class SunPlatWatchdogAction(TextualConvention, Integer32):
    description = 'This indicates the action taken by the watchdog if it is not reset within the period specified by sunPlatWatchdogTimeout.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("statusOnly", 1), ("systemInterrupt", 2), ("systemReset", 3), ("systemPowerOff", 4), ("systemPowerCycle", 5))

class SunPlatWatchdogMonitoredEntity(TextualConvention, Integer32):
    reference = 'CIM Schema v2.5, CIM_Watchdog.MonitoredEntity'
    description = 'An enumeration of possible entities that may be monitored by a watchdog as defined for CIM_Watchdog'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("operatingSystem", 3), ("operatingSystemBootProcess", 4), ("operatingSystemShutdownProcess", 5), ("firmwareBootProcess", 6), ("biosBootProcess", 7), ("application", 8), ("serviceProcessor", 9))

class SunPlatPowerSupplyClass(TextualConvention, Integer32):
    description = 'An enumeration of possible classes of power supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("powerSupply", 2), ("battery", 3))

class SunPlatFanClass(TextualConvention, Integer32):
    description = 'An enumeration of possible classes of cooling device that may be represented with an entPhysicalClass of fan(7)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("fan", 2), ("refrigeration", 3), ("heatPipe", 4))

class SunPlatBatteryStatus(TextualConvention, Integer32):
    reference = 'CIM Schema v2.5, CIM_Battery.BatteryStatus'
    description = 'An enumeration of possible battery statuses as defined for CIM_Battery.BatteryStatus.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("fullyCharged", 3), ("low", 4), ("critical", 5), ("charging", 6), ("chargingAndHigh", 7), ("chargingAndLow", 8), ("chargingAndCritical", 9), ("undefined", 10), ("partiallyCharged", 11))

class SunPlatUnitaryComputerSystemPowerState(TextualConvention, Integer32):
    reference = 'CIM Schema v2.5, CIM_UnitaryComputerSystem'
    description = 'An enumeration of possible power states defined for CIM_UnitaryComputerSystem.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unknown", 1), ("fullPower", 2), ("psLowPower", 3), ("psStandby", 4), ("psOther", 5), ("powerCycle", 6), ("powerOff", 7), ("psWarning", 8), ("hibernate", 9), ("softOff", 10), ("reset", 11))

class SunPlatUnitaryComputerSystemApplicableSetting(TextualConvention, Integer32):
    reference = 'CIM Schema v2.5, CIM_UnitaryComputerSystem'
    description = 'This specifies a setting which may be applied to an instance of CIM_UnitaryComputerSystem.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("defaultSetting", 1), ("specifiedSetting", 2))

class SunPlatLogicalClass(TextualConvention, Integer32):
    description = 'An enumeration of the possible logical classes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("computerSystem", 2), ("adminDomain", 3))

class SunPlatLogicalStatus(TextualConvention, Integer32):
    description = 'An enumeration of possible status values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12), ("stopped", 13))

class SunPlatIndex(TextualConvention, Integer32):
    description = 'An arbitrary value which uniquely identifies the row.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class SunPlatPercentage(TextualConvention, Integer32):
    description = 'Used to express a value, in 100ths of a %.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

sunPlatStartTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatStartTime.setStatus('current')
if mibBuilder.loadTexts: sunPlatStartTime.setDescription('The time at which the agent was last started; in other words, the time at which sysUpTime was zero.')
sunPlatEquipmentTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 2), )
if mibBuilder.loadTexts: sunPlatEquipmentTable.setReference('M.3100 sec. 3.2.2')
if mibBuilder.loadTexts: sunPlatEquipmentTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentTable.setDescription('The NIM Equipment table. This table augments the entPhysicalTable to provide the attributes defined for equipment under M.3100, sec. 3.2.2. Additional packages may be supported using further table extensions. The sunPlatEquipmentTable is valid for entPhysicalClass values of chassis(3), backplane(4), container(5), powerSupply(6), fan(7), sensor(8), module(9), and other(1).')
sunPlatEquipmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 2, 1), )
entPhysicalEntry.registerAugmentions(("SUN-PLATFORM-MIB", "sunPlatEquipmentEntry"))
sunPlatEquipmentEntry.setIndexNames(*entPhysicalEntry.getIndexNames())
if mibBuilder.loadTexts: sunPlatEquipmentEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentEntry.setDescription('An entry in the NIM Equipment table. Each entry of this table represents a piece of equipment within the network element of the type specified by entPhysicalClass.')
sunPlatEquipmentAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 2, 1, 1), SunPlatAdministrativeState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatEquipmentAdministrativeState.setReference('X.731, sec. 8.1.1.3')
if mibBuilder.loadTexts: sunPlatEquipmentAdministrativeState.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentAdministrativeState.setDescription('An enumerated value which describes the Administrative State of the managed object as defined in X.731, sec. 8.1.1.3.')
sunPlatEquipmentOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 2, 1, 2), SunPlatOperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatEquipmentOperationalState.setReference('X.731, sec. 8.1.1.1')
if mibBuilder.loadTexts: sunPlatEquipmentOperationalState.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentOperationalState.setDescription('An enumerated value which describes the Operational State of the managed object as defined in X.731, sec. 8.1.1.1.')
sunPlatEquipmentAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 2, 1, 3), SunPlatAlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatEquipmentAlarmStatus.setReference('M.3100, sec. 5.8')
if mibBuilder.loadTexts: sunPlatEquipmentAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentAlarmStatus.setDescription('The value of this object identifies the Alarm Status of the managed object as defined in M.3100, sec. 5.8.')
sunPlatEquipmentUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatEquipmentUnknownStatus.setReference('X.731, sec. 8.1.2.6')
if mibBuilder.loadTexts: sunPlatEquipmentUnknownStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentUnknownStatus.setDescription('This attribute identifies whether or not the state of the entity is known as defined as Unknown Status in X.731, sec. 8.1.2.6.')
sunPlatEquipmentLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatEquipmentLocationName.setReference('M.3100, sec. 5.37')
if mibBuilder.loadTexts: sunPlatEquipmentLocationName.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentLocationName.setDescription('The specific or general location of the component as defined as Location Name in M.3100, sec. 5.37.')
sunPlatEquipmentHolderTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 3), )
if mibBuilder.loadTexts: sunPlatEquipmentHolderTable.setReference('M.3100, sec. 3.2.3')
if mibBuilder.loadTexts: sunPlatEquipmentHolderTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentHolderTable.setDescription('The NIM Equipment-Holder table. This table augments the entPhysicalTable to provide the attributes defined for equipmentHolder under M.3100, sec. 3.2.3. It is valid for an entPhysicalClass of container(5).')
sunPlatEquipmentHolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatEquipmentHolderEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentHolderEntry.setDescription('An entry in the NIM Equipment-Holder table. Each entry of this table represents a component within the network element that accepts a replaceable Circuit Pack.')
sunPlatEquipmentHolderType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 3, 1, 1), SunPlatEquipmentHolderType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatEquipmentHolderType.setReference('M.3100, sec.5.26')
if mibBuilder.loadTexts: sunPlatEquipmentHolderType.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentHolderType.setDescription('The type of the component as defined in M.3100, sec. 5.26.')
sunPlatEquipmentHolderAcceptableTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatEquipmentHolderAcceptableTypes.setReference('M.3100, sec. 5.2')
if mibBuilder.loadTexts: sunPlatEquipmentHolderAcceptableTypes.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentHolderAcceptableTypes.setDescription('The types of Circuit Pack that can be supported by the slot, separated by newline characters as defined in M.3100, sec. 5.2.')
sunPlatEquipmentHolderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 3, 1, 3), SunPlatEquipmentHolderStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatEquipmentHolderStatus.setReference('M.3100, sec. 5.32')
if mibBuilder.loadTexts: sunPlatEquipmentHolderStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentHolderStatus.setDescription('This attributes identifies whether or not a Circuit Pack is present in the slot as defined in M.3100, sec. 5.32.')
sunPlatEquipmentHolderPowered = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 3, 1, 4), SunPlatEquipmentHolderPower()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatEquipmentHolderPowered.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentHolderPowered.setDescription('The current power management state of the equipment holder.')
sunPlatCircuitPackTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 4), )
if mibBuilder.loadTexts: sunPlatCircuitPackTable.setReference('M.3100 sec. 3.2.1')
if mibBuilder.loadTexts: sunPlatCircuitPackTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatCircuitPackTable.setDescription('The NIM Circuit-Pack table. This table augments the entPhysicalTable to provide the attributes defined for circuitPack under M.3100, sec. 3.2.1. It is valid for an entPhysicalClass of module(9).')
sunPlatCircuitPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatCircuitPackEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatCircuitPackEntry.setDescription('An entry in the NIM Circuit-Pack table. Each entry of this table represents a piece of equipment within the network element that is inserted into and removed from an Equipment-Holder.')
sunPlatCircuitPackType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatCircuitPackType.setReference('M.3100, sec. 5.13.')
if mibBuilder.loadTexts: sunPlatCircuitPackType.setStatus('current')
if mibBuilder.loadTexts: sunPlatCircuitPackType.setDescription('The type of this circuit pack as defined in M.3100, sec. 5.13.')
sunPlatCircuitPackAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 4, 1, 2), SunPlatCircuitPackAvailabilityStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatCircuitPackAvailabilityStatus.setReference('X.731, sec. 8.1.2.3')
if mibBuilder.loadTexts: sunPlatCircuitPackAvailabilityStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatCircuitPackAvailabilityStatus.setDescription('The availability status attribute as defined in X.731, sec. 8.1.2.3.')
sunPlatCircuitPackReplaceable = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatCircuitPackReplaceable.setReference('CIM v2.5 Schema, CIM_PhysicalPackage.Replaceable')
if mibBuilder.loadTexts: sunPlatCircuitPackReplaceable.setStatus('current')
if mibBuilder.loadTexts: sunPlatCircuitPackReplaceable.setDescription('The CIM_PhysicalPackage.Replaceable property as defined by the CIM_Physical Schema.')
sunPlatCircuitPackHotSwappable = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatCircuitPackHotSwappable.setReference('CIM v2.5 Schema, CIM_PhysicalPackage.HotSwappable')
if mibBuilder.loadTexts: sunPlatCircuitPackHotSwappable.setStatus('current')
if mibBuilder.loadTexts: sunPlatCircuitPackHotSwappable.setDescription('The CIM_PhysicalPackage.HotSwappable property as defined by the CIM_Physical Schema.')
sunPlatPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 5), )
if mibBuilder.loadTexts: sunPlatPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatPhysicalTable.setDescription('The Sun Platform Physical Class Table extension. This table is used to define the physical class of the entity if it is classified as other(1). The sunPlatPhysicalTable is valid for the entPhysicalClass value of other(1).')
sunPlatPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatPhysicalEntry.setDescription('An entry in the Sun Platform Physical Class Table extension. Each entry of this table represents a piece of equipment with an entPhysicalClass of other(1).')
sunPlatPhysicalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 5, 1, 1), SunPlatPhysicalClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatPhysicalClass.setStatus('current')
if mibBuilder.loadTexts: sunPlatPhysicalClass.setDescription('An enumeration of possible physical classes where entPhysicalClass is specified as other(1).')
sunPlatSensorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 6), )
if mibBuilder.loadTexts: sunPlatSensorTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatSensorTable.setDescription('The Sun Platform Sensor Table extension. This table augments the entPhysicalTable to provide the attributes common to all sensors. The sunPlatSensorTable is valid for the entPhysicalClass value of sensor(8).')
sunPlatSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatSensorEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatSensorEntry.setDescription('An entry in the Sun Platform Sensor Table extension. Each entry of this table represents a piece of equipment with an entPhysicalClass of sensor(8).')
sunPlatSensorClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 6, 1, 1), SunPlatSensorClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatSensorClass.setStatus('current')
if mibBuilder.loadTexts: sunPlatSensorClass.setDescription('An enumeration of possible sensor classes where entPhysicalClass is specified as sensor(8).')
sunPlatSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 6, 1, 2), SunPlatSensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatSensorType.setStatus('current')
if mibBuilder.loadTexts: sunPlatSensorType.setDescription('An enumeration of possible sensor types where entPhysicalClass is specified as sensor(8).')
sunPlatSensorLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 6, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatSensorLatency.setStatus('current')
if mibBuilder.loadTexts: sunPlatSensorLatency.setDescription('Where the sensor is polled this value represents the update interval for this sensor measured in mS. Where the sensor is event driven rather than polled, this value should represent the maximum expected latency in processing that event.')
sunPlatBinarySensorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 7), )
if mibBuilder.loadTexts: sunPlatBinarySensorTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatBinarySensorTable.setDescription('The Sun Platform BinarySensor Table extension. This table augments the sunPlatSensorTable to provide the attributes specific to binary sensors. The sunPlatBinarySensorTable is valid for the sunPlatSensorClass value of binary(1).')
sunPlatBinarySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatBinarySensorEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatBinarySensorEntry.setDescription('An entry in the Sun Platform BinarySensor Table extension. Each entry of this table represents a sensor with a sunPlatSensorClass value of binary(1).')
sunPlatBinarySensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 7, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatBinarySensorCurrent.setStatus('current')
if mibBuilder.loadTexts: sunPlatBinarySensorCurrent.setDescription('The current state of the sensor.')
sunPlatBinarySensorExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatBinarySensorExpected.setStatus('current')
if mibBuilder.loadTexts: sunPlatBinarySensorExpected.setDescription('The expected state of the sensor. If there is no expected value then no value is returned for this attribute.')
sunPlatBinarySensorInterpretTrue = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 7, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatBinarySensorInterpretTrue.setStatus('current')
if mibBuilder.loadTexts: sunPlatBinarySensorInterpretTrue.setDescription('The interpretation to be applied to a sensor reading of true.')
sunPlatBinarySensorInterpretFalse = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 7, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatBinarySensorInterpretFalse.setStatus('current')
if mibBuilder.loadTexts: sunPlatBinarySensorInterpretFalse.setDescription('The interpretation to be applied to a sensor reading of false.')
sunPlatNumericSensorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8), )
if mibBuilder.loadTexts: sunPlatNumericSensorTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorTable.setDescription('The Sun Platform NumericSensor Table extension. This table augments the sunPlatSensorTable to provide the attributes specific to numeric sensors. The sunPlatNumericSensorTable is valid for the sunPlatSensorClass value of numeric(2).')
sunPlatNumericSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatNumericSensorEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorEntry.setDescription('An entry in the Sun Platform NumericSensor Table extension. Each entry of this table represents a sensor with a sunPlatSensorClass value of numeric(2).')
sunPlatNumericSensorBaseUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 1), SunPlatBaseUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorBaseUnits.setReference('CIM v2.5 Schema, CIM_NumericSensor.BaseUnits')
if mibBuilder.loadTexts: sunPlatNumericSensorBaseUnits.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorBaseUnits.setDescription('The base unit of the values returned by this Sensor, as per CIM_NumericSensor.BaseUnits. Physical values are represented in the units obtained by (sunPlatBaseUnits * 10 raised to the power of sunPlatExponent). For example, if sunPlatBaseUnits is volts(6) and sunPlatExponent is -6, then the units of the values returned are microVolts.')
sunPlatNumericSensorExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorExponent.setReference('CIM v2.5 Schema, CIM_NumericSensor.UnitModifier')
if mibBuilder.loadTexts: sunPlatNumericSensorExponent.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorExponent.setDescription('The exponent to be applied to the units returned by this sensor as for CIM_NumericSensor.UnitModifier.')
sunPlatNumericSensorRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 3), SunPlatRateUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorRateUnits.setReference('CIM v2.5 Schema, CIM_NumericSensor.RateUnits')
if mibBuilder.loadTexts: sunPlatNumericSensorRateUnits.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorRateUnits.setDescription('If sunPlatRateUnits is set to a value other than none(1), then the units specified by sunPlatBaseUnits are further qualified as rate units. For example, if sunPlatBaseUnits is set to degC(3), and sunPlatRateUnits is set to perSecond(4), then the value represented has the units degC/Second. This is as defined for CIM_NumericSensor.RateUnits')
sunPlatNumericSensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorCurrent.setReference('CIM v2.5 Schema, CIM_NumericSensor.CurrentReading')
if mibBuilder.loadTexts: sunPlatNumericSensorCurrent.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorCurrent.setDescription('The current state of the sensor as per CIM_NumericSensor.CurrentReading.')
sunPlatNumericSensorNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorNormalMin.setReference('CIM v2.5 Schema, CIM_NumericSensor.NormalMin')
if mibBuilder.loadTexts: sunPlatNumericSensorNormalMin.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorNormalMin.setDescription('The lowest expected value from this sensor as defined for CIM_NumericSensor.NormalMin. If there is no minimum value then no value is returned for this attribute.')
sunPlatNumericSensorNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorNormalMax.setReference('CIM v2.5 Schema, CIM_NumericSensor.NormalMax')
if mibBuilder.loadTexts: sunPlatNumericSensorNormalMax.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorNormalMax.setDescription('The highest expected value from this sensor as defined for CIM_NumericSensor.NormalMax. If there is no maximum value then no value is returned for this attribute.')
sunPlatNumericSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 7), SunPlatPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorAccuracy.setReference('CIM v2.5 Schema, CIM_NumericSensor.Accuracy')
if mibBuilder.loadTexts: sunPlatNumericSensorAccuracy.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorAccuracy.setDescription('The accuracy as defined for CIM_NumericSensor.Accuracy of this sensor expressed as a +/-% value in units of 100ths of a percent.')
sunPlatNumericSensorLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdNonCritical.setReference('CIM v2.5 Schema, CIM_NumericSensor.LowerThresholdNonCritical')
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdNonCritical.setDescription('This attribute describes the lower threshold at which a NonCritical condition occurs as defined for CIM_NumericSensor.LowerThresholdNonCritical.')
sunPlatNumericSensorUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdNonCritical.setReference('CIM v2.5 Schema, CIM_NumericSensor.UpperThresholdNonCritical')
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdNonCritical.setDescription('This attribute describes the upper threshold at which a NonCritical condition occurs as defined for CIM_NumericSensor.UpperThresholdNonCritical.')
sunPlatNumericSensorLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdCritical.setReference('CIM v2.5 Schema, CIM_NumericSensor.LowerThresholdCritical')
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdCritical.setDescription('This attribute describes the lower threshold at which a Critical condition occurs as defined for CIM_NumericSensor.LowerThresholdCritical.')
sunPlatNumericSensorUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdCritical.setReference('CIM v2.5 Schema, CIM_NumericSensor.UpperThresholdCritical')
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdCritical.setDescription('This attribute describes the upper threshold at which a Critical condition occurs as defined for CIM_NumericSensor.UpperThresholdCritical.')
sunPlatNumericSensorLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdFatal.setReference('CIM v2.5 Schema, CIM_NumericSensor.LowerThresholdFatal')
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorLowerThresholdFatal.setDescription('This attribute describes the lower threshold at which a Fatal condition occurs as defined for CIM_NumericSensor.LowerThresholdFatal.')
sunPlatNumericSensorUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdFatal.setReference('CIM v2.5 Schema, CIM_NumericSensor.UpperThresholdFatal')
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorUpperThresholdFatal.setDescription('This attribute describes the upper threshold at which a Fatal condition occurs as defined for CIM_NumericSensor.UpperThresholdFatal.')
sunPlatNumericSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatNumericSensorHysteresis.setReference('CIM v2.5 Schema, CIM_NumericSensor.Hysteresis')
if mibBuilder.loadTexts: sunPlatNumericSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorHysteresis.setDescription('This attribute describes the hysteresis around the thresholds as defined by CIM_NumericSensor.Hysteresis.')
sunPlatNumericSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 15), SunPlatNumericSensorEnabledThresholds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorEnabledThresholds.setReference('CIM v.2.5 Schema, CIM_NumericSensor.EnabledThresholds')
if mibBuilder.loadTexts: sunPlatNumericSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorEnabledThresholds.setDescription('This attribute describes the enabled thresholds of this sensor as defined for CIM_NumericSensor.EnabledThresholds.')
sunPlatNumericSensorRestoreDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 8, 1, 16), SunPlatNumericSensorThresholdResetAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatNumericSensorRestoreDefaultThresholds.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorRestoreDefaultThresholds.setDescription('Writing to this attribute resets the sensors thresholds to the default settings.')
sunPlatDiscreteSensorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 9), )
if mibBuilder.loadTexts: sunPlatDiscreteSensorTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorTable.setDescription('The Discrete Sensor Table. This table is valid for rows with an entPhysicalClass of sensor(8) and a sunPlatSensorClass of discrete(3).')
sunPlatDiscreteSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 9, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatDiscreteSensorEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorEntry.setDescription('An entry in the Discrete Sensor Table. Each entry in this table represents a discrete sensor with entPhysicalClass of sensor(8) and discrete(3).')
sunPlatDiscreteSensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 9, 1, 1), SunPlatIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatDiscreteSensorCurrent.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorCurrent.setDescription('The sunPlatDiscreteSensorStatesIndex of a row in the sunPlatDiscreteSensorStatesTable which corresponds to the current reading of the sensor.')
sunPlatDiscreteSensorStatesTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 10), )
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesTable.setDescription('The Discrete Sensor States Table. This table describes the available states for a discrete sensor in the Discrete Sensor Table. This table is valid for an entPhysicalClass value of sensor(8) with a sunPlatSensorClass of discrete(3).')
sunPlatDiscreteSensorStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 10, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "SUN-PLATFORM-MIB", "sunPlatDiscreteSensorStatesIndex"))
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesEntry.setDescription('An entry in the Discrete Sensor States Table. Each entry in this table represents a possible sensor state for the corresponding sensor in the Discrete Sensor Table. The current state of the sensor is indicated by the value of sunPlatDiscreteSensorCurrent for the corresponding sunPlatDiscreteSensorTable entry.')
sunPlatDiscreteSensorStatesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 10, 1, 1), SunPlatIndex())
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesIndex.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesIndex.setDescription('A number identifying this sensor state.')
sunPlatDiscreteSensorStatesInterpretation = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 10, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesInterpretation.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesInterpretation.setDescription('This attribute describes the state represented by the corresponding row of this table.')
sunPlatDiscreteSensorStatesAcceptable = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 10, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesAcceptable.setReference('CIM v2.5 Schema, CIM_DiscreteSensor.AcceptableValues')
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesAcceptable.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorStatesAcceptable.setDescription('This attribute describes whether this value is acceptable as defined for CIM_DiscreteSensor.AcceptableValues.')
sunPlatFanTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 11), )
if mibBuilder.loadTexts: sunPlatFanTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatFanTable.setDescription('The Sun Platform Fan Table extension. This table augments the entPhysicalTable to provide the attributes common to all fans and cooling devices. The sunPlatFanTable is valid for the entPhysicalClass value of fan(7).')
sunPlatFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 11, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatFanEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatFanEntry.setDescription('An entry in the Sun Platform Fan Table extension. Each entry of this table represents a piece of equipment with an entPhysicalClass of fan(7).')
sunPlatFanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 11, 1, 1), SunPlatFanClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatFanClass.setStatus('current')
if mibBuilder.loadTexts: sunPlatFanClass.setDescription('This attribute describes the class of the cooling device.')
sunPlatAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 12), )
if mibBuilder.loadTexts: sunPlatAlarmTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatAlarmTable.setDescription('The Sun Platform Alarm Table extension. This table augments the entPhysicalTable to provide indications of alarm states. The sunPlatAlarmTable is valid for the sunPlatPhysicalClass value of alarm(2).')
sunPlatAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 12, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatAlarmEntry.setDescription('An entry in the Sun Platform Alarm Table extension. Each entry of this table represents a piece of equipment with an sunPlatPhysicalClass of alarm(2).')
sunPlatAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 12, 1, 1), SunPlatAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatAlarmType.setStatus('current')
if mibBuilder.loadTexts: sunPlatAlarmType.setDescription('This indicates the type of alarm - i.e. the means by which the alarm condition is communicated.')
sunPlatAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 12, 1, 2), SunPlatAlarmState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatAlarmState.setReference('CIM v2.5 Schema, CIM_AlarmDevice.AlarmState')
if mibBuilder.loadTexts: sunPlatAlarmState.setStatus('current')
if mibBuilder.loadTexts: sunPlatAlarmState.setDescription('This indicates the state of the alarm as defined for CIM_AlarmDevice.AlarmState.')
sunPlatAlarmUrgency = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 12, 1, 3), SunPlatAlarmUrgency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatAlarmUrgency.setReference('CIM Schema v2.5, CIM_AlarmDevice.Urgency')
if mibBuilder.loadTexts: sunPlatAlarmUrgency.setStatus('current')
if mibBuilder.loadTexts: sunPlatAlarmUrgency.setDescription('This attribute describes the urgency of the alarm as defined for CIM_AlarmDevice.Urgency.')
sunPlatWatchdogTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 13), )
if mibBuilder.loadTexts: sunPlatWatchdogTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatWatchdogTable.setDescription('The Sun Platform Watchdog Table extension. This table augments the entPhysicalTable to provide information about a watchdog timer. The sunPlatWatchdogTable is valid for the sunPlatPhysicalClass value of watchdog(3).')
sunPlatWatchdogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 13, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatWatchdogEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatWatchdogEntry.setDescription('An entry in the Sun Platform Watchdog Table extension. Each entry of this table represents a piece of equipment with an sunPlatPhysicalClass of watchdog(3).')
sunPlatWatchdogTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 13, 1, 1), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatWatchdogTimeout.setStatus('current')
if mibBuilder.loadTexts: sunPlatWatchdogTimeout.setDescription('This indicates the interval in mS after which the watchdog will timeout if not reset.')
sunPlatWatchdogAction = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 13, 1, 2), SunPlatWatchdogAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatWatchdogAction.setStatus('current')
if mibBuilder.loadTexts: sunPlatWatchdogAction.setDescription('This indicates the action taken by the watchdog if it is not reset within the period specified by sunPlatWatchdogTimeout.')
sunPlatWatchdogLastExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 13, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatWatchdogLastExpired.setReference('CIM v2.5 Schema, CIM_Watchdog.TimeOfLastExpiration')
if mibBuilder.loadTexts: sunPlatWatchdogLastExpired.setStatus('current')
if mibBuilder.loadTexts: sunPlatWatchdogLastExpired.setDescription('The time at which the watchdog last expired, as defined by CIM_Watchdog.TimeOfLastExpiration.')
sunPlatWatchdogMonitoredEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 13, 1, 4), SunPlatWatchdogMonitoredEntity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatWatchdogMonitoredEntity.setReference('CIM v2.5 Schema, CIM_Watchdog.MonitoredEntity')
if mibBuilder.loadTexts: sunPlatWatchdogMonitoredEntity.setStatus('current')
if mibBuilder.loadTexts: sunPlatWatchdogMonitoredEntity.setDescription('The entity monitored by the watchdog, as defined by CIM_Watchdog.MonitoredEntity')
sunPlatPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 14), )
if mibBuilder.loadTexts: sunPlatPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatPowerSupplyTable.setDescription('The Power Supply Table extension. This table is valid for an entPhysicalClass of powerSupply(6).')
sunPlatPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 14, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatPowerSupplyEntry.setDescription('An entry in the Power Supply Table extension. Each entry in this table represents a piece of equipment with an entPhysicalClass of powerSupply(6).')
sunPlatPowerSupplyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 14, 1, 1), SunPlatPowerSupplyClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatPowerSupplyClass.setStatus('current')
if mibBuilder.loadTexts: sunPlatPowerSupplyClass.setDescription('This attribute describes the class of the power supply.')
sunPlatBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 15), )
if mibBuilder.loadTexts: sunPlatBatteryTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatBatteryTable.setDescription('The Battery Table extension. This table is valid for a sunPlatPowerSupplyClass of battery(3).')
sunPlatBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 15, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sunPlatBatteryEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatBatteryEntry.setDescription('An entry in the Battery Table extension. Each entry in this table represents a piece of equipment with a sunPlatPowerSupplyClass of battery(3).')
sunPlatBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 1, 15, 1, 1), SunPlatBatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatBatteryStatus.setReference('CIM v2.5 Schema, CIM_Battery.BatteryStatus')
if mibBuilder.loadTexts: sunPlatBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatBatteryStatus.setDescription('The current status of the battery as defined for CIM_Battery.BatteryStatus.')
sunPlatLogicalTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 1), )
if mibBuilder.loadTexts: sunPlatLogicalTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogicalTable.setDescription('An extension to the entLogicalTable. This table is used to define the logical class of the entity. The sunPlatLogicalTable is valid for all entries in the entLogicalTable.')
sunPlatLogicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 1, 1), )
entLogicalEntry.registerAugmentions(("SUN-PLATFORM-MIB", "sunPlatLogicalEntry"))
sunPlatLogicalEntry.setIndexNames(*entLogicalEntry.getIndexNames())
if mibBuilder.loadTexts: sunPlatLogicalEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogicalEntry.setDescription('An entry in the sunPlatLogicalTable extension.')
sunPlatLogicalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 1, 1, 1), SunPlatLogicalClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogicalClass.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogicalClass.setDescription('This attribute defines the logical class of the entry in the entLogicalTable.')
sunPlatLogicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 1, 1, 2), SunPlatLogicalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogicalStatus.setReference('CIM v2.5 Schema, CIM_ManagedSystemElement.Status')
if mibBuilder.loadTexts: sunPlatLogicalStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogicalStatus.setDescription('This attribute describes the current status of the entry in the entLogicalTable as defined by CIM_ManagedSystemElement.Status')
sunPlatUnitaryComputerSystemTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 2), )
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemTable.setDescription('The Platform Unitary Computer System Table Extension. This table extends the entLogicalTable to provide attributes common to instances of CIM_UnitaryComputerSystem. The sunPlatUnitaryComputerSystemTable is valid for those rows of the entLogicalTable with a SunPlatLogicalClass of computerSystem(2).')
sunPlatUnitaryComputerSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemEntry.setDescription('An entry in the Sun Platform Unitary Computer System Table extension.')
sunPlatUnitaryComputerSystemPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 2, 1, 1), SunPlatUnitaryComputerSystemPowerState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemPowerState.setReference('CIM v2.5 Schema, CIM_UnitaryComputerSystem.PowerState')
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemPowerState.setStatus('current')
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemPowerState.setDescription('This attribute displays the computer systems current power state as defined by CIM_UnitaryComputerSystem.PowerState. When this attribute is written to the corresponding power state will be requested from the computer system as provided by the CIM_UnitaryComputerSystem.SetPowerState() method.')
sunPlatUnitaryComputerSystemApplySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 2, 1, 2), SunPlatUnitaryComputerSystemApplicableSetting()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemApplySettings.setStatus('current')
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemApplySettings.setDescription('Setting this will cause the settings corresponding to the value to be applied to the instance of CIM_UnitaryComputerSystem represented by this row.')
sunPlatInitialLoadInfoTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 3), )
if mibBuilder.loadTexts: sunPlatInitialLoadInfoTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatInitialLoadInfoTable.setDescription('The Platform Unitary Computer System Initial Load Info Table extension. This table instruments the CIM_UnitaryComputerSystem.InitialLoadInfo[] property. The sunPlatInitialLoadInfoTable is valid for those rows of the entLogicalTable with a sunPlatLogicalClass of computerSystem(2).')
sunPlatInitialLoadInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "SUN-PLATFORM-MIB", "sunPlatInitialLoadInfoIndex"))
if mibBuilder.loadTexts: sunPlatInitialLoadInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatInitialLoadInfoEntry.setDescription('An entry in the Sun Platform Unitary Computer System Table extension.')
sunPlatInitialLoadInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 3, 1, 1), SunPlatIndex())
if mibBuilder.loadTexts: sunPlatInitialLoadInfoIndex.setStatus('current')
if mibBuilder.loadTexts: sunPlatInitialLoadInfoIndex.setDescription('A number identifying an entry in the sunPlatInitialLoadInfoTable.')
sunPlatInitialLoadInfoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatInitialLoadInfoDescr.setStatus('current')
if mibBuilder.loadTexts: sunPlatInitialLoadInfoDescr.setDescription('The name for the information presented in the sunPlatInitialLoadInfoValue for this row.')
sunPlatInitialLoadInfoCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatInitialLoadInfoCurrentValue.setReference('CIM v2.5 Schema, CIM_UnitaryComputerSystem.InitialLoadInfo')
if mibBuilder.loadTexts: sunPlatInitialLoadInfoCurrentValue.setStatus('current')
if mibBuilder.loadTexts: sunPlatInitialLoadInfoCurrentValue.setDescription('The current contents of an entry in the CIM_UnitaryComputerSystem.InitialLoadInfo[] array.')
sunPlatInitialLoadInfoDesiredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 2, 3, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatInitialLoadInfoDesiredValue.setStatus('current')
if mibBuilder.loadTexts: sunPlatInitialLoadInfoDesiredValue.setDescription('The desired contents of an entry in the CIM_UnitaryComputerSystem.InitialLoadInfo[] array. Setting sunPlatUnitaryComputerSystemApplySettings to a value of specifiedSettings(2) will cause these values to be applied.')
sunPlatLogTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1), )
if mibBuilder.loadTexts: sunPlatLogTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogTable.setDescription('The NIM log table. It is used to maintain a currentProblemList for each managed object as per M.3100, sec. 5.22. The management system creates entries in this table to specify which types of traps, from which managed object, should be logged. Deleting an entry in this table deletes all entries in the corresponding log. There are separate logs for each notification type/managed object.')
sunPlatLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1, 1), ).setIndexNames((0, "SUN-PLATFORM-MIB", "sunPlatLogType"))
if mibBuilder.loadTexts: sunPlatLogEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogEntry.setDescription('Information about a single trap log as defined in X.735 8.1.1.')
sunPlatLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: sunPlatLogType.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogType.setDescription('The type of notifications stored in this log. For currentProblemList alarm entries, the sunPlatLogType is set to the sunPlatLogRecordManagedObjectInstance OID value.')
sunPlatLogAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1, 1, 2), SunPlatLogAdministrativeState().clone('unlocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sunPlatLogAdministrativeState.setReference('X.735, sec. 8.1.1.1.3')
if mibBuilder.loadTexts: sunPlatLogAdministrativeState.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogAdministrativeState.setDescription('The management system uses this object to stop and start the operations of this object as per X.735, sec. 8.1.1.1.3.')
sunPlatLogOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1, 1, 3), SunPlatOperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogOperationalState.setReference('X.735, sec. 8.1.1.1.4')
if mibBuilder.loadTexts: sunPlatLogOperationalState.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogOperationalState.setDescription('Indicates whether or not the log is capable of performing its normal operations as per X.735, sec. 8.1.1.1.4.')
sunPlatLogFullStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogFullStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogFullStatus.setDescription('If the log is full, this attribute is true.')
sunPlatLogCapacityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1, 1, 5), SunPlatPercentage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sunPlatLogCapacityThreshold.setReference('X.735, sec. 8.1.1.3')
if mibBuilder.loadTexts: sunPlatLogCapacityThreshold.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogCapacityThreshold.setDescription('Indicates the threshold, expressed in 100ths of a %, at which the log will generate a capacity alarm as per X.735, sec. 8.1.1.3.')
sunPlatLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sunPlatLogRowStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRowStatus.setDescription('This object is used to create a new row or to delete an existing row in the table.')
sunPlatLogRecordTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 2), )
if mibBuilder.loadTexts: sunPlatLogRecordTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordTable.setDescription('The NIM log record table. It is used to maintain a currentProblemList for each managed object as per M.3100, sec. 5.22.')
sunPlatLogRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 2, 1), ).setIndexNames((0, "SUN-PLATFORM-MIB", "sunPlatLogType"), (0, "SUN-PLATFORM-MIB", "sunPlatLogRecordId"))
if mibBuilder.loadTexts: sunPlatLogRecordEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordEntry.setDescription('Information about a single notification associated with a specific managed object. Entries in this table are created automatically but can be deleted by the management system. currentProblemList entries are augmented by the sunPlatLogRecordAdditionalEntry and sunPlatLogRecordAlarmEntry tables. They are automatically deleted when the associated alarm condition is cleared. Entries that represent object creation/deletion alarm log types are augmented by the sunPlatLogRecordAdditionalEntry table. Entries that represent alarm log types are also augmented by the sunPlatLogRecordAlarmEntry table. Entries that represent attribute/state change log types are augmented by the sunPlatLogRecordChangeEntry table.')
sunPlatLogRecordId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: sunPlatLogRecordId.setReference('X.735, sec. 8.1.2.2.1')
if mibBuilder.loadTexts: sunPlatLogRecordId.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordId.setDescription('A unique number identifying this event as per X.735, sec. 8.1.2.2.1.')
sunPlatLogRecordLoggingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordLoggingTime.setReference('X.735, sec. 8.1.2.2.2')
if mibBuilder.loadTexts: sunPlatLogRecordLoggingTime.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordLoggingTime.setDescription('The time at which this trap was logged as per X.735, sec. 8.1.2.2.2.')
sunPlatLogRecordManagedObjectInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 2, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordManagedObjectInstance.setReference('X.721, sec. 10.7.4.13')
if mibBuilder.loadTexts: sunPlatLogRecordManagedObjectInstance.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordManagedObjectInstance.setDescription('The object in the entPhysicalTable or entLogicalTable to which this entry applies as defined in X.721, sec. 10.7.4.13. By convention, this is the name of the first object in the row in the table referenced.')
sunPlatLogRecordRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sunPlatLogRecordRowStatus.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordRowStatus.setDescription('This object is used to delete an existing row in the table. Note that the only value to which a management system can set this object is destroy(6).')
sunPlatLogRecordCorrelatedNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordCorrelatedNotifications.setReference('X.721, sec. 10.7.1.11')
if mibBuilder.loadTexts: sunPlatLogRecordCorrelatedNotifications.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordCorrelatedNotifications.setDescription('A comma-separated list of sunPlatLogRecordId values which identify the other events to which this event is correlated, as defined in X.721, sec 10.7.1.11')
sunPlatLogRecordAdditionalTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 3), )
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalTable.setDescription('The NIM Trap Agent additional information table. This table is used to maintain a currentProblemList for each managed object as per M.3100, sec. 5.22.')
sunPlatLogRecordAdditionalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 3, 1), ).setIndexNames((0, "SUN-PLATFORM-MIB", "sunPlatLogType"), (0, "SUN-PLATFORM-MIB", "sunPlatLogRecordId"))
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalEntry.setDescription('Information text/OID providing further information relating to alarm and object creation/deletion log records.')
sunPlatLogRecordAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalInfo.setReference('X.733, sec. 8.1.2.14')
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalInfo.setDescription('An optional OID of an object which provides additional information relevant to this notification as per X.733, sec. 8.1.2.14. This object is only present if it was included in the notification corresponding to this log entry.')
sunPlatLogRecordAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalText.setReference('X.733, 8.1.2.13')
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalText.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalText.setDescription('An optional textual description which provides additional information relevant to this notification as per X.733, sec. 8.1.2.13. This object is only present if it was included in the notification corresponding to this log entry.')
sunPlatLogRecordAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 4), )
if mibBuilder.loadTexts: sunPlatLogRecordAlarmTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmTable.setDescription('The NIM Trap Agent logged alarm trap table. This table is used to maintain a currentProblemList for each managed object as per M.3100, sec. 5.22.')
sunPlatLogRecordAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 4, 1), ).setIndexNames((0, "SUN-PLATFORM-MIB", "sunPlatLogType"), (0, "SUN-PLATFORM-MIB", "sunPlatLogRecordId"))
if mibBuilder.loadTexts: sunPlatLogRecordAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmEntry.setDescription('Information about the alarm-specific attributes of a single trap in the log.')
sunPlatLogRecordAlarmPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 4, 1, 1), SunPlatAlarmPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordAlarmPerceivedSeverity.setReference('X.733, sec. 8.1.2.3')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmPerceivedSeverity.setDescription('The perceived severity of the alarm, as specified by the agent that generated it in accordance with X.733, sec. 8.1.2.3.')
sunPlatLogRecordAlarmProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 4, 1, 2), SunPlatProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordAlarmProbableCause.setReference('M.3100 sec. 10.2')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmProbableCause.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmProbableCause.setDescription('An optional probable cause which provides additional information relevant to this notification as per ITU-T M.3100 sec. 10.2.')
sunPlatLogRecordAlarmSpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordAlarmSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmSpecificProblem.setDescription('An optional textual description which provides additional information concerning the cause of this notification. If more than one specific problem is described in this object, the problem descriptions are separated by CR LF characters. This object is only present if it was included in the alarm trap corresponding to this log entry.')
sunPlatLogRecordAlarmRepairAction = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 4, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordAlarmRepairAction.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmRepairAction.setDescription('A list of recommended repair actions separated by CR LF sequences.')
sunPlatLogRecordChangeTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5), )
if mibBuilder.loadTexts: sunPlatLogRecordChangeTable.setReference('X.721, sec. 6.2')
if mibBuilder.loadTexts: sunPlatLogRecordChangeTable.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeTable.setDescription('The NIM Trap Agent logged change trap table. This table is used to maintain extra information for log records that represent attribute or state changes as per X.721, sec. 6.2.')
sunPlatLogRecordChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1), ).setIndexNames((0, "SUN-PLATFORM-MIB", "sunPlatLogType"), (0, "SUN-PLATFORM-MIB", "sunPlatLogRecordId"))
if mibBuilder.loadTexts: sunPlatLogRecordChangeEntry.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeEntry.setDescription('Information about the attribute/state change specific attributes of a single trap in the log. Each of the fields will be present according to the type of the attribute changed. State changes will be indicated using the sunPlatLogRecordChangeNewInteger and sunPlatLogRecordChangeOldInteger objects.')
sunPlatLogRecordChangeChangedOID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordChangeChangedOID.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeChangedOID.setDescription("The changed object's OBJECT IDENTIFIER value in an attribute/state change notification.")
sunPlatLogRecordChangeNewInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordChangeNewInteger.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeNewInteger.setDescription('The new INTEGER value in an attribute/state change notification.')
sunPlatLogRecordChangeOldInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordChangeOldInteger.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeOldInteger.setDescription('The old INTEGER value in an attribute/state change notification.')
sunPlatLogRecordChangeNewString = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordChangeNewString.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeNewString.setDescription('The new OCTET-STRING value in an attribute change notification.')
sunPlatLogRecordChangeOldString = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordChangeOldString.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeOldString.setDescription('The old OCTET-STRING value in an attribute change notification.')
sunPlatLogRecordChangeNewOID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordChangeNewOID.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeNewOID.setDescription('The new OBJECT IDENTIFIER value in an attribute change notification.')
sunPlatLogRecordChangeOldOID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 1, 3, 5, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunPlatLogRecordChangeOldOID.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeOldOID.setDescription('The old OBJECT IDENTIFIER value in an attribute change notification.')
sunPlatNotificationEventId = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationEventId.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationEventId.setDescription('A unique ID for this notification.')
sunPlatNotificationTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationTime.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationTime.setDescription('The time that this notification was generated.')
sunPlatNotificationObject = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 3), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationObject.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationObject.setDescription('The object in the entPhysicalTable or the entLogicalTable to which this notification applies. By convention, this is the name of the first object in the row in the table referenced.')
sunPlatNotificationPerceivedSeverity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 4), SunPlatAlarmPerceivedSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationPerceivedSeverity.setReference('X.733, sec. 8.1.2.3')
if mibBuilder.loadTexts: sunPlatNotificationPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationPerceivedSeverity.setDescription('The perceived severity of the alarm, as specified by the agent that generated it in accordance with X.733, sec. 8.1.2.3.')
sunPlatNotificationProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 5), SunPlatProbableCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationProbableCause.setReference('M.3100, sec. 10.2')
if mibBuilder.loadTexts: sunPlatNotificationProbableCause.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationProbableCause.setDescription('An optional probable cause which provides additional information relevant to this notification as per ITU-T M.3100 sec. 10.2.')
sunPlatNotificationSpecificProblem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 6), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationSpecificProblem.setDescription('An optional textual description which provides additional information concerning the cause of this notification.')
sunPlatNotificationRepairAction = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 7), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationRepairAction.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationRepairAction.setDescription('A list of recommended repair actions separated by CR LF sequences.')
sunPlatNotificationAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 8), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationAdditionalInfo.setDescription('An optional OID of an object which provides additional information relevant to this notification.')
sunPlatNotificationAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 9), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationAdditionalText.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationAdditionalText.setDescription('An optional textual description which provides additional information relevant to this notification.')
sunPlatNotificationChangedOID = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 10), VariablePointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationChangedOID.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationChangedOID.setDescription("The changed object's OBJECT IDENTIFIER value in an attribute/state change notification.")
sunPlatNotificationNewInteger = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationNewInteger.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationNewInteger.setDescription('The new INTEGER value in an attribute/state change notification.')
sunPlatNotificationOldInteger = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationOldInteger.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationOldInteger.setDescription('The old INTEGER value in an attribute/state change notification.')
sunPlatNotificationNewString = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationNewString.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationNewString.setDescription('The new OCTET-STRING value in an attribute change notification.')
sunPlatNotificationOldString = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 14), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationOldString.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationOldString.setDescription('The old OCTET-STRING value in an attribute change notification.')
sunPlatNotificationNewOID = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 15), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationNewOID.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationNewOID.setDescription('The new OBJECT IDENTIFIER value in an attribute change notification.')
sunPlatNotificationOldOID = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 16), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationOldOID.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationOldOID.setDescription('The old OBJECT IDENTIFIER value in an attribute change notification.')
sunPlatNotificationCorrelatedNotifications = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 1, 17), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunPlatNotificationCorrelatedNotifications.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationCorrelatedNotifications.setDescription('A list of sunPlatNotificationEventIDs which are correlated to this notification, separated by commas.')
sunPlatObjectCreation = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 1)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"))
if mibBuilder.loadTexts: sunPlatObjectCreation.setStatus('current')
if mibBuilder.loadTexts: sunPlatObjectCreation.setDescription('Indicates that an object, indicated by sunPlatNotificationObject, has been created as defined in X.721, sec. 13.6.')
if mibBuilder.loadTexts: sunPlatObjectCreation.setReference('X.721, sec. 13.6')
sunPlatObjectDeletion = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 2)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"))
if mibBuilder.loadTexts: sunPlatObjectDeletion.setStatus('current')
if mibBuilder.loadTexts: sunPlatObjectDeletion.setDescription('Indicates that an object, indicated by sunPlatNotificationObject, has been deleted as defined in X.721, sec. 13.7.')
if mibBuilder.loadTexts: sunPlatObjectDeletion.setReference('X.721, sec. 13.7')
sunPlatCommunicationsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 3)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"), ("SUN-PLATFORM-MIB", "sunPlatNotificationPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatNotificationProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatNotificationSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatNotificationRepairAction"))
if mibBuilder.loadTexts: sunPlatCommunicationsAlarm.setStatus('current')
if mibBuilder.loadTexts: sunPlatCommunicationsAlarm.setDescription('Indicates that a communication alarm has occurred as defined in X.721, sec. 13.2.')
if mibBuilder.loadTexts: sunPlatCommunicationsAlarm.setReference('X.721, sec. 13.2')
sunPlatEnvironmentalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 4)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"), ("SUN-PLATFORM-MIB", "sunPlatNotificationPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatNotificationProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatNotificationSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatNotificationRepairAction"))
if mibBuilder.loadTexts: sunPlatEnvironmentalAlarm.setStatus('current')
if mibBuilder.loadTexts: sunPlatEnvironmentalAlarm.setDescription('Indicates that an environment alarm has occurred as defined in X.721, sec. 13.3.')
if mibBuilder.loadTexts: sunPlatEnvironmentalAlarm.setReference('X.721, sec. 13.3')
sunPlatEquipmentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 5)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"), ("SUN-PLATFORM-MIB", "sunPlatNotificationPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatNotificationProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatNotificationSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatNotificationRepairAction"))
if mibBuilder.loadTexts: sunPlatEquipmentAlarm.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentAlarm.setDescription('Indicates that an equipment alarm has occurred as defined in X.721, sec. 13.4.')
if mibBuilder.loadTexts: sunPlatEquipmentAlarm.setReference('X.721, sec.13.4')
sunPlatProcessingErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 6)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"), ("SUN-PLATFORM-MIB", "sunPlatNotificationPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatNotificationProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatNotificationSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatNotificationRepairAction"))
if mibBuilder.loadTexts: sunPlatProcessingErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: sunPlatProcessingErrorAlarm.setDescription('Indicates that a processing error alarm has occurred as defined in X.721, sec. 13.10.')
if mibBuilder.loadTexts: sunPlatProcessingErrorAlarm.setReference('X.721, sec. 13.10')
sunPlatStateChange = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 7)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationChangedOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationOldInteger"), ("SUN-PLATFORM-MIB", "sunPlatNotificationNewInteger"))
if mibBuilder.loadTexts: sunPlatStateChange.setStatus('current')
if mibBuilder.loadTexts: sunPlatStateChange.setDescription('Indicates that a state change has occurred on the state attribute identified by sunPlatNotificationChangedOID. As states are enumerations of type INTEGER, the old and new states are passed in sunPlatNotificationOldInteger and sunPlatNotificationNewInteger respectively. This is as defined in X.721, sec. 13.14.')
if mibBuilder.loadTexts: sunPlatStateChange.setReference('X.721, sec. 13.14')
sunPlatAttributeChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 8)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationChangedOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationOldInteger"), ("SUN-PLATFORM-MIB", "sunPlatNotificationNewInteger"))
if mibBuilder.loadTexts: sunPlatAttributeChangeInteger.setStatus('current')
if mibBuilder.loadTexts: sunPlatAttributeChangeInteger.setDescription('Indicates that attribute identified by sunPlatNotificationChangedOID has changed from the value in sunPlatNotificationOldInteger to the value in sunPlatNotificationNewInteger. This is as defined in X.721, sec. 13.1.')
if mibBuilder.loadTexts: sunPlatAttributeChangeInteger.setReference('X.721, sec. 13.1')
sunPlatAttributeChangeString = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 9)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationChangedOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationOldString"), ("SUN-PLATFORM-MIB", "sunPlatNotificationNewString"))
if mibBuilder.loadTexts: sunPlatAttributeChangeString.setStatus('current')
if mibBuilder.loadTexts: sunPlatAttributeChangeString.setDescription('Indicates that attribute identified by sunPlatNotificationChangedOID has changed from the value in sunPlatNotificationOldString to the value in sunPlatNotificationNewString. This is as defined in X.721, sec. 13.1.')
if mibBuilder.loadTexts: sunPlatAttributeChangeString.setReference('X.721, sec.13.1')
sunPlatAttributeChangeOID = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 10)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationChangedOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationOldOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationNewOID"))
if mibBuilder.loadTexts: sunPlatAttributeChangeOID.setStatus('current')
if mibBuilder.loadTexts: sunPlatAttributeChangeOID.setDescription('Indicates that attribute identified by sunPlatNotificationChangedOID has changed from the value in sunPlatNotificationOldOID to the value in sunPlatNotificationNewOID. This is as defined in X.721, sec. 13.1.')
if mibBuilder.loadTexts: sunPlatAttributeChangeOID.setReference('X.721, sec. 13.1')
sunPlatQualityOfServiceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 11)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"), ("SUN-PLATFORM-MIB", "sunPlatNotificationPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatNotificationProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatNotificationSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatNotificationRepairAction"))
if mibBuilder.loadTexts: sunPlatQualityOfServiceAlarm.setStatus('current')
if mibBuilder.loadTexts: sunPlatQualityOfServiceAlarm.setDescription('Indicates that a quality of service alarm has occurred as defined in X.721, sec 13.11.')
if mibBuilder.loadTexts: sunPlatQualityOfServiceAlarm.setReference('X.721, sec.13.11')
sunPlatIndeterminateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 2, 0, 12)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"), ("SUN-PLATFORM-MIB", "sunPlatNotificationPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatNotificationProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatNotificationSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatNotificationRepairAction"))
if mibBuilder.loadTexts: sunPlatIndeterminateAlarm.setStatus('current')
if mibBuilder.loadTexts: sunPlatIndeterminateAlarm.setDescription('Indicates that an alarm of an indeterminate type has occurred.')
sunPlatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 1, 1)).setObjects(("SUN-PLATFORM-MIB", "sunPlatGeneralGroup"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentGroup"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentHolderGroup"), ("SUN-PLATFORM-MIB", "sunPlatCircuitPackGroup"), ("SUN-PLATFORM-MIB", "sunPlatPhysicalGroup"), ("SUN-PLATFORM-MIB", "sunPlatSensorGroup"), ("SUN-PLATFORM-MIB", "sunPlatBinarySensorGroup"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorGroup"), ("SUN-PLATFORM-MIB", "sunPlatDiscreteSensorGroup"), ("SUN-PLATFORM-MIB", "sunPlatFanGroup"), ("SUN-PLATFORM-MIB", "sunPlatAlarmGroup"), ("SUN-PLATFORM-MIB", "sunPlatWatchdogGroup"), ("SUN-PLATFORM-MIB", "sunPlatPowerSupplyGroup"), ("SUN-PLATFORM-MIB", "sunPlatBatteryGroup"), ("SUN-PLATFORM-MIB", "sunPlatLogicalGroup"), ("SUN-PLATFORM-MIB", "sunPlatUnitaryComputerSystemGroup"), ("SUN-PLATFORM-MIB", "sunPlatLogGroup"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordGroup"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordAdditionalGroup"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordAlarmGroup"), ("SUN-PLATFORM-MIB", "sunPlatNotificationsGroup"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatCompliance = sunPlatCompliance.setStatus('current')
if mibBuilder.loadTexts: sunPlatCompliance.setDescription('The compliance statement for SNMP entities which implement this MIB.')
sunPlatGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 1)).setObjects(("SUN-PLATFORM-MIB", "sunPlatStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatGeneralGroup = sunPlatGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatGeneralGroup.setDescription('The collection of objects which are independent of the platform(s) being monitored.')
sunPlatEquipmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 2)).setObjects(("SUN-PLATFORM-MIB", "sunPlatEquipmentOperationalState"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentAdministrativeState"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentAlarmStatus"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentUnknownStatus"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentLocationName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatEquipmentGroup = sunPlatEquipmentGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentGroup.setDescription('The collection of objects which are used to represent attributes of the NIM class of Equipment defined in M.3100, sec. 3.2.2.')
if mibBuilder.loadTexts: sunPlatEquipmentGroup.setReference('M.3100, sec. 3.2.2')
sunPlatEquipmentHolderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 3)).setObjects(("SUN-PLATFORM-MIB", "sunPlatEquipmentHolderType"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentHolderAcceptableTypes"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentHolderStatus"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentHolderPowered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatEquipmentHolderGroup = sunPlatEquipmentHolderGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatEquipmentHolderGroup.setDescription('The collection of objects which are used to represent attributes of platform components with an entPhysicalClass of container(5).')
sunPlatCircuitPackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 4)).setObjects(("SUN-PLATFORM-MIB", "sunPlatCircuitPackType"), ("SUN-PLATFORM-MIB", "sunPlatCircuitPackAvailabilityStatus"), ("SUN-PLATFORM-MIB", "sunPlatCircuitPackReplaceable"), ("SUN-PLATFORM-MIB", "sunPlatCircuitPackHotSwappable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatCircuitPackGroup = sunPlatCircuitPackGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatCircuitPackGroup.setDescription('The collection of objects which are used to represent attributes of platform components with an entPhysicalClass of module(9).')
sunPlatPhysicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 5)).setObjects(("SUN-PLATFORM-MIB", "sunPlatPhysicalClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatPhysicalGroup = sunPlatPhysicalGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatPhysicalGroup.setDescription('The collection of objects representing attributes of platform components with an entPhysicalClass value of other(1).')
sunPlatSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 6)).setObjects(("SUN-PLATFORM-MIB", "sunPlatSensorClass"), ("SUN-PLATFORM-MIB", "sunPlatSensorType"), ("SUN-PLATFORM-MIB", "sunPlatSensorLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatSensorGroup = sunPlatSensorGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatSensorGroup.setDescription('The collection of objects representing attributes of platform components with an entPhysicalClass value of sensor(8).')
sunPlatBinarySensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 7)).setObjects(("SUN-PLATFORM-MIB", "sunPlatBinarySensorCurrent"), ("SUN-PLATFORM-MIB", "sunPlatBinarySensorExpected"), ("SUN-PLATFORM-MIB", "sunPlatBinarySensorInterpretTrue"), ("SUN-PLATFORM-MIB", "sunPlatBinarySensorInterpretFalse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatBinarySensorGroup = sunPlatBinarySensorGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatBinarySensorGroup.setDescription('The collection of objects representing attributes of sensors with a sunPlatSensorClass of binary(1).')
sunPlatNumericSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 8)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNumericSensorBaseUnits"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorExponent"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorRateUnits"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorCurrent"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorNormalMin"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorNormalMax"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorAccuracy"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorLowerThresholdNonCritical"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorUpperThresholdNonCritical"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorLowerThresholdCritical"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorUpperThresholdCritical"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorLowerThresholdFatal"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorUpperThresholdFatal"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorHysteresis"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorEnabledThresholds"), ("SUN-PLATFORM-MIB", "sunPlatNumericSensorRestoreDefaultThresholds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatNumericSensorGroup = sunPlatNumericSensorGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatNumericSensorGroup.setDescription('The collection of objects representing attributes of sensors with a sunPlatSensorClass of numeric(2).')
sunPlatDiscreteSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 9)).setObjects(("SUN-PLATFORM-MIB", "sunPlatDiscreteSensorCurrent"), ("SUN-PLATFORM-MIB", "sunPlatDiscreteSensorStatesInterpretation"), ("SUN-PLATFORM-MIB", "sunPlatDiscreteSensorStatesAcceptable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatDiscreteSensorGroup = sunPlatDiscreteSensorGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatDiscreteSensorGroup.setDescription('The collection of objects representing attributes of sensors with a sunPlatSensorClass of discrete(3).')
sunPlatFanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 10)).setObjects(("SUN-PLATFORM-MIB", "sunPlatFanClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatFanGroup = sunPlatFanGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatFanGroup.setDescription('The collection of objects representing attributes of platform components with an entPhysicalClass of fan(7).')
sunPlatAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 11)).setObjects(("SUN-PLATFORM-MIB", "sunPlatAlarmType"), ("SUN-PLATFORM-MIB", "sunPlatAlarmState"), ("SUN-PLATFORM-MIB", "sunPlatAlarmUrgency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatAlarmGroup = sunPlatAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatAlarmGroup.setDescription('The collection of objects representing attributes of platform components with a sunPlatPhysicalClass of alarm(2).')
sunPlatWatchdogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 12)).setObjects(("SUN-PLATFORM-MIB", "sunPlatWatchdogTimeout"), ("SUN-PLATFORM-MIB", "sunPlatWatchdogAction"), ("SUN-PLATFORM-MIB", "sunPlatWatchdogLastExpired"), ("SUN-PLATFORM-MIB", "sunPlatWatchdogMonitoredEntity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatWatchdogGroup = sunPlatWatchdogGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatWatchdogGroup.setDescription('The collection of objects representing attributes of platform components with a sunPlatPhysicalClass of watchdog(3).')
sunPlatPowerSupplyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 13)).setObjects(("SUN-PLATFORM-MIB", "sunPlatPowerSupplyClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatPowerSupplyGroup = sunPlatPowerSupplyGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatPowerSupplyGroup.setDescription('The collection of objects representing attributes of platform components with an entPhysicalClass of powerSupply(6).')
sunPlatBatteryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 14)).setObjects(("SUN-PLATFORM-MIB", "sunPlatBatteryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatBatteryGroup = sunPlatBatteryGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatBatteryGroup.setDescription('The collection of objects representing attributes of power supplies with a sunPlatPowerSupplyClass of battery(3).')
sunPlatLogicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 15)).setObjects(("SUN-PLATFORM-MIB", "sunPlatLogicalClass"), ("SUN-PLATFORM-MIB", "sunPlatLogicalStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatLogicalGroup = sunPlatLogicalGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogicalGroup.setDescription('The collection of objects representing attributes of logical entities present in the entLogicalTable.')
sunPlatUnitaryComputerSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 16)).setObjects(("SUN-PLATFORM-MIB", "sunPlatUnitaryComputerSystemPowerState"), ("SUN-PLATFORM-MIB", "sunPlatUnitaryComputerSystemApplySettings"), ("SUN-PLATFORM-MIB", "sunPlatInitialLoadInfoDescr"), ("SUN-PLATFORM-MIB", "sunPlatInitialLoadInfoCurrentValue"), ("SUN-PLATFORM-MIB", "sunPlatInitialLoadInfoDesiredValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatUnitaryComputerSystemGroup = sunPlatUnitaryComputerSystemGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatUnitaryComputerSystemGroup.setDescription('The collection of objects representing attributes of logical entities with a sunPlatLogicalClass of computerSystem(2).')
sunPlatLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 17)).setObjects(("SUN-PLATFORM-MIB", "sunPlatLogAdministrativeState"), ("SUN-PLATFORM-MIB", "sunPlatLogOperationalState"), ("SUN-PLATFORM-MIB", "sunPlatLogFullStatus"), ("SUN-PLATFORM-MIB", "sunPlatLogCapacityThreshold"), ("SUN-PLATFORM-MIB", "sunPlatLogRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatLogGroup = sunPlatLogGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogGroup.setDescription('The collection of objects representing attributes of logs and/or current problem lists.')
sunPlatLogRecordGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 18)).setObjects(("SUN-PLATFORM-MIB", "sunPlatLogRecordLoggingTime"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordManagedObjectInstance"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordRowStatus"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordCorrelatedNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatLogRecordGroup = sunPlatLogRecordGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordGroup.setDescription('The collection of objects representing a log record or current problem.')
sunPlatLogRecordAdditionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 19)).setObjects(("SUN-PLATFORM-MIB", "sunPlatLogRecordAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordAdditionalText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatLogRecordAdditionalGroup = sunPlatLogRecordAdditionalGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAdditionalGroup.setDescription('The collection of objects providing additional information relating to a log record or current problem.')
sunPlatLogRecordAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 20)).setObjects(("SUN-PLATFORM-MIB", "sunPlatLogRecordAlarmPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordAlarmProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordAlarmSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordAlarmRepairAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatLogRecordAlarmGroup = sunPlatLogRecordAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordAlarmGroup.setDescription('The collection of objects providing information related to an alarm log record or current problem.')
sunPlatLogRecordChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 21)).setObjects(("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeChangedOID"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeNewInteger"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeOldInteger"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeNewString"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeOldString"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeNewOID"), ("SUN-PLATFORM-MIB", "sunPlatLogRecordChangeOldOID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatLogRecordChangeGroup = sunPlatLogRecordChangeGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatLogRecordChangeGroup.setDescription('The collection of objects providing information related to an attribute change log record.')
sunPlatNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 1, 22)).setObjects(("SUN-PLATFORM-MIB", "sunPlatNotificationEventId"), ("SUN-PLATFORM-MIB", "sunPlatNotificationTime"), ("SUN-PLATFORM-MIB", "sunPlatNotificationObject"), ("SUN-PLATFORM-MIB", "sunPlatNotificationPerceivedSeverity"), ("SUN-PLATFORM-MIB", "sunPlatNotificationProbableCause"), ("SUN-PLATFORM-MIB", "sunPlatNotificationSpecificProblem"), ("SUN-PLATFORM-MIB", "sunPlatNotificationRepairAction"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalInfo"), ("SUN-PLATFORM-MIB", "sunPlatNotificationAdditionalText"), ("SUN-PLATFORM-MIB", "sunPlatNotificationChangedOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationNewInteger"), ("SUN-PLATFORM-MIB", "sunPlatNotificationOldInteger"), ("SUN-PLATFORM-MIB", "sunPlatNotificationNewString"), ("SUN-PLATFORM-MIB", "sunPlatNotificationOldString"), ("SUN-PLATFORM-MIB", "sunPlatNotificationNewOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationOldOID"), ("SUN-PLATFORM-MIB", "sunPlatNotificationCorrelatedNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatNotificationObjectGroup = sunPlatNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationObjectGroup.setDescription('The collection of objects used in notifications.')
sunPlatNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 42, 2, 70, 101, 3, 2, 2, 1)).setObjects(("SUN-PLATFORM-MIB", "sunPlatObjectCreation"), ("SUN-PLATFORM-MIB", "sunPlatObjectDeletion"), ("SUN-PLATFORM-MIB", "sunPlatCommunicationsAlarm"), ("SUN-PLATFORM-MIB", "sunPlatEnvironmentalAlarm"), ("SUN-PLATFORM-MIB", "sunPlatEquipmentAlarm"), ("SUN-PLATFORM-MIB", "sunPlatProcessingErrorAlarm"), ("SUN-PLATFORM-MIB", "sunPlatStateChange"), ("SUN-PLATFORM-MIB", "sunPlatAttributeChangeInteger"), ("SUN-PLATFORM-MIB", "sunPlatAttributeChangeString"), ("SUN-PLATFORM-MIB", "sunPlatAttributeChangeOID"), ("SUN-PLATFORM-MIB", "sunPlatQualityOfServiceAlarm"), ("SUN-PLATFORM-MIB", "sunPlatIndeterminateAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunPlatNotificationsGroup = sunPlatNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: sunPlatNotificationsGroup.setDescription('The collection of notifications used to indicate the addition or deletion of managed objects from the model, changes of managed object state, attribute changes and the raising of alarms.')
mibBuilder.exportSymbols("SUN-PLATFORM-MIB", sunPlatLogRecordAlarmEntry=sunPlatLogRecordAlarmEntry, sunPlatLogRecordCorrelatedNotifications=sunPlatLogRecordCorrelatedNotifications, sunPlatLogTable=sunPlatLogTable, sunPlatNotificationOldOID=sunPlatNotificationOldOID, sunPlatMIBConformances=sunPlatMIBConformances, sunPlatLogRecordTable=sunPlatLogRecordTable, sunPlatLogRecordAlarmPerceivedSeverity=sunPlatLogRecordAlarmPerceivedSeverity, SunPlatUnitaryComputerSystemPowerState=SunPlatUnitaryComputerSystemPowerState, sunPlatUnitaryComputerSystemEntry=sunPlatUnitaryComputerSystemEntry, sunPlatObjectCreation=sunPlatObjectCreation, sunPlatAttributeChangeInteger=sunPlatAttributeChangeInteger, sunPlatFanGroup=sunPlatFanGroup, sunPlatWatchdogLastExpired=sunPlatWatchdogLastExpired, sunPlatLogRowStatus=sunPlatLogRowStatus, sunPlatMIBObjectGroups=sunPlatMIBObjectGroups, SunPlatOperationalState=SunPlatOperationalState, sunPlatInitialLoadInfoTable=sunPlatInitialLoadInfoTable, sunPlatFanTable=sunPlatFanTable, SunPlatLogicalClass=SunPlatLogicalClass, sunPlatNumericSensorGroup=sunPlatNumericSensorGroup, sunPlatSensorEntry=sunPlatSensorEntry, sunPlatLogRecordChangeNewString=sunPlatLogRecordChangeNewString, sunPlatSensorLatency=sunPlatSensorLatency, sunPlatNumericSensorRateUnits=sunPlatNumericSensorRateUnits, SunPlatPowerSupplyClass=SunPlatPowerSupplyClass, sunPlatLogAdministrativeState=sunPlatLogAdministrativeState, sunPlatInitialLoadInfoIndex=sunPlatInitialLoadInfoIndex, sunPlatLogRecordRowStatus=sunPlatLogRecordRowStatus, sunPlatEquipmentOperationalState=sunPlatEquipmentOperationalState, SunPlatAlarmUrgency=SunPlatAlarmUrgency, sunPlatBinarySensorTable=sunPlatBinarySensorTable, sunPlatLogRecordAlarmProbableCause=sunPlatLogRecordAlarmProbableCause, SunPlatLogicalStatus=SunPlatLogicalStatus, sunPlatPowerSupplyClass=sunPlatPowerSupplyClass, sunPlatLogRecordLoggingTime=sunPlatLogRecordLoggingTime, sunPlatEquipmentEntry=sunPlatEquipmentEntry, sunPlatLogType=sunPlatLogType, sunPlatLogicalTable=sunPlatLogicalTable, sunPlatNotificationAdditionalText=sunPlatNotificationAdditionalText, sunPlatAlarmState=sunPlatAlarmState, sunPlatBatteryEntry=sunPlatBatteryEntry, sunPlatLogRecordEntry=sunPlatLogRecordEntry, sunPlatLogRecordId=sunPlatLogRecordId, sunPlatLogRecordAlarmSpecificProblem=sunPlatLogRecordAlarmSpecificProblem, sunPlatBatteryTable=sunPlatBatteryTable, sunPlatSensorType=sunPlatSensorType, sunPlatInitialLoadInfoDescr=sunPlatInitialLoadInfoDescr, sunPlatDiscreteSensorCurrent=sunPlatDiscreteSensorCurrent, sunPlatObjectDeletion=sunPlatObjectDeletion, sunPlatDiscreteSensorStatesAcceptable=sunPlatDiscreteSensorStatesAcceptable, sunPlatLogOperationalState=sunPlatLogOperationalState, sunPlatPhysicalGroup=sunPlatPhysicalGroup, sunPlatGeneralGroup=sunPlatGeneralGroup, sunPlatNotificationNewInteger=sunPlatNotificationNewInteger, sunPlatBinarySensorCurrent=sunPlatBinarySensorCurrent, sunPlatPhysicalClass=sunPlatPhysicalClass, sunPlatInitialLoadInfoCurrentValue=sunPlatInitialLoadInfoCurrentValue, sunPlatEquipmentHolderPowered=sunPlatEquipmentHolderPowered, SunPlatEquipmentHolderType=SunPlatEquipmentHolderType, sunPlatNumericSensorUpperThresholdNonCritical=sunPlatNumericSensorUpperThresholdNonCritical, sunPlatLogRecordManagedObjectInstance=sunPlatLogRecordManagedObjectInstance, sunPlatNotificationOldInteger=sunPlatNotificationOldInteger, SunPlatEquipmentHolderStatus=SunPlatEquipmentHolderStatus, sunPlatNumericSensorBaseUnits=sunPlatNumericSensorBaseUnits, SunPlatAlarmPerceivedSeverity=SunPlatAlarmPerceivedSeverity, sunPlatNumericSensorEnabledThresholds=sunPlatNumericSensorEnabledThresholds, sunPlatSensorTable=sunPlatSensorTable, sunPlatStartTime=sunPlatStartTime, sunPlatNumericSensorHysteresis=sunPlatNumericSensorHysteresis, sunPlatMIBObjects=sunPlatMIBObjects, sunPlatNumericSensorUpperThresholdFatal=sunPlatNumericSensorUpperThresholdFatal, sunPlatEquipmentAdministrativeState=sunPlatEquipmentAdministrativeState, sunPlatNotificationNewString=sunPlatNotificationNewString, SunPlatWatchdogMonitoredEntity=SunPlatWatchdogMonitoredEntity, sunPlatCircuitPackEntry=sunPlatCircuitPackEntry, sunPlatNotificationChangedOID=sunPlatNotificationChangedOID, sunPlatEquipmentHolderType=sunPlatEquipmentHolderType, SunPlatSensorType=SunPlatSensorType, sunPlatNotificationNewOID=sunPlatNotificationNewOID, sunPlatPowerSupplyEntry=sunPlatPowerSupplyEntry, sunPlatMIB=sunPlatMIB, sunPlatNumericSensorNormalMax=sunPlatNumericSensorNormalMax, sunPlatNumericSensorExponent=sunPlatNumericSensorExponent, sunPlatLogRecordAdditionalInfo=sunPlatLogRecordAdditionalInfo, sunPlatLogRecordAdditionalText=sunPlatLogRecordAdditionalText, sunPlatNotificationObject=sunPlatNotificationObject, sunPlatNotificationProbableCause=sunPlatNotificationProbableCause, sunPlatNumericSensorNormalMin=sunPlatNumericSensorNormalMin, sunPlatLogRecordChangeOldInteger=sunPlatLogRecordChangeOldInteger, sunPlatEquipmentAlarm=sunPlatEquipmentAlarm, SunPlatSensorClass=SunPlatSensorClass, sunPlatBinarySensorGroup=sunPlatBinarySensorGroup, SunPlatUnitaryComputerSystemApplicableSetting=SunPlatUnitaryComputerSystemApplicableSetting, sunPlatCircuitPackType=sunPlatCircuitPackType, sun=sun, sunPlatMIBLogicalObjects=sunPlatMIBLogicalObjects, sunPlatLogRecordChangeTable=sunPlatLogRecordChangeTable, sunPlatNotificationObjectGroup=sunPlatNotificationObjectGroup, sunPlatInitialLoadInfoDesiredValue=sunPlatInitialLoadInfoDesiredValue, SunPlatAlarmType=SunPlatAlarmType, sunPlatNumericSensorEntry=sunPlatNumericSensorEntry, sunPlatUnitaryComputerSystemApplySettings=sunPlatUnitaryComputerSystemApplySettings, SunPlatIndex=SunPlatIndex, sunPlatNumericSensorRestoreDefaultThresholds=sunPlatNumericSensorRestoreDefaultThresholds, sunPlatNotificationOldString=sunPlatNotificationOldString, sunPlatCommunicationsAlarm=sunPlatCommunicationsAlarm, sunPlatMIBTrapPrefix=sunPlatMIBTrapPrefix, SunPlatFanClass=SunPlatFanClass, sunPlatDiscreteSensorGroup=sunPlatDiscreteSensorGroup, SunPlatAlarmState=SunPlatAlarmState, sunPlatEquipmentUnknownStatus=sunPlatEquipmentUnknownStatus, sunPlatBinarySensorInterpretTrue=sunPlatBinarySensorInterpretTrue, sunPlatFanClass=sunPlatFanClass, sunPlatBatteryGroup=sunPlatBatteryGroup, sunPlatDiscreteSensorEntry=sunPlatDiscreteSensorEntry, sunPlatLogRecordChangeChangedOID=sunPlatLogRecordChangeChangedOID, sunPlatWatchdogAction=sunPlatWatchdogAction, sunPlatEquipmentHolderEntry=sunPlatEquipmentHolderEntry, sunPlatEquipmentHolderAcceptableTypes=sunPlatEquipmentHolderAcceptableTypes, sunPlatCircuitPackHotSwappable=sunPlatCircuitPackHotSwappable, sunPlatEquipmentHolderTable=sunPlatEquipmentHolderTable, sunFire=sunFire, sunPlatMIBTrapData=sunPlatMIBTrapData, sunPlatWatchdogTimeout=sunPlatWatchdogTimeout, sunPlatMIBCompliances=sunPlatMIBCompliances, sunPlatLogRecordAdditionalGroup=sunPlatLogRecordAdditionalGroup, SunPlatNumericSensorThresholdResetAction=SunPlatNumericSensorThresholdResetAction, SunPlatAlarmStatus=SunPlatAlarmStatus, sunPlatDiscreteSensorStatesTable=sunPlatDiscreteSensorStatesTable, sunPlatNotificationEventId=sunPlatNotificationEventId, SunPlatEquipmentHolderPower=SunPlatEquipmentHolderPower, sunPlatAlarmUrgency=sunPlatAlarmUrgency, sunPlatDiscreteSensorTable=sunPlatDiscreteSensorTable, sunPlatBinarySensorEntry=sunPlatBinarySensorEntry, sunPlatProcessingErrorAlarm=sunPlatProcessingErrorAlarm, sunPlatCircuitPackReplaceable=sunPlatCircuitPackReplaceable, sunPlatLogFullStatus=sunPlatLogFullStatus, sunPlatBatteryStatus=sunPlatBatteryStatus, sunPlatMIBTraps=sunPlatMIBTraps, sunPlatLogRecordGroup=sunPlatLogRecordGroup, sunPlatNotificationCorrelatedNotifications=sunPlatNotificationCorrelatedNotifications, SunPlatRateUnits=SunPlatRateUnits, sunPlatEnvironmentalAlarm=sunPlatEnvironmentalAlarm, sunPlatUnitaryComputerSystemGroup=sunPlatUnitaryComputerSystemGroup, SunPlatLogAdministrativeState=SunPlatLogAdministrativeState, sunPlatLogRecordChangeOldString=sunPlatLogRecordChangeOldString, sunPlatAlarmGroup=sunPlatAlarmGroup, SunPlatPercentage=SunPlatPercentage, sunPlatIndeterminateAlarm=sunPlatIndeterminateAlarm, SunPlatNumericSensorEnabledThresholds=SunPlatNumericSensorEnabledThresholds, sunPlatNotificationRepairAction=sunPlatNotificationRepairAction, sunPlatNotificationsGroup=sunPlatNotificationsGroup, SunPlatCircuitPackAvailabilityStatus=SunPlatCircuitPackAvailabilityStatus, sunPlatStateChange=sunPlatStateChange, sunPlatAttributeChangeOID=sunPlatAttributeChangeOID, sunPlatFanEntry=sunPlatFanEntry, sunPlatSensorGroup=sunPlatSensorGroup, sunPlatLogRecordChangeNewInteger=sunPlatLogRecordChangeNewInteger, PYSNMP_MODULE_ID=sunPlatMIB, sunPlatLogEntry=sunPlatLogEntry, sunPlatNumericSensorTable=sunPlatNumericSensorTable, sunPlatDiscreteSensorStatesInterpretation=sunPlatDiscreteSensorStatesInterpretation, sunPlatMIBNotifGroups=sunPlatMIBNotifGroups, sunPlatPhysicalEntry=sunPlatPhysicalEntry, sunPlatEquipmentHolderGroup=sunPlatEquipmentHolderGroup, sunPlatWatchdogGroup=sunPlatWatchdogGroup, sunPlatNumericSensorAccuracy=sunPlatNumericSensorAccuracy, sunPlatCircuitPackTable=sunPlatCircuitPackTable, sunPlatAlarmTable=sunPlatAlarmTable, sunPlatPowerSupplyGroup=sunPlatPowerSupplyGroup, sunPlatLogGroup=sunPlatLogGroup, sunPlatLogRecordAlarmTable=sunPlatLogRecordAlarmTable, sunPlatLogRecordChangeEntry=sunPlatLogRecordChangeEntry, sunPlatNotificationTime=sunPlatNotificationTime, sunPlatLogRecordAlarmGroup=sunPlatLogRecordAlarmGroup, sunPlatLogCapacityThreshold=sunPlatLogCapacityThreshold, sunPlatLogRecordChangeGroup=sunPlatLogRecordChangeGroup, sunPlatCircuitPackAvailabilityStatus=sunPlatCircuitPackAvailabilityStatus, sunPlatLogicalClass=sunPlatLogicalClass, sunPlatMIBGroups=sunPlatMIBGroups, sunPlatEquipmentTable=sunPlatEquipmentTable, SunPlatAdministrativeState=SunPlatAdministrativeState, sunPlatUnitaryComputerSystemPowerState=sunPlatUnitaryComputerSystemPowerState, sunPlatLogRecordChangeNewOID=sunPlatLogRecordChangeNewOID, sunPlatNumericSensorUpperThresholdCritical=sunPlatNumericSensorUpperThresholdCritical, sunPlatMIBLogs=sunPlatMIBLogs, sunPlatLogicalStatus=sunPlatLogicalStatus, sunPlatSensorClass=sunPlatSensorClass, sunPlatMIBPhysicalObjects=sunPlatMIBPhysicalObjects, sunPlatAttributeChangeString=sunPlatAttributeChangeString, sunPlatLogicalGroup=sunPlatLogicalGroup, sunPlatLogRecordChangeOldOID=sunPlatLogRecordChangeOldOID, sunPlatNumericSensorCurrent=sunPlatNumericSensorCurrent, sunPlatAlarmEntry=sunPlatAlarmEntry, sunPlatDiscreteSensorStatesIndex=sunPlatDiscreteSensorStatesIndex, SunPlatWatchdogAction=SunPlatWatchdogAction, sunPlatInitialLoadInfoEntry=sunPlatInitialLoadInfoEntry, SunPlatBaseUnits=SunPlatBaseUnits, sunPlatBinarySensorInterpretFalse=sunPlatBinarySensorInterpretFalse, sunPlatLogicalEntry=sunPlatLogicalEntry, sunPlatNotificationPerceivedSeverity=sunPlatNotificationPerceivedSeverity, sunPlatLogRecordAdditionalEntry=sunPlatLogRecordAdditionalEntry, sunPlatNumericSensorLowerThresholdCritical=sunPlatNumericSensorLowerThresholdCritical, sunPlatLogRecordAlarmRepairAction=sunPlatLogRecordAlarmRepairAction, sunPlatQualityOfServiceAlarm=sunPlatQualityOfServiceAlarm, sunPlatWatchdogMonitoredEntity=sunPlatWatchdogMonitoredEntity, sunPlatEquipmentLocationName=sunPlatEquipmentLocationName, sunPlatDiscreteSensorStatesEntry=sunPlatDiscreteSensorStatesEntry, sunPlatNotificationAdditionalInfo=sunPlatNotificationAdditionalInfo, sunPlatEquipmentAlarmStatus=sunPlatEquipmentAlarmStatus, sunPlatPhysicalTable=sunPlatPhysicalTable, sunPlatAlarmType=sunPlatAlarmType, SunPlatPhysicalClass=SunPlatPhysicalClass, sunPlatNotificationSpecificProblem=sunPlatNotificationSpecificProblem, sunPlatEquipmentGroup=sunPlatEquipmentGroup, sunPlatCircuitPackGroup=sunPlatCircuitPackGroup, sunPlatUnitaryComputerSystemTable=sunPlatUnitaryComputerSystemTable, sunPlatEquipmentHolderStatus=sunPlatEquipmentHolderStatus, sunPlatNumericSensorLowerThresholdFatal=sunPlatNumericSensorLowerThresholdFatal, SunPlatBatteryStatus=SunPlatBatteryStatus, sunPlatCompliance=sunPlatCompliance, sunPlatLogRecordAdditionalTable=sunPlatLogRecordAdditionalTable, SunPlatProbableCause=SunPlatProbableCause, sunPlatNumericSensorLowerThresholdNonCritical=sunPlatNumericSensorLowerThresholdNonCritical, products=products, sunPlatPowerSupplyTable=sunPlatPowerSupplyTable, sunPlatWatchdogTable=sunPlatWatchdogTable, sunPlatBinarySensorExpected=sunPlatBinarySensorExpected, sunPlatWatchdogEntry=sunPlatWatchdogEntry)
