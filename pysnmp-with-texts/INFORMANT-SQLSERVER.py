#
# PySNMP MIB module INFORMANT-SQLSERVER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-SQLSERVER
# Produced by pysmi-0.3.4 at Wed May  1 13:53:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Counter64, Counter32, NotificationType, iso, Unsigned32, Bits, MibIdentifier, Gauge32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Counter64", "Counter32", "NotificationType", "iso", "Unsigned32", "Bits", "MibIdentifier", "Gauge32", "IpAddress", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
InstanceName, informant = mibBuilder.importSymbols("WTCS", "InstanceName", "informant")
sqlServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3))
sqlServer.setRevisions(('2004-09-10 20:47', '2004-02-29 06:23', '2004-01-20 08:55',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sqlServer.setRevisionsDescriptions(('Added entries to support multiple instances of installed SQL Server. Also added counters for SQL Server 2005.', 'Changed the syntax of the datapoints from integer to gauge.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: sqlServer.setLastUpdated('200409102047Z')
if mibBuilder.loadTexts: sqlServer.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: sqlServer.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: sqlServer.setDescription('The MIB module for SNMP Informant SQLServer performance counter entries.')
analysisServerAggCache = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1))
if mibBuilder.loadTexts: analysisServerAggCache.setStatus('current')
if mibBuilder.loadTexts: analysisServerAggCache.setDescription('The Agg Cache object counters provide information about the aggregation cache.')
asacBytesAddedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacBytesAddedPerSec.setStatus('current')
if mibBuilder.loadTexts: asacBytesAddedPerSec.setDescription('Rate of bytes added to the cache.')
asacCurrentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacCurrentBytes.setStatus('current')
if mibBuilder.loadTexts: asacCurrentBytes.setDescription('Current number of bytes used by the aggregation cache.')
asacCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: asacCurrentEntries.setDescription('Current number of cache entries.')
asacDirectHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacDirectHitRatio.setStatus('current')
if mibBuilder.loadTexts: asacDirectHitRatio.setDescription('Ratio of cache direct hits to cache lookups, for the period between obtaining counter values.')
asacDirectHitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacDirectHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: asacDirectHitsPerSec.setDescription('Rate of cache direct hits. Queries were answered from an existing cache entry.')
asacEvictionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacEvictionsPerSec.setStatus('current')
if mibBuilder.loadTexts: asacEvictionsPerSec.setDescription('Rate of evictions from the cache. This is per partition per cube per database. Typically due to background cleaner.')
asacFilterHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacFilterHitRatio.setStatus('current')
if mibBuilder.loadTexts: asacFilterHitRatio.setDescription('Ratio of cache filter hits to cache lookups, for the period between obtaining counter values.')
asacFilterHitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacFilterHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: asacFilterHitsPerSec.setDescription('Rate of cache filter hits. Queries were answered by filtering an existing cache entry.')
asacInsertsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacInsertsPerSec.setStatus('current')
if mibBuilder.loadTexts: asacInsertsPerSec.setDescription('Rate of insertions into the cache. This is per partition per cube per database.')
asacLookupsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: asacLookupsPerSec.setDescription('Rate of cache lookups.')
asacMissesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: asacMissesPerSec.setDescription('Rate of cache misses.')
asacTotalDirectHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalDirectHits.setStatus('current')
if mibBuilder.loadTexts: asacTotalDirectHits.setDescription('Total count of direct cache hits. Queries were answered from existing cache entries.')
asacTotalEvictions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalEvictions.setStatus('current')
if mibBuilder.loadTexts: asacTotalEvictions.setDescription('Evictions from the cache. This is per partition per cube per database. Typically due to background cleaner.')
asacTotalFilterHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalFilterHits.setStatus('current')
if mibBuilder.loadTexts: asacTotalFilterHits.setDescription('Total count of filter cache hits. Queries were answered by filtering existing cache entries.')
asacTotalInserts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalInserts.setStatus('current')
if mibBuilder.loadTexts: asacTotalInserts.setDescription('Insertions into the cache. This is per partition per cube per database.')
asacTotalLookups = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalLookups.setStatus('current')
if mibBuilder.loadTexts: asacTotalLookups.setDescription('Total number of lookups into the cache. Note that each MDX query has zero or more server round trips, and each partition will be queried.')
asacTotalMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalMisses.setStatus('current')
if mibBuilder.loadTexts: asacTotalMisses.setDescription('Total count of cache misses.')
analysisServerConnection = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2))
if mibBuilder.loadTexts: analysisServerConnection.setStatus('current')
if mibBuilder.loadTexts: analysisServerConnection.setDescription('The Connection object counters provide information about server activity in general. They can be used to monitor the performance of user connections with Analysis Services.')
ascAuthenticationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascAuthenticationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ascAuthenticationsPerSec.setDescription('Rate of user authentications.')
ascCompletionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCompletionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ascCompletionsPerSec.setDescription('Rate of connection completions. This includes successful and failed connection attempts.')
ascCurrentAgents = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentAgents.setStatus('current')
if mibBuilder.loadTexts: ascCurrentAgents.setDescription('Current number of agents on server.')
ascCurrentAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentAuthentications.setStatus('current')
if mibBuilder.loadTexts: ascCurrentAuthentications.setDescription('Current number of authentications in progress.')
ascCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: ascCurrentConnections.setDescription('Current number of client connections established.')
ascCurrentConnectionsInProgress = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentConnectionsInProgress.setStatus('current')
if mibBuilder.loadTexts: ascCurrentConnectionsInProgress.setDescription('Current number of connections pending completion.')
ascCurrentHttpConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentHttpConnections.setStatus('current')
if mibBuilder.loadTexts: ascCurrentHttpConnections.setDescription('Current number of http connections established.')
ascFailuresPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascFailuresPerSec.setStatus('current')
if mibBuilder.loadTexts: ascFailuresPerSec.setDescription('Rate of connection failures.')
ascRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ascRequestsPerSec.setDescription('Rate of connection requests. These are arrivals.')
ascSuccessesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascSuccessesPerSec.setStatus('current')
if mibBuilder.loadTexts: ascSuccessesPerSec.setDescription('Rate of successful connection completions.')
ascTotalAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalAuthentications.setStatus('current')
if mibBuilder.loadTexts: ascTotalAuthentications.setDescription('Total user authentications.')
ascTotalCompletions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalCompletions.setStatus('current')
if mibBuilder.loadTexts: ascTotalCompletions.setDescription('Total connection completions.')
ascTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalFailures.setStatus('current')
if mibBuilder.loadTexts: ascTotalFailures.setDescription('Total failed connection attempts.')
ascTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ascTotalRequests.setDescription('Total connection requests. These are arrivals.')
ascTotalSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: ascTotalSuccesses.setDescription('Total successful connections.')
analysisServerLastQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3))
if mibBuilder.loadTexts: analysisServerLastQuery.setStatus('current')
if mibBuilder.loadTexts: analysisServerLastQuery.setDescription('The Last Query object counters provide information about processing on the last query.')
aslqAnswerFromCacheDirect = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqAnswerFromCacheDirect.setStatus('current')
if mibBuilder.loadTexts: aslqAnswerFromCacheDirect.setDescription('Number of partitions answered directly from cache.')
aslqAnswerFromCacheFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqAnswerFromCacheFiltered.setStatus('current')
if mibBuilder.loadTexts: aslqAnswerFromCacheFiltered.setDescription('Number of partitions answered by filtering from other cache entries.')
aslqAnswerFromFile = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqAnswerFromFile.setStatus('current')
if mibBuilder.loadTexts: aslqAnswerFromFile.setDescription('Number of partitions answered from files.')
aslqDSNRequested = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDSNRequested.setStatus('current')
if mibBuilder.loadTexts: aslqDSNRequested.setDescription('Data Set Name requested as the query to the server. (Levels used for each dimension.)')
aslqDSNUsed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDSNUsed.setStatus('current')
if mibBuilder.loadTexts: aslqDSNUsed.setDescription('Data Set Name used to answer the query. (Levels used for each dimension.)')
aslqDataAvgBytesPerRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataAvgBytesPerRead.setStatus('current')
if mibBuilder.loadTexts: aslqDataAvgBytesPerRead.setDescription('Average bytes per data file read operation.')
aslqDataAvgBytesPerRow = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataAvgBytesPerRow.setStatus('current')
if mibBuilder.loadTexts: aslqDataAvgBytesPerRow.setDescription('Average bytes per row read.')
aslqDataAvgRowsPerRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataAvgRowsPerRead.setStatus('current')
if mibBuilder.loadTexts: aslqDataAvgRowsPerRead.setDescription('Average num rows read per data file read operation.')
aslqDataBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataBytes.setStatus('current')
if mibBuilder.loadTexts: aslqDataBytes.setDescription('Bytes read from the Data file.')
aslqDataReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataReads.setStatus('current')
if mibBuilder.loadTexts: aslqDataReads.setDescription('Number of logical read operations using the Data file.')
aslqIndexBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqIndexBytes.setStatus('current')
if mibBuilder.loadTexts: aslqIndexBytes.setDescription('Bytes read from the Index file.')
aslqIndexReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqIndexReads.setStatus('current')
if mibBuilder.loadTexts: aslqIndexReads.setDescription('Number of logical read operations using the Index file.')
aslqMapBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqMapBytes.setStatus('current')
if mibBuilder.loadTexts: aslqMapBytes.setDescription('Bytes read from the Map file.')
aslqMapReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqMapReads.setStatus('current')
if mibBuilder.loadTexts: aslqMapReads.setDescription('Number of logical read operations using the Map file.')
aslqQueryNum = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqQueryNum.setStatus('current')
if mibBuilder.loadTexts: aslqQueryNum.setDescription('Monotonically increasing query count. Might be useful for tools to check which query this information applies to.')
aslqRowsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsCreated.setStatus('current')
if mibBuilder.loadTexts: aslqRowsCreated.setDescription('Number of rows created, which forms the final answer in the aggregation set.')
aslqRowsFilterExcluded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsFilterExcluded.setStatus('current')
if mibBuilder.loadTexts: aslqRowsFilterExcluded.setDescription('Number of rows which were excluded by filtering.')
aslqRowsFilterIncluded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsFilterIncluded.setStatus('current')
if mibBuilder.loadTexts: aslqRowsFilterIncluded.setDescription('Number of rows which were included by filtering.')
aslqRowsFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsFiltered.setStatus('current')
if mibBuilder.loadTexts: aslqRowsFiltered.setDescription('Number of rows against which a filtering operation was applied.')
aslqRowsRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsRead.setStatus('current')
if mibBuilder.loadTexts: aslqRowsRead.setDescription('Number of rows read from disk or from the aggregation cache (in memory).')
aslqTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqTimeMs.setStatus('current')
if mibBuilder.loadTexts: aslqTimeMs.setDescription('Elapsed time in millisec.')
aslqTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqTotalBytes.setStatus('current')
if mibBuilder.loadTexts: aslqTotalBytes.setDescription('Bytes read from all files.')
aslqTotalReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqTotalReads.setStatus('current')
if mibBuilder.loadTexts: aslqTotalReads.setDescription('Number of logical read operations for all files.')
analysisServerLocks = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4))
if mibBuilder.loadTexts: analysisServerLocks.setStatus('current')
if mibBuilder.loadTexts: analysisServerLocks.setDescription('The Locks object counters provide information about latching and locking activity. They can be used to monitor the performance of latches and locks with Analysis Services.')
aslCurrentLatchWaits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslCurrentLatchWaits.setStatus('current')
if mibBuilder.loadTexts: aslCurrentLatchWaits.setDescription('Current number of threads waiting for a latch. These are latch requests that could not be given immediate grants and are in a wait state.')
aslCurrentLockWaits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslCurrentLockWaits.setStatus('current')
if mibBuilder.loadTexts: aslCurrentLockWaits.setDescription('Current number of clients waiting for a lock.')
aslCurrentLocks = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslCurrentLocks.setStatus('current')
if mibBuilder.loadTexts: aslCurrentLocks.setDescription('Current number of locked objects.')
aslLatchWaitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLatchWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: aslLatchWaitsPerSec.setDescription('Rate of latch requests that could not be granted immediately and had to wait before being granted.')
aslLockDenialsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockDenialsPerSec.setStatus('current')
if mibBuilder.loadTexts: aslLockDenialsPerSec.setDescription('Rate of lock denials.')
aslLockGrantsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockGrantsPerSec.setStatus('current')
if mibBuilder.loadTexts: aslLockGrantsPerSec.setDescription('Number of lock grants per second.')
aslLockRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: aslLockRequestsPerSec.setDescription('Number of lock requests per second.')
aslLockWaitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: aslLockWaitsPerSec.setDescription('Number of lock waits per second. These are lock requests that could not be given immediate lock grants and were put in a wait state.')
aslUnlockRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslUnlockRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: aslUnlockRequestsPerSec.setDescription('Number of unlock requests per second.')
analysisServerProc = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5))
if mibBuilder.loadTexts: analysisServerProc.setStatus('current')
if mibBuilder.loadTexts: analysisServerProc.setDescription('The Proc object counters provide information about processing data.')
aspCurrentPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentPartitions.setStatus('current')
if mibBuilder.loadTexts: aspCurrentPartitions.setDescription('Current number of partitions being processed.')
aspCurrentThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreads.setStatus('current')
if mibBuilder.loadTexts: aspCurrentThreads.setDescription('Current number of threads working on processing.')
aspCurrentThreadsMerging = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreadsMerging.setStatus('current')
if mibBuilder.loadTexts: aspCurrentThreadsMerging.setDescription('Current number of threads merging data. Decremented when blocked by pipeline of work.')
aspCurrentThreadsReading = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreadsReading.setStatus('current')
if mibBuilder.loadTexts: aspCurrentThreadsReading.setDescription('Current number of threads reading source data. Decremented when blocked by pipeline of work.')
aspCurrentThreadsWriting = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreadsWriting.setStatus('current')
if mibBuilder.loadTexts: aspCurrentThreadsWriting.setDescription('Current number of threads writing data to disk. Decremented when blocked by pipeline of work.')
aspFileBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspFileBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: aspFileBytesWrittenPerSec.setDescription('Rate of writing bytes to a MOLAP file.')
aspFileRowsWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspFileRowsWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: aspFileRowsWrittenPerSec.setDescription('Rate of writing rows to a MOLAP file.')
aspMemorySizeBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspMemorySizeBytes.setStatus('current')
if mibBuilder.loadTexts: aspMemorySizeBytes.setDescription('Size of current rows in memory. This count is an estimate.')
aspMemorySizeRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspMemorySizeRows.setStatus('current')
if mibBuilder.loadTexts: aspMemorySizeRows.setDescription('Size of current rows in memory. This count is an estimate.')
aspRowsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRowsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: aspRowsCreatedPerSec.setDescription('Rate of aggregation rows created. This will be different than rows read/sec if duplicates exist.')
aspRowsMergedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRowsMergedPerSec.setStatus('current')
if mibBuilder.loadTexts: aspRowsMergedPerSec.setDescription('Rate of rows merged or inserted. Compare with rows/sec.')
aspRowsReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRowsReadPerSec.setStatus('current')
if mibBuilder.loadTexts: aspRowsReadPerSec.setDescription('Rate of rows read from source database.')
aspTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTotalPartitions.setStatus('current')
if mibBuilder.loadTexts: aspTotalPartitions.setDescription('Accumulating count of partitions finished processing. This count is incremented if processing is successful or not.')
aspTotalRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTotalRows.setStatus('current')
if mibBuilder.loadTexts: aspTotalRows.setDescription('Count of rows read from source database.')
analysisServerProcAggs = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6))
if mibBuilder.loadTexts: analysisServerProcAggs.setStatus('current')
if mibBuilder.loadTexts: analysisServerProcAggs.setDescription('The Proc Aggs object counters provide information about processing aggregations.')
aspaCurrentPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaCurrentPartitions.setStatus('current')
if mibBuilder.loadTexts: aspaCurrentPartitions.setDescription('Current number of partitions being processed.')
aspaMemorySizeBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaMemorySizeBytes.setStatus('current')
if mibBuilder.loadTexts: aspaMemorySizeBytes.setDescription('Size of current aggregations in memory. This count is an estimate.')
aspaMemorySizeRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaMemorySizeRows.setStatus('current')
if mibBuilder.loadTexts: aspaMemorySizeRows.setDescription('Size of current aggregations in memory. This count is an estimate.')
aspaRowsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaRowsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: aspaRowsCreatedPerSec.setDescription('Rate of aggregation rows created.')
aspaRowsMergedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaRowsMergedPerSec.setStatus('current')
if mibBuilder.loadTexts: aspaRowsMergedPerSec.setDescription('Rate of rows merged or inserted into an aggregation.')
aspaTempFileBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaTempFileBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: aspaTempFileBytesWrittenPerSec.setDescription('Rate of writing bytes to a temporary file. Temporary files are written when aggregations exceed memory limits.')
aspaTempFileRowsWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaTempFileRowsWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: aspaTempFileRowsWrittenPerSec.setDescription('Rate of writing rows to a temporary file. Temporary files are written when aggregations exceed memory limits.')
aspaTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaTotalPartitions.setStatus('current')
if mibBuilder.loadTexts: aspaTotalPartitions.setDescription('Total number of partitions processed (successfully or otherwise).')
analysisServerProcIndexes = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7))
if mibBuilder.loadTexts: analysisServerProcIndexes.setStatus('current')
if mibBuilder.loadTexts: analysisServerProcIndexes.setDescription('The Proc Indexes object counters provide information about processing indexes.')
aspiCurrentPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiCurrentPartitions.setStatus('current')
if mibBuilder.loadTexts: aspiCurrentPartitions.setDescription('Current number of partitions being processed.')
aspiRowsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiRowsPerSec.setStatus('current')
if mibBuilder.loadTexts: aspiRowsPerSec.setDescription('Rate of rows from MOLAP files used to create indexes.')
aspiTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiTotalPartitions.setStatus('current')
if mibBuilder.loadTexts: aspiTotalPartitions.setDescription('Total number of partitions processed (successfully or otherwise).')
aspiTotalRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiTotalRows.setStatus('current')
if mibBuilder.loadTexts: aspiTotalRows.setDescription('Total rows from MOLAP files used to create indexes.')
analysisServerQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8))
if mibBuilder.loadTexts: analysisServerQuery.setStatus('current')
if mibBuilder.loadTexts: analysisServerQuery.setDescription('The Query object counters provide information about processing on the last query, such as elapsed time in milliseconds of the last query processed.')
asqAvgTimePerQuery = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqAvgTimePerQuery.setStatus('current')
if mibBuilder.loadTexts: asqAvgTimePerQuery.setDescription('Average time per query, in milliseconds. Response time based on queries answered since the last counter measurement.')
asqBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: asqBytesSentPerSec.setDescription('Rate of bytes sent by server to clients, in response to queries.')
asqCurrentProcessThreadPool = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentProcessThreadPool.setStatus('current')
if mibBuilder.loadTexts: asqCurrentProcessThreadPool.setDescription('Count of threads in processing thread pool. These threads resolve queries.')
asqCurrentProcessThreadQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentProcessThreadQueueLen.setStatus('current')
if mibBuilder.loadTexts: asqCurrentProcessThreadQueueLen.setDescription('Current length of queue for processing thread pool work items.')
asqCurrentProcessThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentProcessThreadsActive.setStatus('current')
if mibBuilder.loadTexts: asqCurrentProcessThreadsActive.setDescription('Current number of process threads actively working on queries.')
asqCurrentPyramidOperations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentPyramidOperations.setStatus('current')
if mibBuilder.loadTexts: asqCurrentPyramidOperations.setDescription('Current number of pyramid operations in progress.')
asqCurrentQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentQueries.setStatus('current')
if mibBuilder.loadTexts: asqCurrentQueries.setDescription('Current number of queries being actively worked on.')
asqCurrentThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentThreads.setStatus('current')
if mibBuilder.loadTexts: asqCurrentThreads.setDescription('Current number of threads working on queries.')
asqCurrentWorkerThreadPool = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentWorkerThreadPool.setStatus('current')
if mibBuilder.loadTexts: asqCurrentWorkerThreadPool.setDescription('Count of threads in worker thread pool. These threads answer requests from clients.')
asqCurrentWorkerThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentWorkerThreadsActive.setStatus('current')
if mibBuilder.loadTexts: asqCurrentWorkerThreadsActive.setDescription('Current number of worker threads active.')
asqDataBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqDataBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: asqDataBytesPerSec.setDescription('Bytes read from the Data file.')
asqDataReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqDataReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqDataReadsPerSec.setDescription('Number of logical read operations using the Data file.')
asqFilterRowsExcludedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqFilterRowsExcludedPerSec.setStatus('current')
if mibBuilder.loadTexts: asqFilterRowsExcludedPerSec.setDescription('Rate of filtered rows excluded.')
asqFilterRowsIncludedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqFilterRowsIncludedPerSec.setStatus('current')
if mibBuilder.loadTexts: asqFilterRowsIncludedPerSec.setDescription('Rate of filtered rows included.')
asqFilteredRowsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqFilteredRowsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqFilteredRowsPerSec.setDescription('Rate of rows filtered.')
asqIndexBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqIndexBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: asqIndexBytesPerSec.setDescription('Bytes read from the Index file.')
asqIndexReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqIndexReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqIndexReadsPerSec.setDescription('Number of logical read operations using the Index file.')
asqMapBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqMapBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: asqMapBytesPerSec.setDescription('Bytes read from the Map file.')
asqMapReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqMapReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqMapReadsPerSec.setDescription('Number of logical read operations using the Map file.')
asqNetworkRoundTripsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqNetworkRoundTripsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqNetworkRoundTripsPerSec.setDescription('Rate of network round trips. This includes all client/server communication.')
asqPyramidOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqPyramidOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqPyramidOperationsPerSec.setDescription('Rate of pyramid operations started.')
asqQueriesAnsweredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesAnsweredPerSec.setStatus('current')
if mibBuilder.loadTexts: asqQueriesAnsweredPerSec.setDescription('Rate of queries answered.')
asqQueriesFromCacheDirectPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesFromCacheDirectPerSec.setStatus('current')
if mibBuilder.loadTexts: asqQueriesFromCacheDirectPerSec.setDescription('Rate of queries answered from cache directly.')
asqQueriesFromCacheFilterPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesFromCacheFilterPerSec.setStatus('current')
if mibBuilder.loadTexts: asqQueriesFromCacheFilterPerSec.setDescription('Rate of queries answered by filtering existing cache entry.')
asqQueriesFromFilePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesFromFilePerSec.setStatus('current')
if mibBuilder.loadTexts: asqQueriesFromFilePerSec.setDescription('Rate of queries answered from files.')
asqQueriesRequestedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesRequestedPerSec.setStatus('current')
if mibBuilder.loadTexts: asqQueriesRequestedPerSec.setDescription('Rate of query requests arriving at the server.')
asqRowsReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqRowsReadPerSec.setStatus('current')
if mibBuilder.loadTexts: asqRowsReadPerSec.setDescription('Rate of rows read.')
asqRowsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqRowsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: asqRowsSentPerSec.setDescription('Rate of rows sent by server to clients.')
asqTotalBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalBytesSent.setStatus('current')
if mibBuilder.loadTexts: asqTotalBytesSent.setDescription('Total bytes sent by server to clients, in response to queries.')
asqTotalNetworkRoundTrips = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalNetworkRoundTrips.setStatus('current')
if mibBuilder.loadTexts: asqTotalNetworkRoundTrips.setDescription('Total network round trips. This includes all client/server communication.')
asqTotalPyramidOperations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalPyramidOperations.setStatus('current')
if mibBuilder.loadTexts: asqTotalPyramidOperations.setDescription('Total number of pyramid operations.')
asqTotalQueriesAnswered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesAnswered.setStatus('current')
if mibBuilder.loadTexts: asqTotalQueriesAnswered.setDescription('Total number of queries answered.')
asqTotalQueriesFromCacheDirect = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesFromCacheDirect.setStatus('current')
if mibBuilder.loadTexts: asqTotalQueriesFromCacheDirect.setDescription('Total number of queries derived directly from cache. Note that this is per partition.')
asqTotalQueriesFromCacheFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesFromCacheFiltered.setStatus('current')
if mibBuilder.loadTexts: asqTotalQueriesFromCacheFiltered.setDescription('Total queries answered by filtering existing cache entries.')
asqTotalQueriesFromFile = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesFromFile.setStatus('current')
if mibBuilder.loadTexts: asqTotalQueriesFromFile.setDescription('Total number of queries answered from files.')
asqTotalQueriesRequested = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesRequested.setStatus('current')
if mibBuilder.loadTexts: asqTotalQueriesRequested.setDescription('Total number of queries requested.')
asqTotalRowsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalRowsSent.setStatus('current')
if mibBuilder.loadTexts: asqTotalRowsSent.setDescription('Total rows sent by server to clients.')
analysisServerQueryDims = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9))
if mibBuilder.loadTexts: analysisServerQueryDims.setStatus('current')
if mibBuilder.loadTexts: analysisServerQueryDims.setDescription('The Query Dims object counters provide information about processing queries dimensions.')
asqdBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: asqdBytesPerSec.setDescription('Rate of sending bytes.')
asqdCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdCurrentRequests.setStatus('current')
if mibBuilder.loadTexts: asqdCurrentRequests.setDescription('Current number of requests for part of the member tree or for member properties.')
asqdMembersPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdMembersPerSec.setStatus('current')
if mibBuilder.loadTexts: asqdMembersPerSec.setDescription('Rate of sending members.')
asqdRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqdRequestsPerSec.setDescription('Rate of requests for part of the member tree or for member properties. Consider increasing Large Level Threshold if this counter is excessive.')
asqdTotalVLDMRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalVLDMRequests.setStatus('current')
if mibBuilder.loadTexts: asqdTotalVLDMRequests.setDescription('Total VLDM (Very Large Dimension Manager) requests sent.')
asqdTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalBytes.setStatus('current')
if mibBuilder.loadTexts: asqdTotalBytes.setDescription('Total bytes sent.')
asqdTotalMembers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalMembers.setStatus('current')
if mibBuilder.loadTexts: asqdTotalMembers.setDescription('Total members sent.')
asqdTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalRequests.setStatus('current')
if mibBuilder.loadTexts: asqdTotalRequests.setDescription('Total number of requests for part of the member tree or for member properties.')
asqdVLDMRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdVLDMRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: asqdVLDMRequestsPerSec.setDescription('Rate of VLDM (Very Large Dimension Manager) requests.')
analysisServerStartup = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10))
if mibBuilder.loadTexts: analysisServerStartup.setStatus('current')
if mibBuilder.loadTexts: analysisServerStartup.setDescription('The Startup object counters provide information about processing startups.')
assBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: assBytesPerSec.setDescription('Rate of bytes read from dimension files.')
assMembersPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assMembersPerSec.setStatus('current')
if mibBuilder.loadTexts: assMembersPerSec.setDescription('Rate of loading members.')
assPropertiesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assPropertiesPerSec.setStatus('current')
if mibBuilder.loadTexts: assPropertiesPerSec.setDescription('Rate of loading properties.')
assServerUptime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assServerUptime.setStatus('current')
if mibBuilder.loadTexts: assServerUptime.setDescription('Time server has been running.')
assTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalBytes.setStatus('current')
if mibBuilder.loadTexts: assTotalBytes.setDescription('Total bytes read from dimension files.')
assTotalDimensions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalDimensions.setStatus('current')
if mibBuilder.loadTexts: assTotalDimensions.setDescription('Total number of dimensions loaded.')
assTotalMembers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalMembers.setStatus('current')
if mibBuilder.loadTexts: assTotalMembers.setDescription('Total number of members loaded.')
assTotalProperties = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalProperties.setStatus('current')
if mibBuilder.loadTexts: assTotalProperties.setDescription('Total number of properties loaded.')
microsoftGatherer = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11))
mgAccessingRobotsTxtFile = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgAccessingRobotsTxtFile.setStatus('current')
if mibBuilder.loadTexts: mgAccessingRobotsTxtFile.setDescription('The number of current requests for robots.txt. Robots.txt is requested by the system implicitly, for every host, through HTTP.')
mgActiveQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgActiveQueueLength.setStatus('current')
if mibBuilder.loadTexts: mgActiveQueueLength.setDescription('The number of documents waiting for robot threads. If this number is not 0, all threads should be filtering.')
mgAdminClients = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgAdminClients.setStatus('current')
if mibBuilder.loadTexts: mgAdminClients.setDescription('The number of currently connected administrative clients.')
mgAllNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgAllNotificationsReceived.setStatus('current')
if mibBuilder.loadTexts: mgAllNotificationsReceived.setDescription('The total number of notifications received from all notification sources including file system.')
mgDelayedDocuments = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDelayedDocuments.setStatus('current')
if mibBuilder.loadTexts: mgDelayedDocuments.setDescription('The number of documents delayed due to site hit frequency rules.')
mgDocumentEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentEntries.setStatus('current')
if mibBuilder.loadTexts: mgDocumentEntries.setDescription('The number of document entries currently in memory. Zero means no indexing activity is going on.')
mgDocumentsDelayedRetry = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsDelayedRetry.setStatus('current')
if mibBuilder.loadTexts: mgDocumentsDelayedRetry.setDescription('The number of documents that will be retried after time-out. When this is non-zero, it means that the local server it is crawling is shut down.')
mgDocumentsFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsFiltered.setStatus('current')
if mibBuilder.loadTexts: mgDocumentsFiltered.setDescription('The number of times a filter object was created. This corresponds to the total number of documents filtered in the system since startup.')
mgDocumentsFilteredRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsFilteredRate.setStatus('current')
if mibBuilder.loadTexts: mgDocumentsFilteredRate.setDescription('The number of documents filtered per second.')
mgDocumentsSuccessfullyFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsSuccessfullyFiltered.setStatus('current')
if mibBuilder.loadTexts: mgDocumentsSuccessfullyFiltered.setDescription('The number of documents successfully filtered.')
mgDocumentsSuccessfulFilterRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsSuccessfulFilterRate.setStatus('current')
if mibBuilder.loadTexts: mgDocumentsSuccessfulFilterRate.setDescription('The number of successfully filtered documents per second.')
mgExtNotificationsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgExtNotificationsRate.setStatus('current')
if mibBuilder.loadTexts: mgExtNotificationsRate.setDescription('The rate of external notifications received per second.')
mgExtNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgExtNotificationsReceived.setStatus('current')
if mibBuilder.loadTexts: mgExtNotificationsReceived.setDescription('The total number of notifications received from all notification sources excluding file system.')
mgFilterObjects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterObjects.setStatus('current')
if mibBuilder.loadTexts: mgFilterObjects.setDescription('The number of filter objects in the system. Each filter object corresponds to a URL currently being filtered.')
mgFilterProcessCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterProcessCreated.setStatus('current')
if mibBuilder.loadTexts: mgFilterProcessCreated.setDescription('The total number of times a filter process was created or restarted. Having too many filter processes created indicates that filtering is having trouble with the data in the documents.')
mgFilterProcesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterProcesses.setStatus('current')
if mibBuilder.loadTexts: mgFilterProcesses.setDescription('The number of filtering processes in the system.')
mgFilterProcessesMax = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterProcessesMax.setStatus('current')
if mibBuilder.loadTexts: mgFilterProcessesMax.setDescription('The maximum number of filtering processes that have existed in the system since startup.')
mgFilteringThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilteringThreads.setStatus('current')
if mibBuilder.loadTexts: mgFilteringThreads.setDescription('The total number of filtering threads in the system. This number is calculated based on your system resources.')
mgHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgHeartbeats.setStatus('current')
if mibBuilder.loadTexts: mgHeartbeats.setDescription('The total number of heartbeats counted since startup. A heartbeat occurs once every 10 seconds while the service is running. If the service is not running there will be no heartbeat and the number of ticks will not be incremented.')
mgHeartbeatsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgHeartbeatsRate.setStatus('current')
if mibBuilder.loadTexts: mgHeartbeatsRate.setDescription('Displays one heartbeat every 10 seconds.')
mgIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgIdleThreads.setStatus('current')
if mibBuilder.loadTexts: mgIdleThreads.setDescription('The number of threads waiting for documents.')
mgNotificationSources = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNotificationSources.setStatus('current')
if mibBuilder.loadTexts: mgNotificationSources.setDescription('Currently connected external notification sources.')
mgNotificationsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNotificationsRate.setStatus('current')
if mibBuilder.loadTexts: mgNotificationsRate.setDescription('The rate of external notifications received per second.')
mgPerformanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPerformanceLevel.setStatus('current')
if mibBuilder.loadTexts: mgPerformanceLevel.setDescription('Indicates the level of the amount of system resources that the Gatherer service is allowed to use.')
mgReasonToBackOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgReasonToBackOff.setStatus('current')
if mibBuilder.loadTexts: mgReasonToBackOff.setDescription('The code describing why the Gatherer service went into back off state. 0 - up and running 1 - high system IO traffic 2 - high notifications rate 3 - delayed recovery in progress (not implemented) 4 - back off due to user activity 5 - Battery Low 6 - Memory Low 99 - back off for some internal reason (forced by Search itself) While backing off, no indexing is performed. To resume the indexing you must eliminate the reason for back off. If the Gatherer service is in back off state, the Search service is paused and there is a message in the event log.')
mgRobotsTxtRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRobotsTxtRequests.setStatus('current')
if mibBuilder.loadTexts: mgRobotsTxtRequests.setDescription('The total number of requests for robots.txt.')
mgServerObjects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServerObjects.setStatus('current')
if mibBuilder.loadTexts: mgServerObjects.setDescription('The number of servers recently accessed by the system.')
mgServerObjectsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServerObjectsCreated.setStatus('current')
if mibBuilder.loadTexts: mgServerObjectsCreated.setDescription('The number of times a new server object had to be created.')
mgServersCurrentlyUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServersCurrentlyUnavailable.setStatus('current')
if mibBuilder.loadTexts: mgServersCurrentlyUnavailable.setDescription('A server becomes unavailable when a number of requests to that server time out.')
mgServersUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServersUnavailable.setStatus('current')
if mibBuilder.loadTexts: mgServersUnavailable.setDescription('A server becomes unavailable when a number of requests to that server time out.')
mgStemmersCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStemmersCached.setStatus('current')
if mibBuilder.loadTexts: mgStemmersCached.setDescription('Number of available cached stemmer instances. Too many may indicate a resource usage problem.')
mgSystemIOTrafficRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgSystemIOTrafficRate.setStatus('current')
if mibBuilder.loadTexts: mgSystemIOTrafficRate.setDescription('System IO (disk) traffic rate in KB/s detected by back off logic')
mgThreadsAccessingNetwork = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgThreadsAccessingNetwork.setStatus('current')
if mibBuilder.loadTexts: mgThreadsAccessingNetwork.setDescription('The number of threads waiting for a response from the filter process. If no activity is going on and this number is equal to number of filtering threads, it may indicate a network problem or unavailability of the server it is crawling.')
mgThreadsInPlugIns = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgThreadsInPlugIns.setStatus('current')
if mibBuilder.loadTexts: mgThreadsInPlugIns.setDescription('The number of threads waiting for plug-ins to complete an operation.')
mgThreadsBlockedDueToBackOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgThreadsBlockedDueToBackOff.setStatus('current')
if mibBuilder.loadTexts: mgThreadsBlockedDueToBackOff.setDescription('The number of threads blocked due to back off event')
mgTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTimeOuts.setStatus('current')
if mibBuilder.loadTexts: mgTimeOuts.setDescription('The total number of timeouts detected by the system since startup.')
mgWordBreakersCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgWordBreakersCached.setStatus('current')
if mibBuilder.loadTexts: mgWordBreakersCached.setDescription('Number of available cached word breakers instances')
microsoftGathererProjectsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12), )
if mibBuilder.loadTexts: microsoftGathererProjectsTable.setStatus('current')
if mibBuilder.loadTexts: microsoftGathererProjectsTable.setDescription('Counters for the Microsoft Gatherer Project object')
microsoftGathererProjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "mgpInstance"))
if mibBuilder.loadTexts: microsoftGathererProjectsEntry.setStatus('current')
if mibBuilder.loadTexts: microsoftGathererProjectsEntry.setDescription("Performance information for one particular instance of 'Microsoft Gatherer Projects' object.")
mgpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpInstance.setStatus('current')
if mibBuilder.loadTexts: mgpInstance.setDescription('Instance name.')
mgpAccessedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedFileRate.setStatus('current')
if mibBuilder.loadTexts: mgpAccessedFileRate.setDescription('The number of documents accessed via file system per second.')
mgpAccessedFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedFiles.setStatus('current')
if mibBuilder.loadTexts: mgpAccessedFiles.setDescription('The number of documents accessed via file system.')
mgpAccessedHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedHTTP.setStatus('current')
if mibBuilder.loadTexts: mgpAccessedHTTP.setDescription('The number of documents accessed via HTTP.')
mgpAccessedHTTPRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedHTTPRate.setStatus('current')
if mibBuilder.loadTexts: mgpAccessedHTTPRate.setDescription('The number of documents accessed via HTTP per second.')
mgpAdaptiveCrawlAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlAccepts.setStatus('current')
if mibBuilder.loadTexts: mgpAdaptiveCrawlAccepts.setDescription('Documents accepted by adaptive crawl')
mgpAdaptiveCrawlErrorSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlErrorSamples.setStatus('current')
if mibBuilder.loadTexts: mgpAdaptiveCrawlErrorSamples.setDescription('Documents accessed for error sampling')
mgpAdaptiveCrawlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlErrors.setStatus('current')
if mibBuilder.loadTexts: mgpAdaptiveCrawlErrors.setDescription('Documents incorrectly rejected by adaptive crawl')
mgpAdaptiveCrawlExcludes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlExcludes.setStatus('current')
if mibBuilder.loadTexts: mgpAdaptiveCrawlExcludes.setDescription('Documents excluded by adaptive crawl')
mgpAdaptiveCrawlFalsePositives = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlFalsePositives.setStatus('current')
if mibBuilder.loadTexts: mgpAdaptiveCrawlFalsePositives.setDescription('Documents incorrectly accepted by adaptive crawl')
mgpAdaptiveCrawlTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlTotal.setStatus('current')
if mibBuilder.loadTexts: mgpAdaptiveCrawlTotal.setDescription('Documents to which adaptive crawl logic was applied')
mgpChangedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpChangedDocuments.setStatus('current')
if mibBuilder.loadTexts: mgpChangedDocuments.setDescription('Changed Documents')
mgpDelayedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDelayedDocuments.setStatus('current')
if mibBuilder.loadTexts: mgpDelayedDocuments.setDescription('The number of documents delayed due to site hit frequency rules.')
mgpDocumentAddRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentAddRate.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentAddRate.setDescription('The number of document additions per second.')
mgpDocumentAdditions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentAdditions.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentAdditions.setDescription('The number of add notifications.')
mgpDocumentDeleteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentDeleteRate.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentDeleteRate.setDescription('The number of document deletes per second.')
mgpDocumentDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentDeletes.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentDeletes.setDescription('The number of delete notifications.')
mgpDocumentModifies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentModifies.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentModifies.setDescription('The number of modify notifications.')
mgpDocumentModifiesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentModifiesRate.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentModifiesRate.setDescription('The number of modify notifications per second.')
mgpDocumentMoveAndRenameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentMoveAndRenameRate.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentMoveAndRenameRate.setDescription('The number of document Moves and Renames per second.')
mgpDocumentMovesPerRenames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentMovesPerRenames.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentMovesPerRenames.setDescription('The number of Move/Rename notifications.')
mgpDocumentsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentsInProgress.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentsInProgress.setDescription('The number of documents in progress.')
mgpDocumentsOnHold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentsOnHold.setStatus('current')
if mibBuilder.loadTexts: mgpDocumentsOnHold.setDescription('The number of documents on hold because a document with the same URL is currently in process.')
mgpErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpErrorRate.setStatus('current')
if mibBuilder.loadTexts: mgpErrorRate.setDescription('The number of filtered documents which returned an error per second.')
mgpFileErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFileErrors.setStatus('current')
if mibBuilder.loadTexts: mgpFileErrors.setDescription('The number of file protocol errors received while getting documents.')
mgpFileErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFileErrorsRate.setStatus('current')
if mibBuilder.loadTexts: mgpFileErrorsRate.setDescription('The number of file protocol errors received per second.')
mgpFilteredHTML = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredHTML.setStatus('current')
if mibBuilder.loadTexts: mgpFilteredHTML.setDescription('The number of HTML documents filtered.')
mgpFilteredHTMLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredHTMLRate.setStatus('current')
if mibBuilder.loadTexts: mgpFilteredHTMLRate.setDescription('The number of HTML documents filtered per second.')
mgpFilteredOffice = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredOffice.setStatus('current')
if mibBuilder.loadTexts: mgpFilteredOffice.setDescription('The number of office documents filtered.')
mgpFilteredOfficeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredOfficeRate.setStatus('current')
if mibBuilder.loadTexts: mgpFilteredOfficeRate.setDescription('The number of office documents filtered per second.')
mgpFilteredText = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredText.setStatus('current')
if mibBuilder.loadTexts: mgpFilteredText.setDescription('The number of text documents filtered.')
mgpFilteredTextRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredTextRate.setStatus('current')
if mibBuilder.loadTexts: mgpFilteredTextRate.setDescription('The number of text documents filtered per second.')
mgpFilteringDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteringDocuments.setStatus('current')
if mibBuilder.loadTexts: mgpFilteringDocuments.setDescription('The number of documents currently being filtered.')
mgpGathererPausedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpGathererPausedFlag.setStatus('current')
if mibBuilder.loadTexts: mgpGathererPausedFlag.setDescription('The Gatherer paused flag indicates if the Gatherer has been paused.')
mgpHTTPErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpHTTPErrors.setStatus('current')
if mibBuilder.loadTexts: mgpHTTPErrors.setDescription('The number of HTTP errors received.')
mgpHTTPErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpHTTPErrorsRate.setStatus('current')
if mibBuilder.loadTexts: mgpHTTPErrorsRate.setDescription('The number of HTTP errors received per second')
mgpHistoryRecoveryProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpHistoryRecoveryProgress.setStatus('current')
if mibBuilder.loadTexts: mgpHistoryRecoveryProgress.setDescription('Percentage of the history recovery completed')
mgpIterateHistoryInProgressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpIterateHistoryInProgressFlag.setStatus('current')
if mibBuilder.loadTexts: mgpIterateHistoryInProgressFlag.setDescription('The Iterating history in progress flag indicates if the Gatherer is currently iterating over the URL history.')
mgpNotModified = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpNotModified.setStatus('current')
if mibBuilder.loadTexts: mgpNotModified.setDescription('The number of documents which were not filtered because no modification was detected since the last crawl.')
mgpProcessedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpProcessedDocuments.setStatus('current')
if mibBuilder.loadTexts: mgpProcessedDocuments.setDescription('The number of documents processed since the history has been reset.')
mgpProcessedDocumentsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpProcessedDocumentsRate.setStatus('current')
if mibBuilder.loadTexts: mgpProcessedDocumentsRate.setDescription('The number of documents processed per second.')
mgpRecoveryInProgressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpRecoveryInProgressFlag.setStatus('current')
if mibBuilder.loadTexts: mgpRecoveryInProgressFlag.setDescription('The Recovery in progress flag indicates if recovery is currently in progress. ')
mgpRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpRetries.setStatus('current')
if mibBuilder.loadTexts: mgpRetries.setDescription('The total number of times a document access has been retried.')
mgpRetriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpRetriesRate.setStatus('current')
if mibBuilder.loadTexts: mgpRetriesRate.setDescription('The number of retries per second.')
mgpStartedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpStartedDocuments.setStatus('current')
if mibBuilder.loadTexts: mgpStartedDocuments.setDescription('The number of documents initiated into the Gatherer service. This includes the number of documents on hold, in the active queue, and currently filtered.')
mgpStatusError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpStatusError.setStatus('current')
if mibBuilder.loadTexts: mgpStatusError.setDescription('The number of filtered documents which returned an error.')
mgpStatusSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpStatusSuccess.setStatus('current')
if mibBuilder.loadTexts: mgpStatusSuccess.setDescription('The number of successfully filtered documents.')
mgpSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpSuccessRate.setStatus('current')
if mibBuilder.loadTexts: mgpSuccessRate.setDescription('The number of successfully filtered documents per second.')
mgpURLsInHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpURLsInHistory.setStatus('current')
if mibBuilder.loadTexts: mgpURLsInHistory.setDescription('The number of files (URLs) in the history list.')
mgpUniqueDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpUniqueDocuments.setStatus('current')
if mibBuilder.loadTexts: mgpUniqueDocuments.setDescription('Number of unique documents in the system. Documents are considered not unique if their contents is the same.')
mgpWaitingDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpWaitingDocuments.setStatus('current')
if mibBuilder.loadTexts: mgpWaitingDocuments.setDescription('The number of documents waiting to be processed.')
microsoftSearch = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13))
if mibBuilder.loadTexts: microsoftSearch.setStatus('current')
if mibBuilder.loadTexts: microsoftSearch.setDescription('Global counters in the Microsoft search service.')
msActiveThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msActiveThreads.setStatus('current')
if mibBuilder.loadTexts: msActiveThreads.setDescription('The total number of threads currently servicing queries.')
msCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: msCurrentConnections.setDescription('The number of currently established connections between the Search service and all clients.')
msFailedQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msFailedQueries.setStatus('current')
if mibBuilder.loadTexts: msFailedQueries.setDescription('The number of queries that have failed.')
msFailedQueryRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msFailedQueryRate.setStatus('current')
if mibBuilder.loadTexts: msFailedQueryRate.setDescription('The number of failed queries per second.')
msQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msQueries.setStatus('current')
if mibBuilder.loadTexts: msQueries.setDescription('Cumulative number of queries posted to the server.')
msQueryRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msQueryRate.setStatus('current')
if mibBuilder.loadTexts: msQueryRate.setDescription('The number of queries posted to the server per second.')
msResultRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msResultRate.setStatus('current')
if mibBuilder.loadTexts: msResultRate.setDescription('The number of results returned to the client per second.')
msResults = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msResults.setStatus('current')
if mibBuilder.loadTexts: msResults.setDescription('The cumulative number of results returned to clients.')
msSucceededQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSucceededQueries.setStatus('current')
if mibBuilder.loadTexts: msSucceededQueries.setDescription('The number of queries that produce successful searches.')
msSucceededQueryRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSucceededQueryRate.setStatus('current')
if mibBuilder.loadTexts: msSucceededQueryRate.setDescription('The number of queries per second that produce successful searches.')
msThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msThreads.setStatus('current')
if mibBuilder.loadTexts: msThreads.setDescription('The total number of threads avaliable for servicing queries.')
microsoftSearchCatalogsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14), )
if mibBuilder.loadTexts: microsoftSearchCatalogsTable.setStatus('current')
if mibBuilder.loadTexts: microsoftSearchCatalogsTable.setDescription('Represents a single catalog in the Microsoft Search service.')
microsoftSearchCatalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "mscInstance"))
if mibBuilder.loadTexts: microsoftSearchCatalogsEntry.setStatus('current')
if mibBuilder.loadTexts: microsoftSearchCatalogsEntry.setDescription("Performance information for one particular instance of 'Microsoft Search Catalogs' object.")
mscInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscInstance.setStatus('current')
if mibBuilder.loadTexts: mscInstance.setDescription('Instance name.')
mscCatalogSizeMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCatalogSizeMBytes.setStatus('current')
if mibBuilder.loadTexts: mscCatalogSizeMBytes.setDescription('Size of catalog data in megabytes.')
mscFailedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFailedQueries.setStatus('current')
if mibBuilder.loadTexts: mscFailedQueries.setDescription('The number of queries that have failed.')
mscFailedQueriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFailedQueriesRate.setStatus('current')
if mibBuilder.loadTexts: mscFailedQueriesRate.setDescription('The number of failed queries per second.')
mscNumberOfDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNumberOfDocuments.setStatus('current')
if mibBuilder.loadTexts: mscNumberOfDocuments.setDescription('The total number of documents in the catalog.')
mscPersistentIndexes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscPersistentIndexes.setStatus('current')
if mibBuilder.loadTexts: mscPersistentIndexes.setDescription('The number of persistent indexes.')
mscQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscQueries.setStatus('current')
if mibBuilder.loadTexts: mscQueries.setDescription('Cumulative number of queries posted to the catalog.')
mscQueriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscQueriesRate.setStatus('current')
if mibBuilder.loadTexts: mscQueriesRate.setDescription('The number of queries posted to the catalog per second.')
mscResults = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscResults.setStatus('current')
if mibBuilder.loadTexts: mscResults.setDescription('The cumulative number of results returned to clients.')
mscResultsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscResultsRate.setStatus('current')
if mibBuilder.loadTexts: mscResultsRate.setDescription('The number of results returned to the client per second.')
mscSuccessfulQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSuccessfulQueries.setStatus('current')
if mibBuilder.loadTexts: mscSuccessfulQueries.setDescription('The number of queries that produce successful searches.')
mscSuccessfulQueriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSuccessfulQueriesRate.setStatus('current')
if mibBuilder.loadTexts: mscSuccessfulQueriesRate.setDescription('The number of queries per second that produce successful searches.')
mscUniqueKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscUniqueKeys.setStatus('current')
if mibBuilder.loadTexts: mscUniqueKeys.setDescription('Number of unique words and properties in the catalog.')
microsoftSearchIndexCatalogTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15), )
if mibBuilder.loadTexts: microsoftSearchIndexCatalogTable.setStatus('current')
if mibBuilder.loadTexts: microsoftSearchIndexCatalogTable.setDescription('Counters for the Microsoft Search Indexer')
microsoftSearchIndexCatalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "msicInstance"))
if mibBuilder.loadTexts: microsoftSearchIndexCatalogEntry.setStatus('current')
if mibBuilder.loadTexts: microsoftSearchIndexCatalogEntry.setDescription("Performance information for one particular instance of 'Microsoft Search Indexer Catalogs' object.")
msicInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicInstance.setStatus('current')
if mibBuilder.loadTexts: msicInstance.setDescription('Instance name.')
msicActiveDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicActiveDocuments.setStatus('current')
if mibBuilder.loadTexts: msicActiveDocuments.setDescription('The number of documents currently active in Content Index')
msicBuildInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicBuildInProgress.setStatus('current')
if mibBuilder.loadTexts: msicBuildInProgress.setDescription('An index build is in progress')
msicDocumentsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicDocumentsFiltered.setStatus('current')
if mibBuilder.loadTexts: msicDocumentsFiltered.setDescription('The number of documents filtered since the catalog was mounted.')
msicDocumentsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicDocumentsInProgress.setStatus('current')
if mibBuilder.loadTexts: msicDocumentsInProgress.setDescription('The number of documents for which data is being added.')
msicFilesToBeFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicFilesToBeFiltered.setStatus('current')
if mibBuilder.loadTexts: msicFilesToBeFiltered.setDescription('The number of files waiting to be filtered and added to the catalog.')
msicIndexSizeMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicIndexSizeMBytes.setStatus('current')
if mibBuilder.loadTexts: msicIndexSizeMBytes.setDescription('The current size of Index data in megabytes.')
msicMergeProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicMergeProgress.setStatus('current')
if mibBuilder.loadTexts: msicMergeProgress.setDescription('The percentage of merge complete for the current merge.')
msicNumberOfPropagations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicNumberOfPropagations.setStatus('current')
if mibBuilder.loadTexts: msicNumberOfPropagations.setDescription('The number of propagations in progress.')
msicNumberOfDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicNumberOfDocuments.setStatus('current')
if mibBuilder.loadTexts: msicNumberOfDocuments.setDescription('The number of documents in the catalog.')
msicPersistentIndexes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicPersistentIndexes.setStatus('current')
if mibBuilder.loadTexts: msicPersistentIndexes.setDescription('The number of persistent indexes.')
msicUniqueKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicUniqueKeys.setStatus('current')
if mibBuilder.loadTexts: msicUniqueKeys.setDescription('The number of unique words and properties in the catalog.')
msicWordlists = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicWordlists.setStatus('current')
if mibBuilder.loadTexts: msicWordlists.setDescription('The total number of wordlists.')
sqlServerNameTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16), )
if mibBuilder.loadTexts: sqlServerNameTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerNameTable.setDescription('This table contains the list of SQL Server instance names installed. The sqlServerNameIndex is used to refer to all other SQL Server SNMP entries.')
sqlServerNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerNameEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerNameEntry.setDescription('Performance information for one SQL Server name instance.')
sqlServerNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlServerNameIndex.setStatus('current')
if mibBuilder.loadTexts: sqlServerNameIndex.setDescription('The index number associated with the instance name')
sqlServerNameInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16, 1, 2), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlServerNameInstance.setStatus('current')
if mibBuilder.loadTexts: sqlServerNameInstance.setDescription('The name of the SQL Server installed instance.')
sqlServerAccessMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17), )
if mibBuilder.loadTexts: sqlServerAccessMethodsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerAccessMethodsTable.setDescription('The Access Methods object in Microsoft SQL Server provides counters to monitor how the logical pages within the database are accessed. Physical access to the database pages on disk is monitored using the Buffer Manager counters. Monitoring the methods used to access database pages can help you to determine whether query performance can be improved by adding or modifying indexes or by rewriting queries. The Access Methods counters can also be used to monitor the amount of data, indexes, and free space within the database, thereby indicating data volume and fragmentation (excessive fragmentation can impair performance).')
sqlServerAccessMethodsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerAccessMethodsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerAccessMethodsEntry.setDescription('Performance information for one SQL Server name instance.')
ssamAUCleanupBatchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamAUCleanupBatchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamAUCleanupBatchesPerSec.setDescription('The number of deferred dropped alloc unit cleanup batches that completed sucessfully.')
ssamAUCleanupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamAUCleanupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamAUCleanupsPerSec.setDescription('The number of deferred dropped alloc units that were successfully cleaned up.')
ssamDeferredDroppedRowsets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDeferredDroppedRowsets.setStatus('current')
if mibBuilder.loadTexts: ssamDeferredDroppedRowsets.setDescription('The number of items on the deferred dropped rowset cleanup queue.')
ssamDeferredDroppedAUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDeferredDroppedAUs.setStatus('current')
if mibBuilder.loadTexts: ssamDeferredDroppedAUs.setDescription('The number of items on the deferred dropped alloc unit cleanup queue.')
ssamDroppedRowsetCleanupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDroppedRowsetCleanupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamDroppedRowsetCleanupsPerSec.setDescription('The number of deferred dropped rowsets that were successfully cleanedup.')
ssamDroppedRowsetsSkippedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDroppedRowsetsSkippedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamDroppedRowsetsSkippedPerSec.setDescription('The number of deferred dropped rowsets that were skipped.')
ssamExtentDeallocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamExtentDeallocationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamExtentDeallocationsPerSec.setDescription('Number of extents deallocated from database objects.')
ssamExtentsAllocatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamExtentsAllocatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamExtentsAllocatedPerSec.setDescription('Number of extents allocated to database objects for storing index or data records.')
ssamFailedAUCleanupBatchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFailedAUCleanupBatchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamFailedAUCleanupBatchesPerSec.setDescription('The number of deferred dropped alloc unit cleanup batches that failed.')
ssamFailedLeafPageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFailedLeafPageCookie.setStatus('current')
if mibBuilder.loadTexts: ssamFailedLeafPageCookie.setDescription('Failed to use leaf page cookie since changes happened on leaf.')
ssamFailedTreePageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFailedTreePageCookie.setStatus('current')
if mibBuilder.loadTexts: ssamFailedTreePageCookie.setDescription('Failed to use tree page cookie since changes happened on parent.')
ssamForwardedRecordsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamForwardedRecordsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamForwardedRecordsPerSec.setDescription('Number of records fetched through forwarded record pointers.')
ssamFreeSpacePageFetchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFreeSpacePageFetchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamFreeSpacePageFetchesPerSec.setDescription('Number of pages returned by free space scans to satisfy requests to insert record fragments.')
ssamFreeSpaceScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFreeSpaceScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamFreeSpaceScansPerSec.setDescription('Number of scans initiated to search for free space to insert a new record fragment.')
ssamFullScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFullScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamFullScansPerSec.setDescription('Number of unrestricted full scans. These can either be base table or full index scans.')
ssamIndexSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamIndexSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamIndexSearchesPerSec.setDescription('Number of index searches. Index searches are used to start range scans, single index record fetches, and to reposition within an index.')
ssamMixedPageAllocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamMixedPageAllocationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamMixedPageAllocationsPerSec.setDescription('Number of pages allocated from mixed extents. Used for storing the first eight pages allocated to an index or table.')
ssamPageDeallocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamPageDeallocationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamPageDeallocationsPerSec.setDescription('Number of pages deallocated.')
ssamPageSplitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamPageSplitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamPageSplitsPerSec.setDescription('Number of page splits occurring as the result of index pages overflowing.')
ssamPagesAllocatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamPagesAllocatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamPagesAllocatedPerSec.setDescription('Number of pages allocated to database objects for storing index or data records.')
ssamProbeScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamProbeScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamProbeScansPerSec.setDescription('Number of probe scans. A probe scan is used to directly look up rows in an index or base table.')
ssamRangeScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamRangeScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamRangeScansPerSec.setDescription('Number of qualified range scans through indexes.')
ssamScanPointRevalidationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamScanPointRevalidationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamScanPointRevalidationsPerSec.setDescription('Number of times the scan point had to be revalidated to continue the scan.')
ssamSkippedGhostedRecordsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamSkippedGhostedRecordsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamSkippedGhostedRecordsPerSec.setDescription('Number of ghosted records skipped during scans.')
ssamTableLockEscalationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamTableLockEscalationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamTableLockEscalationsPerSec.setDescription('The number of times locks on a table were escalated.')
ssamUsedLeafPageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamUsedLeafPageCookie.setStatus('current')
if mibBuilder.loadTexts: ssamUsedLeafPageCookie.setDescription('Successfully used leaf page cookie since no change happened on leaf.')
ssamUsedTreePageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamUsedTreePageCookie.setStatus('current')
if mibBuilder.loadTexts: ssamUsedTreePageCookie.setDescription('Successfully used tree page cookie since no change happened on parent.')
ssamWorkfilesCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamWorkfilesCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamWorkfilesCreatedPerSec.setDescription('Number of workfiles created in the last second.')
ssamWorktablesCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamWorktablesCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssamWorktablesCreatedPerSec.setDescription('Number of worktables created in the last second.')
ssamWorktablesFromCacheRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamWorktablesFromCacheRatio.setStatus('current')
if mibBuilder.loadTexts: ssamWorktablesFromCacheRatio.setDescription('Percent of worktables created where the initial pages were available in the worktable cache.')
sqlServerBackupDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18), )
if mibBuilder.loadTexts: sqlServerBackupDeviceTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerBackupDeviceTable.setDescription('The Backup Device object provides counters to monitor Microsoft SQL Server backup devices used for backup and restore operations. Monitor backup devices when you want to determine the throughput or the progress and performance of your backup and restore operations on a per device basis. To monitor the throughput of the entire database backup or restore operation, use the Backup/Restore Throughput/sec counter of the SQL Server Databases object. For more information, see SQL Server: Databases Object.')
sqlServerBackupDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssbdInstance"))
if mibBuilder.loadTexts: sqlServerBackupDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerBackupDeviceEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Backup Device' object.")
ssbdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbdInstance.setStatus('current')
if mibBuilder.loadTexts: ssbdInstance.setDescription('Instance name.')
ssbdDeviceThroughputBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbdDeviceThroughputBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbdDeviceThroughputBytesPerSec.setDescription('No description available')
sqlServerBrokerActivationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19), )
if mibBuilder.loadTexts: sqlServerBrokerActivationTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerBrokerActivationTable.setDescription('Service Broker Activation')
sqlServerBrokerActivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssbaInstance"))
if mibBuilder.loadTexts: sqlServerBrokerActivationEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerBrokerActivationEntry.setDescription("Performance information for one particular SQL Server name instance of 'Broker Activation' object.")
ssbaInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaInstance.setStatus('current')
if mibBuilder.loadTexts: ssbaInstance.setDescription('Instance name.')
ssbaStoredProceduresInvokedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaStoredProceduresInvokedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbaStoredProceduresInvokedPerSec.setDescription('The number of stored procedures that are being invoked per second.')
ssbaTaskLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTaskLimitReached.setStatus('current')
if mibBuilder.loadTexts: ssbaTaskLimitReached.setDescription('The total number of times the activated task limit on a queue has been reached.')
ssbaTaskLimitReachedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTaskLimitReachedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbaTaskLimitReachedPerSec.setDescription('The number of times the activated task limit on a queue has been reached per second.')
ssbaTasksAbortedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTasksAbortedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbaTasksAbortedPerSec.setDescription('The number of activated tasks that are being aborted per second.')
ssbaTasksRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTasksRunning.setStatus('current')
if mibBuilder.loadTexts: ssbaTasksRunning.setDescription('The total number of activated tasks that are currently running.')
ssbaTasksStartedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTasksStartedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbaTasksStartedPerSec.setDescription('The number of activated tasks that are being started per second.')
sqlServerBrokerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20), )
if mibBuilder.loadTexts: sqlServerBrokerStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerBrokerStatisticsTable.setDescription('Service Broker Statistics')
sqlServerBrokerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerBrokerStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerBrokerStatisticsEntry.setDescription('Performance information for one SQL Server name instance.')
ssbsBrokerTransactionRollbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsBrokerTransactionRollbacks.setStatus('current')
if mibBuilder.loadTexts: ssbsBrokerTransactionRollbacks.setDescription('The number of Service Broker related transactions that have rolled back.')
ssbsDialogTimerEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsDialogTimerEventCount.setStatus('current')
if mibBuilder.loadTexts: ssbsDialogTimerEventCount.setDescription('The number of dialog endpoint related timer events in the Broker.')
ssbsEnqueuedLocalMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedLocalMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedLocalMessagesTotal.setDescription('Total number of message fragments from local endpoints that are successfully delivered as ready into queues.')
ssbsEnqueuedLocalMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedLocalMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedLocalMessagesPerSec.setDescription('The number of messages from local endpoints that are successfully delivered as ready into queues per second.')
ssbsEnqueuedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedMessagesTotal.setDescription('Total number of message fragments from local endpoints and the transport that are successfully delivered as ready into queues.')
ssbsEnqueuedMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedMessagesPerSec.setDescription('The number of messages from local endpoints and the transport that are successfully delivered as ready into queues per second.')
ssbsEnqueuedTransportMsgFragTot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgFragTot.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgFragTot.setDescription('Total number of message fragments from the transport that are successfully delivered into queues. Note the cooresponding message may not be complete yet or may be out of order, and therefore the message can be in the queue as disabled.')
ssbsEnqueuedTransportMsgFragsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgFragsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgFragsPerSec.setDescription('The number of message fragments from the transport that are successfully delivered into queues per second. Note the cooresponding message may not be complete yet or may be out of order, and therefore the message can be in the queue as disabled.')
ssbsEnqueuedTransportMsgsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgsTotal.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgsTotal.setDescription('Total number of messages from the transport that are successfully delivered as ready into queues.')
ssbsEnqueuedTransportMsgsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgsPerSec.setDescription('The number of messages from the transport that are successfully delivered as ready into queues per second.')
ssbsForwardedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedMessagesTotal.setDescription('Total number of forwarded messages successfully sent.')
ssbsForwardedMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedMessagesPerSec.setDescription('The number of forwarded messages successfully sent per second.')
ssbsForwardedMsgByteTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgByteTotal.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedMsgByteTotal.setDescription('Total number of forwarded message bytes successfully sent.')
ssbsForwardedMsgBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedMsgBytesPerSec.setDescription('The number of forwarded message bytes successfully sent per second.')
ssbsForwardedMsgDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedMsgDiscardedTotal.setDescription('Total number of forwarded messages discarded due to forwarded message memory limits, age limits, etc.')
ssbsForwardedMsgsDiscardedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgsDiscardedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedMsgsDiscardedPerSec.setDescription('The number of forwarded messages that were discarded per second due to forwarded message memory limits, age limits, etc.')
ssbsForwardedPendingMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedPendingMsgBytes.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedPendingMsgBytes.setDescription('The number of forwarded message bytes that have not been successfully sent yet.')
ssbsForwardedPendingMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedPendingMsgCount.setStatus('current')
if mibBuilder.loadTexts: ssbsForwardedPendingMsgCount.setDescription('The number of forwarded messages that have not been successfully sent yet.')
ssbsSQLRECEIVETotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLRECEIVETotal.setStatus('current')
if mibBuilder.loadTexts: ssbsSQLRECEIVETotal.setDescription('Total number of SQL RECEIVE commands processed by the Broker.')
ssbsSQLRECEIVEsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLRECEIVEsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsSQLRECEIVEsPerSec.setDescription('The number of SQL RECEIVE commands processed by the Broker per second.')
ssbsSQLSENDTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLSENDTotal.setStatus('current')
if mibBuilder.loadTexts: ssbsSQLSENDTotal.setDescription('Total number of SQL SEND commands processed by the Broker.')
ssbsSQLSENDsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLSENDsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbsSQLSENDsPerSec.setDescription('The number of SQL SEND commands processed by the Broker per second.')
ssbsTransportTimerEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsTransportTimerEventCount.setStatus('current')
if mibBuilder.loadTexts: ssbsTransportTimerEventCount.setDescription('The number of transport related timer events in the Broker.')
sqlServerBrokerTransportTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21), )
if mibBuilder.loadTexts: sqlServerBrokerTransportTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerBrokerTransportTable.setDescription('Service Broker Transport Statistics')
sqlServerBrokerTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerBrokerTransportEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerBrokerTransportEntry.setDescription('Performance information for one SQL Server name instance.')
ssbtCurrentBytesForRecvIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtCurrentBytesForRecvIO.setStatus('current')
if mibBuilder.loadTexts: ssbtCurrentBytesForRecvIO.setDescription("The number of bytes associated with current transport receive I/O operations that haven't completed.")
ssbtCurrentBytesForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtCurrentBytesForSendIO.setStatus('current')
if mibBuilder.loadTexts: ssbtCurrentBytesForSendIO.setDescription("The number of buffer bytes associated with current transport send I/O operations that haven't completed.")
ssbtCurrentMsgFragsForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtCurrentMsgFragsForSendIO.setStatus('current')
if mibBuilder.loadTexts: ssbtCurrentMsgFragsForSendIO.setDescription("The current number of message fragments associated with current transport send I/O operations that haven't completed.")
ssbtMessageFragmentReceiveTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentReceiveTotal.setStatus('current')
if mibBuilder.loadTexts: ssbtMessageFragmentReceiveTotal.setDescription('The total number of message fragments received in transport receive I/O operations.')
ssbtMessageFragmentReceivesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentReceivesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbtMessageFragmentReceivesPerSec.setDescription('The number of message fragments received per second in transport receive I/O operations.')
ssbtMessageFragmentSendTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentSendTotal.setStatus('current')
if mibBuilder.loadTexts: ssbtMessageFragmentSendTotal.setDescription('The total number of message fragments sent in transport send I/O operations.')
ssbtMessageFragmentSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentSendsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbtMessageFragmentSendsPerSec.setDescription('The number of message fragments sent per second in transport send I/O operations.')
ssbtMsgFragmentRecvSizeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMsgFragmentRecvSizeAvg.setStatus('current')
if mibBuilder.loadTexts: ssbtMsgFragmentRecvSizeAvg.setDescription('The average byte size of message fragments received in transport receive I/O operations.')
ssbtMsgFragmentSendSizeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMsgFragmentSendSizeAvg.setStatus('current')
if mibBuilder.loadTexts: ssbtMsgFragmentSendSizeAvg.setDescription('The average byte size of message fragments sent in transport send I/O operations.')
ssbtOpenConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtOpenConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ssbtOpenConnectionCount.setDescription('The total number of Service Broker transport connections currently open.')
ssbtPendingBytesForRecvIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingBytesForRecvIO.setStatus('current')
if mibBuilder.loadTexts: ssbtPendingBytesForRecvIO.setDescription("The number of bytes associated with in completed transport receive I/O operations whose message fragments haven't been enqueued (or rejected) yet.")
ssbtPendingBytesForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingBytesForSendIO.setStatus('current')
if mibBuilder.loadTexts: ssbtPendingBytesForSendIO.setDescription('The number of buffer bytes associated with message fragments being marshalled, or marshalled and ready to be sent with send I/O operations.')
ssbtPendingMsgFragsForRecvIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingMsgFragsForRecvIO.setStatus('current')
if mibBuilder.loadTexts: ssbtPendingMsgFragsForRecvIO.setDescription('The current number of message fragments received in transport receive I/O operations that have not been enqueued (or rejected) yet.')
ssbtPendingMsgFragsForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingMsgFragsForSendIO.setStatus('current')
if mibBuilder.loadTexts: ssbtPendingMsgFragsForSendIO.setDescription('The current number of message fragments that are being marshalled, or marshalled and ready to be sent via the transport layer.')
ssbtReceiveIOBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOBytesTotal.setStatus('current')
if mibBuilder.loadTexts: ssbtReceiveIOBytesTotal.setDescription('The total number of bytes received in transport receive I/O operations.')
ssbtReceiveIOLenAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOLenAvg.setStatus('current')
if mibBuilder.loadTexts: ssbtReceiveIOLenAvg.setDescription('The average byte length of transport receive I/O operations.')
ssbtReceiveIOBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbtReceiveIOBytesPerSec.setDescription('The number of transport receive I/O bytes per second.')
ssbtReceiveIOsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbtReceiveIOsPerSec.setDescription('The number of transport receives I/O per second. Note that a transport receive I/O may contain more than one message fragment.')
ssbtSendIOBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOBytesTotal.setStatus('current')
if mibBuilder.loadTexts: ssbtSendIOBytesTotal.setDescription('The total number of bytes sent in transport send I/O operations.')
ssbtSendIOLenAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOLenAvg.setStatus('current')
if mibBuilder.loadTexts: ssbtSendIOLenAvg.setDescription('The average byte length of transport send I/O operations.')
ssbtSendIOBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbtSendIOBytesPerSec.setDescription('The number of transport send I/O bytes per second.')
ssbtSendIOsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbtSendIOsPerSec.setDescription('The number of transport send I/Os per second. Note that a transport send I/O may contain more than one message fragment.')
sqlServerBufferManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22), )
if mibBuilder.loadTexts: sqlServerBufferManagerTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerBufferManagerTable.setDescription('The Buffer Manager object provides counters to monitor how Microsoft SQL Server uses: Memory to store data pages, internal data structures, and the procedure cache; Counters to monitor the physical I/O as SQL Server reads database pages from and writes database pages to disk. ')
sqlServerBufferManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerBufferManagerEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerBufferManagerEntry.setDescription('Performance information for one SQL Server name instance.')
ssbmAWELookupMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWELookupMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmAWELookupMapsPerSec.setDescription('Number of AWE map calls made for pages found in the buffer pool.')
ssbmAWEStolenMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEStolenMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmAWEStolenMapsPerSec.setDescription('Number of AWE map calls made for pages stolen from the buffer pool.')
ssbmAWEUnmapCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEUnmapCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmAWEUnmapCallsPerSec.setDescription('Number of AWE unmap calls.')
ssbmAWEUnmapPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEUnmapPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmAWEUnmapPagesPerSec.setDescription('Number of AWE pages unmapped.')
ssbmAWEWriteMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEWriteMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmAWEWriteMapsPerSec.setDescription('Number of AWE map calls made for pages to be written to disk.')
ssbmBufferCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmBufferCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: ssbmBufferCacheHitRatio.setDescription('Percentage of pages that were found in the buffer pool without having to incur a read from disk.')
ssbmCheckpointPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmCheckpointPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmCheckpointPagesPerSec.setDescription('Number of pages flushed by checkpoint or other operations that require all dirty pages to be flushed.')
ssbmDatabasePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmDatabasePages.setStatus('current')
if mibBuilder.loadTexts: ssbmDatabasePages.setDescription('Number of pages in the buffer pool with database content.')
ssbmFreeListStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmFreeListStallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmFreeListStallsPerSec.setDescription('Number of requests that had to wait for a free page.')
ssbmFreePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmFreePages.setStatus('current')
if mibBuilder.loadTexts: ssbmFreePages.setDescription('Total number of pages on all free lists.')
ssbmLazyWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmLazyWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmLazyWritesPerSec.setDescription("Number of buffers written by buffer manager's lazy writer.")
ssbmPageLifeExpectancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageLifeExpectancy.setStatus('current')
if mibBuilder.loadTexts: ssbmPageLifeExpectancy.setDescription('Number of seconds a page will stay in the buffer pool without references.')
ssbmPageLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmPageLookupsPerSec.setDescription('Number of requests to find a page in the buffer pool.')
ssbmPageReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmPageReadsPerSec.setDescription('Number of physical database page reads issued.')
ssbmPageWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmPageWritesPerSec.setDescription('Number of physical database page writes issued.')
ssbmProcedureCachePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmProcedureCachePages.setStatus('current')
if mibBuilder.loadTexts: ssbmProcedureCachePages.setDescription('Number of pages used to store compiled queries.')
ssbmReadaheadPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmReadaheadPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbmReadaheadPagesPerSec.setDescription('Number of pages read in anticipation of use.')
ssbmReservedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmReservedPages.setStatus('current')
if mibBuilder.loadTexts: ssbmReservedPages.setDescription('Number of buffer pool reserved pages.')
ssbmStolenPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmStolenPages.setStatus('current')
if mibBuilder.loadTexts: ssbmStolenPages.setDescription('Number of pages used for miscellaneous server purposes (including procedure cache).')
ssbmTargetPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmTargetPages.setStatus('current')
if mibBuilder.loadTexts: ssbmTargetPages.setDescription('Ideal number of pages in the buffer pool.')
ssbmTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmTotalPages.setStatus('current')
if mibBuilder.loadTexts: ssbmTotalPages.setDescription('Number of pages in the buffer pool (includes database, free, and stolen).')
sqlServerBufferPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23), )
if mibBuilder.loadTexts: sqlServerBufferPartitionTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerBufferPartitionTable.setDescription('The Buffer Partition object provides counters to monitor how Microsoft SQL Server uses free pages.')
sqlServerBufferPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssbpInstance"))
if mibBuilder.loadTexts: sqlServerBufferPartitionEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerBufferPartitionEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Buffer Partition' object.")
ssbpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpInstance.setStatus('current')
if mibBuilder.loadTexts: ssbpInstance.setDescription('Instance name.')
ssbpFreeListEmptyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpFreeListEmptyPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbpFreeListEmptyPerSec.setDescription('Number of times a free page was requested and none were available.')
ssbpFreeListRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpFreeListRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssbpFreeListRequestsPerSec.setDescription('Number of times a free page was requested.')
ssbpFreePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpFreePages.setStatus('current')
if mibBuilder.loadTexts: ssbpFreePages.setDescription('Total number of pages on all free lists.')
sqlServerCacheManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24), )
if mibBuilder.loadTexts: sqlServerCacheManagerTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerCacheManagerTable.setDescription('The Cache Manager object provides counters to monitor how Microsoft SQL Server uses memory to store objects such as stored procedures, ad hoc and prepared Transact-SQL statements, and triggers. Multiple instances of the Cache Manager object can be monitored at the same time, with each instance representing a different type of plan to monitor.')
sqlServerCacheManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sscmInstance"))
if mibBuilder.loadTexts: sqlServerCacheManagerEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerCacheManagerEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Cache Manager' object.")
sscmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmInstance.setStatus('current')
if mibBuilder.loadTexts: sscmInstance.setDescription('Instance name.')
sscmCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: sscmCacheHitRatio.setDescription('Ratio between cache hits and lookups')
sscmCacheObjectCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCacheObjectCounts.setStatus('current')
if mibBuilder.loadTexts: sscmCacheObjectCounts.setDescription('Number of cache objects in the cache')
sscmCachePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCachePages.setStatus('current')
if mibBuilder.loadTexts: sscmCachePages.setDescription('Number of 8k pages used by cache objects')
sscmCacheUseCountsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCacheUseCountsPerSec.setStatus('current')
if mibBuilder.loadTexts: sscmCacheUseCountsPerSec.setDescription('Times each type of cache object has been used')
sqlServerCursorManagerTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25), )
if mibBuilder.loadTexts: sqlServerCursorManagerTotalTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerCursorManagerTotalTable.setDescription('Counters for cursor properties not grouped by type')
sqlServerCursorManagerTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerCursorManagerTotalEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerCursorManagerTotalEntry.setDescription('Performance information for one SQL Server name instance.')
sscmtAsyncPopulationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmtAsyncPopulationCount.setStatus('current')
if mibBuilder.loadTexts: sscmtAsyncPopulationCount.setDescription('Number of cursor being populated asynchronously.')
sscmtCursorConversionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmtCursorConversionRate.setStatus('current')
if mibBuilder.loadTexts: sscmtCursorConversionRate.setDescription('Number of cursors conversions/sec.')
sscmtCursorFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmtCursorFlushes.setStatus('current')
if mibBuilder.loadTexts: sscmtCursorFlushes.setDescription('Total number of times a flush for a cursor xstmt occured.')
sqlServerCursorManagerByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26), )
if mibBuilder.loadTexts: sqlServerCursorManagerByTypeTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerCursorManagerByTypeTable.setDescription('Counters for cursor properties grouped by type')
sqlServerCursorManagerByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sscmbtInstance"))
if mibBuilder.loadTexts: sqlServerCursorManagerByTypeEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerCursorManagerByTypeEntry.setDescription("Performance information for one particular SQL Server name instance of 'Cursor Manager by Type' object.")
sscmbtInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtInstance.setStatus('current')
if mibBuilder.loadTexts: sscmbtInstance.setDescription('Instance name.')
sscmbtActiveCursors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtActiveCursors.setStatus('current')
if mibBuilder.loadTexts: sscmbtActiveCursors.setDescription('Number of active cursors.')
sscmbtCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: sscmbtCacheHitRatio.setDescription('Ratio between cache hits and lookups')
sscmbtCachedCursorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCachedCursorCounts.setStatus('current')
if mibBuilder.loadTexts: sscmbtCachedCursorCounts.setDescription('Number of cursors of a given type in the cache')
sscmbtCursorCacheUseCountsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorCacheUseCountsPerSec.setStatus('current')
if mibBuilder.loadTexts: sscmbtCursorCacheUseCountsPerSec.setDescription('Times each type of cached cursor has been used')
sscmbtCursorRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: sscmbtCursorRequestsPerSec.setDescription('Number of SQL cursor requests received by server.')
sscmbtCursorMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: sscmbtCursorMemoryUsage.setDescription('Amount of memory consumed by cursors (KB).')
sscmbtCursorWorktableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorWorktableUsage.setStatus('current')
if mibBuilder.loadTexts: sscmbtCursorWorktableUsage.setDescription('Number of worktables used by cursors.')
sscmbtNumberOfActiveCursorPlans = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtNumberOfActiveCursorPlans.setStatus('current')
if mibBuilder.loadTexts: sscmbtNumberOfActiveCursorPlans.setDescription('Number of cursor plans.')
sqlServerDatabasesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27), )
if mibBuilder.loadTexts: sqlServerDatabasesTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerDatabasesTable.setDescription('The Databases object in Microsoft SQL Server provides counters to monitor bulk copy operations, backup and restore throughput, and transaction log activities. Monitor transactions and the transaction log to determine how much user activity is occurring in the database and how full the transaction log is becoming. The amount of user activity can determine the performance of the database and affect log size, locking, and replication. Monitoring low-level log activity to gauge user activity and resource usage can help you to identify performance bottlenecks. Multiple instances of the Databases object, each representing a single database, can be monitored at the same time.')
sqlServerDatabasesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssdInstance"))
if mibBuilder.loadTexts: sqlServerDatabasesEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerDatabasesEntry.setDescription("Performance information for one particular SQL Server name instance of 'Databases' object.")
ssdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdInstance.setStatus('current')
if mibBuilder.loadTexts: ssdInstance.setDescription('Instance name.')
ssdActiveTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdActiveTransactions.setStatus('current')
if mibBuilder.loadTexts: ssdActiveTransactions.setDescription('Number of active update transactions for the database.')
ssdBackupPerRestoreThroughputPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdBackupPerRestoreThroughputPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdBackupPerRestoreThroughputPerSec.setDescription('Read/write throughput for backup/restore of a database.')
ssdBulkCopyRowsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdBulkCopyRowsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdBulkCopyRowsPerSec.setDescription('Number of rows bulk copied.')
ssdBulkCopyThroughputPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdBulkCopyThroughputPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdBulkCopyThroughputPerSec.setDescription('KiloBytes bulk copied.')
ssdDBCCLogicalScanBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdDBCCLogicalScanBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdDBCCLogicalScanBytesPerSec.setDescription('Logical read scan rate for DBCC commands')
ssdDataFileSSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdDataFileSSizeKB.setStatus('current')
if mibBuilder.loadTexts: ssdDataFileSSizeKB.setDescription('The cumulative size of all the data files in the database.')
ssdLogBytesFlushedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogBytesFlushedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdLogBytesFlushedPerSec.setDescription('Total number of log bytes flushed.')
ssdLogCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: ssdLogCacheHitRatio.setDescription('Percentage of log cache reads that were satisfied from the log cache.')
ssdLogCacheReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogCacheReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdLogCacheReadsPerSec.setDescription('Reads performed through the log manager cache.')
ssdLogFileSSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFileSSizeKB.setStatus('current')
if mibBuilder.loadTexts: ssdLogFileSSizeKB.setDescription('The cumulative size of all the log files in the database.')
ssdLogFileSUsedSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFileSUsedSizeKB.setStatus('current')
if mibBuilder.loadTexts: ssdLogFileSUsedSizeKB.setDescription('The cumulative used size of all the log files in the database.')
ssdLogFlushWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFlushWaitTime.setStatus('current')
if mibBuilder.loadTexts: ssdLogFlushWaitTime.setDescription('Total wait time (milliseconds).')
ssdLogFlushWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFlushWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdLogFlushWaitsPerSec.setDescription('Number of commits waiting on log flush.')
ssdLogFlushesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFlushesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdLogFlushesPerSec.setDescription('Number of log flushes.')
ssdLogGrowths = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogGrowths.setStatus('current')
if mibBuilder.loadTexts: ssdLogGrowths.setDescription('Total number of log growths for this database.')
ssdLogShrinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogShrinks.setStatus('current')
if mibBuilder.loadTexts: ssdLogShrinks.setDescription('Total number of log shrinks for this database.')
ssdLogTruncations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogTruncations.setStatus('current')
if mibBuilder.loadTexts: ssdLogTruncations.setDescription('Total number of log truncations for this database.')
ssdMirroringAcksReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringAcksReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringAcksReceivedPerSec.setDescription('Number of acknowledgements received per second')
ssdMirroringBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringBytesSentPerSec.setDescription('Number of bytes sent per second')
ssdMirroringPagesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringPagesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringPagesSentPerSec.setDescription('Number of pages sent per second')
ssdMirroringSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringSendsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringSendsPerSec.setDescription('Number of sends initiated per second')
ssdMirroringTotalAcksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalAcksReceived.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringTotalAcksReceived.setDescription('Total number of acknowledgements received')
ssdMirroringTotalBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalBytesSent.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringTotalBytesSent.setDescription('Total number of bytes sent')
ssdMirroringTotalPagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalPagesSent.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringTotalPagesSent.setDescription('Total number of pages sent')
ssdMirroringTotalSends = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalSends.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringTotalSends.setDescription('Total number of sends initiated')
ssdMirroringTransactionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTransactionDelay.setStatus('current')
if mibBuilder.loadTexts: ssdMirroringTransactionDelay.setDescription('Average delay in transaction termination waiting for acknowledgement')
ssdPercentLogUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdPercentLogUsed.setStatus('current')
if mibBuilder.loadTexts: ssdPercentLogUsed.setDescription('The percent of space in the log that is in use.')
ssdReplPendingXacts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdReplPendingXacts.setStatus('current')
if mibBuilder.loadTexts: ssdReplPendingXacts.setDescription('Number of pending replication transactions in the database.')
ssdReplTransRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdReplTransRate.setStatus('current')
if mibBuilder.loadTexts: ssdReplTransRate.setDescription('Replication transaction rate (replicated transactions/sec.).')
ssdShrinkDataMovementBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdShrinkDataMovementBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdShrinkDataMovementBytesPerSec.setDescription('The rate data is being moved by Autoshrink, DBCC SHRINKDATABASE or SHRINKFILE.')
ssdTransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssdTransactionsPerSec.setDescription('Number of transactions started for the database.')
sqlServerExecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28), )
if mibBuilder.loadTexts: sqlServerExecStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerExecStatisticsTable.setDescription('Execution statistics for external calls')
sqlServerExecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssesInstance"))
if mibBuilder.loadTexts: sqlServerExecStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerExecStatisticsEntry.setDescription("Performance information for one particular SQL Server name instance of 'ExecStatistics' object.")
ssesInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesInstance.setStatus('current')
if mibBuilder.loadTexts: ssesInstance.setDescription('Instance name.')
ssesDTCCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesDTCCalls.setStatus('current')
if mibBuilder.loadTexts: ssesDTCCalls.setDescription('Statistics relevant to execution of DTC calls.')
ssesDistributedQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesDistributedQuery.setStatus('current')
if mibBuilder.loadTexts: ssesDistributedQuery.setDescription('Statistics relevant to execution of distributed queries.')
ssesExtendedProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesExtendedProcedures.setStatus('current')
if mibBuilder.loadTexts: ssesExtendedProcedures.setDescription('Statistics relevant to execution of XP calls.')
ssesOLEDBCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesOLEDBCalls.setStatus('current')
if mibBuilder.loadTexts: ssesOLEDBCalls.setDescription('Statistics relevant to execution of OLEDB calls.')
sqlServerGeneralStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29), )
if mibBuilder.loadTexts: sqlServerGeneralStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerGeneralStatisticsTable.setDescription('The General Statistics object in Microsoft SQL Server provides counters to monitor general server-wide activity, such as the number of current connections and the number of users connecting and disconnecting per second from computers running an instance of SQL Server. This can be useful when you are working on large online transaction processing (OLTP) type systems where there are many clients connecting and disconnecting from an instance of SQL Server.')
sqlServerGeneralStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerGeneralStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerGeneralStatisticsEntry.setDescription('Performance information for one SQL Server name instance.')
ssgsHTTPAnonymousRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsHTTPAnonymousRequests.setStatus('current')
if mibBuilder.loadTexts: ssgsHTTPAnonymousRequests.setDescription('Number of anonymous HTTP requests started per second.')
ssgsHTTPAuthenticatedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsHTTPAuthenticatedRequests.setStatus('current')
if mibBuilder.loadTexts: ssgsHTTPAuthenticatedRequests.setDescription('Number of authenticated HTTP requests started per second.')
ssgsLogicalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsLogicalConnections.setStatus('current')
if mibBuilder.loadTexts: ssgsLogicalConnections.setDescription('Number of logical connections to the system.')
ssgsLoginsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsLoginsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssgsLoginsPerSec.setDescription('Total number of logins started per second.')
ssgsLogoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsLogoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssgsLogoutsPerSec.setDescription('Total number of logouts started per second.')
ssgsMarsDeadlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsMarsDeadlocks.setStatus('current')
if mibBuilder.loadTexts: ssgsMarsDeadlocks.setDescription('Number of Mars Deadlocks detected.')
ssgsNonAtomicYieldRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsNonAtomicYieldRate.setStatus('current')
if mibBuilder.loadTexts: ssgsNonAtomicYieldRate.setDescription('Number of non-atomic yields per second.')
ssgsProcessesBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsProcessesBlocked.setStatus('current')
if mibBuilder.loadTexts: ssgsProcessesBlocked.setDescription('Number of currently blocked processes.')
ssgsSOAPEmptyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPEmptyRequests.setStatus('current')
if mibBuilder.loadTexts: ssgsSOAPEmptyRequests.setDescription('Number of empty SOAP requests started per second.')
ssgsSOAPMethodInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPMethodInvocations.setStatus('current')
if mibBuilder.loadTexts: ssgsSOAPMethodInvocations.setDescription('Number of SOAP method invocations started per second.')
ssgsSOAPSQLRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPSQLRequests.setStatus('current')
if mibBuilder.loadTexts: ssgsSOAPSQLRequests.setDescription('Number of SOAP SQL requests started per second.')
ssgsSOAPSessionInitiateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPSessionInitiateRequests.setStatus('current')
if mibBuilder.loadTexts: ssgsSOAPSessionInitiateRequests.setDescription('Number of SOAP Session initiate requests started per second.')
ssgsSOAPSessionTerminateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPSessionTerminateRequests.setStatus('current')
if mibBuilder.loadTexts: ssgsSOAPSessionTerminateRequests.setDescription('Number of SOAP Session terminate requests started per second.')
ssgsSOAPWSDLRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPWSDLRequests.setStatus('current')
if mibBuilder.loadTexts: ssgsSOAPWSDLRequests.setDescription('Number of SOAP Web Service Description Language requests started per second.')
ssgsTempTablesCreationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsTempTablesCreationRate.setStatus('current')
if mibBuilder.loadTexts: ssgsTempTablesCreationRate.setDescription('Number of temporary tables/table variables created/sec')
ssgsTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsTransactions.setStatus('current')
if mibBuilder.loadTexts: ssgsTransactions.setDescription('Number of transaction enlistments (local, dtc, bound all combined).')
ssgsUserConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsUserConnections.setStatus('current')
if mibBuilder.loadTexts: ssgsUserConnections.setDescription('Number of users connected to the system.')
sqlServerLatchesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30), )
if mibBuilder.loadTexts: sqlServerLatchesTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerLatchesTable.setDescription('The Latches object in Microsoft SQL Server provides counters to monitor internal SQL Server resource locks called latches. Monitoring the latches to determine user activity and resource usage can help you to identify performance bottlenecks.')
sqlServerLatchesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerLatchesEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerLatchesEntry.setDescription('Performance information for one SQL Server name instance.')
ssltAverageLatchWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssltAverageLatchWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: ssltAverageLatchWaitTimeMs.setDescription('Average latch wait time (milliseconds) for latch requests that had to wait.')
ssltLatchWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssltLatchWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssltLatchWaitsPerSec.setDescription('Number of latch requests that could not be granted immediately and had to wait before being granted.')
ssltTotalLatchWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssltTotalLatchWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: ssltTotalLatchWaitTimeMs.setDescription('Total latch wait time (milliseconds) for latch requests that had to wait in the last second.')
sqlServerLocksTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31), )
if mibBuilder.loadTexts: sqlServerLocksTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerLocksTable.setDescription('The Locks object in Microsoft SQL Server provides information about SQL Server locks on individual resource types. Locks are held on SQL Server resources, such as rows read or modified during a transaction, to prevent concurrent use of resources by multiple transactions. For example, if an exclusive (X) lock is held on a row within a table by a transaction, no other transaction can modify that row until the lock is released. Minimizing locks increases concurrency, which can improve performance. Multiple instances of the Locks object can be monitored at the same time, with each instance representing a lock on a resource type.')
sqlServerLocksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sslkInstance"))
if mibBuilder.loadTexts: sqlServerLocksEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerLocksEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Locks' object.")
sslkInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkInstance.setStatus('current')
if mibBuilder.loadTexts: sslkInstance.setDescription('Instance name.')
sslkAverageWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkAverageWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: sslkAverageWaitTimeMs.setDescription('The average amount of wait time (milliseconds) for each lock request that resulted in a wait.')
sslkLockRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: sslkLockRequestsPerSec.setDescription('Number of new locks and lock conversions requested from the lock manager.')
sslkLockTimeoutsTimeoutGT0PerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockTimeoutsTimeoutGT0PerSec.setStatus('current')
if mibBuilder.loadTexts: sslkLockTimeoutsTimeoutGT0PerSec.setDescription('Number of lock requests that timed out. This does not include requests for NOWAIT locks.')
sslkLockTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: sslkLockTimeoutsPerSec.setDescription('Number of lock requests that timed out. This includes requests for NOWAIT locks.')
sslkLockWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: sslkLockWaitTimeMs.setDescription('Total wait time (milliseconds) for locks in the last second.')
sslkLockWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: sslkLockWaitsPerSec.setDescription('Number of lock requests that could not be satisfied immediately and required the caller to wait before being granted the lock.')
sslkNumberOfDeadlocksPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkNumberOfDeadlocksPerSec.setStatus('current')
if mibBuilder.loadTexts: sslkNumberOfDeadlocksPerSec.setDescription('Number of lock requests that resulted in a deadlock.')
sqlServerMemoryManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32), )
if mibBuilder.loadTexts: sqlServerMemoryManagerTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerMemoryManagerTable.setDescription('The Memory Manager object in Microsoft SQL Server provides counters to monitor overall server memory usage. Monitoring overall server memory usage to gauge user activity and resource usage can help you to identify performance bottlenecks. Monitoring the memory used by an instance of SQL Server can help determine: If bottlenecks exist due to a lack of available physical memory for storing frequently accessed data in cache. If so, SQL Server must retrieve the data from disk; If query performance can be improved by adding more memory or by making more memory available to the data cache or SQL Server internal structures.')
sqlServerMemoryManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerMemoryManagerEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerMemoryManagerEntry.setDescription('Performance information for one SQL Server name instance.')
ssmmConnectionMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmConnectionMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmConnectionMemoryKB.setDescription('Total amount of dynamic memory the server is using for maintaining connections')
ssmmGrantedWorkspaceMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmGrantedWorkspaceMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmGrantedWorkspaceMemoryKB.setDescription('Total amount of memory granted to executing processes. This memory is used for hash, sort and create index operations.')
ssmmLockBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockBlocks.setStatus('current')
if mibBuilder.loadTexts: ssmmLockBlocks.setDescription('The current number of lock blocks that are in use on the server. Refreshed periodically.')
ssmmLockBlocksAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockBlocksAllocated.setStatus('current')
if mibBuilder.loadTexts: ssmmLockBlocksAllocated.setDescription('The current number of allocated lock blocks.')
ssmmLockMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmLockMemoryKB.setDescription('Total amount of dynamic memory the server is using for locks')
ssmmLockOwnerBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockOwnerBlocks.setStatus('current')
if mibBuilder.loadTexts: ssmmLockOwnerBlocks.setDescription('The number of lock owner blocks that are currently in use on the server. Refreshed periodically.')
ssmmLockOwnerBlocksAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockOwnerBlocksAllocated.setStatus('current')
if mibBuilder.loadTexts: ssmmLockOwnerBlocksAllocated.setDescription('The current number of allocated lock owner blocks.')
ssmmMaximumWorkspaceMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmMaximumWorkspaceMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmMaximumWorkspaceMemoryKB.setDescription('Total amount of memory granted to executing processes. This memory is used primarily for hash, sort and create index operations.')
ssmmMemoryGrantsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmMemoryGrantsOutstanding.setStatus('current')
if mibBuilder.loadTexts: ssmmMemoryGrantsOutstanding.setDescription('Current number of processes that have successfully acquired a workspace memory grant')
ssmmMemoryGrantsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmMemoryGrantsPending.setStatus('current')
if mibBuilder.loadTexts: ssmmMemoryGrantsPending.setDescription('Current number of processes waiting for a workspace memory grant')
ssmmOptimizerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmOptimizerMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmOptimizerMemoryKB.setDescription('Total amount of dynamic memory the server is using for query optimization')
ssmmSQLCacheMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmSQLCacheMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmSQLCacheMemoryKB.setDescription('Total amount of dynamic memory the server is using for the dynamic SQL cache')
ssmmTargetServerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmTargetServerMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmTargetServerMemoryKB.setDescription('Total amount of dynamic memory the server is willing to consume')
ssmmTotalServerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmTotalServerMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ssmmTotalServerMemoryKB.setDescription('Total amount of dynamic memory the server is currently consuming')
sqlServerReplicateLogreaderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33), )
if mibBuilder.loadTexts: sqlServerReplicateLogreaderTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicateLogreaderTable.setDescription('The Replication Logreader object in Microsoft SQL Server provides counters to monitor the Log Reader Agent.')
sqlServerReplicateLogreaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrlInstance"))
if mibBuilder.loadTexts: sqlServerReplicateLogreaderEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicateLogreaderEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Replication Logreader' object.")
ssrlInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlInstance.setStatus('current')
if mibBuilder.loadTexts: ssrlInstance.setDescription('Instance name.')
ssrlLogreaderDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlLogreaderDeliveredCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrlLogreaderDeliveredCmdsPerSec.setDescription('Number of Log Reader Agent commands delivered per second to the Distributor.')
ssrlLogreaderDelivereTransPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlLogreaderDelivereTransPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrlLogreaderDelivereTransPerSec.setDescription('Number of Log Reader Agent transactions delivered per second to the Distributor.')
ssrlLogreaderDeliveryLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlLogreaderDeliveryLatency.setStatus('current')
if mibBuilder.loadTexts: ssrlLogreaderDeliveryLatency.setDescription('Current amount of time, in milliseconds, elapsed from when transactions are applied at the Publisher to when they are delivered to the Distributor.')
sqlServerReplicateSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34), )
if mibBuilder.loadTexts: sqlServerReplicateSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicateSnapshotTable.setDescription('The Replication Snapshot object in Microsoft SQL Server provides counters to monitor SQL Server snapshot replication.')
sqlServerReplicateSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrsInstance"))
if mibBuilder.loadTexts: sqlServerReplicateSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicateSnapshotEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Replication Snapshot' object.")
ssrsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrsInstance.setStatus('current')
if mibBuilder.loadTexts: ssrsInstance.setDescription('Instance name.')
ssrsSnapshotDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrsSnapshotDeliveredCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrsSnapshotDeliveredCmdsPerSec.setDescription('Number of commands delivered per second to the Distributor.')
ssrsSnapshotDeliveredTransPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrsSnapshotDeliveredTransPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrsSnapshotDeliveredTransPerSec.setDescription('Number of transactions delivered per second to the Distributor.')
sqlServerReplicationAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35), )
if mibBuilder.loadTexts: sqlServerReplicationAgentsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicationAgentsTable.setDescription('The Replication Agents object in Microsoft SQL Server provides counters to monitor the SQL Server replication agents that are running currently. Monitoring the number of running Distribution and Merge Agents is useful to determine the number of Subscribers to which published databases are replicating. Multiple instances of the Replication Agents object can be monitored at the same time, with each instance representing a single replication agent (for example, Log Reader; Snapshot; Distribution; and Merge).')
sqlServerReplicationAgentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssraInstance"))
if mibBuilder.loadTexts: sqlServerReplicationAgentsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicationAgentsEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Replication Agents' object.")
ssraInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssraInstance.setStatus('current')
if mibBuilder.loadTexts: ssraInstance.setDescription('Instance name.')
ssraRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssraRunning.setStatus('current')
if mibBuilder.loadTexts: ssraRunning.setDescription('Number of instances of a given replication agent running currently.')
sqlServerReplicationDistTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36), )
if mibBuilder.loadTexts: sqlServerReplicationDistTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicationDistTable.setDescription('The Replication Dist. object in Microsoft SQL Server provides counters to monitor the number of commands and transactions read from the distribution database and delivered to the subscriber databases by the SQL Server Distribution Agent.')
sqlServerReplicationDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrdInstance"))
if mibBuilder.loadTexts: sqlServerReplicationDistEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicationDistEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Replication Dist.' object.")
ssrdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdInstance.setStatus('current')
if mibBuilder.loadTexts: ssrdInstance.setDescription('Instance name.')
ssrdDistDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdDistDeliveredCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrdDistDeliveredCmdsPerSec.setDescription('Number of distribution commands delivered per second to the Subscriber.')
ssrdDistDeliveredTransPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdDistDeliveredTransPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrdDistDeliveredTransPerSec.setDescription('Number of distribution transactions delivered per second to the Subscriber.')
ssrdDistDeliveryLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdDistDeliveryLatency.setStatus('current')
if mibBuilder.loadTexts: ssrdDistDeliveryLatency.setDescription('Distribution latency (in milliseconds). The time it takes for transactions to be delivered to the Distributor and applied at the Subscriber.')
sqlServerReplicationMergeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37), )
if mibBuilder.loadTexts: sqlServerReplicationMergeTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicationMergeTable.setDescription('The Replication Merge object in Microsoft SQL Server provides counters to monitor each SQL Server merge execution that moves data changes up from a merge replication Subscriber to the Publisher, and down from the Publisher to the Subscriber.')
sqlServerReplicationMergeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrmInstance"))
if mibBuilder.loadTexts: sqlServerReplicationMergeEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerReplicationMergeEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:Replication Merge' object.")
ssrmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmInstance.setStatus('current')
if mibBuilder.loadTexts: ssrmInstance.setDescription('Instance name.')
ssrmConflictsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmConflictsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrmConflictsPerSec.setDescription('Number of conflicts per second that occurred in the Publisher/Subscriber upload and download. This value should always be zero. A nonzero value may require notifying the losing side, overriding the conflict, and so on.')
ssrmDownloadedChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmDownloadedChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrmDownloadedChangesPerSec.setDescription('Number of rows per second merged (inserted, updated, and deleted) from the Publisher to the Subscriber.')
ssrmUploadedChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmUploadedChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: ssrmUploadedChangesPerSec.setDescription('Number of rows per second merged (inserted, updated, and deleted) from the Subscriber to the Publisher.')
sqlServerSQLErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38), )
if mibBuilder.loadTexts: sqlServerSQLErrorsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerSQLErrorsTable.setDescription('Statistics about errors in SQL Server')
sqlServerSQLErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sseInstance"))
if mibBuilder.loadTexts: sqlServerSQLErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerSQLErrorsEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQL Errors' object.")
sseInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseInstance.setStatus('current')
if mibBuilder.loadTexts: sseInstance.setDescription('Instance name.')
sseErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: sseErrorsPerSec.setDescription('Number of errors/sec')
sqlServerSQLStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39), )
if mibBuilder.loadTexts: sqlServerSQLStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerSQLStatisticsTable.setDescription("The SQL Statistics object in Microsoft SQL Server provides counters to monitor compilation and the type of requests sent to an instance of SQL Server. Monitoring the number of query compilations and recompilations and the number of batches received by an instance of SQL Server gives you an indication of how quickly SQL Server is processing user queries and how effectively the query optimizer is processing the queries. Compilation is a significant part of a query's turnaround time. The objective of the cache is to reduce compilation by storing compiled queries for later reuse, thus eliminating the need to recompile queries when later executed. However, each unique query must be compiled at least once. Query recompilations can be caused by the following factors: Schema changes, including base schema changes such as adding columns or indexes to a table, or statistics schema changes such as inserting or deleting a significant number of rows from a table; Environment (SET statement) changes. Changes in session settings such as ANSI_PADDING or ANSI_NULLS can cause a query to be recompiled.")
sqlServerSQLStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerSQLStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerSQLStatisticsEntry.setDescription('Performance information for one SQL Server name instance.')
ssssAutoParamAttemptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssAutoParamAttemptsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssssAutoParamAttemptsPerSec.setDescription('Number of auto-parameterization attempts.')
ssssBatchRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssBatchRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssssBatchRequestsPerSec.setDescription('Number of SQL batch requests received by server.')
ssssFailedAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssFailedAutoParamsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssssFailedAutoParamsPerSec.setDescription('Number of failed auto-parameterizations.')
ssssSQLAttentionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSQLAttentionRate.setStatus('current')
if mibBuilder.loadTexts: ssssSQLAttentionRate.setDescription('Number of attentions per second.')
ssssSQLCompilationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSQLCompilationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssssSQLCompilationsPerSec.setDescription('Number of SQL compilations.')
ssssSQLReCompilationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSQLReCompilationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssssSQLReCompilationsPerSec.setDescription('Number of SQL re-compiles.')
ssssSafeAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSafeAutoParamsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssssSafeAutoParamsPerSec.setDescription('Number of safe auto-parameterizations.')
ssssUnsafeAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssUnsafeAutoParamsPerSec.setStatus('current')
if mibBuilder.loadTexts: ssssUnsafeAutoParamsPerSec.setDescription('Number of unsafe auto-parameterizations.')
sqlServerTransactionsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40), )
if mibBuilder.loadTexts: sqlServerTransactionsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerTransactionsTable.setDescription('Statistics related to SQL Server transactions.')
sqlServerTransactionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerTransactionsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerTransactionsEntry.setDescription('Performance information for one SQL Server name instance.')
sstFreeSpaceInTempdbKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstFreeSpaceInTempdbKB.setStatus('current')
if mibBuilder.loadTexts: sstFreeSpaceInTempdbKB.setDescription('The free space in tempdb in KB.')
sstLongestTransactionRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstLongestTransactionRunningTime.setStatus('current')
if mibBuilder.loadTexts: sstLongestTransactionRunningTime.setDescription('The longest running time of any transcation in seconds.')
sstNonSnapshotVersionTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstNonSnapshotVersionTransactions.setStatus('current')
if mibBuilder.loadTexts: sstNonSnapshotVersionTransactions.setDescription('The total number of active non-snapshot transactions that generate version records.')
sstSnapshotTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstSnapshotTransactions.setStatus('current')
if mibBuilder.loadTexts: sstSnapshotTransactions.setDescription('The total number of active snapshot transactions.')
sstTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstTransactions.setStatus('current')
if mibBuilder.loadTexts: sstTransactions.setDescription('Number of transaction enlistments (local, dtc, bound all combined).')
sstUpdateSnapshotTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstUpdateSnapshotTransactions.setStatus('current')
if mibBuilder.loadTexts: sstUpdateSnapshotTransactions.setDescription('The total number of active snapshot transactions that do updates.')
sstUpdateConflictRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstUpdateConflictRatio.setStatus('current')
if mibBuilder.loadTexts: sstUpdateConflictRatio.setDescription('The fraction of update snapshot transactions that have update conflicts to the total number of update snapshot transactions.')
sstVersionCleanupRateKBPerS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionCleanupRateKBPerS.setStatus('current')
if mibBuilder.loadTexts: sstVersionCleanupRateKBPerS.setDescription('The version cleanup rate in KB per seconds.')
sstVersionGenerationRateKBPerS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionGenerationRateKBPerS.setStatus('current')
if mibBuilder.loadTexts: sstVersionGenerationRateKBPerS.setDescription('The version generation rate in KB per seconds.')
sstVersionStoreSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreSizeKB.setStatus('current')
if mibBuilder.loadTexts: sstVersionStoreSizeKB.setDescription('The size of the version store in KB.')
sstVersionStoreUnitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreUnitCount.setStatus('current')
if mibBuilder.loadTexts: sstVersionStoreUnitCount.setDescription('Number of unit in Version Store.')
sstVersionStoreUnitCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreUnitCreation.setStatus('current')
if mibBuilder.loadTexts: sstVersionStoreUnitCreation.setDescription('Creation of new unit in Version Store.')
sstVersionStoreUnitTruncation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreUnitTruncation.setStatus('current')
if mibBuilder.loadTexts: sstVersionStoreUnitTruncation.setDescription('Truncation of unit in Version Store.')
sqlServerUserSettableTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41), )
if mibBuilder.loadTexts: sqlServerUserSettableTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerUserSettableTable.setDescription('The User Settable object in Microsoft SQL Server allows you to create custom counter instances. Use custom counter instances to monitor aspects of the server not monitored by existing counters, such as components unique to your SQL Server database (for example, the number of customer orders logged or the product inventory). The SQL Server User Settable object contains 10 instances of the query counter: User counter 1 through User counter 10. These counters map to the SQL Server stored procedures sp_user_counter1 through sp_user_counter10. As these stored procedures are executed by user applications, the values set by the stored procedures are displayed in System Monitor (Performance Monitor in Microsoft Windows NT 4.0). A counter can monitor any single integer value (for example, a stored procedure that counts how many orders for a particular product have occurred in one day). See MSDN on how to enable the counter.')
sqlServerUserSettableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssusInstance"))
if mibBuilder.loadTexts: sqlServerUserSettableEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerUserSettableEntry.setDescription("Performance information for one particular SQL Server name instance of 'SQLServer:User Settable' object.")
ssusInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssusInstance.setStatus('current')
if mibBuilder.loadTexts: ssusInstance.setDescription('Instance name.')
ssusQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssusQuery.setStatus('current')
if mibBuilder.loadTexts: ssusQuery.setDescription('As defined by the user.')
sqlServerWaitStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42), )
if mibBuilder.loadTexts: sqlServerWaitStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sqlServerWaitStatisticsTable.setDescription('Wait Statistics')
sqlServerWaitStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sswsInstance"))
if mibBuilder.loadTexts: sqlServerWaitStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sqlServerWaitStatisticsEntry.setDescription("Performance information for one particular SQL Server name instance of 'Wait Statistics' object.")
sswsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsInstance.setStatus('current')
if mibBuilder.loadTexts: sswsInstance.setDescription('Instance name.')
sswsLockWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsLockWaits.setStatus('current')
if mibBuilder.loadTexts: sswsLockWaits.setDescription('Statistics for processes waiting on a lock.')
sswsLogBufferWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsLogBufferWaits.setStatus('current')
if mibBuilder.loadTexts: sswsLogBufferWaits.setDescription('Statistics for processes waiting for log buffer to be available.')
sswsLogWriteWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsLogWriteWaits.setStatus('current')
if mibBuilder.loadTexts: sswsLogWriteWaits.setDescription('Statistics for processes waiting for log buffer to be written.')
sswsMemoryGrantQueueWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsMemoryGrantQueueWaits.setStatus('current')
if mibBuilder.loadTexts: sswsMemoryGrantQueueWaits.setDescription('Statistics for processes waiting for memory grant to become available.')
sswsNetworkIOWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsNetworkIOWaits.setStatus('current')
if mibBuilder.loadTexts: sswsNetworkIOWaits.setDescription('Statistics relevant to wait on network IO.')
sswsNonPageLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsNonPageLatchWaits.setStatus('current')
if mibBuilder.loadTexts: sswsNonPageLatchWaits.setDescription('Statistics relevant to non-page latches.')
sswsPageIOLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsPageIOLatchWaits.setStatus('current')
if mibBuilder.loadTexts: sswsPageIOLatchWaits.setDescription('Statistics relevant to page IO latches.')
sswsPageLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsPageLatchWaits.setStatus('current')
if mibBuilder.loadTexts: sswsPageLatchWaits.setDescription('Statistics relevant to page latches.')
sswsThreadSafeMemoryObjectsWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsThreadSafeMemoryObjectsWaits.setStatus('current')
if mibBuilder.loadTexts: sswsThreadSafeMemoryObjectsWaits.setDescription('Statistics for processes waiting on thread-safe memory allocators.')
sswsTransactionOwnershipWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsTransactionOwnershipWaits.setStatus('current')
if mibBuilder.loadTexts: sswsTransactionOwnershipWaits.setDescription('Statistics relevant to processes synchronizing access to transaction.')
sswsWaitForTheWorker = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsWaitForTheWorker.setStatus('current')
if mibBuilder.loadTexts: sswsWaitForTheWorker.setDescription('Statistics relevant to processes waiting for worker to become available.')
sswsWorkspaceSyncronizationWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsWorkspaceSyncronizationWaits.setStatus('current')
if mibBuilder.loadTexts: sswsWorkspaceSyncronizationWaits.setDescription('Statistics relevant to processes synchronizing access to workspace.')
mibBuilder.exportSymbols("INFORMANT-SQLSERVER", mgpUniqueDocuments=mgpUniqueDocuments, aslqMapBytes=aslqMapBytes, msResults=msResults, mgpFilteredTextRate=mgpFilteredTextRate, ssbsEnqueuedMessagesTotal=ssbsEnqueuedMessagesTotal, ssbmProcedureCachePages=ssbmProcedureCachePages, mgDocumentEntries=mgDocumentEntries, asqdTotalRequests=asqdTotalRequests, ssbpFreeListRequestsPerSec=ssbpFreeListRequestsPerSec, ssrdDistDeliveredTransPerSec=ssrdDistDeliveredTransPerSec, ascCurrentHttpConnections=ascCurrentHttpConnections, ssamPagesAllocatedPerSec=ssamPagesAllocatedPerSec, sscmtCursorConversionRate=sscmtCursorConversionRate, asacDirectHitsPerSec=asacDirectHitsPerSec, ssgsSOAPSQLRequests=ssgsSOAPSQLRequests, ssesOLEDBCalls=ssesOLEDBCalls, aslqMapReads=aslqMapReads, assTotalMembers=assTotalMembers, asqCurrentWorkerThreadPool=asqCurrentWorkerThreadPool, mgServerObjectsCreated=mgServerObjectsCreated, sqlServerAccessMethodsTable=sqlServerAccessMethodsTable, aslqRowsCreated=aslqRowsCreated, mgSystemIOTrafficRate=mgSystemIOTrafficRate, sqlServerUserSettableEntry=sqlServerUserSettableEntry, aslUnlockRequestsPerSec=aslUnlockRequestsPerSec, ssmmOptimizerMemoryKB=ssmmOptimizerMemoryKB, sqlServerNameTable=sqlServerNameTable, sqlServerAccessMethodsEntry=sqlServerAccessMethodsEntry, ssbtMessageFragmentReceiveTotal=ssbtMessageFragmentReceiveTotal, asqFilteredRowsPerSec=asqFilteredRowsPerSec, ssbpFreeListEmptyPerSec=ssbpFreeListEmptyPerSec, aspaMemorySizeRows=aspaMemorySizeRows, microsoftSearchIndexCatalogEntry=microsoftSearchIndexCatalogEntry, asacTotalDirectHits=asacTotalDirectHits, aspaMemorySizeBytes=aspaMemorySizeBytes, asqIndexBytesPerSec=asqIndexBytesPerSec, mgpDocumentAdditions=mgpDocumentAdditions, aspMemorySizeBytes=aspMemorySizeBytes, mgStemmersCached=mgStemmersCached, sqlServerNameEntry=sqlServerNameEntry, ascTotalCompletions=ascTotalCompletions, aslqTotalBytes=aslqTotalBytes, ssamFreeSpacePageFetchesPerSec=ssamFreeSpacePageFetchesPerSec, ssdLogFileSUsedSizeKB=ssdLogFileSUsedSizeKB, asqdTotalBytes=asqdTotalBytes, sqlServerWaitStatisticsEntry=sqlServerWaitStatisticsEntry, ssamWorktablesFromCacheRatio=ssamWorktablesFromCacheRatio, mgpProcessedDocuments=mgpProcessedDocuments, ssesInstance=ssesInstance, asqTotalQueriesAnswered=asqTotalQueriesAnswered, sqlServerBackupDeviceEntry=sqlServerBackupDeviceEntry, aslqAnswerFromCacheFiltered=aslqAnswerFromCacheFiltered, ssbsEnqueuedTransportMsgsTotal=ssbsEnqueuedTransportMsgsTotal, ssrmConflictsPerSec=ssrmConflictsPerSec, analysisServerAggCache=analysisServerAggCache, analysisServerLastQuery=analysisServerLastQuery, ssbaStoredProceduresInvokedPerSec=ssbaStoredProceduresInvokedPerSec, msSucceededQueryRate=msSucceededQueryRate, aslqDSNUsed=aslqDSNUsed, sscmInstance=sscmInstance, sqlServerReplicationMergeEntry=sqlServerReplicationMergeEntry, ssbmPageLookupsPerSec=ssbmPageLookupsPerSec, sqlServerBackupDeviceTable=sqlServerBackupDeviceTable, ssgsTempTablesCreationRate=ssgsTempTablesCreationRate, mgpFileErrorsRate=mgpFileErrorsRate, aspRowsMergedPerSec=aspRowsMergedPerSec, ssdPercentLogUsed=ssdPercentLogUsed, ssdDBCCLogicalScanBytesPerSec=ssdDBCCLogicalScanBytesPerSec, ssbsForwardedMsgByteTotal=ssbsForwardedMsgByteTotal, msFailedQueries=msFailedQueries, ssamForwardedRecordsPerSec=ssamForwardedRecordsPerSec, mgpDocumentDeletes=mgpDocumentDeletes, mgpDocumentDeleteRate=mgpDocumentDeleteRate, asacMissesPerSec=asacMissesPerSec, aspiTotalPartitions=aspiTotalPartitions, mgpDocumentsInProgress=mgpDocumentsInProgress, ssbmAWEWriteMapsPerSec=ssbmAWEWriteMapsPerSec, sqlServerDatabasesTable=sqlServerDatabasesTable, ssbaInstance=ssbaInstance, ssbtReceiveIOBytesTotal=ssbtReceiveIOBytesTotal, aslqDataReads=aslqDataReads, ssamUsedLeafPageCookie=ssamUsedLeafPageCookie, mgpAccessedFiles=mgpAccessedFiles, mgExtNotificationsRate=mgExtNotificationsRate, analysisServerProcAggs=analysisServerProcAggs, msicNumberOfPropagations=msicNumberOfPropagations, mgServersCurrentlyUnavailable=mgServersCurrentlyUnavailable, mgpAdaptiveCrawlErrors=mgpAdaptiveCrawlErrors, asqQueriesFromFilePerSec=asqQueriesFromFilePerSec, ssrlLogreaderDeliveryLatency=ssrlLogreaderDeliveryLatency, sstVersionStoreUnitTruncation=sstVersionStoreUnitTruncation, ssamAUCleanupBatchesPerSec=ssamAUCleanupBatchesPerSec, ssbsDialogTimerEventCount=ssbsDialogTimerEventCount, sslkLockWaitTimeMs=sslkLockWaitTimeMs, ssrmInstance=ssrmInstance, aspTotalPartitions=aspTotalPartitions, sqlServerBrokerStatisticsTable=sqlServerBrokerStatisticsTable, mgpAccessedHTTP=mgpAccessedHTTP, mgDocumentsSuccessfulFilterRate=mgDocumentsSuccessfulFilterRate, ssbmReadaheadPagesPerSec=ssbmReadaheadPagesPerSec, ssltTotalLatchWaitTimeMs=ssltTotalLatchWaitTimeMs, asqdVLDMRequestsPerSec=asqdVLDMRequestsPerSec, ssbtSendIOBytesPerSec=ssbtSendIOBytesPerSec, sqlServerReplicationDistTable=sqlServerReplicationDistTable, asqdMembersPerSec=asqdMembersPerSec, mgWordBreakersCached=mgWordBreakersCached, ascCurrentAuthentications=ascCurrentAuthentications, ssbtPendingMsgFragsForRecvIO=ssbtPendingMsgFragsForRecvIO, msResultRate=msResultRate, ssdLogGrowths=ssdLogGrowths, mgThreadsInPlugIns=mgThreadsInPlugIns, ssbtReceiveIOBytesPerSec=ssbtReceiveIOBytesPerSec, aspCurrentThreadsMerging=aspCurrentThreadsMerging, aslqRowsFilterExcluded=aslqRowsFilterExcluded, asqTotalNetworkRoundTrips=asqTotalNetworkRoundTrips, asqAvgTimePerQuery=asqAvgTimePerQuery, mgpNotModified=mgpNotModified, mgNotificationSources=mgNotificationSources, ssdLogFlushWaitTime=ssdLogFlushWaitTime, aslqIndexBytes=aslqIndexBytes, sqlServerExecStatisticsTable=sqlServerExecStatisticsTable, ssusQuery=ssusQuery, mscQueriesRate=mscQueriesRate, sscmbtCursorWorktableUsage=sscmbtCursorWorktableUsage, mscInstance=mscInstance, ssamDroppedRowsetCleanupsPerSec=ssamDroppedRowsetCleanupsPerSec, mgExtNotificationsReceived=mgExtNotificationsReceived, aspaCurrentPartitions=aspaCurrentPartitions, sscmbtNumberOfActiveCursorPlans=sscmbtNumberOfActiveCursorPlans, sstVersionStoreUnitCreation=sstVersionStoreUnitCreation, sqlServerBufferPartitionTable=sqlServerBufferPartitionTable, asacTotalInserts=asacTotalInserts, sstVersionCleanupRateKBPerS=sstVersionCleanupRateKBPerS, ssgsHTTPAuthenticatedRequests=ssgsHTTPAuthenticatedRequests, sqlServerSQLStatisticsEntry=sqlServerSQLStatisticsEntry, mgActiveQueueLength=mgActiveQueueLength, ssgsSOAPWSDLRequests=ssgsSOAPWSDLRequests, ssamDeferredDroppedRowsets=ssamDeferredDroppedRowsets, asqCurrentPyramidOperations=asqCurrentPyramidOperations, mgpDocumentAddRate=mgpDocumentAddRate, ssesDistributedQuery=ssesDistributedQuery, aspiCurrentPartitions=aspiCurrentPartitions, ssbtSendIOLenAvg=ssbtSendIOLenAvg, sswsThreadSafeMemoryObjectsWaits=sswsThreadSafeMemoryObjectsWaits, msQueries=msQueries, asqCurrentThreads=asqCurrentThreads, asacTotalEvictions=asacTotalEvictions, ssmmLockBlocks=ssmmLockBlocks, ascTotalSuccesses=ascTotalSuccesses, microsoftGathererProjectsEntry=microsoftGathererProjectsEntry, ssamPageSplitsPerSec=ssamPageSplitsPerSec, sqlServerBufferManagerTable=sqlServerBufferManagerTable, sqlServerLatchesEntry=sqlServerLatchesEntry, microsoftSearchCatalogsEntry=microsoftSearchCatalogsEntry, asqTotalQueriesFromFile=asqTotalQueriesFromFile, mgpHTTPErrorsRate=mgpHTTPErrorsRate, ssdShrinkDataMovementBytesPerSec=ssdShrinkDataMovementBytesPerSec, ssbtPendingBytesForRecvIO=ssbtPendingBytesForRecvIO, mgpErrorRate=mgpErrorRate, ssmmTargetServerMemoryKB=ssmmTargetServerMemoryKB, aslLockGrantsPerSec=aslLockGrantsPerSec, assBytesPerSec=assBytesPerSec, mgpAdaptiveCrawlTotal=mgpAdaptiveCrawlTotal, ssrsInstance=ssrsInstance, ssgsSOAPSessionTerminateRequests=ssgsSOAPSessionTerminateRequests, sstNonSnapshotVersionTransactions=sstNonSnapshotVersionTransactions, mgpDocumentModifiesRate=mgpDocumentModifiesRate, sswsWorkspaceSyncronizationWaits=sswsWorkspaceSyncronizationWaits, ssamFailedAUCleanupBatchesPerSec=ssamFailedAUCleanupBatchesPerSec, sscmCachePages=sscmCachePages, mgPerformanceLevel=mgPerformanceLevel, ssdMirroringTotalBytesSent=ssdMirroringTotalBytesSent, analysisServerProcIndexes=analysisServerProcIndexes, msThreads=msThreads, ssbsForwardedPendingMsgBytes=ssbsForwardedPendingMsgBytes, mgpDocumentMoveAndRenameRate=mgpDocumentMoveAndRenameRate, msicBuildInProgress=msicBuildInProgress, asacCurrentBytes=asacCurrentBytes, sscmbtCursorCacheUseCountsPerSec=sscmbtCursorCacheUseCountsPerSec, mgpProcessedDocumentsRate=mgpProcessedDocumentsRate, ssbsBrokerTransactionRollbacks=ssbsBrokerTransactionRollbacks, sqlServerReplicateLogreaderTable=sqlServerReplicateLogreaderTable, ssbsTransportTimerEventCount=ssbsTransportTimerEventCount, ascTotalAuthentications=ascTotalAuthentications, ssgsNonAtomicYieldRate=ssgsNonAtomicYieldRate, mscFailedQueriesRate=mscFailedQueriesRate, aslqRowsFiltered=aslqRowsFiltered, sqlServerBrokerActivationTable=sqlServerBrokerActivationTable, ssamProbeScansPerSec=ssamProbeScansPerSec, ascCompletionsPerSec=ascCompletionsPerSec, aspCurrentThreads=aspCurrentThreads, ssdLogFlushWaitsPerSec=ssdLogFlushWaitsPerSec, asqDataBytesPerSec=asqDataBytesPerSec, ssdLogTruncations=ssdLogTruncations, sswsMemoryGrantQueueWaits=sswsMemoryGrantQueueWaits, asqIndexReadsPerSec=asqIndexReadsPerSec, sqlServerReplicationAgentsEntry=sqlServerReplicationAgentsEntry, mgThreadsBlockedDueToBackOff=mgThreadsBlockedDueToBackOff, ssssUnsafeAutoParamsPerSec=ssssUnsafeAutoParamsPerSec, asqdRequestsPerSec=asqdRequestsPerSec, mgAdminClients=mgAdminClients, ascCurrentConnectionsInProgress=ascCurrentConnectionsInProgress, mscQueries=mscQueries, ssmmMemoryGrantsOutstanding=ssmmMemoryGrantsOutstanding, aspaTempFileBytesWrittenPerSec=aspaTempFileBytesWrittenPerSec, mgIdleThreads=mgIdleThreads, ascCurrentAgents=ascCurrentAgents, sqlServerBufferManagerEntry=sqlServerBufferManagerEntry, ssdMirroringTransactionDelay=ssdMirroringTransactionDelay, sqlServerCacheManagerTable=sqlServerCacheManagerTable, mgpStartedDocuments=mgpStartedDocuments, mgFilterProcessCreated=mgFilterProcessCreated, ssamWorktablesCreatedPerSec=ssamWorktablesCreatedPerSec, ssdMirroringPagesSentPerSec=ssdMirroringPagesSentPerSec, sslkLockRequestsPerSec=sslkLockRequestsPerSec, mgpAdaptiveCrawlExcludes=mgpAdaptiveCrawlExcludes, asacInsertsPerSec=asacInsertsPerSec, aspRowsCreatedPerSec=aspRowsCreatedPerSec, mgFilterProcesses=mgFilterProcesses, ssbmPageReadsPerSec=ssbmPageReadsPerSec, asqBytesSentPerSec=asqBytesSentPerSec, ssbsEnqueuedMessagesPerSec=ssbsEnqueuedMessagesPerSec, mscUniqueKeys=mscUniqueKeys, mscPersistentIndexes=mscPersistentIndexes, ssdMirroringAcksReceivedPerSec=ssdMirroringAcksReceivedPerSec, mgpFileErrors=mgpFileErrors, mgDocumentsFilteredRate=mgDocumentsFilteredRate, ssbmPageLifeExpectancy=ssbmPageLifeExpectancy, msicDocumentsFiltered=msicDocumentsFiltered, asqPyramidOperationsPerSec=asqPyramidOperationsPerSec, aspaRowsCreatedPerSec=aspaRowsCreatedPerSec, ssbtReceiveIOsPerSec=ssbtReceiveIOsPerSec, sqlServerBrokerActivationEntry=sqlServerBrokerActivationEntry, asacTotalFilterHits=asacTotalFilterHits, ssrdInstance=ssrdInstance, msicPersistentIndexes=msicPersistentIndexes, mgNotificationsRate=mgNotificationsRate, ssgsLogoutsPerSec=ssgsLogoutsPerSec, aslLockDenialsPerSec=aslLockDenialsPerSec, ssrlLogreaderDeliveredCmdsPerSec=ssrlLogreaderDeliveredCmdsPerSec, ascFailuresPerSec=ascFailuresPerSec, mgpRetries=mgpRetries, ssamPageDeallocationsPerSec=ssamPageDeallocationsPerSec, ssbmAWEStolenMapsPerSec=ssbmAWEStolenMapsPerSec, asacDirectHitRatio=asacDirectHitRatio, sqlServerTransactionsEntry=sqlServerTransactionsEntry, aspaTempFileRowsWrittenPerSec=aspaTempFileRowsWrittenPerSec, asqFilterRowsExcludedPerSec=asqFilterRowsExcludedPerSec, ssbaTaskLimitReached=ssbaTaskLimitReached, mgpFilteredHTMLRate=mgpFilteredHTMLRate, sslkLockTimeoutsTimeoutGT0PerSec=sslkLockTimeoutsTimeoutGT0PerSec, ssssSQLCompilationsPerSec=ssssSQLCompilationsPerSec, aslqDataAvgBytesPerRow=aslqDataAvgBytesPerRow, ssbtMsgFragmentRecvSizeAvg=ssbtMsgFragmentRecvSizeAvg)
mibBuilder.exportSymbols("INFORMANT-SQLSERVER", ssraRunning=ssraRunning, mgpDocumentMovesPerRenames=mgpDocumentMovesPerRenames, asqTotalQueriesRequested=asqTotalQueriesRequested, msicUniqueKeys=msicUniqueKeys, ssbsForwardedMsgDiscardedTotal=ssbsForwardedMsgDiscardedTotal, ssbsForwardedMsgsDiscardedPerSec=ssbsForwardedMsgsDiscardedPerSec, ssrmUploadedChangesPerSec=ssrmUploadedChangesPerSec, sqlServerReplicateLogreaderEntry=sqlServerReplicateLogreaderEntry, ssesDTCCalls=ssesDTCCalls, aslqRowsFilterIncluded=aslqRowsFilterIncluded, mgpDocumentModifies=mgpDocumentModifies, ssltAverageLatchWaitTimeMs=ssltAverageLatchWaitTimeMs, ascTotalFailures=ascTotalFailures, asqTotalBytesSent=asqTotalBytesSent, ssamSkippedGhostedRecordsPerSec=ssamSkippedGhostedRecordsPerSec, asqCurrentWorkerThreadsActive=asqCurrentWorkerThreadsActive, aslCurrentLockWaits=aslCurrentLockWaits, ssdBackupPerRestoreThroughputPerSec=ssdBackupPerRestoreThroughputPerSec, aspFileBytesWrittenPerSec=aspFileBytesWrittenPerSec, sslkNumberOfDeadlocksPerSec=sslkNumberOfDeadlocksPerSec, ssbmCheckpointPagesPerSec=ssbmCheckpointPagesPerSec, aslqRowsRead=aslqRowsRead, mgpIterateHistoryInProgressFlag=mgpIterateHistoryInProgressFlag, ssamIndexSearchesPerSec=ssamIndexSearchesPerSec, mgFilteringThreads=mgFilteringThreads, ssbmStolenPages=ssbmStolenPages, aslCurrentLatchWaits=aslCurrentLatchWaits, ssdLogShrinks=ssdLogShrinks, mgpHTTPErrors=mgpHTTPErrors, analysisServerConnection=analysisServerConnection, mgpAdaptiveCrawlErrorSamples=mgpAdaptiveCrawlErrorSamples, ssbtPendingMsgFragsForSendIO=ssbtPendingMsgFragsForSendIO, asqdTotalMembers=asqdTotalMembers, ssssSQLAttentionRate=ssssSQLAttentionRate, mgpAccessedFileRate=mgpAccessedFileRate, mgThreadsAccessingNetwork=mgThreadsAccessingNetwork, mgpFilteredOffice=mgpFilteredOffice, ascRequestsPerSec=ascRequestsPerSec, aslqTotalReads=aslqTotalReads, msFailedQueryRate=msFailedQueryRate, mgpInstance=mgpInstance, asqDataReadsPerSec=asqDataReadsPerSec, sqlServerMemoryManagerEntry=sqlServerMemoryManagerEntry, ssbaTaskLimitReachedPerSec=ssbaTaskLimitReachedPerSec, aslqQueryNum=aslqQueryNum, ssdTransactionsPerSec=ssdTransactionsPerSec, asqTotalRowsSent=asqTotalRowsSent, mgpFilteringDocuments=mgpFilteringDocuments, mgReasonToBackOff=mgReasonToBackOff, aslqIndexReads=aslqIndexReads, sqlServerCacheManagerEntry=sqlServerCacheManagerEntry, mgHeartbeatsRate=mgHeartbeatsRate, ssbmTotalPages=ssbmTotalPages, aspCurrentThreadsWriting=aspCurrentThreadsWriting, sswsLogWriteWaits=sswsLogWriteWaits, ssbsEnqueuedLocalMessagesTotal=ssbsEnqueuedLocalMessagesTotal, ssmmSQLCacheMemoryKB=ssmmSQLCacheMemoryKB, ssmmTotalServerMemoryKB=ssmmTotalServerMemoryKB, ssamScanPointRevalidationsPerSec=ssamScanPointRevalidationsPerSec, asqRowsSentPerSec=asqRowsSentPerSec, sslkAverageWaitTimeMs=sslkAverageWaitTimeMs, ssbsSQLSENDTotal=ssbsSQLSENDTotal, microsoftSearchCatalogsTable=microsoftSearchCatalogsTable, ssbaTasksStartedPerSec=ssbaTasksStartedPerSec, ssbtMessageFragmentSendTotal=ssbtMessageFragmentSendTotal, ssssBatchRequestsPerSec=ssssBatchRequestsPerSec, mscCatalogSizeMBytes=mscCatalogSizeMBytes, ssbmLazyWritesPerSec=ssbmLazyWritesPerSec, ssmmLockMemoryKB=ssmmLockMemoryKB, ascSuccessesPerSec=ascSuccessesPerSec, ssbtMessageFragmentSendsPerSec=ssbtMessageFragmentSendsPerSec, asqdTotalVLDMRequests=asqdTotalVLDMRequests, analysisServerQuery=analysisServerQuery, assServerUptime=assServerUptime, ssamMixedPageAllocationsPerSec=ssamMixedPageAllocationsPerSec, mgAccessingRobotsTxtFile=mgAccessingRobotsTxtFile, sqlServerLocksEntry=sqlServerLocksEntry, aslCurrentLocks=aslCurrentLocks, ssesExtendedProcedures=ssesExtendedProcedures, ssrlLogreaderDelivereTransPerSec=ssrlLogreaderDelivereTransPerSec, ssbsForwardedMessagesTotal=ssbsForwardedMessagesTotal, mgServerObjects=mgServerObjects, ssbpInstance=ssbpInstance, ssusInstance=ssusInstance, sseErrorsPerSec=sseErrorsPerSec, asqdCurrentRequests=asqdCurrentRequests, sstTransactions=sstTransactions, mscNumberOfDocuments=mscNumberOfDocuments, ssbtSendIOsPerSec=ssbtSendIOsPerSec, mgpGathererPausedFlag=mgpGathererPausedFlag, mgpRecoveryInProgressFlag=mgpRecoveryInProgressFlag, assTotalProperties=assTotalProperties, mgpFilteredOfficeRate=mgpFilteredOfficeRate, ssbtPendingBytesForSendIO=ssbtPendingBytesForSendIO, ssbtCurrentBytesForRecvIO=ssbtCurrentBytesForRecvIO, ssbsForwardedMsgBytesPerSec=ssbsForwardedMsgBytesPerSec, ssamFailedLeafPageCookie=ssamFailedLeafPageCookie, asqQueriesAnsweredPerSec=asqQueriesAnsweredPerSec, ssdLogFileSSizeKB=ssdLogFileSSizeKB, ssdLogFlushesPerSec=ssdLogFlushesPerSec, ssbpFreePages=ssbpFreePages, ssmmMemoryGrantsPending=ssmmMemoryGrantsPending, sqlServerReplicateSnapshotTable=sqlServerReplicateSnapshotTable, sslkInstance=sslkInstance, sqlServerWaitStatisticsTable=sqlServerWaitStatisticsTable, ssdLogCacheReadsPerSec=ssdLogCacheReadsPerSec, aslqAnswerFromCacheDirect=aslqAnswerFromCacheDirect, assPropertiesPerSec=assPropertiesPerSec, aslqDataBytes=aslqDataBytes, sscmtAsyncPopulationCount=sscmtAsyncPopulationCount, ssrmDownloadedChangesPerSec=ssrmDownloadedChangesPerSec, sqlServerSQLStatisticsTable=sqlServerSQLStatisticsTable, mscSuccessfulQueriesRate=mscSuccessfulQueriesRate, msicWordlists=msicWordlists, ssbmPageWritesPerSec=ssbmPageWritesPerSec, mgpHistoryRecoveryProgress=mgpHistoryRecoveryProgress, sqlServerCursorManagerByTypeTable=sqlServerCursorManagerByTypeTable, ssmmConnectionMemoryKB=ssmmConnectionMemoryKB, sswsTransactionOwnershipWaits=sswsTransactionOwnershipWaits, asqQueriesFromCacheFilterPerSec=asqQueriesFromCacheFilterPerSec, analysisServerQueryDims=analysisServerQueryDims, ssbsForwardedPendingMsgCount=ssbsForwardedPendingMsgCount, aslqTimeMs=aslqTimeMs, PYSNMP_MODULE_ID=sqlServer, ssgsLogicalConnections=ssgsLogicalConnections, ssssAutoParamAttemptsPerSec=ssssAutoParamAttemptsPerSec, asqRowsReadPerSec=asqRowsReadPerSec, ssbmAWEUnmapPagesPerSec=ssbmAWEUnmapPagesPerSec, mscResults=mscResults, sscmbtActiveCursors=sscmbtActiveCursors, sscmCacheHitRatio=sscmCacheHitRatio, ssgsProcessesBlocked=ssgsProcessesBlocked, msCurrentConnections=msCurrentConnections, ssbmTargetPages=ssbmTargetPages, sqlServerReplicationAgentsTable=sqlServerReplicationAgentsTable, asqCurrentProcessThreadPool=asqCurrentProcessThreadPool, msicNumberOfDocuments=msicNumberOfDocuments, ssbdDeviceThroughputBytesPerSec=ssbdDeviceThroughputBytesPerSec, ssgsSOAPSessionInitiateRequests=ssgsSOAPSessionInitiateRequests, mgpDelayedDocuments=mgpDelayedDocuments, sqlServerExecStatisticsEntry=sqlServerExecStatisticsEntry, ssbsSQLSENDsPerSec=ssbsSQLSENDsPerSec, asqNetworkRoundTripsPerSec=asqNetworkRoundTripsPerSec, aspiTotalRows=aspiTotalRows, microsoftSearchIndexCatalogTable=microsoftSearchIndexCatalogTable, mgpFilteredHTML=mgpFilteredHTML, ssbtMsgFragmentSendSizeAvg=ssbtMsgFragmentSendSizeAvg, ssbmFreePages=ssbmFreePages, sscmbtInstance=sscmbtInstance, ssgsUserConnections=ssgsUserConnections, aspFileRowsWrittenPerSec=aspFileRowsWrittenPerSec, msicInstance=msicInstance, sstSnapshotTransactions=sstSnapshotTransactions, aspiRowsPerSec=aspiRowsPerSec, ssbtMessageFragmentReceivesPerSec=ssbtMessageFragmentReceivesPerSec, aspTotalRows=aspTotalRows, mgpRetriesRate=mgpRetriesRate, ssbsSQLRECEIVETotal=ssbsSQLRECEIVETotal, sstLongestTransactionRunningTime=sstLongestTransactionRunningTime, asqTotalQueriesFromCacheFiltered=asqTotalQueriesFromCacheFiltered, ssamWorkfilesCreatedPerSec=ssamWorkfilesCreatedPerSec, sswsWaitForTheWorker=sswsWaitForTheWorker, ssbmFreeListStallsPerSec=ssbmFreeListStallsPerSec, sqlServerDatabasesEntry=sqlServerDatabasesEntry, sswsLockWaits=sswsLockWaits, asacEvictionsPerSec=asacEvictionsPerSec, ssdBulkCopyRowsPerSec=ssdBulkCopyRowsPerSec, ssbdInstance=ssbdInstance, aslqDataAvgRowsPerRead=aslqDataAvgRowsPerRead, mgAllNotificationsReceived=mgAllNotificationsReceived, msicDocumentsInProgress=msicDocumentsInProgress, sqlServerCursorManagerTotalTable=sqlServerCursorManagerTotalTable, mgpAdaptiveCrawlAccepts=mgpAdaptiveCrawlAccepts, sscmCacheUseCountsPerSec=sscmCacheUseCountsPerSec, mscResultsRate=mscResultsRate, ssraInstance=ssraInstance, mgpStatusSuccess=mgpStatusSuccess, mgFilterObjects=mgFilterObjects, ssgsSOAPEmptyRequests=ssgsSOAPEmptyRequests, mgDelayedDocuments=mgDelayedDocuments, sswsLogBufferWaits=sswsLogBufferWaits, aspCurrentPartitions=aspCurrentPartitions, asqQueriesRequestedPerSec=asqQueriesRequestedPerSec, mgRobotsTxtRequests=mgRobotsTxtRequests, asqTotalPyramidOperations=asqTotalPyramidOperations, ssdMirroringTotalPagesSent=ssdMirroringTotalPagesSent, aspaRowsMergedPerSec=aspaRowsMergedPerSec, sstUpdateSnapshotTransactions=sstUpdateSnapshotTransactions, ssbtSendIOBytesTotal=ssbtSendIOBytesTotal, mgServersUnavailable=mgServersUnavailable, ssrdDistDeliveredCmdsPerSec=ssrdDistDeliveredCmdsPerSec, ssbmAWELookupMapsPerSec=ssbmAWELookupMapsPerSec, ssbtReceiveIOLenAvg=ssbtReceiveIOLenAvg, ssbtOpenConnectionCount=ssbtOpenConnectionCount, aslLockRequestsPerSec=aslLockRequestsPerSec, mgpAdaptiveCrawlFalsePositives=mgpAdaptiveCrawlFalsePositives, ssamFullScansPerSec=ssamFullScansPerSec, ssamRangeScansPerSec=ssamRangeScansPerSec, aspMemorySizeRows=aspMemorySizeRows, sqlServerTransactionsTable=sqlServerTransactionsTable, asqMapReadsPerSec=asqMapReadsPerSec, mgpURLsInHistory=mgpURLsInHistory, microsoftSearch=microsoftSearch, asacCurrentEntries=asacCurrentEntries, ssbmBufferCacheHitRatio=ssbmBufferCacheHitRatio, asacFilterHitsPerSec=asacFilterHitsPerSec, sqlServerBrokerStatisticsEntry=sqlServerBrokerStatisticsEntry, ssbsEnqueuedTransportMsgsPerSec=ssbsEnqueuedTransportMsgsPerSec, sqlServerBrokerTransportTable=sqlServerBrokerTransportTable, microsoftGathererProjectsTable=microsoftGathererProjectsTable, aspRowsReadPerSec=aspRowsReadPerSec, ssltLatchWaitsPerSec=ssltLatchWaitsPerSec, mgDocumentsSuccessfullyFiltered=mgDocumentsSuccessfullyFiltered, sswsPageLatchWaits=sswsPageLatchWaits, sswsNetworkIOWaits=sswsNetworkIOWaits, ssssFailedAutoParamsPerSec=ssssFailedAutoParamsPerSec, ssmmLockOwnerBlocks=ssmmLockOwnerBlocks, sqlServerReplicationDistEntry=sqlServerReplicationDistEntry, sswsPageIOLatchWaits=sswsPageIOLatchWaits, aslqDataAvgBytesPerRead=aslqDataAvgBytesPerRead, assMembersPerSec=assMembersPerSec, mscFailedQueries=mscFailedQueries, ssdMirroringBytesSentPerSec=ssdMirroringBytesSentPerSec, sqlServerMemoryManagerTable=sqlServerMemoryManagerTable, ssbtCurrentBytesForSendIO=ssbtCurrentBytesForSendIO, ssdLogCacheHitRatio=ssdLogCacheHitRatio, ssbmReservedPages=ssbmReservedPages, sqlServerNameIndex=sqlServerNameIndex, ssbmAWEUnmapCallsPerSec=ssbmAWEUnmapCallsPerSec, sqlServerBufferPartitionEntry=sqlServerBufferPartitionEntry, sslkLockTimeoutsPerSec=sslkLockTimeoutsPerSec, sqlServerNameInstance=sqlServerNameInstance, aslLatchWaitsPerSec=aslLatchWaitsPerSec, asqCurrentQueries=asqCurrentQueries, ascCurrentConnections=ascCurrentConnections, sqlServerLatchesTable=sqlServerLatchesTable, asqCurrentProcessThreadsActive=asqCurrentProcessThreadsActive, ssgsHTTPAnonymousRequests=ssgsHTTPAnonymousRequests, msicMergeProgress=msicMergeProgress, sstUpdateConflictRatio=sstUpdateConflictRatio, ssamFailedTreePageCookie=ssamFailedTreePageCookie, asacLookupsPerSec=asacLookupsPerSec, sqlServerCursorManagerTotalEntry=sqlServerCursorManagerTotalEntry, ssdReplTransRate=ssdReplTransRate, aslLockWaitsPerSec=aslLockWaitsPerSec, ssdBulkCopyThroughputPerSec=ssdBulkCopyThroughputPerSec, ssamExtentsAllocatedPerSec=ssamExtentsAllocatedPerSec, aspaTotalPartitions=aspaTotalPartitions, ssbtCurrentMsgFragsForSendIO=ssbtCurrentMsgFragsForSendIO, msicIndexSizeMBytes=msicIndexSizeMBytes, mgpChangedDocuments=mgpChangedDocuments, aspCurrentThreadsReading=aspCurrentThreadsReading, ssdMirroringTotalAcksReceived=ssdMirroringTotalAcksReceived, sstVersionGenerationRateKBPerS=sstVersionGenerationRateKBPerS)
mibBuilder.exportSymbols("INFORMANT-SQLSERVER", sscmbtCursorMemoryUsage=sscmbtCursorMemoryUsage, msActiveThreads=msActiveThreads, mgpFilteredText=mgpFilteredText, asacTotalMisses=asacTotalMisses, msQueryRate=msQueryRate, sqlServerSQLErrorsTable=sqlServerSQLErrorsTable, ssrdDistDeliveryLatency=ssrdDistDeliveryLatency, ssmmGrantedWorkspaceMemoryKB=ssmmGrantedWorkspaceMemoryKB, ssbsEnqueuedTransportMsgFragsPerSec=ssbsEnqueuedTransportMsgFragsPerSec, msicFilesToBeFiltered=msicFilesToBeFiltered, sqlServerReplicationMergeTable=sqlServerReplicationMergeTable, analysisServerLocks=analysisServerLocks, ssamUsedTreePageCookie=ssamUsedTreePageCookie, ssgsMarsDeadlocks=ssgsMarsDeadlocks, ssrlInstance=ssrlInstance, msicActiveDocuments=msicActiveDocuments, ssbsEnqueuedLocalMessagesPerSec=ssbsEnqueuedLocalMessagesPerSec, ssdReplPendingXacts=ssdReplPendingXacts, asacFilterHitRatio=asacFilterHitRatio, aslqAnswerFromFile=aslqAnswerFromFile, ssmmMaximumWorkspaceMemoryKB=ssmmMaximumWorkspaceMemoryKB, ssdInstance=ssdInstance, ssgsLoginsPerSec=ssgsLoginsPerSec, ssmmLockOwnerBlocksAllocated=ssmmLockOwnerBlocksAllocated, ssbmDatabasePages=ssbmDatabasePages, microsoftGatherer=microsoftGatherer, assTotalDimensions=assTotalDimensions, sswsInstance=sswsInstance, sqlServerSQLErrorsEntry=sqlServerSQLErrorsEntry, asqMapBytesPerSec=asqMapBytesPerSec, mgDocumentsFiltered=mgDocumentsFiltered, ssbaTasksRunning=ssbaTasksRunning, sscmbtCacheHitRatio=sscmbtCacheHitRatio, ssdLogBytesFlushedPerSec=ssdLogBytesFlushedPerSec, asqCurrentProcessThreadQueueLen=asqCurrentProcessThreadQueueLen, ssdMirroringTotalSends=ssdMirroringTotalSends, sscmbtCachedCursorCounts=sscmbtCachedCursorCounts, mgTimeOuts=mgTimeOuts, assTotalBytes=assTotalBytes, analysisServerProc=analysisServerProc, asacBytesAddedPerSec=asacBytesAddedPerSec, ssbsEnqueuedTransportMsgFragTot=ssbsEnqueuedTransportMsgFragTot, ssbsForwardedMessagesPerSec=ssbsForwardedMessagesPerSec, mgpSuccessRate=mgpSuccessRate, sstFreeSpaceInTempdbKB=sstFreeSpaceInTempdbKB, mgpAccessedHTTPRate=mgpAccessedHTTPRate, asqFilterRowsIncludedPerSec=asqFilterRowsIncludedPerSec, analysisServerStartup=analysisServerStartup, sscmCacheObjectCounts=sscmCacheObjectCounts, ascAuthenticationsPerSec=ascAuthenticationsPerSec, ssamAUCleanupsPerSec=ssamAUCleanupsPerSec, ssrsSnapshotDeliveredTransPerSec=ssrsSnapshotDeliveredTransPerSec, ssdDataFileSSizeKB=ssdDataFileSSizeKB, mgpWaitingDocuments=mgpWaitingDocuments, sqlServerGeneralStatisticsTable=sqlServerGeneralStatisticsTable, sswsNonPageLatchWaits=sswsNonPageLatchWaits, sstVersionStoreUnitCount=sstVersionStoreUnitCount, sqlServer=sqlServer, sqlServerGeneralStatisticsEntry=sqlServerGeneralStatisticsEntry, ascTotalRequests=ascTotalRequests, mscSuccessfulQueries=mscSuccessfulQueries, ssamFreeSpaceScansPerSec=ssamFreeSpaceScansPerSec, ssamTableLockEscalationsPerSec=ssamTableLockEscalationsPerSec, ssgsTransactions=ssgsTransactions, ssamDroppedRowsetsSkippedPerSec=ssamDroppedRowsetsSkippedPerSec, ssssSQLReCompilationsPerSec=ssssSQLReCompilationsPerSec, sstVersionStoreSizeKB=sstVersionStoreSizeKB, mgpStatusError=mgpStatusError, mgHeartbeats=mgHeartbeats, ssbaTasksAbortedPerSec=ssbaTasksAbortedPerSec, ssrsSnapshotDeliveredCmdsPerSec=ssrsSnapshotDeliveredCmdsPerSec, asacTotalLookups=asacTotalLookups, ssdMirroringSendsPerSec=ssdMirroringSendsPerSec, sscmbtCursorRequestsPerSec=sscmbtCursorRequestsPerSec, sqlServerReplicateSnapshotEntry=sqlServerReplicateSnapshotEntry, ssamDeferredDroppedAUs=ssamDeferredDroppedAUs, ssamExtentDeallocationsPerSec=ssamExtentDeallocationsPerSec, asqTotalQueriesFromCacheDirect=asqTotalQueriesFromCacheDirect, ssbsSQLRECEIVEsPerSec=ssbsSQLRECEIVEsPerSec, sqlServerUserSettableTable=sqlServerUserSettableTable, mgDocumentsDelayedRetry=mgDocumentsDelayedRetry, mgpDocumentsOnHold=mgpDocumentsOnHold, msSucceededQueries=msSucceededQueries, ssdActiveTransactions=ssdActiveTransactions, sqlServerLocksTable=sqlServerLocksTable, asqdBytesPerSec=asqdBytesPerSec, aslqDSNRequested=aslqDSNRequested, ssmmLockBlocksAllocated=ssmmLockBlocksAllocated, ssssSafeAutoParamsPerSec=ssssSafeAutoParamsPerSec, sscmtCursorFlushes=sscmtCursorFlushes, sqlServerBrokerTransportEntry=sqlServerBrokerTransportEntry, sslkLockWaitsPerSec=sslkLockWaitsPerSec, asqQueriesFromCacheDirectPerSec=asqQueriesFromCacheDirectPerSec, sqlServerCursorManagerByTypeEntry=sqlServerCursorManagerByTypeEntry, ssgsSOAPMethodInvocations=ssgsSOAPMethodInvocations, mgFilterProcessesMax=mgFilterProcessesMax, sseInstance=sseInstance)
