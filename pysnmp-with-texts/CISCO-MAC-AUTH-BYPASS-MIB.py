#
# PySNMP MIB module CISCO-MAC-AUTH-BYPASS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MAC-AUTH-BYPASS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:06:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Bits, Counter32, NotificationType, Integer32, TimeTicks, Counter64, ObjectIdentity, ModuleIdentity, Unsigned32, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Bits", "Counter32", "NotificationType", "Integer32", "TimeTicks", "Counter64", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Gauge32", "MibIdentifier")
DisplayString, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "MacAddress", "TextualConvention")
ciscoMabMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 654))
ciscoMabMIB.setRevisions(('2008-04-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMabMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoMabMIB.setLastUpdated('200804180000Z')
if mibBuilder.loadTexts: ciscoMabMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoMabMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-ibns@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoMabMIB.setDescription('MIB module for monitoring and configuring MAC Authentication Bypass (MAB) feature in the system. MAC Auth Bypass feature provides controlled access to devices based on their MAC addresses. MAB allows non-dot1x compliant end devices controlled access to network and also provides a replacement technology for VLAN Management Policy Server (VMPS) environments. MAB is also an intergal part of the Network Access Control (NAC) program which enables network access for the clients and subsequently carry out a posture assessment of these clients. MAC Authentication Bypass feature provides a mechanism that uses the MAC address of the connecting device to grant or deny network access for it.')
cmabNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 654, 0))
cmabMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 654, 1))
cmabMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 654, 2))
cmabInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 1))
cmabSession = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 2))
cmabIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 1, 1), )
if mibBuilder.loadTexts: cmabIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: cmabIfConfigTable.setDescription('A list of interfaces which supports MAC Authentication Bypass.')
cmabIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmabIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cmabIfConfigEntry.setDescription('Entry containing Mac Authentication Bypass configuration for a particular interface.')
cmabIfAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmabIfAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: cmabIfAuthEnabled.setDescription('Specifies if MAC Authentication Bypass feature is enabled on the interface.')
cmabIfAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("eap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmabIfAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cmabIfAuthMethod.setDescription('Specifies the authentication method used by MAC Authentication Bypass. radius(1) : communication with authentication server is performed via RADIUS messages. eap(2) : communication with authentication server is performed via EAP messages.')
cmabClientInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 2, 1), )
if mibBuilder.loadTexts: cmabClientInfoTable.setStatus('current')
if mibBuilder.loadTexts: cmabClientInfoTable.setDescription('A list of active MAC Authentication Bypass clients in the system. An entry exists for each MAC Authentication Bypass session in the system. An entry is deleted if the MAC Authentication Bypass session is removed from the system.')
cmabClientInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (1, "CISCO-MAC-AUTH-BYPASS-MIB", "cmabClientSessionId"))
if mibBuilder.loadTexts: cmabClientInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cmabClientInfoEntry.setDescription('Entry containing management information of MAC Authentication Bypass for a particular session.')
cmabClientSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cmabClientSessionId.setStatus('current')
if mibBuilder.loadTexts: cmabClientSessionId.setDescription('A unique identifier of the MAC Authentication Bypass session.')
cmabClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmabClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmabClientMacAddress.setDescription('The MAC address of the MAB client.')
cmabClientMabState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("initialize", 2), ("acquiring", 3), ("authorizing", 4), ("terminate", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmabClientMabState.setStatus('current')
if mibBuilder.loadTexts: cmabClientMabState.setDescription("Indicates the session state of the MAB state machine for the MAB client. other : None of the below. initialize : Initializing the authentication session. acquiring : Acquiring client's MAC address for the authentication process. authorizing: Authorization is in progress. terminate : Authorization is completed.")
cmabClientAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 654, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmabClientAuthStatus.setStatus('current')
if mibBuilder.loadTexts: cmabClientAuthStatus.setDescription('This object indicates whether the MAB client is authorized. authorized : the session is authorized. unauthorized: the session is not authorized.')
cmabMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 654, 2, 1))
cmabCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 654, 2, 1, 1)).setObjects(("CISCO-MAC-AUTH-BYPASS-MIB", "cmabIfConfigGroup"), ("CISCO-MAC-AUTH-BYPASS-MIB", "cmabClientInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmabCompliance = cmabCompliance.setStatus('current')
if mibBuilder.loadTexts: cmabCompliance.setDescription('The compliance statement for entities which implement CISCO-MAB-MIB.')
cmabMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 654, 2, 2))
cmabIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 654, 2, 2, 1)).setObjects(("CISCO-MAC-AUTH-BYPASS-MIB", "cmabIfAuthEnabled"), ("CISCO-MAC-AUTH-BYPASS-MIB", "cmabIfAuthMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmabIfConfigGroup = cmabIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cmabIfConfigGroup.setDescription('A collection of objects that provides per interface configuration of MAC Authentication Bypass feature.')
cmabClientInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 654, 2, 2, 2)).setObjects(("CISCO-MAC-AUTH-BYPASS-MIB", "cmabClientMacAddress"), ("CISCO-MAC-AUTH-BYPASS-MIB", "cmabClientMabState"), ("CISCO-MAC-AUTH-BYPASS-MIB", "cmabClientAuthStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmabClientInfoGroup = cmabClientInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cmabClientInfoGroup.setDescription('A collection of objects that provides information of MAC Authentication Bypass sessions in the devices.')
mibBuilder.exportSymbols("CISCO-MAC-AUTH-BYPASS-MIB", cmabSession=cmabSession, cmabClientAuthStatus=cmabClientAuthStatus, cmabIfAuthMethod=cmabIfAuthMethod, cmabMIBGroups=cmabMIBGroups, cmabIfConfigGroup=cmabIfConfigGroup, cmabClientInfoGroup=cmabClientInfoGroup, cmabClientMabState=cmabClientMabState, cmabMIBObjects=cmabMIBObjects, cmabIfConfigEntry=cmabIfConfigEntry, ciscoMabMIB=ciscoMabMIB, cmabClientMacAddress=cmabClientMacAddress, PYSNMP_MODULE_ID=ciscoMabMIB, cmabMIBConformance=cmabMIBConformance, cmabCompliance=cmabCompliance, cmabIfAuthEnabled=cmabIfAuthEnabled, cmabClientInfoTable=cmabClientInfoTable, cmabMIBCompliances=cmabMIBCompliances, cmabIfConfigTable=cmabIfConfigTable, cmabInterfaceConfig=cmabInterfaceConfig, cmabClientSessionId=cmabClientSessionId, cmabNotification=cmabNotification, cmabClientInfoEntry=cmabClientInfoEntry)
