#
# PySNMP MIB module Juniper-MROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-MROUTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:03:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
IANAipMRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipMRouteProtocol")
ipMRouteInterfaceEntry, ipMRouteEntry = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "ipMRouteInterfaceEntry", "ipMRouteEntry")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniInterfaceLocationValue, JuniInterfaceLocationType = mibBuilder.importSymbols("Juniper-TC", "JuniInterfaceLocationValue", "JuniInterfaceLocationType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Counter32, iso, IpAddress, Gauge32, ModuleIdentity, ObjectIdentity, Integer32, NotificationType, TimeTicks, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Counter32", "iso", "IpAddress", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Integer32", "NotificationType", "TimeTicks", "MibIdentifier", "Unsigned32")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
juniMRouterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65))
juniMRouterMIB.setRevisions(('2006-09-18 08:09', '2006-09-02 11:02', '2006-06-15 10:13', '2002-10-28 20:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniMRouterMIB.setRevisionsDescriptions(('Extended the ipMRouteInterfaceEntry Table, introduced traps and platform dependent juniMRoutePortTable.', 'Scalar attribute juniMcastRpfDisable is supported in this MIB module.', 'Extended the ipMRouteEntry Table.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniMRouterMIB.setLastUpdated('200609180809Z')
if mibBuilder.loadTexts: juniMRouterMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniMRouterMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniMRouterMIB.setDescription('The IP multicast router MIB for Juniper Networks enterprise.')
juniMRouterMIBObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1))
juniMcastTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 1))
juniMcastObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2))
juniMcastNotifyObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 3))
juniMcastNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 3, 1))
juniMcastRpfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1), )
if mibBuilder.loadTexts: juniMcastRpfRouteTable.setStatus('current')
if mibBuilder.loadTexts: juniMcastRpfRouteTable.setDescription('The table listing the static IP routes for the mcast RPF check.')
juniMcastRpfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1, 1), ).setIndexNames((0, "Juniper-MROUTER-MIB", "juniMcastRouteStaticDest"), (0, "Juniper-MROUTER-MIB", "juniMcastRouteStaticMask"))
if mibBuilder.loadTexts: juniMcastRpfRouteEntry.setStatus('current')
if mibBuilder.loadTexts: juniMcastRpfRouteEntry.setDescription('An entry representing the static IP route for the mcast RPF check.')
juniMcastRouteStaticDest = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: juniMcastRouteStaticDest.setStatus('current')
if mibBuilder.loadTexts: juniMcastRouteStaticDest.setDescription("The static group's destination IpAddress.")
juniMcastRouteStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: juniMcastRouteStaticMask.setStatus('current')
if mibBuilder.loadTexts: juniMcastRouteStaticMask.setDescription("The static group's destination IpAddress Mask.")
juniMcastRouteStaticRtPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniMcastRouteStaticRtPreference.setStatus('current')
if mibBuilder.loadTexts: juniMcastRouteStaticRtPreference.setDescription('The administrative distance metric.')
juniMcastRouteStaticRpfHop = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniMcastRouteStaticRpfHop.setStatus('current')
if mibBuilder.loadTexts: juniMcastRouteStaticRpfHop.setDescription('The next hop IP address.')
juniMcastRouteStaticTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniMcastRouteStaticTag.setStatus('current')
if mibBuilder.loadTexts: juniMcastRouteStaticTag.setDescription('The tag value to be associated.')
juniMcastRouteStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniMcastRouteStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniMcastRouteStaticRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniMcastRouteStaticRowStatus juniMcastRouteStaticDest juniMcastRouteStaticMask juniMcastRouteStaticRtPreference juniMcastRouteStaticRpfHop juniMcastRouteStaticTag ')
juniMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2), )
if mibBuilder.loadTexts: juniMRouteTable.setStatus('current')
if mibBuilder.loadTexts: juniMRouteTable.setDescription('The table containing the extended information of IP Multicast Route Entry')
juniMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1), )
ipMRouteEntry.registerAugmentions(("Juniper-MROUTER-MIB", "juniMRouteEntry"))
juniMRouteEntry.setIndexNames(*ipMRouteEntry.getIndexNames())
if mibBuilder.loadTexts: juniMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: juniMRouteEntry.setDescription('An entry representing the additional information of IP Multicast Route Entry')
juniMRouteAdmBwAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteAdmBwAdaptive.setStatus('current')
if mibBuilder.loadTexts: juniMRouteAdmBwAdaptive.setDescription('Indicates that bandwidth is measured. ')
juniMRouteAdmBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteAdmBw.setStatus('current')
if mibBuilder.loadTexts: juniMRouteAdmBw.setDescription('Multicast Admission Control bandwidth in bps.')
juniMRouteQosBwAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteQosBwAdaptive.setStatus('current')
if mibBuilder.loadTexts: juniMRouteQosBwAdaptive.setDescription('Indicates that qos bandwidth is measured. ')
juniMRouteQosBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteQosBw.setStatus('current')
if mibBuilder.loadTexts: juniMRouteQosBw.setDescription('QoS Adjustment bandwidth in bps. ')
juniMRouteIsEcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteIsEcmp.setStatus('current')
if mibBuilder.loadTexts: juniMRouteIsEcmp.setDescription('Indicates RPF route is an ECMP route.')
juniMRouteRpfDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteRpfDisabled.setStatus('current')
if mibBuilder.loadTexts: juniMRouteRpfDisabled.setDescription('Indicates that RPF check is disabled for this entry.')
juniMRouteOwnerProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 7), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteOwnerProtoType.setStatus('current')
if mibBuilder.loadTexts: juniMRouteOwnerProtoType.setDescription('Indicates the multicast protocol type.')
juniMRoutePktFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRoutePktFwd.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePktFwd.setDescription('Packets received that made it out on any egress.')
juniMRouteOifCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteOifCnt.setStatus('current')
if mibBuilder.loadTexts: juniMRouteOifCnt.setDescription('Indicates the OIF count.')
juniMcastRpfDisable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniMcastRpfDisable.setStatus('current')
if mibBuilder.loadTexts: juniMcastRpfDisable.setDescription(' Disable RPF check for the Group access list name. Null value for enabling RPF check for the access list. ')
juniMRouteInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 4), )
if mibBuilder.loadTexts: juniMRouteInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: juniMRouteInterfaceTable.setDescription('The (conceptual) table containing multicast routing information specific to interfaces.')
juniMRouteInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 4, 1), )
ipMRouteInterfaceEntry.registerAugmentions(("Juniper-MROUTER-MIB", "juniMRouteInterfaceEntry"))
juniMRouteInterfaceEntry.setIndexNames(*ipMRouteInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: juniMRouteInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: juniMRouteInterfaceEntry.setDescription('An entry (conceptual row) containing the multicast routing information for a particular interface.')
juniMRouteInterfaceActiveGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteInterfaceActiveGroups.setStatus('current')
if mibBuilder.loadTexts: juniMRouteInterfaceActiveGroups.setDescription('This indicates the total number of groups currently forwarded on the interface.')
juniMRouteInterfaceBlockedGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRouteInterfaceBlockedGroups.setStatus('current')
if mibBuilder.loadTexts: juniMRouteInterfaceBlockedGroups.setDescription('This indicates the total number of groups currently blocked on the interface.')
juniMroutePortLocationType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 5), JuniInterfaceLocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMroutePortLocationType.setStatus('current')
if mibBuilder.loadTexts: juniMroutePortLocationType.setDescription("Describes the interpretation of JuniInterfaceLocationValue object values into platform-dependent interface location components, e.g., 'slot.port' on an ERX.")
juniMRoutePortTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6), )
if mibBuilder.loadTexts: juniMRoutePortTable.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortTable.setDescription(' The (conceptual) table containing multicast routing information specific to the number of mroutes (across all VRs) , that have OIFs, on a port.')
juniMRoutePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1), ).setIndexNames((0, "Juniper-MROUTER-MIB", "juniMRoutePortLocationIndex"))
if mibBuilder.loadTexts: juniMRoutePortEntry.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortEntry.setDescription('An entry (conceptual row) containing the multicast routing information specific to the number of mroutes (across all VRs) , that have OIFs, on a port.')
juniMRoutePortLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1, 1), JuniInterfaceLocationValue())
if mibBuilder.loadTexts: juniMRoutePortLocationIndex.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortLocationIndex.setDescription('The value of a platform specific port location.')
juniMRoutePortMaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniMRoutePortMaxBw.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortMaxBw.setDescription('Maximum port admission-bandwidth-limit to be configured on the port.')
juniMRoutePortPriorityBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniMRoutePortPriorityBw.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortPriorityBw.setDescription('Maximum port priority-bandwidth-limit to be configured on the port.')
juniMRoutePortHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniMRoutePortHysteresis.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortHysteresis.setDescription('Hysteresis to be configured on the port. Applies to juniMRoutePortMaxBw and juniMRoutePortPriorityBw.')
juniMRoutePortAdmittedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRoutePortAdmittedBw.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortAdmittedBw.setDescription('Admitted Bandwidht on the port.')
juniMRoutePortSGCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniMRoutePortSGCount.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortSGCount.setDescription('Number of mroutes on this port.')
juniMRoutePortLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniMRoutePortLimit.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortLimit.setDescription('Limit on the number of mroutes, with the OIFs on the port, to be configured on the port .')
juniMRoutePortBwExceded = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 1, 1)).setObjects(("Juniper-MROUTER-MIB", "juniMRouteIfLocIndex"))
if mibBuilder.loadTexts: juniMRoutePortBwExceded.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortBwExceded.setDescription(' A juniMRoutePortBwExceded trap signifies the port max admission limit are exceded. This trap should be generated when the OIFs are blocked due to exceded admission limit on the port.')
juniMRoutePortBwReceded = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 1, 2)).setObjects(("Juniper-MROUTER-MIB", "juniMRouteIfLocIndex"))
if mibBuilder.loadTexts: juniMRoutePortBwReceded.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortBwReceded.setDescription(' A juniMRoutePortBwReceded trap signifies the port max admission limit are receded. This trap should be generated when the the port admission limits fall below the configured hysteresis value on the port.')
juniMRoutePortPriorityBwExceded = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 1, 3)).setObjects(("Juniper-MROUTER-MIB", "juniMRouteIfLocIndex"))
if mibBuilder.loadTexts: juniMRoutePortPriorityBwExceded.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortPriorityBwExceded.setDescription(' A juniMRoutePortPriorityBwExceded trap signifies the port priority admission limit are exceded. This trap should be generated when the OIFs are blocked due to exceded admission limit on the port.')
juniMRoutePortPriorityBwReceded = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 1, 4)).setObjects(("Juniper-MROUTER-MIB", "juniMRouteIfLocIndex"))
if mibBuilder.loadTexts: juniMRoutePortPriorityBwReceded.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortPriorityBwReceded.setDescription(' A juniMRoutePortPriorityReceded trap signifies the port priority admission limit are receded. This trap should be generated when the the port admission limits fall below the configured hysteresis value on the port.')
juniMRouteIfLocIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 1, 3, 1, 1), JuniInterfaceLocationValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: juniMRouteIfLocIndex.setStatus('current')
if mibBuilder.loadTexts: juniMRouteIfLocIndex.setDescription('The interface location on which the mrouter trap is generated.')
juniMcastConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2))
juniMcastCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 1))
juniMcastConfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 2))
juniMcastCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 1, 1)).setObjects(("Juniper-MROUTER-MIB", "juniMcastRpfRouteConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMcastCompliance = juniMcastCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniMcastCompliance.setDescription('Obsolete compliance statement for entities which implement the Juniper multicast MIB. This statement became obsolete when juniMRouteTable were added. ')
juniMcastCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 1, 2)).setObjects(("Juniper-MROUTER-MIB", "juniMcastRpfRouteConfGroup"), ("Juniper-MROUTER-MIB", "juniMRouteConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMcastCompliance2 = juniMcastCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniMcastCompliance2.setDescription('The compliance statement for entities which implement the Juniper multicast MIB. ')
juniMcastCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 1, 3)).setObjects(("Juniper-MROUTER-MIB", "juniMcastRpfRouteConfGroup"), ("Juniper-MROUTER-MIB", "juniMRouteConfGroup"), ("Juniper-MROUTER-MIB", "juniMcastGlobalConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMcastCompliance3 = juniMcastCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: juniMcastCompliance3.setDescription('The compliance statement for entities which implement the Juniper multicast MIB.This statement became obsolete when juniMRouteInterfaceTable, juniMRoutePortTable and mrouter traps were added.')
juniMcastCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 1, 4)).setObjects(("Juniper-MROUTER-MIB", "juniMcastRpfRouteConfGroup"), ("Juniper-MROUTER-MIB", "juniMRouteConfGroup"), ("Juniper-MROUTER-MIB", "juniMcastGlobalConfGroup"), ("Juniper-MROUTER-MIB", "juniMRoutePortConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMcastCompliance4 = juniMcastCompliance4.setStatus('current')
if mibBuilder.loadTexts: juniMcastCompliance4.setDescription('The compliance statement for entities which implement the Juniper multicast MIB.')
juniMcastRpfRouteConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 2, 1)).setObjects(("Juniper-MROUTER-MIB", "juniMcastRouteStaticRtPreference"), ("Juniper-MROUTER-MIB", "juniMcastRouteStaticRpfHop"), ("Juniper-MROUTER-MIB", "juniMcastRouteStaticTag"), ("Juniper-MROUTER-MIB", "juniMcastRouteStaticRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMcastRpfRouteConfGroup = juniMcastRpfRouteConfGroup.setStatus('current')
if mibBuilder.loadTexts: juniMcastRpfRouteConfGroup.setDescription('A collection of objects providing management of multicast RPF static routes of the product.')
juniMRouteConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 2, 2)).setObjects(("Juniper-MROUTER-MIB", "juniMRouteAdmBwAdaptive"), ("Juniper-MROUTER-MIB", "juniMRouteAdmBw"), ("Juniper-MROUTER-MIB", "juniMRouteQosBwAdaptive"), ("Juniper-MROUTER-MIB", "juniMRouteQosBw"), ("Juniper-MROUTER-MIB", "juniMRouteIsEcmp"), ("Juniper-MROUTER-MIB", "juniMRouteRpfDisabled"), ("Juniper-MROUTER-MIB", "juniMRouteOwnerProtoType"), ("Juniper-MROUTER-MIB", "juniMRoutePktFwd"), ("Juniper-MROUTER-MIB", "juniMRouteOifCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMRouteConfGroup = juniMRouteConfGroup.setStatus('current')
if mibBuilder.loadTexts: juniMRouteConfGroup.setDescription('A collection of objects providing extended information of IP Multicast Route Entry.')
juniMcastGlobalConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 2, 3)).setObjects(("Juniper-MROUTER-MIB", "juniMcastRpfDisable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMcastGlobalConfGroup = juniMcastGlobalConfGroup.setStatus('current')
if mibBuilder.loadTexts: juniMcastGlobalConfGroup.setDescription('A collection of global scalar objects providing extended information of IP Multicast Route Entry.')
juniMRoutePortConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 65, 2, 2, 4)).setObjects(("Juniper-MROUTER-MIB", "juniMRouteInterfaceActiveGroups"), ("Juniper-MROUTER-MIB", "juniMRouteInterfaceBlockedGroups"), ("Juniper-MROUTER-MIB", "juniMroutePortLocationType"), ("Juniper-MROUTER-MIB", "juniMRoutePortMaxBw"), ("Juniper-MROUTER-MIB", "juniMRoutePortPriorityBw"), ("Juniper-MROUTER-MIB", "juniMRoutePortHysteresis"), ("Juniper-MROUTER-MIB", "juniMRoutePortAdmittedBw"), ("Juniper-MROUTER-MIB", "juniMRoutePortSGCount"), ("Juniper-MROUTER-MIB", "juniMRoutePortLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniMRoutePortConfGroup = juniMRoutePortConfGroup.setStatus('current')
if mibBuilder.loadTexts: juniMRoutePortConfGroup.setDescription('A collection of objects providing extended information of IP Multicast Route Entry.')
mibBuilder.exportSymbols("Juniper-MROUTER-MIB", juniMRouteIsEcmp=juniMRouteIsEcmp, juniMcastRouteStaticRpfHop=juniMcastRouteStaticRpfHop, juniMcastGlobalConfGroup=juniMcastGlobalConfGroup, juniMcastCompliance=juniMcastCompliance, juniMRouteQosBw=juniMRouteQosBw, juniMRoutePortEntry=juniMRoutePortEntry, juniMRoutePortPriorityBwExceded=juniMRoutePortPriorityBwExceded, juniMcastRpfRouteEntry=juniMcastRpfRouteEntry, juniMcastObjects=juniMcastObjects, juniMRouteQosBwAdaptive=juniMRouteQosBwAdaptive, juniMRoutePortAdmittedBw=juniMRoutePortAdmittedBw, juniMRouteOifCnt=juniMRouteOifCnt, juniMcastRouteStaticDest=juniMcastRouteStaticDest, PYSNMP_MODULE_ID=juniMRouterMIB, juniMRouteRpfDisabled=juniMRouteRpfDisabled, juniMRoutePortLimit=juniMRoutePortLimit, juniMRoutePortMaxBw=juniMRoutePortMaxBw, juniMRoutePortSGCount=juniMRoutePortSGCount, juniMcastRouteStaticTag=juniMcastRouteStaticTag, juniMRoutePortBwExceded=juniMRoutePortBwExceded, juniMRoutePortConfGroup=juniMRoutePortConfGroup, juniMRouteAdmBwAdaptive=juniMRouteAdmBwAdaptive, juniMroutePortLocationType=juniMroutePortLocationType, juniMRoutePortTable=juniMRoutePortTable, juniMRouterMIBObject=juniMRouterMIBObject, juniMcastCompliance4=juniMcastCompliance4, juniMRouteAdmBw=juniMRouteAdmBw, juniMRoutePortBwReceded=juniMRoutePortBwReceded, juniMRouteIfLocIndex=juniMRouteIfLocIndex, juniMRouteInterfaceTable=juniMRouteInterfaceTable, juniMRouteOwnerProtoType=juniMRouteOwnerProtoType, juniMRouteInterfaceEntry=juniMRouteInterfaceEntry, juniMcastCompliances=juniMcastCompliances, juniMcastRouteStaticRowStatus=juniMcastRouteStaticRowStatus, juniMRoutePortPriorityBwReceded=juniMRoutePortPriorityBwReceded, juniMcastNotificationObjects=juniMcastNotificationObjects, juniMcastRpfDisable=juniMcastRpfDisable, juniMRoutePortLocationIndex=juniMRoutePortLocationIndex, juniMcastCompliance3=juniMcastCompliance3, juniMRouteEntry=juniMRouteEntry, juniMRouteTable=juniMRouteTable, juniMcastRouteStaticRtPreference=juniMcastRouteStaticRtPreference, juniMRoutePortHysteresis=juniMRoutePortHysteresis, juniMcastConformance=juniMcastConformance, juniMRoutePktFwd=juniMRoutePktFwd, juniMcastNotifyObject=juniMcastNotifyObject, juniMcastCompliance2=juniMcastCompliance2, juniMcastConfGroups=juniMcastConfGroups, juniMcastTraps=juniMcastTraps, juniMRouterMIB=juniMRouterMIB, juniMRoutePortPriorityBw=juniMRoutePortPriorityBw, juniMcastRpfRouteConfGroup=juniMcastRpfRouteConfGroup, juniMRouteInterfaceBlockedGroups=juniMRouteInterfaceBlockedGroups, juniMcastRpfRouteTable=juniMcastRpfRouteTable, juniMcastRouteStaticMask=juniMcastRouteStaticMask, juniMRouteConfGroup=juniMRouteConfGroup, juniMRouteInterfaceActiveGroups=juniMRouteInterfaceActiveGroups)
