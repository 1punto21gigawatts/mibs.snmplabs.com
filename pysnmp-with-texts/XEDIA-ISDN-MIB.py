#
# PySNMP MIB module XEDIA-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-ISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
dialCtlPeerCfgEntry, = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "dialCtlPeerCfgEntry")
isdnBasicRateEntry, isdnSignalingEntry = mibBuilder.importSymbols("ISDN-MIB", "isdnBasicRateEntry", "isdnSignalingEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, ObjectIdentity, ModuleIdentity, IpAddress, Bits, TimeTicks, NotificationType, Integer32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Bits", "TimeTicks", "NotificationType", "Integer32", "Unsigned32", "iso")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaIsdnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 37))
if mibBuilder.loadTexts: xediaIsdnMIB.setLastUpdated('9909032155Z')
if mibBuilder.loadTexts: xediaIsdnMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaIsdnMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaIsdnMIB.setDescription('This module defines additional objects for management of ISDN in Xedia devices, above and beyond what is defined in the standard rfc2127, and proposed drafts.')
xisdnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 37, 1))
xisdnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 37, 2))
xisdnTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 1), )
if mibBuilder.loadTexts: xisdnTable.setStatus('current')
if mibBuilder.loadTexts: xisdnTable.setDescription('A stupid SNMP construct.')
xisdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 1, 1), )
isdnBasicRateEntry.registerAugmentions(("XEDIA-ISDN-MIB", "xisdnEntry"))
xisdnEntry.setIndexNames(*isdnBasicRateEntry.getIndexNames())
if mibBuilder.loadTexts: xisdnEntry.setStatus('current')
if mibBuilder.loadTexts: xisdnEntry.setDescription('An entry containing additional management information applicable to an ISDN interface.')
xisdnLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xisdnLoopbackState.setStatus('current')
if mibBuilder.loadTexts: xisdnLoopbackState.setDescription('loopback status')
xisdnSignalingTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 4), )
if mibBuilder.loadTexts: xisdnSignalingTable.setStatus('current')
if mibBuilder.loadTexts: xisdnSignalingTable.setDescription('ISDN signaling table containing configuration and operational parameters for all ISDN signaling channels on this managed device.')
xisdnSignalingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 4, 1), )
isdnSignalingEntry.registerAugmentions(("XEDIA-ISDN-MIB", "xisdnSignalingEntry"))
xisdnSignalingEntry.setIndexNames(*isdnSignalingEntry.getIndexNames())
if mibBuilder.loadTexts: xisdnSignalingEntry.setStatus('current')
if mibBuilder.loadTexts: xisdnSignalingEntry.setDescription('An entry in the ISDN Signaling Table. To create a new entry, only isdnSignalingProtocol needs to be specified before isdnSignalingStatus can become active(1).')
isdnSignalingCallingAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 4, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isdnSignalingCallingAddress2.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: isdnSignalingCallingAddress2.setStatus('current')
if mibBuilder.loadTexts: isdnSignalingCallingAddress2.setDescription('The ISDN Address to be assigned to the second B channel. Obviously not the right way to do this.')
isdnEndpointSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isdnEndpointSpid.setReference('Bellcore SR-NWT-001953, Generic Guidelines for ISDN Terminal Equipment on Basic Access Interfaces, Chapter 8.5.1.')
if mibBuilder.loadTexts: isdnEndpointSpid.setStatus('current')
if mibBuilder.loadTexts: isdnEndpointSpid.setDescription('The Service profile IDentifier (SPID) information for this Terminal Endpoint. The SPID is composed of 9-20 numeric characters. This information has to be defined in addition to the local number for some switch protocol types, e.g. Bellcore NI-1 and NI-2. If this object is not required, it is a zero length string.')
isdnEndpointSpid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isdnEndpointSpid2.setReference('Bellcore SR-NWT-001953, Generic Guidelines for ISDN Terminal Equipment on Basic Access Interfaces, Chapter 8.5.1.')
if mibBuilder.loadTexts: isdnEndpointSpid2.setStatus('current')
if mibBuilder.loadTexts: isdnEndpointSpid2.setDescription('The Service profile IDentifier (SPID) information for this Terminal Endpoint. The SPID is composed of 9-20 numeric characters. This information has to be defined in addition to the local number for some switch protocol types, e.g. Bellcore NI-1 and NI-2. If this object is not required, it is a zero length string.')
xdialCtlPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 2), )
if mibBuilder.loadTexts: xdialCtlPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: xdialCtlPeerCfgTable.setDescription('A stupid SNMP construct.')
xdialCtlPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 2, 1), )
dialCtlPeerCfgEntry.registerAugmentions(("XEDIA-ISDN-MIB", "xdialCtlPeerCfgEntry"))
xdialCtlPeerCfgEntry.setIndexNames(*dialCtlPeerCfgEntry.getIndexNames())
if mibBuilder.loadTexts: xdialCtlPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: xdialCtlPeerCfgEntry.setDescription('An entry containing additional management information applicable to an ISDN interface.')
xcallControl = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("connect", 2), ("disconnect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcallControl.setStatus('current')
if mibBuilder.loadTexts: xcallControl.setDescription('force outbound call')
xnailedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("b1", 2), ("b2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnailedUp.setStatus('current')
if mibBuilder.loadTexts: xnailedUp.setDescription('permanant (non-signalling) B channel connection')
xisdnVersion = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 37, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xisdnVersion.setStatus('current')
if mibBuilder.loadTexts: xisdnVersion.setDescription('the ISDN subsystem software version number')
xisdnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 37, 2, 1))
xisdnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 37, 2, 2))
xisdnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 37, 2, 1, 1)).setObjects(("XEDIA-ISDN-MIB", "xisdnAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xisdnCompliance = xisdnCompliance.setStatus('current')
if mibBuilder.loadTexts: xisdnCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xisdnAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 37, 2, 2, 1)).setObjects(("XEDIA-ISDN-MIB", "xisdnLoopbackState"), ("XEDIA-ISDN-MIB", "xcallControl"), ("XEDIA-ISDN-MIB", "xnailedUp"), ("XEDIA-ISDN-MIB", "xisdnVersion"), ("XEDIA-ISDN-MIB", "isdnSignalingCallingAddress2"), ("XEDIA-ISDN-MIB", "isdnEndpointSpid"), ("XEDIA-ISDN-MIB", "isdnEndpointSpid2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xisdnAllGroup = xisdnAllGroup.setStatus('current')
if mibBuilder.loadTexts: xisdnAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-ISDN-MIB", xisdnLoopbackState=xisdnLoopbackState, xisdnVersion=xisdnVersion, xisdnSignalingEntry=xisdnSignalingEntry, xdialCtlPeerCfgTable=xdialCtlPeerCfgTable, xisdnObjects=xisdnObjects, xisdnAllGroup=xisdnAllGroup, xisdnCompliances=xisdnCompliances, isdnEndpointSpid=isdnEndpointSpid, xisdnEntry=xisdnEntry, isdnEndpointSpid2=isdnEndpointSpid2, xisdnCompliance=xisdnCompliance, xisdnGroups=xisdnGroups, xnailedUp=xnailedUp, xcallControl=xcallControl, xediaIsdnMIB=xediaIsdnMIB, xdialCtlPeerCfgEntry=xdialCtlPeerCfgEntry, xisdnSignalingTable=xisdnSignalingTable, xisdnConformance=xisdnConformance, PYSNMP_MODULE_ID=xediaIsdnMIB, xisdnTable=xisdnTable, isdnSignalingCallingAddress2=isdnSignalingCallingAddress2)
