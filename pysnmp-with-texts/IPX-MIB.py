#
# PySNMP MIB module IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Counter32, Integer32, Unsigned32, MibIdentifier, Gauge32, iso, Bits, NotificationType, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Counter32", "Integer32", "Unsigned32", "MibIdentifier", "Gauge32", "iso", "Bits", "NotificationType", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "ObjectIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5))
ipxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 1))
ipxCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 2))
ipxForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 3))
ipxServices = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 4))
ipxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 5))
class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class PhysAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

ipxBasicSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1), )
if mibBuilder.loadTexts: ipxBasicSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysTable.setDescription('The IPX System table - basic information.')
ipxBasicSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1), ).setIndexNames((0, "IPX-MIB", "ipxBasicSysInstance"))
if mibBuilder.loadTexts: ipxBasicSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysEntry.setDescription('Each entry corresponds to one instance of IPX running on the system.')
ipxBasicSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds. This value may be written only when creating a new entry in the table.')
ipxBasicSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysExistState.setDescription("The validity of this entry in the IPX system table. Setting this field to off indicates that this entry may be deleted from the system table at the IPX implementation's discretion.")
ipxBasicSysNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 3), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysNetNumber.setDescription('The network number portion of the IPX address of this system.')
ipxBasicSysNode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysNode.setDescription('The node number portion of the IPX address of this system.')
ipxBasicSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysName.setDescription('The readable name for this system.')
ipxBasicSysInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInReceives.setDescription('The total number of IPX packets received, including those received in error.')
ipxBasicSysInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInHdrErrors.setDescription('The number of IPX packets discarded due to errors in their headers, including any IPX packet with a size less than the minimum of 30 bytes.')
ipxBasicSysInUnknownSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInUnknownSockets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInUnknownSockets.setDescription('The number of IPX packets discarded because the destination socket was not open.')
ipxBasicSysInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInDiscards.setDescription('The number of IPX packets received but discarded due to reasons other than those accounted for by ipxBasicSysInHdrErrors, ipxBasicSysInUnknownSockets, ipxAdvSysInDiscards, and ipxAdvSysInCompressDiscards.')
ipxBasicSysInBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInBadChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInBadChecksums.setDescription('The number of IPX packets received with incorrect checksums.')
ipxBasicSysInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInDelivers.setDescription('The total number of IPX packets delivered locally, including packets from local applications.')
ipxBasicSysNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysNoRoutes.setDescription('The number of times no route to a destination was found.')
ipxBasicSysOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutRequests.setDescription('The number of IPX packets supplied locally for transmission, not including any packets counted in ipxAdvForwPackets.')
ipxBasicSysOutMalformedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutMalformedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutMalformedRequests.setDescription('The number of IPX packets supplied locally that contained errors in their structure.')
ipxBasicSysOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutDiscards.setDescription('The number of outgoing IPX packets discarded due to reasons other than those accounted for in ipxBasicSysOutMalformedRequests, ipxAdvSysOutFiltered, and ipxAdvSysOutCompressDiscards.')
ipxBasicSysOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutPackets.setDescription('The total number of IPX packets transmitted.')
ipxBasicSysConfigSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysConfigSockets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysConfigSockets.setDescription('The configured maximum number of IPX sockets that may be open at one time.')
ipxBasicSysOpenSocketFails = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOpenSocketFails.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOpenSocketFails.setDescription('The number of IPX socket open calls which failed.')
ipxAdvSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2), )
if mibBuilder.loadTexts: ipxAdvSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysTable.setDescription('The IPX System table - advanced information.')
ipxAdvSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1), ).setIndexNames((0, "IPX-MIB", "ipxAdvSysInstance"))
if mibBuilder.loadTexts: ipxAdvSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysEntry.setDescription('Each entry corresponds to one instance of IPX running on the system.')
ipxAdvSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAdvSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds. This value may be written only when creating a new entry in the table.')
ipxAdvSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAdvSysMaxPathSplits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysMaxPathSplits.setDescription('The maximum number of paths with equal routing metric value which this instance of the IPX may split between when forwarding packets.')
ipxAdvSysMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 3), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAdvSysMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysMaxHops.setDescription('The maximum number of hops a packet may take.')
ipxAdvSysInTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysInTooManyHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysInTooManyHops.setDescription('The number of IPX packets discarded due to exceeding the maximum hop count.')
ipxAdvSysInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysInFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysInFiltered.setDescription('The number of incoming IPX packets discarded due to filtering.')
ipxAdvSysInCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysInCompressDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysInCompressDiscards.setDescription('The number of incoming IPX packets discarded due to decompression errors.')
ipxAdvSysNETBIOSPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysNETBIOSPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysNETBIOSPackets.setDescription('The number of NETBIOS packets received.')
ipxAdvSysForwPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysForwPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysForwPackets.setDescription('The number of IPX packets forwarded.')
ipxAdvSysOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysOutFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysOutFiltered.setDescription('The number of outgoing IPX packets discarded due to filtering.')
ipxAdvSysOutCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysOutCompressDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysOutCompressDiscards.setDescription('The number of outgoing IPX packets discarded due to compression errors.')
ipxAdvSysCircCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysCircCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysCircCount.setDescription('The number of circuits known to this instance of IPX.')
ipxAdvSysDestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysDestCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysDestCount.setDescription('The number of currently reachable destinations known to this instance of IPX.')
ipxAdvSysServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysServCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxAdvSysServCount.setDescription('The number of services known to this instance of IPX.')
ipxCircTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1), )
if mibBuilder.loadTexts: ipxCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircTable.setDescription('The Circuit table.')
ipxCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1), ).setIndexNames((0, "IPX-MIB", "ipxCircSysInstance"), (0, "IPX-MIB", "ipxCircIndex"))
if mibBuilder.loadTexts: ipxCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
ipxCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds. This value may be written only when creating a new entry in the table.')
ipxCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircIndex.setDescription('The identifier of this circuit, unique within the instance of IPX. This value may be written only when creating a new entry in the table.')
ipxCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircExistState.setDescription("The validity of this circuit entry. A circuit with this value set to off may be deleted from the table at the IPX implementation's discretion.")
ipxCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("sleeping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircOperState.setDescription('The operational state of the circuit.')
ipxCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircIfIndex.setDescription('The value of ifIndex for the interface used by this circuit. This value may be written only when creating a new entry in the table.')
ipxCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircName.setDescription('The readable name for the circuit.')
ipxCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("broadcast", 2), ("ptToPt", 3), ("wanRIP", 4), ("unnumberedRIP", 5), ("dynamic", 6), ("wanWS", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircType.setDescription('The type of the circuit.')
ipxCircDialName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircDialName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircDialName.setDescription('The symbolic name used to refernce the dialing information used to create this circuit. This value may be written only when creating a new entry in the table.')
ipxCircLocalMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircLocalMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircLocalMaxPacketSize.setDescription('The maximum size (including header), in bytes, that the system supports locally on this circuit.')
ipxCircCompressState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircCompressState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressState.setDescription('The compression state on this circuit. This value may be written only when creating a new entry in the table.')
ipxCircCompressSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 11), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircCompressSlots.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressSlots.setDescription('The number of compression slots available on this circuit. This value may be written only when creating a new entry in the table.')
ipxCircStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("current", 2), ("changed", 3), ("read", 4), ("reading", 5), ("write", 6), ("writing", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircStaticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircStaticStatus.setDescription('Indicates whether the information about static routes and services reached via this circuit matches that saved in permanent storage (current). Setting the value to write when it had the value changed will write the currently in use information to permanent storage, if supported. Setting the value to read when it had the value changed will replace any routes and services currently defined for the circuit with those read from permanent storage, if supported.')
ipxCircCompressedSent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircCompressedSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressedSent.setDescription('The number of compressed packets sent.')
ipxCircCompressedInitSent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircCompressedInitSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressedInitSent.setDescription('The number of compression initialization packets sent.')
ipxCircCompressedRejectsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircCompressedRejectsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressedRejectsSent.setDescription('The number of compressed packet rejected packets sent.')
ipxCircUncompressedSent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircUncompressedSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircUncompressedSent.setDescription('The number of packets sent without being compressed even though compression was turned on for this circuit.')
ipxCircCompressedReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircCompressedReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressedReceived.setDescription('The number of compressed packets received.')
ipxCircCompressedInitReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircCompressedInitReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressedInitReceived.setDescription('The number of compression initialization packets received.')
ipxCircCompressedRejectsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircCompressedRejectsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressedRejectsReceived.setDescription('The number of compressed packet rejected packets received.')
ipxCircUncompressedReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircUncompressedReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircUncompressedReceived.setDescription('The number of packets received without having been compressed even though compression was turned on for this circuit.')
ipxCircMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircMediaType.setDescription('The media type used on this circuit.')
ipxCircNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 22), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircNetNumber.setDescription('The IPX network number of this circuit. This value may be written only when creating a new entry in the table.')
ipxCircStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircStateChanges.setDescription('The number of times the circuit has changed state.')
ipxCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircInitFails.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircInitFails.setDescription('The number of times that initialization of this circuit has failed.')
ipxCircDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircDelay.setDescription('The period of time, in milliseconds, that it takes to transmit one byte of data, excluding protocol headers, to a destination on the other end of the circuit, if the circuit is free of other traffic.')
ipxCircThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircThroughput.setDescription('The amount of data, in bits per second, that may flow through the circuit if there is no other traffic.')
ipxCircNeighRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircNeighRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircNeighRouterName.setDescription('The name of the neighboring router on a WAN circuit.')
ipxCircNeighInternalNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 2, 1, 1, 28), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircNeighInternalNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircNeighInternalNetNum.setDescription('The internal network number of the neighboring router on a WAN circuit.')
ipxDestTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1), )
if mibBuilder.loadTexts: ipxDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestTable.setDescription('The Destination table contains information about all known destinations.')
ipxDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1), ).setIndexNames((0, "IPX-MIB", "ipxDestSysInstance"), (0, "IPX-MIB", "ipxDestNetNum"))
if mibBuilder.loadTexts: ipxDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestEntry.setDescription('Each entry corresponds to one destination.')
ipxDestSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds.')
ipxDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNetNum.setDescription('The IPX network number of the destination.')
ipxDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestProtocol.setDescription('The routing protocol from which knowledge of this destination was obtained.')
ipxDestTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestTicks.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestTicks.setDescription('The delay in ticks to reach this destination.')
ipxDestHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestHopCount.setDescription('The number of hops necessary to reach the destination.')
ipxDestNextHopCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestNextHopCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopCircIndex.setDescription('The unique identifier of the circuit used to reach the next hop.')
ipxDestNextHopNICAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestNextHopNICAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopNICAddress.setDescription('The NIC address of the next hop.')
ipxDestNextHopNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 1, 1, 8), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestNextHopNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopNetNum.setDescription('The IPX network number of the next hop.')
ipxStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2), )
if mibBuilder.loadTexts: ipxStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteTable.setDescription('The Static Routes table contains information about all destinations reached via statically configured routes.')
ipxStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2, 1), ).setIndexNames((0, "IPX-MIB", "ipxStaticRouteSysInstance"), (0, "IPX-MIB", "ipxStaticRouteCircIndex"), (0, "IPX-MIB", "ipxStaticRouteNetNum"))
if mibBuilder.loadTexts: ipxStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteEntry.setDescription('Each entry corresponds to one static route.')
ipxStaticRouteSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds.')
ipxStaticRouteCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteCircIndex.setDescription('The unique identifier of the circuit used to reach the first hop in the static route.')
ipxStaticRouteNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2, 1, 3), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteNetNum.setDescription("The IPX network number of the route's destination.")
ipxStaticRouteExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteExistState.setDescription("The validity of this static route. Entries with the value set to off may be deleted from the table at the implementation's discretion.")
ipxStaticRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteTicks.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteTicks.setDescription("The delay, in ticks, to reach the route's destination.")
ipxStaticRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticRouteHopCount.setDescription('The number of hops necessary to reach the destination.')
ipxServTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1), )
if mibBuilder.loadTexts: ipxServTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServTable.setDescription('The table of services, indexed by name and type.')
ipxServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1), ).setIndexNames((0, "IPX-MIB", "ipxServSysInstance"), (0, "IPX-MIB", "ipxServType"), (0, "IPX-MIB", "ipxServName"))
if mibBuilder.loadTexts: ipxServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServEntry.setDescription('Each entry corresponds to one service.')
ipxServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
ipxServType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServType.setDescription('The service type.')
ipxServName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServName.setDescription('The service name.')
ipxServProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServProtocol.setDescription('The protocol from which knowledge of this service was obtained.')
ipxServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 5), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServNetNum.setDescription('The IPX network number portion of the IPX address of the service.')
ipxServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServNode.setDescription('The node portion of the IPX address of the service.')
ipxServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServSocket.setDescription('The socket portion of the IPX address of the service.')
ipxServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServHopCount.setDescription('The number of hops to the service.')
ipxDestServTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2), )
if mibBuilder.loadTexts: ipxDestServTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServTable.setDescription('The table of services, indexed by address, name, and type.')
ipxDestServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1), ).setIndexNames((0, "IPX-MIB", "ipxDestServSysInstance"), (0, "IPX-MIB", "ipxDestServNetNum"), (0, "IPX-MIB", "ipxDestServNode"), (0, "IPX-MIB", "ipxDestServSocket"), (0, "IPX-MIB", "ipxDestServName"), (0, "IPX-MIB", "ipxDestServType"))
if mibBuilder.loadTexts: ipxDestServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServEntry.setDescription('Each entry corresponds to one service.')
ipxDestServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
ipxDestServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServNetNum.setDescription('The IPX network number portion of the IPX address of the service.')
ipxDestServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServNode.setDescription('The node portion of the IPX address of the service.')
ipxDestServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServSocket.setDescription('The socket portion of the IPX address of the service.')
ipxDestServName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServName.setDescription('The service name.')
ipxDestServType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServType.setDescription('The service type.')
ipxDestServProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServProtocol.setDescription('The protocol from which knowledge of this service was obtained.')
ipxDestServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestServHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestServHopCount.setDescription('The number of hops to the service.')
ipxStaticServTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3), )
if mibBuilder.loadTexts: ipxStaticServTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServTable.setDescription('The Static Services table contains information about all services reached via statically configured routes.')
ipxStaticServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1), ).setIndexNames((0, "IPX-MIB", "ipxStaticServSysInstance"), (0, "IPX-MIB", "ipxStaticServCircIndex"), (0, "IPX-MIB", "ipxStaticServName"), (0, "IPX-MIB", "ipxStaticServType"))
if mibBuilder.loadTexts: ipxStaticServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServEntry.setDescription('Each entry corresponds to one service.')
ipxStaticServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
ipxStaticServCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServCircIndex.setDescription('The circuit used to reach this service.')
ipxStaticServName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServName.setDescription('The service name.')
ipxStaticServType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServType.setDescription('The service type.')
ipxStaticServExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServExistState.setDescription("The validity of this static service. Entries with the value set to off may be deleted from the table at the implementation's discretion.")
ipxStaticServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 6), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServNetNum.setDescription('The IPX network number portion of the IPX address of the service.')
ipxStaticServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServNode.setDescription('The node portion of the IPX address of the service.')
ipxStaticServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServSocket.setDescription('The socket portion of the IPX address of the service.')
ipxStaticServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticServHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStaticServHopCount.setDescription('The number of hops to the service.')
ipxTrapCircuitDown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 5, 5) + (0,1)).setObjects(("IPX-MIB", "ipxCircSysInstance"), ("IPX-MIB", "ipxCircIndex"))
if mibBuilder.loadTexts: ipxTrapCircuitDown.setDescription('This trap signifies that the specified circuit has gone down.')
ipxTrapCircuitUp = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 5, 5) + (0,2)).setObjects(("IPX-MIB", "ipxCircSysInstance"), ("IPX-MIB", "ipxCircIndex"))
if mibBuilder.loadTexts: ipxTrapCircuitUp.setDescription('This trap signifies that the specified circuit has come up.')
mibBuilder.exportSymbols("IPX-MIB", mibDoc=mibDoc, ipxBasicSysOutPackets=ipxBasicSysOutPackets, ipxAdvSysMaxPathSplits=ipxAdvSysMaxPathSplits, ipxBasicSysInHdrErrors=ipxBasicSysInHdrErrors, ipxBasicSysName=ipxBasicSysName, ipxStaticServExistState=ipxStaticServExistState, PhysAddress=PhysAddress, ipxServProtocol=ipxServProtocol, ipxCircStateChanges=ipxCircStateChanges, ipxCircNeighInternalNetNum=ipxCircNeighInternalNetNum, ipxBasicSysInDiscards=ipxBasicSysInDiscards, ipxCircThroughput=ipxCircThroughput, ipxBasicSysNoRoutes=ipxBasicSysNoRoutes, ipxStaticRouteTicks=ipxStaticRouteTicks, ipxServNode=ipxServNode, ipxSystem=ipxSystem, ipxCircIndex=ipxCircIndex, ipxForwarding=ipxForwarding, ipx=ipx, ipxBasicSysOutDiscards=ipxBasicSysOutDiscards, ipxServName=ipxServName, ipxBasicSysConfigSockets=ipxBasicSysConfigSockets, ipxServEntry=ipxServEntry, ipxCircUncompressedReceived=ipxCircUncompressedReceived, ipxCircDelay=ipxCircDelay, ipxCircCompressSlots=ipxCircCompressSlots, ipxStaticServNode=ipxStaticServNode, ipxServType=ipxServType, ipxServTable=ipxServTable, ipxAdvSysDestCount=ipxAdvSysDestCount, ipxServHopCount=ipxServHopCount, ipxCircSysInstance=ipxCircSysInstance, ipxAdvSysServCount=ipxAdvSysServCount, ipxDestServTable=ipxDestServTable, ipxDestServName=ipxDestServName, ipxCircUncompressedSent=ipxCircUncompressedSent, ipxDestTable=ipxDestTable, ipxAdvSysMaxHops=ipxAdvSysMaxHops, ipxStaticRouteTable=ipxStaticRouteTable, ipxDestTicks=ipxDestTicks, ipxStaticRouteExistState=ipxStaticRouteExistState, ipxCircIfIndex=ipxCircIfIndex, ipxCircCompressedSent=ipxCircCompressedSent, ipxDestEntry=ipxDestEntry, ipxCircCompressedInitReceived=ipxCircCompressedInitReceived, ipxCircCompressedRejectsReceived=ipxCircCompressedRejectsReceived, ipxCircCompressedRejectsSent=ipxCircCompressedRejectsSent, ipxAdvSysInTooManyHops=ipxAdvSysInTooManyHops, ipxCircNeighRouterName=ipxCircNeighRouterName, ipxDestServNode=ipxDestServNode, ipxStaticRouteCircIndex=ipxStaticRouteCircIndex, ipxServices=ipxServices, ipxStaticRouteHopCount=ipxStaticRouteHopCount, ipxCircOperState=ipxCircOperState, ipxDestNextHopNetNum=ipxDestNextHopNetNum, ipxBasicSysInReceives=ipxBasicSysInReceives, ipxCircCompressedInitSent=ipxCircCompressedInitSent, ipxAdvSysInFiltered=ipxAdvSysInFiltered, ipxCircCompressState=ipxCircCompressState, ipxCircType=ipxCircType, ipxStaticServTable=ipxStaticServTable, ipxAdvSysOutCompressDiscards=ipxAdvSysOutCompressDiscards, ipxDestNextHopNICAddress=ipxDestNextHopNICAddress, ipxStaticServName=ipxStaticServName, ipxServSocket=ipxServSocket, ipxDestSysInstance=ipxDestSysInstance, ipxDestServSocket=ipxDestServSocket, ipxDestServHopCount=ipxDestServHopCount, ipxStaticRouteSysInstance=ipxStaticRouteSysInstance, ipxBasicSysNetNumber=ipxBasicSysNetNumber, ipxStaticServNetNum=ipxStaticServNetNum, ipxAdvSysNETBIOSPackets=ipxAdvSysNETBIOSPackets, ipxCircName=ipxCircName, ipxCircEntry=ipxCircEntry, ipxDestProtocol=ipxDestProtocol, ipxBasicSysTable=ipxBasicSysTable, ipxStaticServType=ipxStaticServType, ipxCircNetNumber=ipxCircNetNumber, ipxTrapCircuitUp=ipxTrapCircuitUp, ipxBasicSysNode=ipxBasicSysNode, ipxDestServNetNum=ipxDestServNetNum, ipxBasicSysOutMalformedRequests=ipxBasicSysOutMalformedRequests, ipxAdvSysTable=ipxAdvSysTable, ipxAdvSysCircCount=ipxAdvSysCircCount, ipxServSysInstance=ipxServSysInstance, ipxStaticRouteEntry=ipxStaticRouteEntry, ipxCircTable=ipxCircTable, ipxCircMediaType=ipxCircMediaType, ipxBasicSysInBadChecksums=ipxBasicSysInBadChecksums, ipxCircCompressedReceived=ipxCircCompressedReceived, ipxCircInitFails=ipxCircInitFails, ipxCircExistState=ipxCircExistState, ipxDestNextHopCircIndex=ipxDestNextHopCircIndex, ipxTrapCircuitDown=ipxTrapCircuitDown, ipxAdvSysEntry=ipxAdvSysEntry, ipxTraps=ipxTraps, ipxAdvSysForwPackets=ipxAdvSysForwPackets, ipxCircStaticStatus=ipxCircStaticStatus, ipxStaticServEntry=ipxStaticServEntry, ipxDestServProtocol=ipxDestServProtocol, ipxCircuit=ipxCircuit, ipxBasicSysOpenSocketFails=ipxBasicSysOpenSocketFails, ipxDestHopCount=ipxDestHopCount, ipxBasicSysExistState=ipxBasicSysExistState, ipxStaticServSocket=ipxStaticServSocket, ipxStaticServCircIndex=ipxStaticServCircIndex, ipxCircLocalMaxPacketSize=ipxCircLocalMaxPacketSize, ipxStaticServSysInstance=ipxStaticServSysInstance, ipxStaticRouteNetNum=ipxStaticRouteNetNum, ipxAdvSysInstance=ipxAdvSysInstance, novell=novell, ipxBasicSysOutRequests=ipxBasicSysOutRequests, ipxDestServSysInstance=ipxDestServSysInstance, ipxBasicSysInUnknownSockets=ipxBasicSysInUnknownSockets, ipxDestServEntry=ipxDestServEntry, ipxBasicSysInstance=ipxBasicSysInstance, ipxStaticServHopCount=ipxStaticServHopCount, ipxAdvSysOutFiltered=ipxAdvSysOutFiltered, ipxBasicSysEntry=ipxBasicSysEntry, ipxBasicSysInDelivers=ipxBasicSysInDelivers, ipxAdvSysInCompressDiscards=ipxAdvSysInCompressDiscards, ipxCircDialName=ipxCircDialName, NetNumber=NetNumber, ipxDestNetNum=ipxDestNetNum, ipxServNetNum=ipxServNetNum, ipxDestServType=ipxDestServType)
