#
# PySNMP MIB module HUAWEI-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, Unsigned32, Counter64, ObjectIdentity, iso, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, TimeTicks, Counter32, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Counter64", "ObjectIdentity", "iso", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter32", "Gauge32", "Bits")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
hwSecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165))
hwSecurityMIB.setRevisions(('2015-10-14 14:20', '2015-09-29 16:48', '2015-05-26 20:23', '2015-04-07 11:02', '2015-03-24 10:12', '2014-09-18 20:20', '2014-09-18 20:20', '2013-10-24 15:29', '2013-10-18 11:23', '2013-06-05 17:56', '2013-05-20 14:04', '2013-04-17 11:11', '2013-04-08 16:53', '2013-03-06 14:43', '2014-04-04 13:01', '2015-03-24 10:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwSecurityMIB.setRevisionsDescriptions(('Add hwAntiAttack hwAntiAttackObjectGroup hwBaseSecurityAntiAttackRateRising hwBaseSecurityAntiAttackRateResume for DFNS(LDM)', 'Add hwCfgApTrapObject hwCfgApTrap hwCfgApTrapFailAlarm for Virtual-Access', 'Add hwBaseArpVlanCarTrap', 'Add hwBaseSecurityTtlExpiredLoop', 'Add hwDapPortChange,hwDapMibPortChange for DAP', 'MIB file fo APP alarm and MADEFEND.', 'MIB file for NETSEC.', 'Add hwArpsLearnStrictCheck', 'Add webAuthServer(36) for hwAppliApperProtocol', 'Add the indispensable fields, e.g. chassisid and slotid for hwBaseSecurityUrpfDiscardedRateRising, hwBaseSecurityUrpfDiscardedRateResume, hwBaseSecurityTcpIpAttackDiscardedRateRising, hwBaseSecurityTcpIpAttackDiscardedRateResume, hwBaseSecurityMaDiscardedRateRising, hwBaseSecurityMaDiscardedRateResume, hwBaseSecurityApplicationApperceiveDiscardedRateRising and hwBaseSecurityApplicationApperceiveDiscardedRateResume', 'Add telnetv6Server(64),telnetv6Client(65),tftpv6Client(66),icmpv6(67),dnsv6(68),pimv6(69),sshv6Server(70),ospfv3(71),bgpv6(72),ftpv6Client(73),ftpv6Server(74) for hwAppliApperProtocol', 'Add the VB object hwBaseSecurityStormControlInterfaceVlanID for hwBaseSecurityStormControlInterface and hwBaseSecurityStormControlInterfaceResume', 'Add ipprotocol(19) for hwMaDefendProtocol .', 'SOC add IPv6', 'SOC modify SeqNo', 'CP-CAR Add hwAppliApperProtocolDescirption hwTcpIpDefendProtocolDescirption',))
if mibBuilder.loadTexts: hwSecurityMIB.setLastUpdated('201510141420Z')
if mibBuilder.loadTexts: hwSecurityMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwSecurityMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com")
if mibBuilder.loadTexts: hwSecurityMIB.setDescription('The private mib file includes the general extent information of the device.hwDatacomm(165).hwSecurityMIB.')
hwBaseSecurityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1))
hwLocalUrpf = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2))
hwLocalUrpfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1), )
if mibBuilder.loadTexts: hwLocalUrpfTable.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfTable.setDescription(' The table lists the information about local URPF Packets. ')
hwLocalUrpfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwLocalUrpfChassisId"), (0, "HUAWEI-SECURITY-MIB", "hwLocalUrpfSlotId"))
if mibBuilder.loadTexts: hwLocalUrpfEntry.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfEntry.setDescription(' The table lists the information about local URPF protection.')
hwLocalUrpfChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("clc1", 1), ("clc2", 2), ("clc3", 3), ("clc4", 4), ("clc5", 5), ("clc6", 6), ("clc7", 7), ("clc8", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLocalUrpfChassisId.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfChassisId.setDescription('The Data index of local URPF,the chassis ID indicates the slot on which chassis is configured with URPF.')
hwLocalUrpfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLocalUrpfSlotId.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfSlotId.setDescription('The Data index of local URPF,the slot configured with URPF.')
hwLocalUrpfCurrentRateLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUrpfCurrentRateLow.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfCurrentRateLow.setDescription('The lower 32 bits discard number during the interval of local URPF.unit(packet).')
hwLocalUrpfCurrentRateHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUrpfCurrentRateHigh.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfCurrentRateHigh.setDescription('The upper 32 bits discard number during the interval of local URPF.unit(packet).')
hwLocalUrpfNotifyEnabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1, 13), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUrpfNotifyEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfNotifyEnabledStatus.setDescription('The alarm state of local URPF.')
hwLocalUrpfRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUrpfRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfRateThreshold.setDescription("Local URPF's discard threshold during the configured interval.unit(packet).")
hwLocalUrpfRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUrpfRateInterval.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfRateInterval.setDescription('The detection interval of the local URPF.unit(s). ')
hwTcpIpDefend = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3))
hwTcpIpDefendTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1), )
if mibBuilder.loadTexts: hwTcpIpDefendTable.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendTable.setDescription('This table list the information about TCPIP protection.')
hwTcpIpDefendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwTcpIpDefendChassisId"), (0, "HUAWEI-SECURITY-MIB", "hwTcpIpDefendSlotId"), (0, "HUAWEI-SECURITY-MIB", "hwTcpIpDefendType"))
if mibBuilder.loadTexts: hwTcpIpDefendEntry.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendEntry.setDescription('This table list the information about TCPIP protection.')
hwTcpIpDefendChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("clc1", 1), ("clc2", 2), ("clc3", 3), ("clc4", 4), ("clc5", 5), ("clc6", 6), ("clc7", 7), ("clc8", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTcpIpDefendChassisId.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendChassisId.setDescription('The Data index of TCPIP protection,the chassis ID indicates the slot on which chassis is configured with TCPIP protection.')
hwTcpIpDefendSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTcpIpDefendSlotId.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendSlotId.setDescription('The Data index of TCPIP protection,the slot configured with TCPIP protection.')
hwTcpIpDefendType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("abnormalPacket", 1), ("udpPacket", 2), ("tcpSyn", 3), ("ipFragmentation", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTcpIpDefendType.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendType.setDescription('The Data index of TCPIP protection,the type of TCPIP protection.')
hwTcpIpDefendCurrentRateLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTcpIpDefendCurrentRateLow.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendCurrentRateLow.setDescription('The lower 32 bits discard number during the interval of TCPIP protection.unit(packet).')
hwTcpIpDefendCurrentRateHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTcpIpDefendCurrentRateHigh.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendCurrentRateHigh.setDescription('The upper 32 bits discard number during the interval of TCPIP protection.unit(packet).')
hwTcpIpDefendNotifyEnabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 13), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTcpIpDefendNotifyEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendNotifyEnabledStatus.setDescription('The alarm state of TCPIP protection.')
hwTcpIpDefendRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTcpIpDefendRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendRateThreshold.setDescription("TCPIP protection's discard threshold during the configured interval.unit(packet).")
hwTcpIpDefendRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTcpIpDefendRateInterval.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendRateInterval.setDescription('The detection interval of TCPIP protection.unit(s).')
hwTcpIpDefendProtocolDescirption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 3, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTcpIpDefendProtocolDescirption.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendProtocolDescirption.setDescription('The descirption of Protocol.')
hwMaDefend = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4))
hwMaDefendTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1), )
if mibBuilder.loadTexts: hwMaDefendTable.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendTable.setDescription('This table list the information about management and application protection.')
hwMaDefendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwMaDefendChassisId"), (0, "HUAWEI-SECURITY-MIB", "hwMaDefendSlotId"), (0, "HUAWEI-SECURITY-MIB", "hwMaDefendProtocol"))
if mibBuilder.loadTexts: hwMaDefendEntry.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendEntry.setDescription('This table list the information about management and application protection.')
hwMaDefendChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("clc1", 1), ("clc2", 2), ("clc3", 3), ("clc4", 4), ("clc5", 5), ("clc6", 6), ("clc7", 7), ("clc8", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMaDefendChassisId.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendChassisId.setDescription('The Data index of management and application protection,the chassis ID indicates the slot on which chassis is configured with management and application protection.')
hwMaDefendSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMaDefendSlotId.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendSlotId.setDescription('The Data index of management and application protection,the slots configured with management and application protection.')
hwMaDefendProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("ftp", 1), ("ssh", 2), ("snmp", 3), ("telnet", 4), ("tftp", 5), ("bgp", 6), ("ldp", 7), ("rsvp", 8), ("ospf", 9), ("rip", 10), ("isis", 11), ("pim", 12), ("ntp", 13), ("lspping", 14), ("dhcpc", 15), ("dhcpr", 16), ("tcp", 17), ("udp", 18), ("ipprotocol", 19)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMaDefendProtocol.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendProtocol.setDescription('The Data index of management and application protection,the protocols configured in management and application protection.')
hwMaDefendCurrentRateLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMaDefendCurrentRateLow.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendCurrentRateLow.setDescription('The lower 32 bits discard number during the interval of management and application protection.unit(packet).')
hwMaDefendCurrentRateHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMaDefendCurrentRateHigh.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendCurrentRateHigh.setDescription('The upper 32 bits discard number during the interval of management and application protection.unit(packet).')
hwMaDefendNotifyEnabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 13), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMaDefendNotifyEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendNotifyEnabledStatus.setDescription('The alarm state of management and application protection.')
hwMaDefendRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMaDefendRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendRateThreshold.setDescription('The discard threshold of management and application protection during the configured interval.unit(packet).')
hwMaDefendRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMaDefendRateInterval.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendRateInterval.setDescription('The detection interval of management and application protection. unit(s).')
hwApplicationApperceive = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5))
hwApplicationApperceiveTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1), )
if mibBuilder.loadTexts: hwApplicationApperceiveTable.setStatus('current')
if mibBuilder.loadTexts: hwApplicationApperceiveTable.setDescription('This table list the information about Application-Apperceive protection.')
hwApplicationApperceiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwAppliApperChassisId"), (0, "HUAWEI-SECURITY-MIB", "hwAppliApperSlotId"), (0, "HUAWEI-SECURITY-MIB", "hwAppliApperProtocol"))
if mibBuilder.loadTexts: hwApplicationApperceiveEntry.setStatus('current')
if mibBuilder.loadTexts: hwApplicationApperceiveEntry.setDescription('This table list the information about Application-Apperceive protection.')
hwAppliApperChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("clc1", 1), ("clc2", 2), ("clc3", 3), ("clc4", 4), ("clc5", 5), ("clc6", 6), ("clc7", 7), ("clc8", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAppliApperChassisId.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperChassisId.setDescription('The Data index of Application-Apperceive protection,the chassis ID indicates the slot on which chassis is configured with Application-Apperceive protection.')
hwAppliApperSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAppliApperSlotId.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperSlotId.setDescription('The Data index of Application-Apperceive protection,the slots configured with Application-Apperceive protection.')
hwAppliApperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74))).clone(namedValues=NamedValues(("ftpServer", 1), ("sshServer", 2), ("snmp", 3), ("telnetServer", 4), ("tftp", 5), ("bgp", 6), ("ldp", 7), ("rsvp", 8), ("ospf", 9), ("rip", 10), ("isis", 11), ("sftpSever", 12), ("icmp", 13), ("msdp", 14), ("pim", 15), ("ipv4Arp", 16), ("bpdu", 17), ("dhcp", 18), ("lacp", 19), ("ntp", 20), ("radius", 21), ("hwTacacs", 22), ("lspPing", 23), ("igmp", 24), ("vgmp", 25), ("rrpp", 26), ("vrrp", 27), ("bfd", 28), ("mplsOam", 29), ("eth8021ag", 30), ("ftpClient", 31), ("telnetClient", 32), ("sshClient", 33), ("sftpClient", 34), ("dnsClient", 35), ("webAuthServer", 36), ("telnetv6Server", 64), ("telnetv6Client", 65), ("tftpv6Client", 66), ("icmpv6", 67), ("dnsv6", 68), ("pimv6", 69), ("sshv6Server", 70), ("ospfv3", 71), ("bgpv6", 72), ("ftpv6Client", 73), ("ftpv6Server", 74)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAppliApperProtocol.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperProtocol.setDescription('The Data index of Application-Apperceive protection,the protocol configured in Application-Apperceive protection.')
hwAppliApperCurrentRateLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAppliApperCurrentRateLow.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperCurrentRateLow.setDescription('The lower 32 bits discard number during the interval of Application-Apperceive protection.unit(packet).')
hwAppliApperCurrentRateHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAppliApperCurrentRateHigh.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperCurrentRateHigh.setDescription('The upper 32 bits discard number during the interval of Application-Apperceive protection.unit(packet).')
hwAppliApperNotifyEnabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 13), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAppliApperNotifyEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperNotifyEnabledStatus.setDescription('The alarm state of Application-Apperceive protection.')
hwAppliApperRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAppliApperRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperRateThreshold.setDescription('The discard threshold of Application-Apperceive protection during the configured interval.unit(packet).')
hwAppliApperRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAppliApperRateInterval.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperRateInterval.setDescription('The detect interval of Application-Apperceive protection. unit(s).')
hwAppliApperProtocolDescirption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 5, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAppliApperProtocolDescirption.setStatus('current')
if mibBuilder.loadTexts: hwAppliApperProtocolDescirption.setDescription('The descirption of Protocol.')
hwDefdPortVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 6))
hwDefdPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 6, 1), )
if mibBuilder.loadTexts: hwDefdPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwDefdPortVlanTable.setDescription(' The table lists the information about defend port vlan packet. ')
hwDefdPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 6, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwDefdPortVlanIfIndex"))
if mibBuilder.loadTexts: hwDefdPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwDefdPortVlanEntry.setDescription('This table list the information about defend port vlan .')
hwDefdPortVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDefdPortVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDefdPortVlanIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwDefdPortVlanIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDefdPortVlanIfName.setStatus('current')
if mibBuilder.loadTexts: hwDefdPortVlanIfName.setDescription('The name of the interface.')
hwDefdPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDefdPortVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDefdPortVlanId.setDescription('The Data index of defend port vlan.')
hwDefdPortVlanCheckProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDefdPortVlanCheckProtocol.setStatus('current')
if mibBuilder.loadTexts: hwDefdPortVlanCheckProtocol.setDescription('Check protocol name.')
hwSocAttackTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7))
hwSocAttackInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1), )
if mibBuilder.loadTexts: hwSocAttackInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackInfoTable.setDescription(' The table lists the information about Security Operation Center. ')
hwSocAttackInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwSocAttackSeqNo"))
if mibBuilder.loadTexts: hwSocAttackInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackInfoEntry.setDescription('This table list the information about Securty Operation Center detected one attack.')
hwSocAttackSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackSeqNo.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackSeqNo.setDescription('The sequence number of attack infomation.')
hwSocAttackPossib = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackPossib.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackPossib.setDescription('The prabability of the attack .')
hwSocAttackReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackReason.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackReason.setDescription('The reason of the attack .')
hwSocAttackIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackIfName.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackIfName.setDescription('The interface of the attack')
hwSocAttackSubIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackSubIfName.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackSubIfName.setDescription('The sub-interface of the attack')
hwSocAttackVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackVlanIndex.setDescription('The vlan of the attack')
hwSocAttackUserQinQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackUserQinQIndex.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackUserQinQIndex.setDescription('The UserQinQ of the attack')
hwSocAttackMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackMacAddr.setDescription('The MAC of the attack')
hwSocAttackIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackIPAddr.setDescription('The IP of the attack')
hwSocAttackIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 7, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSocAttackIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackIPv6Addr.setDescription('The IPv6 of the attack')
hwBaseSecurityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11))
hwBaseSecurityUrpfDiscardedRateRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwLocalUrpfCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfChassisId"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfSlotId"))
if mibBuilder.loadTexts: hwBaseSecurityUrpfDiscardedRateRising.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityUrpfDiscardedRateRising.setDescription(' The discard packets exceed the threshold of local URPF protection.')
hwBaseSecurityUrpfDiscardedRateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 2)).setObjects(("HUAWEI-SECURITY-MIB", "hwLocalUrpfCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfChassisId"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfSlotId"))
if mibBuilder.loadTexts: hwBaseSecurityUrpfDiscardedRateResume.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityUrpfDiscardedRateResume.setDescription(' The alarm of local URPF is resumed.')
hwBaseSecurityTcpIpAttackDiscardedRateRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 3)).setObjects(("HUAWEI-SECURITY-MIB", "hwTcpIpDefendCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendRateInterval"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendChassisId"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendSlotId"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendType"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendProtocolDescirption"))
if mibBuilder.loadTexts: hwBaseSecurityTcpIpAttackDiscardedRateRising.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityTcpIpAttackDiscardedRateRising.setDescription(' The discard packets exceed the threshold of TCPIP protection. ')
hwBaseSecurityTcpIpAttackDiscardedRateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 4)).setObjects(("HUAWEI-SECURITY-MIB", "hwTcpIpDefendCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendRateInterval"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendChassisId"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendSlotId"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendType"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendProtocolDescirption"))
if mibBuilder.loadTexts: hwBaseSecurityTcpIpAttackDiscardedRateResume.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityTcpIpAttackDiscardedRateResume.setDescription(' The alarm of TCPIP protection is resumed. ')
hwBaseSecurityMaDiscardedRateRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 5)).setObjects(("HUAWEI-SECURITY-MIB", "hwMaDefendCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwMaDefendCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwMaDefendRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwMaDefendRateInterval"), ("HUAWEI-SECURITY-MIB", "hwMaDefendChassisId"), ("HUAWEI-SECURITY-MIB", "hwMaDefendSlotId"), ("HUAWEI-SECURITY-MIB", "hwMaDefendProtocol"))
if mibBuilder.loadTexts: hwBaseSecurityMaDiscardedRateRising.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityMaDiscardedRateRising.setDescription(' The discard packets exceed the threshold of management and application protection.')
hwBaseSecurityMaDiscardedRateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 6)).setObjects(("HUAWEI-SECURITY-MIB", "hwMaDefendCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwMaDefendCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwMaDefendRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwMaDefendRateInterval"), ("HUAWEI-SECURITY-MIB", "hwMaDefendChassisId"), ("HUAWEI-SECURITY-MIB", "hwMaDefendSlotId"), ("HUAWEI-SECURITY-MIB", "hwMaDefendProtocol"))
if mibBuilder.loadTexts: hwBaseSecurityMaDiscardedRateResume.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityMaDiscardedRateResume.setDescription(' The alarm of management and application protection is resumed. ')
hwBaseSecurityApplicationApperceiveDiscardedRateRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 7)).setObjects(("HUAWEI-SECURITY-MIB", "hwAppliApperCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwAppliApperCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwAppliApperRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwAppliApperRateInterval"), ("HUAWEI-SECURITY-MIB", "hwAppliApperChassisId"), ("HUAWEI-SECURITY-MIB", "hwAppliApperSlotId"), ("HUAWEI-SECURITY-MIB", "hwAppliApperProtocol"), ("HUAWEI-SECURITY-MIB", "hwAppliApperProtocolDescirption"))
if mibBuilder.loadTexts: hwBaseSecurityApplicationApperceiveDiscardedRateRising.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityApplicationApperceiveDiscardedRateRising.setDescription(' The discard packets exceed the threshold of Application-Apperceive protection. ')
hwBaseSecurityApplicationApperceiveDiscardedRateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 8)).setObjects(("HUAWEI-SECURITY-MIB", "hwAppliApperCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwAppliApperCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwAppliApperRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwAppliApperRateInterval"), ("HUAWEI-SECURITY-MIB", "hwAppliApperChassisId"), ("HUAWEI-SECURITY-MIB", "hwAppliApperSlotId"), ("HUAWEI-SECURITY-MIB", "hwAppliApperProtocol"), ("HUAWEI-SECURITY-MIB", "hwAppliApperProtocolDescirption"))
if mibBuilder.loadTexts: hwBaseSecurityApplicationApperceiveDiscardedRateResume.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityApplicationApperceiveDiscardedRateResume.setDescription('The alarm of Application-Apperceive protection is resumed.')
hwBaseSecurityStormControlInterface = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 9)).setObjects(("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceChassisId"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceSlotId"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceName"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceVlanID"))
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterface.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterface.setDescription('The alarm of storm-control detection.')
hwBaseSocAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 12)).setObjects(("HUAWEI-SECURITY-MIB", "hwSocAttackSeqNo"), ("HUAWEI-SECURITY-MIB", "hwSocAttackPossib"), ("HUAWEI-SECURITY-MIB", "hwSocAttackReason"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIfName"), ("HUAWEI-SECURITY-MIB", "hwSocAttackSubIfName"), ("HUAWEI-SECURITY-MIB", "hwSocAttackVlanIndex"), ("HUAWEI-SECURITY-MIB", "hwSocAttackUserQinQIndex"), ("HUAWEI-SECURITY-MIB", "hwSocAttackMacAddr"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIPAddr"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIPv6Addr"))
if mibBuilder.loadTexts: hwBaseSocAttackTrap.setStatus('current')
if mibBuilder.loadTexts: hwBaseSocAttackTrap.setDescription('An attack occur on the Network. ')
hwBaseSocAttackResumeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 13)).setObjects(("HUAWEI-SECURITY-MIB", "hwSocAttackSeqNo"), ("HUAWEI-SECURITY-MIB", "hwSocAttackPossib"), ("HUAWEI-SECURITY-MIB", "hwSocAttackReason"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIfName"), ("HUAWEI-SECURITY-MIB", "hwSocAttackSubIfName"), ("HUAWEI-SECURITY-MIB", "hwSocAttackVlanIndex"), ("HUAWEI-SECURITY-MIB", "hwSocAttackUserQinQIndex"), ("HUAWEI-SECURITY-MIB", "hwSocAttackMacAddr"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIPAddr"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIPv6Addr"))
if mibBuilder.loadTexts: hwBaseSocAttackResumeTrap.setStatus('current')
if mibBuilder.loadTexts: hwBaseSocAttackResumeTrap.setDescription('An attack cancels on the Network.')
hwBaseSecurityStormControlInterfaceResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 14)).setObjects(("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceChassisId"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceSlotId"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceName"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceVlanID"))
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceResume.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceResume.setDescription('L2 loop detect alarm cleared.')
hwBaseSecurityTtlExpiredLoop = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 15)).setObjects(("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopChassisId"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopSlotId"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopLastRateLow"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopLastRateHigh"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopRateInterval"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopRateThreshold"))
if mibBuilder.loadTexts: hwBaseSecurityTtlExpiredLoop.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityTtlExpiredLoop.setDescription('The alarm of ttl-expired loop detection.')
hwBaseSecurityTtlExpiredLoopResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 16)).setObjects(("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopChassisId"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopSlotId"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopLastRateLow"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopLastRateHigh"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopRateInterval"), ("HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopRateThreshold"))
if mibBuilder.loadTexts: hwBaseSecurityTtlExpiredLoopResume.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityTtlExpiredLoopResume.setDescription('TTL-Expired loop alarm cleared.')
hwBaseArpVlanCarTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 17)).setObjects(("HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarLogIfName"), ("HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarPhyIfName"))
if mibBuilder.loadTexts: hwBaseArpVlanCarTrap.setStatus('current')
if mibBuilder.loadTexts: hwBaseArpVlanCarTrap.setDescription('ARP VLAN CAR took effect on an interface, which may be because a loop occurred on the interface.')
hwBaseArpVlanCarResumeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 18)).setObjects(("HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarLogIfName"), ("HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarPhyIfName"))
if mibBuilder.loadTexts: hwBaseArpVlanCarResumeTrap.setStatus('current')
if mibBuilder.loadTexts: hwBaseArpVlanCarResumeTrap.setDescription('ARP VLAN CAR become ineffective on an interface.')
hwBaseSecurityAntiAttackRateRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 19)).setObjects(("HUAWEI-SECURITY-MIB", "hwAntiAttackType"), ("HUAWEI-SECURITY-MIB", "hwAntiAttackRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwAntiAttackCurrentRate"))
if mibBuilder.loadTexts: hwBaseSecurityAntiAttackRateRising.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityAntiAttackRateRising.setDescription(' The rate of packets exceed the threshold of anti-attack alarm. ')
hwBaseSecurityAntiAttackRateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 11, 20)).setObjects(("HUAWEI-SECURITY-MIB", "hwAntiAttackType"), ("HUAWEI-SECURITY-MIB", "hwAntiAttackRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwAntiAttackCurrentRate"))
if mibBuilder.loadTexts: hwBaseSecurityAntiAttackRateResume.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityAntiAttackRateResume.setDescription(' The alarm of anti-attack alarm is resumed. ')
hwMacFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12))
hwMacFilterModeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 1), )
if mibBuilder.loadTexts: hwMacFilterModeTable.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterModeTable.setDescription('This table list the information about mac-filter statistics.')
hwMacFilterModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwMacFilterIfIndex"))
if mibBuilder.loadTexts: hwMacFilterModeEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterModeEntry.setDescription('This table list the information about mac-filter statistics.')
hwMacFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMacFilterIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterIfIndex.setDescription('Mac-filter interface index.')
hwMacFilterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacFilterInterface.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterInterface.setDescription('Mac-filter interface name.')
hwMacFilterEnableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("whitelist", 1), ("balcklist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacFilterEnableMode.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterEnableMode.setDescription('Mac-filter enable mode.')
hwMacFilterMatchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacFilterMatchNum.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterMatchNum.setDescription('Mac-filter if-match number.')
hwMacFilterMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 2), )
if mibBuilder.loadTexts: hwMacFilterMacAddrTable.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterMacAddrTable.setDescription('This table list the information about mac-filter if-match mac-address.')
hwMacFilterMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 2, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwMacFilterIfindex"), (0, "HUAWEI-SECURITY-MIB", "hwMacFilterMacAddr"))
if mibBuilder.loadTexts: hwMacFilterMacAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterMacAddrEntry.setDescription('This table list the information about mac-filter if-match mac-address.')
hwMacFilterIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMacFilterIfindex.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterIfindex.setDescription('Mac-filter interface index.')
hwMacFilterInterfaceBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacFilterInterfaceBuf.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterInterfaceBuf.setDescription('Mac-filter interface name.')
hwMacFilterMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100)))
if mibBuilder.loadTexts: hwMacFilterMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwMacFilterMacAddr.setDescription('Mac-filter if-match mac-address.')
hwBaseSecurityStormControlInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 13))
hwBaseSecurityStormControlInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 13, 1), )
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceTable.setDescription('A Table about storm-control interface information.')
hwBaseSecurityStormControlInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 13, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceChassisId"), (0, "HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceSlotId"))
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceEntry.setDescription('Description.')
hwBaseSecurityStormControlInterfaceChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceChassisId.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceChassisId.setDescription('The chassis ID indicates the slot on which chassis is configured with storm control.')
hwBaseSecurityStormControlInterfaceSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceSlotId.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceSlotId.setDescription('The slot configured with storm control.')
hwBaseSecurityStormControlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 13, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceName.setDescription('The interface name.')
hwBaseSecurityStormControlInterfaceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceVlanID.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityStormControlInterfaceVlanID.setDescription('The VlanID of VlanIF which the interface join in.')
hwBaseArpVlanCarTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 14))
hwBaseArpVlanCarInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 14, 1), )
if mibBuilder.loadTexts: hwBaseArpVlanCarInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwBaseArpVlanCarInfoTable.setDescription('A Table about arp vlan car information.')
hwBaseArpVlanCarInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 14, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarLogIfName"), (0, "HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarPhyIfName"))
if mibBuilder.loadTexts: hwBaseArpVlanCarInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwBaseArpVlanCarInfoEntry.setDescription('Description.')
hwBaseArpVlanCarLogIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 14, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseArpVlanCarLogIfName.setStatus('current')
if mibBuilder.loadTexts: hwBaseArpVlanCarLogIfName.setDescription('The logic interface name.')
hwBaseArpVlanCarPhyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 14, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseArpVlanCarPhyIfName.setStatus('current')
if mibBuilder.loadTexts: hwBaseArpVlanCarPhyIfName.setDescription('The physical interface name.')
hwBaseArpVlanCarVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseArpVlanCarVlanId.setStatus('current')
if mibBuilder.loadTexts: hwBaseArpVlanCarVlanId.setDescription('The VlanId of arp vlan car.')
hwTtlExpiredLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15))
hwTtlExpiredLoopTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1), )
if mibBuilder.loadTexts: hwTtlExpiredLoopTable.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopTable.setDescription('A Table about TTL-expired loop information.')
hwTtlExpiredLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopChassisId"), (0, "HUAWEI-SECURITY-MIB", "hwTtlExpiredLoopSlotId"))
if mibBuilder.loadTexts: hwTtlExpiredLoopEntry.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopEntry.setDescription('Description.')
hwTtlExpiredLoopChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTtlExpiredLoopChassisId.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopChassisId.setDescription('The chassis ID indicates the chassis ttl-expired loop occur.')
hwTtlExpiredLoopSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTtlExpiredLoopSlotId.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopSlotId.setDescription('The slot ID indicates the slot ttl-expired loop occur.')
hwTtlExpiredLoopLastRateLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTtlExpiredLoopLastRateLow.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopLastRateLow.setDescription('The lower 32 bits of last discard bytes.')
hwTtlExpiredLoopLastRateHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTtlExpiredLoopLastRateHigh.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopLastRateHigh.setDescription('The high 32 bits of last discard bytes.')
hwTtlExpiredLoopCurrentRateLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTtlExpiredLoopCurrentRateLow.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopCurrentRateLow.setDescription('The lower 32 bits of current discard bytes.')
hwTtlExpiredLoopCurrentRateHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTtlExpiredLoopCurrentRateHigh.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopCurrentRateHigh.setDescription('The high 32 bits of current discard bytes.')
hwTtlExpiredLoopRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTtlExpiredLoopRateInterval.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopRateInterval.setDescription('Interval.')
hwTtlExpiredLoopRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 15, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTtlExpiredLoopRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwTtlExpiredLoopRateThreshold.setDescription('Threshold.')
hwAntiAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 16))
hwAntiAttackTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 16, 1), )
if mibBuilder.loadTexts: hwAntiAttackTable.setStatus('current')
if mibBuilder.loadTexts: hwAntiAttackTable.setDescription('This table list the information about anti-attack alarm.')
hwAntiAttackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 16, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwAntiAttackType"))
if mibBuilder.loadTexts: hwAntiAttackEntry.setStatus('current')
if mibBuilder.loadTexts: hwAntiAttackEntry.setDescription('This table list the information about anti-attack alarm.')
hwAntiAttackType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("abnormal", 1), ("fragment", 2), ("tcpSyn", 3), ("udpFlood", 4), ("icmpFlood", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAntiAttackType.setStatus('current')
if mibBuilder.loadTexts: hwAntiAttackType.setDescription('The data index of anti-attack, attack type configured in anti-attack alarm.')
hwAntiAttackRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAntiAttackRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAntiAttackRateThreshold.setDescription('The alarm threshold of anti-attack alarm during the processing of pkt-flooding.unit(bps).')
hwAntiAttackCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAntiAttackCurrentRate.setStatus('current')
if mibBuilder.loadTexts: hwAntiAttackCurrentRate.setDescription('The current rate of anti-attack alarm. unit(bps).')
hwMeSecurityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2))
hwSecurityTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1))
hwStrackTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1))
hwStrackTotalPacket = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStrackTotalPacket.setStatus('current')
if mibBuilder.loadTexts: hwStrackTotalPacket.setDescription('The total packets of strack during the configured interval.unit(packet).')
hwStrackEndTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStrackEndTime.setStatus('current')
if mibBuilder.loadTexts: hwStrackEndTime.setDescription('The data of strack.')
hwStrackSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStrackSourceMac.setStatus('current')
if mibBuilder.loadTexts: hwStrackSourceMac.setDescription('The data of strack.')
hwStrackPacketPVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStrackPacketPVlan.setStatus('current')
if mibBuilder.loadTexts: hwStrackPacketPVlan.setDescription('The data of strack.')
hwStrackPacketCVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStrackPacketCVlan.setStatus('current')
if mibBuilder.loadTexts: hwStrackPacketCVlan.setDescription('The data of strack.')
hwStrackPacketIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStrackPacketIfName.setStatus('current')
if mibBuilder.loadTexts: hwStrackPacketIfName.setDescription('The data of strack.')
hwStrackSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 1, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStrackSourceIp.setStatus('current')
if mibBuilder.loadTexts: hwStrackSourceIp.setDescription('The data of strack.')
hwArpsTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2))
hwArpsSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hwArpsSourceInterface.setDescription('The data of arp security.')
hwArpsSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsSourceIp.setStatus('current')
if mibBuilder.loadTexts: hwArpsSourceIp.setDescription('TThe data of arp security.')
hwArpsSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsSourceMac.setStatus('current')
if mibBuilder.loadTexts: hwArpsSourceMac.setDescription('The data of arp security.')
hwArpsPVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsPVlan.setStatus('current')
if mibBuilder.loadTexts: hwArpsPVlan.setDescription('The data of arp security.')
hwArpsCVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsCVlan.setStatus('current')
if mibBuilder.loadTexts: hwArpsCVlan.setDescription('The data of arp security.')
hwArpsPacketDropNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsPacketDropNum.setStatus('current')
if mibBuilder.loadTexts: hwArpsPacketDropNum.setDescription('The number of packets discarded by arp inspection .unit(packet).')
hwArpsAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwArpsAlarmThreshold.setDescription('The alarm threshold of dynamic arp inspection during the configured interval.unit(packet).')
hwArpsBlockTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 2, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwArpsBlockTime.setStatus('current')
if mibBuilder.loadTexts: hwArpsBlockTime.setDescription('The data of time which ARP Packet will be blocked. unit(second).')
hwIpsgTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 3))
hwIpsgPacketDropNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 3, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpsgPacketDropNum.setStatus('current')
if mibBuilder.loadTexts: hwIpsgPacketDropNum.setDescription('The data of ip source check .')
hwIpsgAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 3, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpsgAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIpsgAlarmThreshold.setDescription('The alarm threshold of ip source check during the configured interval.unit(packet).')
hwIpsgSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 3, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpsgSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hwIpsgSourceInterface.setDescription('The data of ip souce check.')
hwIcmpTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 4))
hwIcmpPacketDropNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 4, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIcmpPacketDropNum.setStatus('current')
if mibBuilder.loadTexts: hwIcmpPacketDropNum.setDescription('The number of packets discarded by ip source check .unit(packet).')
hwIcmpAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 4, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIcmpAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIcmpAlarmThreshold.setDescription('The alarm threshold of icmp defend during the configured interval.unit(packet).')
hwIcmpSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 4, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIcmpSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hwIcmpSourceInterface.setDescription('The data of icmp security.')
hwDapTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 5))
hwDapPortChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 5, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDapPortChange.setStatus('current')
if mibBuilder.loadTexts: hwDapPortChange.setDescription('The alarm of dap port changed')
hwCfgApTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 6))
hwCfgApUserName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfgApUserName.setStatus('current')
if mibBuilder.loadTexts: hwCfgApUserName.setDescription('The name of user failed to configure access point.')
hwCfgApIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfgApIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwCfgApIPAddress.setDescription('The IP-address of user failed to configure access point.')
hwCfgApApID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 6, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfgApApID.setStatus('current')
if mibBuilder.loadTexts: hwCfgApApID.setDescription('The ID of access point failed to be configured.')
hwCfgApOperation = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfgApOperation.setStatus('current')
if mibBuilder.loadTexts: hwCfgApOperation.setDescription('The operation of confiuration to access point.')
hwCfgApReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 1, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfgApReason.setStatus('current')
if mibBuilder.loadTexts: hwCfgApReason.setDescription('The reason of failed to configure access point.')
hwSecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2))
hwStrackTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 1))
hwStrackUserInfo = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 1, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwStrackPacketIfName"), ("HUAWEI-SECURITY-MIB", "hwStrackSourceMac"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketCVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketPVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackEndTime"), ("HUAWEI-SECURITY-MIB", "hwStrackTotalPacket"))
if mibBuilder.loadTexts: hwStrackUserInfo.setStatus('current')
if mibBuilder.loadTexts: hwStrackUserInfo.setDescription('The user data of strack.')
hwStrackIfVlanInfo = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 1, 2)).setObjects(("HUAWEI-SECURITY-MIB", "hwStrackPacketIfName"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketCVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketPVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackEndTime"), ("HUAWEI-SECURITY-MIB", "hwStrackTotalPacket"))
if mibBuilder.loadTexts: hwStrackIfVlanInfo.setStatus('current')
if mibBuilder.loadTexts: hwStrackIfVlanInfo.setDescription('The data of strack.')
hwStrackDenyPacket = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 1, 3)).setObjects(("HUAWEI-SECURITY-MIB", "hwStrackPacketIfName"), ("HUAWEI-SECURITY-MIB", "hwStrackSourceMac"), ("HUAWEI-SECURITY-MIB", "hwStrackSourceIp"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketCVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketPVlan"))
if mibBuilder.loadTexts: hwStrackDenyPacket.setStatus('current')
if mibBuilder.loadTexts: hwStrackDenyPacket.setDescription('The infomation of the packets discarded by strack.')
hwStrackErrorDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 1, 4)).setObjects(("HUAWEI-SECURITY-MIB", "hwStrackPacketIfName"))
if mibBuilder.loadTexts: hwStrackErrorDown.setStatus('current')
if mibBuilder.loadTexts: hwStrackErrorDown.setDescription('The interface that is shutdown by strack.')
hwStrackIpInfo = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 1, 5)).setObjects(("HUAWEI-SECURITY-MIB", "hwStrackPacketIfName"), ("HUAWEI-SECURITY-MIB", "hwStrackSourceIp"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketCVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketPVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackEndTime"), ("HUAWEI-SECURITY-MIB", "hwStrackTotalPacket"))
if mibBuilder.loadTexts: hwStrackIpInfo.setStatus('current')
if mibBuilder.loadTexts: hwStrackIpInfo.setDescription('The user data of strack.')
hwArpsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2))
hwArpsGatewayConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceMac"), ("HUAWEI-SECURITY-MIB", "hwArpsPVlan"), ("HUAWEI-SECURITY-MIB", "hwArpsCVlan"))
if mibBuilder.loadTexts: hwArpsGatewayConflict.setStatus('current')
if mibBuilder.loadTexts: hwArpsGatewayConflict.setDescription('The gateway conflict alarm is resumed.')
hwArpsEntryCheck = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 2)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceMac"), ("HUAWEI-SECURITY-MIB", "hwArpsPVlan"), ("HUAWEI-SECURITY-MIB", "hwArpsCVlan"))
if mibBuilder.loadTexts: hwArpsEntryCheck.setStatus('current')
if mibBuilder.loadTexts: hwArpsEntryCheck.setDescription('The arp talbe chekc alarm is resumed.')
hwArpsPacketCheck = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 3)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceMac"), ("HUAWEI-SECURITY-MIB", "hwArpsPVlan"), ("HUAWEI-SECURITY-MIB", "hwArpsCVlan"))
if mibBuilder.loadTexts: hwArpsPacketCheck.setStatus('current')
if mibBuilder.loadTexts: hwArpsPacketCheck.setDescription('The arp packet check alarm is resumed.')
hwArpsDaiDropALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 4)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsPacketDropNum"), ("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"))
if mibBuilder.loadTexts: hwArpsDaiDropALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpsDaiDropALarm.setDescription('The DAI alarm is resumed.')
hwArpGlobleSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 5)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"))
if mibBuilder.loadTexts: hwArpGlobleSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpGlobleSpeedLimitALarm.setDescription('The arp rate limit alarm is resumed.')
hwArpIfSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 6)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"))
if mibBuilder.loadTexts: hwArpIfSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpIfSpeedLimitALarm.setDescription('TThe arp rate limit alarm is resumed.')
hwArpVlanSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 7)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwArpsPVlan"))
if mibBuilder.loadTexts: hwArpVlanSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpVlanSpeedLimitALarm.setDescription('The arp rate limit alarm is resumed.')
hwArpMissGlobleSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 8)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"))
if mibBuilder.loadTexts: hwArpMissGlobleSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpMissGlobleSpeedLimitALarm.setDescription('The arp miss rate limit alarm is resumed.')
hwArpMissIfSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 9)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"))
if mibBuilder.loadTexts: hwArpMissIfSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpMissIfSpeedLimitALarm.setDescription('The arp miss rate limit alarm is resumed.')
hwArpMissVlanSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 10)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwArpsPVlan"))
if mibBuilder.loadTexts: hwArpMissVlanSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpMissVlanSpeedLimitALarm.setDescription('The arp miss rate limit alarm is resumed.')
hwArpSourceIpSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 11)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"))
if mibBuilder.loadTexts: hwArpSourceIpSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpSourceIpSpeedLimitALarm.setDescription('The alarm of arp speed limit.')
hwArpMissSourceIpSpeedLimitALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 12)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"))
if mibBuilder.loadTexts: hwArpMissSourceIpSpeedLimitALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpMissSourceIpSpeedLimitALarm.setDescription('The alarm of arp miss speed limit.')
hwArpIfRateLimitBlockALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 13)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwArpsBlockTime"))
if mibBuilder.loadTexts: hwArpIfRateLimitBlockALarm.setStatus('current')
if mibBuilder.loadTexts: hwArpIfRateLimitBlockALarm.setDescription('The arp rate limit block alarm is resumed.')
hwArpsLearnStrictCheck = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 2, 14)).setObjects(("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceMac"), ("HUAWEI-SECURITY-MIB", "hwArpsPVlan"))
if mibBuilder.loadTexts: hwArpsLearnStrictCheck.setStatus('current')
if mibBuilder.loadTexts: hwArpsLearnStrictCheck.setDescription('The alarm of arp learn strict check.')
hwIpsgTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 3))
hwIpsgDropALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 3, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwIpsgPacketDropNum"), ("HUAWEI-SECURITY-MIB", "hwIpsgAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwIpsgSourceInterface"))
if mibBuilder.loadTexts: hwIpsgDropALarm.setStatus('current')
if mibBuilder.loadTexts: hwIpsgDropALarm.setDescription('The ipsg alarm is resumed.')
hwIcmpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 4))
hwIcmpGlobleDropALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 4, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwIcmpAlarmThreshold"))
if mibBuilder.loadTexts: hwIcmpGlobleDropALarm.setStatus('current')
if mibBuilder.loadTexts: hwIcmpGlobleDropALarm.setDescription('The icmp rate limit alarm is resumed.')
hwIcmpIfDropALarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 4, 2)).setObjects(("HUAWEI-SECURITY-MIB", "hwIcmpAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwIcmpSourceInterface"))
if mibBuilder.loadTexts: hwIcmpIfDropALarm.setStatus('current')
if mibBuilder.loadTexts: hwIcmpIfDropALarm.setDescription('The icmp rate limit alarm is resumed.')
hwDapTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 5))
hwDapMibPortChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 5, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwDapPortChange"))
if mibBuilder.loadTexts: hwDapMibPortChange.setStatus('current')
if mibBuilder.loadTexts: hwDapMibPortChange.setDescription('The dap port is changed.')
hwCfgApTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 6))
hwCfgApTrapFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 2, 6, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwCfgApUserName"), ("HUAWEI-SECURITY-MIB", "hwCfgApIPAddress"), ("HUAWEI-SECURITY-MIB", "hwCfgApApID"), ("HUAWEI-SECURITY-MIB", "hwCfgApOperation"), ("HUAWEI-SECURITY-MIB", "hwCfgApReason"))
if mibBuilder.loadTexts: hwCfgApTrapFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCfgApTrapFailAlarm.setDescription('The operation failed to config access point.')
hwTrafficSuppression = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 3))
hwTrafficSuppressionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 3, 1), )
if mibBuilder.loadTexts: hwTrafficSuppressionTable.setStatus('current')
if mibBuilder.loadTexts: hwTrafficSuppressionTable.setDescription(' The table lists the information about the configuration of traffic suppression on an interface. ')
hwTrafficSuppressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 3, 1, 1), ).setIndexNames((0, "HUAWEI-SECURITY-MIB", "hwTrafficSuppressionIfIndex"))
if mibBuilder.loadTexts: hwTrafficSuppressionEntry.setStatus('current')
if mibBuilder.loadTexts: hwTrafficSuppressionEntry.setDescription(' The table lists the information about traffic suppression protection.')
hwTrafficSuppressionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwTrafficSuppressionIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTrafficSuppressionIfIndex.setDescription('The port index.')
hwTrafficSuppressionBcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrafficSuppressionBcastRatio.setStatus('current')
if mibBuilder.loadTexts: hwTrafficSuppressionBcastRatio.setDescription(" Broadcast-suppression ratio. Default is 100% . 100% indicates that the broadcast isn't suppressed.")
hwSecurityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11))
hwSecurityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 1))
hwSecurityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 1, 1)).setObjects(("HUAWEI-SECURITY-MIB", "hwLocalUrpfObjectGroup"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendObjectGroup"), ("HUAWEI-SECURITY-MIB", "hwMaDefendObjectGroup"), ("HUAWEI-SECURITY-MIB", "hwApplicationApperceiveObjectGroup"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityNotificationsObjectGroup"), ("HUAWEI-SECURITY-MIB", "hwMeSecurityObjectGroup"), ("HUAWEI-SECURITY-MIB", "hwMeSecurityTrapGroup"), ("HUAWEI-SECURITY-MIB", "hwDefdPortVlanObjectGroup"), ("HUAWEI-SECURITY-MIB", "hwSocAttackTrapGroup"), ("HUAWEI-SECURITY-MIB", "hwAntiAttackObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSecurityCompliance = hwSecurityCompliance.setStatus('current')
if mibBuilder.loadTexts: hwSecurityCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-SECURITY-MIB.')
hwBaseSecurityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2))
hwLocalUrpfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 2)).setObjects(("HUAWEI-SECURITY-MIB", "hwLocalUrpfCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfNotifyEnabledStatus"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfRateInterval"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfChassisId"), ("HUAWEI-SECURITY-MIB", "hwLocalUrpfSlotId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLocalUrpfObjectGroup = hwLocalUrpfObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwLocalUrpfObjectGroup.setDescription('The alarm parameter of URPF.')
hwTcpIpDefendObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 3)).setObjects(("HUAWEI-SECURITY-MIB", "hwTcpIpDefendCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendNotifyEnabledStatus"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendRateInterval"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendChassisId"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendSlotId"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendType"), ("HUAWEI-SECURITY-MIB", "hwTcpIpDefendProtocolDescirption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTcpIpDefendObjectGroup = hwTcpIpDefendObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwTcpIpDefendObjectGroup.setDescription('The alarm parameter of TCPIP protection.')
hwMaDefendObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 4)).setObjects(("HUAWEI-SECURITY-MIB", "hwMaDefendCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwMaDefendCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwMaDefendNotifyEnabledStatus"), ("HUAWEI-SECURITY-MIB", "hwMaDefendRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwMaDefendRateInterval"), ("HUAWEI-SECURITY-MIB", "hwMaDefendChassisId"), ("HUAWEI-SECURITY-MIB", "hwMaDefendSlotId"), ("HUAWEI-SECURITY-MIB", "hwMaDefendProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMaDefendObjectGroup = hwMaDefendObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwMaDefendObjectGroup.setDescription('The alarm parameter of management and application protection.')
hwApplicationApperceiveObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 5)).setObjects(("HUAWEI-SECURITY-MIB", "hwAppliApperCurrentRateLow"), ("HUAWEI-SECURITY-MIB", "hwAppliApperCurrentRateHigh"), ("HUAWEI-SECURITY-MIB", "hwAppliApperNotifyEnabledStatus"), ("HUAWEI-SECURITY-MIB", "hwAppliApperRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwAppliApperRateInterval"), ("HUAWEI-SECURITY-MIB", "hwAppliApperChassisId"), ("HUAWEI-SECURITY-MIB", "hwAppliApperSlotId"), ("HUAWEI-SECURITY-MIB", "hwAppliApperProtocol"), ("HUAWEI-SECURITY-MIB", "hwAppliApperProtocolDescirption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwApplicationApperceiveObjectGroup = hwApplicationApperceiveObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwApplicationApperceiveObjectGroup.setDescription('The alarm parameter of Application-Apperceive protection.')
hwBaseSecurityNotificationsObjectGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 6)).setObjects(("HUAWEI-SECURITY-MIB", "hwBaseSecurityUrpfDiscardedRateRising"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityUrpfDiscardedRateResume"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityTcpIpAttackDiscardedRateRising"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityTcpIpAttackDiscardedRateResume"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityMaDiscardedRateRising"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityMaDiscardedRateResume"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityApplicationApperceiveDiscardedRateRising"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityApplicationApperceiveDiscardedRateResume"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterface"), ("HUAWEI-SECURITY-MIB", "hwBaseSocAttackTrap"), ("HUAWEI-SECURITY-MIB", "hwBaseSocAttackResumeTrap"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityStormControlInterfaceResume"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityTtlExpiredLoop"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityTtlExpiredLoopResume"), ("HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarTrap"), ("HUAWEI-SECURITY-MIB", "hwBaseArpVlanCarResumeTrap"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityAntiAttackRateRising"), ("HUAWEI-SECURITY-MIB", "hwBaseSecurityAntiAttackRateResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBaseSecurityNotificationsObjectGroup = hwBaseSecurityNotificationsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwBaseSecurityNotificationsObjectGroup.setDescription('Total alarm of protection are resumed.')
hwMeSecurityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 7)).setObjects(("HUAWEI-SECURITY-MIB", "hwStrackTotalPacket"), ("HUAWEI-SECURITY-MIB", "hwStrackEndTime"), ("HUAWEI-SECURITY-MIB", "hwStrackSourceMac"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketPVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketCVlan"), ("HUAWEI-SECURITY-MIB", "hwStrackPacketIfName"), ("HUAWEI-SECURITY-MIB", "hwStrackSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceIp"), ("HUAWEI-SECURITY-MIB", "hwArpsSourceMac"), ("HUAWEI-SECURITY-MIB", "hwArpsPVlan"), ("HUAWEI-SECURITY-MIB", "hwArpsCVlan"), ("HUAWEI-SECURITY-MIB", "hwArpsPacketDropNum"), ("HUAWEI-SECURITY-MIB", "hwArpsAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwArpsBlockTime"), ("HUAWEI-SECURITY-MIB", "hwIpsgPacketDropNum"), ("HUAWEI-SECURITY-MIB", "hwIpsgAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwIpsgSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwIcmpPacketDropNum"), ("HUAWEI-SECURITY-MIB", "hwIcmpAlarmThreshold"), ("HUAWEI-SECURITY-MIB", "hwIcmpSourceInterface"), ("HUAWEI-SECURITY-MIB", "hwDapPortChange"), ("HUAWEI-SECURITY-MIB", "hwCfgApUserName"), ("HUAWEI-SECURITY-MIB", "hwCfgApIPAddress"), ("HUAWEI-SECURITY-MIB", "hwCfgApApID"), ("HUAWEI-SECURITY-MIB", "hwCfgApOperation"), ("HUAWEI-SECURITY-MIB", "hwCfgApReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMeSecurityObjectGroup = hwMeSecurityObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwMeSecurityObjectGroup.setDescription('The alarm parameter of huawei base security group.')
hwMeSecurityTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 8)).setObjects(("HUAWEI-SECURITY-MIB", "hwStrackUserInfo"), ("HUAWEI-SECURITY-MIB", "hwStrackIfVlanInfo"), ("HUAWEI-SECURITY-MIB", "hwStrackDenyPacket"), ("HUAWEI-SECURITY-MIB", "hwStrackErrorDown"), ("HUAWEI-SECURITY-MIB", "hwStrackIpInfo"), ("HUAWEI-SECURITY-MIB", "hwArpsGatewayConflict"), ("HUAWEI-SECURITY-MIB", "hwArpsEntryCheck"), ("HUAWEI-SECURITY-MIB", "hwArpsPacketCheck"), ("HUAWEI-SECURITY-MIB", "hwArpsDaiDropALarm"), ("HUAWEI-SECURITY-MIB", "hwArpGlobleSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpIfSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpVlanSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpMissGlobleSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpMissIfSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpMissVlanSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpSourceIpSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpMissSourceIpSpeedLimitALarm"), ("HUAWEI-SECURITY-MIB", "hwArpIfRateLimitBlockALarm"), ("HUAWEI-SECURITY-MIB", "hwArpsLearnStrictCheck"), ("HUAWEI-SECURITY-MIB", "hwIpsgDropALarm"), ("HUAWEI-SECURITY-MIB", "hwIcmpGlobleDropALarm"), ("HUAWEI-SECURITY-MIB", "hwIcmpIfDropALarm"), ("HUAWEI-SECURITY-MIB", "hwDapMibPortChange"), ("HUAWEI-SECURITY-MIB", "hwCfgApTrapFailAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMeSecurityTrapGroup = hwMeSecurityTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwMeSecurityTrapGroup.setDescription('Total alarm of protection are resumed.')
hwDefdPortVlanObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 9)).setObjects(("HUAWEI-SECURITY-MIB", "hwDefdPortVlanIfName"), ("HUAWEI-SECURITY-MIB", "hwDefdPortVlanId"), ("HUAWEI-SECURITY-MIB", "hwDefdPortVlanCheckProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDefdPortVlanObjectGroup = hwDefdPortVlanObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwDefdPortVlanObjectGroup.setDescription('The alarm parameter of l2 ring-route .')
hwSocAttackTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 11)).setObjects(("HUAWEI-SECURITY-MIB", "hwSocAttackSeqNo"), ("HUAWEI-SECURITY-MIB", "hwSocAttackPossib"), ("HUAWEI-SECURITY-MIB", "hwSocAttackReason"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIfName"), ("HUAWEI-SECURITY-MIB", "hwSocAttackSubIfName"), ("HUAWEI-SECURITY-MIB", "hwSocAttackVlanIndex"), ("HUAWEI-SECURITY-MIB", "hwSocAttackUserQinQIndex"), ("HUAWEI-SECURITY-MIB", "hwSocAttackMacAddr"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIPAddr"), ("HUAWEI-SECURITY-MIB", "hwSocAttackIPv6Addr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSocAttackTrapGroup = hwSocAttackTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwSocAttackTrapGroup.setDescription('The alarm parameter of Security Operation Center')
hwAntiAttackObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 165, 11, 2, 12)).setObjects(("HUAWEI-SECURITY-MIB", "hwAntiAttackType"), ("HUAWEI-SECURITY-MIB", "hwAntiAttackRateThreshold"), ("HUAWEI-SECURITY-MIB", "hwAntiAttackCurrentRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAntiAttackObjectGroup = hwAntiAttackObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAntiAttackObjectGroup.setDescription('The alarm parameter of anti-attack alarm.')
mibBuilder.exportSymbols("HUAWEI-SECURITY-MIB", hwSecurityTraps=hwSecurityTraps, hwBaseSecurityNotifications=hwBaseSecurityNotifications, hwStrackIpInfo=hwStrackIpInfo, hwDefdPortVlanIfIndex=hwDefdPortVlanIfIndex, hwBaseSecurityUrpfDiscardedRateResume=hwBaseSecurityUrpfDiscardedRateResume, hwStrackEndTime=hwStrackEndTime, hwAppliApperSlotId=hwAppliApperSlotId, hwCfgApOperation=hwCfgApOperation, hwBaseSecurityApplicationApperceiveDiscardedRateResume=hwBaseSecurityApplicationApperceiveDiscardedRateResume, hwBaseSecurityGroups=hwBaseSecurityGroups, hwApplicationApperceiveObjectGroup=hwApplicationApperceiveObjectGroup, hwTcpIpDefendRateInterval=hwTcpIpDefendRateInterval, hwIcmpAlarmThreshold=hwIcmpAlarmThreshold, hwMacFilterEnableMode=hwMacFilterEnableMode, hwBaseArpVlanCarInfoEntry=hwBaseArpVlanCarInfoEntry, hwIpsgPacketDropNum=hwIpsgPacketDropNum, hwBaseSecurityMaDiscardedRateRising=hwBaseSecurityMaDiscardedRateRising, hwMacFilterInterfaceBuf=hwMacFilterInterfaceBuf, hwBaseSecurityStormControlInterfaceSlotId=hwBaseSecurityStormControlInterfaceSlotId, hwCfgApTrapFailAlarm=hwCfgApTrapFailAlarm, hwTtlExpiredLoopCurrentRateLow=hwTtlExpiredLoopCurrentRateLow, hwIcmpIfDropALarm=hwIcmpIfDropALarm, hwIcmpPacketDropNum=hwIcmpPacketDropNum, hwCfgApIPAddress=hwCfgApIPAddress, hwMeSecurityObjectGroup=hwMeSecurityObjectGroup, hwTcpIpDefendEntry=hwTcpIpDefendEntry, hwIcmpTrap=hwIcmpTrap, hwMacFilterIfindex=hwMacFilterIfindex, hwTtlExpiredLoopRateInterval=hwTtlExpiredLoopRateInterval, hwArpsAlarmThreshold=hwArpsAlarmThreshold, hwMaDefendSlotId=hwMaDefendSlotId, hwStrackTrapObject=hwStrackTrapObject, hwTtlExpiredLoopLastRateHigh=hwTtlExpiredLoopLastRateHigh, hwTcpIpDefend=hwTcpIpDefend, hwBaseSecurityTtlExpiredLoopResume=hwBaseSecurityTtlExpiredLoopResume, hwAppliApperChassisId=hwAppliApperChassisId, hwTtlExpiredLoop=hwTtlExpiredLoop, hwArpMissGlobleSpeedLimitALarm=hwArpMissGlobleSpeedLimitALarm, hwMaDefendNotifyEnabledStatus=hwMaDefendNotifyEnabledStatus, hwStrackPacketCVlan=hwStrackPacketCVlan, hwCfgApTrap=hwCfgApTrap, hwTrafficSuppression=hwTrafficSuppression, hwStrackDenyPacket=hwStrackDenyPacket, hwBaseSecurityMIBObjects=hwBaseSecurityMIBObjects, hwSocAttackSeqNo=hwSocAttackSeqNo, hwTtlExpiredLoopChassisId=hwTtlExpiredLoopChassisId, hwAppliApperRateInterval=hwAppliApperRateInterval, hwSocAttackTrapGroup=hwSocAttackTrapGroup, hwBaseArpVlanCarVlanId=hwBaseArpVlanCarVlanId, hwIcmpTrapObject=hwIcmpTrapObject, hwMaDefendEntry=hwMaDefendEntry, hwSocAttackMacAddr=hwSocAttackMacAddr, hwIpsgTrap=hwIpsgTrap, hwBaseArpVlanCarLogIfName=hwBaseArpVlanCarLogIfName, hwBaseSecurityMaDiscardedRateResume=hwBaseSecurityMaDiscardedRateResume, hwMeSecurityMIBObjects=hwMeSecurityMIBObjects, hwDefdPortVlanId=hwDefdPortVlanId, hwTtlExpiredLoopSlotId=hwTtlExpiredLoopSlotId, hwLocalUrpfRateThreshold=hwLocalUrpfRateThreshold, hwArpsCVlan=hwArpsCVlan, hwSocAttackIPv6Addr=hwSocAttackIPv6Addr, hwBaseSecurityNotificationsObjectGroup=hwBaseSecurityNotificationsObjectGroup, hwArpsDaiDropALarm=hwArpsDaiDropALarm, hwStrackErrorDown=hwStrackErrorDown, hwDapMibPortChange=hwDapMibPortChange, hwBaseSecurityStormControlInterfaceObjects=hwBaseSecurityStormControlInterfaceObjects, hwCfgApReason=hwCfgApReason, hwCfgApApID=hwCfgApApID, hwTcpIpDefendCurrentRateHigh=hwTcpIpDefendCurrentRateHigh, hwDefdPortVlanIfName=hwDefdPortVlanIfName, hwAppliApperProtocol=hwAppliApperProtocol, hwTcpIpDefendProtocolDescirption=hwTcpIpDefendProtocolDescirption, hwLocalUrpf=hwLocalUrpf, hwApplicationApperceiveEntry=hwApplicationApperceiveEntry, hwIpsgAlarmThreshold=hwIpsgAlarmThreshold, hwArpsPacketDropNum=hwArpsPacketDropNum, hwMaDefendTable=hwMaDefendTable, hwBaseSecurityStormControlInterfaceResume=hwBaseSecurityStormControlInterfaceResume, hwArpsTrapObject=hwArpsTrapObject, hwSocAttackVlanIndex=hwSocAttackVlanIndex, hwBaseSecurityStormControlInterface=hwBaseSecurityStormControlInterface, hwArpsEntryCheck=hwArpsEntryCheck, hwTcpIpDefendRateThreshold=hwTcpIpDefendRateThreshold, hwArpIfSpeedLimitALarm=hwArpIfSpeedLimitALarm, hwStrackUserInfo=hwStrackUserInfo, hwLocalUrpfRateInterval=hwLocalUrpfRateInterval, hwArpGlobleSpeedLimitALarm=hwArpGlobleSpeedLimitALarm, hwBaseSecurityTcpIpAttackDiscardedRateResume=hwBaseSecurityTcpIpAttackDiscardedRateResume, hwDapTrap=hwDapTrap, hwBaseSecurityAntiAttackRateResume=hwBaseSecurityAntiAttackRateResume, hwStrackTrap=hwStrackTrap, hwAntiAttackObjectGroup=hwAntiAttackObjectGroup, hwBaseArpVlanCarInfoTable=hwBaseArpVlanCarInfoTable, hwTrafficSuppressionEntry=hwTrafficSuppressionEntry, hwLocalUrpfChassisId=hwLocalUrpfChassisId, hwStrackIfVlanInfo=hwStrackIfVlanInfo, hwApplicationApperceiveTable=hwApplicationApperceiveTable, hwBaseSecurityStormControlInterfaceName=hwBaseSecurityStormControlInterfaceName, hwAppliApperRateThreshold=hwAppliApperRateThreshold, hwStrackSourceIp=hwStrackSourceIp, hwMacFilterMatchNum=hwMacFilterMatchNum, hwIcmpGlobleDropALarm=hwIcmpGlobleDropALarm, hwArpsBlockTime=hwArpsBlockTime, hwArpSourceIpSpeedLimitALarm=hwArpSourceIpSpeedLimitALarm, hwSocAttackInfoTable=hwSocAttackInfoTable, hwMaDefendProtocol=hwMaDefendProtocol, hwMacFilterModeTable=hwMacFilterModeTable, hwArpsTrap=hwArpsTrap, hwMacFilter=hwMacFilter, hwMacFilterModeEntry=hwMacFilterModeEntry, hwMacFilterMacAddr=hwMacFilterMacAddr, hwDapPortChange=hwDapPortChange, hwBaseSocAttackResumeTrap=hwBaseSocAttackResumeTrap, hwDefdPortVlanObjectGroup=hwDefdPortVlanObjectGroup, hwAppliApperCurrentRateHigh=hwAppliApperCurrentRateHigh, hwTcpIpDefendTable=hwTcpIpDefendTable, hwArpsSourceMac=hwArpsSourceMac, hwSecurityCompliance=hwSecurityCompliance, hwTcpIpDefendCurrentRateLow=hwTcpIpDefendCurrentRateLow, hwAntiAttackCurrentRate=hwAntiAttackCurrentRate, hwDapTrapObject=hwDapTrapObject, hwTtlExpiredLoopLastRateLow=hwTtlExpiredLoopLastRateLow, hwDefdPortVlanCheckProtocol=hwDefdPortVlanCheckProtocol, hwSecurityTrapObject=hwSecurityTrapObject, hwIpsgSourceInterface=hwIpsgSourceInterface, hwSecurityCompliances=hwSecurityCompliances, hwBaseSecurityStormControlInterfaceChassisId=hwBaseSecurityStormControlInterfaceChassisId, hwLocalUrpfSlotId=hwLocalUrpfSlotId, hwSocAttackUserQinQIndex=hwSocAttackUserQinQIndex, hwDefdPortVlanEntry=hwDefdPortVlanEntry, hwStrackPacketPVlan=hwStrackPacketPVlan, hwArpsPVlan=hwArpsPVlan, hwBaseSecurityStormControlInterfaceVlanID=hwBaseSecurityStormControlInterfaceVlanID, hwDefdPortVlan=hwDefdPortVlan, hwLocalUrpfCurrentRateLow=hwLocalUrpfCurrentRateLow, hwArpsGatewayConflict=hwArpsGatewayConflict, hwMaDefend=hwMaDefend, hwArpVlanSpeedLimitALarm=hwArpVlanSpeedLimitALarm, hwIpsgTrapObject=hwIpsgTrapObject, hwAntiAttackEntry=hwAntiAttackEntry, hwArpsSourceIp=hwArpsSourceIp, hwAppliApperProtocolDescirption=hwAppliApperProtocolDescirption, hwTcpIpDefendType=hwTcpIpDefendType, hwLocalUrpfEntry=hwLocalUrpfEntry, hwBaseArpVlanCarResumeTrap=hwBaseArpVlanCarResumeTrap, hwBaseSecurityStormControlInterfaceTable=hwBaseSecurityStormControlInterfaceTable, hwArpsSourceInterface=hwArpsSourceInterface, hwSecurityMIB=hwSecurityMIB, hwTcpIpDefendSlotId=hwTcpIpDefendSlotId, hwSocAttackInfoEntry=hwSocAttackInfoEntry, hwMaDefendCurrentRateLow=hwMaDefendCurrentRateLow, hwSocAttackReason=hwSocAttackReason, hwMacFilterInterface=hwMacFilterInterface, hwTrafficSuppressionTable=hwTrafficSuppressionTable, hwBaseSecurityApplicationApperceiveDiscardedRateRising=hwBaseSecurityApplicationApperceiveDiscardedRateRising, hwMaDefendRateInterval=hwMaDefendRateInterval, hwBaseArpVlanCarTrap=hwBaseArpVlanCarTrap, hwArpMissVlanSpeedLimitALarm=hwArpMissVlanSpeedLimitALarm, hwTrafficSuppressionIfIndex=hwTrafficSuppressionIfIndex, hwBaseSecurityStormControlInterfaceEntry=hwBaseSecurityStormControlInterfaceEntry, hwMaDefendCurrentRateHigh=hwMaDefendCurrentRateHigh, hwBaseArpVlanCarTrapObject=hwBaseArpVlanCarTrapObject, hwStrackPacketIfName=hwStrackPacketIfName, hwMacFilterMacAddrTable=hwMacFilterMacAddrTable, hwAppliApperCurrentRateLow=hwAppliApperCurrentRateLow, hwSocAttackSubIfName=hwSocAttackSubIfName, hwBaseArpVlanCarPhyIfName=hwBaseArpVlanCarPhyIfName, hwArpMissSourceIpSpeedLimitALarm=hwArpMissSourceIpSpeedLimitALarm, hwMacFilterMacAddrEntry=hwMacFilterMacAddrEntry, hwBaseSecurityUrpfDiscardedRateRising=hwBaseSecurityUrpfDiscardedRateRising, hwMaDefendObjectGroup=hwMaDefendObjectGroup, hwMaDefendChassisId=hwMaDefendChassisId, hwStrackTotalPacket=hwStrackTotalPacket, hwLocalUrpfCurrentRateHigh=hwLocalUrpfCurrentRateHigh, hwCfgApTrapObject=hwCfgApTrapObject, hwLocalUrpfNotifyEnabledStatus=hwLocalUrpfNotifyEnabledStatus, hwLocalUrpfObjectGroup=hwLocalUrpfObjectGroup, hwAppliApperNotifyEnabledStatus=hwAppliApperNotifyEnabledStatus, hwArpMissIfSpeedLimitALarm=hwArpMissIfSpeedLimitALarm, hwMacFilterIfIndex=hwMacFilterIfIndex, hwTcpIpDefendChassisId=hwTcpIpDefendChassisId, hwAntiAttack=hwAntiAttack, hwBaseSecurityAntiAttackRateRising=hwBaseSecurityAntiAttackRateRising, hwBaseSecurityTtlExpiredLoop=hwBaseSecurityTtlExpiredLoop, hwSocAttackTrapObject=hwSocAttackTrapObject, hwAntiAttackType=hwAntiAttackType, hwTtlExpiredLoopCurrentRateHigh=hwTtlExpiredLoopCurrentRateHigh, hwDefdPortVlanTable=hwDefdPortVlanTable, hwAntiAttackRateThreshold=hwAntiAttackRateThreshold, hwArpsPacketCheck=hwArpsPacketCheck, hwSocAttackPossib=hwSocAttackPossib, hwArpsLearnStrictCheck=hwArpsLearnStrictCheck, hwSocAttackIfName=hwSocAttackIfName, hwTtlExpiredLoopEntry=hwTtlExpiredLoopEntry, hwTrafficSuppressionBcastRatio=hwTrafficSuppressionBcastRatio, hwTcpIpDefendObjectGroup=hwTcpIpDefendObjectGroup, hwMeSecurityTrapGroup=hwMeSecurityTrapGroup, hwSocAttackIPAddr=hwSocAttackIPAddr, hwArpIfRateLimitBlockALarm=hwArpIfRateLimitBlockALarm, hwApplicationApperceive=hwApplicationApperceive, hwAntiAttackTable=hwAntiAttackTable, hwTtlExpiredLoopRateThreshold=hwTtlExpiredLoopRateThreshold, hwIpsgDropALarm=hwIpsgDropALarm, hwIcmpSourceInterface=hwIcmpSourceInterface, hwSecurityConformance=hwSecurityConformance, hwMaDefendRateThreshold=hwMaDefendRateThreshold, hwBaseSocAttackTrap=hwBaseSocAttackTrap, PYSNMP_MODULE_ID=hwSecurityMIB, hwStrackSourceMac=hwStrackSourceMac, hwTcpIpDefendNotifyEnabledStatus=hwTcpIpDefendNotifyEnabledStatus, hwLocalUrpfTable=hwLocalUrpfTable, hwTtlExpiredLoopTable=hwTtlExpiredLoopTable, hwBaseSecurityTcpIpAttackDiscardedRateRising=hwBaseSecurityTcpIpAttackDiscardedRateRising, hwCfgApUserName=hwCfgApUserName)
