#
# PySNMP MIB module SDCARDMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SDCARDMGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, IpAddress, ModuleIdentity, Counter32, Counter64, Gauge32, Bits, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Counter32", "Counter64", "Gauge32", "Bits", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Integer32")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
swTimeRangeMgmtRangeName, = mibBuilder.importSymbols("TIMERANGE-MIB", "swTimeRangeMgmtRangeName")
swSDCardMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 95))
if mibBuilder.loadTexts: swSDCardMgmtMIB.setLastUpdated('201012220000Z')
if mibBuilder.loadTexts: swSDCardMgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swSDCardMgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swSDCardMgmtMIB.setDescription('The structure of SD card management module MIB.')
swSDCardMgmtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 95, 0))
swSDCardMgmtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 95, 1))
swSDCardMgmtGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 1))
swSDCardMgmtBackupCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 2))
swSDCardMgmtExecCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 3))
swSDCardMgmtExecConfigCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 4))
swSDCardMgmtBackupCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 2, 1), )
if mibBuilder.loadTexts: swSDCardMgmtBackupCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtBackupCtrlTable.setDescription('A table that contains information about SD card backup schedules.')
swSDCardMgmtBackupCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 2, 1, 1), ).setIndexNames((0, "SDCARDMGMT-MIB", "swSDCardMgmtBackupType"), (0, "TIMERANGE-MIB", "swTimeRangeMgmtRangeName"), (0, "SDCARDMGMT-MIB", "swSDCardMgmtBackupFilename"))
if mibBuilder.loadTexts: swSDCardMgmtBackupCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtBackupCtrlEntry.setDescription('A list of SD card backup schedules.')
swSDCardMgmtBackupType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration", 1), ("log", 2))))
if mibBuilder.loadTexts: swSDCardMgmtBackupType.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtBackupType.setDescription('Indicates the SD card backup type.')
swSDCardMgmtBackupFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: swSDCardMgmtBackupFilename.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtBackupFilename.setDescription('Indicates the backup filename.')
swSDCardMgmtBackupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSDCardMgmtBackupState.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtBackupState.setDescription('Indicates the backup schedule state.')
swSDCardMgmtBackupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 2, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSDCardMgmtBackupRowStatus.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtBackupRowStatus.setDescription('Indicates the status of this entry.')
swSDCardMgmtExecCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 3, 1), )
if mibBuilder.loadTexts: swSDCardMgmtExecCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecCtrlTable.setDescription('A table that contains information about SD card execute schedules.')
swSDCardMgmtExecCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 3, 1, 1), ).setIndexNames((0, "TIMERANGE-MIB", "swTimeRangeMgmtRangeName"), (0, "SDCARDMGMT-MIB", "swSDCardMgmtExecFilename"))
if mibBuilder.loadTexts: swSDCardMgmtExecCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecCtrlEntry.setDescription('A list of SD card execute schedules.')
swSDCardMgmtExecFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: swSDCardMgmtExecFilename.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecFilename.setDescription('Indicate the filename of the script.')
swSDCardMgmtExecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSDCardMgmtExecState.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecState.setDescription('Indicates the schedules execute state.')
swSDCardMgmtExecIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSDCardMgmtExecIncrement.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecIncrement.setDescription('Indicates whether the current configuration will remain valid or not before execute the script. true(1): the current configuration will not be reset before execute the script. false(2): the current configuration will be reset before execute the script.')
swSDCardMgmtExecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 3, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSDCardMgmtExecRowStatus.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecRowStatus.setDescription('Indicates the status of this entry.')
swSDCardMgmtExecConfigFilename = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSDCardMgmtExecConfigFilename.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecConfigFilename.setDescription('Indicates the filename of the script which to be execute.')
swSDCardMgmtExecConfigIncrement = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSDCardMgmtExecConfigIncrement.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecConfigIncrement.setDescription('Indicates whether the current configuration will remain valid or not before execute the script. true(1): the current configuration will not be reset before execute the script. false(2): the current configuration will be reset before execute the script.')
swSDCardMgmtExecConfigAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 95, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSDCardMgmtExecConfigAction.setStatus('current')
if mibBuilder.loadTexts: swSDCardMgmtExecConfigAction.setDescription('Indicates whether to execute script or not, which filename specified by swSDCardMgmtExecConfigFilename.')
mibBuilder.exportSymbols("SDCARDMGMT-MIB", swSDCardMgmtBackupCtrlEntry=swSDCardMgmtBackupCtrlEntry, swSDCardMgmtExecCtrlTable=swSDCardMgmtExecCtrlTable, swSDCardMgmtBackupState=swSDCardMgmtBackupState, swSDCardMgmtExecRowStatus=swSDCardMgmtExecRowStatus, swSDCardMgmtExecCtrl=swSDCardMgmtExecCtrl, swSDCardMgmtBackupCtrl=swSDCardMgmtBackupCtrl, swSDCardMgmtBackupType=swSDCardMgmtBackupType, PYSNMP_MODULE_ID=swSDCardMgmtMIB, swSDCardMgmtMIB=swSDCardMgmtMIB, swSDCardMgmtExecConfigFilename=swSDCardMgmtExecConfigFilename, swSDCardMgmtBackupFilename=swSDCardMgmtBackupFilename, swSDCardMgmtMIBObjects=swSDCardMgmtMIBObjects, swSDCardMgmtBackupRowStatus=swSDCardMgmtBackupRowStatus, swSDCardMgmtExecConfigAction=swSDCardMgmtExecConfigAction, swSDCardMgmtExecConfigIncrement=swSDCardMgmtExecConfigIncrement, swSDCardMgmtGeneralGroup=swSDCardMgmtGeneralGroup, swSDCardMgmtExecIncrement=swSDCardMgmtExecIncrement, swSDCardMgmtExecFilename=swSDCardMgmtExecFilename, swSDCardMgmtNotifications=swSDCardMgmtNotifications, swSDCardMgmtExecCtrlEntry=swSDCardMgmtExecCtrlEntry, swSDCardMgmtExecState=swSDCardMgmtExecState, swSDCardMgmtBackupCtrlTable=swSDCardMgmtBackupCtrlTable, swSDCardMgmtExecConfigCtrl=swSDCardMgmtExecConfigCtrl)
