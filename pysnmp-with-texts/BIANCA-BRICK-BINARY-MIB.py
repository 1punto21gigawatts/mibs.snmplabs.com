#
# PySNMP MIB module BIANCA-BRICK-BINARY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-BINARY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, IpAddress, Gauge32, Integer32, ObjectIdentity, Unsigned32, MibIdentifier, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, iso, enterprises, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Gauge32", "Integer32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "iso", "enterprises", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
ipsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26))
binTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 65), )
if mibBuilder.loadTexts: binTable.setStatus('mandatory')
if mibBuilder.loadTexts: binTable.setDescription('The binTable contains chunks of binary data which can be chained to larger amounts of data, allowing to store objects of an arbitrary size and format. This table is for internal use only.')
binEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1), ).setIndexNames((0, "BIANCA-BRICK-BINARY-MIB", "binEntIndex"))
if mibBuilder.loadTexts: binEntry.setStatus('mandatory')
if mibBuilder.loadTexts: binEntry.setDescription('The binTableEntry objects contain a chunk of binary data each of a maximum of 255 byte in length and can be concatenated to sets of binary data of an arbitrary size and format using the binEntIndex and binEntNextIndex fields. The binEntSetId field is used to identify all blocks of the same set.')
binEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 1), Integer32())
if mibBuilder.loadTexts: binEntIndex.setStatus('mandatory')
if mibBuilder.loadTexts: binEntIndex.setDescription('The Index is a unique identifier for this entry')
binEntNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 2), Integer32())
if mibBuilder.loadTexts: binEntNextIndex.setStatus('mandatory')
if mibBuilder.loadTexts: binEntNextIndex.setDescription('This object specifies the index of the next chunk of data in a set')
binEntSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 3), Integer32())
if mibBuilder.loadTexts: binEntSetId.setStatus('mandatory')
if mibBuilder.loadTexts: binEntSetId.setDescription('This object serves as a unique identifier for the binary data set this entry belongs to and is equal for all entries of a set')
binEntData = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: binEntData.setStatus('mandatory')
if mibBuilder.loadTexts: binEntData.setDescription('This object contains a chunk of binary data')
binPublicTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 67), )
if mibBuilder.loadTexts: binPublicTable.setStatus('mandatory')
if mibBuilder.loadTexts: binPublicTable.setDescription('The binPublicTable contains chunks of binary data which can be chained to larger amounts of data, allowing to store objects of an arbitrary size and format. This table is for internal use only. Its contents are readable and accessible to an SNNP manager. They are also written to configuration files.')
binPublicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1), ).setIndexNames((0, "BIANCA-BRICK-BINARY-MIB", "binPublicEntIndex"))
if mibBuilder.loadTexts: binPublicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: binPublicEntry.setDescription('The binPublicEntry objects contain a chunk of binary data each of a maximum of 255 byte in length and can be concatenated to sets of binary data of an arbitrary size and format using the binPublicEntIndex and binPublicEntNextIndex fields. The binPublicEntSetId field is used to identify all blocks of the same set.')
binPublicEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntIndex.setStatus('mandatory')
if mibBuilder.loadTexts: binPublicEntIndex.setDescription('The Index is a unique identifier for this entry')
binPublicEntNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntNextIndex.setStatus('mandatory')
if mibBuilder.loadTexts: binPublicEntNextIndex.setDescription('This object specifies the index of the next chunk of data in a set')
binPublicEntSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntSetId.setStatus('mandatory')
if mibBuilder.loadTexts: binPublicEntSetId.setDescription('This object serves as a unique identifier for the binary data set this entry belongs to and is equal for all entries of a set')
binPublicEntData = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntData.setStatus('mandatory')
if mibBuilder.loadTexts: binPublicEntData.setDescription('This object contains a chunk of binary data')
binFileTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 66), )
if mibBuilder.loadTexts: binFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: binFileTable.setDescription('The binFileTable contains entries which combine a name and a set of binary data from the binTable to a file')
binFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1), ).setIndexNames((0, "BIANCA-BRICK-BINARY-MIB", "binFileEntSetId"))
if mibBuilder.loadTexts: binFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: binFileEntry.setDescription('The binFileEntry objects contain a file name and a set identifier referencing a data set from the binTable')
binFileEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntName.setStatus('mandatory')
if mibBuilder.loadTexts: binFileEntName.setDescription('This object contains the file name')
binFileEntSize = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntSize.setStatus('mandatory')
if mibBuilder.loadTexts: binFileEntSize.setDescription('This object contains the current size of the file')
binFileEntPublic = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntPublic.setStatus('mandatory')
if mibBuilder.loadTexts: binFileEntPublic.setDescription('This object specifies, if the contents of the file should be included in the configuration and readable via SNMP. Possible values: false(1), -- entry is not public, i.e. its contents are in -- the binTable and not accessible true(2) -- entry is public, i.e. its contents are in the -- binPublicTable and accessible.')
binFileEntSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntSetId.setStatus('mandatory')
if mibBuilder.loadTexts: binFileEntSetId.setDescription('This object contains the set identifier as a reference to the binTable')
mibBuilder.exportSymbols("BIANCA-BRICK-BINARY-MIB", binEntSetId=binEntSetId, binEntData=binEntData, binTable=binTable, binFileEntry=binFileEntry, binFileEntSetId=binFileEntSetId, binEntIndex=binEntIndex, bintec=bintec, binPublicEntry=binPublicEntry, binPublicEntIndex=binPublicEntIndex, bibo=bibo, ipsec=ipsec, binPublicTable=binPublicTable, binFileTable=binFileTable, binEntry=binEntry, binPublicEntNextIndex=binPublicEntNextIndex, binFileEntPublic=binFileEntPublic, binEntNextIndex=binEntNextIndex, binFileEntName=binFileEntName, binPublicEntSetId=binPublicEntSetId, binFileEntSize=binFileEntSize, binPublicEntData=binPublicEntData)
