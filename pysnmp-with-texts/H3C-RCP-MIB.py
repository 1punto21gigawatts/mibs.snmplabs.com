#
# PySNMP MIB module H3C-RCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-RCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:23:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
h3cRCP, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cRCP")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, ObjectIdentity, Gauge32, IpAddress, ModuleIdentity, Counter64, NotificationType, Unsigned32, MibIdentifier, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "ObjectIdentity", "Gauge32", "IpAddress", "ModuleIdentity", "Counter64", "NotificationType", "Unsigned32", "MibIdentifier", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
h3cRCPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1))
h3cRCPMIB.setRevisions(('2006-09-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cRCPMIB.setRevisionsDescriptions(('The Initial Version of h3cRCPMIB.',))
if mibBuilder.loadTexts: h3cRCPMIB.setLastUpdated('200609200000Z')
if mibBuilder.loadTexts: h3cRCPMIB.setOrganization('Huawei 3Com Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cRCPMIB.setContactInfo('Platform Team Huawei 3Com Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.huawei-3com.com Zip:100085')
if mibBuilder.loadTexts: h3cRCPMIB.setDescription('The MIB module is used for managing RCP protocol server.')
h3cRCPLeaf = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1))
h3cRCPServerEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRCPServerEnableStatus.setStatus('current')
if mibBuilder.loadTexts: h3cRCPServerEnableStatus.setDescription('This attribute controls the system wide operation of RCP server. The value TRUE means that the RCP server is enabled. The value FALSE means that the RCP server is disabled.')
h3cRCPConnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRCPConnTimeout.setStatus('current')
if mibBuilder.loadTexts: h3cRCPConnTimeout.setDescription('Specifies the maximum time in seconds that a RCP client connection is idle.')
h3cRCPRuleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRCPRuleTimeout.setStatus('current')
if mibBuilder.loadTexts: h3cRCPRuleTimeout.setDescription('Specifies the time in seconds before a RCP rule is aged out. If its value is 0, it indicates RCP rule will not be aged out.')
h3cRCPServerMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRCPServerMaxConn.setStatus('current')
if mibBuilder.loadTexts: h3cRCPServerMaxConn.setDescription('Specifies the maximum number of clients that permitted to connect with RCP server at the same time.')
h3cRCPServerCurConn = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPServerCurConn.setStatus('current')
if mibBuilder.loadTexts: h3cRCPServerCurConn.setDescription('The current actual number of clients that connecting with RCP server.')
h3cRCPConnTimeoutMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPConnTimeoutMaxValue.setStatus('current')
if mibBuilder.loadTexts: h3cRCPConnTimeoutMaxValue.setDescription('Specifies the maximum value of h3cRCPConnTimeout.')
h3cRCPRuleTimeoutMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPRuleTimeoutMaxValue.setStatus('current')
if mibBuilder.loadTexts: h3cRCPRuleTimeoutMaxValue.setDescription('Specifies the maximum value of h3cRCPRuleTimeout.')
h3cRCPServerMaxConnMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPServerMaxConnMaxValue.setStatus('current')
if mibBuilder.loadTexts: h3cRCPServerMaxConnMaxValue.setDescription('Specifies the maximum value of h3cRCPServerMaxConn.')
h3cRCPBalanceGroupIdMinValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPBalanceGroupIdMinValue.setStatus('current')
if mibBuilder.loadTexts: h3cRCPBalanceGroupIdMinValue.setDescription('Specifies the minimum value of balance group identity.')
h3cRCPBalanceGroupIdMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPBalanceGroupIdMaxValue.setStatus('current')
if mibBuilder.loadTexts: h3cRCPBalanceGroupIdMaxValue.setDescription('Specifies the maximum value of balance group identity.')
h3cRCPTotalUsers = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPTotalUsers.setStatus('current')
if mibBuilder.loadTexts: h3cRCPTotalUsers.setDescription('Specifies the total number of RCP user.')
h3cRCPTotalClientIPs = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPTotalClientIPs.setStatus('current')
if mibBuilder.loadTexts: h3cRCPTotalClientIPs.setDescription('Specifies the total number of RCP client IP.')
h3cRCPTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2))
h3cRCPUserTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 1), )
if mibBuilder.loadTexts: h3cRCPUserTable.setStatus('current')
if mibBuilder.loadTexts: h3cRCPUserTable.setDescription('RCP User Info Table.')
h3cRCPUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 1, 1), ).setIndexNames((0, "H3C-RCP-MIB", "h3cRCPUserName"))
if mibBuilder.loadTexts: h3cRCPUserEntry.setStatus('current')
if mibBuilder.loadTexts: h3cRCPUserEntry.setDescription('The entry of h3cRCPUserTable.')
h3cRCPUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: h3cRCPUserName.setStatus('current')
if mibBuilder.loadTexts: h3cRCPUserName.setDescription('The name of RCP user.')
h3cRCPUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRCPUserPassword.setStatus('current')
if mibBuilder.loadTexts: h3cRCPUserPassword.setDescription(" The password of RCP user. It is invisible to users and displayed as '***'.")
h3cRCPUserRedirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRCPUserRedirectInterface.setStatus('current')
if mibBuilder.loadTexts: h3cRCPUserRedirectInterface.setDescription('The redirect interface index of RCP user. The RCP rule assigned by the user can be associated with the redirect interface. If the redirect interface is invalid, its value is set to be 0.')
h3cRCPUserRedirectBalanceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRCPUserRedirectBalanceGroup.setStatus('current')
if mibBuilder.loadTexts: h3cRCPUserRedirectBalanceGroup.setDescription('The redirect balance group identity of RCP user. The RCP rule assigned by the user can be associated with the redirect balance group. If the balance group is invalid, its value is set to be 0.')
h3cRCPUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRCPUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cRCPUserRowStatus.setDescription('This manages the creation and deletion of rows, and shows the current status of the indexed user name. This object has the following values. active(1) The indexed user name is configured on the device. notInService(2) Not Supported. notReady(3) Not Supported. createAndGo(4) Create a new user. createAndWait(5) Not Supported. destroy(6) Delete this entry. The associated entry can be modified when the value of h3cRCPUserRowStatus is active(1). When deleting an inexistence entry, return noError.')
h3cRCPClientIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 2), )
if mibBuilder.loadTexts: h3cRCPClientIPTable.setStatus('current')
if mibBuilder.loadTexts: h3cRCPClientIPTable.setDescription('RCP Client IP Table.')
h3cRCPClientIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 2, 1), ).setIndexNames((0, "H3C-RCP-MIB", "h3cRCPClientIPType"), (0, "H3C-RCP-MIB", "h3cRCPClientIP"))
if mibBuilder.loadTexts: h3cRCPClientIPEntry.setStatus('current')
if mibBuilder.loadTexts: h3cRCPClientIPEntry.setDescription('The entry of h3cRCPClientIPTable.')
h3cRCPClientIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: h3cRCPClientIPType.setStatus('current')
if mibBuilder.loadTexts: h3cRCPClientIPType.setDescription('The IP address type (IPv4 or IPv6) of RCP client.')
h3cRCPClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: h3cRCPClientIP.setStatus('current')
if mibBuilder.loadTexts: h3cRCPClientIP.setDescription('The IP address of RCP client.')
h3cRCPClientIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRCPClientIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cRCPClientIPRowStatus.setDescription('This manages the creation and deletion or rows, and shows the current status of the indexed client IP address. This object has the following values. active(1) The indexed client IP is configured on the device. notInService(2) Not Supported. notReady(3) Not Supported. createAndGo(4) Create a new client IP. createAndWait(5) Not Supported. destroy(6) Delete this entry. The associated entry can be modified when the value of h3cRCPClientIPRowStatus is active(1). When deleting an inexistence entry, return noError.')
h3cRCPSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 3), )
if mibBuilder.loadTexts: h3cRCPSessionTable.setStatus('current')
if mibBuilder.loadTexts: h3cRCPSessionTable.setDescription('RCP session Table.')
h3cRCPSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 3, 1), ).setIndexNames((0, "H3C-RCP-MIB", "h3cRCPSessionId"))
if mibBuilder.loadTexts: h3cRCPSessionEntry.setStatus('current')
if mibBuilder.loadTexts: h3cRCPSessionEntry.setDescription('The entry of h3cRCPSessionTable.')
h3cRCPSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cRCPSessionId.setStatus('current')
if mibBuilder.loadTexts: h3cRCPSessionId.setDescription('RCP session identity.')
h3cRCPSessionClientIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPSessionClientIPType.setStatus('current')
if mibBuilder.loadTexts: h3cRCPSessionClientIPType.setDescription('The IP address type (IPv4 or IPv6) of RCP client.')
h3cRCPSessionClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPSessionClientIP.setStatus('current')
if mibBuilder.loadTexts: h3cRCPSessionClientIP.setDescription('RCP client IP address.')
h3cRCPSessionRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPSessionRunningStatus.setStatus('current')
if mibBuilder.loadTexts: h3cRCPSessionRunningStatus.setDescription('RCP server running status. It is one of the following status: connected: The connection is established and the RCP client is waiting for authentication. operational: The RCP client is authenticated and the server is ready for rule configuration request.')
h3cRCPSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 73, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRCPSessionUserName.setStatus('current')
if mibBuilder.loadTexts: h3cRCPSessionUserName.setDescription('RCP user name.')
mibBuilder.exportSymbols("H3C-RCP-MIB", h3cRCPSessionRunningStatus=h3cRCPSessionRunningStatus, h3cRCPUserRedirectBalanceGroup=h3cRCPUserRedirectBalanceGroup, h3cRCPUserPassword=h3cRCPUserPassword, h3cRCPServerEnableStatus=h3cRCPServerEnableStatus, h3cRCPSessionClientIP=h3cRCPSessionClientIP, h3cRCPServerMaxConn=h3cRCPServerMaxConn, h3cRCPServerMaxConnMaxValue=h3cRCPServerMaxConnMaxValue, h3cRCPServerCurConn=h3cRCPServerCurConn, h3cRCPClientIP=h3cRCPClientIP, h3cRCPTable=h3cRCPTable, h3cRCPUserName=h3cRCPUserName, h3cRCPClientIPTable=h3cRCPClientIPTable, h3cRCPClientIPRowStatus=h3cRCPClientIPRowStatus, h3cRCPSessionTable=h3cRCPSessionTable, h3cRCPRuleTimeoutMaxValue=h3cRCPRuleTimeoutMaxValue, h3cRCPLeaf=h3cRCPLeaf, PYSNMP_MODULE_ID=h3cRCPMIB, h3cRCPTotalUsers=h3cRCPTotalUsers, h3cRCPClientIPEntry=h3cRCPClientIPEntry, h3cRCPClientIPType=h3cRCPClientIPType, h3cRCPSessionEntry=h3cRCPSessionEntry, h3cRCPUserRedirectInterface=h3cRCPUserRedirectInterface, h3cRCPRuleTimeout=h3cRCPRuleTimeout, h3cRCPSessionClientIPType=h3cRCPSessionClientIPType, h3cRCPTotalClientIPs=h3cRCPTotalClientIPs, h3cRCPMIB=h3cRCPMIB, h3cRCPUserRowStatus=h3cRCPUserRowStatus, h3cRCPUserEntry=h3cRCPUserEntry, h3cRCPSessionId=h3cRCPSessionId, h3cRCPConnTimeout=h3cRCPConnTimeout, h3cRCPBalanceGroupIdMaxValue=h3cRCPBalanceGroupIdMaxValue, h3cRCPSessionUserName=h3cRCPSessionUserName, h3cRCPUserTable=h3cRCPUserTable, h3cRCPBalanceGroupIdMinValue=h3cRCPBalanceGroupIdMinValue, h3cRCPConnTimeoutMaxValue=h3cRCPConnTimeoutMaxValue)
