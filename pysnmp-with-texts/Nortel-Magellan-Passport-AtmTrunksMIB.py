#
# PySNMP MIB module Nortel-Magellan-Passport-AtmTrunksMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-AtmTrunksMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
RowStatus, Gauge32, StorageType, Unsigned32, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowStatus", "Gauge32", "StorageType", "Unsigned32", "DisplayString")
Link, NonReplicated, FixedPoint1 = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "NonReplicated", "FixedPoint1")
trkIndex, trk = mibBuilder.importSymbols("Nortel-Magellan-Passport-TrunksMIB", "trkIndex", "trk")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, iso, TimeTicks, Gauge32, ModuleIdentity, Bits, Unsigned32, MibIdentifier, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "TimeTicks", "Gauge32", "ModuleIdentity", "Bits", "Unsigned32", "MibIdentifier", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
atmTrunksMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59))
trkAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3))
trkAtmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 1), )
if mibBuilder.loadTexts: trkAtmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmRowStatusTable.setDescription('This entry controls the addition and deletion of trkAtm components.')
trkAtmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TrunksMIB", "trkIndex"), (0, "Nortel-Magellan-Passport-AtmTrunksMIB", "trkAtmIndex"))
if mibBuilder.loadTexts: trkAtmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmRowStatusEntry.setDescription('A single entry in the table represents a single trkAtm component.')
trkAtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmRowStatus.setDescription('This variable is used as the basis for SNMP naming of trkAtm components. These components can be added and deleted.')
trkAtmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
trkAtmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmStorageType.setDescription('This variable represents the storage type value for the trkAtm tables.')
trkAtmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: trkAtmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmIndex.setDescription('This variable represents the index for the trkAtm tables.')
trkAtmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 10), )
if mibBuilder.loadTexts: trkAtmProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmProvTable.setDescription('This group of provisionable attributes contains the parameters used by AtmAccess for monitoring link quality.')
trkAtmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TrunksMIB", "trkIndex"), (0, "Nortel-Magellan-Passport-AtmTrunksMIB", "trkAtmIndex"))
if mibBuilder.loadTexts: trkAtmProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmProvEntry.setDescription('An entry in the trkAtmProvTable.')
trkAtmMaximumErroredInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmMaximumErroredInterval.setStatus('obsolete')
if mibBuilder.loadTexts: trkAtmMaximumErroredInterval.setDescription('This attribute specifies the interval time over which the error threshold (as specified by receiveErrorSensitivity) must be continuously exceeded before the Unacknowledged, Utp, AtmAccess or FrAccess component can be degraded. Once the error interval count exceeds the provisioned value, the Unacknowledged, Utp, AtmAccess or FrAccess component will issue an alarm indicating that link quality has degraded, and it will also disable its parent component. The exception to this is a value of zero, the default, which indicates that the mechanism is completely disabled.')
trkAtmReceiveErrorSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmReceiveErrorSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmReceiveErrorSensitivity.setDescription('This attribute specifies the allowable error rate beyond which the AtmAccess component can be degraded if the error rate persists for a duration longer than the maximumErrorInterval. The threshold is expressed as a percentage. It is the ratio of the number of errored cells in the last interval over the number of cells received in the last interval. For AAL5, the number of errored cells is converted from rxFrameDiscard of AtmIf Vcc using the assumption that three ATM cells are used to carry a 128 byte AAL5 frame. The number of received cells is specified by rxCell of AtmIf Vcc. The configurable values are: 0 = the mechanism is completely disabled 1 = 1/(2**1) 2 = 1/(2**2) 3 = 1/(2**3) : 10 = 1/(2**10)')
trkAtmAtmAccMaximumErroredInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 10, 1, 3), FixedPoint1().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), ValueRangeConstraint(35, 35), ValueRangeConstraint(40, 40), ValueRangeConstraint(45, 45), ValueRangeConstraint(50, 50), ValueRangeConstraint(60, 60), ValueRangeConstraint(70, 70), ValueRangeConstraint(80, 80), ValueRangeConstraint(90, 90), ValueRangeConstraint(100, 100), ValueRangeConstraint(110, 110), ValueRangeConstraint(120, 120), ValueRangeConstraint(130, 130), ValueRangeConstraint(140, 140), ValueRangeConstraint(150, 150), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmAtmAccMaximumErroredInterval.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmAtmAccMaximumErroredInterval.setDescription('This attribute specifies the interval time over which the error threshold (as specified by receiveErrorSensitivity) must be continuously exceeded before the AtmAccess component can be degraded. Once the error interval count exceeds the provisioned value, the AtmAccess component issues an alarm indicating that link quality has degraded, and it disables its parent component. The exception to this is a value of zero, the default, which indicates that the mechanism is completely disabled.')
trkAtmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 11), )
if mibBuilder.loadTexts: trkAtmInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmInterfaceTable.setDescription('This group of attributes provides the parameters used by the AtmAccess component for specifying access to an ATM interface.')
trkAtmInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TrunksMIB", "trkIndex"), (0, "Nortel-Magellan-Passport-AtmTrunksMIB", "trkAtmIndex"))
if mibBuilder.loadTexts: trkAtmInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmInterfaceEntry.setDescription('An entry in the trkAtmInterfaceTable.')
trkAtmAtmConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmAtmConnection.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmAtmConnection.setDescription('This attribute specifies the component name of the ATM Layer 2 AAL5 interface that the AtmAccess component will use.')
trkAtmBwElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmBwElastic.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmBwElastic.setDescription('This attribute specifies how changes in the bandwidth of the atmConnection are handled by the ATM software. If its value is no, the atmConnection will be released by the ATM software if it is incapable of providing the bandwidth specified by the peak cell rate (PCR) defined in txTrafficDescParm of AtmIf Vcc Vcd. If the value is yes, the atmConnection is not released in this situation, but its bandwidth may be reduced. Also, if this value is yes, the Dynamic Speed Reporting mechanism must be enabled, by provisioning at least one value in the speedReportingThresholds attribute of the parent Trunk component.')
trkAtmVccReportingBw = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pcr", 0), ("acr", 1))).clone('pcr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmVccReportingBw.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmVccReportingBw.setDescription('This attribute specifies how the bandwidth of the VCC is reported to the parent Trunk component. If its value is pcr and attribute bwElastic of AtmAccess has a value of no, the peak cell rate (PCR) of the VCC, defined in txTrafficDescParm of AtmIf Vcc Vcd, is reported. If its value is pcr and attribute bwElastic of AtmAccess has a value of yes, the minimum of the PCR, defined in txTrafficDescParm of AtmIf Vcc Vcd, and the current cell rate (CCR) of the VCC is reported. If its value is acr, the best measurement of the actual cell rate (ACR) of the VCC is reported, which is the minimum of the PCR, the CCR and the actual shaping rate (ASR). The value of the reported bandwidth of the VCC is indicated by the measuredSpeedToIf attribute of the parent Trunk component.')
trkAtmStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12), )
if mibBuilder.loadTexts: trkAtmStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
trkAtmStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TrunksMIB", "trkIndex"), (0, "Nortel-Magellan-Passport-AtmTrunksMIB", "trkAtmIndex"))
if mibBuilder.loadTexts: trkAtmStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmStateEntry.setDescription('An entry in the trkAtmStateTable.')
trkAtmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
trkAtmOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
trkAtmUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
trkAtmAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
trkAtmProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
trkAtmControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
trkAtmAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
trkAtmStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
trkAtmUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
trkAtmUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 14), )
if mibBuilder.loadTexts: trkAtmUtilTable.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmUtilTable.setDescription('This group contains all of the provisioning data required to set the ATM VCC utilization alarm thresholds. The ATM VCC utilization is indicated by the lastCalculatedVccUtilization attribute. All thresholds are percentages which can take on any value in the range of 0% through 200%. The value 200% is used to disable an individual threshold. For values other than 200%, the minor alarm threshold must be less than the other thresholds and the major alarm threshold must be less than the critical alarm threshold.')
trkAtmUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TrunksMIB", "trkIndex"), (0, "Nortel-Magellan-Passport-AtmTrunksMIB", "trkAtmIndex"))
if mibBuilder.loadTexts: trkAtmUtilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmUtilEntry.setDescription('An entry in the trkAtmUtilTable.')
trkAtmMinorVccUtilAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmMinorVccUtilAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmMinorVccUtilAlarmThreshold.setDescription('This attribute specifies the threshold value at which a minor alarm will be issued based on a sustained average ATM VCC utilization as indicated by the lastCalculatedVccUtilization attribute. The Set alarm is issued after 3 minutes of utilization greater than the threshold. The corresponding Clear alarm is issued after a subsequent 3 minutes of utilization less than or equal to the threshold. The value 200% is used to disable this threshold. For values other than 200%, the minor alarm threshold must be less than the other thresholds.')
trkAtmMajorVccUtilAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(85)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmMajorVccUtilAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmMajorVccUtilAlarmThreshold.setDescription('This attribute specifies the threshold value at which a major alarm will be issued based on a sustained average ATM VCC utilization as indicated by the lastCalculatedVccUtilization attribute. The Set alarm is issued after 3 minutes of utilization greater than the threshold. The corresponding Clear alarm is issued after a subsequent 3 minutes of utilization less than or equal to the threshold. The value 200% is used to disable this threshold. For values other than 200%, the major alarm threshold must be greater than the minor threshold and less than the critical threshold.')
trkAtmCriticalVccUtilAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmCriticalVccUtilAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmCriticalVccUtilAlarmThreshold.setDescription('This attribute specifies the threshold value at which a critical alarm will be issued based on a sustained average ATM VCC utilization as indicated by the lastCalculatedVccUtilization attribute. The Set alarm is issued after 3 minutes of utilization greater than the threshold. The corresponding Clear alarm is issued after a subsequent 3 minutes of utilization less than or equal to the threshold. The value 200% is used to disable this threshold. For values other than 200%, the critical alarm threshold must be greater than the other thresholds.')
trkAtmVccUtilAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkAtmVccUtilAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmVccUtilAlarmStatus.setDescription('This attribute provides control of the generation of ATM VCC utilization alarms. If the value is disabled, none of the alarms is generated (this is equivalent to setting all of the thresholds to 200%). If the value is enabled, the individual thresholds are handled.')
trkAtmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 15), )
if mibBuilder.loadTexts: trkAtmStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmStatsTable.setDescription('This group of attributes contains statistics collected by the AtmAccess component.')
trkAtmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TrunksMIB", "trkIndex"), (0, "Nortel-Magellan-Passport-AtmTrunksMIB", "trkAtmIndex"))
if mibBuilder.loadTexts: trkAtmStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmStatsEntry.setDescription('An entry in the trkAtmStatsTable.')
trkAtmLastCalculatedVccUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 15, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmLastCalculatedVccUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmLastCalculatedVccUtilization.setDescription('This attribute indicates the last calculated receive utilization of the ATM VCC. It is calculated every 30 seconds based on comparing the number of cells received by the AtmIf Vcc with the estimated available bandwidth on the AtmIf Vcc.')
trkAtmLastCalculatedTxVccUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 60, 3, 15, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trkAtmLastCalculatedTxVccUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: trkAtmLastCalculatedTxVccUtilization.setDescription('This attribute indicates the last calculated transmit utilization of the ATM VCC. It is calculated every 30 seconds based on comparing the number of cells transmitted by the AtmIf Vcc with the estimated available bandwidth on the AtmIf Vcc.')
atmTrunksGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 1))
atmTrunksGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 1, 5))
atmTrunksGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 1, 5, 2))
atmTrunksGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 1, 5, 2, 2))
atmTrunksCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 3))
atmTrunksCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 3, 5))
atmTrunksCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 3, 5, 2))
atmTrunksCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 59, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmTrunksMIB", atmTrunksCapabilities=atmTrunksCapabilities, atmTrunksCapabilitiesBE=atmTrunksCapabilitiesBE, atmTrunksCapabilitiesBE01A=atmTrunksCapabilitiesBE01A, trkAtmProvTable=trkAtmProvTable, atmTrunksMIB=atmTrunksMIB, trkAtmInterfaceTable=trkAtmInterfaceTable, trkAtmMajorVccUtilAlarmThreshold=trkAtmMajorVccUtilAlarmThreshold, atmTrunksGroupBE=atmTrunksGroupBE, trkAtmMaximumErroredInterval=trkAtmMaximumErroredInterval, trkAtmCriticalVccUtilAlarmThreshold=trkAtmCriticalVccUtilAlarmThreshold, trkAtmRowStatus=trkAtmRowStatus, trkAtmControlStatus=trkAtmControlStatus, trkAtmLastCalculatedTxVccUtilization=trkAtmLastCalculatedTxVccUtilization, atmTrunksGroup=atmTrunksGroup, trkAtmInterfaceEntry=trkAtmInterfaceEntry, trkAtmAdminState=trkAtmAdminState, trkAtmVccUtilAlarmStatus=trkAtmVccUtilAlarmStatus, trkAtmUtilEntry=trkAtmUtilEntry, trkAtmAvailabilityStatus=trkAtmAvailabilityStatus, trkAtmStateTable=trkAtmStateTable, trkAtmRowStatusEntry=trkAtmRowStatusEntry, trkAtmStorageType=trkAtmStorageType, atmTrunksCapabilitiesBE01=atmTrunksCapabilitiesBE01, trkAtmProceduralStatus=trkAtmProceduralStatus, trkAtmStatsTable=trkAtmStatsTable, trkAtmAlarmStatus=trkAtmAlarmStatus, trkAtmComponentName=trkAtmComponentName, trkAtmAtmConnection=trkAtmAtmConnection, trkAtmStateEntry=trkAtmStateEntry, atmTrunksGroupBE01=atmTrunksGroupBE01, trkAtmVccReportingBw=trkAtmVccReportingBw, trkAtmIndex=trkAtmIndex, trkAtmBwElastic=trkAtmBwElastic, trkAtmMinorVccUtilAlarmThreshold=trkAtmMinorVccUtilAlarmThreshold, trkAtm=trkAtm, trkAtmStatsEntry=trkAtmStatsEntry, trkAtmUsageState=trkAtmUsageState, trkAtmStandbyStatus=trkAtmStandbyStatus, atmTrunksGroupBE01A=atmTrunksGroupBE01A, trkAtmOperationalState=trkAtmOperationalState, trkAtmUtilTable=trkAtmUtilTable, trkAtmReceiveErrorSensitivity=trkAtmReceiveErrorSensitivity, trkAtmRowStatusTable=trkAtmRowStatusTable, trkAtmLastCalculatedVccUtilization=trkAtmLastCalculatedVccUtilization, trkAtmAtmAccMaximumErroredInterval=trkAtmAtmAccMaximumErroredInterval, trkAtmUnknownStatus=trkAtmUnknownStatus, trkAtmProvEntry=trkAtmProvEntry)
