#
# PySNMP MIB module HPN-ICF-FC-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-FC-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
HpnicfFcAddress, HpnicfFcVsanIndex, HpnicfFcStartOper, HpnicfFcAddressType = mibBuilder.importSymbols("HPN-ICF-FC-TC-MIB", "HpnicfFcAddress", "HpnicfFcVsanIndex", "HpnicfFcStartOper", "HpnicfFcAddressType")
hpnicfSan, = mibBuilder.importSymbols("HPN-ICF-VSAN-MIB", "hpnicfSan")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Gauge32, IpAddress, MibIdentifier, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, ObjectIdentity, NotificationType, Bits, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "ObjectIdentity", "NotificationType", "Bits", "Counter32", "TimeTicks")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
hpnicfFcPing = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5))
hpnicfFcPing.setRevisions(('2013-03-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfFcPing.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpnicfFcPing.setLastUpdated('201303150000Z')
if mibBuilder.loadTexts: hpnicfFcPing.setOrganization('')
if mibBuilder.loadTexts: hpnicfFcPing.setContactInfo('')
if mibBuilder.loadTexts: hpnicfFcPing.setDescription('This MIB module is for the management of the Fibre Channel Ping functionality.')
hpnicfFcPingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1))
hpnicfFcPingConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1))
hpnicfFcPingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2))
hpnicfFcPingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 3))
hpnicfFcPingNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 3, 0))
hpnicfFcPingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfFcPingTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingTable.setDescription('A table of FC ping entries containing a group of FC ping requests that need to be executed at the agent.')
hpnicfFcPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-FC-PING-MIB", "hpnicfFcPingIndex"))
if mibBuilder.loadTexts: hpnicfFcPingEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingEntry.setDescription('A FC ping request entry that need to be executed at the agent.')
hpnicfFcPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfFcPingIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingIndex.setDescription('The index of the current FC ping entry. This object identifies a FC ping request entry uniquely in a specified VSAN (Virtual Storage Area Network).')
hpnicfFcPingVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 2), HpnicfFcVsanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingVsan.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingVsan.setDescription("The VSAN on which the FC ping request will be performed. If the corresponding instance value of hpnicfFcPingOperStatus is 'inProgress', the object cannot be modified.")
hpnicfFcPingAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 3), HpnicfFcAddressType().clone('fcid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingAddressType.setDescription('The type of the corresponding instance of hpnicfFcPingAddress object.')
hpnicfFcPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 4), HpnicfFcAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingAddress.setDescription("The address to which the route will be pinged. This object will contain an 8 octet long WWN(World Wide Name), if the value of the associated instance of hpnicfFcPingAddressType object is 'wwn'. This object will contain a 3 octet long Fibre Channel Address ID, if the value of the associated instance of hpnicfFcPingAddressType object is 'fcid'.")
hpnicfFcPingPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingPacketCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingPacketCount.setDescription('The number of FC ping packets to be sent to the target in this sequence.')
hpnicfFcPingPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingPayloadSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingPayloadSize.setDescription('This object specifies the size of the FC ping packet payload to be sent to the target in this sequence.')
hpnicfFcPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingTimeout.setDescription('The value of timeout for this FC ping request.')
hpnicfFcPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingDelay.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingDelay.setDescription('The minimum amount of time to wait before sending the next packet in a sequence, after receiving a response or declaring a timeout for a previously transmitted packet.')
hpnicfFcPingAgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 900)).clone(500)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingAgeInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingAgeInterval.setDescription('The interval time after a FC ping test completes before the entry is aged out.')
hpnicfFcPingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 10), HpnicfFcStartOper().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingAdminStatus.setDescription("The administrative status of each hpnicfFcPingEntry. The object has two values: enable - Activate the entry. disable - Deactivate the entry. When the FC ping entry is executing, this object cannot be modified. If this object is read at such a time, a value of 'enable' will be returned. When the test finishes, the value of this object will be set to 'disable'.")
hpnicfFcPingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("complete", 2), ("disabled", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingOperStatus.setDescription('This object indicates the operational status of this hpnicfFcPingEntry. The value specifications are listed as follows: inProgress - FC ping is in progress. complete - FC ping is complete. disabled - FC ping is disabled. failed - FC ping has failed due to resource limitations.')
hpnicfFcPingTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingTrapOnCompletion.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingTrapOnCompletion.setDescription('This object indicates that if hpnicfFcPingCompletionNotify notification should be generated or not when the corresponding ping sequence completes.')
hpnicfFcPingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingRowStatus.setDescription('The status of this conceptual row.')
hpnicfFcPingStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfFcPingStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingStatTable.setDescription('A table of FC ping statistics. This table notes the FC ping statistics of a FC ping test associated with an entry in the hpnicfFcPingTable.')
hpnicfFcPingStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-FC-PING-MIB", "hpnicfFcPingIndex"))
if mibBuilder.loadTexts: hpnicfFcPingStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingStatEntry.setDescription("A FC ping statistics entry. An entry will be created automatically in this table when the hpnicfFcPingRowStatus of a ping request in the hpnicfFcPingTable is set to 'active'. The entry in this table will have the same indices as the entry that in the hpnicfFcPingTable. An entry in this table will be deleted when the corresponding entry in the hpnicfFcPingTable is deleted.")
hpnicfFcPingReqPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingReqPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingReqPackets.setDescription('The number of FC ping packets request in this sequence.')
hpnicfFcPingResPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingResPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingResPackets.setDescription('The number of FC ping packets response in this sequence.')
hpnicfFcPingMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1, 1, 3), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingMinTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingMinTime.setDescription('The minimum round trip time of all the packets that have been sent in this sequence.')
hpnicfFcPingAverageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1, 1, 4), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingAverageTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingAverageTime.setDescription('The average round trip time of all the packets that have been sent in this sequence.')
hpnicfFcPingMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1, 1, 5), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingMaxTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingMaxTime.setDescription('The maximum round trip time of all the packets that have been sent in this sequence.')
hpnicfFcPingTimeoutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPingTimeoutNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingTimeoutNum.setDescription('The number of timeouts encountered in this sequence.')
hpnicfFcPingCompletionNotify = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 5, 1, 3, 0, 1)).setObjects(("HPN-ICF-FC-PING-MIB", "hpnicfFcPingIndex"), ("HPN-ICF-FC-PING-MIB", "hpnicfFcPingVsan"), ("HPN-ICF-FC-PING-MIB", "hpnicfFcPingAddressType"), ("HPN-ICF-FC-PING-MIB", "hpnicfFcPingAddress"), ("HPN-ICF-FC-PING-MIB", "hpnicfFcPingReqPackets"), ("HPN-ICF-FC-PING-MIB", "hpnicfFcPingResPackets"))
if mibBuilder.loadTexts: hpnicfFcPingCompletionNotify.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPingCompletionNotify.setDescription("When a FC ping test is finished and the instance of hpnicfFcPingTrapOnCompletion associated with the test is set to 'true', this notification occurred.")
mibBuilder.exportSymbols("HPN-ICF-FC-PING-MIB", hpnicfFcPingOperStatus=hpnicfFcPingOperStatus, hpnicfFcPingMaxTime=hpnicfFcPingMaxTime, hpnicfFcPingAddress=hpnicfFcPingAddress, hpnicfFcPingEntry=hpnicfFcPingEntry, hpnicfFcPingTrapOnCompletion=hpnicfFcPingTrapOnCompletion, hpnicfFcPingPayloadSize=hpnicfFcPingPayloadSize, hpnicfFcPingAdminStatus=hpnicfFcPingAdminStatus, hpnicfFcPingAverageTime=hpnicfFcPingAverageTime, hpnicfFcPingMinTime=hpnicfFcPingMinTime, hpnicfFcPingVsan=hpnicfFcPingVsan, hpnicfFcPingConfigurations=hpnicfFcPingConfigurations, hpnicfFcPingTimeoutNum=hpnicfFcPingTimeoutNum, hpnicfFcPingNotifyPrefix=hpnicfFcPingNotifyPrefix, hpnicfFcPingTable=hpnicfFcPingTable, hpnicfFcPingStatEntry=hpnicfFcPingStatEntry, hpnicfFcPingAgeInterval=hpnicfFcPingAgeInterval, hpnicfFcPingAddressType=hpnicfFcPingAddressType, hpnicfFcPingTimeout=hpnicfFcPingTimeout, hpnicfFcPingDelay=hpnicfFcPingDelay, hpnicfFcPingNotifications=hpnicfFcPingNotifications, hpnicfFcPingIndex=hpnicfFcPingIndex, hpnicfFcPingResPackets=hpnicfFcPingResPackets, hpnicfFcPingCompletionNotify=hpnicfFcPingCompletionNotify, hpnicfFcPingStatTable=hpnicfFcPingStatTable, PYSNMP_MODULE_ID=hpnicfFcPing, hpnicfFcPingStatistics=hpnicfFcPingStatistics, hpnicfFcPingPacketCount=hpnicfFcPingPacketCount, hpnicfFcPingRowStatus=hpnicfFcPingRowStatus, hpnicfFcPingReqPackets=hpnicfFcPingReqPackets, hpnicfFcPingObjects=hpnicfFcPingObjects, hpnicfFcPing=hpnicfFcPing)
