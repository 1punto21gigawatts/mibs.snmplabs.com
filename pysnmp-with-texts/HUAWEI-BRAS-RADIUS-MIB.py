#
# PySNMP MIB module HUAWEI-BRAS-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BRAS-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hwBRASMib, = mibBuilder.importSymbols("HUAWEI-MIB", "hwBRASMib")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, NotificationType, ModuleCompliance, ObjectIdentity, Counter64, ObjectGroup, iso, Bits, Integer32, Counter32, TimeTicks, NotificationGroup, Unsigned32, MibIdentifier, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "ModuleCompliance", "ObjectIdentity", "Counter64", "ObjectGroup", "iso", "Bits", "Integer32", "Counter32", "TimeTicks", "NotificationGroup", "Unsigned32", "MibIdentifier", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
hwBRASRadius = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15))
if mibBuilder.loadTexts: hwBRASRadius.setLastUpdated('200504181334Z')
if mibBuilder.loadTexts: hwBRASRadius.setOrganization(' NanJing Institute,Huawei Technologies Co.,Ltd. HuiHong Mansion,No.91 BaiXia Rd. NanJing, P.R. of China Zipcode:210001 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwBRASRadius.setContactInfo('The MIB contains objects of module COPS.')
if mibBuilder.loadTexts: hwBRASRadius.setDescription('Description.')
hwRadiusGroupObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1))
hwRadiusGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1), )
if mibBuilder.loadTexts: hwRadiusGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwRadiusGroupTable.setDescription('Radius Group Table. ')
hwRadiusGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupName"))
if mibBuilder.loadTexts: hwRadiusGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusGroupEntry.setDescription('Radius Group Entry. Radius group table is used to configure the attribute of radius group including some public information of radius group. Radius group table is uniquely identified by Radius group name which is the key word entered when radius group table is created and cannot be changed. ')
hwRadiusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusGroupName.setStatus('current')
if mibBuilder.loadTexts: hwRadiusGroupName.setDescription('Radius Group name. ')
hwRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerKey.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerKey.setDescription('Radius Server secret. ')
hwRadiusServerProtType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("radiusPlus10", 2), ("radiusPlus11", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerProtType.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerProtType.setDescription('Radius protocol. ')
hwRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerRetransmit.setDescription('Max number of radius packet retransmission. ')
hwRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerTimeout.setDescription('Radius packet retransmission interval. ')
hwRadiusServerAttrTran = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerAttrTran.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerAttrTran.setDescription('Whether the function of Radius server attribute translation is enabled. 1 indicates that it is enabled. 2 indicates that it is disabled. ')
hwRadiusPacketUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("byte", 1), ("kbyte", 2), ("mbyte", 3), ("gbyte", 4))).clone('byte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusPacketUnit.setStatus('current')
if mibBuilder.loadTexts: hwRadiusPacketUnit.setDescription('The packet unit of Radius server which is active when the Radius protocol is standard. ')
hwRadiusDomainInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("includingDomain", 1), ("notIncludingDomain", 2), ("original", 3))).clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusDomainInclude.setStatus('current')
if mibBuilder.loadTexts: hwRadiusDomainInclude.setDescription('Whether the domain of Radius server is included. ')
hwRadiusClassASCar = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClassASCar.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClassASCar.setDescription('RADIUS server regards CLASS as CAR parameter. ')
hwRadiusAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("masterbackup", 1), ("shareloading", 2))).clone('masterbackup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAlgorithm.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAlgorithm.setDescription('Packet sending algorithm of Radius server. ')
hwRadiusServerNasPortFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerNasPortFmt.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerNasPortFmt.setDescription('Radius Nas port format string. ')
hwRadiusGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadiusGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRadiusGroupRowStatus.setDescription('Row admin status. Support add and delete.')
hwRadiusServerSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerSourceInterface.setDescription('Radius server source interface name. ')
hwRadiusServerNasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerNasIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerNasIpAddress.setDescription('Radius server NAS IP address')
hwRadiusServerCallingStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerCallingStationId.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerCallingStationId.setDescription('Radius server Calling-station-id')
hwRadiusServerCallingStationIdDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerCallingStationIdDelimiter.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerCallingStationIdDelimiter.setDescription('Radius server Calling-station-id-Delimiter')
hwRadiusAttributeNoExistPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAttributeNoExistPolicy.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAttributeNoExistPolicy.setDescription('Radius-attribute qos-profile no-exist-policy.')
hwRadiusServerKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerKeyType.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerKeyType.setDescription('Radius Server secret type.')
hwRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2), )
if mibBuilder.loadTexts: hwRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerTable.setDescription('Radius server group extend table. ')
hwRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupName"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerIndex"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerType"))
if mibBuilder.loadTexts: hwRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerEntry.setDescription('Description.')
hwRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerIndex.setDescription('IP address index of authentication and accounting server, read-only. ')
hwRadiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auth", 1), ("acct", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerType.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerType.setDescription('Type of authentication and accounting server, read-only. ')
hwRadiusServerVRF = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerVRF.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerVRF.setDescription('VPN-instance of authentication and accounting server. ')
hwRadiusServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerIP.setDescription('IP address of authentication and accounting server which is unnecessary to configure. ')
hwRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerPort.setDescription('Port number of authentication and accounting server. Use the default value, if it is not configured. ')
hwRadiusServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerWeight.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerWeight.setDescription('Weight of authentication and accounting server, which is unnecessary to configure. ')
hwRadiusServerSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSecretKey.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerSecretKey.setDescription('Secret of authentication and accounting server. ')
hwRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadiusServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerRowStatus.setDescription('Row admin status,either Add or Del. Support add and delete. ')
hwRadiusServerPktSendNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerPktSendNumber.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerPktSendNumber.setDescription('The number of packets that can be sent ')
hwRadiusServerPktSendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerPktSendInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerPktSendInterval.setDescription('The interval for counting the number of sent packets(in sec) ')
hwRadiusServerSourceInterfaceEachServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSourceInterfaceEachServer.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerSourceInterfaceEachServer.setDescription('Radius server source interface name ')
hwRadiusServerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerResponses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerResponses.setDescription('The number of RADIUS packets received from this server. ')
hwRadiusServerSecretKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSecretKeyType.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerSecretKeyType.setDescription('Secret key type of authentication and accounting server. ')
hwRadiusServerDeadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerDeadCount.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerDeadCount.setDescription('Radius server dead count. ')
hwRadiusServerDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerDeadTime.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerDeadTime.setDescription('Radius server dead time. ')
hwRadiusServerDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerDeadInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerDeadInterval.setDescription('Radius server dead interval. ')
hwRadiusClientTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3), )
if mibBuilder.loadTexts: hwRadiusClientTable.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientTable.setDescription('Configuration table of server client end. ')
hwRadiusClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientVrf"))
if mibBuilder.loadTexts: hwRadiusClientEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientEntry.setDescription('Description.')
hwRadiusClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusClientIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientIP.setDescription('Client ip address. ')
hwRadiusClientVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusClientVrf.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientVrf.setDescription('Client vpn instance. ')
hwRadiusClientKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClientKey.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientKey.setDescription('Client share key. ')
hwRadiusClientGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClientGroupName.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientGroupName.setDescription('Client group name. ')
hwRadiusClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadiusClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientRowStatus.setDescription('Client row status. ')
hwRadiusClientKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClientKeyType.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientKeyType.setDescription('Client share key type. ')
hwRadiusAuthorServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4), )
if mibBuilder.loadTexts: hwRadiusAuthorServerTable.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerTable.setDescription('Configuration table of AUTHOR server. ')
hwRadiusAuthorServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerVrf"))
if mibBuilder.loadTexts: hwRadiusAuthorServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerEntry.setDescription('Description.')
hwRadiusAuthorServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusAuthorServerIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerIP.setDescription('Authorization Server IP address. ')
hwRadiusAuthorServerVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusAuthorServerVrf.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerVrf.setDescription('Authorization Server VPN instance. ')
hwRadiusAuthorServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerKey.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerKey.setDescription('Authorization Server share key. ')
hwRadiusAuthorServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerGroupName.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerGroupName.setDescription('Authorization Server group name. ')
hwRadiusAuthorServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerRowStatus.setDescription('Authorization Server row status. ')
hwRadiusAuthorServerKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerKeyType.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerKeyType.setDescription('Authorization Server share key type. ')
hwRadiusSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5))
hwRadiusSettingEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1))
hwEnableSourcePortsExtended = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEnableSourcePortsExtended.setStatus('current')
if mibBuilder.loadTexts: hwEnableSourcePortsExtended.setDescription('To enable one or more ports to be used as the source ports for sending out RADIUS requests,default is 2. ')
hwSourcePortsExtendedStartPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 55535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSourcePortsExtendedStartPort.setStatus('current')
if mibBuilder.loadTexts: hwSourcePortsExtendedStartPort.setDescription('The start port to be used as the source ports for sending out RADIUS requests. ')
hwSourcePortsExtendedPortNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSourcePortsExtendedPortNum.setStatus('current')
if mibBuilder.loadTexts: hwSourcePortsExtendedPortNum.setDescription('The number of port to be used as the source ports for sending out RADIUS requests. ')
hwRadiusResetStatAll = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusResetStatAll.setStatus('current')
if mibBuilder.loadTexts: hwRadiusResetStatAll.setDescription('Reset statistics information of radius sending and receiving packets. ')
hwResetRadiusAttrCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwResetRadiusAttrCount.setStatus('current')
if mibBuilder.loadTexts: hwResetRadiusAttrCount.setDescription('Reset RADIUS attribute count. ')
hwRadiusTotalDeadCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusTotalDeadCount.setStatus('current')
if mibBuilder.loadTexts: hwRadiusTotalDeadCount.setDescription('Radius server total dead count. ')
hwRadiusTotalDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusTotalDeadTime.setStatus('current')
if mibBuilder.loadTexts: hwRadiusTotalDeadTime.setDescription('Radius server total dead time. ')
hwRadiusTotalDeadInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusTotalDeadInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadiusTotalDeadInterval.setDescription('Radius server total dead interval. ')
hwRadiusStatAuthenIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6), )
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Table.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Table.setDescription('Authentication packet statistics information for IPv4 radius server. ')
hwRadiusStatAuthenIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthenIpv4ServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthenIpv4Vrf"))
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Entry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Entry.setDescription('Description.')
hwRadiusStatAuthenIpv4ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4ServerIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4ServerIP.setDescription('Radius server IP. ')
hwRadiusStatAuthenIpv4Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Vrf.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Vrf.setDescription('VPN-instance name. ')
hwRadiusStatAuthenIpv4Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Requests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Requests.setDescription('Request packets. ')
hwRadiusStatAuthenIpv4Accepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Accepts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Accepts.setDescription('Accept packets. ')
hwRadiusStatAuthenIpv4Rejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Rejects.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Rejects.setDescription('Reject packets. ')
hwRadiusStatAuthenIpv4Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Retransmissions.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Retransmissions.setDescription('Retransmission packets. ')
hwRadiusStatAuthenIpv4Challenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Challenges.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Challenges.setDescription('Challenge packets. ')
hwRadiusStatAuthenIpv4MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4MalformedResponses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4MalformedResponses.setDescription('Malformed response packets. ')
hwRadiusStatAuthenIpv4BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4BadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4BadAuthenticators.setDescription('Bad packets. ')
hwRadiusStatAuthenIpv4PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4PendingRequests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4PendingRequests.setDescription('Pending packets. ')
hwRadiusStatAuthenIpv4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Timeouts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Timeouts.setDescription('Timeout packets. ')
hwRadiusStatAuthenIpv4UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4UnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4UnknownTypes.setDescription('Unknown packets. ')
hwRadiusStatAuthenIpv4DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4DroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4DroppedPackets.setDescription('Dropped packets. ')
hwRadiusStatAcctIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7), )
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Table.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Table.setDescription('Account packet statistics information for IPv4 radius server. ')
hwRadiusStatAcctIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAcctIpv4ServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAcctIpv4Vrf"))
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Entry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Entry.setDescription('Description.')
hwRadiusStatAcctIpv4ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4ServerIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4ServerIP.setDescription('Radius server IP. ')
hwRadiusStatAcctIpv4Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Vrf.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Vrf.setDescription('VPN-instance name. ')
hwRadiusStatAcctIpv4Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Requests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Requests.setDescription('Request packets. ')
hwRadiusStatAcctIpv4Responses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Responses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Responses.setDescription('Response packets. ')
hwRadiusStatAcctIpv4Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Retransmissions.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Retransmissions.setDescription('Retransmission packets. ')
hwRadiusStatAcctIpv4MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4MalformedResponses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4MalformedResponses.setDescription('Malformed response packets. ')
hwRadiusStatAcctIpv4BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4BadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4BadAuthenticators.setDescription('Bad packets. ')
hwRadiusStatAcctIpv4PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4PendingRequests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4PendingRequests.setDescription('Pending packets. ')
hwRadiusStatAcctIpv4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Timeouts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Timeouts.setDescription('Timeout packets. ')
hwRadiusStatAcctIpv4UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4UnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4UnknownTypes.setDescription('Unknown packets. ')
hwRadiusStatAcctIpv4DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4DroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4DroppedPackets.setDescription('Dropped packets. ')
hwRadiusStatAuthorIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8), )
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Table.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Table.setDescription('Authorization packet statistics information for IPv4 radius server. ')
hwRadiusStatAuthorIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthorIpv4ServerType"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthorIpv4ServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthorIpv4Vrf"))
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Entry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Entry.setDescription('Description.')
hwRadiusStatAuthorIpv4ServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4ServerType.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4ServerType.setDescription('Radius server type. ')
hwRadiusStatAuthorIpv4ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4ServerIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4ServerIP.setDescription('Radius server IP. ')
hwRadiusStatAuthorIpv4Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Vrf.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Vrf.setDescription('VPN-instance name. ')
hwRadiusStatAuthorIpv4Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Requests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Requests.setDescription('Request packets. ')
hwRadiusStatAuthorIpv4Accepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Accepts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Accepts.setDescription('Accept packets. ')
hwRadiusStatAuthorIpv4Rejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Rejects.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Rejects.setDescription('Reject packets. ')
hwRadiusStatAuthorIpv4BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4BadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4BadAuthenticators.setDescription('Bad packets. ')
hwRadiusStatAuthorIpv4Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Retransmissions.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Retransmissions.setDescription('Retransmission packets. ')
hwRadiusStatAuthorIpv4MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4MalformedResponses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4MalformedResponses.setDescription('Malformed response packets. ')
hwRadiusStatAuthorIpv4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Timeouts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Timeouts.setDescription('Timeout packets. ')
hwRadiusStatAuthorIpv4UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4UnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4UnknownTypes.setDescription('Unknown packets. ')
hwRadiusStatAuthorIpv4DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4DroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4DroppedPackets.setDescription('Dropped packets. ')
hwRadiusStatAuthenIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9), )
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Table.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Table.setDescription('Authentication packet statistics information for IPv4 radius server. ')
hwRadiusStatAuthenIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthenIpv6ServerIP"))
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Entry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Entry.setDescription('Description.')
hwRadiusStatAuthenIpv6ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6ServerIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6ServerIP.setDescription('Radius server IP. ')
hwRadiusStatAuthenIpv6Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Requests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Requests.setDescription('Request packets. ')
hwRadiusStatAuthenIpv6Accepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Accepts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Accepts.setDescription('Accept packets. ')
hwRadiusStatAuthenIpv6Rejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Rejects.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Rejects.setDescription('Reject packets. ')
hwRadiusStatAuthenIpv6Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Retransmissions.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Retransmissions.setDescription('Retransmission packets. ')
hwRadiusStatAuthenIpv6Challenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Challenges.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Challenges.setDescription('Challenge packets. ')
hwRadiusStatAuthenIpv6MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6MalformedResponses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6MalformedResponses.setDescription('Malformed response packets. ')
hwRadiusStatAuthenIpv6BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6BadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6BadAuthenticators.setDescription('Bad packets. ')
hwRadiusStatAuthenIpv6PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6PendingRequests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6PendingRequests.setDescription('Pending packets. ')
hwRadiusStatAuthenIpv6Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Timeouts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Timeouts.setDescription('Timeout packets. ')
hwRadiusStatAuthenIpv6UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6UnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6UnknownTypes.setDescription('Unknown packets. ')
hwRadiusStatAuthenIpv6DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6DroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6DroppedPackets.setDescription('Dropped packets. ')
hwRadiusStatAcctIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10), )
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Table.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Table.setDescription('Account packet statistics information for IPv4 radius server. ')
hwRadiusStatAcctIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAcctIpv6ServerIP"))
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Entry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Entry.setDescription('Description.')
hwRadiusStatAcctIpv6ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6ServerIP.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6ServerIP.setDescription('Radius server IP. ')
hwRadiusStatAcctIpv6Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Requests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Requests.setDescription('Request packets. ')
hwRadiusStatAcctIpv6Responses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Responses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Responses.setDescription('Response packets. ')
hwRadiusStatAcctIpv6Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Retransmissions.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Retransmissions.setDescription('Retransmission packets. ')
hwRadiusStatAcctIpv6MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6MalformedResponses.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6MalformedResponses.setDescription('Malformed response packets. ')
hwRadiusStatAcctIpv6BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6BadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6BadAuthenticators.setDescription('Bad packets. ')
hwRadiusStatAcctIpv6PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6PendingRequests.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6PendingRequests.setDescription('Pending packets. ')
hwRadiusStatAcctIpv6Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Timeouts.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Timeouts.setDescription('Timeout packets. ')
hwRadiusStatAcctIpv6UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6UnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6UnknownTypes.setDescription('Unknown packets. ')
hwRadiusStatAcctIpv6DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6DroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6DroppedPackets.setDescription('Dropped packets. ')
hwRadiusAttrCountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11), )
if mibBuilder.loadTexts: hwRadiusAttrCountTable.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAttrCountTable.setDescription('Radius attribute count table. ')
hwRadiusAttrCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwAttributeName"))
if mibBuilder.loadTexts: hwRadiusAttrCountEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAttrCountEntry.setDescription('Description.')
hwAttributeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAttributeName.setStatus('current')
if mibBuilder.loadTexts: hwAttributeName.setDescription('The attribute name. ')
hwAuthRequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthRequestPacketNum.setStatus('current')
if mibBuilder.loadTexts: hwAuthRequestPacketNum.setDescription('The number of attribute in authentication request packet. ')
hwAuthAcceptPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthAcceptPacketNum.setStatus('current')
if mibBuilder.loadTexts: hwAuthAcceptPacketNum.setDescription('The number of attribute in authentication accept packet. ')
hwAuthRejectPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthRejectPacketNum.setStatus('current')
if mibBuilder.loadTexts: hwAuthRejectPacketNum.setDescription('The number of attribute in authentication reject packet. ')
hwAcctRequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcctRequestPacketNum.setStatus('current')
if mibBuilder.loadTexts: hwAcctRequestPacketNum.setDescription('The number of attribute in accounting request packet. ')
hwAcctResponsePacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcctResponsePacketNum.setStatus('current')
if mibBuilder.loadTexts: hwAcctResponsePacketNum.setDescription('The number of attribute in accounting response packet. ')
hwCOARequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCOARequestPacketNum.setStatus('current')
if mibBuilder.loadTexts: hwCOARequestPacketNum.setDescription('The number of attribute in COA request packet. ')
hwCOAAcknowledgePacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCOAAcknowledgePacketNum.setStatus('current')
if mibBuilder.loadTexts: hwCOAAcknowledgePacketNum.setDescription('The number of attribute in COA acknowledge packet. ')
hwDMRequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDMRequestPacketNum.setStatus('current')
if mibBuilder.loadTexts: hwDMRequestPacketNum.setDescription('The number of attribute in DM request packet. ')
hwDMAcknowledgePacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDMAcknowledgePacketNum.setStatus('current')
if mibBuilder.loadTexts: hwDMAcknowledgePacketNum.setDescription('The number of attribute in DM acknowledge packet. ')
hwRadiusMIBTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2))
hwRadiusTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 1))
hwStateChangeServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStateChangeServerIp.setStatus('current')
if mibBuilder.loadTexts: hwStateChangeServerIp.setDescription('IP address of authentication or accounting server which state is changed. ')
hwStateChangeServerVrf = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStateChangeServerVrf.setStatus('current')
if mibBuilder.loadTexts: hwStateChangeServerVrf.setDescription(' VPN-instance of authentication or accounting server which state is changed. ')
hwRadiusTrapsDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2))
hwRadiusServerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1))
hwRadiusAuthServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 1)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAuthServerUp.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthServerUp.setDescription(' 1 Notice/Trap name: Radius authentication server up 2 Notice/Trap generation cause: Radius authentication server up 3 Repair suggestions: Check radius authentication server status . ')
hwRadiusAuthServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 2)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAuthServerDown.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthServerDown.setDescription(' 1 Notice/Trap name: Radius authentication server down 2 Notice/Trap generation cause: Radius authentication server down 3 Repair suggestions: Check radius authentication server status . ')
hwRadiusAcctServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 3)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAcctServerUp.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAcctServerUp.setDescription(' 1 Notice/Trap name: Radius accounting server up 2 Notice/Trap generation cause: Radius accounting server up 3 Repair suggestions: Check radius accounting server status . ')
hwRadiusAcctServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 4)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAcctServerDown.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAcctServerDown.setDescription(' 1 Notice/Trap name: Radius accounting server down 2 Notice/Trap generation cause: Radius accounting server down 3 Repair suggestions: Check radius accounting server status . ')
hwRadiusConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3))
hwRadiusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 1))
hwRadiusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 1, 1)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusSettingGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusTrapObjectGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusTrapsDefineGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusCompliance = hwRadiusCompliance.setStatus('current')
if mibBuilder.loadTexts: hwRadiusCompliance.setDescription('The compliance statement for systems supporting the this module.')
hwRadiusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2))
hwRadiusGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 1)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupName"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerProtType"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerRetransmit"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerTimeout"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerAttrTran"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusPacketUnit"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusDomainInclude"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClassASCar"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAlgorithm"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerNasPortFmt"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupRowStatus"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSourceInterface"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerNasIpAddress"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerCallingStationId"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerCallingStationIdDelimiter"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAttributeNoExistPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusGroupGroup = hwRadiusGroupGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadiusGroupGroup.setDescription('The radius group.')
hwRadiusServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 2)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerIndex"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerType"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerVRF"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerIP"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerPort"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerWeight"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSecretKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerRowStatus"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerPktSendNumber"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerPktSendInterval"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSourceInterfaceEachServer"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerResponses"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSecretKeyType"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerDeadCount"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerDeadTime"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerDeadInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusServerGroup = hwRadiusServerGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadiusServerGroup.setDescription('The Radius Server group.')
hwRadiusClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 3)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientIP"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientVrf"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientGroupName"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusClientGroup = hwRadiusClientGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadiusClientGroup.setDescription('The Radius Client group.')
hwRadiusAuthorServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 4)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerIP"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerVrf"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerGroupName"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusAuthorServerGroup = hwRadiusAuthorServerGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadiusAuthorServerGroup.setDescription('The Radius Author Server group.')
hwRadiusSettingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 5)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwEnableSourcePortsExtended"), ("HUAWEI-BRAS-RADIUS-MIB", "hwSourcePortsExtendedStartPort"), ("HUAWEI-BRAS-RADIUS-MIB", "hwSourcePortsExtendedPortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusSettingGroup = hwRadiusSettingGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadiusSettingGroup.setDescription('The common setting of Radius server.')
hwRadiusTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 6)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusTrapObjectGroup = hwRadiusTrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadiusTrapObjectGroup.setDescription('The Radius Trap Object group.')
hwRadiusTrapsDefineGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 7)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthServerUp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthServerDown"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAcctServerUp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAcctServerDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusTrapsDefineGroup = hwRadiusTrapsDefineGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadiusTrapsDefineGroup.setDescription('The Radius Traps Define group.')
mibBuilder.exportSymbols("HUAWEI-BRAS-RADIUS-MIB", hwRadiusClientKey=hwRadiusClientKey, hwEnableSourcePortsExtended=hwEnableSourcePortsExtended, hwRadiusAuthorServerGroupName=hwRadiusAuthorServerGroupName, hwRadiusClassASCar=hwRadiusClassASCar, hwRadiusClientGroup=hwRadiusClientGroup, hwRadiusAlgorithm=hwRadiusAlgorithm, hwRadiusServerTimeout=hwRadiusServerTimeout, hwBRASRadius=hwBRASRadius, hwCOAAcknowledgePacketNum=hwCOAAcknowledgePacketNum, hwRadiusTotalDeadTime=hwRadiusTotalDeadTime, hwRadiusCompliances=hwRadiusCompliances, hwRadiusServerIndex=hwRadiusServerIndex, hwRadiusStatAuthorIpv4Accepts=hwRadiusStatAuthorIpv4Accepts, hwRadiusStatAuthenIpv6DroppedPackets=hwRadiusStatAuthenIpv6DroppedPackets, hwRadiusGroupName=hwRadiusGroupName, hwRadiusStatAuthenIpv4UnknownTypes=hwRadiusStatAuthenIpv4UnknownTypes, hwRadiusStatAcctIpv6UnknownTypes=hwRadiusStatAcctIpv6UnknownTypes, hwRadiusGroupTable=hwRadiusGroupTable, hwDMRequestPacketNum=hwDMRequestPacketNum, hwRadiusServerProtType=hwRadiusServerProtType, hwRadiusServerVRF=hwRadiusServerVRF, hwRadiusStatAuthenIpv6Requests=hwRadiusStatAuthenIpv6Requests, hwRadiusStatAuthorIpv4Requests=hwRadiusStatAuthorIpv4Requests, hwRadiusServerPort=hwRadiusServerPort, hwAuthAcceptPacketNum=hwAuthAcceptPacketNum, hwRadiusAuthServerUp=hwRadiusAuthServerUp, hwRadiusStatAuthorIpv4ServerType=hwRadiusStatAuthorIpv4ServerType, hwRadiusStatAcctIpv4Responses=hwRadiusStatAcctIpv4Responses, hwRadiusStatAuthenIpv4Entry=hwRadiusStatAuthenIpv4Entry, hwRadiusStatAuthenIpv6UnknownTypes=hwRadiusStatAuthenIpv6UnknownTypes, hwRadiusStatAuthenIpv4ServerIP=hwRadiusStatAuthenIpv4ServerIP, hwRadiusAuthorServerVrf=hwRadiusAuthorServerVrf, hwRadiusStatAuthenIpv4Accepts=hwRadiusStatAuthenIpv4Accepts, hwRadiusStatAuthenIpv6Rejects=hwRadiusStatAuthenIpv6Rejects, hwRadiusStatAuthorIpv4Entry=hwRadiusStatAuthorIpv4Entry, hwRadiusAuthServerDown=hwRadiusAuthServerDown, hwRadiusStatAuthorIpv4Rejects=hwRadiusStatAuthorIpv4Rejects, hwRadiusStatAuthenIpv6Retransmissions=hwRadiusStatAuthenIpv6Retransmissions, hwRadiusServerKeyType=hwRadiusServerKeyType, hwRadiusServerPktSendInterval=hwRadiusServerPktSendInterval, hwRadiusStatAuthenIpv4Timeouts=hwRadiusStatAuthenIpv4Timeouts, hwRadiusAuthorServerTable=hwRadiusAuthorServerTable, hwAcctResponsePacketNum=hwAcctResponsePacketNum, hwRadiusClientIP=hwRadiusClientIP, hwRadiusServerType=hwRadiusServerType, hwRadiusStatAcctIpv4ServerIP=hwRadiusStatAcctIpv4ServerIP, hwRadiusStatAcctIpv4Table=hwRadiusStatAcctIpv4Table, hwRadiusSetting=hwRadiusSetting, hwRadiusStatAuthenIpv4Rejects=hwRadiusStatAuthenIpv4Rejects, hwRadiusStatAcctIpv6Requests=hwRadiusStatAcctIpv6Requests, hwRadiusServerSecretKey=hwRadiusServerSecretKey, hwDMAcknowledgePacketNum=hwDMAcknowledgePacketNum, hwRadiusStatAuthenIpv6Entry=hwRadiusStatAuthenIpv6Entry, hwRadiusStatAcctIpv4Vrf=hwRadiusStatAcctIpv4Vrf, hwRadiusTrapsDefine=hwRadiusTrapsDefine, hwRadiusAuthorServerKeyType=hwRadiusAuthorServerKeyType, hwRadiusClientEntry=hwRadiusClientEntry, hwRadiusStatAcctIpv4Entry=hwRadiusStatAcctIpv4Entry, hwRadiusStatAcctIpv4UnknownTypes=hwRadiusStatAcctIpv4UnknownTypes, hwRadiusServerSourceInterface=hwRadiusServerSourceInterface, hwRadiusClientVrf=hwRadiusClientVrf, hwRadiusServerSourceInterfaceEachServer=hwRadiusServerSourceInterfaceEachServer, hwRadiusStatAuthenIpv6Table=hwRadiusStatAuthenIpv6Table, hwRadiusSettingEntry=hwRadiusSettingEntry, hwRadiusStatAcctIpv4PendingRequests=hwRadiusStatAcctIpv4PendingRequests, hwAcctRequestPacketNum=hwAcctRequestPacketNum, hwRadiusMIBTrap=hwRadiusMIBTrap, hwStateChangeServerIp=hwStateChangeServerIp, hwRadiusStatAuthenIpv6ServerIP=hwRadiusStatAuthenIpv6ServerIP, hwAuthRejectPacketNum=hwAuthRejectPacketNum, hwRadiusAttributeNoExistPolicy=hwRadiusAttributeNoExistPolicy, hwRadiusStatAcctIpv6PendingRequests=hwRadiusStatAcctIpv6PendingRequests, hwRadiusServerDeadCount=hwRadiusServerDeadCount, hwRadiusStatAcctIpv4Retransmissions=hwRadiusStatAcctIpv4Retransmissions, hwRadiusStatAuthenIpv4DroppedPackets=hwRadiusStatAuthenIpv4DroppedPackets, hwRadiusGroupRowStatus=hwRadiusGroupRowStatus, hwRadiusAcctServerUp=hwRadiusAcctServerUp, hwRadiusServerWeight=hwRadiusServerWeight, hwSourcePortsExtendedStartPort=hwSourcePortsExtendedStartPort, hwRadiusClientGroupName=hwRadiusClientGroupName, hwRadiusGroupObject=hwRadiusGroupObject, hwRadiusServerIP=hwRadiusServerIP, hwRadiusStatAuthenIpv4PendingRequests=hwRadiusStatAuthenIpv4PendingRequests, hwRadiusAttrCountEntry=hwRadiusAttrCountEntry, hwRadiusStatAcctIpv6DroppedPackets=hwRadiusStatAcctIpv6DroppedPackets, hwRadiusStatAuthorIpv4Vrf=hwRadiusStatAuthorIpv4Vrf, hwRadiusStatAcctIpv4Timeouts=hwRadiusStatAcctIpv4Timeouts, hwRadiusStatAuthorIpv4ServerIP=hwRadiusStatAuthorIpv4ServerIP, hwRadiusServerEntry=hwRadiusServerEntry, hwRadiusStatAuthenIpv4Table=hwRadiusStatAuthenIpv4Table, hwRadiusServerGroup=hwRadiusServerGroup, hwAuthRequestPacketNum=hwAuthRequestPacketNum, hwRadiusClientTable=hwRadiusClientTable, hwRadiusServerCallingStationIdDelimiter=hwRadiusServerCallingStationIdDelimiter, hwSourcePortsExtendedPortNum=hwSourcePortsExtendedPortNum, hwRadiusServerKey=hwRadiusServerKey, hwRadiusStatAuthorIpv4UnknownTypes=hwRadiusStatAuthorIpv4UnknownTypes, hwRadiusStatAuthenIpv4Retransmissions=hwRadiusStatAuthenIpv4Retransmissions, hwRadiusStatAuthenIpv4MalformedResponses=hwRadiusStatAuthenIpv4MalformedResponses, hwRadiusStatAcctIpv4BadAuthenticators=hwRadiusStatAcctIpv4BadAuthenticators, hwRadiusStatAcctIpv4DroppedPackets=hwRadiusStatAcctIpv4DroppedPackets, hwRadiusServerRetransmit=hwRadiusServerRetransmit, hwRadiusTotalDeadCount=hwRadiusTotalDeadCount, hwRadiusStatAcctIpv6Responses=hwRadiusStatAcctIpv6Responses, hwRadiusTrapObject=hwRadiusTrapObject, hwRadiusStatAuthenIpv4Challenges=hwRadiusStatAuthenIpv4Challenges, hwRadiusTrapsDefineGroup=hwRadiusTrapsDefineGroup, hwRadiusStatAuthorIpv4MalformedResponses=hwRadiusStatAuthorIpv4MalformedResponses, hwRadiusPacketUnit=hwRadiusPacketUnit, hwRadiusGroupGroup=hwRadiusGroupGroup, hwRadiusServerCallingStationId=hwRadiusServerCallingStationId, hwRadiusClientRowStatus=hwRadiusClientRowStatus, hwRadiusDomainInclude=hwRadiusDomainInclude, hwRadiusStatAuthenIpv4Requests=hwRadiusStatAuthenIpv4Requests, hwRadiusStatAuthenIpv6Timeouts=hwRadiusStatAuthenIpv6Timeouts, hwCOARequestPacketNum=hwCOARequestPacketNum, hwRadiusAuthorServerIP=hwRadiusAuthorServerIP, hwRadiusAcctServerDown=hwRadiusAcctServerDown, hwRadiusStatAcctIpv4Requests=hwRadiusStatAcctIpv4Requests, PYSNMP_MODULE_ID=hwBRASRadius, hwRadiusStatAcctIpv6MalformedResponses=hwRadiusStatAcctIpv6MalformedResponses, hwRadiusStatAuthenIpv6PendingRequests=hwRadiusStatAuthenIpv6PendingRequests, hwRadiusConformance=hwRadiusConformance, hwRadiusServerAttrTran=hwRadiusServerAttrTran, hwRadiusSettingGroup=hwRadiusSettingGroup, hwRadiusServerResponses=hwRadiusServerResponses, hwRadiusStatAcctIpv6Retransmissions=hwRadiusStatAcctIpv6Retransmissions, hwRadiusClientKeyType=hwRadiusClientKeyType, hwRadiusStatAuthenIpv4BadAuthenticators=hwRadiusStatAuthenIpv4BadAuthenticators, hwRadiusAuthorServerGroup=hwRadiusAuthorServerGroup, hwRadiusStatAuthenIpv6Challenges=hwRadiusStatAuthenIpv6Challenges, hwRadiusServerDeadInterval=hwRadiusServerDeadInterval, hwRadiusStatAcctIpv6Timeouts=hwRadiusStatAcctIpv6Timeouts, hwRadiusStatAuthenIpv6Accepts=hwRadiusStatAuthenIpv6Accepts, hwRadiusStatAcctIpv6BadAuthenticators=hwRadiusStatAcctIpv6BadAuthenticators, hwRadiusGroupEntry=hwRadiusGroupEntry, hwRadiusAuthorServerKey=hwRadiusAuthorServerKey, hwRadiusStatAuthenIpv6BadAuthenticators=hwRadiusStatAuthenIpv6BadAuthenticators, hwRadiusStatAuthorIpv4Timeouts=hwRadiusStatAuthorIpv4Timeouts, hwResetRadiusAttrCount=hwResetRadiusAttrCount, hwRadiusStatAcctIpv4MalformedResponses=hwRadiusStatAcctIpv4MalformedResponses, hwRadiusStatAcctIpv6Table=hwRadiusStatAcctIpv6Table, hwAttributeName=hwAttributeName, hwRadiusServerDeadTime=hwRadiusServerDeadTime, hwRadiusStatAcctIpv6Entry=hwRadiusStatAcctIpv6Entry, hwRadiusAttrCountTable=hwRadiusAttrCountTable, hwRadiusStatAuthorIpv4Table=hwRadiusStatAuthorIpv4Table, hwStateChangeServerVrf=hwStateChangeServerVrf, hwRadiusServerNasPortFmt=hwRadiusServerNasPortFmt, hwRadiusStatAuthenIpv4Vrf=hwRadiusStatAuthenIpv4Vrf, hwRadiusStatAcctIpv6ServerIP=hwRadiusStatAcctIpv6ServerIP, hwRadiusAuthorServerRowStatus=hwRadiusAuthorServerRowStatus, hwRadiusStatAuthenIpv6MalformedResponses=hwRadiusStatAuthenIpv6MalformedResponses, hwRadiusServerTable=hwRadiusServerTable, hwRadiusStatAuthorIpv4DroppedPackets=hwRadiusStatAuthorIpv4DroppedPackets, hwRadiusServerTraps=hwRadiusServerTraps, hwRadiusGroups=hwRadiusGroups, hwRadiusServerNasIpAddress=hwRadiusServerNasIpAddress, hwRadiusResetStatAll=hwRadiusResetStatAll, hwRadiusTotalDeadInterval=hwRadiusTotalDeadInterval, hwRadiusAuthorServerEntry=hwRadiusAuthorServerEntry, hwRadiusStatAuthorIpv4Retransmissions=hwRadiusStatAuthorIpv4Retransmissions, hwRadiusServerSecretKeyType=hwRadiusServerSecretKeyType, hwRadiusServerPktSendNumber=hwRadiusServerPktSendNumber, hwRadiusServerRowStatus=hwRadiusServerRowStatus, hwRadiusCompliance=hwRadiusCompliance, hwRadiusTrapObjectGroup=hwRadiusTrapObjectGroup, hwRadiusStatAuthorIpv4BadAuthenticators=hwRadiusStatAuthorIpv4BadAuthenticators)
