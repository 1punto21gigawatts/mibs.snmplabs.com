#
# PySNMP MIB module CENTILLION-ROOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-ROOT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, Gauge32, iso, TimeTicks, Unsigned32, Counter64, enterprises, Integer32, NotificationType, Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Gauge32", "iso", "TimeTicks", "Unsigned32", "Counter64", "enterprises", "Integer32", "NotificationType", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
Counter32, = mibBuilder.importSymbols("SNMPv2-SMI-v1", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class StatusIndicator(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class SsBackplaneType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("atmBus", 2))

class SsChassisType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("six-slot", 2), ("twelve-slot", 3), ("workgroup", 4), ("three-slotC50N", 5), ("three-slotC50T", 6), ("six-slotBH5005", 7))

class SsModuleType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))
    namedValues = NamedValues(("empty", 1), ("other", 2), ("mTR4PC", 3), ("mTRMCP4PC", 4), ("mATM", 5), ("mTRFiber", 6), ("mTRMCPFiber", 7), ("mEther16PC10BT", 8), ("mEtherMCP8PC10BT", 9), ("mATM2PSMFiber", 10), ("mATM2PCopper", 11), ("mATM4PMMFiber", 12), ("mATM4PSMFiber", 13), ("mATM4PCopper", 14), ("mATMMCP2PSMFiber", 15), ("mATMMCP2PMMFiber", 16), ("mATMMCP2PCopper", 17), ("mATMMCP4PSMFiber", 18), ("mATMMCP4PMMFiber", 19), ("mATMMCP4PCopper", 20), ("mATM2PC", 21), ("mATM4PC", 22), ("mATMMCP2PC", 23), ("mATMMCP4PC", 24), ("mEther16P10BT100BTCopper", 25), ("mEther14P10BT100BF", 26), ("mEther8P10BF", 27), ("mEther10P10BT100BT", 28), ("mEther16P10BT100BTMixed", 29), ("mEther10P10BT100BTMIX", 30), ("mEther12PBFL", 32), ("mEther16P4x4", 33), ("mTRMCP8PC", 34), ("mTR8PC", 35), ("mEther24PC", 36), ("mEther24P10BT100BT", 37), ("mEther24P100BFx", 38), ("mTR8PFiber", 39), ("mATM4PMDA", 40), ("mATMMCP4PMDA", 41), ("mEther4P100BT", 42), ("mTR24PC", 43), ("mTR16PC", 44), ("mATMMCP1PSMFiber", 45), ("mATMMCP1PMMFiber", 46), ("mATM1PMMFiber", 47), ("mATM1PVNR", 48), ("mEther24P10BT100BTx", 49), ("mEther24P100BFX", 50))

class SsMediaType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("mediaUnkown", 1), ("mediaTokenRing", 2), ("mediaFDDI", 3), ("mediaEthernet", 4), ("mediaATM", 5))

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class BitField(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("clear", 1), ("set", 2))

class PortId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class CardId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class FailIndicator(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class EnableIndicator(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

centillion = MibIdentifier((1, 3, 6, 1, 4, 1, 930))
cnProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1))
proprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2))
extensions = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3))
cnTemporary = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 4))
cnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1))
cnATM = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2))
sysChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 1))
sysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2))
sysMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 3))
sysTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 4))
sysEvtLogMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 5))
atmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 1))
atmMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 2))
atmLane = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 3))
atmSonet = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 4))
sysMcpRedundTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 4, 1))
cnPvcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 4, 2))
cnCentillion100 = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1, 1))
cnIBM8251 = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1, 2))
cnBayStack301 = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1, 3))
cn5000BH_MCP = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1, 4)).setLabel("cn5000BH-MCP")
cnCentillion50N = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1, 5))
cnCentillion50T = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1, 6))
cn5005BH_MCP = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 1, 7)).setLabel("cn5005BH-MCP")
chassisType = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 1), SsChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
if mibBuilder.loadTexts: chassisType.setDescription('The chassis type.')
chassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 2), SsBackplaneType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBkplType.setStatus('mandatory')
if mibBuilder.loadTexts: chassisBkplType.setDescription('The chassis backplane type.')
chassisPs1FailStatus = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 3), FailIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs1FailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chassisPs1FailStatus.setDescription('Power supply 1 failure indicator. A value of on (1) indicates a failure on power supply 1.')
chassisPs2FailStatus = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 4), FailIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs2FailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chassisPs2FailStatus.setDescription('Power supply 2 failure indicator. A value of on (1) indicates a failure on power supply 2.')
chassisFanFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 5), FailIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanFailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chassisFanFailStatus.setDescription('System chassis fan failure indicator. A value of on (1) indicates a failure on one or both of the system fans.')
chassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSerialNumber.setDescription('Chassis serial number.')
chassisPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chassisPartNumber.setDescription('Chassis part number.')
slotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9), )
if mibBuilder.loadTexts: slotConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotConfigTable.setDescription('The chassis slot configuration table.')
slotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1), ).setIndexNames((0, "CENTILLION-ROOT-MIB", "slotNumber"))
if mibBuilder.loadTexts: slotConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotConfigEntry.setDescription('What type of module is in each slot of the chassis.')
slotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slotNumber.setDescription('The chassis slot number. Valid entries are system dependent based on the chassis type.')
slotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 2), SsModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleType.setStatus('deprecated')
if mibBuilder.loadTexts: slotModuleType.setDescription('Module type.')
slotModuleHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleHwVer.setDescription('The hardware revision of the module.')
slotModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleSerialNumber.setDescription('Module serial number. Format is 3 BCD digits.')
slotModuleSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleSwVer.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleSwVer.setDescription('The software revision of the module.')
slotModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleStatus.setDescription('This indicates the operational status of the module.')
slotModuleLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleLeds.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleLeds.setDescription('Status of the module LEDs. Each LED bank is encoded in four bits (nibble), one bit for each LED. The least significant bit of each nibble represents the bottom LED of each bank. The first octet in the string, as read from left to right represents the first LED banks.')
slotModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotModuleReset.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleReset.setDescription('This indicates the reset state of the module. Writing with the value reset (2) will reset the module.')
slotConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 9), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotConfigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slotConfigDelete.setDescription('Setting this object causes the configuration of the slot to be deleted. When read, this object has a value of false(2).')
slotConfigMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 10), SsMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotConfigMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: slotConfigMediaType.setDescription('The configured card media type. In the case of a card mismatch, the configured media type and the module type will not match.')
slotModuleMaxRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleMaxRAM.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleMaxRAM.setDescription('This indicates maximum RAM size in KB can be installed in this module.')
slotModuleInstalledRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleInstalledRAM.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleInstalledRAM.setDescription('This indicates installed RAM in KB of this module.')
slotModuleFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleFlashSize.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleFlashSize.setDescription('This indicates installed flash size in KB of this module.')
slotModuleProductImageId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("noAtmLanEmulation", 2), ("minAtmLanEmulation", 3), ("fullAtmLanEmulation", 4), ("pnnifullAtmLanEmulation", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleProductImageId.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleProductImageId.setDescription('This indicates the product target image id of this module.')
slotModuleBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleBaseMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slotModuleBaseMacAddress.setDescription("This object returns the module base Mac address. A physical port's default Mac address can be computed based on this address by using following computation: Port(n)MacAddress = Moudle base Mac address + Port(n); where (n) is the 0-based port number.")
slotLastResetEPC = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLastResetEPC.setStatus('mandatory')
if mibBuilder.loadTexts: slotLastResetEPC.setDescription('The programe counter realated to the last reset.')
slotLastResetVirtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLastResetVirtualAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slotLastResetVirtualAddress.setDescription('The bus address.')
slotLastResetCause = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLastResetCause.setStatus('mandatory')
if mibBuilder.loadTexts: slotLastResetCause.setDescription('Register value related to the last reset')
slotLastResetTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLastResetTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: slotLastResetTimeStamp.setDescription('A integer value of the system clock since last reset.')
slotConfigAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 20), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotConfigAdd.setStatus('mandatory')
if mibBuilder.loadTexts: slotConfigAdd.setDescription('Setting this object causes the configuration of the slot to be updated to match the module currently in the slot. When read, this object always returns false(2).')
slotConfigExtClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotConfigExtClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: slotConfigExtClockSource.setDescription('This field indicates the external clock source. 0 = Local Oscillator, 1..N = ATM port id for external clock source. This object only applies to ATM MDA modules with SM, MM, or UTP media types.')
slotConfigTrafficShapingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 1, 9, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotConfigTrafficShapingRate.setStatus('mandatory')
if mibBuilder.loadTexts: slotConfigTrafficShapingRate.setDescription('Configured traffic shaping rate in kilo bits per second on an ATM module. The actual rate may be different from the configured rate depending upon the physical interface of ports in the module.')
mibBuilder.exportSymbols("CENTILLION-ROOT-MIB", SsMediaType=SsMediaType, atmMonitor=atmMonitor, sysMcpRedundTrap=sysMcpRedundTrap, FailIndicator=FailIndicator, slotModuleSerialNumber=slotModuleSerialNumber, slotModuleReset=slotModuleReset, slotLastResetCause=slotLastResetCause, slotModuleFlashSize=slotModuleFlashSize, cnPvcTraps=cnPvcTraps, sysChassis=sysChassis, sysEvtLogMgmt=sysEvtLogMgmt, chassisPartNumber=chassisPartNumber, sysConfig=sysConfig, slotModuleSwVer=slotModuleSwVer, slotConfigExtClockSource=slotConfigExtClockSource, chassisType=chassisType, slotModuleInstalledRAM=slotModuleInstalledRAM, slotModuleType=slotModuleType, slotLastResetEPC=slotLastResetEPC, chassisFanFailStatus=chassisFanFailStatus, cn5005BH_MCP=cn5005BH_MCP, cnCentillion50N=cnCentillion50N, PortId=PortId, slotModuleMaxRAM=slotModuleMaxRAM, cnSystem=cnSystem, slotConfigEntry=slotConfigEntry, atmLane=atmLane, cnCentillion100=cnCentillion100, Boolean=Boolean, chassisPs2FailStatus=chassisPs2FailStatus, extensions=extensions, centillion=centillion, SsModuleType=SsModuleType, cnProducts=cnProducts, atmConfig=atmConfig, chassisBkplType=chassisBkplType, slotModuleLeds=slotModuleLeds, slotConfigAdd=slotConfigAdd, cnIBM8251=cnIBM8251, EnableIndicator=EnableIndicator, cnATM=cnATM, CardId=CardId, SsBackplaneType=SsBackplaneType, cnTemporary=cnTemporary, atmSonet=atmSonet, slotNumber=slotNumber, SsChassisType=SsChassisType, slotModuleHwVer=slotModuleHwVer, slotConfigTrafficShapingRate=slotConfigTrafficShapingRate, slotConfigDelete=slotConfigDelete, sysTrap=sysTrap, MacAddress=MacAddress, sysMonitor=sysMonitor, slotConfigMediaType=slotConfigMediaType, StatusIndicator=StatusIndicator, chassisPs1FailStatus=chassisPs1FailStatus, slotModuleProductImageId=slotModuleProductImageId, cnCentillion50T=cnCentillion50T, proprietary=proprietary, slotModuleStatus=slotModuleStatus, slotModuleBaseMacAddress=slotModuleBaseMacAddress, cnBayStack301=cnBayStack301, slotConfigTable=slotConfigTable, slotLastResetTimeStamp=slotLastResetTimeStamp, chassisSerialNumber=chassisSerialNumber, BitField=BitField, slotLastResetVirtualAddress=slotLastResetVirtualAddress, cn5000BH_MCP=cn5000BH_MCP)
