#
# PySNMP MIB module TPLINK-VLAN-QINQ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-VLAN-QINQ-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, IpAddress, MibIdentifier, ObjectIdentity, Counter64, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Gauge32, iso, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Counter64", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Gauge32", "iso", "Unsigned32", "ModuleIdentity")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
tplinkQinqVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 17))
tplinkQinqVlanMIB.setRevisions(('2008-12-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkQinqVlanMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkQinqVlanMIB.setLastUpdated('200812160000Z')
if mibBuilder.loadTexts: tplinkQinqVlanMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkQinqVlanMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkQinqVlanMIB.setDescription('VLAN-VPN (Virtual Private Network) function, the implement of a simple and flexible Layer 2 VPN technology, allows the packets with VLAN tags of private networks to be encapsulated with VLAN tags of public networks at the network access terminal of the Internet Service Provider. And these packets will be transmitted with double-tag across the public networks.')
tplinkQinqVlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1))
tplinkQinqVlanMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 17, 2))
vpnConfigVpnMode = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnConfigVpnMode.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVpnMode.setDescription('Allows you to Enable/Disable the VLAN-VPN function.')
vpnConfigTpid = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnConfigTpid.setStatus('current')
if mibBuilder.loadTexts: vpnConfigTpid.setDescription('Enter the global TPID (Tag protocol identifier).')
vpnConfigUplinkPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 3), )
if mibBuilder.loadTexts: vpnConfigUplinkPortTable.setStatus('current')
if mibBuilder.loadTexts: vpnConfigUplinkPortTable.setDescription('A list of upLink port.')
vpnConfigUplinkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vpnConfigUplinkPortEntry.setStatus('current')
if mibBuilder.loadTexts: vpnConfigUplinkPortEntry.setDescription('An entry contains of the port for uplink.')
vpnConfigUplinkPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnConfigUplinkPortEnable.setStatus('current')
if mibBuilder.loadTexts: vpnConfigUplinkPortEnable.setDescription('Select the desired port as the VPN Up-link port.')
vpnConfigPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 4))
vpnConfigPortEnableTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 4, 1), )
if mibBuilder.loadTexts: vpnConfigPortEnableTable.setStatus('current')
if mibBuilder.loadTexts: vpnConfigPortEnableTable.setDescription('A list of port status.')
vpnConfigPortEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vpnConfigPortEnableEntry.setStatus('current')
if mibBuilder.loadTexts: vpnConfigPortEnableEntry.setDescription('An entry contains of the port status.')
vpnConfigPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnConfigPortEnable.setStatus('current')
if mibBuilder.loadTexts: vpnConfigPortEnable.setDescription('Enable VLAN VPN of the select port.')
vpnConfigVlanMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5))
vpnConfigVlanMappingMode = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnConfigVlanMappingMode.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingMode.setDescription('Allows you to Enable/Disable the VLAN mapping function.')
vpnConfigVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 2), )
if mibBuilder.loadTexts: vpnConfigVlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingTable.setDescription('A list of vlan Mapping.')
vpnConfigVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 2, 1), ).setIndexNames((0, "TPLINK-VLAN-QINQ-MIB", "vpnConfigVlanMappingCVlan"), (0, "TPLINK-VLAN-QINQ-MIB", "vpnConfigVlanMappingPort"))
if mibBuilder.loadTexts: vpnConfigVlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingEntry.setDescription('An entry contains of the port for user auth .')
vpnConfigVlanMappingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 2, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpnConfigVlanMappingPort.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingPort.setDescription('')
vpnConfigVlanMappingCVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpnConfigVlanMappingCVlan.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingCVlan.setDescription('Enter the ID number of the Customer VLAN.')
vpnConfigVlanMappingSPVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpnConfigVlanMappingSPVlan.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingSPVlan.setDescription('Enter the ID number of the Service Provider VLAN.')
vpnConfigVlanMappingDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpnConfigVlanMappingDesc.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingDesc.setDescription('Give a description to the VLAN Mapping entry or leave it blank.')
vpnConfigVlanMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 17, 1, 5, 2, 1, 5), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpnConfigVlanMappingStatus.setStatus('current')
if mibBuilder.loadTexts: vpnConfigVlanMappingStatus.setDescription('the following values are states: these values may be used as follow: active(1),if the entry is being used. createAndGo(4),not being used destroy(6),destory the entry.')
mibBuilder.exportSymbols("TPLINK-VLAN-QINQ-MIB", vpnConfigVlanMapping=vpnConfigVlanMapping, vpnConfigVlanMappingTable=vpnConfigVlanMappingTable, vpnConfigTpid=vpnConfigTpid, vpnConfigVlanMappingEntry=vpnConfigVlanMappingEntry, vpnConfigVlanMappingSPVlan=vpnConfigVlanMappingSPVlan, vpnConfigUplinkPortTable=vpnConfigUplinkPortTable, vpnConfigUplinkPortEntry=vpnConfigUplinkPortEntry, vpnConfigPortEnableTable=vpnConfigPortEnableTable, vpnConfigPortEnable=vpnConfigPortEnable, vpnConfigVlanMappingPort=vpnConfigVlanMappingPort, vpnConfigVlanMappingStatus=vpnConfigVlanMappingStatus, tplinkQinqVlanMIBNotifications=tplinkQinqVlanMIBNotifications, vpnConfigVpnMode=vpnConfigVpnMode, vpnConfigUplinkPortEnable=vpnConfigUplinkPortEnable, vpnConfigVlanMappingMode=vpnConfigVlanMappingMode, vpnConfigVlanMappingDesc=vpnConfigVlanMappingDesc, vpnConfigVlanMappingCVlan=vpnConfigVlanMappingCVlan, vpnConfigPortEnableEntry=vpnConfigPortEnableEntry, PYSNMP_MODULE_ID=tplinkQinqVlanMIB, vpnConfigPort=vpnConfigPort, tplinkQinqVlanMIBObjects=tplinkQinqVlanMIBObjects, tplinkQinqVlanMIB=tplinkQinqVlanMIB)
