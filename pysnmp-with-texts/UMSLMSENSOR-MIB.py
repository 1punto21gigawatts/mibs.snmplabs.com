#
# PySNMP MIB module UMSLMSENSOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UMSLMSENSOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Unsigned32, MibIdentifier, Bits, Counter32, Counter64, IpAddress, iso, ModuleIdentity, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Unsigned32", "MibIdentifier", "Bits", "Counter32", "Counter64", "IpAddress", "iso", "ModuleIdentity", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
String, ibmpsgLMSensor, Sint8, Datetime, Uint16, Uint8, Sint16, Uint64, Real64, Real32, Boolean, Uint32, Sint32, Sint64 = mibBuilder.importSymbols("UMS-MIB", "String", "ibmpsgLMSensor", "Sint8", "Datetime", "Uint16", "Uint8", "Sint16", "Uint64", "Real64", "Real32", "Boolean", "Uint32", "Sint32", "Sint64")
iBMPSGTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1), )
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTable.setReference('IBMPSG_TemperatureSensor')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTable.setDescription('The IBMPSG_TemperatureSensor class represents an IBM managed Temperature Sensor.')
iBMPSGTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGTemperatureSensorKeyIndex"))
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEntry.setDescription('')
iBMPSGTemperatureSensorKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorKeyIndex.setReference('IBMPSG_TemperatureSensor.KeyIndex')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorKeyIndex.setDescription('')
iBMPSGTemperatureSensorCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 2), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorCurrentReading.setReference('IBMPSG_TemperatureSensor.CurrentReading')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorCurrentReading.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorCurrentReading.setDescription('')
iBMPSGTemperatureSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 3), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNominalReading.setReference('IBMPSG_TemperatureSensor.NominalReading')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNominalReading.setDescription('')
iBMPSGTemperatureSensorNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 4), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMax.setReference('IBMPSG_TemperatureSensor.NormalMax')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMax.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMax.setDescription('')
iBMPSGTemperatureSensorNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 5), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMin.setReference('IBMPSG_TemperatureSensor.NormalMin')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMin.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMin.setDescription('')
iBMPSGTemperatureSensorMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 6), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMaxReadable.setReference('IBMPSG_TemperatureSensor.MaxReadable')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMaxReadable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMaxReadable.setDescription('')
iBMPSGTemperatureSensorMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 7), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMinReadable.setReference('IBMPSG_TemperatureSensor.MinReadable')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMinReadable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMinReadable.setDescription('')
iBMPSGTemperatureSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 8), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorResolution.setReference('IBMPSG_TemperatureSensor.Resolution')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorResolution.setDescription('')
iBMPSGTemperatureSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 9), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTolerance.setReference('IBMPSG_TemperatureSensor.Tolerance')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTolerance.setDescription('')
iBMPSGTemperatureSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 10), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorAccuracy.setReference('IBMPSG_TemperatureSensor.Accuracy')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorAccuracy.setDescription('')
iBMPSGTemperatureSensorLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 11), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdNonCritical.setReference('IBMPSG_TemperatureSensor.LowerThresholdNonCritical')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdNonCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdNonCritical.setDescription('')
iBMPSGTemperatureSensorUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 12), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdNonCritical.setReference('IBMPSG_TemperatureSensor.UpperThresholdNonCritical')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdNonCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdNonCritical.setDescription('')
iBMPSGTemperatureSensorLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 13), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdCritical.setReference('IBMPSG_TemperatureSensor.LowerThresholdCritical')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdCritical.setDescription('')
iBMPSGTemperatureSensorUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 14), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdCritical.setReference('IBMPSG_TemperatureSensor.UpperThresholdCritical')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdCritical.setDescription('')
iBMPSGTemperatureSensorLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 15), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdFatal.setReference('IBMPSG_TemperatureSensor.LowerThresholdFatal')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdFatal.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdFatal.setDescription('')
iBMPSGTemperatureSensorUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 16), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdFatal.setReference('IBMPSG_TemperatureSensor.UpperThresholdFatal')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdFatal.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdFatal.setDescription('')
iBMPSGTemperatureSensorTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 17), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTempLocation.setReference('IBMPSG_TemperatureSensor.TempLocation')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTempLocation.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTempLocation.setDescription('The current temperature sensor location')
iBMPSGTemperatureSensorEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventsEnabled.setReference('IBMPSG_TemperatureSensor.EventsEnabled')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventsEnabled.setDescription('Event generation status.')
iBMPSGTemperatureSensorPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 19), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorPollingInterval.setReference('IBMPSG_TemperatureSensor.PollingInterval')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorPollingInterval.setDescription('Polling interval is measured in seconds. Value of zero indicates do it once and quit. Minimum polling interval is ten seconds.')
iBMPSGTemperatureSensorEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 20), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventAutoClearEnabled.setReference('IBMPSG_TemperatureSensor.EventAutoClearEnabled')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventAutoClearEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventAutoClearEnabled.setDescription('False means that events are only generated on state changes. True means that events are generated on state changes and periodically when the object is in a non-normal state.')
iBMPSGTemperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 21), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorStatus.setReference('IBMPSG_TemperatureSensor.Status')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTemperatureSensorStatus.setDescription('The Status property is a string indicating the current status of the object. Various operational and non-operational statuses can be defined. Operational statuses are OK, Degraded and Pred Fail. Pred Fail indicates that an element may be functioning properly but predicting a failure in the near future. An example is a SMART-enabled hard drive. Non-operational statuses can also be specified. These are Error, Starting, Stopping and Service. The latter, Service, could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither OK nor in one of the other states.')
iBMPSGVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2), )
if mibBuilder.loadTexts: iBMPSGVoltageSensorTable.setReference('IBMPSG_VoltageSensor')
if mibBuilder.loadTexts: iBMPSGVoltageSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorTable.setDescription('The IBMPSG_VoltageSensor class represents an IBM managed voltage Sensor')
iBMPSGVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGVoltageSensorKeyIndex"))
if mibBuilder.loadTexts: iBMPSGVoltageSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorEntry.setDescription('')
iBMPSGVoltageSensorKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorKeyIndex.setReference('IBMPSG_VoltageSensor.KeyIndex')
if mibBuilder.loadTexts: iBMPSGVoltageSensorKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorKeyIndex.setDescription('')
iBMPSGVoltageSensorCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 2), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorCurrentReading.setReference('IBMPSG_VoltageSensor.CurrentReading')
if mibBuilder.loadTexts: iBMPSGVoltageSensorCurrentReading.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorCurrentReading.setDescription('')
iBMPSGVoltageSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 3), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorNominalReading.setReference('IBMPSG_VoltageSensor.NominalReading')
if mibBuilder.loadTexts: iBMPSGVoltageSensorNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorNominalReading.setDescription('')
iBMPSGVoltageSensorNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 4), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMax.setReference('IBMPSG_VoltageSensor.NormalMax')
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMax.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMax.setDescription('')
iBMPSGVoltageSensorNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 5), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMin.setReference('IBMPSG_VoltageSensor.NormalMin')
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMin.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMin.setDescription('')
iBMPSGVoltageSensorMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 6), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorMaxReadable.setReference('IBMPSG_VoltageSensor.MaxReadable')
if mibBuilder.loadTexts: iBMPSGVoltageSensorMaxReadable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorMaxReadable.setDescription('')
iBMPSGVoltageSensorMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 7), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorMinReadable.setReference('IBMPSG_VoltageSensor.MinReadable')
if mibBuilder.loadTexts: iBMPSGVoltageSensorMinReadable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorMinReadable.setDescription('')
iBMPSGVoltageSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 8), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorResolution.setReference('IBMPSG_VoltageSensor.Resolution')
if mibBuilder.loadTexts: iBMPSGVoltageSensorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorResolution.setDescription('')
iBMPSGVoltageSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 9), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorTolerance.setReference('IBMPSG_VoltageSensor.Tolerance')
if mibBuilder.loadTexts: iBMPSGVoltageSensorTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorTolerance.setDescription('')
iBMPSGVoltageSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 10), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorAccuracy.setReference('IBMPSG_VoltageSensor.Accuracy')
if mibBuilder.loadTexts: iBMPSGVoltageSensorAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorAccuracy.setDescription('')
iBMPSGVoltageSensorLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 11), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdNonCritical.setReference('IBMPSG_VoltageSensor.LowerThresholdNonCritical')
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdNonCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdNonCritical.setDescription('')
iBMPSGVoltageSensorUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 12), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdNonCritical.setReference('IBMPSG_VoltageSensor.UpperThresholdNonCritical')
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdNonCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdNonCritical.setDescription('')
iBMPSGVoltageSensorLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 13), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdCritical.setReference('IBMPSG_VoltageSensor.LowerThresholdCritical')
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdCritical.setDescription('')
iBMPSGVoltageSensorUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 14), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdCritical.setReference('IBMPSG_VoltageSensor.UpperThresholdCritical')
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdCritical.setDescription('')
iBMPSGVoltageSensorLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 15), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdFatal.setReference('IBMPSG_VoltageSensor.LowerThresholdFatal')
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdFatal.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdFatal.setDescription('')
iBMPSGVoltageSensorUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 16), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdFatal.setReference('IBMPSG_VoltageSensor.UpperThresholdFatal')
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdFatal.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdFatal.setDescription('')
iBMPSGVoltageSensorVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 17), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorVoltageType.setReference('IBMPSG_VoltageSensor.VoltageType')
if mibBuilder.loadTexts: iBMPSGVoltageSensorVoltageType.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorVoltageType.setDescription('The Voltage Description')
iBMPSGVoltageSensorEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventsEnabled.setReference('IBMPSG_VoltageSensor.EventsEnabled')
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventsEnabled.setDescription('Event generation status.')
iBMPSGVoltageSensorPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 19), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorPollingInterval.setReference('IBMPSG_VoltageSensor.PollingInterval')
if mibBuilder.loadTexts: iBMPSGVoltageSensorPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorPollingInterval.setDescription('Polling interval is measured in seconds. Value of zero indicates do it once and quit. Minimum polling interval is ten seconds.')
iBMPSGVoltageSensorEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 20), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventAutoClearEnabled.setReference('IBMPSG_VoltageSensor.EventAutoClearEnabled')
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventAutoClearEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventAutoClearEnabled.setDescription('False means that events are only generated on state changes. True means that events are generated on state changes and periodically when the object is in a non-normal state.')
iBMPSGVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 21), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorStatus.setReference('IBMPSG_VoltageSensor.Status')
if mibBuilder.loadTexts: iBMPSGVoltageSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGVoltageSensorStatus.setDescription('The Status property is a string indicating the current status of the object. Various operational and non-operational statuses can be defined. Operational statuses are OK, Degraded and Pred Fail. Pred Fail indicates that an element may be functioning properly but predicting a failure in the near future. An example is a SMART-enabled hard drive. Non-operational statuses can also be specified. These are Error, Starting, Stopping and Service. The latter, Service, could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither OK nor in one of the other states.')
iBMPSGFanTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3), )
if mibBuilder.loadTexts: iBMPSGFanTable.setReference('IBMPSG_Fan')
if mibBuilder.loadTexts: iBMPSGFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanTable.setDescription('The IBMPSG_Fan class represents an IBM managed fan sensor')
iBMPSGFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGFanKeyIndex"))
if mibBuilder.loadTexts: iBMPSGFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanEntry.setDescription('')
iBMPSGFanKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanKeyIndex.setReference('IBMPSG_Fan.KeyIndex')
if mibBuilder.loadTexts: iBMPSGFanKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanKeyIndex.setDescription('')
iBMPSGFanVariableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 2), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanVariableSpeed.setReference('IBMPSG_Fan.VariableSpeed')
if mibBuilder.loadTexts: iBMPSGFanVariableSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanVariableSpeed.setDescription('')
iBMPSGFanDesiredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 3), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanDesiredSpeed.setReference('IBMPSG_Fan.DesiredSpeed')
if mibBuilder.loadTexts: iBMPSGFanDesiredSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanDesiredSpeed.setDescription('')
iBMPSGFanActiveCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 4), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanActiveCooling.setReference('IBMPSG_Fan.ActiveCooling')
if mibBuilder.loadTexts: iBMPSGFanActiveCooling.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanActiveCooling.setDescription('')
iBMPSGFanFanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 5), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanFanType.setReference('IBMPSG_Fan.FanType')
if mibBuilder.loadTexts: iBMPSGFanFanType.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanFanType.setDescription('The current fan type')
iBMPSGFanEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 6), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanEventsEnabled.setReference('IBMPSG_Fan.EventsEnabled')
if mibBuilder.loadTexts: iBMPSGFanEventsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanEventsEnabled.setDescription('Event generation status.')
iBMPSGFanPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 7), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanPollingInterval.setReference('IBMPSG_Fan.PollingInterval')
if mibBuilder.loadTexts: iBMPSGFanPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanPollingInterval.setDescription('Polling interval is measured in seconds. Value of zero indicates do it once and quit. Minimum polling interval is ten seconds.')
iBMPSGFanEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 8), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanEventAutoClearEnabled.setReference('IBMPSG_Fan.EventAutoClearEnabled')
if mibBuilder.loadTexts: iBMPSGFanEventAutoClearEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanEventAutoClearEnabled.setDescription('False means that events are only generated on state changes. True means that events are generated on state changes and periodically when the object is in a non-normal state.')
iBMPSGFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 9), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanStatus.setReference('IBMPSG_Fan.Status')
if mibBuilder.loadTexts: iBMPSGFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGFanStatus.setDescription('The Status property is a string indicating the current status of the object. Various operational and non-operational statuses can be defined. Operational statuses are OK, Degraded and Pred Fail. Pred Fail indicates that an element may be functioning properly but predicting a failure in the near future. An example is a SMART-enabled hard drive. Non-operational statuses can also be specified. These are Error, Starting, Stopping and Service. The latter, Service, could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither OK nor in one of the other states.')
iBMPSGSystemEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4), )
if mibBuilder.loadTexts: iBMPSGSystemEnclosureTable.setReference('IBMPSG_SystemEnclosure')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureTable.setDescription('The IBMPSG_SystemEnclosure class represents an IBM chassis sensor')
iBMPSGSystemEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGSystemEnclosureKeyIndex"))
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEntry.setDescription('')
iBMPSGSystemEnclosureKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureKeyIndex.setReference('IBMPSG_SystemEnclosure.KeyIndex')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureKeyIndex.setDescription('')
iBMPSGSystemEnclosureIntrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 2), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionStatus.setReference('IBMPSG_SystemEnclosure.IntrusionStatus')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionStatus.setDescription('The intrusion status')
iBMPSGSystemEnclosureIntrusionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 3), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionType.setReference('IBMPSG_SystemEnclosure.IntrusionType')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionType.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionType.setDescription('The intrusion status')
iBMPSGSystemEnclosureEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 4), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventsEnabled.setReference('IBMPSG_SystemEnclosure.EventsEnabled')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventsEnabled.setDescription('Event generation status.')
iBMPSGSystemEnclosurePollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 5), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosurePollingInterval.setReference('IBMPSG_SystemEnclosure.PollingInterval')
if mibBuilder.loadTexts: iBMPSGSystemEnclosurePollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosurePollingInterval.setDescription('Polling interval is measured in seconds. Value of zero indicates do it once and quit. Minimum polling interval is ten seconds.')
iBMPSGSystemEnclosureACLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 7), Uint16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureACLineStatus.setReference('IBMPSG_SystemEnclosure.ACLineStatus')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureACLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureACLineStatus.setDescription('This group defines status information about the AC line in the notebook')
iBMPSGSystemEnclosureDockingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 6), Uint16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureDockingStatus.setReference('IBMPSG_SystemEnclosure.DockingStatus')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureDockingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureDockingStatus.setDescription('This defines whether system is docked or not')
iBMPSGSystemEnclosureEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 8), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventAutoClearEnabled.setReference('IBMPSG_SystemEnclosure.EventAutoClearEnabled')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventAutoClearEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventAutoClearEnabled.setDescription('False means that events are only generated on state changes. True means that events are generated on state changes and periodically when the object is in a non-normal state.')
iBMPSGSystemEnclosureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 9), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureStatus.setReference('IBMPSG_SystemEnclosure.Status')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGSystemEnclosureStatus.setDescription('The Status property is a string indicating the current status of the object. Various operational and non-operational statuses can be defined. Operational statuses are OK, Degraded and Pred Fail. Pred Fail indicates that an element may be functioning properly but predicting a failure in the near future. An example is a SMART-enabled hard drive. Non-operational statuses can also be specified. These are Error, Starting, Stopping and Service. The latter, Service, could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither OK nor in one of the other states.')
iBMPSGTachometerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5), )
if mibBuilder.loadTexts: iBMPSGTachometerTable.setReference('IBMPSG_Tachometer')
if mibBuilder.loadTexts: iBMPSGTachometerTable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerTable.setDescription('The IBMPSG_Tachometer class represents an IBM managed Fan speed Sensor')
iBMPSGTachometerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGTachometerKeyIndex"))
if mibBuilder.loadTexts: iBMPSGTachometerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerEntry.setDescription('')
iBMPSGTachometerKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerKeyIndex.setReference('IBMPSG_Tachometer.KeyIndex')
if mibBuilder.loadTexts: iBMPSGTachometerKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerKeyIndex.setDescription('')
iBMPSGTachometerCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 2), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerCurrentReading.setReference('IBMPSG_Tachometer.CurrentReading')
if mibBuilder.loadTexts: iBMPSGTachometerCurrentReading.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerCurrentReading.setDescription('')
iBMPSGTachometerNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 3), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerNominalReading.setReference('IBMPSG_Tachometer.NominalReading')
if mibBuilder.loadTexts: iBMPSGTachometerNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerNominalReading.setDescription('')
iBMPSGTachometerNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 4), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerNormalMax.setReference('IBMPSG_Tachometer.NormalMax')
if mibBuilder.loadTexts: iBMPSGTachometerNormalMax.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerNormalMax.setDescription('')
iBMPSGTachometerNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 5), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerNormalMin.setReference('IBMPSG_Tachometer.NormalMin')
if mibBuilder.loadTexts: iBMPSGTachometerNormalMin.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerNormalMin.setDescription('')
iBMPSGTachometerMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 6), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerMaxReadable.setReference('IBMPSG_Tachometer.MaxReadable')
if mibBuilder.loadTexts: iBMPSGTachometerMaxReadable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerMaxReadable.setDescription('')
iBMPSGTachometerMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 7), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerMinReadable.setReference('IBMPSG_Tachometer.MinReadable')
if mibBuilder.loadTexts: iBMPSGTachometerMinReadable.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerMinReadable.setDescription('')
iBMPSGTachometerResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 8), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerResolution.setReference('IBMPSG_Tachometer.Resolution')
if mibBuilder.loadTexts: iBMPSGTachometerResolution.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerResolution.setDescription('')
iBMPSGTachometerTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 9), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerTolerance.setReference('IBMPSG_Tachometer.Tolerance')
if mibBuilder.loadTexts: iBMPSGTachometerTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerTolerance.setDescription('')
iBMPSGTachometerLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 10), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdNonCritical.setReference('IBMPSG_Tachometer.LowerThresholdNonCritical')
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdNonCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdNonCritical.setDescription('')
iBMPSGTachometerUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 11), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdNonCritical.setReference('IBMPSG_Tachometer.UpperThresholdNonCritical')
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdNonCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdNonCritical.setDescription('')
iBMPSGTachometerLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 12), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdCritical.setReference('IBMPSG_Tachometer.LowerThresholdCritical')
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdCritical.setDescription('')
iBMPSGTachometerUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 13), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdCritical.setReference('IBMPSG_Tachometer.UpperThresholdCritical')
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdCritical.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdCritical.setDescription('')
iBMPSGTachometerLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 14), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdFatal.setReference('IBMPSG_Tachometer.LowerThresholdFatal')
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdFatal.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdFatal.setDescription('')
iBMPSGTachometerUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 15), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdFatal.setReference('IBMPSG_Tachometer.UpperThresholdFatal')
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdFatal.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdFatal.setDescription('')
iBMPSGTachometerFanDescrip = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 16), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerFanDescrip.setReference('IBMPSG_Tachometer.FanDescrip')
if mibBuilder.loadTexts: iBMPSGTachometerFanDescrip.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerFanDescrip.setDescription('The Fan Description')
iBMPSGTachometerFanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 17), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerFanType.setReference('IBMPSG_Tachometer.FanType')
if mibBuilder.loadTexts: iBMPSGTachometerFanType.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerFanType.setDescription('The current fan type')
iBMPSGTachometerEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerEventsEnabled.setReference('IBMPSG_Tachometer.EventsEnabled')
if mibBuilder.loadTexts: iBMPSGTachometerEventsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerEventsEnabled.setDescription('Event generation status.')
iBMPSGTachometerEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 19), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerEventAutoClearEnabled.setReference('IBMPSG_Tachometer.EventAutoClearEnabled')
if mibBuilder.loadTexts: iBMPSGTachometerEventAutoClearEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerEventAutoClearEnabled.setDescription('False means that events are only generated on state changes. True means that events are generated on state changes and periodically when the object is in a non-normal state.')
iBMPSGTachometerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 20), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerStatus.setReference('IBMPSG_Tachometer.Status')
if mibBuilder.loadTexts: iBMPSGTachometerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iBMPSGTachometerStatus.setDescription('The Status property is a string indicating the current status of the object. Various operational and non-operational statuses can be defined. Operational statuses are OK, Degraded and Pred Fail. Pred Fail indicates that an element may be functioning properly but predicting a failure in the near future. An example is a SMART-enabled hard drive. Non-operational statuses can also be specified. These are Error, Starting, Stopping and Service. The latter, Service, could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither OK nor in one of the other states.')
mibBuilder.exportSymbols("UMSLMSENSOR-MIB", iBMPSGFanFanType=iBMPSGFanFanType, iBMPSGTachometerStatus=iBMPSGTachometerStatus, iBMPSGVoltageSensorStatus=iBMPSGVoltageSensorStatus, iBMPSGVoltageSensorEntry=iBMPSGVoltageSensorEntry, iBMPSGTemperatureSensorNominalReading=iBMPSGTemperatureSensorNominalReading, iBMPSGTachometerMinReadable=iBMPSGTachometerMinReadable, iBMPSGTachometerLowerThresholdFatal=iBMPSGTachometerLowerThresholdFatal, iBMPSGTachometerCurrentReading=iBMPSGTachometerCurrentReading, iBMPSGSystemEnclosureKeyIndex=iBMPSGSystemEnclosureKeyIndex, iBMPSGTemperatureSensorTolerance=iBMPSGTemperatureSensorTolerance, iBMPSGTemperatureSensorEventAutoClearEnabled=iBMPSGTemperatureSensorEventAutoClearEnabled, iBMPSGTachometerFanDescrip=iBMPSGTachometerFanDescrip, iBMPSGVoltageSensorNominalReading=iBMPSGVoltageSensorNominalReading, iBMPSGTachometerLowerThresholdNonCritical=iBMPSGTachometerLowerThresholdNonCritical, iBMPSGSystemEnclosureACLineStatus=iBMPSGSystemEnclosureACLineStatus, iBMPSGVoltageSensorPollingInterval=iBMPSGVoltageSensorPollingInterval, iBMPSGTemperatureSensorStatus=iBMPSGTemperatureSensorStatus, iBMPSGTachometerUpperThresholdFatal=iBMPSGTachometerUpperThresholdFatal, iBMPSGVoltageSensorMaxReadable=iBMPSGVoltageSensorMaxReadable, iBMPSGVoltageSensorEventsEnabled=iBMPSGVoltageSensorEventsEnabled, iBMPSGSystemEnclosurePollingInterval=iBMPSGSystemEnclosurePollingInterval, iBMPSGTachometerUpperThresholdNonCritical=iBMPSGTachometerUpperThresholdNonCritical, iBMPSGTemperatureSensorEntry=iBMPSGTemperatureSensorEntry, iBMPSGTachometerLowerThresholdCritical=iBMPSGTachometerLowerThresholdCritical, iBMPSGFanActiveCooling=iBMPSGFanActiveCooling, iBMPSGFanEventsEnabled=iBMPSGFanEventsEnabled, iBMPSGTemperatureSensorCurrentReading=iBMPSGTemperatureSensorCurrentReading, iBMPSGVoltageSensorAccuracy=iBMPSGVoltageSensorAccuracy, iBMPSGVoltageSensorUpperThresholdCritical=iBMPSGVoltageSensorUpperThresholdCritical, iBMPSGFanKeyIndex=iBMPSGFanKeyIndex, iBMPSGTemperatureSensorNormalMax=iBMPSGTemperatureSensorNormalMax, iBMPSGTemperatureSensorMinReadable=iBMPSGTemperatureSensorMinReadable, iBMPSGVoltageSensorMinReadable=iBMPSGVoltageSensorMinReadable, iBMPSGFanEntry=iBMPSGFanEntry, iBMPSGSystemEnclosureEntry=iBMPSGSystemEnclosureEntry, iBMPSGFanVariableSpeed=iBMPSGFanVariableSpeed, iBMPSGSystemEnclosureTable=iBMPSGSystemEnclosureTable, iBMPSGTachometerEventsEnabled=iBMPSGTachometerEventsEnabled, iBMPSGVoltageSensorCurrentReading=iBMPSGVoltageSensorCurrentReading, iBMPSGTemperatureSensorKeyIndex=iBMPSGTemperatureSensorKeyIndex, iBMPSGTemperatureSensorLowerThresholdFatal=iBMPSGTemperatureSensorLowerThresholdFatal, iBMPSGTachometerKeyIndex=iBMPSGTachometerKeyIndex, iBMPSGTemperatureSensorUpperThresholdCritical=iBMPSGTemperatureSensorUpperThresholdCritical, iBMPSGVoltageSensorLowerThresholdCritical=iBMPSGVoltageSensorLowerThresholdCritical, iBMPSGFanEventAutoClearEnabled=iBMPSGFanEventAutoClearEnabled, iBMPSGFanStatus=iBMPSGFanStatus, iBMPSGVoltageSensorLowerThresholdNonCritical=iBMPSGVoltageSensorLowerThresholdNonCritical, iBMPSGSystemEnclosureDockingStatus=iBMPSGSystemEnclosureDockingStatus, iBMPSGTemperatureSensorUpperThresholdFatal=iBMPSGTemperatureSensorUpperThresholdFatal, iBMPSGSystemEnclosureEventsEnabled=iBMPSGSystemEnclosureEventsEnabled, iBMPSGTachometerNormalMax=iBMPSGTachometerNormalMax, iBMPSGTachometerTolerance=iBMPSGTachometerTolerance, iBMPSGTemperatureSensorAccuracy=iBMPSGTemperatureSensorAccuracy, iBMPSGSystemEnclosureIntrusionType=iBMPSGSystemEnclosureIntrusionType, iBMPSGTachometerMaxReadable=iBMPSGTachometerMaxReadable, iBMPSGTachometerEntry=iBMPSGTachometerEntry, iBMPSGTemperatureSensorMaxReadable=iBMPSGTemperatureSensorMaxReadable, iBMPSGVoltageSensorResolution=iBMPSGVoltageSensorResolution, iBMPSGVoltageSensorKeyIndex=iBMPSGVoltageSensorKeyIndex, iBMPSGVoltageSensorNormalMax=iBMPSGVoltageSensorNormalMax, iBMPSGTachometerResolution=iBMPSGTachometerResolution, iBMPSGVoltageSensorUpperThresholdNonCritical=iBMPSGVoltageSensorUpperThresholdNonCritical, iBMPSGTemperatureSensorTable=iBMPSGTemperatureSensorTable, iBMPSGTachometerUpperThresholdCritical=iBMPSGTachometerUpperThresholdCritical, iBMPSGTachometerTable=iBMPSGTachometerTable, iBMPSGTemperatureSensorTempLocation=iBMPSGTemperatureSensorTempLocation, iBMPSGVoltageSensorTable=iBMPSGVoltageSensorTable, iBMPSGTemperatureSensorEventsEnabled=iBMPSGTemperatureSensorEventsEnabled, iBMPSGTemperatureSensorNormalMin=iBMPSGTemperatureSensorNormalMin, iBMPSGTemperatureSensorPollingInterval=iBMPSGTemperatureSensorPollingInterval, iBMPSGTachometerNormalMin=iBMPSGTachometerNormalMin, iBMPSGTachometerEventAutoClearEnabled=iBMPSGTachometerEventAutoClearEnabled, iBMPSGVoltageSensorNormalMin=iBMPSGVoltageSensorNormalMin, iBMPSGTemperatureSensorLowerThresholdCritical=iBMPSGTemperatureSensorLowerThresholdCritical, iBMPSGSystemEnclosureStatus=iBMPSGSystemEnclosureStatus, iBMPSGTemperatureSensorResolution=iBMPSGTemperatureSensorResolution, iBMPSGVoltageSensorEventAutoClearEnabled=iBMPSGVoltageSensorEventAutoClearEnabled, iBMPSGVoltageSensorVoltageType=iBMPSGVoltageSensorVoltageType, iBMPSGTemperatureSensorUpperThresholdNonCritical=iBMPSGTemperatureSensorUpperThresholdNonCritical, iBMPSGVoltageSensorTolerance=iBMPSGVoltageSensorTolerance, iBMPSGVoltageSensorLowerThresholdFatal=iBMPSGVoltageSensorLowerThresholdFatal, iBMPSGTachometerFanType=iBMPSGTachometerFanType, iBMPSGSystemEnclosureIntrusionStatus=iBMPSGSystemEnclosureIntrusionStatus, iBMPSGSystemEnclosureEventAutoClearEnabled=iBMPSGSystemEnclosureEventAutoClearEnabled, iBMPSGVoltageSensorUpperThresholdFatal=iBMPSGVoltageSensorUpperThresholdFatal, iBMPSGFanTable=iBMPSGFanTable, iBMPSGTemperatureSensorLowerThresholdNonCritical=iBMPSGTemperatureSensorLowerThresholdNonCritical, iBMPSGFanDesiredSpeed=iBMPSGFanDesiredSpeed, iBMPSGFanPollingInterval=iBMPSGFanPollingInterval, iBMPSGTachometerNominalReading=iBMPSGTachometerNominalReading)
