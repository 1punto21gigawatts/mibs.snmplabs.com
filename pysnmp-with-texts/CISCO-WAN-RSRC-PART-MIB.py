#
# PySNMP MIB module CISCO-WAN-RSRC-PART-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-RSRC-PART-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Integer32, TimeTicks, IpAddress, Counter32, Bits, iso, MibIdentifier, Unsigned32, ObjectIdentity, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Integer32", "TimeTicks", "IpAddress", "Counter32", "Bits", "iso", "MibIdentifier", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Counter64")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
ciscoWANRsrcPartMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 125))
ciscoWANRsrcPartMIB.setRevisions(('2002-09-14 00:00', '2002-03-06 00:00', '1999-10-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWANRsrcPartMIB.setRevisionsDescriptions(('Added the cwRsrcSvcAggrTable to manage SVC aggregate resources. Added the cwRsrcPartMIBComplianceRev1 which supersedes the cwRsrcPartMIBCompliance after the group cwRsrcSvcAggrGroup was added.', 'Made following changes: (1) Changed cwRsrcPartSignallingVpi range to be consistent with values defined in standard document. (2) Changed cwRsrcPartIlmiTable description.', 'Initial version of the MIB.',))
if mibBuilder.loadTexts: ciscoWANRsrcPartMIB.setLastUpdated('200209140000Z')
if mibBuilder.loadTexts: ciscoWANRsrcPartMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWANRsrcPartMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWANRsrcPartMIB.setDescription('The MIB module to manage resource partition objects. A resource partition is configured on a virtual interface (ifType value atmVirtual(149)) or atm interface (ifType value atm(37)). An administrator can partition connection related resources like VPI, VCI ranges, bandwidth and total amount of available connection entries in the switch through these MIB tables. Terminolgies used: VSI - Virtual Switch Interface, a hardware-independent switch control protocol. This allows a Switch to be controlled by a multiple controllers such as PNNI, MPLS. These control planes can be internal or external to the switch.The VSI interface defines the messages and associated functions which allow communication between the controller and the switch.This interface is expected to support all types of connections (voice,data,frame relay,ATM) for PVCs, SPVCs and SVCs. VSI Master - software component which requests connections and receives switch generic information. This controls one or more VSI Slaves. This may run on the switch or a dedicated controller platform. This is the master module.It performs the interface to the higher layer networking software and handles all VSI related functions. Controller - Software ( and possibly hardware) which manages topology and network resources and performs VSI Master function. This performs source routing for end-to-end SVCs, including general call acceptance GCAC,setup calls with other controllers. PNNI and MPLS are examples of controllers. ILMI - Integrated Local Management Interface (ILMI). An ATM Forum defined, SNMP-based management protocol for an ATM UNI. It provides interface status and configuration information, and also supports dynamic ATM address registration. CAC - Call Admission Control (CAC). When a new call coming to the gateway, a process checks the availability of the resources involved in the connection establishment before the gateway sets up the call. ATM - Asynchronous Transfer Mode (ATM). PNNI - Private Network to Network Interface (PNNI). MPLS - MultiProtocol Label Switching (MPLS). GCAC - Generic Connection Admittance Control (GCAC). PVC - Permanent Virtual Circuits (PVC). SVC - Switched Virtual Circuits (SVC). SPVC - Soft Permanent Virtual Circuits (SPVC). VPI - Virtual Path Identifier (VPI). VCI - Virtual Circuit Identifier (VCI). ')
ciscoWANRsrcPartMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 125, 1))
cwRsrcPartConfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1))
cwRsrcSvcAggrGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2))
cwRsrcPartConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1), )
if mibBuilder.loadTexts: cwRsrcPartConfTable.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartConfTable.setDescription('This table is for configuring resource partition parameters. A resource partition is configured on an interface whose ifType is atmVirtual(149) or atm(37). An entry can be added, deleted or modified. Entries in this table can be modified through the commands provided by the CLI also.')
cwRsrcPartConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartID"))
if mibBuilder.loadTexts: cwRsrcPartConfEntry.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartConfEntry.setDescription('An entry for a resource partition. A resource partition has to be created before connections can be added to the interface. In the following objects, ingress direction means, from network to switch, and egress direction means, from switch to network.')
cwRsrcPartID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cwRsrcPartID.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartID.setDescription('This is resource partition identifier. One interface can have multiple resource partitions on it.')
cwRsrcPartController = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartController.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartController.setDescription('This is controller identifier. Once a resource partition is added the controller identified by this identifier can access resources configured for this partition.')
cwRsrcPartEgrGuarPctBwConf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartEgrGuarPctBwConf.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartEgrGuarPctBwConf.setDescription("The guaranteed percentage bandwidth reserved for the resource partition in egress direction. The sum of all resource partition guaranteed bandwidths cannot exceed 100% of interface's guaranteed bandwidth.")
cwRsrcPartEgrMaxPctBwConf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartEgrMaxPctBwConf.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartEgrMaxPctBwConf.setDescription('The maximum percentage bandwidth for the resource partition in egress direction. This is not the guaranteed bandwidth. If bandwidth is available, the resource partition will be allocated bandwidth up to this value.')
cwRsrcPartIngGuarPctBwConf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartIngGuarPctBwConf.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIngGuarPctBwConf.setDescription("The guaranteed percentage bandwidth reserved for the resource partition in ingress direction. The sum of all resource partition guaranteed bandwidths cannot exceed 100% of the interface's guaranteed bandwidth.")
cwRsrcPartIngMaxPctBwConf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartIngMaxPctBwConf.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIngMaxPctBwConf.setDescription(' The maximum percentage bandwidth allocated for the resource partition in ingress direction. This is not the guaranteed bandwidth. If bandwidth is available, the resource partition will be allocated bandwidth up to this value.')
cwRsrcPartEgrPctBwUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwRsrcPartEgrPctBwUsed.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartEgrPctBwUsed.setDescription(' This is the percentage bandwidth used by the resource partition in egress direction.')
cwRsrcPartIngPctBwUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwRsrcPartIngPctBwUsed.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIngPctBwUsed.setDescription(' This is the percentage bandwidth used by the resource partition in ingress direction.')
cwRsrcPartEgrPctBwAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwRsrcPartEgrPctBwAvail.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartEgrPctBwAvail.setDescription(' This is the percentage bandwidth available on the resource partition in egress direction.')
cwRsrcPartIngPctBwAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('0.0001 percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwRsrcPartIngPctBwAvail.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIngPctBwAvail.setDescription(' This is the percentage bandwidth available on the resource partition in ingress direction.')
cwRsrcPartVpiLo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartVpiLo.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartVpiLo.setDescription('The beginning of the VPI range for this partition. Connections provisioned on this partition must have a VPI greater than or equal to this value.')
cwRsrcPartVpiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartVpiHigh.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartVpiHigh.setDescription('The end of the VPI range for this partition. Connections provisioned on this partition must have a VPI less than or equal to this value.')
cwRsrcPartVciLo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartVciLo.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartVciLo.setDescription('The beginning of the VCI range for this partition. Connections provisioned on this partition must have VCI greater than or equal to this VCI.')
cwRsrcPartVciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartVciHigh.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartVciHigh.setDescription('The end of the VCI range reserved for this partition. Connections provisioned on this partition must have a VCI less than or equal to this VCI.')
cwRsrcPartGuarCon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartGuarCon.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartGuarCon.setDescription('The guaranteed number of connections that can be configured on this partition.')
cwRsrcPartMaxCon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartMaxCon.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartMaxCon.setDescription('The maximum number of connections that can be configured on this partition.')
cwRsrcPartUsedCon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwRsrcPartUsedCon.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartUsedCon.setDescription('This is the number of connections currently in use on this partition.')
cwRsrcPartAvailCon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwRsrcPartAvailCon.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartAvailCon.setDescription('This is the number of connections available, that can be added on this partition.')
cwRsrcPartRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartRowStatus.setDescription('This will add, delete or modify the partition. Resource partition can be created by setting this object to createAndGo(4). Row may be deleted by setting this object to destroy(6).')
cwRsrcPartIlmiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2), )
if mibBuilder.loadTexts: cwRsrcPartIlmiTable.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiTable.setDescription('This is the ILMI configuration table. If the interface supports ILMI, the agent will automatically create a row in this table when a row is created in cwRsrcPartConfTable. The ILMI objects will be set with default values, i.e, with ILMI signalling disabled.')
cwRsrcPartIlmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartID"))
if mibBuilder.loadTexts: cwRsrcPartIlmiEntry.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiEntry.setDescription("If the interface supports ILMI, the agent will automatically create an entry in this table when a resource partition is created. By default, ILMI is disabled on resource partitions. ILMI can be enabled by setting 'cwRsrcPartIlmiEnabled' to 'true'. An entry will be deleted from this table when a corresponding resource partition entry is deleted from cwRsrcPartConfTable.")
cwRsrcPartIlmiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwRsrcPartIlmiEnabled.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiEnabled.setDescription("By setting the value of this object to 'true', ILMI signalling is enabled on the resource partition.")
cwRsrcPartSignallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwRsrcPartSignallingVpi.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartSignallingVpi.setDescription('Indicates the VPI on which signalling cells arrive on this resource partition.')
cwRsrcPartSignallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwRsrcPartSignallingVci.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartSignallingVci.setDescription('Indicates the VCI on which signalling cells arrive on this resource partition.')
cwRsrcPartIlmiTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwRsrcPartIlmiTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiTrapEnable.setDescription('ILMI trap generation can be enabled or disabled using this object.')
cwRsrcPartIlmiEstablishConPollIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwRsrcPartIlmiEstablishConPollIntvl.setReference('ATM Forum ILMI 4.0 Section 8.3.1')
if mibBuilder.loadTexts: cwRsrcPartIlmiEstablishConPollIntvl.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiEstablishConPollIntvl.setDescription('The amount of time S between successive transmissions of ILMI messages on this interface for the purpose of detecting establishment of ILMI connectivity.')
cwRsrcPartIlmiCheckConPollIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwRsrcPartIlmiCheckConPollIntvl.setReference('ATM Forum ILMI 4.0 Section 8.3.1')
if mibBuilder.loadTexts: cwRsrcPartIlmiCheckConPollIntvl.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiCheckConPollIntvl.setDescription('The amount of time T between successive transmissions of ILMI messages on this interface for the purpose of detecting loss of ILMI connectivity. The distinguished value zero disables ILMI connectivity procedures on this interface.')
cwRsrcPartIlmiConPollInactFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwRsrcPartIlmiConPollInactFactor.setReference('ATM Forum ILMI 4.0 Section 8.3.1')
if mibBuilder.loadTexts: cwRsrcPartIlmiConPollInactFactor.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiConPollInactFactor.setDescription('The number K of consecutive polls on this interface for which no ILMI response message is received before ILMI connectivity is declared lost.')
cwRsrcPartCtlrConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 3), )
if mibBuilder.loadTexts: cwRsrcPartCtlrConfTable.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartCtlrConfTable.setDescription('This table is for configuring additional controllers to manage a resource partition.')
cwRsrcPartCtlrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartID"), (0, "CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartCtlrController"))
if mibBuilder.loadTexts: cwRsrcPartCtlrConfEntry.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartCtlrConfEntry.setDescription('An entry for additional controllers to control an existing resource partition. The resource partition, identified by indices ifIndex and cwRsrcPartID, must exist in the cwRsrcPartConfTable. An entry from this table is deleted if the cwRsrcPartID associated entry from cwRsrcPartConfTable is deleted.')
cwRsrcPartCtlrController = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cwRsrcPartCtlrController.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartCtlrController.setDescription('This is controller identifier. One resource partition can be controlled by multiple controllers.User may want to do this to configure redundant controllers.')
cwRsrcPartCtlrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcPartCtlrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartCtlrRowStatus.setDescription('This is used to create a row in the cwRsrcPartCtlrConfTable. A redundant controller is added by setting this object to createAndGo(4). Row may be deleted by setting this object to destroy(6).')
cwRsrcSvcAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1), )
if mibBuilder.loadTexts: cwRsrcSvcAggregateTable.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggregateTable.setDescription('This table is for configuring an SVC aggregate resource within a resource partition. This provides aggregate bandwidth and VPI range within a resource partition that CAC (Call Admission Control) can dynamically allocate the required resource from it to establish a SVC connection for the incoming call. The allocated bandwidth will become available in the SVC aggregate when the call is torn down. When the required bandwidth of an incoming call exceeds the bandwidth available for SVC connection, the CAC will fail the establishment of the new call.')
cwRsrcSvcAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartID"))
if mibBuilder.loadTexts: cwRsrcSvcAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggregateEntry.setDescription('An entry of SVC Aggregate. An SVC Aggregate is used to reserve certain bandwidth in the resource partition to be dedicated for call set-up.')
cwRsrcSvcAggrVpiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcSvcAggrVpiLow.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrVpiLow.setDescription('The low end of the VPI range for this SVC aggregate. This value has to be greater than or equal to the value of cwRsrcPartVpiLo of the containing resource partition. SVC connection provisioned on this SVC aggregate must have a VPI greater than or equal to this value.')
cwRsrcSvcAggrVpiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcSvcAggrVpiHigh.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrVpiHigh.setDescription('The high end of the VPI range for this SVC aggregate. This value has to be less than or equal to the value of cwRsrcPartVpiHigh of the containing resource partition. SVC connection provisioned on this SVC aggregate must have a VPI less than or equal to this value. If cwRsrcSvcAggrVpiLow and cwRsrcSvcAggrVpiHigh are equal, then only one VSI is allocated for this SVC aggregate.')
cwRsrcSvcAggrEgrPctBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcSvcAggrEgrPctBw.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrEgrPctBw.setDescription("This object indicates the percentage egress bandwidth that is used by SVC connections within the resource partition. The total egress bandwidth will be used by SVC connections within the resource partition is determined by multiplying the value of this object and cwRsrcPartEgrGuarPctBwConf and port speed (ifSpeed). Total egress bandwidth available to SVCs = ifSpeed * cwRsrcPartEgrGuarPctBwConf * cwRsrcSvcAggrEgrPctBw Note that the total egress bandwidth for all PVC connections on the resource partition plus the egress bandwidth of SVC aggregate can't be greater than the maximum egress bandwidth (cwRsrcPartEgrMaxPctBwConf) of the containing resource partition.")
cwRsrcSvcAggrIngPctBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcSvcAggrIngPctBw.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrIngPctBw.setDescription("This object indicates the percentage ingress bandwidth that is used by SVC connections within the resource partition. The total ingress bandwidth will be used by SVC connections within the resource partition is determined by multiplying the value of this object and cwRsrcPartIngGuarPctBwConf and port speed (ifSpeed). Total ingress bandwidth available to SVCs = ifSpeed * cwRsrcPartIngGuarPctBwConf * cwRsrcSvcAggrIngPctBw Note that the total ingress bandwidth for all PVC connections on the resource partition plus the ingress bandwidth of SVC aggregate can't be greater than the maximum ingress bandwidth (cwRsrcPartIngMaxPctBwConf) of the containing resource partition.")
cwRsrcSvcAggrChanVADTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(100)).setUnits('0.0001').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcSvcAggrChanVADTolerance.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrChanVADTolerance.setDescription('The value in this object refers to the customer accepted drop rate for voice connections when the bandwidth usage exceeds allowed value. The actual range of this object is 0.0001(or 0.01%) to 1.00(or 100%). However, when the underlying CAC(Connection Admission Control) module is notified of the change in this object, then the value has to be divided by a factor of 10000.')
cwRsrcSvcAggrChanVADDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(61)).setUnits('0.01').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcSvcAggrChanVADDutyCycle.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrChanVADDutyCycle.setDescription('This object refers to the talk-spurts duty cycle. The actual range of this object is 0.01(or 1%) to 0.99(or 99%). When the value of this object is to be passed to underlying CAC module this value has to be divided by 100.')
cwRsrcSvcAggrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 125, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwRsrcSvcAggrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrRowStatus.setDescription('When an entry of the table is created, the following objects are mandatory: cwRsrcSvcAggrVpiLow cwRsrcSvcAggrVpiHigh cwRsrcSvcAggrEgrPctBw cwRsrcSvcAggrIngPctBw ')
cwRsrcPartMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 125, 3))
cwRsrcPartMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 1))
cwRsrcPartMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 2))
cwRsrcPartMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 1, 1)).setObjects(("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartMIBGroup"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIlmiMIBGroup"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwRsrcPartMIBCompliance = cwRsrcPartMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cwRsrcPartMIBCompliance.setDescription('The Compliance statement for Resource partition management group.')
cwRsrcPartMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 1, 2)).setObjects(("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartMIBGroup"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIlmiMIBGroup"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartMappingGroup"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwRsrcPartMIBComplianceRev1 = cwRsrcPartMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartMIBComplianceRev1.setDescription('The Compliance statement for Resource partition management group.')
cwRsrcPartMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 2, 1)).setObjects(("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartController"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartEgrGuarPctBwConf"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartEgrMaxPctBwConf"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIngGuarPctBwConf"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIngMaxPctBwConf"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartEgrPctBwAvail"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIngPctBwAvail"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartEgrPctBwUsed"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIngPctBwUsed"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartVpiLo"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartVpiHigh"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartVciLo"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartVciHigh"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartGuarCon"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartMaxCon"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartUsedCon"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartAvailCon"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwRsrcPartMIBGroup = cwRsrcPartMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartMIBGroup.setDescription('These are objects related to Resource partition group.')
cwRsrcPartIlmiMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 2, 2)).setObjects(("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIlmiEnabled"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartSignallingVpi"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartSignallingVci"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIlmiTrapEnable"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIlmiEstablishConPollIntvl"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIlmiCheckConPollIntvl"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartIlmiConPollInactFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwRsrcPartIlmiMIBGroup = cwRsrcPartIlmiMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartIlmiMIBGroup.setDescription('These are objects related to Ilmi configuration on a Resource partition.')
cwRsrcPartMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 2, 3)).setObjects(("CISCO-WAN-RSRC-PART-MIB", "cwRsrcPartCtlrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwRsrcPartMappingGroup = cwRsrcPartMappingGroup.setStatus('current')
if mibBuilder.loadTexts: cwRsrcPartMappingGroup.setDescription('These are objects used to configure redundant controllers for resource partitions.')
cwRsrcSvcAggrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 125, 3, 2, 4)).setObjects(("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrVpiLow"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrVpiHigh"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrEgrPctBw"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrIngPctBw"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrChanVADTolerance"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrChanVADDutyCycle"), ("CISCO-WAN-RSRC-PART-MIB", "cwRsrcSvcAggrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwRsrcSvcAggrGroup = cwRsrcSvcAggrGroup.setStatus('current')
if mibBuilder.loadTexts: cwRsrcSvcAggrGroup.setDescription('These are objects used to configure SVC aggregate within resource partitions.')
mibBuilder.exportSymbols("CISCO-WAN-RSRC-PART-MIB", cwRsrcPartMIBCompliance=cwRsrcPartMIBCompliance, cwRsrcPartIlmiTable=cwRsrcPartIlmiTable, cwRsrcPartIlmiMIBGroup=cwRsrcPartIlmiMIBGroup, cwRsrcPartIlmiTrapEnable=cwRsrcPartIlmiTrapEnable, cwRsrcPartIlmiEnabled=cwRsrcPartIlmiEnabled, cwRsrcPartIngPctBwAvail=cwRsrcPartIngPctBwAvail, cwRsrcPartSignallingVci=cwRsrcPartSignallingVci, cwRsrcPartAvailCon=cwRsrcPartAvailCon, cwRsrcSvcAggrVpiLow=cwRsrcSvcAggrVpiLow, cwRsrcSvcAggrVpiHigh=cwRsrcSvcAggrVpiHigh, cwRsrcPartMIBComplianceRev1=cwRsrcPartMIBComplianceRev1, PYSNMP_MODULE_ID=ciscoWANRsrcPartMIB, ciscoWANRsrcPartMIB=ciscoWANRsrcPartMIB, cwRsrcPartIlmiConPollInactFactor=cwRsrcPartIlmiConPollInactFactor, cwRsrcSvcAggrRowStatus=cwRsrcSvcAggrRowStatus, cwRsrcPartMIBConformance=cwRsrcPartMIBConformance, cwRsrcSvcAggrGroup=cwRsrcSvcAggrGroup, cwRsrcPartVpiLo=cwRsrcPartVpiLo, cwRsrcPartIlmiEstablishConPollIntvl=cwRsrcPartIlmiEstablishConPollIntvl, cwRsrcSvcAggregateEntry=cwRsrcSvcAggregateEntry, cwRsrcPartIngPctBwUsed=cwRsrcPartIngPctBwUsed, cwRsrcPartGuarCon=cwRsrcPartGuarCon, cwRsrcPartMIBGroup=cwRsrcPartMIBGroup, cwRsrcPartMappingGroup=cwRsrcPartMappingGroup, cwRsrcPartCtlrRowStatus=cwRsrcPartCtlrRowStatus, cwRsrcPartController=cwRsrcPartController, cwRsrcPartMIBGroups=cwRsrcPartMIBGroups, cwRsrcPartIlmiEntry=cwRsrcPartIlmiEntry, cwRsrcPartVpiHigh=cwRsrcPartVpiHigh, cwRsrcPartVciHigh=cwRsrcPartVciHigh, cwRsrcSvcAggrGrp=cwRsrcSvcAggrGrp, cwRsrcPartSignallingVpi=cwRsrcPartSignallingVpi, cwRsrcPartConfEntry=cwRsrcPartConfEntry, cwRsrcPartIngGuarPctBwConf=cwRsrcPartIngGuarPctBwConf, cwRsrcPartVciLo=cwRsrcPartVciLo, cwRsrcSvcAggregateTable=cwRsrcSvcAggregateTable, cwRsrcPartRowStatus=cwRsrcPartRowStatus, cwRsrcPartIlmiCheckConPollIntvl=cwRsrcPartIlmiCheckConPollIntvl, cwRsrcPartCtlrController=cwRsrcPartCtlrController, cwRsrcPartEgrMaxPctBwConf=cwRsrcPartEgrMaxPctBwConf, cwRsrcPartUsedCon=cwRsrcPartUsedCon, cwRsrcSvcAggrEgrPctBw=cwRsrcSvcAggrEgrPctBw, cwRsrcPartCtlrConfEntry=cwRsrcPartCtlrConfEntry, cwRsrcPartEgrGuarPctBwConf=cwRsrcPartEgrGuarPctBwConf, cwRsrcSvcAggrChanVADDutyCycle=cwRsrcSvcAggrChanVADDutyCycle, cwRsrcPartIngMaxPctBwConf=cwRsrcPartIngMaxPctBwConf, cwRsrcPartMaxCon=cwRsrcPartMaxCon, cwRsrcPartConfTable=cwRsrcPartConfTable, cwRsrcPartEgrPctBwUsed=cwRsrcPartEgrPctBwUsed, cwRsrcPartEgrPctBwAvail=cwRsrcPartEgrPctBwAvail, ciscoWANRsrcPartMIBObjects=ciscoWANRsrcPartMIBObjects, cwRsrcPartCtlrConfTable=cwRsrcPartCtlrConfTable, cwRsrcSvcAggrChanVADTolerance=cwRsrcSvcAggrChanVADTolerance, cwRsrcSvcAggrIngPctBw=cwRsrcSvcAggrIngPctBw, cwRsrcPartID=cwRsrcPartID, cwRsrcPartMIBCompliances=cwRsrcPartMIBCompliances, cwRsrcPartConfGrp=cwRsrcPartConfGrp)
