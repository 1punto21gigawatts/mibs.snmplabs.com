#
# PySNMP MIB module REDSTONE-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-SNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, iso, NotificationType, MibIdentifier, Counter64, ModuleIdentity, ObjectIdentity, Integer32, TimeTicks, Gauge32, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "iso", "NotificationType", "MibIdentifier", "Counter64", "ModuleIdentity", "ObjectIdentity", "Integer32", "TimeTicks", "Gauge32", "IpAddress", "Unsigned32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
rsSnmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 16))
rsSnmpMIB.setRevisions(('1999-07-27 00:00', '1998-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsSnmpMIB.setRevisionsDescriptions(('Add missing IMPLIED keyword to the INDEX clause of rsSnmpCommunityEntry.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: rsSnmpMIB.setLastUpdated('9907270000Z')
if mibBuilder.loadTexts: rsSnmpMIB.setOrganization('Redstone Communications, Inc.')
if mibBuilder.loadTexts: rsSnmpMIB.setContactInfo('Redstone Communications, Inc. 5 Carlisle Road Westford MA 01886 USA +1-978-692-1999 mib@redstonecom.com')
if mibBuilder.loadTexts: rsSnmpMIB.setDescription('MIB objects for configuring SNMP-based management access into Redstone Communications Inc. products.')
class RsSnmpCommunityName(DisplayString):
    description = 'An SNMP community name. The character repertoire of the string is restricted to printable, non-whitespace characters.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 31)

class RsSnmpTrapMask(TextualConvention, OctetString):
    description = "This octet string is interpreted as a bit mask, in which each bit corresponds to a category of SNMP trap. The DESCRIPTION clause of a MIB object having this SYNTAX should specify the semantics of bit values '1' and '0'. Bit definitions are as follows, where bit 31 is the most significant bit of the first octet, and bit 0 is the least significant bit of the fourth octet: Bit Category ----- ----------------------------------------------- 0 SNMP standard coldStart/warmStart/authenticationFailure 1 SNMP standard linkUp/linkDown 2 Platform inventory. 3 Environment (power, temperature, fan). 4 Bulkstats / accounting 5-31 Undefined."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

rsSnmpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1))
rsSnmpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 2))
rsSnmpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 1))
rsSnmpCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 2))
rsSnmpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3))
rsSnmpAuthFailId = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 4))
rsSnmpMaxPduSize = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(484, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsSnmpMaxPduSize.setStatus('current')
if mibBuilder.loadTexts: rsSnmpMaxPduSize.setDescription('The maximum sized SNMP PDU, in bytes, that this agent is capable of handling. The default is 1500 bytes. The posssibility of IP fragmentation should be considered when setting this object to large values.')
rsSnmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 2, 1), )
if mibBuilder.loadTexts: rsSnmpCommunityTable.setStatus('current')
if mibBuilder.loadTexts: rsSnmpCommunityTable.setDescription("Table of SNMP management clients. Authentic SNMP clients are identified by a combination community name and IP address. Upon receipt of an SNMP request, this table is scanned for a matching community name. If an entry containing a matching community name is found, the entry's IP access list, if nonzero, is used to validate the source IP address received in the request; else, if the IP access list number in the matching entry is zero, the source IP address is accepted. Finally, the type of SNMP request is validated with respect to the access privilege of the matching entry (e.g. a SET Request is rejected for an entry having read-only privilege). Use of this table constitutes 'trivial authentication', i.e. no mechanism is employed to confirm the received SNMP request was indeed originated by the host identified by the IP source address.")
rsSnmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 2, 1, 1), ).setIndexNames((1, "REDSTONE-SNMP-MIB", "rsSnmpCommunityName"))
if mibBuilder.loadTexts: rsSnmpCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: rsSnmpCommunityEntry.setDescription('A table entry describing an authentic SNMP Community.')
rsSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 2, 1, 1, 1), RsSnmpCommunityName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsSnmpCommunityName.setStatus('current')
if mibBuilder.loadTexts: rsSnmpCommunityName.setDescription('An SNMP community name.')
rsSnmpCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpCommunityRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsSnmpCommunityRowStatus.setDescription("Controls creation/deletion of entries in this table. Only 'createAndGo' and 'destroy' enumeration values are supported.")
rsSnmpCommunityPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("admin", 3))).clone('readOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpCommunityPrivilege.setStatus('current')
if mibBuilder.loadTexts: rsSnmpCommunityPrivilege.setDescription("The access privileges for a SNMP Community authenticated by this entry. readOnly Read-only access to nonadministrative portions of MIB. readWrite Read-write access to nonadministrative portions of MIB. admin Read-write access to entire MIB. 'Administrative' portions of the MIB are those portions that pertain to management access into the managed device.")
rsSnmpCommunityAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpCommunityAccessList.setStatus('current')
if mibBuilder.loadTexts: rsSnmpCommunityAccessList.setDescription('If nonzero, the number of an IP access list that describes the IP hosts permitted SNMP management access to this device via the corresponding community name contained in this entry.')
rsSnmpTrapGlobalFilter = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 1), RsSnmpTrapMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsSnmpTrapGlobalFilter.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapGlobalFilter.setDescription("This object provides global control over trap generation by this agent. For each bit position, a '1' or '0' indicates the corresponding trap category is enabled or disabled, respectively.")
rsSnmpTrapSource = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsSnmpTrapSource.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapSource.setDescription('The ifIndex of the interface whose IP address is used as the source IP address for outbound SNMP traps. If zero, no interface is specified, the mechanism for selecting a source IP address is implementation-dependent, and may vary with each trap sent.')
rsSnmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3), )
if mibBuilder.loadTexts: rsSnmpTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostTable.setDescription('Table of SNMP Trap recipient.')
rsSnmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1), ).setIndexNames((0, "REDSTONE-SNMP-MIB", "rsSnmpTrapHostIpAddress"))
if mibBuilder.loadTexts: rsSnmpTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostEntry.setDescription('A table entry describing an SNMP Trap recipient.')
rsSnmpTrapHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsSnmpTrapHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostIpAddress.setDescription('IP address of an authorized SNMP Trap recipient. This must be a host IP address.')
rsSnmpTrapHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpTrapHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostRowStatus.setDescription("Controls creation/deletion of entries in this table. Only 'createAndGo' and 'destroy' enumeration values are supported.")
rsSnmpTrapHostUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpTrapHostUdpPort.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostUdpPort.setDescription('The destination UDP port to which traps will be sent.')
rsSnmpTrapHostCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1, 4), RsSnmpCommunityName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpTrapHostCommunity.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostCommunity.setDescription('An SNMP community name to be used in traps sent to this destination.')
rsSnmpTrapHostProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1))).clone('v1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpTrapHostProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostProtocolVersion.setDescription('The format of the SNMP trap PDU to be sent to this trap destination. v1 Trap-PDU defined in RFC1157, encapsulated in Message structure also defined in RFC1157. v2c SNMPv2-Trap-PDU defined in RFC1905, encapsulated in Message structure defined in RFC1901.')
rsSnmpTrapHostFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1, 6), RsSnmpTrapMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsSnmpTrapHostFilter.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostFilter.setDescription("Bit mask designating the specific trap types enabled for transmission to this trap destination. For each bit position, a '1' or '0' indicates the corresponding trap type is enabled or disabled, respectively. Note, trap generation is further constrained by the value rsSnmpTrapGlobalFilter.")
rsSnmpTrapHostSends = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsSnmpTrapHostSends.setStatus('current')
if mibBuilder.loadTexts: rsSnmpTrapHostSends.setDescription('The number of traps submitted for transmission to this destination.')
rsSnmpAuthFailIdIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 4, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rsSnmpAuthFailIdIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsSnmpAuthFailIdIpAddress.setDescription('The source IP address contained in a received SNMP request that failed authentication.')
rsSnmpAuthFailIdUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 4, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rsSnmpAuthFailIdUdpPort.setStatus('current')
if mibBuilder.loadTexts: rsSnmpAuthFailIdUdpPort.setDescription('The source UDP port contained in a received SNMP request that failed authentication.')
rsSnmpAuthFailIdCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 4, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rsSnmpAuthFailIdCommunity.setStatus('current')
if mibBuilder.loadTexts: rsSnmpAuthFailIdCommunity.setDescription('The SNMP community contained in a received SNMP request that failed authentication.')
rsSnmpAuthFailIdReason = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 16, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("badCommunityName", 1), ("badCommmunityUse", 2), ("hostDenied", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rsSnmpAuthFailIdReason.setStatus('current')
if mibBuilder.loadTexts: rsSnmpAuthFailIdReason.setDescription("The reason a received SNMP request failed authentication: other Unspecified reason. badCommunityName The community is not recognized. badCommunityUse The community does not have privilege for the SNMP request type (e.g. SET request with a community having read-only privilege). hostDenied The host IP address was denied by the community's associated access list.")
rsSnmpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 2, 1))
rsSnmpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 16, 2, 2))
rsSnmpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 16, 2, 1, 1)).setObjects(("REDSTONE-SNMP-MIB", "rsSnmpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsSnmpCompliance = rsSnmpCompliance.setStatus('current')
if mibBuilder.loadTexts: rsSnmpCompliance.setDescription('The compliance statement for entities which implement the Redstone SNMP MIB.')
rsSnmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 16, 2, 2, 1)).setObjects(("REDSTONE-SNMP-MIB", "rsSnmpMaxPduSize"), ("REDSTONE-SNMP-MIB", "rsSnmpCommunityName"), ("REDSTONE-SNMP-MIB", "rsSnmpCommunityRowStatus"), ("REDSTONE-SNMP-MIB", "rsSnmpCommunityPrivilege"), ("REDSTONE-SNMP-MIB", "rsSnmpCommunityAccessList"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapGlobalFilter"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapSource"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapHostRowStatus"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapHostUdpPort"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapHostCommunity"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapHostProtocolVersion"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapHostFilter"), ("REDSTONE-SNMP-MIB", "rsSnmpTrapHostSends"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsSnmpGroup = rsSnmpGroup.setStatus('current')
if mibBuilder.loadTexts: rsSnmpGroup.setDescription('A collection of management objects pertaining to SNMP Agent capability in a Redstone product.')
mibBuilder.exportSymbols("REDSTONE-SNMP-MIB", rsSnmpTrap=rsSnmpTrap, rsSnmpTrapHostProtocolVersion=rsSnmpTrapHostProtocolVersion, PYSNMP_MODULE_ID=rsSnmpMIB, rsSnmpCommunityName=rsSnmpCommunityName, rsSnmpCompliance=rsSnmpCompliance, rsSnmpMIB=rsSnmpMIB, rsSnmpTrapHostCommunity=rsSnmpTrapHostCommunity, rsSnmpTrapHostEntry=rsSnmpTrapHostEntry, rsSnmpCommunityRowStatus=rsSnmpCommunityRowStatus, rsSnmpCommunityTable=rsSnmpCommunityTable, rsSnmpConformance=rsSnmpConformance, rsSnmpCompliances=rsSnmpCompliances, rsSnmpGroup=rsSnmpGroup, rsSnmpTrapHostFilter=rsSnmpTrapHostFilter, RsSnmpTrapMask=RsSnmpTrapMask, rsSnmpObjects=rsSnmpObjects, rsSnmpTrapGlobalFilter=rsSnmpTrapGlobalFilter, rsSnmpTrapHostIpAddress=rsSnmpTrapHostIpAddress, rsSnmpTrapHostRowStatus=rsSnmpTrapHostRowStatus, rsSnmpMaxPduSize=rsSnmpMaxPduSize, rsSnmpAuthFailId=rsSnmpAuthFailId, rsSnmpTrapHostSends=rsSnmpTrapHostSends, rsSnmpCommunityEntry=rsSnmpCommunityEntry, rsSnmpTrapSource=rsSnmpTrapSource, rsSnmpAuthFailIdCommunity=rsSnmpAuthFailIdCommunity, rsSnmpAuthFailIdUdpPort=rsSnmpAuthFailIdUdpPort, rsSnmpTrapHostUdpPort=rsSnmpTrapHostUdpPort, rsSnmpCommunity=rsSnmpCommunity, rsSnmpGeneral=rsSnmpGeneral, rsSnmpAuthFailIdReason=rsSnmpAuthFailIdReason, rsSnmpGroups=rsSnmpGroups, rsSnmpCommunityAccessList=rsSnmpCommunityAccessList, rsSnmpTrapHostTable=rsSnmpTrapHostTable, rsSnmpCommunityPrivilege=rsSnmpCommunityPrivilege, RsSnmpCommunityName=RsSnmpCommunityName, rsSnmpAuthFailIdIpAddress=rsSnmpAuthFailIdIpAddress)
