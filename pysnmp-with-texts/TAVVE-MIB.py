#
# PySNMP MIB module TAVVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TAVVE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
MacAddress, = mibBuilder.importSymbols("RFC1286-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, enterprises, Integer32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Gauge32, Counter32, NotificationType, IpAddress, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "enterprises", "Integer32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Gauge32", "Counter32", "NotificationType", "IpAddress", "iso", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tavve = MibIdentifier((1, 3, 6, 1, 4, 1, 2668))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1))
agents = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 2))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1))
custom = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 2))
eventWatch = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1))
tcpdmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 2))
ciscotrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3))
wwwmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4))
agentmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 5))
remote = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6))
pysmi_global = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 7)).setLabel("global")
portmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8))
syslogtrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 9))
atmmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 10))
xmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2668, 1, 1, 12))
tscEwSourceNode = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwSourceNode.setStatus('optional')
if mibBuilder.loadTexts: tscEwSourceNode.setDescription('The address of the node that was originally reported down.')
tscEwFaultAddr = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwFaultAddr.setStatus('optional')
if mibBuilder.loadTexts: tscEwFaultAddr.setDescription('The IP address of the node that was is the root cause.')
tscEwFaultTimes = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwFaultTimes.setStatus('optional')
if mibBuilder.loadTexts: tscEwFaultTimes.setDescription('A string with two time stamps in it: 1) the current time 2) the time the original failure was reported The time is printed in Unix time (seconds since Jan 1, 1970).')
tscEwSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwSourceAddr.setStatus('optional')
if mibBuilder.loadTexts: tscEwSourceAddr.setDescription('The address of the node being reported.')
tscEwGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwGroupName.setStatus('optional')
if mibBuilder.loadTexts: tscEwGroupName.setDescription('The group name (as defined to EventWatch to which this node belongs.')
tscEwSourceName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwSourceName.setStatus('optional')
if mibBuilder.loadTexts: tscEwSourceName.setDescription('The name of the node being reported.')
tscEwSourceProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwSourceProtocol.setStatus('optional')
if mibBuilder.loadTexts: tscEwSourceProtocol.setDescription('The protocol of the node being reported, e.g. IP.')
tscEwFaultName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwFaultName.setStatus('optional')
if mibBuilder.loadTexts: tscEwFaultName.setDescription('The name of the fault being reported.')
tscEwFaultProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwFaultProtocol.setStatus('optional')
if mibBuilder.loadTexts: tscEwFaultProtocol.setDescription('The protocol of the fault being reported, e.g. IP.')
tscEwUserThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwUserThreshold.setStatus('optional')
if mibBuilder.loadTexts: tscEwUserThreshold.setDescription('The value of the user defined threshold.')
tscEwSlaValue = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwSlaValue.setStatus('optional')
if mibBuilder.loadTexts: tscEwSlaValue.setDescription('The value of the group availability.')
tscEwReportHost = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwReportHost.setStatus('optional')
if mibBuilder.loadTexts: tscEwReportHost.setDescription('The name of the EventWatch host reporting the problem. Make sure all the Remote box names are resolvable.')
tscEwDownTime = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwDownTime.setStatus('optional')
if mibBuilder.loadTexts: tscEwDownTime.setDescription('The amount of time (in seconds) the device in question was down.')
tscEwEventTime = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwEventTime.setStatus('optional')
if mibBuilder.loadTexts: tscEwEventTime.setDescription('The time (Unix time) when this event occurred.')
tscEwDescr = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscEwDescr.setStatus('optional')
if mibBuilder.loadTexts: tscEwDescr.setDescription('The textual description of the entity.')
tscEwSourceDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,1)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"), ("TAVVE-MIB", "tscEwDescr"))
if mibBuilder.loadTexts: tscEwSourceDown.setDescription('Device is verified down. This trap is sent after EventWatch verifies a device is down and it is not correlated to a problem in the network. This trap configured with source-down-trap. The bound variables contain the address of the fault, its name, and its protocol.')
tscEwInferredDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,2)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwSourceNode"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwInferredDown.setDescription('Device is verified down. This trap is sent after EventWatch verifies a device is down and it is not correlated to a problem in the network. This trap configured with behind-down-trap.')
tscEwSourceUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,3)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwSourceUp.setDescription('Device is back up. This trap complements trap 1 to report that the source node is back up. This trap configured with source-up-trap.')
tscEwInferredUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,4)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwSourceNode"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwInferredUp.setDescription('Device is verified up. This trap complements trap 2 to report that the root cause node is back up. This trap configured with behind-up-trap.')
tscEwNodeDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,5)).setObjects(("TAVVE-MIB", "tscEwSourceAddr"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwNodeDown.setDescription('Device is verified down. This trap is issued when EventWatch is reporting the node down. Note this is the root cause node. This trap configured with level/trap.')
tscEwNodeUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,6)).setObjects(("TAVVE-MIB", "tscEwSourceAddr"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwNodeUp.setDescription('Device is back up after being verified down. This trap configured with level/trap.')
tscEwSlaThres = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,7)).setObjects(("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwUserThreshold"), ("TAVVE-MIB", "tscEwSlaValue"))
if mibBuilder.loadTexts: tscEwSlaThres.setDescription('The availability of this group or host fell below the user configured threshold. This trap configured with level/trap.')
tscEwRemoteSourceDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,11)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwRemoteSourceDown.setDescription('Device is verified down by Remote. This trap is sent after EventWatch on Remote verifies a device is down and it is not correlated to a problem in the network. This trap configured with source-down-trap. The bound variables contain the address of the fault, its name, and its protocol.')
tscEwRemoteInferredDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,12)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwSourceNode"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwRemoteInferredDown.setDescription('Device is verified down by Remote. This trap is sent after EventWatch on Remote verifies a device is down and it is not correlated to a problem in the network. This trap configured with behind-down-trap.')
tscEwRemoteSourceUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,13)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwDownTime"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwRemoteSourceUp.setDescription('Device is back up, reported by Remote. This trap complements trap 1 to report that the source node is back up on Remote. This trap configured with source-up-trap.')
tscEwRemoteInferredUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,14)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwSourceNode"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwDownTime"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwRemoteInferredUp.setDescription('Device is verified up by Remote. This trap complements trap 2 to report that the root cause node is back up on Remote. This trap configured with behind-up-trap.')
tscEwRemoteNodeDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,15)).setObjects(("TAVVE-MIB", "tscEwSourceAddr"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwRemoteNodeDown.setDescription('Device is verified down by Remote. This trap is issued when EventWatch is reporting the node down. Note this is the root cause node. This trap configured with level/trap.')
tscEwRemoteNodeUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,16)).setObjects(("TAVVE-MIB", "tscEwSourceAddr"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscEwRemoteNodeUp.setDescription('Device is back up after being verified down by Remote. This trap configured with level/trap.')
tscEwTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,91)).setObjects(("TAVVE-MIB", "tscEwEventTime"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceAddr"), ("TAVVE-MIB", "tscEwDescr"))
if mibBuilder.loadTexts: tscEwTestTrap.setDescription('EventWatch Test Notification. This trap is sent to EventWatch. It is used to verify that EventWatch can receive and send traps. This trap configured with test-trap. The bound variables contain the address of the device, its name, and its protocol.')
tscEwTestTrapRecv = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 1) + (0,92)).setObjects(("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwSourceProtocol"), ("TAVVE-MIB", "tscEwSourceName"), ("TAVVE-MIB", "tscEwSourceAddr"), ("TAVVE-MIB", "tscEwEventTime"), ("TAVVE-MIB", "tscEwDescr"))
if mibBuilder.loadTexts: tscEwTestTrapRecv.setDescription('EventWatch Test Notification. This trap is sent after EventWatch receives it. The status of the device reported is not actually verified. This trap configured with test-trap. The bound variables contain the address of the device, its name, and its protocol.')
tscTcpSourceNode = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscTcpSourceNode.setStatus('optional')
if mibBuilder.loadTexts: tscTcpSourceNode.setDescription('The address of the node on which the TCP reported.')
tscTCPPortName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscTCPPortName.setStatus('optional')
if mibBuilder.loadTexts: tscTCPPortName.setDescription('The Service Name of this particular port.')
tscTCPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscTCPPortNumber.setStatus('optional')
if mibBuilder.loadTexts: tscTCPPortNumber.setDescription('The Service Number of this particular port.')
tscTCPTime = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscTCPTime.setStatus('optional')
if mibBuilder.loadTexts: tscTCPTime.setDescription('The time at which the event occurred.')
tscCtLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscCtLogMessage.setStatus('optional')
if mibBuilder.loadTexts: tscCtLogMessage.setDescription('The message from log file suitable for logging. Format is: month day, time : facility-severity-mnemonic: message')
tscCtFacility = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscCtFacility.setStatus('optional')
if mibBuilder.loadTexts: tscCtFacility.setDescription('The Cisco facility from log message, e.g. IP, PIX.')
tscCtSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscCtSeverity.setStatus('optional')
if mibBuilder.loadTexts: tscCtSeverity.setDescription('The Cisco severity from log message, e.g. 0, 1, 2, 3, 4, 5, 6, 7, 8.')
tscCtMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscCtMnemonic.setStatus('optional')
if mibBuilder.loadTexts: tscCtMnemonic.setDescription('The Cisco Mnemonic from log message, e.g. DUPADDR.')
tscCtMessage = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscCtMessage.setStatus('optional')
if mibBuilder.loadTexts: tscCtMessage.setDescription('The Cisco message from log message (stripped of time stamp, facility, severity, mnemonic')
tscCtSeverity0 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,10)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity0.setDescription('Cisco device reporting a severity 0 event.')
tscCtSeverity1 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,11)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity1.setDescription('Cisco device reporting a severity 1 event.')
tscCtSeverity2 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,12)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity2.setDescription('Cisco device reporting a severity 2 event.')
tscCtSeverity3 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,13)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity3.setDescription('Cisco device reporting a severity 3 event.')
tscCtSeverity4 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,14)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity4.setDescription('Cisco device reporting a severity 4 event.')
tscCtSeverity5 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,15)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity5.setDescription('Cisco device reporting a severity 5 event.')
tscCtSeverity6 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,16)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity6.setDescription('Cisco device reporting a severity 6 event.')
tscCtSeverity7 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,17)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity7.setDescription('Cisco device reporting a severity 7 event.')
tscCtSeverity8 = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 3) + (0,18)).setObjects(("TAVVE-MIB", "tscCtLogMessage"), ("TAVVE-MIB", "tscCtFacility"), ("TAVVE-MIB", "tscCtSeverity"), ("TAVVE-MIB", "tscCtMnemonic"), ("TAVVE-MIB", "tscCtMessage"))
if mibBuilder.loadTexts: tscCtSeverity8.setDescription('Cisco device reporting a severity 8 event.')
wwwmonServerName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwmonServerName.setStatus('optional')
if mibBuilder.loadTexts: wwwmonServerName.setDescription("This is the web server's hostname")
wwwmonServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwmonServerPort.setStatus('optional')
if mibBuilder.loadTexts: wwwmonServerPort.setDescription('This is the web server port number.')
wwwmonServerURL = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwmonServerURL.setStatus('optional')
if mibBuilder.loadTexts: wwwmonServerURL.setDescription('This is the URL passed to the web server')
wwwmonServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwmonServerStatus.setStatus('optional')
if mibBuilder.loadTexts: wwwmonServerStatus.setDescription("This is the web server's status for the HEAD request.")
wwwmonUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,101)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonUp.setDescription('Wwwmon reporting the status change to Up from a web page query.')
wwwmonTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,102)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonTimeout.setDescription('Wwwmon reporting the status change to Timeout from a web page query.')
wwwmonRefd = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,103)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonRefd.setDescription('Wwwmon reporting the status change to Refused from a web page query.')
wwwmonUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,104)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonUnknown.setDescription('Wwwmon reporting the status change to Unknown from a web page query.')
wwwmonBusy = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,105)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonBusy.setDescription('Wwwmon reporting the status change to Busy from a web page query.')
wwwmonInfo = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,106)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonInfo.setDescription('Wwwmon reporting the status change to HTTP-Info from a web page query.')
wwwmonRedirect = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,107)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonRedirect.setDescription('Wwwmon reporting the status change to HTTP-Redirect from a web page query.')
wwwmonClient = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,108)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonClient.setDescription('Wwwmon reporting the status change to HTTP-Client-Err from a web page query.')
wwwmonServer = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 4) + (0,109)).setObjects(("TAVVE-MIB", "wwwmonServerName"), ("TAVVE-MIB", "wwwmonServerPort"), ("TAVVE-MIB", "wwwmonServerURL"), ("TAVVE-MIB", "wwwmonServerStatus"))
if mibBuilder.loadTexts: wwwmonServer.setDescription('Wwwmon reporting the status change to HTTP-Server-Err from a web page query.')
tscRemoteSourceNode = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteSourceNode.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteSourceNode.setDescription('The hostname of the node being reported.')
tscRemoteValue = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteValue.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteValue.setDescription('The value of a variable a thresold was set against.')
tscRemoteThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteThreshold.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteThreshold.setDescription('The value of a user-defined thresold.')
tscRemoteRearm = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteRearm.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteRearm.setDescription('The value of a user-defined rearm.')
tscRemoteSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteSourceAddr.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteSourceAddr.setDescription('The address of the node being reported.')
tscRemoteName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteName.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteName.setDescription('The hostname of this reporting system.')
tscRemoteSourceNode2 = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteSourceNode2.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteSourceNode2.setDescription('Another hostname being reported.')
tscRemoteSourceProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteSourceProtocol.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteSourceProtocol.setDescription('The network protocol of the node being reported.')
tscRemoteProcName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteProcName.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteProcName.setDescription('The eProbe process name being reported.')
tscRemoteFsDevice = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteFsDevice.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteFsDevice.setDescription('The file system logical device.')
tscRemoteFsName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteFsName.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteFsName.setDescription('The file system name (mount point).')
tscRemoteIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteIfIndex.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteIfIndex.setDescription('The relevant ifIndex.')
tscRemoteChassis = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteChassis.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteChassis.setDescription('The relevant chassis #.')
tscRemoteSlot = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteSlot.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteSlot.setDescription('The relevant slot #.')
tscRemotePosition = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemotePosition.setStatus('optional')
if mibBuilder.loadTexts: tscRemotePosition.setDescription('The relevant port position #.')
tscRemoteDescription = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteDescription.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteDescription.setDescription('The relevant description.')
tscRemoteRecno = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteRecno.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteRecno.setDescription('The relevant database record number.')
tscRemoteOldValue = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteOldValue.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteOldValue.setDescription('The old value of a variable a thresold was set against.')
tscRemoteTrapOID = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteTrapOID.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteTrapOID.setDescription('The enterprise OID of trap being encapsulated.')
tscRemoteTrapGeneric = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteTrapGeneric.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteTrapGeneric.setDescription('The generic of trap being encapsulated.')
tscRemoteTrapSpecific = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteTrapSpecific.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteTrapSpecific.setDescription('The specific of trap being encapsulated.')
tscRemoteTrapTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteTrapTimestamp.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteTrapTimestamp.setDescription('The timestamp of trap being encapsulated.')
tscRemoteTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteTrapCommunity.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteTrapCommunity.setDescription('The community of trap being encapsulated.')
tscRemoteTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteTimestamp.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteTimestamp.setDescription('A timestamp for this event.')
tscRemoteDomain = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscRemoteDomain.setStatus('optional')
if mibBuilder.loadTexts: tscRemoteDomain.setDescription('An ePROBE domain for this event.')
tscIfDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,1)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteSourceAddr"), ("TAVVE-MIB", "tscRemoteSourceProtocol"), ("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteIfIndex"))
if mibBuilder.loadTexts: tscIfDown.setDescription('Interface is not reachable. This trap is sent after tpingd determines that an interface is no longer reachable. The bound variables contain the address of the device.')
tscIfUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,2)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteSourceAddr"), ("TAVVE-MIB", "tscRemoteSourceProtocol"), ("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteIfIndex"))
if mibBuilder.loadTexts: tscIfUp.setDescription('Interface is reachable. This trap is sent after tpingd determines that an interface is now reachable. The bound variables contain the address of the device.')
tscIfLatThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,3)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteThreshold"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscIfLatThreshold.setDescription('A user-defined interface latency threshold was exceeded. This trap is sent after tpingd determines that a user-defined interface latency threshold was exceeded for this device. The bound variables contain the address of the device, the value of the interface latency, the value of the user-defined threshold.')
tscIfLatRearm = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,4)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteRearm"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscIfLatRearm.setDescription('A user-defined interface latency threshold was rearmed. This trap is sent after tpingd determines that a user-defined interface latency threshold was rearmed for this device. The bound variables contain the address of the device, the value of the interface latency, the value of the user-defined rearm.')
tscIfUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,5)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteSourceAddr"), ("TAVVE-MIB", "tscRemoteSourceProtocol"), ("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteIfIndex"))
if mibBuilder.loadTexts: tscIfUnknown.setDescription('Interface status is unknown. This trap is sent after tpingd determines that an interface is no longer known. The bound variables contain the address of the device.')
tscNodeDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,6)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNodeDown.setDescription('Node is down. This trap is sent after ipmon determines that all interfaces on a node are down. The bound variables contain the address of the device.')
tscNodeMarginal = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,7)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNodeMarginal.setDescription('Node is marginal. This trap is sent after ipmon determines that some interfaces on the node are down and some interfaces on the node are up. The bound variables contain the address of the device.')
tscNodeUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,8)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNodeUp.setDescription('Node is up. This trap is sent after ipmon determines that all interfaces on a node are up. The bound variables contain the address of the device.')
tscNodeUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,9)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNodeUnknown.setDescription('Node is unknown. This trap is sent after ipmon determines that all interfaces on a node are unknown. The bound variables contain the address of the device.')
tscNewNode = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,10)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteSourceAddr"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNewNode.setDescription('A new node has been discovered by this system.')
tscNameChange = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,11)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteSourceNode2"), ("TAVVE-MIB", "tscRemoteSourceAddr"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNameChange.setDescription('A node name has changed')
tscIfDelete = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,12)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteSourceAddr"), ("TAVVE-MIB", "tscRemoteSourceProtocol"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscIfDelete.setDescription('Interface is deleted This trap is sent after tpingd determines that an interface has been deleted. The bound variables contain the address of the device.')
tscNodeAdded = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,13)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteRecno"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNodeAdded.setDescription('Node is added. This trap is sent when scannode determines that a node is new in the nodedb.')
tscInterfaceAdded = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,14)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscInterfaceAdded.setDescription('An interface on a node is added. This trap is sent when scannode determines that an interface is new in the ifdb.')
tscNodeDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,15)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscNodeDeleted.setDescription('Node is deleted. This trap is sent when scannode determines that a node is removed from the nodedb.')
tscInterfaceDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,16)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscInterfaceDeleted.setDescription('An interface on a node is removed. This trap is sent when scannode determines that an interface is removed from the ifdb.')
tscHostnameChanged = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,17)).setObjects(("TAVVE-MIB", "tscRemoteOldValue"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteRecno"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscHostnameChanged.setDescription('A hostname change has been detected. This trap is sent when scannode determines that a new hostname is being used for a formerly different named node.')
tscSysObjectIDChanged = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,18)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteRecno"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscSysObjectIDChanged.setDescription('The sysObjectID on the device changed. This trap is sent when scannode determines that a new sysObjectID was detected for a host.')
tscProcFail = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,21)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteProcName"))
if mibBuilder.loadTexts: tscProcFail.setDescription('A key eProbe process has failed.')
tscProcStop = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,22)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteProcName"))
if mibBuilder.loadTexts: tscProcStop.setDescription('A key eProbe process has stopped (deliberate).')
tscProcStart = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,23)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteProcName"))
if mibBuilder.loadTexts: tscProcStart.setDescription('A key eProbe process has started.')
tscFsFull = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,24)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteFsDevice"), ("TAVVE-MIB", "tscRemoteFsName"), ("TAVVE-MIB", "tscRemoteValue"))
if mibBuilder.loadTexts: tscFsFull.setDescription('A file system is getting full. It has reached a particular level of capacity (%).')
tscVoidWarranty = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,25)).setObjects(("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscVoidWarranty.setDescription('The eProbe admin has elected for root access to the device and understands this voids the warranty.')
tscSysNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,26)).setObjects(("TAVVE-MIB", "tscRemoteOldValue"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteRecno"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscSysNameChanged.setDescription('The sysName on the device changed. This trap is sent when scannode determines that a new sysName was detected for a host.')
tscSysDescrChanged = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,27)).setObjects(("TAVVE-MIB", "tscRemoteOldValue"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteRecno"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscSysDescrChanged.setDescription('The sysDescr on the device changed. This trap is sent when scannode determines that a new sysDescr was detected for a host.')
tscSysLocationChanged = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,28)).setObjects(("TAVVE-MIB", "tscRemoteOldValue"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteRecno"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscSysLocationChanged.setDescription('The sysLocation on the device changed. This trap is sent when scannode determines that a new sysLocation was detected for a host.')
tscSysContactChanged = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,29)).setObjects(("TAVVE-MIB", "tscRemoteOldValue"), ("TAVVE-MIB", "tscRemoteValue"), ("TAVVE-MIB", "tscRemoteRecno"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscSysContactChanged.setDescription('The sysContact on the device changed. This trap is sent when scannode determines that a new sysContact was detected for a host.')
tscManage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,50)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"))
if mibBuilder.loadTexts: tscManage.setDescription('A node is now managed. This trap is sent after tmanage switches the status of the node to managed. The bound variable contain the name of the device.')
tscUnmanage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,51)).setObjects(("TAVVE-MIB", "tscRemoteSourceNode"))
if mibBuilder.loadTexts: tscUnmanage.setDescription('A node is now unmanaged. This trap is sent after tunmanage switches the status of the node to unmanaged. The bound variable contain the name of the device.')
tscIfManage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,52)).setObjects(("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteDescription"))
if mibBuilder.loadTexts: tscIfManage.setDescription('An interface is now managed. This trap is sent after tmanage switches the status of the interface to managed. The bound variables contain the ifIndex, ifDescr.')
tscIfUnmanage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,53)).setObjects(("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteDescription"))
if mibBuilder.loadTexts: tscIfUnmanage.setDescription('An interface is now unmanaged. This trap is sent after tunmanage switches the status of the interface to unmanaged. The bound variables contain the ifIndex, ifDescr.')
tscNetManage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,54)).setObjects(("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteDescription"))
if mibBuilder.loadTexts: tscNetManage.setDescription('A subnet is now managed. This trap is sent after tmanage switches the status of the subnet to managed.')
tscNetUnmanage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,55)).setObjects(("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteDescription"))
if mibBuilder.loadTexts: tscNetUnmanage.setDescription('A subnet is now unmanaged. This trap is sent after tunmanage switches the status of the subnet to unmanaged.')
tscPortManage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,56)).setObjects(("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteChassis"), ("TAVVE-MIB", "tscRemoteSlot"), ("TAVVE-MIB", "tscRemotePosition"))
if mibBuilder.loadTexts: tscPortManage.setDescription('An interface is now managed. This trap is sent after tmanage switches the status of the interface to managed. The bound variables contain the ifIndex, chassis, slot, and positon.')
tscPortUnmanage = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,57)).setObjects(("TAVVE-MIB", "tscRemoteIfIndex"), ("TAVVE-MIB", "tscRemoteChassis"), ("TAVVE-MIB", "tscRemoteSlot"), ("TAVVE-MIB", "tscRemotePosition"))
if mibBuilder.loadTexts: tscPortUnmanage.setDescription('An interface is now unmanaged. This trap is sent after tunmanage switches the status of the interface to unmanaged. The bound variables contain the ifIndex, chassis, slot, and positon.')
tscFwdTrap = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,60)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteSourceAddr"), ("TAVVE-MIB", "tscRemoteTrapOID"), ("TAVVE-MIB", "tscRemoteTrapGeneric"), ("TAVVE-MIB", "tscRemoteTrapSpecific"), ("TAVVE-MIB", "tscRemoteTrapTimestamp"), ("TAVVE-MIB", "tscRemoteTrapCommunity"), ("TAVVE-MIB", "tscRemoteDescription"), ("TAVVE-MIB", "tscRemoteValue"))
if mibBuilder.loadTexts: tscFwdTrap.setDescription('Ensapsulate a trap within this trap. This trap is sent by ePROBE when forwarding traps with ensapsulation mode on. In particular, this makes sure forwarded traps do not have source agent IP address which messes up the NMS in duplicate IP environments. The bound variables contain the details of the oringal trap: agent IP address, agent hostname, enterprise OID, generic, specific, timestamp, community, log message, and variables.')
tscRedPeerAdd = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,61)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteDomain"), ("TAVVE-MIB", "tscRemoteTimestamp"))
if mibBuilder.loadTexts: tscRedPeerAdd.setDescription('Report a redundant peer has been added.')
tscRedPeerRm = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,62)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteDomain"), ("TAVVE-MIB", "tscRemoteTimestamp"))
if mibBuilder.loadTexts: tscRedPeerRm.setDescription('Report a redundant peer has been removed.')
tscRedPeerUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,63)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteDomain"), ("TAVVE-MIB", "tscRemoteTimestamp"))
if mibBuilder.loadTexts: tscRedPeerUp.setDescription('Report a redundant peer is now up.')
tscRedPeerUnavail = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,64)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteDomain"), ("TAVVE-MIB", "tscRemoteTimestamp"))
if mibBuilder.loadTexts: tscRedPeerUnavail.setDescription('Report a redundant peer is now unavailable.')
tscRedPeerDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,65)).setObjects(("TAVVE-MIB", "tscRemoteName"), ("TAVVE-MIB", "tscRemoteSourceNode"), ("TAVVE-MIB", "tscRemoteDomain"), ("TAVVE-MIB", "tscRemoteTimestamp"))
if mibBuilder.loadTexts: tscRedPeerDown.setDescription('Report a redundant peer is now down.')
tscRemoteNoStatus = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,68)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscRemoteNoStatus.setDescription('ePROBE is inferred down because it has not reported in to NMS. This trap is sent by ePdaemon. This trap has bindings in alignment with remote source down trap')
tscRemoteAlive = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 6) + (0,69)).setObjects(("TAVVE-MIB", "tscEwFaultAddr"), ("TAVVE-MIB", "tscEwFaultName"), ("TAVVE-MIB", "tscEwFaultProtocol"), ("TAVVE-MIB", "tscEwGroupName"), ("TAVVE-MIB", "tscEwReportHost"), ("TAVVE-MIB", "tscEwEventTime"))
if mibBuilder.loadTexts: tscRemoteAlive.setDescription('ePROBE is inferred up because it has again reported in to NMS. This trap is sent by ePdaemon. This trap has bindings in alignment with remote source up trap')
tscPmOldValue = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmOldValue.setStatus('optional')
if mibBuilder.loadTexts: tscPmOldValue.setDescription('The old value (before the change).')
tscPmValue = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmValue.setStatus('optional')
if mibBuilder.loadTexts: tscPmValue.setDescription('The (new) value (after the change).')
tscPmIndex = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmIndex.setStatus('optional')
if mibBuilder.loadTexts: tscPmIndex.setDescription('The ifIndex for the port being reported.')
tscPmChassis = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmChassis.setStatus('optional')
if mibBuilder.loadTexts: tscPmChassis.setDescription('The chassis # for the port being reported.')
tscPmSlot = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmSlot.setStatus('optional')
if mibBuilder.loadTexts: tscPmSlot.setDescription('The slot number inside chassis for the port being reported.')
tscPmPos = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmPos.setStatus('optional')
if mibBuilder.loadTexts: tscPmPos.setDescription('The port # or port position in slot for the port being reported.')
tscPmStatus = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmStatus.setStatus('optional')
if mibBuilder.loadTexts: tscPmStatus.setDescription('The (new) status of the port.')
tscPmName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmName.setStatus('optional')
if mibBuilder.loadTexts: tscPmName.setDescription('The user defined name of the port.')
tscPmTime = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscPmTime.setStatus('optional')
if mibBuilder.loadTexts: tscPmTime.setDescription('The (Unix) time of the status change.')
tscPmNameChange = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,1)).setObjects(("TAVVE-MIB", "tscPmOldValue"), ("TAVVE-MIB", "tscPmValue"), ("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"))
if mibBuilder.loadTexts: tscPmNameChange.setDescription('The port name has changed. This trap is sent after a port configuration check determined that the port name has changed.')
tscPmTypeChange = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,2)).setObjects(("TAVVE-MIB", "tscPmOldValue"), ("TAVVE-MIB", "tscPmValue"), ("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"))
if mibBuilder.loadTexts: tscPmTypeChange.setDescription('The port type has changed. This trap is sent after a port configuration check determined that the port type has changed.')
tscPmSpeedChange = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,3)).setObjects(("TAVVE-MIB", "tscPmOldValue"), ("TAVVE-MIB", "tscPmValue"), ("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"))
if mibBuilder.loadTexts: tscPmSpeedChange.setDescription('The port speed has changed. This trap is sent after a port configuration check determined that the port speed has changed.')
tscPmDuplexChange = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,4)).setObjects(("TAVVE-MIB", "tscPmOldValue"), ("TAVVE-MIB", "tscPmValue"), ("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"))
if mibBuilder.loadTexts: tscPmDuplexChange.setDescription('The port duplex has changed. This trap is sent after a port configuration check determined that the port duplex has changed.')
tscPmVlanChange = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,5)).setObjects(("TAVVE-MIB", "tscPmOldValue"), ("TAVVE-MIB", "tscPmValue"), ("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"))
if mibBuilder.loadTexts: tscPmVlanChange.setDescription('The port VLAN has changed. This trap is sent after a port configuration check determined that the port VLAN has changed.')
tscPmNewPort = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,100)).setObjects(("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"))
if mibBuilder.loadTexts: tscPmNewPort.setDescription('A new port has been discovered. This trap is sent after a port configuration check determined that a new port is present')
tscPmPortFault = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,101)).setObjects(("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"), ("TAVVE-MIB", "tscPmStatus"), ("TAVVE-MIB", "tscPmName"), ("TAVVE-MIB", "tscPmTime"))
if mibBuilder.loadTexts: tscPmPortFault.setDescription('The status of a port has gone critical. This trap is sent after a port status check determined that the port is not functioning.')
tscPmPortRestored = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,102)).setObjects(("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"), ("TAVVE-MIB", "tscPmStatus"), ("TAVVE-MIB", "tscPmName"), ("TAVVE-MIB", "tscPmTime"))
if mibBuilder.loadTexts: tscPmPortRestored.setDescription('The status of a port returned to normal. This trap is sent after a port status check determined that the port is functioning again.')
tscPmPortUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,103)).setObjects(("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"), ("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmStatus"), ("TAVVE-MIB", "tscPmName"), ("TAVVE-MIB", "tscPmTime"))
if mibBuilder.loadTexts: tscPmPortUnknown.setDescription('The status of a port is now unknown. This trap is sent after a port status check determined that the port has entered an unknown state.')
tscPmPortDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 8) + (0,104)).setObjects(("TAVVE-MIB", "tscPmIndex"), ("TAVVE-MIB", "tscPmChassis"), ("TAVVE-MIB", "tscPmSlot"), ("TAVVE-MIB", "tscPmPos"), ("TAVVE-MIB", "tscRemoteName"))
if mibBuilder.loadTexts: tscPmPortDeleted.setDescription('A port has been deleted from portdb. This trap is sent after a port status check determined that the port no longer exists.')
tscAtmmonSourceNode = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscAtmmonSourceNode.setStatus('optional')
if mibBuilder.loadTexts: tscAtmmonSourceNode.setDescription('The hostname of the interface being reported.')
tscAtmmonIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscAtmmonIfIndex.setStatus('optional')
if mibBuilder.loadTexts: tscAtmmonIfIndex.setDescription('The relevant ifIndex.')
tscAtmmonifName = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscAtmmonifName.setStatus('optional')
if mibBuilder.loadTexts: tscAtmmonifName.setDescription('The name of the interface being reported down.')
tscAtmIfDown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 10) + (0,101)).setObjects(("TAVVE-MIB", "tscAtmmonIfIndex"), ("TAVVE-MIB", "tscAtmmonSourceNode"), ("TAVVE-MIB", "tscAtmmonifName"))
if mibBuilder.loadTexts: tscAtmIfDown.setDescription('Interface is not reachable. This trap is sent after atmmon determines that an interface is no longer reachable. The bound variables contain the address of the device.')
tscAtmIfUp = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 10) + (0,102)).setObjects(("TAVVE-MIB", "tscAtmmonIfIndex"), ("TAVVE-MIB", "tscAtmmonSourceNode"), ("TAVVE-MIB", "tscAtmmonifName"))
if mibBuilder.loadTexts: tscAtmIfUp.setDescription('Interface is reachable. This trap is sent after atmmon determines that an interface is reachable. The bound variables contain the address of the device.')
tscAtmIfUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 10) + (0,103)).setObjects(("TAVVE-MIB", "tscAtmmonIfIndex"), ("TAVVE-MIB", "tscAtmmonSourceNode"), ("TAVVE-MIB", "tscAtmmonifName"))
if mibBuilder.loadTexts: tscAtmIfUnknown.setDescription('Interface is not reachable. This trap is sent after atmmon determines that an interface is no longer reachable. The bound variables contain the address of the device.')
tscSltLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscSltLogMessage.setStatus('optional')
if mibBuilder.loadTexts: tscSltLogMessage.setDescription('The message from log file suitable for logging. Format is: month day time host facility[pid]: message')
tscSltFacility = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscSltFacility.setStatus('optional')
if mibBuilder.loadTexts: tscSltFacility.setDescription('The facility from log message, e.g. snmpd, kernel.')
tscSltPid = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscSltPid.setStatus('optional')
if mibBuilder.loadTexts: tscSltPid.setDescription('The process id of the facility or 0.')
tscSltHostname = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscSltHostname.setStatus('optional')
if mibBuilder.loadTexts: tscSltHostname.setDescription('The hostname of the device reporting the message.')
tscSltMessage = MibScalar((1, 3, 6, 1, 4, 1, 2668, 1, 1, 9, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tscSltMessage.setStatus('optional')
if mibBuilder.loadTexts: tscSltMessage.setDescription('The message from log message (stripped of time stamp, facility, and hostname')
tscSltTrap = NotificationType((1, 3, 6, 1, 4, 1, 2668, 1, 1, 9) + (0,1)).setObjects(("TAVVE-MIB", "tscSltLogMessage"), ("TAVVE-MIB", "tscSltFacility"), ("TAVVE-MIB", "tscSltPid"), ("TAVVE-MIB", "tscSltHostname"), ("TAVVE-MIB", "tscSltMessage"))
if mibBuilder.loadTexts: tscSltTrap.setDescription('Reporting a syslog event.')
mibBuilder.exportSymbols("TAVVE-MIB", tscSysNameChanged=tscSysNameChanged, tscCtMnemonic=tscCtMnemonic, tscRemoteRearm=tscRemoteRearm, tscCtLogMessage=tscCtLogMessage, tscEwFaultTimes=tscEwFaultTimes, tscEwSourceAddr=tscEwSourceAddr, tscRemoteIfIndex=tscRemoteIfIndex, tscRemoteDescription=tscRemoteDescription, tscRemoteValue=tscRemoteValue, tscRedPeerUnavail=tscRedPeerUnavail, tscEwInferredDown=tscEwInferredDown, atmmon=atmmon, tscSltFacility=tscSltFacility, tscRemoteFsDevice=tscRemoteFsDevice, tscSysDescrChanged=tscSysDescrChanged, tscFsFull=tscFsFull, tscSysLocationChanged=tscSysLocationChanged, tscAtmIfDown=tscAtmIfDown, tscRemoteOldValue=tscRemoteOldValue, tscIfLatThreshold=tscIfLatThreshold, tscNodeMarginal=tscNodeMarginal, tscIfUp=tscIfUp, tscEwRemoteInferredDown=tscEwRemoteInferredDown, tscSysContactChanged=tscSysContactChanged, tscUnmanage=tscUnmanage, tscEwRemoteSourceDown=tscEwRemoteSourceDown, traps=traps, tscRemoteSlot=tscRemoteSlot, tscRemoteDomain=tscRemoteDomain, tscIfUnknown=tscIfUnknown, tscHostnameChanged=tscHostnameChanged, tscTCPTime=tscTCPTime, tscEwSourceDown=tscEwSourceDown, tscPmTypeChange=tscPmTypeChange, tscCtSeverity1=tscCtSeverity1, tscCtFacility=tscCtFacility, portmon=portmon, tscEwDownTime=tscEwDownTime, wwwmonServerPort=wwwmonServerPort, wwwmonClient=wwwmonClient, tscEwFaultProtocol=tscEwFaultProtocol, wwwmonServer=wwwmonServer, tscRemoteNoStatus=tscRemoteNoStatus, tscIfUnmanage=tscIfUnmanage, tscEwRemoteNodeDown=tscEwRemoteNodeDown, tscRedPeerRm=tscRedPeerRm, tscEwSourceName=tscEwSourceName, tscCtSeverity0=tscCtSeverity0, xmon=xmon, agentmon=agentmon, tscRemoteFsName=tscRemoteFsName, tscRemoteName=tscRemoteName, wwwmonBusy=wwwmonBusy, tscEwRemoteSourceUp=tscEwRemoteSourceUp, tscCtSeverity4=tscCtSeverity4, tscPmDuplexChange=tscPmDuplexChange, tscEwUserThreshold=tscEwUserThreshold, syslogtrap=syslogtrap, tscAtmIfUnknown=tscAtmIfUnknown, tscSysObjectIDChanged=tscSysObjectIDChanged, tscNodeAdded=tscNodeAdded, tscVoidWarranty=tscVoidWarranty, agents=agents, tscRemoteAlive=tscRemoteAlive, tscNewNode=tscNewNode, tscAtmmonifName=tscAtmmonifName, tscRemoteChassis=tscRemoteChassis, tscRemotePosition=tscRemotePosition, tscRemoteProcName=tscRemoteProcName, tscAtmmonSourceNode=tscAtmmonSourceNode, tscProcStart=tscProcStart, tavve=tavve, tscNetManage=tscNetManage, tscPmChassis=tscPmChassis, tscPmNameChange=tscPmNameChange, tscNodeUp=tscNodeUp, tscRemoteSourceNode2=tscRemoteSourceNode2, wwwmonRefd=wwwmonRefd, wwwmonRedirect=wwwmonRedirect, tscPmPos=tscPmPos, products=products, tscIfDown=tscIfDown, tscPmSlot=tscPmSlot, tscPmValue=tscPmValue, tscRemoteRecno=tscRemoteRecno, tscTCPPortName=tscTCPPortName, tscNetUnmanage=tscNetUnmanage, tscIfLatRearm=tscIfLatRearm, tscRemoteSourceAddr=tscRemoteSourceAddr, tscRemoteSourceProtocol=tscRemoteSourceProtocol, tscPmName=tscPmName, tscEwSourceProtocol=tscEwSourceProtocol, wwwmonServerName=wwwmonServerName, tscEwReportHost=tscEwReportHost, tscTCPPortNumber=tscTCPPortNumber, tscEwSourceUp=tscEwSourceUp, tscNodeDeleted=tscNodeDeleted, tscRedPeerAdd=tscRedPeerAdd, tscEwSlaValue=tscEwSlaValue, tscPmTime=tscPmTime, tscCtMessage=tscCtMessage, tscEwNodeDown=tscEwNodeDown, custom=custom, tscManage=tscManage, wwwmonServerURL=wwwmonServerURL, tscInterfaceAdded=tscInterfaceAdded, wwwmonTimeout=wwwmonTimeout, eventWatch=eventWatch, tscEwEventTime=tscEwEventTime, tscPortManage=tscPortManage, tscRemoteTrapSpecific=tscRemoteTrapSpecific, wwwmonInfo=wwwmonInfo, tscRemoteTrapCommunity=tscRemoteTrapCommunity, tscCtSeverity=tscCtSeverity, wwwmonUp=wwwmonUp, tscPmPortUnknown=tscPmPortUnknown, tscSltMessage=tscSltMessage, tscCtSeverity8=tscCtSeverity8, tscNameChange=tscNameChange, tscPmPortRestored=tscPmPortRestored, tscRedPeerUp=tscRedPeerUp, tscSltTrap=tscSltTrap, tscCtSeverity3=tscCtSeverity3, tscCtSeverity7=tscCtSeverity7, tscEwRemoteInferredUp=tscEwRemoteInferredUp, wwwmonUnknown=wwwmonUnknown, tscPortUnmanage=tscPortUnmanage, tscFwdTrap=tscFwdTrap, tscEwDescr=tscEwDescr, tscSltPid=tscSltPid, tscEwNodeUp=tscEwNodeUp, tscEwGroupName=tscEwGroupName, tscSltLogMessage=tscSltLogMessage, tscProcFail=tscProcFail, tscRemoteTrapOID=tscRemoteTrapOID, tscInterfaceDeleted=tscInterfaceDeleted, tscPmPortFault=tscPmPortFault, tscAtmIfUp=tscAtmIfUp, tscIfDelete=tscIfDelete, tscCtSeverity5=tscCtSeverity5, tscRemoteTimestamp=tscRemoteTimestamp, tscPmStatus=tscPmStatus, tscEwFaultName=tscEwFaultName, ciscotrap=ciscotrap, tscTcpSourceNode=tscTcpSourceNode, tscRemoteTrapTimestamp=tscRemoteTrapTimestamp, tscSltHostname=tscSltHostname, tscEwInferredUp=tscEwInferredUp, tscRedPeerDown=tscRedPeerDown, tscNodeUnknown=tscNodeUnknown, tcpdmon=tcpdmon, wwwmonServerStatus=wwwmonServerStatus, tscRemoteTrapGeneric=tscRemoteTrapGeneric, tscEwSourceNode=tscEwSourceNode, tscPmPortDeleted=tscPmPortDeleted, tscRemoteThreshold=tscRemoteThreshold, pysmi_global=pysmi_global, tscEwFaultAddr=tscEwFaultAddr, tscEwSlaThres=tscEwSlaThres, tscEwTestTrapRecv=tscEwTestTrapRecv, remote=remote, tscCtSeverity2=tscCtSeverity2, tscPmIndex=tscPmIndex, tscPmVlanChange=tscPmVlanChange, tscPmSpeedChange=tscPmSpeedChange, tscPmOldValue=tscPmOldValue, tscAtmmonIfIndex=tscAtmmonIfIndex, tscProcStop=tscProcStop, tscEwRemoteNodeUp=tscEwRemoteNodeUp, wwwmon=wwwmon, tscRemoteSourceNode=tscRemoteSourceNode, tscNodeDown=tscNodeDown, tscCtSeverity6=tscCtSeverity6, tscPmNewPort=tscPmNewPort, tscIfManage=tscIfManage, tscEwTestTrap=tscEwTestTrap)
