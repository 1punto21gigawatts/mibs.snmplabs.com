#
# PySNMP MIB module STN-EXTIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-EXTIF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, NotificationType, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter64, Unsigned32, MibIdentifier, Integer32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter64", "Unsigned32", "MibIdentifier", "Integer32", "IpAddress", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stnExtensions, stnNotification = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnExtensions", "stnNotification")
stnExtIf = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 3, 1))
if mibBuilder.loadTexts: stnExtIf.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnExtIf.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnExtIf.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnExtIf.setDescription('This MIB module describes managed objects of Spring Tide Networks interface extensions.')
stnExtIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1))
stnExtIfMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 3, 1, 2))
stnExtIfMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 3, 1, 3))
stnExtIfL2Table = MibTable((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 1), )
if mibBuilder.loadTexts: stnExtIfL2Table.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL2Table.setDescription('A list of L2 interface entries.')
stnExtIfL2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 1, 1), ).setIndexNames((0, "STN-EXTIF-MIB", "stnExtIfL2IfName"))
if mibBuilder.loadTexts: stnExtIfL2Entry.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL2Entry.setDescription('Entry contains information about a particular L2 interface.')
stnExtIfL2IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIfL2IfName.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL2IfName.setDescription('The interface name associated with the L2.')
stnExtIfL2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIfL2IfIndex.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL2IfIndex.setDescription('The interface index number associated with the L2 interface name.')
stnExtIfL3Table = MibTable((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 2), )
if mibBuilder.loadTexts: stnExtIfL3Table.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL3Table.setDescription('A list of L3 interface entries.')
stnExtIfL3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 2, 1), ).setIndexNames((0, "STN-EXTIF-MIB", "stnExtIfL3IfName"))
if mibBuilder.loadTexts: stnExtIfL3Entry.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL3Entry.setDescription('Entry contains information about a particular L3 interface.')
stnExtIfL3IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIfL3IfName.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL3IfName.setDescription('The interface name associated with the L3.')
stnExtIfL3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIfL3IfIndex.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL3IfIndex.setDescription('The interface index number associated with the L3 interface name.')
stnExtIfL3SubnetIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIfL3SubnetIfInstance.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL3SubnetIfInstance.setDescription('The subnet interface instance associated with the L3 interface name.')
stnExtIfL3IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIfL3IpAddress.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL3IpAddress.setDescription('The IP address associated with the L3 interface name.')
stnExtIfL3IpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIfL3IpMask.setStatus('current')
if mibBuilder.loadTexts: stnExtIfL3IpMask.setDescription('The IP subnet mask associated with the L3 interface name.')
stnExtIpAddrL3Table = MibTable((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 3), )
if mibBuilder.loadTexts: stnExtIpAddrL3Table.setStatus('current')
if mibBuilder.loadTexts: stnExtIpAddrL3Table.setDescription('A list of L3 IP address entries.')
stnExtIpAddrL3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 3, 1), ).setIndexNames((0, "STN-EXTIF-MIB", "stnExtIpAddrL3IpAddress"))
if mibBuilder.loadTexts: stnExtIpAddrL3Entry.setStatus('current')
if mibBuilder.loadTexts: stnExtIpAddrL3Entry.setDescription('Entry contains information about a particular L3 interface.')
stnExtIpAddrL3IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIpAddrL3IpAddress.setStatus('current')
if mibBuilder.loadTexts: stnExtIpAddrL3IpAddress.setDescription('The IP address associated with the L3 interface.')
stnExtIpAddrL3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIpAddrL3IfIndex.setStatus('current')
if mibBuilder.loadTexts: stnExtIpAddrL3IfIndex.setDescription('The interface index number associated with the L3 interface.')
stnExtIpAddrL3SubnetIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIpAddrL3SubnetIfInstance.setStatus('current')
if mibBuilder.loadTexts: stnExtIpAddrL3SubnetIfInstance.setDescription('The subnet interface instance associated with the L3 interface.')
stnExtIpAddrL3IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIpAddrL3IfName.setStatus('current')
if mibBuilder.loadTexts: stnExtIpAddrL3IfName.setDescription('The interface name associated with the L3 interface.')
stnExtIpAddrL3IpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtIpAddrL3IpMask.setStatus('current')
if mibBuilder.loadTexts: stnExtIpAddrL3IpMask.setDescription('The IP subnet mask associated with the L3 interface.')
stnExtSubnetL3Table = MibTable((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 4), )
if mibBuilder.loadTexts: stnExtSubnetL3Table.setStatus('current')
if mibBuilder.loadTexts: stnExtSubnetL3Table.setDescription('A list of L3 subnet interface entries.')
stnExtSubnetL3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 4, 1), ).setIndexNames((0, "STN-EXTIF-MIB", "stnExtSubnetL3SubnetIfInstance"))
if mibBuilder.loadTexts: stnExtSubnetL3Entry.setStatus('current')
if mibBuilder.loadTexts: stnExtSubnetL3Entry.setDescription('Entry contains information about a particular L3 subnet interface.')
stnExtSubnetL3SubnetIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtSubnetL3SubnetIfInstance.setStatus('current')
if mibBuilder.loadTexts: stnExtSubnetL3SubnetIfInstance.setDescription('The subnet interface instance associated with the L3 interface.')
stnExtSubnetL3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtSubnetL3IfIndex.setStatus('current')
if mibBuilder.loadTexts: stnExtSubnetL3IfIndex.setDescription('The interface index number associated with the L3 interface.')
stnExtSubnetL3IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtSubnetL3IfName.setStatus('current')
if mibBuilder.loadTexts: stnExtSubnetL3IfName.setDescription('The interface name associated with the L3 interface.')
stnExtSubnetL3IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtSubnetL3IpAddress.setStatus('current')
if mibBuilder.loadTexts: stnExtSubnetL3IpAddress.setDescription('The IP address associated with the L3 interface.')
stnExtSubnetL3IpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 3, 1, 1, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnExtSubnetL3IpMask.setStatus('current')
if mibBuilder.loadTexts: stnExtSubnetL3IpMask.setDescription('The IP subnet mask associated with the L3 interface.')
mibBuilder.exportSymbols("STN-EXTIF-MIB", stnExtIpAddrL3Entry=stnExtIpAddrL3Entry, stnExtIfL3IpMask=stnExtIfL3IpMask, stnExtSubnetL3IpMask=stnExtSubnetL3IpMask, stnExtSubnetL3Entry=stnExtSubnetL3Entry, stnExtSubnetL3SubnetIfInstance=stnExtSubnetL3SubnetIfInstance, stnExtIfMibConformance=stnExtIfMibConformance, stnExtIpAddrL3IfName=stnExtIpAddrL3IfName, stnExtIpAddrL3Table=stnExtIpAddrL3Table, stnExtSubnetL3IfName=stnExtSubnetL3IfName, stnExtSubnetL3IfIndex=stnExtSubnetL3IfIndex, stnExtIfL3Entry=stnExtIfL3Entry, stnExtIpAddrL3IpAddress=stnExtIpAddrL3IpAddress, stnExtIfL2Entry=stnExtIfL2Entry, stnExtIpAddrL3IpMask=stnExtIpAddrL3IpMask, stnExtIfObjects=stnExtIfObjects, stnExtIf=stnExtIf, stnExtIfL2Table=stnExtIfL2Table, stnExtIfL3SubnetIfInstance=stnExtIfL3SubnetIfInstance, stnExtIfL3IpAddress=stnExtIfL3IpAddress, stnExtSubnetL3Table=stnExtSubnetL3Table, stnExtIfL2IfName=stnExtIfL2IfName, stnExtIfMibTraps=stnExtIfMibTraps, stnExtIfL2IfIndex=stnExtIfL2IfIndex, stnExtIpAddrL3SubnetIfInstance=stnExtIpAddrL3SubnetIfInstance, stnExtIpAddrL3IfIndex=stnExtIpAddrL3IfIndex, stnExtSubnetL3IpAddress=stnExtSubnetL3IpAddress, stnExtIfL3Table=stnExtIfL3Table, stnExtIfL3IfName=stnExtIfL3IfName, PYSNMP_MODULE_ID=stnExtIf, stnExtIfL3IfIndex=stnExtIfL3IfIndex)
