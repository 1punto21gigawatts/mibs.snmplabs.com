#
# PySNMP MIB module WWP-APPLICATIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-APPLICATIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, Unsigned32, Counter64, Counter32, TimeTicks, Integer32, ModuleIdentity, Gauge32, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Unsigned32", "Counter64", "Counter32", "TimeTicks", "Integer32", "ModuleIdentity", "Gauge32", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpApplicationsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 6))
wwpApplicationsMIB.setRevisions(('2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpApplicationsMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpApplicationsMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpApplicationsMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpApplicationsMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpApplicationsMIB.setDescription('The MIB module for the WWP Applications specific information.')
wwpApplicationsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1))
wwpWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 2))
wwpTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 3))
wwpDns = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4))
wwpLog = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 5))
wwpApplicationsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 2))
wwpApplicationsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 2, 0))
wwpApplicationsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 3))
wwpApplicationsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 3, 1))
wwpApplicationsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 6, 3, 2))
wwpWebEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpWebEnable.setStatus('current')
if mibBuilder.loadTexts: wwpWebEnable.setDescription('Enables or disables device mgt via the web.')
wwpWebMaxLogins = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpWebMaxLogins.setStatus('current')
if mibBuilder.loadTexts: wwpWebMaxLogins.setDescription('Defines the maximum number of users the can be logged into the web server.')
wwpWebInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpWebInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpWebInactivityTimeout.setDescription('Defines the period in seconds after which the user will be logged off if no activiy has taken place.')
wwpTelnetEnableServer = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpTelnetEnableServer.setStatus('current')
if mibBuilder.loadTexts: wwpTelnetEnableServer.setDescription('Enables users to connect to the device via Telnet.')
wwpTelnetMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpTelnetMaxConnections.setStatus('current')
if mibBuilder.loadTexts: wwpTelnetMaxConnections.setDescription('Defines the maximum number of telnet sessions that can be active at any given time.')
wwpTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpTelnetTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpTelnetTimeout.setDescription('Specifies the time in seconds after which the user will be logged out if no activity is detected.')
wwpTelnetEnableClient = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpTelnetEnableClient.setStatus('current')
if mibBuilder.loadTexts: wwpTelnetEnableClient.setDescription('Controls whether the user is able to telnet out of the device to any other telnet server accessible on the network.')
wwpDnsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpDnsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpDnsEnable.setDescription('Enables or disables the DNS support.')
wwpDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpDnsDomainName.setStatus('current')
if mibBuilder.loadTexts: wwpDnsDomainName.setDescription('DNS domain name.')
wwpDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4, 3), )
if mibBuilder.loadTexts: wwpDnsServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpDnsServerTable.setDescription('A table of DNS servers.')
wwpDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4, 3, 1), ).setIndexNames((0, "WWP-APPLICATIONS-MIB", "wwpDnsServerIpAddr"))
if mibBuilder.loadTexts: wwpDnsServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpDnsServerEntry.setDescription('DNS server entry.')
wwpDnsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpDnsServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpDnsServerIpAddr.setDescription('DNS server IP address.')
wwpDnsServerPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpDnsServerPrimary.setStatus('current')
if mibBuilder.loadTexts: wwpDnsServerPrimary.setDescription('Indicates whether this is the primary or secondary DNS server. The system will first attempt the primary DNS server, if not successful, it will attempt others in the list. Only one primary dns server may be specified.')
wwpDnsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 4, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpDnsServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpDnsServerRowStatus.setDescription('To create a row in this table, a manager must set this object to either createAndGo(4).')
wwpLogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLogServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLogServerAddr.setDescription('The address of the wwpLogserver. At this moment we can just have one server.')
wwpLogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 6, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLogServerPort.setStatus('current')
if mibBuilder.loadTexts: wwpLogServerPort.setDescription('The log port for the wwpLogserver.')
mibBuilder.exportSymbols("WWP-APPLICATIONS-MIB", wwpApplicationsMIBObjects=wwpApplicationsMIBObjects, wwpTelnet=wwpTelnet, wwpApplicationsMIB=wwpApplicationsMIB, PYSNMP_MODULE_ID=wwpApplicationsMIB, wwpApplicationsMIBCompliances=wwpApplicationsMIBCompliances, wwpDnsServerPrimary=wwpDnsServerPrimary, wwpTelnetEnableClient=wwpTelnetEnableClient, wwpTelnetTimeout=wwpTelnetTimeout, wwpWebMaxLogins=wwpWebMaxLogins, wwpLog=wwpLog, wwpApplicationsMIBNotificationPrefix=wwpApplicationsMIBNotificationPrefix, wwpLogServerAddr=wwpLogServerAddr, wwpDnsDomainName=wwpDnsDomainName, wwpDns=wwpDns, wwpDnsServerRowStatus=wwpDnsServerRowStatus, wwpWebEnable=wwpWebEnable, wwpWeb=wwpWeb, wwpDnsEnable=wwpDnsEnable, wwpApplicationsMIBNotifications=wwpApplicationsMIBNotifications, wwpTelnetMaxConnections=wwpTelnetMaxConnections, wwpWebInactivityTimeout=wwpWebInactivityTimeout, wwpApplicationsMIBGroups=wwpApplicationsMIBGroups, wwpTelnetEnableServer=wwpTelnetEnableServer, wwpDnsServerEntry=wwpDnsServerEntry, wwpApplicationsMIBConformance=wwpApplicationsMIBConformance, wwpDnsServerTable=wwpDnsServerTable, wwpLogServerPort=wwpLogServerPort, wwpDnsServerIpAddr=wwpDnsServerIpAddr)
