#
# PySNMP MIB module CISCO-SDLLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SDLLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Counter64, Gauge32, Integer32, Counter32, ModuleIdentity, IpAddress, ObjectIdentity, MibIdentifier, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "Integer32", "Counter32", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibIdentifier", "Bits", "iso")
TruthValue, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString")
ciscoSnaSdllcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 28))
ciscoSnaSdllcMIB.setRevisions(('1995-08-21 00:00', '1998-12-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSnaSdllcMIB.setRevisionsDescriptions(('Minor cleanups to pacify mib compiler.', 'Removed the old description, rewrite to match the MIB structure.',))
if mibBuilder.loadTexts: ciscoSnaSdllcMIB.setLastUpdated('9812170000Z')
if mibBuilder.loadTexts: ciscoSnaSdllcMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSnaSdllcMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSnaSdllcMIB.setDescription("This is the MIB module for objects used to manage SDLLC. Overview of SDLLC conversion MIB MIB description The SDLLC MIB includes read-only configuration and operational information on Cisco's implementation of SDLC to LLC2 media translation. The following example shows the entities managed by the SDLLC MIB. FEP/ == Token == CISCO A == WAN/RSRB == CISCO B == Serial == SDLC Host Ring line station |=============== LLC2 session ============|=== SDLC session ====| In this example configuration, CISCO B is performing the SDLLC conversion, and so we query CISCO B for this MIB. The SDLC device believes it is talking to the host via a direct SDLC session. The host believes it is talking to the SDLC station on the same token ring. CISCO A is also unaware of the SDLLC conversion going on at CISCO B; it just believes it has an RSRB session with its peer CISCO B to bridge two token ring separated by a WAN. So CISCO B is the only agent that can provide the SDLLC conversion details. We can combine this MIB with the CISCO-RSRB-MIB from either CISCO A or CISCO B to get a better picture of the network. This MIB has two tables: convSdllcPortTable has an entry for each serial interface for general SDLLC information on an interface, such as administered virtual MAC addresses and virtual ring and bridge numbers. This table is indexed by ifIndex. convSdllcAddrTable has an entry for each serial interface and SDLC address pair. It contains information specific to an SDLC address on an interface, such as the partner MAC address, XID value, and address state. This table is indexed by ifIndex and convSdllcAddrSdlcAddr (the address of the SDLC station). The above configuration would have a single entry in each table. If CISCO B had two serial lines configured for sdllc conversion, there would be two entries per table. If there were only one serial line, but it was multipoint and supported two sdlc addresses on the other end of the line, there would be a single entry in convSdllcPortTable, and two entries in convSdllcAddrTable. The MIB provides the following information for convSdllcPortTable: convSdllcPortVirtMacAddr - The locally administered MAC addressed assigned to the serial interface. Note that this address must always end in '00'. CISCO B replaces the 00 with the sdlc address of the serial device. For a multipoint configuration with two SDLC stations the llc2 side will 'see' two token ring stations with unique MAC addresses on the sdlc side. convSdllcPortVirtRing - The locally administered token ring number assigned to the serial interface. This gives the serial interface a token ring appearance to the llc2 side of the conversion, so that it appears that it is a token ring on the other side of a bridge. convSdllcPortBridge - The bridge number assigned to CISCO B convSdllcPortLlc2Ring - The token ring number on the LLC2 session side. In this case it is the RSRB virtual ring group number between CISCO A and CISCO B. convSdllcPortLocalAck - indicates whether local acknowledgement of SDLLC sessions is active. convSdllcPortLocalAckState - indicates the state of the local acknowledgement session. convSdllcPortMaxLlc2FrameSize - the largest I-frame size that can be sent or received on the LLC2 session. The MIB provides the following information for convSdllcAddrTable: convSdllcAddrSdlcAddr - The address of the SDLC station. convSdllcAddrPartnerMacAddr - The MAC address of the FEP, as specified with the sdllc partner command. convSdllcAddrXID - The IDBLK and IDNUM of the SDLC station; these must match the VTAM configured values convSdllcAddrState - indicates the state of the SDLLC conversion convSdllcAddrMaxSdlcFrameSize - the largest I-frame size that can be sent or received on the SDLC session. ")
convSdllcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 1))
convSdllcPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1))
convSdllcAddrs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2))
convSdllcPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1), )
if mibBuilder.loadTexts: convSdllcPortTable.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortTable.setDescription('Table of interfaces and SDLC addresses configured for SDLLC conversion')
convSdllcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: convSdllcPortEntry.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortEntry.setDescription('Status and configuration values for a specific SDLLC conversion interface and SDLC address. ')
convSdllcPortVirtMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcPortVirtMacAddr.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortVirtMacAddr.setDescription('The local administered virtual MAC address for the device on the serial interface.')
convSdllcPortVirtRing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcPortVirtRing.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortVirtRing.setDescription('The virtual ring number assigned to the serial interface.')
convSdllcPortBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcPortBridge.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortBridge.setDescription('The bridge number assigned to SDLLC conversion.')
convSdllcPortLlc2Ring = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcPortLlc2Ring.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortLlc2Ring.setDescription('The ring number assigned to the LLC2 side of the SDLLC conversion.')
convSdllcPortLocalAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcPortLocalAck.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortLocalAck.setDescription('Indicates if all SDLLC sessions are locally acknowledged. TRUE-> SDLLC sessions are locally acknowledged FALSE-> SDLLC sessions are not locally acknowledged ')
convSdllcPortLocalAckState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 255))).clone(namedValues=NamedValues(("disconnected", 1), ("localDiscWait", 2), ("remDiscWait", 3), ("remWait", 4), ("localWait", 5), ("connectPending", 6), ("connected", 7), ("remQOnWait", 8), ("remQOffWait", 9), ("quenched", 10), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcPortLocalAckState.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortLocalAckState.setDescription('State of the local acknowledgment session between two stations.')
convSdllcPortMaxLlc2FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcPortMaxLlc2FrameSize.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortMaxLlc2FrameSize.setDescription('The largest information frame (I-frame) size that can be sent or received on the LLC2 session.')
convSdllcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2, 1), )
if mibBuilder.loadTexts: convSdllcAddrTable.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrTable.setDescription('Table of SDLC addresses configured for SDLLC conversion on a particular interface.')
convSdllcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SDLLC-MIB", "convSdllcAddrSdlcAddr"))
if mibBuilder.loadTexts: convSdllcAddrEntry.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrEntry.setDescription('Status and configuration values for a specific SDLLC conversion SDLC address. ')
convSdllcAddrSdlcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: convSdllcAddrSdlcAddr.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrSdlcAddr.setDescription('The address of the SDLC station.')
convSdllcAddrPartnerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcAddrPartnerMacAddr.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrPartnerMacAddr.setDescription('The MAC address of the LLC2 station, for device-initiated SDLLC connections.')
convSdllcAddrXID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcAddrXID.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrXID.setDescription('The XID value that is associated with the SDLC station. This value must match the host configured value.')
convSdllcAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("sdlcDisconnecting", 2), ("sdlcPriConnecting", 3), ("netDisconnecting", 4), ("netConnecting", 5), ("sdlcSecConnecting", 6), ("connected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcAddrState.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrState.setDescription('Current state of the SDLLC connection.')
convSdllcAddrMaxSdlcFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 28, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: convSdllcAddrMaxSdlcFrameSize.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrMaxSdlcFrameSize.setDescription('The largest information frame (I-frame) size that can be sent or received on the SDLC session.')
convSdllcNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 2))
convSdllcNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 2, 0))
convSdllcPeerStateChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 28, 2, 0, 1)).setObjects(("CISCO-SDLLC-MIB", "convSdllcAddrState"))
if mibBuilder.loadTexts: convSdllcPeerStateChangeNotification.setStatus('current')
if mibBuilder.loadTexts: convSdllcPeerStateChangeNotification.setDescription('This Notification indicates that the state of an SDLLC connection has transitioned to connected or disconnected.')
sdllcMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 3))
sdllcMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 3, 1))
sdllcMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 28, 3, 2))
sdllcMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 28, 3, 1, 1)).setObjects(("CISCO-SDLLC-MIB", "convSdllcPortGroup"), ("CISCO-SDLLC-MIB", "convSdllcAddrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sdllcMibCompliance = sdllcMibCompliance.setStatus('current')
if mibBuilder.loadTexts: sdllcMibCompliance.setDescription('The compliance statement for sdllc.')
convSdllcPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 28, 3, 2, 1)).setObjects(("CISCO-SDLLC-MIB", "convSdllcPortVirtMacAddr"), ("CISCO-SDLLC-MIB", "convSdllcPortVirtRing"), ("CISCO-SDLLC-MIB", "convSdllcPortBridge"), ("CISCO-SDLLC-MIB", "convSdllcPortLlc2Ring"), ("CISCO-SDLLC-MIB", "convSdllcPortLocalAck"), ("CISCO-SDLLC-MIB", "convSdllcPortLocalAckState"), ("CISCO-SDLLC-MIB", "convSdllcPortMaxLlc2FrameSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    convSdllcPortGroup = convSdllcPortGroup.setStatus('current')
if mibBuilder.loadTexts: convSdllcPortGroup.setDescription('A collection of objects providing configuration and operational information about an SDLLC port.')
convSdllcAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 28, 3, 2, 2)).setObjects(("CISCO-SDLLC-MIB", "convSdllcAddrPartnerMacAddr"), ("CISCO-SDLLC-MIB", "convSdllcAddrXID"), ("CISCO-SDLLC-MIB", "convSdllcAddrState"), ("CISCO-SDLLC-MIB", "convSdllcAddrMaxSdlcFrameSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    convSdllcAddrGroup = convSdllcAddrGroup.setStatus('current')
if mibBuilder.loadTexts: convSdllcAddrGroup.setDescription('A collection of objects providing configuration and operational information about an SDLC address.')
mibBuilder.exportSymbols("CISCO-SDLLC-MIB", convSdllcAddrMaxSdlcFrameSize=convSdllcAddrMaxSdlcFrameSize, sdllcMibCompliance=sdllcMibCompliance, convSdllcNotificationPrefix=convSdllcNotificationPrefix, convSdllcAddrs=convSdllcAddrs, ciscoSnaSdllcMIB=ciscoSnaSdllcMIB, PYSNMP_MODULE_ID=ciscoSnaSdllcMIB, convSdllcPortLlc2Ring=convSdllcPortLlc2Ring, convSdllcAddrState=convSdllcAddrState, convSdllcPortTable=convSdllcPortTable, convSdllcObjects=convSdllcObjects, convSdllcPortVirtRing=convSdllcPortVirtRing, convSdllcPorts=convSdllcPorts, convSdllcPortVirtMacAddr=convSdllcPortVirtMacAddr, convSdllcPortGroup=convSdllcPortGroup, convSdllcAddrPartnerMacAddr=convSdllcAddrPartnerMacAddr, convSdllcPortLocalAckState=convSdllcPortLocalAckState, convSdllcPortLocalAck=convSdllcPortLocalAck, convSdllcAddrEntry=convSdllcAddrEntry, convSdllcAddrTable=convSdllcAddrTable, convSdllcAddrGroup=convSdllcAddrGroup, convSdllcPeerStateChangeNotification=convSdllcPeerStateChangeNotification, sdllcMibCompliances=sdllcMibCompliances, convSdllcNotifications=convSdllcNotifications, convSdllcPortBridge=convSdllcPortBridge, convSdllcPortMaxLlc2FrameSize=convSdllcPortMaxLlc2FrameSize, convSdllcAddrSdlcAddr=convSdllcAddrSdlcAddr, sdllcMibGroups=sdllcMibGroups, sdllcMibConformance=sdllcMibConformance, convSdllcAddrXID=convSdllcAddrXID, convSdllcPortEntry=convSdllcPortEntry)
