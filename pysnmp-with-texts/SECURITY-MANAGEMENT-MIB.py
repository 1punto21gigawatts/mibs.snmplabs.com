#
# PySNMP MIB module SECURITY-MANAGEMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SECURITY-MANAGEMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
avEntPhySeverity, = mibBuilder.importSymbols("AVAYA-ENTITY-MIB", "avEntPhySeverity")
lsg, = mibBuilder.importSymbols("AVAYAGEN-MIB", "lsg")
cmgTrapOnBoard, cmgTrapOnIccMissing, cmgTrapSubsystem, cmgTrapLocation, cmgTrapModule = mibBuilder.importSymbols("G700-MG-MIB", "cmgTrapOnBoard", "cmgTrapOnIccMissing", "cmgTrapSubsystem", "cmgTrapLocation", "cmgTrapModule")
ifIndex, ifPhysAddress, ifName, ifType = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifPhysAddress", "ifName", "ifType")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
genOpLastFailureDisplay, genAppFileId, genAppFileVersionNumber, genAppFileName = mibBuilder.importSymbols("LOAD-MIB", "genOpLastFailureDisplay", "genAppFileId", "genAppFileVersionNumber", "genAppFileName")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Unsigned32, ModuleIdentity, Bits, MibIdentifier, Gauge32, IpAddress, Counter32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Bits", "MibIdentifier", "Gauge32", "IpAddress", "Counter32", "Integer32", "iso")
PhysAddress, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "DateAndTime", "TextualConvention")
secMngModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1))
secMngModule.setRevisions(('2006-03-13 18:49', '2005-11-23 13:21', '2005-01-11 16:54', '2005-03-02 16:02', '2005-04-20 16:06', '2006-02-27 19:16', '2010-03-23 10:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: secMngModule.setRevisionsDescriptions(('Support for ASG Authentication File and Authentication Notifications', 'Version 1.0.9 add support for new portocol enum value telnetServices in object secMngProtoId, added as part of G450 project development - ref CID 110907 Pesah ', ' Version 1.0.6 Added support for SYN cookies operational state monitoring, and configueration state monitoring/change. The following items were added: o secTcpSynCookies o secTcpSynCkiOpState o secTcpSynCkiCfgState Changed by Nimrod Dezent', ' Version 1.0.7 2 MAr 2005 Added support for MSS notification generated as result of DoS attacks or unauthenticated attempts - see definition in CID 104904. All new MIB objects - notification and varbinds are located under avMssNotifications MIB subtree ', ' 1.0.8 Changed default value of MSS rate limiting from 60 seconds to 300 seconds', 'Adding new notifictations supporting Secret Management for backup and restore (startup-config) file ', ' Adding traps which support IPv6. a. avUnAuthAccessEvent. b. avAccountLockoutEvent. c. avIPv6AddressDuplicationEvent. d. avNSReceivedDuplicateAddressEvent. e. avNAReceivedDuplicateAddressEvent. ',))
if mibBuilder.loadTexts: secMngModule.setLastUpdated('201003231045Z')
if mibBuilder.loadTexts: secMngModule.setOrganization('Avaya')
if mibBuilder.loadTexts: secMngModule.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: secMngModule.setDescription('Defines MIB objects related to device secured management.')
class OnOffType(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class ServiceStateType(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("on", 1), ("off", 2), ("notSupported", 3))

avayaSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14))
secMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 1), OnOffType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secMode.setStatus('current')
if mibBuilder.loadTexts: secMode.setDescription('When the security mode flag = on - it indicates that device operates in secured mode, =off - in non-secured mode. Otherwize when the value retuned =Not relevant - secured mode is not supported in this device.')
secTcpSynCookies = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 2))
secTcpSynCkiOpState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 2, 1), OnOffType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secTcpSynCkiOpState.setStatus('current')
if mibBuilder.loadTexts: secTcpSynCkiOpState.setDescription('Monitors the operational state of the TCP SYN cookies defense mechanism. The operational state of the SYN cookies can change only after a reset, if the configuration state was changed and the running configuration was saved to the startup configuration before the reset. Use secTcpSynCkiCfgState to monitor and change the SYN cookies configuration state. When the SYN cookies feature is turned on, it helps protect the local host from SYN attacks (a type of DoS attack).')
secTcpSynCkiCfgState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 2, 2), OnOffType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secTcpSynCkiCfgState.setStatus('current')
if mibBuilder.loadTexts: secTcpSynCkiCfgState.setDescription('Controls and monitors the configuration state of the TCP SYN cookies defense mechanism. The operational state of the SYN cookies can change only after reset, if the configuration state was changed and the running configuration was saved to the startup configuration before the reset. Use secTcpSynCkiOpState to monitor the SYN cookies operational state. When the SYN cookies feature is turned on, it helps protect the local host from SYN attacks (a type of DoS attack). ')
secMngProtoTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 3), )
if mibBuilder.loadTexts: secMngProtoTable.setStatus('current')
if mibBuilder.loadTexts: secMngProtoTable.setDescription('List of security management protocols supported in the device. ')
secMngProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 3, 1), ).setIndexNames((0, "SECURITY-MANAGEMENT-MIB", "secMngProtoId"))
if mibBuilder.loadTexts: secMngProtoEntry.setStatus('current')
if mibBuilder.loadTexts: secMngProtoEntry.setDescription('Description.')
secMngProtoId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("scpConfigFiles", 1), ("scpImageFiles", 2), ("ssh", 3), ("telnet", 4), ("snmpv3", 5), ("http", 6), ("https", 7), ("telnetClient", 8), ("icmpRedirection", 9), ("icmp", 10), ("recoveryPassword", 11), ("sshClient", 12), ("snmpv1", 13), ("icmpEcho", 14), ("ftpClient", 15), ("tftp", 16), ("dhcp", 17), ("dnsResolver", 18), ("scpClient", 19), ("tftpClient", 20), ("telnetServices", 21), ("dnsRelay", 22), ("arpInspection", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secMngProtoId.setStatus('current')
if mibBuilder.loadTexts: secMngProtoId.setDescription('Index to the secMngProtoTable. The index can take one of the following values that correspond to supported management protocols scpConfigFiles(1), scpImageFiles(2), ssh(3), telnet(4), snmpv3(5), http(6), https(7), telnetClient(8), icmpRedirection(9), - icmp redirection service state icmp(10), - icmp services status recoveryPassword(11), - recovery password state sshClient(12), snmpv1(13), icmpEcho(14) - icmp service has been launched in EchoOnly mode tftp(16), dhcp(17), dnsResolver(18, scpClient(19), tftpClient(20), servicesTelnet(21), - reports telnet status on Services interface in G450 Missing entry indicates that corresponding protocol is not supported. ')
secMngProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 3, 1, 2), ServiceStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secMngProtoStatus.setStatus('current')
if mibBuilder.loadTexts: secMngProtoStatus.setDescription('Portocol status. When the status is =on - it indicates that correpsonding protocol is up and running, =off - protocol is down. Otherwize when the value retuned =Not relevant - the protocol is not supported.')
secMngConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 4))
secMngGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 4, 1))
secMngBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 4, 1, 1)).setObjects(("SECURITY-MANAGEMENT-MIB", "secMode"), ("SECURITY-MANAGEMENT-MIB", "secMngProtoId"), ("SECURITY-MANAGEMENT-MIB", "secMngProtoStatus"), ("SECURITY-MANAGEMENT-MIB", "secTcpSynCkiOpState"), ("SECURITY-MANAGEMENT-MIB", "secTcpSynCkiCfgState"), ("SECURITY-MANAGEMENT-MIB", "fipsEnhancedSecurityFlg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secMngBasicGroup = secMngBasicGroup.setStatus('current')
if mibBuilder.loadTexts: secMngBasicGroup.setDescription('Description.')
secMngCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 4, 2))
lsgLicManagement = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5))
if mibBuilder.loadTexts: lsgLicManagement.setStatus('current')
if mibBuilder.loadTexts: lsgLicManagement.setDescription('Group of MIBs objects used for configuration/presentation of the License information generated by Avaya Remote Feature Activation (RFA) system. ')
lsgLicMngTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1), )
if mibBuilder.loadTexts: lsgLicMngTable.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngTable.setDescription('RFA based License management table. All elements are displaying the feature activation status. License activation controlled by the license file. The table is indexed by the license feature keyword assuming that the same keyword describing a feature cannot appear more than once per a license file. ')
lsgLicMngEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1, 1), ).setIndexNames((0, "SECURITY-MANAGEMENT-MIB", "lsgLicMngFeatureKeyword"))
if mibBuilder.loadTexts: lsgLicMngEntry.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngEntry.setDescription('Entry in lsgLicMngTable. ')
lsgLicMngFeatureKeyword = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lsgLicMngFeatureKeyword.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngFeatureKeyword.setDescription('This table entry contains a features keyword. The feature keywords are text-based for example FEAT_VPN string. This field is used as a table index')
lsgLicMngFeatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onOffFeature", 1), ("quantifiableFeature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsgLicMngFeatureType.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngFeatureType.setDescription('License activation mechanism support two feature types * Boolean on-off feature * Features that describe quantities for example number of concurrent VPN peers ')
lsgLicMngAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1, 1, 3), OnOffType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsgLicMngAdminStatus.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngAdminStatus.setDescription('An administration status shows the feature activation status - when set to On the feature is activated by the RFA licensing system. ')
lsgLicMngOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1, 1, 4), OnOffType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsgLicMngOperStatus.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngOperStatus.setDescription('The operation status shows the actual status of the corresponding feature - feature can be not operational enabled if for example device must be reset for feature to be activated or feature is not supported by a device.')
lsgLicMngCountedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsgLicMngCountedValue.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngCountedValue.setDescription('For counted features, this entry shows the associated quantity')
lsgLicMngLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("licNoError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsgLicMngLastError.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngLastError.setDescription('Shows feature error state')
lsgLicMngConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 20))
if mibBuilder.loadTexts: lsgLicMngConformance.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngConformance.setDescription('Description.')
lsgLicMngGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 20, 1))
if mibBuilder.loadTexts: lsgLicMngGroups.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngGroups.setDescription('Description.')
lsgLicMngBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 5, 20, 1, 1)).setObjects(("SECURITY-MANAGEMENT-MIB", "lsgLicMngFeatureKeyword"), ("SECURITY-MANAGEMENT-MIB", "lsgLicMngFeatureType"), ("SECURITY-MANAGEMENT-MIB", "lsgLicMngAdminStatus"), ("SECURITY-MANAGEMENT-MIB", "lsgLicMngOperStatus"), ("SECURITY-MANAGEMENT-MIB", "lsgLicMngCountedValue"), ("SECURITY-MANAGEMENT-MIB", "lsgLicMngLastError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lsgLicMngBasicGroup = lsgLicMngBasicGroup.setStatus('current')
if mibBuilder.loadTexts: lsgLicMngBasicGroup.setDescription('Description.')
fips140 = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 6))
if mibBuilder.loadTexts: fips140.setStatus('current')
if mibBuilder.loadTexts: fips140.setDescription('Description.')
fipsEnhancedSecurityFlg = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 6, 1), OnOffType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsEnhancedSecurityFlg.setStatus('current')
if mibBuilder.loadTexts: fipsEnhancedSecurityFlg.setDescription("enhanceSecurity flag reports operation of a product in enhance security mode. When running under enhanced security a product performs certain secure-related activities safely, closely matching FIPS-140-2 standard. However the flag doesn't necessary indicate that all device operations comply to FIPS approved mode as some of security activities might be controlled via different mechanisms for example manual configuration. Security policy/Crypto Office guidance documents shall be used as reference as for if this flag can be used as an evidence for operation in FIPS approved mode. The flag is read only and set via product CLI. ")
avMssNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7))
if mibBuilder.loadTexts: avMssNotifications.setStatus('current')
if mibBuilder.loadTexts: avMssNotifications.setDescription('Subtree hosting MSS notification traps')
avMssNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 0))
if mibBuilder.loadTexts: avMssNotificationPrefix.setStatus('current')
if mibBuilder.loadTexts: avMssNotificationPrefix.setDescription('Description.')
avMSSDenialOfService = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 0, 1)).setObjects(("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsDoSType"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsSrcAddr"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsDstAddr"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsDstPort"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsCount"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsIpProtocol"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsSrcMACAddr"))
if mibBuilder.loadTexts: avMSSDenialOfService.setStatus('current')
if mibBuilder.loadTexts: avMSSDenialOfService.setDescription('The MSS notification sent on DoS attack')
avMSSNotificationRate = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 28800)).clone(300)).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avMSSNotificationRate.setStatus('current')
if mibBuilder.loadTexts: avMSSNotificationRate.setDescription('Defines the rate of MSS notification report. MSS reports will be generated as per rate if the event group counter passes the threshold correspondingly. The rate units are given in seconds with minimum - 10 seconds maximum - 8 hours (60 * 60 * 8) ')
avMSSVarbinds = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4))
if mibBuilder.loadTexts: avMSSVarbinds.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbinds.setDescription('Subtree of access-for-notify arguments to MSS notification varbinds list.')
avMSSVarbindsDoSType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 100, 101, 102, 103, 104, 105))).clone(namedValues=NamedValues(("avMSSDoSMalformedARPs", 1), ("avMSSDoSLandAttack", 2), ("avMSSDoSICMPReflectAttack", 3), ("avMSSDoSUknownPort", 4), ("avMSSDoSUrgTCPOption", 5), ("avMSSDoSMalformedIP", 6), ("avMSSDoSSynFlood", 7), ("avMSSDoSSmurfAttack", 8), ("avMSSDoSFraggleAttack", 9), ("avMSSDoSMalFragmentIP", 10), ("avMSSSpoofedIP", 11), ("avMSSUnknownL4Protocol", 12), ("avMSSunAuthenticatedAccess", 13), ("avMSSUserDefinedDoSAttack100", 100), ("avMSSUserDefinedDoSAttack101", 101), ("avMSSUserDefinedDoSAttack102", 102), ("avMSSUserDefinedDoSAttack103", 103), ("avMSSUserDefinedDoSAttack104", 104), ("avMSSUserDefinedDoSAttack105", 105)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsDoSType.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsDoSType.setDescription('Enumeration of DoS attacks')
avMSSVarbindsDescription = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsDescription.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsDescription.setDescription('Textual description of the DoS event ')
avMSSVarbindsSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsSrcAddr.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsSrcAddr.setDescription('Source IP address in IP header. Set to 0.0.0.0 if address is unknown')
avMSSVarbindsDstAddr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 4), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsDstAddr.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsDstAddr.setDescription('Destination IP address in IP header. Set to 0.0.0.0 if address is unknown')
avMSSVarbindsDstPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsDstPort.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsDstPort.setDescription('Destination port number in IP header. 0 if port is not applicable or unknown')
avMSSVarbindsIpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsIpProtocol.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsIpProtocol.setDescription('The protocol field in IP header ')
avMSSVarbindsCount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 7), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsCount.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsCount.setDescription('Counted number of events that occur in a given period for a corresponding class of security violations (DoS, not authorized access, etc).')
avMSSVarbindsSrcMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 7, 4, 8), PhysAddress().clone('00:00:00:00:00:00')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avMSSVarbindsSrcMACAddr.setStatus('current')
if mibBuilder.loadTexts: avMSSVarbindsSrcMACAddr.setDescription('Source Physical address (MAC) of a packet identified as a packet carrying DoS payload. Set to 00:00:00:00:00:00 when phyicial address is not supported or unknown to the system')
avMSSgroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 8)).setObjects(("SECURITY-MANAGEMENT-MIB", "avMSSNotificationRate"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsSrcAddr"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsDstAddr"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsDstPort"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsDescription"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsIpProtocol"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsDoSType"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsCount"), ("SECURITY-MANAGEMENT-MIB", "avMSSVarbindsSrcMACAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avMSSgroup = avMSSgroup.setStatus('current')
if mibBuilder.loadTexts: avMSSgroup.setDescription('Description.')
mssNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 9)).setObjects(("SECURITY-MANAGEMENT-MIB", "avMSSDenialOfService"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mssNotificationGroup = mssNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: mssNotificationGroup.setDescription('Description.')
secMngNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10))
if mibBuilder.loadTexts: secMngNotifications.setStatus('current')
if mibBuilder.loadTexts: secMngNotifications.setDescription('Description.')
secMngNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 0))
if mibBuilder.loadTexts: secMngNotificationsPrefix.setStatus('current')
if mibBuilder.loadTexts: secMngNotificationsPrefix.setDescription('Description.')
avConfigurationEncKeyMismatchFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 0, 1)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("LOAD-MIB", "genAppFileId"), ("LOAD-MIB", "genAppFileName"), ("LOAD-MIB", "genAppFileVersionNumber"), ("LOAD-MIB", "genOpLastFailureDisplay"))
if mibBuilder.loadTexts: avConfigurationEncKeyMismatchFault.setStatus('current')
if mibBuilder.loadTexts: avConfigurationEncKeyMismatchFault.setDescription('Encryption keys mismatch error. Configuration download operation is aborted')
avConfigurationMasterKeyChange = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 0, 2)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: avConfigurationMasterKeyChange.setStatus('current')
if mibBuilder.loadTexts: avConfigurationMasterKeyChange.setDescription('Configuration Master key was changed ')
avPasswordToExpireAlert = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 0, 3)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("SECURITY-MANAGEMENT-MIB", "secMngNumOfDays2Expire"))
if mibBuilder.loadTexts: avPasswordToExpireAlert.setStatus('current')
if mibBuilder.loadTexts: avPasswordToExpireAlert.setDescription('User password is about to expire in n days ')
avUnAuthAccessEvent = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 0, 200)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("SECURITY-MANAGEMENT-MIB", "avUnauthUserName"), ("SECURITY-MANAGEMENT-MIB", "avUnauthInetAddressType"), ("SECURITY-MANAGEMENT-MIB", "avUnauthInetAddress"), ("SECURITY-MANAGEMENT-MIB", "avUnauthProtocol"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileAFID"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avUnAuthAccessEvent.setStatus('current')
if mibBuilder.loadTexts: avUnAuthAccessEvent.setDescription('Notification on unauthorized login attempts. o For CLI and SNMP login failures: Both SNMP SSH and WEB management interfaces shall identify situation and alert. The reported information should include wrong user name, host name and IP address of remote host. Passwords is not reported because of the possibility to reveal password. o For pre-shared-key (PSK) authentication failure in IKE: * lntUnauthUserName - - In IKE AM: the ID sent by the remote peer in the ID payload. - In IKE MM: the ID associated with the remote peer IP in the running configuration. * avUnauthInetAddressType and avUnauthInetAddress - represents the source IP of the packet sent by the remote peer. * avUnauthProtocol - lntIKEAccess(500) ')
avAccountLockoutEvent = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 0, 201)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("SECURITY-MANAGEMENT-MIB", "avUnauthUserName"), ("SECURITY-MANAGEMENT-MIB", "avUnauthInetAddressType"), ("SECURITY-MANAGEMENT-MIB", "avUnauthInetAddress"), ("SECURITY-MANAGEMENT-MIB", "avUnauthProtocol"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileAFID"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avAccountLockoutEvent.setStatus('current')
if mibBuilder.loadTexts: avAccountLockoutEvent.setDescription('After configurable number of failed attempts to authenticate a user, device penalized by locking them out for a pre-specified amount of time.')
avIPv6AddressDuplicationEvent = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 0, 202)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("SECURITY-MANAGEMENT-MIB", "avDuplicatedInetAddressType"), ("SECURITY-MANAGEMENT-MIB", "avDuplicatedInetAddress"), ("SECURITY-MANAGEMENT-MIB", "avDuplicatedMACAddress"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileAFID"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avIPv6AddressDuplicationEvent.setStatus('current')
if mibBuilder.loadTexts: avIPv6AddressDuplicationEvent.setDescription('The trap is generated whenever there is a detection of IPv6 address (link-local or global IPv6 address) duplication as part of DAD.')
secMngVarbinds = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1))
if mibBuilder.loadTexts: secMngVarbinds.setStatus('current')
if mibBuilder.loadTexts: secMngVarbinds.setDescription('Notify only varbinds used for notifications in secMngNotifications group')
secMngNumOfDays2Expire = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 1), Unsigned32()).setUnits('Days').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: secMngNumOfDays2Expire.setStatus('current')
if mibBuilder.loadTexts: secMngNumOfDays2Expire.setDescription('Description.')
avUnauthUserName = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avUnauthUserName.setStatus('current')
if mibBuilder.loadTexts: avUnauthUserName.setDescription("The name of the user who's attempt to access device was identified as unauthorized. ")
avUnauthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(22, 23, 80, 161, 443, 500, 6889, 6890, 6891))).clone(namedValues=NamedValues(("avSSHAccess", 22), ("avTELNETAccess", 23), ("avHTTPAccess", 80), ("avSNMPAccess", 161), ("avHTTPSAccess", 443), ("avIKEAccess", 500), ("avRASAccess", 6889), ("avConsoleAccess", 6890), ("avPPPAccess", 6891)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avUnauthProtocol.setStatus('current')
if mibBuilder.loadTexts: avUnauthProtocol.setDescription('The management protocol employed for the unauthorized access - avSSHAccess(22) -- SSH protocol avTELNETAccess(23), --Telnet protocol avHTTPAccess(80), -- HTTP protocol avSNMPAccess(161), -- SNMP protocol avHTTPSAccess(443), -- HTTPS protocol over TLS sockets avIKEAccess(500), -- IKE protocol - PSK authentication failure avRASAccess(6889), -- RAS access over dial-up connection avConsoleAccess(6890), -- Access from the Console port avPPPAccess(6891) -- Access to PPP over modem ')
avUnauthInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 9), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avUnauthInetAddressType.setStatus('current')
if mibBuilder.loadTexts: avUnauthInetAddressType.setDescription('The Inet Address Type of access violating station')
avUnauthInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 10), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avUnauthInetAddress.setStatus('current')
if mibBuilder.loadTexts: avUnauthInetAddress.setDescription('The Inet Address of access violating station')
avDuplicatedInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 11), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avDuplicatedInetAddressType.setStatus('current')
if mibBuilder.loadTexts: avDuplicatedInetAddressType.setDescription('The duplicated Inet Address Type.')
avDuplicatedInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 12), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avDuplicatedInetAddress.setStatus('current')
if mibBuilder.loadTexts: avDuplicatedInetAddress.setDescription('The duplicated Inet Address.')
avDuplicatedMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 1, 13), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avDuplicatedMACAddress.setStatus('current')
if mibBuilder.loadTexts: avDuplicatedMACAddress.setDescription('The MAC address of the station that claims to be configured with the duplicated IPv6 address.')
avMngNotificationCompliance = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 10, 2)).setObjects(("SECURITY-MANAGEMENT-MIB", "secMngNumOfDays2Expire"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avMngNotificationCompliance = avMngNotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: avMngNotificationCompliance.setDescription('Description.')
secMngNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 11)).setObjects(("SECURITY-MANAGEMENT-MIB", "avConfigurationEncKeyMismatchFault"), ("SECURITY-MANAGEMENT-MIB", "avConfigurationMasterKeyChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secMngNotificationGroup = secMngNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: secMngNotificationGroup.setDescription('Description.')
avASGAuthenticationFiles = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12))
if mibBuilder.loadTexts: avASGAuthenticationFiles.setStatus('current')
if mibBuilder.loadTexts: avASGAuthenticationFiles.setDescription('Info on authentication file(s) installed in a product')
avASGAuthFileHeader = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3))
if mibBuilder.loadTexts: avASGAuthFileHeader.setStatus('current')
if mibBuilder.loadTexts: avASGAuthFileHeader.setDescription('The information on Authentication File stored in ASG AF file header ')
avASGAuthFileAFID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avASGAuthFileAFID.setStatus('current')
if mibBuilder.loadTexts: avASGAuthFileAFID.setDescription('The productID value ascociated with the Authentication File (format 7xxxxxxxxx) ')
avASGAuthFileGenDate = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 2), DisplayString()).setUnits('YYYY/MM/DD').setMaxAccess("readonly")
if mibBuilder.loadTexts: avASGAuthFileGenDate.setStatus('current')
if mibBuilder.loadTexts: avASGAuthFileGenDate.setDescription('Date of Authentication file generation (format YYYY/MM/DD)')
avASGAuthFileGenTime = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setUnits('HH:MM:SS').setMaxAccess("readonly")
if mibBuilder.loadTexts: avASGAuthFileGenTime.setStatus('current')
if mibBuilder.loadTexts: avASGAuthFileGenTime.setDescription('A 8-character string in US short locale time (format= HH:MM:SS)')
avASGAuthFileRelease = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avASGAuthFileRelease.setStatus('current')
if mibBuilder.loadTexts: avASGAuthFileRelease.setDescription('Major software release the AF file was generated for ')
avASGNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 5))
if mibBuilder.loadTexts: avASGNotifications.setStatus('current')
if mibBuilder.loadTexts: avASGNotifications.setDescription('Description.')
avASGNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 5, 0))
if mibBuilder.loadTexts: avASGNotificationsPrefix.setStatus('current')
if mibBuilder.loadTexts: avASGNotificationsPrefix.setDescription('Description.')
avASGAFDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 5, 0, 1)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("LOAD-MIB", "genAppFileId"), ("LOAD-MIB", "genAppFileName"), ("LOAD-MIB", "genAppFileVersionNumber"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileAFID"))
if mibBuilder.loadTexts: avASGAFDownloadSuccess.setStatus('current')
if mibBuilder.loadTexts: avASGAFDownloadSuccess.setDescription('AF download successfully accomplished')
avASGAFDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 3, 5, 0, 2)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("LOAD-MIB", "genAppFileId"), ("LOAD-MIB", "genAppFileName"), ("LOAD-MIB", "genAppFileVersionNumber"), ("LOAD-MIB", "genOpLastFailureDisplay"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileAFID"))
if mibBuilder.loadTexts: avASGAFDownloadFailure.setStatus('current')
if mibBuilder.loadTexts: avASGAFDownloadFailure.setDescription('AF download Failed ')
avASGAuthFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 1000)).setObjects(("SECURITY-MANAGEMENT-MIB", "avASGAuthFileAFID"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileGenDate"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileGenTime"), ("SECURITY-MANAGEMENT-MIB", "avASGAuthFileRelease"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avASGAuthFileGroup = avASGAuthFileGroup.setStatus('current')
if mibBuilder.loadTexts: avASGAuthFileGroup.setDescription('Description.')
avASGAuthFileNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 12, 1001)).setObjects(("SECURITY-MANAGEMENT-MIB", "avASGAFDownloadFailure"), ("SECURITY-MANAGEMENT-MIB", "avASGAFDownloadSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avASGAuthFileNotificationGroup = avASGAuthFileNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: avASGAuthFileNotificationGroup.setDescription('ASG authentictation File Notification Group')
avSecLocalDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 14, 1, 13), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSecLocalDateAndTime.setStatus('current')
if mibBuilder.loadTexts: avSecLocalDateAndTime.setDescription('Setting the Local current RTC date and time, when not registered with CM')
mibBuilder.exportSymbols("SECURITY-MANAGEMENT-MIB", secTcpSynCookies=secTcpSynCookies, avASGAuthFileGroup=avASGAuthFileGroup, avMSSVarbinds=avMSSVarbinds, avASGAuthFileAFID=avASGAuthFileAFID, avIPv6AddressDuplicationEvent=avIPv6AddressDuplicationEvent, secTcpSynCkiOpState=secTcpSynCkiOpState, avMSSVarbindsDstPort=avMSSVarbindsDstPort, avMSSVarbindsSrcMACAddr=avMSSVarbindsSrcMACAddr, lsgLicMngBasicGroup=lsgLicMngBasicGroup, avSecLocalDateAndTime=avSecLocalDateAndTime, secMngConformance=secMngConformance, OnOffType=OnOffType, avMSSVarbindsCount=avMSSVarbindsCount, avUnauthUserName=avUnauthUserName, secMngProtoTable=secMngProtoTable, secMngGroups=secMngGroups, secMngNumOfDays2Expire=secMngNumOfDays2Expire, avUnauthProtocol=avUnauthProtocol, avPasswordToExpireAlert=avPasswordToExpireAlert, lsgLicMngLastError=lsgLicMngLastError, avConfigurationEncKeyMismatchFault=avConfigurationEncKeyMismatchFault, secTcpSynCkiCfgState=secTcpSynCkiCfgState, avayaSecurity=avayaSecurity, avMssNotificationPrefix=avMssNotificationPrefix, avDuplicatedInetAddressType=avDuplicatedInetAddressType, secMngModule=secMngModule, lsgLicMngTable=lsgLicMngTable, avASGAuthFileGenDate=avASGAuthFileGenDate, lsgLicMngAdminStatus=lsgLicMngAdminStatus, secMngProtoStatus=secMngProtoStatus, avMSSVarbindsDescription=avMSSVarbindsDescription, avASGAuthenticationFiles=avASGAuthenticationFiles, avASGAuthFileGenTime=avASGAuthFileGenTime, avASGAFDownloadSuccess=avASGAFDownloadSuccess, avASGNotificationsPrefix=avASGNotificationsPrefix, secMngNotificationGroup=secMngNotificationGroup, secMngNotificationsPrefix=secMngNotificationsPrefix, lsgLicMngCountedValue=lsgLicMngCountedValue, mssNotificationGroup=mssNotificationGroup, lsgLicMngFeatureType=lsgLicMngFeatureType, avASGAFDownloadFailure=avASGAFDownloadFailure, lsgLicMngEntry=lsgLicMngEntry, lsgLicMngGroups=lsgLicMngGroups, avMSSVarbindsDoSType=avMSSVarbindsDoSType, fipsEnhancedSecurityFlg=fipsEnhancedSecurityFlg, avMSSgroup=avMSSgroup, avASGAuthFileNotificationGroup=avASGAuthFileNotificationGroup, avMSSNotificationRate=avMSSNotificationRate, lsgLicMngFeatureKeyword=lsgLicMngFeatureKeyword, ServiceStateType=ServiceStateType, lsgLicMngConformance=lsgLicMngConformance, fips140=fips140, secMngNotifications=secMngNotifications, avUnauthInetAddressType=avUnauthInetAddressType, secMngProtoId=secMngProtoId, avDuplicatedMACAddress=avDuplicatedMACAddress, avMSSVarbindsSrcAddr=avMSSVarbindsSrcAddr, lsgLicManagement=lsgLicManagement, avUnAuthAccessEvent=avUnAuthAccessEvent, avDuplicatedInetAddress=avDuplicatedInetAddress, PYSNMP_MODULE_ID=secMngModule, avAccountLockoutEvent=avAccountLockoutEvent, avMSSVarbindsDstAddr=avMSSVarbindsDstAddr, secMngProtoEntry=secMngProtoEntry, avConfigurationMasterKeyChange=avConfigurationMasterKeyChange, avASGAuthFileRelease=avASGAuthFileRelease, avMSSDenialOfService=avMSSDenialOfService, secMode=secMode, avASGAuthFileHeader=avASGAuthFileHeader, secMngBasicGroup=secMngBasicGroup, avASGNotifications=avASGNotifications, avMngNotificationCompliance=avMngNotificationCompliance, lsgLicMngOperStatus=lsgLicMngOperStatus, avMssNotifications=avMssNotifications, avUnauthInetAddress=avUnauthInetAddress, secMngVarbinds=secMngVarbinds, avMSSVarbindsIpProtocol=avMSSVarbindsIpProtocol, secMngCompliance=secMngCompliance)
