#
# PySNMP MIB module SIP-REGISTRAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SIP-REGISTRAR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
applIndex, = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applIndex")
sipMIB, = mibBuilder.importSymbols("SIP-MIB-SMI", "sipMIB")
SipServerActions, = mibBuilder.importSymbols("SIP-TC", "SipServerActions")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, IpAddress, MibIdentifier, iso, ObjectIdentity, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, ModuleIdentity, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "IpAddress", "MibIdentifier", "iso", "ObjectIdentity", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "ModuleIdentity", "NotificationType", "Unsigned32")
TimeStamp, DateAndTime, TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DateAndTime", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
sipRegistrarMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 9998, 5))
if mibBuilder.loadTexts: sipRegistrarMIB.setLastUpdated('200007080000Z')
if mibBuilder.loadTexts: sipRegistrarMIB.setOrganization('IETF SIP Working Group, SIP MIB Team')
if mibBuilder.loadTexts: sipRegistrarMIB.setContactInfo('SIP MIB Team email: sip-mib@egroups.com Co-editor Kevin Lingle Cisco Systems, Inc. postal: 7025 Kit Creek Road P.O. Box 14987 Research Triangle Park, NC 27709 USA email: klingle@cisco.com phone: +1-919-392-2029 Co-editor Joon Maeng VTEL Corporation postal: 108 Wild Basin Rd. Austin, TX 78746 USA email: joon_maeng@vtel.com phone: +1-512-437-4567 Co-editor Dave Walker SS8 Networks, Inc. postal: 80 Hines Road Kanata, ON K2K 2T8 Canada email: drwalker@ss8networks.com phone: +1 613 592 2100')
if mibBuilder.loadTexts: sipRegistrarMIB.setDescription('Initial version of Session Initiation Protocol (SIP) Registrar MIB module. SIP is an application-layer signalling protocol for creating, modifying and terminating multimedia sessions with one or more participants. These sessions include Internet multimedia conferences and Internet telephone calls. SIP is defined in RFC 2543 (March 1999). A Registrar is a server that accepts REGISTER requests. A Registrar is typically co-located with a Proxy or Redirect Server.')
sipRegCfg = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 5, 1))
sipRegStats = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 5, 2))
sipRegCfgTable = MibTable((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1), )
if mibBuilder.loadTexts: sipRegCfgTable.setStatus('current')
if mibBuilder.loadTexts: sipRegCfgTable.setDescription('This table contains configuration objects applicable SIP registrars. Each row represents those objects for a particular SIP registrar present in this system. The instances of SIP registrars are uniquely identified by applIndex.')
sipRegCfgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: sipRegCfgEntry.setStatus('current')
if mibBuilder.loadTexts: sipRegCfgEntry.setDescription('A row of common configuration.')
sipRegAllowThirdParty = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegAllowThirdParty.setReference('RFC 2543, Section 4.2.6')
if mibBuilder.loadTexts: sipRegAllowThirdParty.setStatus('current')
if mibBuilder.loadTexts: sipRegAllowThirdParty.setDescription('This object specifies whether or not the Registrar should allows third party registrations. In third-party registration, the entity issuing the request (in the From header) is different from the entity being registered (in the To header) to whom the provided Contact information applies. If the value of this object is TRUE, the Registrar allows third party registrations. If the value is FALSE, third party registrations are rejected: a 403 Forbidden status code is returned to the requestor.')
sipRegContactDfltExpiryDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1, 2), Unsigned32().clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegContactDfltExpiryDuration.setReference('RFC 2543, Section 4.2.6')
if mibBuilder.loadTexts: sipRegContactDfltExpiryDuration.setStatus('current')
if mibBuilder.loadTexts: sipRegContactDfltExpiryDuration.setDescription('This object specifies the default expiration (time-to- live) of Contact information that is provided by User Agents when registering with this Registrar. This value is only used when no expiration has been specified by the user in the REGISTER request. If the value is applied to a registration and is different from the default (one hour), the server must return the value to the registered User Agent. The value contained in this object only applies if the value of the sipContactDfltExpiryDate object is NULL. If the value of this object applies, and is zero, then no default expiry is applied to registered contact information.')
sipRegContactDfltExpiryDate = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegContactDfltExpiryDate.setReference('RFC 2543, Section 4.2.6')
if mibBuilder.loadTexts: sipRegContactDfltExpiryDate.setStatus('current')
if mibBuilder.loadTexts: sipRegContactDfltExpiryDate.setDescription('This object specifies the default expiration date (time- to-live) of Contact information that is provided by User Agents when registering with this Registrar. This value is only used when no expiration has been specified by the user in the REGISTER request. If this value is applied to a registration, the server must return the value to the registered User Agent. The value contained in this object only applies if the value of the sipContactDfltExpiryDuration object is zero. If the value of this object applies, and is NULL, then no default expiry is applied to registered contact information.')
sipRegMaxContactExpiryDate = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4294967295)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegMaxContactExpiryDate.setStatus('current')
if mibBuilder.loadTexts: sipRegMaxContactExpiryDate.setDescription('This object specifies the maximum expiry that may be requested by a User Agent for a particular Contact. User Agents can specify expiry using either an Expiry header in a REGISTER request, or using an Expires parameter in a Contact header in a REGISTER request. If the value requested by the User Agent is greater than the value of this object, then the contact information is given the duration specified by this object, and that duration is indicated to the User Agent in the response.')
sipRegRespHasContacts = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegRespHasContacts.setStatus('current')
if mibBuilder.loadTexts: sipRegRespHasContacts.setDescription('This object specifies whether or not the Registrar should return all currently reachable locations for a successfully registering party in the REGISTER response message. If the value of this object is TRUE, the Registrar returns the locations in the REGISTER response. If the value is FALSE, no location information is provided.')
sipRegMaxUsers = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipRegMaxUsers.setStatus('current')
if mibBuilder.loadTexts: sipRegMaxUsers.setDescription('This object specifies the maximum number of users that the registrar supports. The current number of users is reflected by sipRegCurrentUsers.')
sipRegCurrentUsers = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipRegCurrentUsers.setStatus('current')
if mibBuilder.loadTexts: sipRegCurrentUsers.setDescription('This object specifies the number of users currently configured on the registrar.')
sipRegUserTable = MibTable((1, 3, 6, 1, 2, 1, 9998, 5, 1, 2), )
if mibBuilder.loadTexts: sipRegUserTable.setStatus('current')
if mibBuilder.loadTexts: sipRegUserTable.setDescription('This table contains information on all users registered to each Registrar in this system. The instances of SIP Registrar are uniquely identified by applIndex.')
sipRegUserEntry = MibTableRow((1, 3, 6, 1, 2, 1, 9998, 5, 1, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "SIP-REGISTRAR-MIB", "sipUserIndex"))
if mibBuilder.loadTexts: sipRegUserEntry.setStatus('current')
if mibBuilder.loadTexts: sipRegUserEntry.setDescription('This entry contains information for a single user registered to this Registrar.')
sipUserIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sipUserIndex.setStatus('current')
if mibBuilder.loadTexts: sipUserIndex.setDescription('This object uniquely identifies a conceptual row in the table.')
sipUserUri = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipUserUri.setStatus('current')
if mibBuilder.loadTexts: sipUserUri.setDescription("This object contains the user's address-of-record. It is the main form by which the registrar knows the user. The format is typically 'user@domain'. It is contained in the To header for all REGISTER requests.")
sipUserPassword = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipUserPassword.setStatus('current')
if mibBuilder.loadTexts: sipUserPassword.setDescription('This object specifies the password that the user must enter when being authenticated.')
sipUserAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipUserAuthenticationFailures.setStatus('current')
if mibBuilder.loadTexts: sipUserAuthenticationFailures.setDescription('This object contains a count of the number of times the user has failed authentication.')
sipUserTableRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipUserTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipUserTableRowStatus.setDescription('The row status of the entry. This object is required to create or delete rows remotely by a manager.')
sipContactTable = MibTable((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3), )
if mibBuilder.loadTexts: sipContactTable.setStatus('current')
if mibBuilder.loadTexts: sipContactTable.setDescription('This table contains information on every location where a registered user (specified by sipUserIndex) wishes to be found (i.e. has provided Contact information) to each SIP Registrar in this system. The instances of SIP Registrar are uniquely identified by applIndex.')
sipContactEntry = MibTableRow((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "SIP-REGISTRAR-MIB", "sipUserIndex"), (0, "SIP-REGISTRAR-MIB", "sipContactIndex"))
if mibBuilder.loadTexts: sipContactEntry.setStatus('current')
if mibBuilder.loadTexts: sipContactEntry.setDescription('This entry contains information for a single Contact. Multiple contacts may exist for a single user.')
sipContactIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sipContactIndex.setStatus('current')
if mibBuilder.loadTexts: sipContactIndex.setDescription('Along with the sipUserIndex, this object uniquely identifies a conceptual row in the table.')
sipContactDisplayName = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipContactDisplayName.setStatus('current')
if mibBuilder.loadTexts: sipContactDisplayName.setDescription("This object contains the display name for the Contact. For example, 'Santa at Home', or 'Santa on his Sled', corresponding to contact URLs of sip:BigGuy@sip.northpole.ca or sip:sclaus817@sip.mobile.com, respectively.")
sipContactURI = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipContactURI.setStatus('current')
if mibBuilder.loadTexts: sipContactURI.setDescription('This object contains either a SIP URL or a URI where the user can be contacted. This URI is normally returned to a client from a redirect server, or is used as the RequestURI in a SIP request line for requests forwarded by a proxy.')
sipContactLastUpdated = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipContactLastUpdated.setStatus('current')
if mibBuilder.loadTexts: sipContactLastUpdated.setDescription('This object indicates the time when this contact information was accepted. If the contact information is updated via a subsequent REGISTER of the same information, this object is also updated.')
sipContactExpiry = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipContactExpiry.setStatus('current')
if mibBuilder.loadTexts: sipContactExpiry.setDescription('This object contains the date and time when the contact information will no longer be valid. Such times may be specified by the user at registration (Expires header or expiry parameter in the Contact information), or a system default can be applied.')
sipContactPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipContactPreference.setReference('RFC 2543, Section 6.13')
if mibBuilder.loadTexts: sipContactPreference.setStatus('current')
if mibBuilder.loadTexts: sipContactPreference.setDescription("This object specifies the preference for this contact relative to all other active contacts for same user. A registering user may provide this preference as a 'qvalue' parameter in the Contact header. The format of this item is a decimal number between 0 and 1 (for example 0.9). Higher values indicate locations preferred by the user.")
sipContactAction = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 7), SipServerActions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipContactAction.setStatus('current')
if mibBuilder.loadTexts: sipContactAction.setDescription("This object indicates whether the user wanted the server to act as a redirect server or as a proxy server. It is specified by the optional 'action' parameter in the Contact header.")
sipContactRetryAfter = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 1, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipContactRetryAfter.setReference('RFC 2543, Section 6.32')
if mibBuilder.loadTexts: sipContactRetryAfter.setStatus('current')
if mibBuilder.loadTexts: sipContactRetryAfter.setDescription('This object indicates that the contact information is currently inactive, and that it should only be activated after the date and time specified by the object. This value is provided by a user when deleting contact information using a REGISTER request containing a Retry- After header.')
sipRegStatsTable = MibTable((1, 3, 6, 1, 2, 1, 9998, 5, 2, 1), )
if mibBuilder.loadTexts: sipRegStatsTable.setStatus('current')
if mibBuilder.loadTexts: sipRegStatsTable.setDescription('This table contains the summary statistics objects applicable to all SIP Registrars in this system. Each row represents those objects for a particular SIP Registrar. The instances of SIP Registrars are uniquely identified by applIndex.')
sipRegStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 9998, 5, 2, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: sipRegStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sipRegStatsEntry.setDescription('A row of summary statistics.')
sipRegAcceptedRegistrations = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipRegAcceptedRegistrations.setStatus('current')
if mibBuilder.loadTexts: sipRegAcceptedRegistrations.setDescription('This object contains a count of the number of REGISTER requests that have been accepted (status code 200) by the Registrar. This includes additions of new contact information, refreshing contact information, as well as requests for deletion of contact information.')
sipRegRejectedRegistrations = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipRegRejectedRegistrations.setStatus('current')
if mibBuilder.loadTexts: sipRegRejectedRegistrations.setDescription('This object contains a count of the number REGISTER requests that have been rejected by the Registrar.')
sipRegMIBNotif = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 5, 3))
sipRegMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 5, 4))
sipRegMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 5, 4, 1))
sipRegMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 5, 4, 2))
sipRegCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 9998, 5, 4, 1, 1)).setObjects(("SIP-REGISTRAR-MIB", "sipRegistrarConfigGroup"), ("SIP-REGISTRAR-MIB", "sipRegistrarStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sipRegCompliance = sipRegCompliance.setStatus('current')
if mibBuilder.loadTexts: sipRegCompliance.setDescription('The compliance statement for SIP entities.')
sipRegistrarConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 9998, 5, 4, 2, 1)).setObjects(("SIP-REGISTRAR-MIB", "sipRegAllowThirdParty"), ("SIP-REGISTRAR-MIB", "sipRegContactDfltExpiryDuration"), ("SIP-REGISTRAR-MIB", "sipRegContactDfltExpiryDate"), ("SIP-REGISTRAR-MIB", "sipRegMaxContactExpiryDate"), ("SIP-REGISTRAR-MIB", "sipRegRespHasContacts"), ("SIP-REGISTRAR-MIB", "sipRegMaxUsers"), ("SIP-REGISTRAR-MIB", "sipRegCurrentUsers"), ("SIP-REGISTRAR-MIB", "sipUserUri"), ("SIP-REGISTRAR-MIB", "sipUserPassword"), ("SIP-REGISTRAR-MIB", "sipUserAuthenticationFailures"), ("SIP-REGISTRAR-MIB", "sipUserTableRowStatus"), ("SIP-REGISTRAR-MIB", "sipContactDisplayName"), ("SIP-REGISTRAR-MIB", "sipContactURI"), ("SIP-REGISTRAR-MIB", "sipContactLastUpdated"), ("SIP-REGISTRAR-MIB", "sipContactExpiry"), ("SIP-REGISTRAR-MIB", "sipContactPreference"), ("SIP-REGISTRAR-MIB", "sipContactAction"), ("SIP-REGISTRAR-MIB", "sipContactRetryAfter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sipRegistrarConfigGroup = sipRegistrarConfigGroup.setStatus('current')
if mibBuilder.loadTexts: sipRegistrarConfigGroup.setDescription('A collection of objects providing configuration for SIP Registrars.')
sipRegistrarStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 9998, 5, 4, 2, 2)).setObjects(("SIP-REGISTRAR-MIB", "sipRegAcceptedRegistrations"), ("SIP-REGISTRAR-MIB", "sipRegRejectedRegistrations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sipRegistrarStatsGroup = sipRegistrarStatsGroup.setStatus('current')
if mibBuilder.loadTexts: sipRegistrarStatsGroup.setDescription('A collection of objects providing statistics for SIP Registrars.')
mibBuilder.exportSymbols("SIP-REGISTRAR-MIB", sipContactEntry=sipContactEntry, sipContactLastUpdated=sipContactLastUpdated, sipRegStats=sipRegStats, sipRegRespHasContacts=sipRegRespHasContacts, sipUserAuthenticationFailures=sipUserAuthenticationFailures, sipRegCfg=sipRegCfg, sipContactExpiry=sipContactExpiry, PYSNMP_MODULE_ID=sipRegistrarMIB, sipContactAction=sipContactAction, sipRegRejectedRegistrations=sipRegRejectedRegistrations, sipRegistrarConfigGroup=sipRegistrarConfigGroup, sipRegMIBNotif=sipRegMIBNotif, sipContactIndex=sipContactIndex, sipRegMIBGroups=sipRegMIBGroups, sipRegCfgEntry=sipRegCfgEntry, sipContactPreference=sipContactPreference, sipUserPassword=sipUserPassword, sipRegistrarStatsGroup=sipRegistrarStatsGroup, sipRegCompliance=sipRegCompliance, sipRegMIBCompliances=sipRegMIBCompliances, sipRegistrarMIB=sipRegistrarMIB, sipRegUserTable=sipRegUserTable, sipRegContactDfltExpiryDate=sipRegContactDfltExpiryDate, sipContactURI=sipContactURI, sipContactRetryAfter=sipContactRetryAfter, sipRegAcceptedRegistrations=sipRegAcceptedRegistrations, sipUserTableRowStatus=sipUserTableRowStatus, sipRegCfgTable=sipRegCfgTable, sipRegStatsEntry=sipRegStatsEntry, sipRegMaxContactExpiryDate=sipRegMaxContactExpiryDate, sipRegContactDfltExpiryDuration=sipRegContactDfltExpiryDuration, sipRegMaxUsers=sipRegMaxUsers, sipRegAllowThirdParty=sipRegAllowThirdParty, sipContactTable=sipContactTable, sipContactDisplayName=sipContactDisplayName, sipRegMIBConformance=sipRegMIBConformance, sipRegUserEntry=sipRegUserEntry, sipRegStatsTable=sipRegStatsTable, sipUserIndex=sipUserIndex, sipRegCurrentUsers=sipRegCurrentUsers, sipUserUri=sipUserUri)
