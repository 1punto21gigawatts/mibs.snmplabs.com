#
# PySNMP MIB module MRV-IN-REACH-LAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-LAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
mrvInReachProductDivision, = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Gauge32, Counter32, TimeTicks, NotificationType, ObjectIdentity, ModuleIdentity, Integer32, Unsigned32, Bits, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Gauge32", "Counter32", "TimeTicks", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Integer32", "Unsigned32", "Bits", "Counter64", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xLat = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 3))
latAnnounceServices = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latAnnounceServices.setStatus('mandatory')
if mibBuilder.loadTexts: latAnnounceServices.setDescription("Control for automatic, periodic announcement of local services to the network. Corresponds directly to SERVER ANNOUNCEMENTS and the presence of the label 'Announcements' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latCircuitTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latCircuitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: latCircuitTimer.setDescription("Number of milleseconds to collect port input data before sending it to the host. Corresponds directly to SERVER CIRCUIT TIMER and the value labeled 'Circuit Timer:' in the SERVER CHARACTERISTICS display.")
latIdentificationLengthLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latIdentificationLengthLimit.setStatus('mandatory')
if mibBuilder.loadTexts: latIdentificationLengthLimit.setDescription("Maximum number of characters to store in the instances of latVisibleServiceIdentification. Corresponds directly to SERVER IDENTIFICATION SIZE and the value labeled 'Identification Size:' in the SERVER CHARACTERISTICS display.")
latKeepaliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latKeepaliveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: latKeepaliveTimer.setDescription("Number of seconds of inactivity before sending a null message to the host. Corresponds directly to SERVER KEEPALIVE TIMER and the value labeled 'Keepalive Timer:' in the SERVER CHARACTERISTICS display.")
latMulticastTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latMulticastTimer.setStatus('mandatory')
if mibBuilder.loadTexts: latMulticastTimer.setDescription("Number of seconds between transmission of local service announcements. Corresponds directly to SERVER MULTICAST TIMER and the value labeled 'Multicast Timer:' in the SERVER CHARACTERISTICS display.")
latNodeLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeLimit.setDescription("Maximum number of service nodes to keep in the node table. Corresponds directly to SERVER NODE LIMIT and the value labeled 'Node Limit:' in the SERVER CHARACTERISTICS display.")
latNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNumber.setStatus('mandatory')
if mibBuilder.loadTexts: latNumber.setDescription("An arbitrary number assigned and used for administrative purposes. Corresponds directly to SERVER NUMBER and the value labeled 'Number:' in the SERVER CHARACTERISTICS display.")
latRetransmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latRetransmitLimit.setStatus('mandatory')
if mibBuilder.loadTexts: latRetransmitLimit.setDescription("Maximum number of times to retransmit an unacknowledged message. Corresponds directly to SERVER RETRANSMIT LIMIT and the value labeled 'Retransmit Limit:' in the SERVER CHARACTERISTICS display.")
latLocalServiceGroups = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latLocalServiceGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latLocalServiceGroups.setDescription("The list of group numbers allowed to use local services, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to SERVER SERVICE GROUPS and the value labeled 'Service Groups:' in the SERVER CHARACTERISTICS display.")
latGroupPurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latGroupPurge.setStatus('mandatory')
if mibBuilder.loadTexts: latGroupPurge.setDescription("Control for automatic deletion of all node table entries when latServiceGroups or latPortCurrentGroups is changed. Corresponds directly to SERVER PURGE GROUP and the presence of the label 'Purge Group' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latNodePurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodePurge.setStatus('mandatory')
if mibBuilder.loadTexts: latNodePurge.setDescription("Control for automatic deletion of all node table entries with status 'reachable' when the number of entries exceeds latNodeLimit. Corresponds directly to SERVER PURGE NODE and the presence of the label 'Purge Node' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latNodesRejected = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodesRejected.setStatus('mandatory')
if mibBuilder.loadTexts: latNodesRejected.setDescription("Number of nodes not added to the node table because there was no room. Corresponds directly to the value labeled 'Discarded Nodes:' in the SERVER STATUS display.")
latInMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latInMessages.setDescription("Number of LAT messages received. Corresponds directly to the value labeled 'Messages Received:' in the SERVER COUNTERS display.")
latOutMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOutMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latOutMessages.setDescription("Number of LAT messages sent. Corresponds directly to the value labeled 'Messages Transmitted:' in the SERVER COUNTERS display.")
latInSessionsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInSessionsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: latInSessionsAccepted.setDescription("Number of incoming LAT session connection attempts accepted. Corresponds directly to the value labeled 'Solicitations Accepted:' in the SERVER COUNTERS display.")
latInSessionsRejected = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInSessionsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: latInSessionsRejected.setDescription("Number of incoming LAT session connection attempts rejected. Corresponds directly to the value labeled 'Solicitations Rejected:' in the SERVER COUNTERS display.")
latAddressChange = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latAddressChange.setStatus('mandatory')
if mibBuilder.loadTexts: latAddressChange.setDescription("Number of times a service announcement contained a node name already in the visible service table but with a different address. Corresponds directly to the value labeled 'Multiple Node Addresses:' in the SERVER COUNTERS display.")
latInDuplicates = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: latInDuplicates.setDescription("Number of duplicate LAT messages received. Corresponds directly to the value labeled 'Duplicates Received:' in the SERVER COUNTERS display.")
latOutRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOutRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: latOutRetransmits.setDescription("Number of LAT messages retransmitted due to no acknowledgement. Corresponds directly to the value labeled 'Messages Re-transmitted:' in the SERVER COUNTERS display.")
latInBadMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latInBadMessages.setDescription("Number of LAT messages received with invalid format. Corresponds directly to the value labeled 'Illegal Messages Rcv'd:' in the SERVER COUNTERS display.")
latInBadSlots = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latInBadSlots.setDescription("Number of LAT messages received with invalid slot format. Corresponds directly to the value labeled 'Illegal Slots Rcv'd:' in the SERVER COUNTERS display.")
latInBadMulticasts = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadMulticasts.setStatus('mandatory')
if mibBuilder.loadTexts: latInBadMulticasts.setDescription("Number of multicast LAT messages received with invalid format. Corresponds directly to the value labeled 'Illegal Multicasts Rcv'd:' in the SERVER COUNTERS display.")
latPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 23), )
if mibBuilder.loadTexts: latPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: latPortTable.setDescription('A list of LAT character port entries.')
latPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 23, 1), ).setIndexNames((0, "MRV-IN-REACH-LAT-MIB", "latPortIndex"))
if mibBuilder.loadTexts: latPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latPortEntry.setDescription('LAT parameter values for a port.')
latPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: latPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Character MIB [11].')
latPortAuthorizedGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortAuthorizedGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latPortAuthorizedGroups.setDescription("The list of group numbers to which the port is allowed to set access, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to PORT AUTHORIZED GROUPS and the value labeled 'Authorized Groups:' in the PORT CHARACTERISTICS display.")
latPortAutoPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortAutoPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: latPortAutoPrompt.setDescription("Control for automatic stimulation of a host prompt upon forming a new session. Corresponds directly to PORT AUTOPROMPT and the presence of the label 'Autoprompt' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
latPortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortCurrentGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latPortCurrentGroups.setDescription("The list of group numbers to which the port currently has set access, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to PORT GROUPS and the value labeled 'Groups:' in the PORT CHARACTERISTICS display.")
latPortRemoteModification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortRemoteModification.setStatus('mandatory')
if mibBuilder.loadTexts: latPortRemoteModification.setDescription("Control to allow the remote system to modify certain physical port characteristics. Corresponds directly to PORT REMOTE MODIFICATION and the presence of the label 'Remote Modification' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
latOfferedServiceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 24), )
if mibBuilder.loadTexts: latOfferedServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceTable.setDescription('A list of offered service entries.')
latOfferedServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 24, 1), ).setIndexNames((0, "MRV-IN-REACH-LAT-MIB", "latOfferedServiceName"))
if mibBuilder.loadTexts: latOfferedServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceEntry.setDescription('Parameter values for an offered service entry.')
latOfferedServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOfferedServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceName.setDescription("The name of an offered service. Corresponds directly to the name in a SERVICE command and the value labeled 'Service:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the CLEAR SERVICE command. Actual removal of the entry is implementation specific.")
latOfferedServiceAllowConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceAllowConnections.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceAllowConnections.setDescription("Control for allowing incoming connections to the service. Corresponds directly to SERVICE CONNECTIONS and the presence of the label 'Connections' following the label 'Enabled Characteristics:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceIdentification.setDescription("Text to identify a service. Corresponds directly to SERVICE IDENTIFICATION and the value labeled 'Identification:' in the SERVICE CHARACTERISTICS display.")
latOfferedServicePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServicePassword.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServicePassword.setDescription("The password a user must supply to use the service. Corresponds directly to SERVICE PASSWORD and the presence of the label 'Password' following the label 'Enabled Characteristics:' in the SERVICE CHARACTERISTICS display. When setting this value, the management system must supply eight octets, filling with zeros from the first octet. That is, the value '1ab42' would be expressed as '0.0.0.0.0.1.ab.42'. Setting the value to zero disables the password check. When returning this value, the agent always returns a zero length OCTET STRING.")
latOfferedServicePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServicePortMap.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServicePortMap.setDescription("The list of character ports offer the service. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Character MIB [11]. Corresponding bit numbers start with 1 as the high-order bit of the first octet. Corresponds directly to port-list portion of SERVICE PORTS and the value labeled 'Ports:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceQueuing.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceQueuing.setDescription("Control for allowing queuing of incoming connections to the service when the service is busy. Corresponds directly to SERVICE QUEUE and the presence of the label 'Queuing' following the label 'Enabled Characteristics:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceEnvironmentalManager = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceEnvironmentalManager.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceEnvironmentalManager.setDescription('Control indicating whether Environmental Management services are offered.')
latVisibleServiceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 25), )
if mibBuilder.loadTexts: latVisibleServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceTable.setDescription('A list of visible service entries.')
latVisibleServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 25, 1), ).setIndexNames((0, "MRV-IN-REACH-LAT-MIB", "latVisibleServiceName"))
if mibBuilder.loadTexts: latVisibleServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceEntry.setDescription('Parameter values for a visible service entry.')
latVisibleServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceName.setDescription("The name of a visible service. Corresponds directly to the name in a SERVICE command and the value labeled 'Service Name' in the SERVICE SUMMARY display.")
latVisibleServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("unknown", 3), ("unreachable", 4), ("reachable", 5), ("connected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceStatus.setDescription("Status of communication with the service. Corresponds directly to the value labeled 'Status' in the SERVICE SUMMARY display.")
latVisibleServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceNode.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceNode.setDescription('Name of a node offering the service. Corresponds directly to the value labeled Node Name in the SERVICE STATUS display.')
latVisibleServiceConnectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceConnectedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceConnectedSessions.setDescription("Number of connected sessions to the service. Corresponds directly to the number with the value 'Connected', labeled 'Status' in the SERVICE SUMMARY display.")
latVisibleServiceIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceIdentification.setDescription("Text to identify a service. The length is subject to limitation by latIdentificationLengthLimit. Corresponds directly to the value labeled 'Identification:' in the SERVICE SUMMARY display.")
latVisibleServiceRating = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceRating.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceRating.setDescription('Relative capacity of the service to accept additional sessions. Corresponds directly to value labeled Rating in the SERVICE STATUS display.')
latNodeTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 26), )
if mibBuilder.loadTexts: latNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeTable.setDescription('A list of node entries.')
latNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 26, 1), ).setIndexNames((0, "MRV-IN-REACH-LAT-MIB", "latNodeName"))
if mibBuilder.loadTexts: latNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeEntry.setDescription('Parameter values for a node entry.')
latNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeName.setDescription("The name of a node. Corresponds directly to the value labeled 'Node:' in the NODE STATUS display.")
latNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("unknown", 3), ("unreachable", 4), ("reachable", 5), ("connected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeStatus.setDescription("Status of communication with the node. Corresponds directly to the value labeled 'Status' in the NODE STATUS display.")
latNodeConnectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeConnectedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeConnectedSessions.setDescription("Number of connected sessions to the node. Corresponds directly to the number with the value 'Connected', labeled 'Status' in the NODE STATUS display.")
latNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeAddress.setDescription("Ethernet address of the node. Corresponds directly to the value labeled 'Address:' in the NODE STATUS display.")
latNodeDataLinkFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeDataLinkFrame.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeDataLinkFrame.setDescription("Maximum Ethernet frame used by the node. Corresponds directly to the value labeled 'Data Link Frame Size:' in the NODE STATUS display.")
latNodeIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeIdentification.setDescription("Text that identifies the node. The size is subject to limitation by latIdentificationLengtLimit. Corresponds directly to the value labeled 'Identification' in the NODE STATUS display.")
latNodeGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeGroups.setDescription("The list of group numbers to which the node belongs, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to the value labeled 'Node Groups:' in the NODE STATUS display.")
latNodeServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeServiceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeServiceNumber.setDescription('Number of entries for the node in the node service table. Corresponds indirectly to the list of services in the NODE STATUS display.')
latNodeZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodeZero.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeZero.setDescription("Control to zero counters kept for the node. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes all the system's counters to be zeroed. Corresponds to the ZERO NODE command.")
latNodeZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeZeroTime.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeZeroTime.setDescription("The number of hundredths of a second since the most recent zeroing of the counters kept for the node, such as through execution of sysZeroAll or latNodeZero. Corresponds directly to the value labeled 'Seconds Since Zeroed:' in the NODE COUNTERS display.")
latNodeInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInMessages.setDescription("The number of LAT messages received from the node. Corresponds directly to the value labeled 'Messages Received:' in the NODE COUNTERS display.")
latNodeOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutMessages.setDescription("The number of LAT messages sent to the node. Corresponds directly to the value labeled 'Messages Transmitted:' in the NODE COUNTERS display.")
latNodeInSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInSlots.setDescription("The number of LAT slots received from the node. Corresponds directly to the value labeled 'Slots Received:' in the NODE COUNTERS display.")
latNodeOutSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutSlots.setDescription("The number of LAT slots sent to the node. Corresponds directly to the value labeled 'Slots Transmitted:' in the NODE COUNTERS display.")
latNodeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInBytes.setDescription("The total number of bytes received from the node, including Ethernet overhead. Corresponds directly to the value labeled 'Bytes Received:' in the NODE COUNTERS display.")
latNodeOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutBytes.setDescription("The total number of bytes sent to the node, including Ethernet overhead. Corresponds directly to the value labeled 'Bytes Transmitted:' in the NODE COUNTERS display.")
latNodeAddressChange = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeAddressChange.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeAddressChange.setDescription("The number of times a LAT message multicast by the node had a different Ethernet address from the previous time. Corresponds directly to the value labeled 'Multiple Node Addresses:' in the NODE COUNTERS display.")
latNodeInDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInDuplicates.setDescription("The number of duplicate LAT message received from the node. Corresponds directly to the value labeled 'Duplicates Received:' in the NODE COUNTERS display.")
latNodeOutRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutRetransmits.setDescription("The number of LAT message retransmitted to the node due to lack of acknowledgement. Corresponds directly to the value labeled 'Messages Re-transmitted:' in the NODE COUNTERS display.")
latNodeInBadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBadMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInBadMessages.setDescription("The number of LAT message received from the node with invalid format. Corresponds directly to the value labeled 'Illegal Messages Received:' in the NODE COUNTERS display.")
latNodeInBadSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBadSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInBadSlots.setDescription("The number of LAT slots received from the node with invalid format. Corresponds directly to the value labeled 'Illegal Slots Received:' in the NODE COUNTERS display.")
latNodeInSessionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSessionsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInSessionsAccepted.setDescription("The number of LAT session connection attempts received from the node and accepted. Corresponds directly to the value labeled 'Solicitations Accepted:' in the NODE COUNTERS display.")
latNodeInSessionsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSessionsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInSessionsRejected.setDescription("The number of LAT session connection attempts received from the node and rejected. Corresponds directly to the value labeled 'Solicitations Rejected:' in the NODE COUNTERS display.")
latSolicits = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latSolicits.setStatus('mandatory')
if mibBuilder.loadTexts: latSolicits.setDescription("Control for multicast solicitation of LAT services. Corresponds directly to SERVER LAT SOLICITAIONS and the presence of the label 'LAT SOLICITATIONS' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latImmediateAck = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latImmediateAck.setStatus('mandatory')
if mibBuilder.loadTexts: latImmediateAck.setDescription("Control for LAT to provide an immediate ACK, and not to wait for the timer to expire. Corresponds directly to SERVER LAT IMMEDIATE ACK and the presence of the label 'LAT Immediate Ack following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
mibBuilder.exportSymbols("MRV-IN-REACH-LAT-MIB", latOfferedServiceTable=latOfferedServiceTable, latNodeInSessionsRejected=latNodeInSessionsRejected, latOfferedServiceQueuing=latOfferedServiceQueuing, latVisibleServiceName=latVisibleServiceName, latOfferedServiceEntry=latOfferedServiceEntry, latAnnounceServices=latAnnounceServices, latNodeName=latNodeName, latNodeInDuplicates=latNodeInDuplicates, latVisibleServiceConnectedSessions=latVisibleServiceConnectedSessions, latCircuitTimer=latCircuitTimer, latVisibleServiceTable=latVisibleServiceTable, latOfferedServiceName=latOfferedServiceName, latOfferedServiceEnvironmentalManager=latOfferedServiceEnvironmentalManager, latVisibleServiceIdentification=latVisibleServiceIdentification, latPortEntry=latPortEntry, latNodesRejected=latNodesRejected, latPortAuthorizedGroups=latPortAuthorizedGroups, latNodeAddress=latNodeAddress, latNodeEntry=latNodeEntry, latOutMessages=latOutMessages, latNodeOutRetransmits=latNodeOutRetransmits, latNodeLimit=latNodeLimit, latOfferedServiceStatus=latOfferedServiceStatus, latMulticastTimer=latMulticastTimer, latInBadMulticasts=latInBadMulticasts, latVisibleServiceStatus=latVisibleServiceStatus, latVisibleServiceRating=latVisibleServiceRating, latOfferedServicePassword=latOfferedServicePassword, latInSessionsAccepted=latInSessionsAccepted, latNodeOutBytes=latNodeOutBytes, latNodeInSlots=latNodeInSlots, latNodeConnectedSessions=latNodeConnectedSessions, latPortRemoteModification=latPortRemoteModification, latNumber=latNumber, latIdentificationLengthLimit=latIdentificationLengthLimit, latOutRetransmits=latOutRetransmits, latNodeGroups=latNodeGroups, latNodeZeroTime=latNodeZeroTime, latNodeInMessages=latNodeInMessages, latOfferedServiceIdentification=latOfferedServiceIdentification, latNodeAddressChange=latNodeAddressChange, latPortCurrentGroups=latPortCurrentGroups, latNodeStatus=latNodeStatus, xLat=xLat, latNodeDataLinkFrame=latNodeDataLinkFrame, latVisibleServiceEntry=latVisibleServiceEntry, latNodeZero=latNodeZero, latInBadMessages=latInBadMessages, latPortTable=latPortTable, latNodePurge=latNodePurge, latInDuplicates=latInDuplicates, latRetransmitLimit=latRetransmitLimit, latLocalServiceGroups=latLocalServiceGroups, latNodeInBytes=latNodeInBytes, latVisibleServiceNode=latVisibleServiceNode, latInBadSlots=latInBadSlots, latNodeOutSlots=latNodeOutSlots, latInSessionsRejected=latInSessionsRejected, latKeepaliveTimer=latKeepaliveTimer, latNodeInBadSlots=latNodeInBadSlots, latOfferedServiceAllowConnections=latOfferedServiceAllowConnections, latNodeInSessionsAccepted=latNodeInSessionsAccepted, latAddressChange=latAddressChange, latGroupPurge=latGroupPurge, latInMessages=latInMessages, latNodeIdentification=latNodeIdentification, latPortAutoPrompt=latPortAutoPrompt, latOfferedServicePortMap=latOfferedServicePortMap, latNodeOutMessages=latNodeOutMessages, latPortIndex=latPortIndex, latNodeInBadMessages=latNodeInBadMessages, latSolicits=latSolicits, latNodeServiceNumber=latNodeServiceNumber, latNodeTable=latNodeTable, latImmediateAck=latImmediateAck)
