#
# PySNMP MIB module HUAWEI-CBQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-CBQOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, MibIdentifier, Gauge32, iso, ObjectIdentity, Unsigned32, IpAddress, Bits, ModuleIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "MibIdentifier", "Gauge32", "iso", "ObjectIdentity", "Unsigned32", "IpAddress", "Bits", "ModuleIdentity", "NotificationType", "Counter64")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hwCBQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1))
hwCBQoSMIB.setRevisions(('2015-09-01 17:37', '2014-02-19 17:37', '2013-07-20 16:00', '2013-06-04 16:00', '2014-02-19 17:37', '2015-03-28 18:08', '2015-09-17 18:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwCBQoSMIB.setRevisionsDescriptions(('MOD hwCBQoSClassifierCfgInfoEntry hwCBQoSBehaviorCfgInfoEntry hwCBQoSCarCfgInfoEntry NODE', 'ADD hwCBQoSPolicyStatSubPolicyClassifierRunInfoTable ', 'ADD hwCBQoSIfApplyMultiPolicyTable hwCBQoSVlanApplyMultiPolicyTable hwCBQoSMultiPolicyStatisticsTable hwCBQoSMultiPolicyStatisticsClassifierTable', 'MOD hwCBQoSPolicyClassifierIndex NODE', 'MOD hwCBQoSClassifierName hwCBQoSClassifierName hwCBQoSBehaviorName hwCBQoSPolicyName hwCBQoSPolicyClassClassifierName hwCBQoSPolicyClassBehaviorName hwCBQoSIfApplyPolicyName hwCBQoSAtmPvcApplyPolicyName hwCBQoSIfVlanApplyPolicyName hwCBQoSVlanApplyPolicyName hwCBQoSTrapPolicyName hwCBQoSQueryPolicyName hwCBQoSQueryClassifierName NODE', 'MOD HwCBQoSMatchRuleCfgInfoEntry NODE', 'MOD hwCBQoSIfApplyPolicyLinkLayer mpls-layer',))
if mibBuilder.loadTexts: hwCBQoSMIB.setLastUpdated('201509011737Z')
if mibBuilder.loadTexts: hwCBQoSMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwCBQoSMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwCBQoSMIB.setDescription('The HUAWEI-CBQOS-MIB contains objects to Manage configuration and Monitor running state for Class Based QoS feature. ')
class MatchRuleType(TextualConvention, Integer32):
    description = 'Type of Match Rule. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))
    namedValues = NamedValues(("any", 1), ("ipv4Acl", 2), ("rtpPort", 3), ("protocol", 4), ("ipPrec", 5), ("dscp", 6), ("vlan8021p", 7), ("mplsExp", 8), ("sourceMac", 9), ("destinationMac", 10), ("classifier", 11), ("inboundInterface", 12), ("macGroup", 13), ("ipv6Acl", 14), ("qosLocalId", 15), ("frDe", 16), ("atmClp", 17), ("ipv6Dscp", 18), ("ipv6NextHeader", 19), ("ipv6Any", 20), ("ipv6DstIp", 21), ("ipv6SrcIp", 22), ("ruleString", 23), ("vlanId", 24), ("outboundInterface", 25), ("l2Protocol", 26), ("l2Acl", 27), ("tcpFlag", 28), ("cvlanId", 29), ("doubleTag", 30), ("sourceQosLocalId", 31), ("cvlan8021p", 32), ("discard", 33), ("dlci", 34), ("app-protocol", 35), ("protocol-group", 36), ("vlanid-cvlanid", 37), ("tagged-vxlan", 38), ("untagged-vxlan", 39))

class CarAction(TextualConvention, Integer32):
    description = 'The actions taken when packets conforming or exceeding the configured CIR: pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("pass", 1), ("discard", 2), ("remarkIpPrec", 3), ("remarkDscp", 4), ("remarkMplsExp", 5), ("remark", 6), ("remark8021p", 7))

class RemarkType(TextualConvention, Integer32):
    description = 'IP-Prec(1) DSCP(2) MPLS-EXP(3) VLAN-8021p(4) ATM-CLP(5) FR-DE(6) QoS-Local-ID(7) IPV6-DSCP(8) Local-Prec(9) destination-mac(10) VLAN-ID(11) Vlan-Protocol(12) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("ipPrec", 1), ("dscp", 2), ("mplsExp", 3), ("vlan8021p", 4), ("atmClp", 5), ("frDe", 6), ("qosLocalId", 7), ("ipv6Dscp", 8), ("localPrec", 9), ("destinationMac", 10), ("vlanId", 11), ("vlanProtocol", 12))

class CBQueueType(TextualConvention, Integer32):
    description = 'Queueing Type: EF: (1) AF: (2) WFQ: (3) LLQ: (4) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ef", 1), ("af", 2), ("wfq", 3), ("llq", 4))

class QueueBandwidthUnit(TextualConvention, Integer32):
    description = 'Bandwidth Unit: Absolute, Unit Kbps (1) Percent, Unit % (2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("unavailable", -1), ("absoluteUnitKbps", 1), ("percentUnit", 2))

class WredType(TextualConvention, Integer32):
    description = 'IP-Prec Based (1) DSCP Based (2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipPrecbased", 1), ("dscpbased", 2))

class SamplingType(TextualConvention, Integer32):
    description = 'Fix-packets(1) Fix-time(2) Random-packets(3) Random-time(4) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fixPackets", 1), ("fixTime", 2), ("randomPackets", 3), ("randomTime", 4))

class LrCirUnit(TextualConvention, Integer32):
    description = 'CIR Unit: Absolute, Unit bps (1) Percent, Unit % (2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("absoluteUnitBps", 1), ("percentUnit", 2))

class RedirectType(TextualConvention, Integer32):
    description = 'Cp(1) Ip-nexthop(2) Lsp-label(3) Ipv6-cp(4) Ipv6-nexthop(5) Lsp-path(6) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("cp", 1), ("ipNexthop", 2), ("lspLabel", 3), ("ipv6Cp", 4), ("ipv6Nexthop", 5), ("lspPath", 6))

class RedirectCtrlType(TextualConvention, Integer32):
    description = 'Strict(1) Loose(2)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("strict", 1), ("loose", 2))

class UrpfCtrlType(TextualConvention, Integer32):
    description = 'Strict(1) Loose(2)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("strict", 1), ("loose", 2))

class DirectionType(TextualConvention, Integer32):
    description = 'The Direction Policy apply on.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class CosType(TextualConvention, Integer32):
    description = 'CS7(8) CS6(7) EF(6) AF4(5) AF3(4) AF2(3) AF1(2) BE(1)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))

hwQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32))
hwCBQoSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1))
hwCBQoSClassifierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1))
hwCBQoSClassifierIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierIndexNext.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierIndexNext.setDescription('The value of this object identifies the index of the next available traffic classifier. The index defined when the user creates a traffic class must be the same as the value of hwCBQoSClassifierIndexNext; otherwise, the traffic class cannot be created.')
hwCBQoSClassifierCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoTable.setDescription('A table of Traffic Classifier configuration information.')
hwCBQoSClassifierCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndex"))
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoEntry.setDescription('Traffic Classifier Configuration Information Entry.')
hwCBQoSClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierIndex.setDescription('The value of this object identifies the index of the traffic classifier. The value ranges from 0 to 65535. This object has no default value.')
hwCBQoSClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierName.setDescription('This object indicates the name of the traffic classifier. The value of this object is a string of 1 to 64 visible ASCII characters. This object has no default value. No space can exist between characters in the string. The initial space and end space are ignored.')
hwCBQoSClassifierRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierRuleCount.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierRuleCount.setDescription('The value of this object identifies the number of the matching rules for the traffic classifier. The value ranges from 0 to 16. This object has no default value.')
hwCBQoSClassifierOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierOperator.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierOperator.setDescription('The value of this object identifies the relationship between matching rules. The value of this object can be AND(1) or OR(2). The default value is OR(2).')
hwCBQoSClassifierLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("unavailable", -1), ("l2", 1), ("l3", 2), ("both", 3))).clone('l3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierLayer.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierLayer.setDescription("Configuration layer of traffic classifier. Only hardware QoS support it. -1(unavailable) is returned only when getting value from software QoS. -1(unavailable) can't be set.")
hwCBQoSClassifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value.')
hwCBQoSMatchRuleCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3), )
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoTable.setDescription('A table of Match Rule configuration information.')
hwCBQoSMatchRuleCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSMatchVlanBeginId"))
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoEntry.setDescription('Match Rule Configuration Information Entry.')
hwCBQoSMatchRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIndex.setDescription('The value of this object identifies the rule index. The value ranges from 0 to 15. This object has no default value.')
hwCBQoSMatchRuleIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("notMatch", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIfNot.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIfNot.setDescription('The value of this object identifies the if-match rule is a Match or NotMatch statement. The value of this object can be match(1) or match-not(2).')
hwCBQoSMatchRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 3), MatchRuleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleType.setDescription('The value of this object identifies the rule type. The value of this object can be any of the following: any(1) ipv4-acl(2) rtp-port(3) protocol(4) ip-prec(5) dscp(6) vlan-8021p(7) mpls-exp(8) source-mac(9) destination-mac(10) classifier(11) inbound-interface(12) mac-group(13) ipv6-acl(14) qos-local-id(15) fr-de(16) atm-clp(17) ipv6-dscp(18) ipv6-next-header(19) ipv6-any(20) ipv6-dst-ip(21) ipv6-src-ip(22) rule-string(23) vlan-id(24) outbound-interface(25) l2-protocol(26) l2Acl(27), tcpFlag(28), cvlanId(29), doubleTag(30), sourceQosLocalId(31), cvlan8021p(32), discard(33), dlci(34), app-protocol(35), protocol-group(36), vlanid-cvlanid(37), tagged-vxlan(38), untagged-vxlan(39) This object has no default value. ')
hwCBQoSMatchRuleStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleStringValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleStringValue.setDescription('This object indicates the rule contents. The value range and the default value of the object vary with hwCBQoSMatchRuleType. When the supported types are Source-MAC(9) and Destination-MAC(10), the value of this object can be a string of six ASCII characters, which represents a MAC address. For example, abcdef indicates the MAC address 6162-6364-6566. When the supported types are ipv6-dst-ip(21) and ipv6-src-ip(22), the value of this object is a string of 16 ASCII characters, which represents an IPv6 address. For example, 1111111111111111 indicates an IPv6 address 3131-3131-3131-3131-3131-3131-3131-3131. This object has no default value. ')
hwCBQoSMatchRuleIntValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue1.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue1.setDescription('This object indicates the rule contents. The value range and the default value of the object vary with hwCBQoSMatchRuleType. When the supported type is ipv4-acl(2), the value of this object ranges from 2000 to 4099. When the type is ip-prec(5), the value of this object ranges from 2^1 to 2^7, respectively representing the IP precedence from 0 to 7. When the supported types are dscp(6) and ipv6-dscp(18), the value ranges from 2^1 to 2^32, respectively representing the DSCP value ranging from 32 to 63. When the type is ipv6-acl(14), the value of this object ranges from 2000 to 3999. When the type is ipv6-dscp(18), the value of this object ranges from 0 to 63. When the type is Ipv6-next-header(19), the value ranges from 0 to 255. When the type is tcp-flag(27), the value ranges from 0 to 63. When the types are ipv6-dst-ip(21) and ipv6-src-ip(22), the value ranges from 0 to 128. This object has no default value. ')
hwCBQoSMatchRuleIntValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue2.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue2.setDescription('This object indicates the rule contents. The value range and the default value of the object vary with hwCBQoSMatchRuleType. When the supported type is dscp(6), the value ranges from 2^1 to 2^32, respectively representing the DSCP value ranging from 0 to 31. This object has no default value. ')
hwCBQoSMatchRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSMatchMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchMacMask.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchMacMask.setDescription("Value of Match Rule. Source-MAC(9): SIZE (0..6) HHHHHH for example: ffff00 means the match rule is 'if-match source-mac XX-XX-XX ff-ff-00' Destination-MAC(10): SIZE (0..6) HHHHHH for example: ffff00 means the match rule is 'if-match destination-mac XX-XX-XX ff-ff-00' default:0XFFFFFF ")
hwCBQoSMatchVlanBeginId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 9), Unsigned32())
if mibBuilder.loadTexts: hwCBQoSMatchVlanBeginId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchVlanBeginId.setDescription('Start vlan ID.')
hwCBQoSMatchVlanEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchVlanEndId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchVlanEndId.setDescription('End vlan ID.')
hwCBQoSMatchInnerSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchInnerSrcIp.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchInnerSrcIp.setDescription('Inner source IP address.')
hwCBQoSMatchInnerSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchInnerSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchInnerSrcIpMask.setDescription('Mask length of inner source IP address, ranges from 0 to 32.')
hwCBQoSMatchInnerDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchInnerDstIp.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchInnerDstIp.setDescription('Inner destination IP address.')
hwCBQoSMatchInnerDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchInnerDstIpMask.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchInnerDstIpMask.setDescription('Mask length of inner destination IP address, ranges from 0 to 32.')
hwCBQoSMatchInnerSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(65536, 65536), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchInnerSrcPort.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchInnerSrcPort.setDescription('Inner source port, ranges from 0 to 65535. The invalid value is 65536.')
hwCBQoSMatchInnerDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(65536, 65536), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchInnerDstPort.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchInnerDstPort.setDescription('Inner destination port, ranges from 0 to 65535. The invalid value is 65536.')
hwCBQoSMatchInnerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 1, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65536, 65536), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchInnerProtocol.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchInnerProtocol.setDescription('Inner IP protocol, ranges from 0 to 255. The invalid value is 65536.')
hwCBQoSBehaviorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2))
hwCBQoSBehaviorIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSBehaviorIndexNext.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorIndexNext.setDescription('The value of this object identifies the index of the next available traffic behavior. The index used when the user creates a traffic behavior must be the same as the value of hwCBQoSBehaviorIndexNext; otherwise, the traffic behavior cannot be created. ')
hwCBQoSBehaviorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoTable.setDescription('A table of Traffic Behavior configuration information.')
hwCBQoSBehaviorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoEntry.setDescription('Traffic Behavior Configuration Information Entry.')
hwCBQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorIndex.setDescription('The value of this object identifies the index of the traffic behavior. The value ranges from 0 to 65535. This object has no default value. ')
hwCBQoSBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSBehaviorName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorName.setDescription('This object indicates the name of the traffic behavior. The value of this object is a string of 1 to 64 visible ASCII characters, with no default value. Space cannot exist between the characters in the string. The initial space and end space are ignored. ')
hwCBQoSBehaviorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSBehaviorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3), )
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoTable.setDescription('A table of CAR feature configuration information.')
hwCBQoSCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoEntry.setDescription('CAR Configuration Information Entry.')
hwCBQoSCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCir.setDescription('The value of this object identifies the Committed Information Rate (CIR). The value ranges from 100 to 1000000, in kbit/s, with no default value. ')
hwCBQoSCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCbs.setDescription('The value of this object identifies the Committed Burst Size (CBS). The value ranges from 10000 to 33554432 bytes. The default value is 10000 bytes. ')
hwCBQoSCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarEbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarEbs.setDescription("Excess Burst Size. Unit: byte. 0..19375000 Only software QoS support this node. -1 is returned only when getting value from hardware QoS. -1 can't be set. ")
hwCBQoSCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarPir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarPir.setDescription('The value of this object identifies the Peak Information Rate (PIR). The value ranges from 100 to 1000000, in kbit/s. This object has no default value. ')
hwCBQoSCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarPbs.setDescription('The value of this object identifies the Peak Burst Size (PBS). The value ranges from 0 to 33554432 bytes. The default value is as follows: When hwCBQoSCarPir is not specified, the default value is 0 bytes. When hwCBQoSCarPir is specified, the default value is 10000 bytes. ')
hwCBQoSCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 6), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarGreenAction.setDescription('The value of this object identifies the action adopted when CIR is not reached. pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) The default value is pass (1). ')
hwCBQoSCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(11, 81), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarGreenRemarkValue.setDescription("The value is to remark When green action is remarking. the range is 11~81; the high bit represents service-class,the range is 1~8 (1:be 2:af1 3:af2 4:af3 5:af4 6:ef 7:cs6 8:cs7) the low bit represents color,the range is 1~3 (1:green 2:yellow 3:red) Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwCBQoSCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 8), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarYellowAction.setDescription('The value of this object identifies the action adopted when CIR is exceeded but PIR is not reached. pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) The default value is pass (1). ')
hwCBQoSCarYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(11, 81), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarYellowRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarYellowRemarkValue.setDescription("The value is to remark When yellow action is remarking. For remarking DSCP, the range is 11~81; the high bit represents service-class,the range is 1~8 (1:be 2:af1 3:af2 4:af3 5:af4 6:ef 7:cs6 8:cs7) the low bit represents color,the range is 1~3 (1:green 2:yellow 3:red) For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwCBQoSCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 10), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRedAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarRedAction.setDescription('The value of this object identifies the action performed when PIR is exceeded. pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6), remark 8021p(7) The default value is pass (1). ')
hwCBQoSCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(11, 81), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 11~81; the high bit represents service-class,the range is 1~8 (1:be 2:af1 3:af2 4:af3 5:af4 6:ef 7:cs6 8:cs7) the low bit represents color,the range is 1~3 (1:green 2:yellow 3:red) For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwCBQoSCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQosCarAggregation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggregationCar", 1), ("noneAggregationCar", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQosCarAggregation.setStatus('current')
if mibBuilder.loadTexts: hwCBQosCarAggregation.setDescription('aggregationCar(1): aggregation car; noneAggregationCar(2) : none aggregation car.')
hwCBQoSGtsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4), )
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoTable.setDescription('A table of GTS feature configuration information.')
hwCBQoSGtsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoEntry.setDescription('GTS Configuration Information Entry.')
hwCBQoSGtsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCir.setDescription('Committed Information Rate. Unit: kbytes')
hwCBQoSGtsCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15000, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCbs.setDescription('Committed Burst Size. Unit: bit default: max(cir*1/2,15000)')
hwCBQoSGtsEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsEbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsEbs.setDescription('Excess Burst Size. Unit: bit')
hwCBQoSGtsQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsQueueLength.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsQueueLength.setDescription('The length of GTS buffer.')
hwCBQoSGtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSGtsPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsPir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsPir.setDescription('Peak information rate.')
hwCBQoSRemarkCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 5), )
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoTable.setDescription('A table of Remarking feature configuration information.')
hwCBQoSRemarkCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 5, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSRemarkType"))
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoEntry.setDescription('Remarking Configuration Information Entry.')
hwCBQoSRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 5, 1, 1), RemarkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSRemarkType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkType.setDescription('The value of this object identifies the re-mark type. The value can be any of the following: IP-Prec(1) DSCP(2) MPLS-EXP(3) VLAN-8021p(4) ATM-CLP(5) FR-DE(6) QoS-Local-ID(7) IPV6-DSCP(8) Local-Prec(9) destination-mac(10) VLAN-ID(11) Vlan-Protocol(12) This object has no default value. ')
hwCBQoSRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkValue.setDescription('The value of this object identifies the re-mark value. When hwCBQoSRemarkType is ip-prec(1), mpls-exp(3), and vlan-8021p(4), the value ranges from 0 to 7. When hwCBQoSRemarkType is dscp(2) or ipv6-dscp(8), the value ranges from 0 to 63. This object has no default value. ')
hwCBQoSRemarkStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkStringValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkStringValue.setDescription("Destination-MAC(10): SIZE (0..6) HHHHHH for example: 010102020303 means the remark action is 'remark destination-mac 0101-0202-0303'; Vlan-Protocol(12):SIZE(3..4) HEX<600-FFFF> ")
hwCBQoSRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSQueueCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6), )
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoTable.setDescription('A table of queueing feature configuration information.')
hwCBQoSQueueCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoEntry.setDescription('Queue Configuration Information Entry.')
hwCBQoSQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 1), CBQueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueType.setDescription('Queueing Type: EF: (1) AF: (2) WFQ: (3) LLQ: (4)')
hwCBQoSQueueDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unavailable", -1), ("tailDrop", 1), ("wred", 2))).clone('tailDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueDropType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueDropType.setDescription("The drop type of queue. Only valid for AF and WFQ queue. -1 is returned only when getting value about EF queue. -1 can't be set.")
hwCBQoSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1024), )).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueLength.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueLength.setDescription("The length of QueueLength. Only valid for tailDrop type of AF and WFQ queue. -1 is returned only when getting value about EF queue or wred type of AF and WFQ queue. -1 can't be set.")
hwCBQoSQueueBandwidthUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 4), QueueBandwidthUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthUnit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthUnit.setDescription("Bandwidth Unit: Absolute, Unit Kbps (1) Percent, Unit % (2) Only valid for EF and AF queue. -1 is returned only when getting value about WFQ queue. -1 can't be set.")
hwCBQoSQueueBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthValue.setDescription("Bandwidth value: Absolute value: 8~1000000. Unit: Kbps Percent value: 1~100. Only valid for EF and AF queue. -1 is returned only when getting value about WFQ queue. -1 can't be set.")
hwCBQoSQueueCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(32, 2000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCbs.setDescription("Committed Burst Size. Unit: byte. Only valid for EF queue. -1 is returned only when getting value about AF or WFQ queue. -1 can't be set.")
hwCBQoSQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("unavailable", -1), ("a1", 1), ("a8", 8), ("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096))).clone('a256')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueQueueNumber.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueQueueNumber.setDescription("Max number of hashed queues (a power of 2). Only valid for WFQ. -1 is returned only when getting value about AF or EF queue. -1 can't be set.")
hwCBQoSQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSQueueCbsRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(25, 500), )).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueCbsRatio.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCbsRatio.setDescription("Committed Burst Size Ratio. Unit: byte. CBS = CBS_Ratio * Bandwidth(k bps) Only valid for EF queue. -1 is returned only when getting value about AF or WFQ queue. -1 can't be set.")
hwCBQoSWredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 7), )
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoTable.setDescription('A table of WRED configuration information.')
hwCBQoSWredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 7, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoEntry.setDescription('WRED Configuration Information Entry.')
hwCBQoSWredType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 7, 1, 1), WredType().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredType.setDescription('IP-Prec Based (1) DSCP Based (2)')
hwCBQoSWredWeightConst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredWeightConst.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredWeightConst.setDescription('Specify weight for calculating mean queue depth. ')
hwCBQoSWredDropProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredDropProfileIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredDropProfileIndex.setDescription('The index of wred class entry. -1 is returned when no drop profile is used. -1 can not be set.')
hwCBQoSWredCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSWredCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredCfgRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSWredClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 8), )
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoTable.setDescription('A table of WRED configuration information.')
hwCBQoSWredClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 8, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoEntry.setDescription('WRED Class Configuration Information Entry.')
hwCBQoSWredClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSWredClassValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassValue.setDescription('The class value. For IP precedence based WRED, the class is IP precedence, and range is 0~7. For DSCP based WRED, the class is DSCP, and range is 0~63.')
hwCBQoSWredClassLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassLowLimit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassLowLimit.setDescription('The low limit of queue depth.')
hwCBQoSWredClassHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassHighLimit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassHighLimit.setDescription('The high limit of queue depth.')
hwCBQoSWredClassDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassDiscardProb.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassDiscardProb.setDescription('The discard probability denominator.')
hwCBQoSNatCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 10), )
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoTable.setDescription('A table of Nat configuration information.')
hwCBQoSNatCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 10, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoEntry.setDescription('Nat Configuration Information Entry.')
hwCBQoSNatAddressGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatAddressGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatAddressGroup.setDescription("address group's name")
hwCBQoSNatNoPat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nopat", 1), ("pat", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatNoPat.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatNoPat.setDescription('1: no pat 2: pat')
hwCBQoSNatServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatServiceClass.setDescription('The service class. DEFVAL: 2')
hwCBQoSNatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSFirewallCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 11), )
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoTable.setDescription('A table of Firewall configuration information.')
hwCBQoSFirewallCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 11, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoEntry.setDescription('Firewall Configuration Information Entry.')
hwCBQoSFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFirewallAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallAction.setDescription('The value of this object identifies the firewall action. The value can be permit(1) or deny(2). The default value is permit(1). ')
hwCBQoSFirewallRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFirewallRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSSamplingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 12), )
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoTable.setDescription('A table of Sampling configuration information.')
hwCBQoSSamplingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 12, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoEntry.setDescription('Sampling Configuration Information Entry.')
hwCBQoSIfSamplingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 12, 1, 1), SamplingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfSamplingType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfSamplingType.setDescription('This object indicates the sampling type. The value can be any of the following: Fix-packets(1) Fix-time(2) Random-packets(3) Random-time(4) This object has no default value. ')
hwCBQoSSamplingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSamplingNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingNum.setDescription('This object indicates the sampling parameter. The value can be any of the following: Fix-packets (1-65535) Fix-time (5-30000ms) Random-packets (1-65535) Random-time (3/6/12/24/48/96/192/383.5/767/1534/3068/6136ms) This object has no default value. ')
hwCBQoSSamplingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 12, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSamplingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSLrCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 13), )
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoTable.setDescription('A table of Line Rate configuration information.')
hwCBQoSLrCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 13, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoEntry.setDescription('LR Configuration Information Entry.')
hwCBQoSLrUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 13, 1, 1), LrCirUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrUnit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrUnit.setDescription('CIR Unit: Absolute, Unit bps (1) Percent, Unit % (2)')
hwCBQoSLrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCir.setDescription('Committed Information Rate. Absolute value: 8000..155000000. Unit: bps Percent value: 1~100.')
hwCBQoSLrCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCbs.setDescription('Committed Burst Size. When CIR is absolute value, CBS value: 15000..155000000, default value: max(cir*1/2,15000), Unit: bit; When CIR is percent value, CBS value: 50..2000, default value: 500, Unit: ms. ')
hwCBQoSLrEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrEbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrEbs.setDescription('Excess Burst Size. When CIR is absolute value, EBS value: 0..155000000, Unit: bit; When CIR is percent value, EBS value: 0..2000, Unit: ms.')
hwCBQoSLrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSNestPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 14), )
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoTable.setDescription('A table of Hierachical Policy configuration information.')
hwCBQoSNestPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 14, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoEntry.setDescription('Hierachical Policy Configuration Information Entry.')
hwCBQoSNestPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNestPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyName.setDescription('Name of hierachical traffic policy.')
hwCBQoSNestPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNestPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSRedirectCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15), )
if mibBuilder.loadTexts: hwCBQoSRedirectCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectCfgInfoTable.setDescription('A table of Redirect configuration information.')
hwCBQoSRedirectCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSRedirectType"))
if mibBuilder.loadTexts: hwCBQoSRedirectCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectCfgInfoEntry.setDescription('Redirect Configuration Information Entry.')
hwCBQoSRedirectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 1), RedirectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSRedirectType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectType.setDescription('The value of this object identifies the traffic redirection type. The value can be ip-nexthop(2), ipv6-nexthop(5), or lsppath(6). This object has no default value. ')
hwCBQoSRedirectIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectIpAddress.setDescription('This object indicates the destination address of the redirected traffic. The value of this object can be any valid IP address.This object has no default value. ')
hwCBQoSRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectIfIndex.setDescription('The value of this object identifies the outbound interface of the redirected traffic. This object has no value range, and the default value is 0.The outbound interface cannot be an interface of the Main Processing Unit (MPU) or a Layer 2 interface. The value 0 indicates that no outbound interface is specified. ')
hwCBQoSRedirectVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectVlanId.setDescription('The value of this object identifies the VLAN ID of the outbound interface of the redirected traffic.')
hwCBQoSRedirectCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 5), RedirectCtrlType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectCtrlType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectCtrlType.setDescription('The value of this object identifies the traffic redirection control type.')
hwCBQoSRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSRedirectLSPDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectLSPDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectLSPDstIpAddress.setDescription('This object indicates the next hop of an LSP. The value of this object can be any valid IP address. This object has no default value. ')
hwCBQoSRedirectLSPSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notConfigLSP", -1), ("mainLSPPath", 1), ("backupLSPPath", 2))).clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectLSPSecondary.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectLSPSecondary.setDescription('The value of this object identifies whether a primary or a standby LSP is used. The value can be main-lsp-path(1) or backup-lsp-path(2). The default value is main-lsp-path(1). ')
hwCBQoSMirrorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 16), )
if mibBuilder.loadTexts: hwCBQoSMirrorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMirrorCfgInfoTable.setDescription('A table of Mirror configuration information.')
hwCBQoSMirrorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 16, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSMirrorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMirrorCfgInfoEntry.setDescription('Mirror Configuration Information Entry.')
hwCBQoSMirrorObserveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMirrorObserveIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMirrorObserveIndex.setDescription('The mirror observe port number')
hwCBQoSMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMirrorRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSUrpfCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 17), )
if mibBuilder.loadTexts: hwCBQoSUrpfCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSUrpfCfgInfoTable.setDescription('A table of Urpf configuration information.')
hwCBQoSUrpfCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 17, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSUrpfCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSUrpfCfgInfoEntry.setDescription('Urpf Configuration Information Entry.')
hwCBQoSUrpfCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 17, 1, 1), UrpfCtrlType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSUrpfCtrlType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSUrpfCtrlType.setDescription('The value of this object identifies URPF control type. The value can be strict(1) or loose(2). This object has no default value. ')
hwCBQoSUrpfAllowDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSUrpfAllowDefault.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSUrpfAllowDefault.setDescription('The value of this object identifies whether URPF flags the default route. The value can be 0 or 1. 0: indicates that the default route is not allowed. 1: indicates that the default route is allowed. The default value is 1. ')
hwCBQoSUrpfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 17, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSUrpfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSUrpfRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSCountCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 18), )
if mibBuilder.loadTexts: hwCBQoSCountCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCountCfgInfoTable.setDescription('A table of Count configuration information.')
hwCBQoSCountCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 18, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSCountCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCountCfgInfoEntry.setDescription('Count Configuration Information Entry.')
hwCBQoSCountAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("count", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCountAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCountAction.setDescription('The Count action ')
hwCBQoSCountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCountRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCountRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSHighDropCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 19), )
if mibBuilder.loadTexts: hwCBQoSHighDropCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSHighDropCfgInfoTable.setDescription('A table of Drop configuration information.')
hwCBQoSHighDropCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 19, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSHighDropCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSHighDropCfgInfoEntry.setDescription('Drop Configuration Information Entry.')
hwCBQoSHighDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("high", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSHighDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSHighDropPrecedence.setDescription('The Drop Precedence ')
hwCBQoSHighDropRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSHighDropRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSHighDropRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSLoadBalanceCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 20), )
if mibBuilder.loadTexts: hwCBQoSLoadBalanceCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLoadBalanceCfgInfoTable.setDescription('A table of configuring load balance method.')
hwCBQoSLoadBalanceCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 20, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSLoadBalanceCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLoadBalanceCfgInfoEntry.setDescription('Load Balance Configuration Information Entry.')
hwCBQoSLoadBalanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flow", 1), ("packet", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLoadBalanceType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLoadBalanceType.setDescription('The value of this object identifies the type of the algorithm for load balancing. The value can be flow(1) or packet(2). The default value is flow(1). ')
hwCBQoSLoadBalanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLoadBalanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLoadBalanceRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSEgressGtsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 21), )
if mibBuilder.loadTexts: hwCBQoSEgressGtsCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSEgressGtsCfgInfoTable.setDescription('A table of Egress GTS feature configuration information.')
hwCBQoSEgressGtsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 21, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSEgressGtsIfIndex"))
if mibBuilder.loadTexts: hwCBQoSEgressGtsCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSEgressGtsCfgInfoEntry.setDescription('Egress GTS feature configuration information Entry.')
hwCBQoSEgressGtsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 21, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCBQoSEgressGtsIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSEgressGtsIfIndex.setDescription('Interface index. ')
hwCBQoSEgressGtsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 21, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSEgressGtsCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSEgressGtsCir.setDescription('Committed Information Rate. Unit: kbps')
hwCBQoSEgressGtsPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 21, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSEgressGtsPir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSEgressGtsPir.setDescription('Peak information rate. Unit: kbps')
hwCBQoSEgressGtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 21, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSEgressGtsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSEgressGtsRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSServiceClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 22), )
if mibBuilder.loadTexts: hwCBQoSServiceClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSServiceClassCfgInfoTable.setDescription('A table of ServiceClass feature configuration information.')
hwCBQoSServiceClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 22, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSServiceClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSServiceClassCfgInfoEntry.setDescription('ServiceClass feature configuration information Entry.')
hwCBQoSServiceClassQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 22, 1, 1), CosType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSServiceClassQueueId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSServiceClassQueueId.setDescription('Indicates the queue ID.')
hwCBQoSServiceClassColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSServiceClassColor.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSServiceClassColor.setDescription('Indicates the color.')
hwCBQoSServiceClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 22, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSServiceClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSServiceClassRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSServiceClassNoremarkflag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 22, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSServiceClassNoremarkflag.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSServiceClassNoremarkflag.setDescription('QOS service class no remark flag. ')
hwCBQoSRedirectMULCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23), )
if mibBuilder.loadTexts: hwCBQoSRedirectMULCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULCfgInfoTable.setDescription('A table of Redirect MultiNHP configuration information.')
hwCBQoSRedirectMULCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSRedirectMULCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULCfgInfoEntry.setDescription('Redirect MultiNHP Configuration Information Entry.')
hwCBQoSRedirectMULIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress1.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress1.setDescription('Indicates the first available next-hop IP address.')
hwCBQoSRedirectMULIfIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex1.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex1.setDescription('Indicates the first available next-hop outbound interface.')
hwCBQoSRedirectMULIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress2.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress2.setDescription('Indicates the second available next-hop IP address.')
hwCBQoSRedirectMULIfIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex2.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex2.setDescription('Indicates the second available next-hop outbound interface.')
hwCBQoSRedirectMULIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress3.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress3.setDescription('Indicates the third available next-hop IP address.')
hwCBQoSRedirectMULIfIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex3.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex3.setDescription('Indicates the third available next-hop outbound interface.')
hwCBQoSRedirectMULIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress4.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIpAddress4.setDescription('Indicates the fourth available next-hop IP address.')
hwCBQoSRedirectMULIfIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex4.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULIfIndex4.setDescription('Indicates the fourth available next-hop outbound interface.')
hwCBQoSRedirectMULCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 9), RedirectCtrlType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULCtrlType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULCtrlType.setDescription('Indicates the redirection type.')
hwCBQoSRedirectMULRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 23, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectMULRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectMULRowStatus.setDescription('Indicates the row status.')
hwCBQoSRandomDiscardCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 24), )
if mibBuilder.loadTexts: hwCBQoSRandomDiscardCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRandomDiscardCfgInfoTable.setDescription('Description.')
hwCBQoSRandomDiscardCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 24, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSRandomDiscardCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRandomDiscardCfgInfoEntry.setDescription('Description.')
hwCBQoSRandomPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRandomPercent.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRandomPercent.setDescription('Description.')
hwCBQoSRandomDiscardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 24, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRandomDiscardRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRandomDiscardRowStatus.setDescription('Description.')
hwCBQoSDenyPacketLengthCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 25), )
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthCfgInfoTable.setDescription('Description.')
hwCBQoSDenyPacketLengthCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 25, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthCfgInfoEntry.setDescription('Description.')
hwCBQoSDenyPacketLengthOptype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("range", 1), ("eq", 2), ("gt", 3), ("lt", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthOptype.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthOptype.setDescription('Description.')
hwCBQoSDenyPacketLengthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthMin.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthMin.setDescription('Description.')
hwCBQoSDenyPacketLengthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthMax.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthMax.setDescription('Description.')
hwCBQoSDenyPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDenyPacketLength.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLength.setDescription('Description.')
hwCBQoSDenyPacketLengthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 25, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthRowStatus.setDescription('Description.')
hwCBQoSDAAStatisticsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 26), )
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsCfgInfoTable.setDescription('Description.')
hwCBQoSDAAStatisticsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 26, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsCfgInfoEntry.setDescription('Description.')
hwCBQoSDAAStatisticsSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsSummary.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsSummary.setDescription('Description.')
hwCBQoSDAAStatisticsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 26, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsRowStatus.setDescription('Description.')
hwCBQoSDAATariffLevelCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 27), )
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelCfgInfoTable.setDescription('Description.')
hwCBQoSDAATariffLevelCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 27, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelCfgInfoEntry.setDescription('Description.')
hwCBQoSDAATariffLevelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelValue.setDescription('Description.')
hwCBQoSDAATariffLevelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 27, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelRowStatus.setDescription('Description.')
hwCBQoSRemarkIpDfCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 28), )
if mibBuilder.loadTexts: hwCBQoSRemarkIpDfCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkIpDfCfgInfoTable.setDescription('A table of Remark Ip-Df configuration information.')
hwCBQoSRemarkIpDfCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 28, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSRemarkIpDfCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkIpDfCfgInfoEntry.setDescription('Remark Ip-Df Configuration Information Entry.')
hwCBQoSRemarkIpDf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkIpDf.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkIpDf.setDescription(' 0: remark ip-df 0 1: remark ip-df 1')
hwCBQoSRemarkIpDfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 28, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkIpDfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkIpDfRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSDropProfileCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 29), )
if mibBuilder.loadTexts: hwCBQoSDropProfileCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileCfgInfoTable.setDescription('A table of drop profile configuration information.')
hwCBQoSDropProfileCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 29, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSDropProfileIndex"))
if mibBuilder.loadTexts: hwCBQoSDropProfileCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileCfgInfoEntry.setDescription('Drop Profile Configuration Information Entry.')
hwCBQoSDropProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSDropProfileIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileIndex.setDescription('The value of this object identifies the index of the drop profile. The value ranges from 1 to 31. This object has no default value.')
hwCBQoSDropProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 29, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDropProfileName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileName.setDescription('This object indicates the name of the drop profile. The value of this object is a string of 1 to 31 visible ASCII characters, with no default value. Space cannot exist between the characters in the string. The initial space and end space are ignored.')
hwCBQoSDropProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 29, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDropProfileType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileType.setDescription(' 0: based on IP-precedence 1: based on dscp The default value is 0')
hwCBQoSDropProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 29, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSDropProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value.')
hwCBQoSDropProfileClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 30), )
if mibBuilder.loadTexts: hwCBQoSDropProfileClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileClassCfgInfoTable.setDescription('A table of drop profile class configuration information.')
hwCBQoSDropProfileClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 30, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSDropProfileIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSDropProfileClassValue"))
if mibBuilder.loadTexts: hwCBQoSDropProfileClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileClassCfgInfoEntry.setDescription('Drop Profile Class Configuration Information Entry.')
hwCBQoSDropProfileClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSDropProfileClassValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileClassValue.setDescription('The value of this object identifies the value of WRED based on the class. IP precedence based WRED: the value ranges from 0 to 31. DSCP (DiffServ code points) based WRED: the value ranges from 0 to 63 This object has no default value.')
hwCBQoSDropProfileLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSDropProfileLowLimit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileLowLimit.setDescription('This object indicates the low limit for the WRED, the percent of the current queue length. The range of the value is 0 to 100. The default value is 30.')
hwCBQoSDropProfileHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSDropProfileHighLimit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileHighLimit.setDescription('This object indicates the high limit for the WRED, the percent of the current queue length. The range of the value is 0 to 100. The default value is 100.')
hwCBQoSDropProfileDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSDropProfileDiscardProb.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDropProfileDiscardProb.setDescription('This object indicates the discard probility for the WRED. The range of the value is 0 to 100. The default value is 10.')
hwCBQoSRedirectVsiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 31), )
if mibBuilder.loadTexts: hwCBQoSRedirectVsiTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectVsiTable.setDescription('A table of redirect vsi configuration information.')
hwCBQoSRedirectVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 31, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSRedirectVsiEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectVsiEntry.setDescription('Drop Profile Class Configuration Information Entry.')
hwCBQoSRedirectVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 31, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectVsiName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectVsiName.setDescription('the vsi name of data flow redirected to.')
hwCBQoSRedirectVsiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 31, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRedirectVsiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectVsiRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSSuppressionCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32), )
if mibBuilder.loadTexts: hwCBQoSSuppressionCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionCfgInfoTable.setDescription('A table of mqc Suppression configuration information.')
hwCBQoSSuppressionCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSSuppressionCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionCfgInfoEntry.setDescription('Mqc Suppression Configuration Information Entry.')
hwCBQoSSuppressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unkonwnunicast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSuppressionType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionType.setDescription('This object indicates the suppression type.')
hwCBQoSSuppressionCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSuppressionCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionCir.setDescription('The value of this object identifies the Committed Information Rate (CIR). The value ranges from 100 to 1000000, in kbit/s, with no default value. ')
hwCBQoSSuppressionCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSuppressionCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionCbs.setDescription('The value of this object identifies the Committed Burst Size (CBS). The value ranges from 10000 to 33554432 bytes. The default value is 10000 bytes. ')
hwCBQoSSuppressionGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 4), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSuppressionGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionGreenAction.setDescription('The value of this object identifies the action adopted when CIR is not reached. pass (1), discard (2), The default value is pass (1). ')
hwCBQoSSuppressionGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(11, 81), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSuppressionGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionGreenRemarkValue.setDescription("The value is to remark When green action is remarking. the range is 11~81; the high bit represents service-class,the range is 1~8 (1:be 2:af1 3:af2 4:af3 5:af4 6:ef 7:cs6 8:cs7) the low bit represents color,the range is 1~3 (1:green 2:yellow 3:red) Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwCBQoSSuppressionRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 6), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSuppressionRedAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionRedAction.setDescription('The value of this object identifies the action performed when CIR is exceeded. pass (1), discard (2), The default value is pass (1). ')
hwCBQoSSuppressionRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(11, 81), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSuppressionRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 11~81; the high bit represents service-class,the range is 1~8 (1:be 2:af1 3:af2 4:af3 5:af4 6:ef 7:cs6 8:cs7) the low bit represents color,the range is 1~3 (1:green 2:yellow 3:red) For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. -1 can't be set.")
hwCBQoSSuppressionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 2, 32, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSuppressionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSuppressionRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3))
hwCBQoSPolicyIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyIndexNext.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyIndexNext.setDescription('This object contains an appropriate value to be used for hwCBQoSPolicyIndex when creating rows in the hwCBQoSPolicyCfgInfoTable. Begin with 0.')
hwCBQoSPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2), )
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoTable.setDescription('A table of QoS policy configuration information.')
hwCBQoSPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoEntry.setDescription('Traffic Policy Configuration Information Entry.')
hwCBQoSPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyIndex.setDescription('The value of this object identifies the policy index. The value ranges from 1 to 1024. This object has no default value. ')
hwCBQoSPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyName.setDescription('This object indicates the policy name. The value of this object is a string of 1 to 64 visible ASCII characters. This object has no default value. Space cannot exist between the characters in the string. The initial space and end space are ignored. ')
hwCBQoSPolicyClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassCount.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassCount.setDescription('The value of this object identifies the number of traffic classes that are associated with a policy.')
hwCBQoSPolicyConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unavailable", -1), ("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyConfigMode.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyConfigMode.setDescription("Configuration mode of Traffic Policy. Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwCBQoSPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSPolicyShareFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multiple", 1), ("single", 2))).clone('multiple')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyShareFlag.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyShareFlag.setDescription('The value of the object identifies the attribute flag deciding sharing or not sharing a policy. The value can be either of the following: multiple(1): indicates that a policy is not shared. single(2): indicates that a policy is shared. The default value is multiple(1). ')
hwCBQoSPolicyStatisticsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 2, 1, 7), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsFlag.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsFlag.setDescription('This object indicates the flag deciding whether the policy statistics are enabled. The value of this object can be either of the following: enabled(1) disabled(2) The default value is disabled (2). ')
hwCBQoSPolicyClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3), )
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoTable.setDescription('A table of QoS Policy classifier-behavior configuration information.')
hwCBQoSPolicyClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoEntry.setDescription('Traffic Policy classifier-behavior Configuration Information Entry.')
hwCBQoSPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassIndex.setDescription('The value of the object identifies the policy class index in a QoS policy. The value ranges from 0 to 255. This object has no default value. ')
hwCBQoSPolicyClassClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierIndex.setDescription('The value of the object identifies the index of the classifier applied by a policy. The value ranges from 0 to 4095. This object has no default value. ')
hwCBQoSPolicyClassClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierName.setDescription('This object indicates the policy class name in a QoS policy. The value of this object is a string of 1 to 64 visible ASCII characters. This object has no default value. Space cannot exist between the characters in the string. The initial space and end space are ignored. ')
hwCBQoSPolicyClassBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorIndex.setDescription('The value of the object identifies the index of the behavior applied by a policy. The value ranges from 0 to 4095. ')
hwCBQoSPolicyClassBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorName.setDescription('This object indicates the name of the behavior applied by a policy. The value of this object is a string of 1 to 64 visible ASCII characters. This object has no default value. Space cannot exist between the characters in the string. The initial space and end space are ignored. ')
hwCBQoSPolicyClassPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassPrecedence.setDescription("The Precedence of the class in the policy. Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwCBQoSPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSPolicyShareModeCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 4), )
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeCfgInfoTable.setDescription('Policy Share Mode feature configuration information.')
hwCBQoSPolicyShareModeCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 4, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeCfgInfoEntry.setDescription('Policy Share Mode feature configuration information Entry.')
hwCBQoSPolicyShareModeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 4, 1, 1), EnabledStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeFlag.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeFlag.setDescription('The flag that the share Mode of a policy is enabled.')
hwCBQoSPolicyShareModeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hwCBQoSApplyPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4))
hwCBQoSIfApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 1), )
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSIfApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwCBQoSIfApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyIfIndex.setDescription('The value of this object identifies the index of the interface on which the policy is applied. This object has no value range and default value. The interface must not be an interface of the MPU or a Layer 2 interface. ')
hwCBQoSIfApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 1, 1, 2), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyDirection.setDescription('The value of this object identifies the direction in which a policy is applied. The value can be inbound(1) or outbound(2). This object has no default value. ')
hwCBQoSIfApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyName.setDescription('This object indicates the policy name. The value of this object is a string of 1 to 64 visible ASCII characters. This object has no default value. Space cannot exist between the characters in the string. The initial space and end space are ignored. ')
hwCBQoSIfApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSIfApplyPolicyLinkLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linklayer", 1), ("alllayer", 2), ("iplayer", 3), ("mplslayer", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyLinkLayer.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyLinkLayer.setDescription('If it is set link-layer, it means l2 configuration is valid, or if ip-layer is set, means l3 configuration is valid, or if mpls-layer is set, means mpls configuration is valid, or it means all ')
hwCBQoSAtmPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSAtmPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyEntry.setDescription('Policy applied on ATM PVC Configuration Information Entry.')
hwCBQoSAtmPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyIfIndex.setDescription('ATM Interface Index, equal to ifIndex.')
hwCBQoSAtmPvcApplyPolicyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVPI.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVPI.setDescription('VPI value of ATM Interface.')
hwCBQoSAtmPvcApplyPolicyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVCI.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVCI.setDescription('VCI value of ATM Interface.')
hwCBQoSAtmPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2, 1, 4), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSAtmPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSAtmPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSIfVlanApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3), )
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSIfVlanApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid2"))
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyEntry.setDescription('Policy applied on Ethernet Vlan Configuration Information Entry.')
hwCBQoSIfVlanApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyIfIndex.setDescription('Indicates the Ethernet interface index.')
hwCBQoSIfVlanApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 2), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyDirection.setDescription('Indicates the direction to which the policy is applied.')
hwCBQoSIfVlanApplyPolicyVlanid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyVlanid1.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyVlanid1.setDescription('Indicates the VLAN that the Ethernet interface belongs to.')
hwCBQoSIfVlanApplyPolicyVlanid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyVlanid2.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyVlanid2.setDescription('Indicates the VLAN that the Ethernet interface belongs to.')
hwCBQoSIfVlanApplyPolicyCeVidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyCeVidEnd.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyCeVidEnd.setDescription('Indicates the VLAN that the Ethernet interface belongs to.')
hwCBQoSIfVlanApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyName.setDescription('Indicates the policy name.')
hwCBQoSIfVlanApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSIfVlanApplyPolicyLinkLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linklayer", 1), ("alllayer", 2), ("iplayer", 3), ("mplslayer", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyLinkLayer.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyLinkLayer.setDescription('Indicates the link layer. The value range is: link-layer(1),all-layer(2),ip-layer(3),mpls-layer(4). ')
hwCBQoSFrClassApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 4), )
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSFrClassApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 4, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyFrClassName"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyEntry.setDescription('Policy applied on fr class Configuration Information Entry.')
hwCBQoSFrClassApplyPolicyFrClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyFrClassName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyFrClassName.setDescription('The name of fr class.')
hwCBQoSFrClassApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 4, 1, 2), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSFrClassApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSFrClassApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSFrPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 5), )
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSFrPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 5, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyEntry.setDescription('Policy applied on FR PVC Configuration Information Entry.')
hwCBQoSFrPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyIfIndex.setDescription('Fr Interface Index, equal to ifIndex.')
hwCBQoSFrPvcApplyPolicyDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDlciNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDlciNum.setDescription('Fr DLCI number.')
hwCBQoSFrPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 5, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSFrPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSVsiApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 6), )
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSVsiApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 6, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSVsiApplyPolicyVsiIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVsiApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyEntry.setDescription('Policy applied on VSI Configuration Information Entry.')
hwCBQoSVsiApplyPolicyVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyVsiIndex.setDescription('VSI Interface Index, equal to ifIndex.')
hwCBQoSVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSVsiName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiName.setDescription('Vlan of Ethernet Interface.')
hwCBQoSVsiApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 6, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSVsiApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSVsiApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSVlanApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 7), )
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyTable.setDescription('A table of applying policy on VLAN.')
hwCBQoSVlanApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 7, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyVlanId"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyEntry.setDescription('Policy applied on VLAN Configuration Information Entry.')
hwCBQoSVlanApplyPolicyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyVlanId.setDescription('VLAN number.')
hwCBQoSVlanApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyDirection.setDescription('Policy Direction: inbound(1), apply policy inbound; outbound(2), apply policy outbound.')
hwCBQoSVlanApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyName.setDescription('Policy name: The name of the applied policy.')
hwCBQoSVlanApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hwCBQoSRuleNotSupportAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 8), )
if mibBuilder.loadTexts: hwCBQoSRuleNotSupportAlarmTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRuleNotSupportAlarmTable.setDescription('hwCBQoSRuleNotSupportAlarmTable')
hwCBQoSRuleNotSupportAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 8, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSRuleDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSRuleSlotID"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSRuleInfo"))
if mibBuilder.loadTexts: hwCBQoSRuleNotSupportAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRuleNotSupportAlarmEntry.setDescription('hwCBQoSRuleNotSupportAlarmEntry')
hwCBQoSRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSRuleDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRuleDirection.setDescription('hwCBQoSRuleDirection')
hwCBQoSRuleSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSRuleSlotID.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRuleSlotID.setDescription('hwCBQoSRuleSlotID')
hwCBQoSRuleInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSRuleInfo.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRuleInfo.setDescription('hwCBQoSRuleInfo')
hwCBQoSActionNotSupportAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 9), )
if mibBuilder.loadTexts: hwCBQoSActionNotSupportAlarmTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSActionNotSupportAlarmTable.setDescription('hwCBQoSActionNotSupportAlarmTable')
hwCBQoSActionNotSupportAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 9, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSActionDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSActionSlotID"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSActionInfo"))
if mibBuilder.loadTexts: hwCBQoSActionNotSupportAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSActionNotSupportAlarmEntry.setDescription('hwCBQoSActionNotSupportAlarmEntry')
hwCBQoSActionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSActionDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSActionDirection.setDescription('hwCBQoSActionDirection')
hwCBQoSActionSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSActionSlotID.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSActionSlotID.setDescription('hwCBQoSActionSlotID')
hwCBQoSActionInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSActionInfo.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSActionInfo.setDescription('hwCBQoSActionInfo')
hwCBQoSIfApplyMultiPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 10), )
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyTable.setDescription('A table of applying multi-policy on interface.')
hwCBQoSIfApplyMultiPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 10, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyMultiPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyMultiPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyMultiPolicyIndex"))
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwCBQoSIfApplyMultiPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyIfIndex.setDescription('The value of this object identifies the index of the interface on which the policy is applied. This object has no value range and default value. ')
hwCBQoSIfApplyMultiPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 10, 1, 2), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyDirection.setDescription('Policy Direction: inbound(1), apply policy inbound; outbound(2), apply policy outbound.')
hwCBQoSIfApplyMultiPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyIndex.setDescription('The value of this object identifies the policy index. ')
hwCBQoSIfApplyMultiPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyName.setDescription('Name of the applied policy.')
hwCBQoSIfApplyMultiPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyMultiPolicyRowStatus.setDescription('This object indicates the row status. The value of this object can be Active(1), CreateAndGo(4), or Destroy(6). This object has no default value. ')
hwCBQoSVlanApplyMultiPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 11), )
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyTable.setDescription('A table of applying multi-policy on VLAN.')
hwCBQoSVlanApplyMultiPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 11, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyMultiPolicyVlanId"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyMultiPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyMultiPolicyIndex"))
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyEntry.setDescription('Policy applied on VLAN Configuration Information Entry.')
hwCBQoSVlanApplyMultiPolicyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyVlanId.setDescription('VLAN number.')
hwCBQoSVlanApplyMultiPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyDirection.setDescription('Policy Direction: inbound(1), apply policy inbound; outbound(2), apply policy outbound.')
hwCBQoSVlanApplyMultiPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyIndex.setDescription('The value of this object identifies the policy index.')
hwCBQoSVlanApplyMultiPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyName.setDescription('Name of the applied policy.')
hwCBQoSVlanApplyMultiPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 4, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyMultiPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hwCBQoSApplyPolicyStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5))
hwCBQoSIfStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1))
hwCBQoSIfCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoTable.setDescription('A table of interface CBQ Running statistics. When policy using queue behavior is applied on interface the interface will using Class Based Queuing.')
hwCBQoSIfCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"))
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoEntry.setDescription('Interface CBQ statistics entry.')
hwCBQoSIfCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqQueueSize.setDescription('Queue size of CBQ')
hwCBQoSIfCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqDiscard.setDescription("The number of discarded packets which coundn't be enqueued.")
hwCBQoSIfCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqEfQueueSize.setDescription('Queue size of EF')
hwCBQoSIfCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqAfQueueSize.setDescription('Queue size of AF')
hwCBQoSIfCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeQueueSize.setDescription('Queue size of BE')
hwCBQoSIfCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeActiveQueueNum.setDescription('the number of Active Be Queue')
hwCBQoSIfCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeMaxActiveQueueNum.setDescription('the max number of Active Be Queue')
hwCBQoSIfCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeTotalQueueNum.setDescription('the total number of Be Queue')
hwCBQoSIfCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqAfAllocatedQueueNum.setDescription('the Allocated number of Af Queue')
hwCBQoSIfClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on the interface.')
hwCBQoSIfClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoEntry.setDescription("Classifier's matching statistics information entry.")
hwCBQoSIfClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSIfClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy. Only software QoS support this node.')
hwCBQoSIfClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassAverageRate.setDescription('Average rate of the traffic matching a class in a QoS policy. For inbound QoS policy, it is the rate of the traffic input; For outbound QoS policy, it is the rate of the traffic output. Only software QoS support this node.')
hwCBQosIfClassPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQosIfClassPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQosIfClassPassedPackets.setDescription('Number of passed packets matching a class in a QoS policy.')
hwCBQosIfClassDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQosIfClassDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQosIfClassDroppedPackets.setDescription('Number of dropped packets matching a class in a QoS policy.')
hwCBQoSIfCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3), )
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on the interface.')
hwCBQoSIfCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoEntry.setDescription('CAR statistics information entry.')
hwCBQoSIfCarGreenPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedPackets.setDescription('Passed packets of green packet')
hwCBQoSIfCarGreenPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedBytes.setDescription('Passed bytes of green packet')
hwCBQoSIfCarGreenRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedPackets.setDescription('Remarked packets of green packet')
hwCBQoSIfCarGreenRemarkedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedBytes.setDescription('Remarked bytes of green packet')
hwCBQoSIfCarGreenDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedPackets.setDescription('Discarded packets of green packet')
hwCBQoSIfCarGreenDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedBytes.setDescription('Discarded bytes of green packet')
hwCBQoSIfCarYellowPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedPackets.setDescription('Passed packets of yellow packet')
hwCBQoSIfCarYellowPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedBytes.setDescription('Passed bytes of yellow packet')
hwCBQoSIfCarYellowRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedPackets.setDescription('Remarked packets of yellow packet')
hwCBQoSIfCarYellowRemarkedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedBytes.setDescription('Remarked bytes of yellow packet')
hwCBQoSIfCarYellowDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedPackets.setDescription('Discarded packets of yellow packet')
hwCBQoSIfCarYellowDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedBytes.setDescription('Discarded bytes of yellow packet')
hwCBQoSIfCarRedPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedPackets.setDescription('Passed packets of red packet')
hwCBQoSIfCarRedPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedBytes.setDescription('Passed bytes of red packet')
hwCBQoSIfCarRedRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedPackets.setDescription('Remarked packets of red packet')
hwCBQoSIfCarRedRemarkedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedBytes.setDescription('Remarked bytes of red packet')
hwCBQoSIfCarRedDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedPackets.setDescription('Discarded packets of red packet')
hwCBQoSIfCarRedDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedBytes.setDescription('Discarded bytes of red packet')
hwCBQoSIfCarGreenPassedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedPacketsRate.setDescription('Rate of forwarded green packets')
hwCBQoSIfCarGreenPassedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPassedBytesRate.setDescription('Rate of forwarded bytes of green packets')
hwCBQoSIfCarGreenRemarkedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedPacketsRate.setDescription('Rate of re-marked green packets')
hwCBQoSIfCarGreenRemarkedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenRemarkedBytesRate.setDescription('Rate of re-marked bytes of green packets')
hwCBQoSIfCarGreenDiscardedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedPacketsRate.setDescription('Rate of discarded green packets')
hwCBQoSIfCarGreenDiscardedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenDiscardedBytesRate.setDescription('Rate of discarded bytes of green packets')
hwCBQoSIfCarYellowPassedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedPacketsRate.setDescription('Rate of forwarded yellow packets')
hwCBQoSIfCarYellowPassedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowPassedBytesRate.setDescription('Rate of forwarded bytes of yellow packets')
hwCBQoSIfCarYellowRemarkedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedPacketsRate.setDescription('Rate of re-marked yellow packets')
hwCBQoSIfCarYellowRemarkedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowRemarkedBytesRate.setDescription('Rate of re-marked bytes of yellow packets')
hwCBQoSIfCarYellowDiscardedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedPacketsRate.setDescription('Rate of discarded yellow packets')
hwCBQoSIfCarYellowDiscardedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarYellowDiscardedBytesRate.setDescription('Rate of discarded bytes of yellow packets')
hwCBQoSIfCarRedPassedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedPacketsRate.setDescription('Rate of forwarded red packets')
hwCBQoSIfCarRedPassedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedPassedBytesRate.setDescription('Rate of forwarded bytes of red packets')
hwCBQoSIfCarRedRemarkedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedPacketsRate.setDescription('Rate of re-marked red packets')
hwCBQoSIfCarRedRemarkedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedRemarkedBytesRate.setDescription('Rate of re-marked bytes of red packets')
hwCBQoSIfCarRedDiscardedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedPacketsRate.setDescription('Rate of discarded red packets')
hwCBQoSIfCarRedDiscardedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedDiscardedBytesRate.setDescription('Rate of discarded bytes of red packets')
hwCBQoSIfGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4), )
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on the interface.')
hwCBQoSIfGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoEntry.setDescription('GTS statistics entry.')
hwCBQoSIfGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hwCBQoSIfGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hwCBQoSIfGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hwCBQoSIfGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hwCBQoSIfGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hwCBQoSIfGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hwCBQoSIfGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsQueueSize.setDescription('Queue size of GTS queue.')
hwCBQoSIfRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 5), )
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on the interface.')
hwCBQoSIfRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 5, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hwCBQoSIfRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkedPackets.setDescription('Number of packets remarked.')
hwCBQoSIfRemarkedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfRemarkedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkedBytes.setDescription('Number of bytes remarked.')
hwCBQoSIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6), )
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on the interface.')
hwCBQoSIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoEntry.setDescription('Queue statistics entry.')
hwCBQoSIfQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hwCBQoSIfQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hwCBQoSIfQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hwCBQoSIfQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hwCBQoSIfQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
hwCBQoSIfQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
hwCBQoSIfQueueMatchedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedPacketsRate.setDescription('Rate of packets matched to enqueue.')
hwCBQoSIfQueueMatchedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedBytesRate.setDescription('Rate of bytes matched to enqueue.')
hwCBQoSIfQueueEnqueuedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedPacketsRate.setDescription('Rate of packets enqueued.')
hwCBQoSIfQueueEnqueuedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedBytesRate.setDescription('Rate of bytes enqueued.')
hwCBQoSIfQueueDiscardedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedPacketsRate.setDescription('Rate of packets discarded when enqueued by discard method.')
hwCBQoSIfQueueDiscardedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedBytesRate.setDescription('Rate of bytes discarded when enqueued by discard method.')
hwCBQoSIfWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 7), )
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on the interface.')
hwCBQoSIfWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 7, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoEntry.setDescription('WRED statistics entry.')
hwCBQoSIfWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredRandomDiscardedPackets.setDescription('Number of packets that random-discarded by WRED.')
hwCBQoSIfWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredTailDiscardedPackets.setDescription('Number of packets that tail-discarded by WRED.')
hwCBQoSIfLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8), )
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoTable.setDescription('A table of Running statistics for LR in a QoS policy applied on the interface.')
hwCBQoSIfLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoEntry.setDescription('LR statistics entry.')
hwCBQoSIfLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrPassedPackets.setDescription('Number of packets passed by LR.')
hwCBQoSIfLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrPassedBytes.setDescription('Number of bytes passed by LR.')
hwCBQoSIfLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedPackets.setDescription('Number of packets discarded by LR.')
hwCBQoSIfLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedBytes.setDescription('Number of bytes discarded by LR.')
hwCBQoSIfLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedPackets.setDescription('Number of packets delayed by LR.')
hwCBQoSIfLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedBytes.setDescription('Number of bytes delayed by LR.')
hwCBQoSIfRedirectRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 9), )
if mibBuilder.loadTexts: hwCBQoSIfRedirectRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRedirectRunInfoTable.setDescription('A table of Running statistics for redirect in a QoS policy applied on the interface.')
hwCBQoSIfRedirectRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 9, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfRedirectRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRedirectRunInfoEntry.setDescription('Redirect statistics entry.')
hwCBQoSIfRedirectedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfRedirectedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRedirectedPackets.setDescription('Number of packets Redirected.')
hwCBQoSIfRedirectedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfRedirectedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRedirectedBytes.setDescription('Number of bytes Redirected.')
hwCBQoSIfFirewallRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 10), )
if mibBuilder.loadTexts: hwCBQoSIfFirewallRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfFirewallRunInfoTable.setDescription('A table of Running statistics for fire wall in a QoS policy applied on the interface.')
hwCBQoSIfFirewallRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 10, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfFirewallRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfFirewallRunInfoEntry.setDescription('Fire wall statistics entry.')
hwCBQoSIfFilteredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 10, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfFilteredPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfFilteredPackets.setDescription('Number of packets Filtered.')
hwCBQoSIfFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfFilteredBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfFilteredBytes.setDescription('Number of bytes Filtered.')
hwCBQoSIfMirrorRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 11), )
if mibBuilder.loadTexts: hwCBQoSIfMirrorRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfMirrorRunInfoTable.setDescription('A table of Running statistics for mirror in a QoS policy applied on the interface.')
hwCBQoSIfMirrorRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 11, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfMirrorRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfMirrorRunInfoEntry.setDescription('Mirror statistics entry.')
hwCBQoSIfMirroredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfMirroredPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfMirroredPackets.setDescription('Number of packets Mirrored.')
hwCBQoSIfMirroredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfMirroredBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfMirroredBytes.setDescription('Number of bytes Mirrored.')
hwCBQoSIfUrpfRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 12), )
if mibBuilder.loadTexts: hwCBQoSIfUrpfRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfUrpfRunInfoTable.setDescription('A table of Running statistics for urpf in a QoS policy applied on the interface.')
hwCBQoSIfUrpfRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 12, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfUrpfRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfUrpfRunInfoEntry.setDescription('Urpf statistics entry.')
hwCBQoSIfUrpfPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 12, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfUrpfPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfUrpfPassedPackets.setDescription('Number of packets passed.')
hwCBQoSIfUrpfPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 12, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfUrpfPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfUrpfPassedBytes.setDescription('Number of bytes passed.')
hwCBQoSIfUrpfDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 12, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfUrpfDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfUrpfDroppedPackets.setDescription('Number of packets dropped.')
hwCBQoSIfUrpfDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 12, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfUrpfDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfUrpfDroppedBytes.setDescription('Number of bytes dropped.')
hwCBQoSIfSampleRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 13), )
if mibBuilder.loadTexts: hwCBQoSIfSampleRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfSampleRunInfoTable.setDescription('A table of Running statistics for sample in a QoS policy applied on the interface.')
hwCBQoSIfSampleRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 13, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfSampleRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfSampleRunInfoEntry.setDescription('Sample statistics entry.')
hwCBQoSIfSampledPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 13, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfSampledPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfSampledPackets.setDescription('Number of packets Sampled.')
hwCBQoSIfSampledBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 1, 13, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfSampledBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfSampledBytes.setDescription('Number of bytes Sampled.')
hwCBQoSAtmPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2))
hwCBQoSAtmPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoTable.setDescription('A table of atm pvc CBQ Running statistics. When policy using queue behavior is applied on atm pvc atm pvc will using Class Based Queuing.')
hwCBQoSAtmPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
hwCBQoSAtmPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqQueueSize.setDescription('Queue size of CBQ')
hwCBQoSAtmPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqDiscard.setDescription("The number of discarded packets which coundn't be enqueued.")
hwCBQoSAtmPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqEfQueueSize.setDescription('Queue size of EF')
hwCBQoSAtmPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfQueueSize.setDescription('Queue size of AF')
hwCBQoSAtmPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeQueueSize.setDescription('Queue size of BE')
hwCBQoSAtmPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeActiveQueueNum.setDescription('the number of Active Be Queue')
hwCBQoSAtmPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeMaxActiveQueueNum.setDescription('the max number of Active Be Queue')
hwCBQoSAtmPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeTotalQueueNum.setDescription('the total number of Be Queue')
hwCBQoSAtmPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfAllocatedQueueNum.setDescription('the Allocated number of Af Queue')
hwCBQoSAtmPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hwCBQoSAtmPvcClassMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSAtmPvcClassMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchBytes.setDescription('Number of bytes matching a class in a QoS policy.')
hwCBQoSAtmPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassAverageRate.setDescription('Average rate of the traffic matching a class in a QoS policy. For inbound QoS policy, it is the rate of the traffic input; For outbound QoS policy, it is the rate of the traffic output. Only software QoS support this node.')
hwCBQoSAtmPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
hwCBQoSAtmPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformPackets.setDescription('Number of packets that conforming specified CIR.')
hwCBQoSAtmPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformBytes.setDescription('Number of bytes that conforming specified CIR.')
hwCBQoSAtmPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedPackets.setDescription('Number of packets exceeded CIR.')
hwCBQoSAtmPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedBytes.setDescription('Number of bytes exceeded CIR.')
hwCBQoSAtmPvcCarConformPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformPacketsRate.setDescription('Rate of packets that conforming specified CIR.')
hwCBQoSAtmPvcCarConformBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformBytesRate.setDescription('Rate of bytes that conforming specified CIR.')
hwCBQoSAtmPvcCarExceedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedPacketsRate.setDescription('Rate of packets exceeded CIR.')
hwCBQoSAtmPvcCarExceedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedBytesRate.setDescription('Rate of bytes exceeded CIR.')
hwCBQoSAtmPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
hwCBQoSAtmPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hwCBQoSAtmPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hwCBQoSAtmPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hwCBQoSAtmPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hwCBQoSAtmPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hwCBQoSAtmPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hwCBQoSAtmPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsQueueSize.setDescription('Queue size of GTS queue.')
hwCBQoSAtmPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 5), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 5, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hwCBQoSAtmPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkedPackets.setDescription('Number of packets remarked.')
hwCBQoSAtmPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
hwCBQoSAtmPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hwCBQoSAtmPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hwCBQoSAtmPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hwCBQoSAtmPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hwCBQoSAtmPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedPackets.setDescription('Number of packets discard when enqueued by discard method.')
hwCBQoSAtmPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedBytes.setDescription('Number of bytes discard when enqueued by discard method.')
hwCBQoSAtmPvcQueueMatchedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedPacketsRate.setDescription('Rate of packets matched to enqueue.')
hwCBQoSAtmPvcQueueMatchedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedBytesRate.setDescription('Rate of bytes matched to enqueue.')
hwCBQoSAtmPvcQueueEnqueuedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedPacketsRate.setDescription('Rate of packets enqueued.')
hwCBQoSAtmPvcQueueEnqueuedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedBytesRate.setDescription('Rate of bytes enqueued.')
hwCBQoSAtmPvcQueueDiscardedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedPacketsRate.setDescription('Rate of packets discard when enqueued by discard method.')
hwCBQoSAtmPvcQueueDiscardedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedBytesRate.setDescription('Rate of bytes discard when enqueued by discard method.')
hwCBQoSAtmPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 7), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 7, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
hwCBQoSAtmPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
hwCBQoSAtmPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
hwCBQoSAtmPvcLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoTable.setDescription('A table of Running statistics for LR in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoEntry.setDescription('LR statistics entry.')
hwCBQoSAtmPvcLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedPackets.setDescription('Number of packets passed by LR.')
hwCBQoSAtmPvcLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedBytes.setDescription('Number of bytes passed by LR.')
hwCBQoSAtmPvcLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedPackets.setDescription('Number of packets discarded by LR.')
hwCBQoSAtmPvcLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedBytes.setDescription('Number of bytes discarded by LR.')
hwCBQoSAtmPvcLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedPackets.setDescription('Number of packets delayed by LR.')
hwCBQoSAtmPvcLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 2, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedBytes.setDescription('Number of bytes delayed by LR.')
hwCBQoSFrPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3))
hwCBQoSFrPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1), )
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoTable.setDescription('A table of fr pvc CBQ Running statistics. When policy using queue behavior is applied on fr pvc fr pvc will using Class Based Queuing.')
hwCBQoSFrPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"))
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
hwCBQoSFrPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqQueueSize.setDescription('Queue size of CBQ')
hwCBQoSFrPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqDiscard.setDescription("The number of discarded packets which coundn't be enqueued.")
hwCBQoSFrPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqEfQueueSize.setDescription('Queue size of EF')
hwCBQoSFrPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfQueueSize.setDescription('Queue size of AF')
hwCBQoSFrPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeQueueSize.setDescription('Queue size of BE')
hwCBQoSFrPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeActiveQueueNum.setDescription('the number of Active Be Queue')
hwCBQoSFrPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeMaxActiveQueueNum.setDescription('the max number of Active Be Queue')
hwCBQoSFrPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeTotalQueueNum.setDescription('the total number of Be Queue')
hwCBQoSFrPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfAllocatedQueueNum.setDescription('the Allocated number of Af Queue')
hwCBQoSFrPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 2), )
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hwCBQoSFrPvcClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSFrPvcClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy.')
hwCBQoSFrPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassAverageRate.setDescription('Average rate of the traffic matching a class in a QoS policy. For inbound QoS policy, it is the rate of the traffic input; For outbound QoS policy, it is the rate of the traffic output. Only software QoS support this node.')
hwCBQoSFrPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3), )
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
hwCBQoSFrPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformPackets.setDescription('Number of packets conform CIR.')
hwCBQoSFrPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformBytes.setDescription('Number of bytes conform CIR.')
hwCBQoSFrPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedPackets.setDescription('Number of packets exceed CIR.')
hwCBQoSFrPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedBytes.setDescription('Number of bytes exceed CIR.')
hwCBQoSFrPvcCarConformPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformPacketsRate.setDescription('Rate of packets conform CIR.')
hwCBQoSFrPvcCarConformBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformBytesRate.setDescription('Rate of bytes conform CIR.')
hwCBQoSFrPvcCarExceedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedPacketsRate.setDescription('Rate of packets exceed CIR.')
hwCBQoSFrPvcCarExceedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedBytesRate.setDescription('Rate of bytes exceed CIR.')
hwCBQoSFrPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4), )
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
hwCBQoSFrPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hwCBQoSFrPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hwCBQoSFrPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hwCBQoSFrPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hwCBQoSFrPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hwCBQoSFrPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hwCBQoSFrPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsQueueSize.setDescription('Queue size of GTS queue.')
hwCBQoSFrPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 5), )
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 5, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hwCBQoSFrPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkedPackets.setDescription('Number of packets remarked.')
hwCBQoSFrPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6), )
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
hwCBQoSFrPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hwCBQoSFrPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hwCBQoSFrPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hwCBQoSFrPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hwCBQoSFrPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
hwCBQoSFrPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
hwCBQoSFrPvcQueueMatchedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedPacketsRate.setDescription('Rate of packets matched to enqueue.')
hwCBQoSFrPvcQueueMatchedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedBytesRate.setDescription('Rate of bytes matched to enqueue.')
hwCBQoSFrPvcQueueEnqueuedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedPacketsRate.setDescription('Rate of packets enqueued.')
hwCBQoSFrPvcQueueEnqueuedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedBytesRate.setDescription('Rate of bytes enqueued.')
hwCBQoSFrPvcQueueDiscardedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedPacketsRate.setDescription('Rate of packets discarded when enqueued by discard method.')
hwCBQoSFrPvcQueueDiscardedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedBytesRate.setDescription('Rate of bytes discarded when enqueued by discard method.')
hwCBQoSFrPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 7), )
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 7, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
hwCBQoSFrPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
hwCBQoSFrPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
hwCBQoSFrPvcLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8), )
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoTable.setDescription('A table of Running statistics for LR in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoEntry.setDescription('LR statistics entry.')
hwCBQoSFrPvcLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedPackets.setDescription('Number of packets passed by LR.')
hwCBQoSFrPvcLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedBytes.setDescription('Number of bytes passed by LR.')
hwCBQoSFrPvcLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedPackets.setDescription('Number of packets discarded by LR.')
hwCBQoSFrPvcLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedBytes.setDescription('Number of bytes discarded by LR.')
hwCBQoSFrPvcLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedPackets.setDescription('Number of packets delayed by LR.')
hwCBQoSFrPvcLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedBytes.setDescription('Number of bytes delayed by LR.')
hwCBQoSIfVlanStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 4))
hwCBQoSIfVlanClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 4, 1), )
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on ethernet vlan.')
hwCBQoSIfVlanClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 4, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hwCBQoSIfVlanClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 4, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSIfVlanClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchedBytes.setDescription('Number of Bytes matching a class in a QoS policy.')
hwCBQoSVsiStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 5))
hwCBQoSVsiClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 5, 1), )
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on VSI.')
hwCBQoSVsiClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 5, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSVsiApplyPolicyVsiIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVsiApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hwCBQoSVsiClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 5, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSVsiClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVsiClassMatchedBytes.setDescription('Number of Bytes matching a class in a QoS policy.')
hwCBQoSPolicyStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6))
hwCBQoSCarStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1), )
if mibBuilder.loadTexts: hwCBQoSCarStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarStatisticsTable.setDescription('A table of CAR statistics for class-based traffic classification applied in traffic monitoring.')
hwCBQoSCarStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid2"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSCarStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarStatisticsEntry.setDescription('A table of CAR statistics for class-based traffic classification applied in traffic monitoring, including the statistics of packets that have the rate within CIR, of CIR, of PIR or exceeds PIR.')
hwCBQoSCarConformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarConformedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarConformedPackets.setDescription('This object indicates the number of packets within the range of CIR.')
hwCBQoSCarConformedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarConformedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarConformedBytes.setDescription('This object indicates the number of bytes within the range of CIR.')
hwCBQoSCarConformedPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarConformedPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarConformedPacketRate.setDescription('This object indicates the packet rate within the range of CIR, in pps.')
hwCBQoSCarConformedByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarConformedByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarConformedByteRate.setDescription('This object indicates the bytes rate within the range of CIR, in bps.')
hwCBQoSCarExceededPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarExceededPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarExceededPackets.setDescription('This object indicates the number of packets between PIR and CIR.')
hwCBQoSCarExceededBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarExceededBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarExceededBytes.setDescription('This object indicates the number of bytes between PIR and CIR.')
hwCBQoSCarExceededPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarExceededPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarExceededPacketRate.setDescription('This object indicates the packet rate between PIR and CIR, in pps.')
hwCBQoSCarExceededByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarExceededByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarExceededByteRate.setDescription('This object indicates the byte rate between PIR and CIR, in pps.')
hwCBQoSCarOverflowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarOverflowPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarOverflowPackets.setDescription('This object indicates the rate of packets that exceeds the PIR.')
hwCBQoSCarOverflowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarOverflowBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarOverflowBytes.setDescription('This object indicates the number of bytes when PIR is exceeded.')
hwCBQoSCarOverflowPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarOverflowPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarOverflowPacketRate.setDescription('This object indicates the rate of packets that exceeds the PIR.')
hwCBQoSCarOverflowByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarOverflowByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarOverflowByteRate.setDescription('This object indicates the rate of bytes that exceeds the PIR.')
hwCBQoSCarPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarPassedPackets.setDescription('This object indicates the number of packets passed after the Committed Access Rate (CAR) is set.')
hwCBQoSCarPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarPassedBytes.setDescription('This object indicates the number of the bytes passed after CAR is set.')
hwCBQoSCarDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarDroppedPackets.setDescription('This object indicates the number of discarded packets after CAR is set.')
hwCBQoSCarDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSCarDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarDroppedBytes.setDescription('This object indicates the number of discarded bytes after CAR is set.')
hwCBQoSPolicyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2), )
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsTable.setDescription('A table of policy statistics applied on the interface. It takes the interface as a unit to sum up all the classes in the policy that are matched or are not matched.')
hwCBQoSPolicyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid2"))
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsEntry.setDescription('Statistics information of the policy.')
hwCBQoSPolicyMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPackets.setDescription('This object indicates the number of packets matching the traffic classification policy.')
hwCBQoSPolicyMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedBytes.setDescription('This object indicates the number of bytes matching the traffic classification policy.')
hwCBQoSPolicyUnmatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyUnmatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyUnmatchedPackets.setDescription('This object indicates the number of packets mismatching the traffic classification policy.')
hwCBQoSPolicyUnmatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyUnmatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyUnmatchedBytes.setDescription('This object indicates the number of bytes mismatching the traffic classification policy.')
hwCBQoSPolicyMatchedPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassPackets.setDescription('Number of packets that match the traffic classification policy and pass through')
hwCBQoSPolicyMatchedPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassBytes.setDescription('Number of bytes that match the traffic classification policy and pass through')
hwCBQoSPolicyMatchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropPackets.setDescription('Number of packets that match the traffic classification policy and are discarded')
hwCBQoSPolicyMatchedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropBytes.setDescription('Number of bytes that match the traffic classification policy and are discarded')
hwCBQoSPolicyResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 19), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSPolicyResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyResetFlag.setDescription('Reset flag enable(1),disable(2).')
hwCBQoSPolicyMatchedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPacketsRate.setDescription('This object indicates the rate of packets matching the traffic classification policy.')
hwCBQoSPolicyMatchedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedBytesRate.setDescription('This object indicates the rate of bytes matching the traffic classification policy.')
hwCBQoSPolicyMatchedPassPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassPacketsRate.setDescription('Rate of packets that match the traffic classification policy and pass through')
hwCBQoSPolicyMatchedPassBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedPassBytesRate.setDescription('Rate of bytes that match the traffic classification policy and pass through')
hwCBQoSPolicyMatchedDropPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropPacketsRate.setDescription('Rate of packets that match the traffic classification policy and are discarded')
hwCBQoSPolicyMatchedDropBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyMatchedDropBytesRate.setDescription('Rate of bytes that match the traffic classification policy and are discarded')
hwCBQoSClassifierStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3), )
if mibBuilder.loadTexts: hwCBQoSClassifierStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierStatisticsTable.setDescription('A table of classifier statistics applied on the interface. It takes the interface as a unit in the class that are matched or are not matched.')
hwCBQoSClassifierStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid2"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassifierIndex"))
if mibBuilder.loadTexts: hwCBQoSClassifierStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierStatisticsEntry.setDescription('Statistics information of the class.')
hwCBQoSPolicyClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassifierIndex.setDescription('Indicates the index of a traffic class.')
hwCBQoSClassifierMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedPackets.setDescription('Indicates the number of packets that match the class.')
hwCBQoSClassifierMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedBytes.setDescription('Indicates the number of matched bytes.')
hwCBQoSClassifierMatchedPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedPassPackets.setDescription('Indicates the matched and passed traffic in packets.')
hwCBQoSClassifierMatchedPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedPassBytes.setDescription('Indicates the matched and passed traffic in bytes.')
hwCBQoSClassifierMatchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedDropPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedDropPackets.setDescription('Indicates the matched and discarded traffic in packets.')
hwCBQoSClassifierMatchedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedDropBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierMatchedDropBytes.setDescription('Indicates the matched and discarded traffic in bytes.')
hwCBQoSPolicyStatisticsClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4), )
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsClassifierTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsClassifierTable.setDescription('A table of class based policy statistics.')
hwCBQoSPolicyStatisticsClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierName"))
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsClassifierEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsClassifierEntry.setDescription('Class based policy statistics entry.')
hwCBQoSPolicyStatClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierName.setDescription('Name of classifier.')
hwCBQoSPolicyStatClassifierMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPackets.setDescription('Number of matched packets.')
hwCBQoSPolicyStatClassifierMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedBytes.setDescription('Number of matched bytes.')
hwCBQoSPolicyStatClassifierUnmatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierUnmatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierUnmatchedPackets.setDescription('Number of unmatched packets.')
hwCBQoSPolicyStatClassifierUnmatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierUnmatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierUnmatchedBytes.setDescription('Number of unmatched bytes.')
hwCBQoSPolicyStatClassifierMatchedPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassPackets.setDescription('Number of packets that match the traffic classifier and pass through')
hwCBQoSPolicyStatClassifierMatchedPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassBytes.setDescription('Number of bytes that match the traffic classifier and pass through')
hwCBQoSPolicyStatClassifierMatchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropPackets.setDescription('Number of packets that match the traffic classification policy and are discarded')
hwCBQoSPolicyStatClassifierMatchedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropBytes.setDescription('Number of bytes that match the traffic classification policy and are discarded')
hwCBQoSPolicyStatClassifierMatchedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPacketsRate.setDescription('Rate of matched packets.')
hwCBQoSPolicyStatClassifierMatchedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedBytesRate.setDescription('Rate of matched bytes.')
hwCBQoSPolicyStatClassifierMatchedPassPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassPacketsRate.setDescription('Rate of packets that match the traffic classifier and pass through')
hwCBQoSPolicyStatClassifierMatchedPassBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedPassBytesRate.setDescription('Rate of bytes that match the traffic classifier and pass through')
hwCBQoSPolicyStatClassifierMatchedDropPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropPacketsRate.setDescription('Rate of packets that match the traffic classification policy and are discarded')
hwCBQoSPolicyStatClassifierMatchedDropBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatClassifierMatchedDropBytesRate.setDescription('Rate of bytes that match the traffic classification policy and are discarded')
hwCBQoSVlanClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 5), )
if mibBuilder.loadTexts: hwCBQoSVlanClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanClassMatchRunInfoTable.setDescription('A table of Running statistics for class in a QoS policy applied on VLAN.')
hwCBQoSVlanClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 5, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyVlanId"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSVlanClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanClassMatchRunInfoEntry.setDescription('Statistics for class in a QoS policy applied on VLAN entry.')
hwCBQoSVlanClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanClassMatchedPackets.setDescription('Number of packets matched the class in a policy applied on a VLAN.')
hwCBQoSVlanClassPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanClassPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanClassPassedPackets.setDescription('Number of passed packets matched the class in a policy applied on a VLAN.')
hwCBQoSVlanClassDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanClassDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanClassDroppedPackets.setDescription('Number of dropped packets matched the class in a policy applied on a VLAN.')
hwCBQoSVlanCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 6), )
if mibBuilder.loadTexts: hwCBQoSVlanCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanCarRunInfoTable.setDescription('A table of Running statistics for CAR statistics in policy applied on VLAN.')
hwCBQoSVlanCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 6, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyVlanId"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSVlanCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanCarRunInfoEntry.setDescription('CAR statistics entry.')
hwCBQoSVlanCarPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanCarPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanCarPassedPackets.setDescription('Number of passed packets.')
hwCBQoSVlanCarDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSVlanCarDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanCarDiscardedPackets.setDescription('Number of discarded packets.')
hwCBQoSMultiPolicyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7), )
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsTable.setDescription('A table of statistics for policy applied on the interface and VLAN. It sums up all the classes in the policy that are matched or not matched.')
hwCBQoSMultiPolicyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyMultiPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyMultiPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyMultiPolicyVlanId"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSMultiPolicyIndex"))
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsEntry.setDescription('Statistics information of the policy.')
hwCBQoSMultiPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyIndex.setDescription('The value of this object identifies the policy index.')
hwCBQoSMultiPolicyMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedPackets.setDescription('This object indicates the number of packets matching the traffic classification policy.')
hwCBQoSMultiPolicyMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedBytes.setDescription('This object indicates the number of bytes matching the traffic classification policy.')
hwCBQoSMultiPolicyUnmatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyUnmatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyUnmatchedPackets.setDescription('This object indicates the number of packets mismatching the traffic classification policy.')
hwCBQoSMultiPolicyUnmatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyUnmatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyUnmatchedBytes.setDescription('This object indicates the number of bytes mismatching the traffic classification policy.')
hwCBQoSMultiPolicyMatchedPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedPassPackets.setDescription('Number of packets that match the traffic classification policy and pass through')
hwCBQoSMultiPolicyMatchedPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedPassBytes.setDescription('Number of bytes that match the traffic classification policy and pass through')
hwCBQoSMultiPolicyMatchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedDropPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedDropPackets.setDescription('Number of packets that match the traffic classification policy and are discarded')
hwCBQoSMultiPolicyMatchedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedDropBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyMatchedDropBytes.setDescription('Number of bytes that match the traffic classification policy and are discarded')
hwCBQoSMultiPolicyResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 7, 1, 20), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyResetFlag.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyResetFlag.setDescription('Reset flag enable(1),disable(2).')
hwCBQoSMultiPolicyStatisticsClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8), )
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsClassifierTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsClassifierTable.setDescription('A table of class based policy statistics.')
hwCBQoSMultiPolicyStatisticsClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyMultiPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyMultiPolicyVlanId"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyMultiPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSMultiPolicyStaPolicyIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSMultiPolicyStatClassifierIndex"))
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsClassifierEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatisticsClassifierEntry.setDescription('Class based policy statistics entry.')
hwCBQoSMultiPolicyStaPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStaPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStaPolicyIndex.setDescription('The value of this object identifies the policy index.')
hwCBQoSMultiPolicyStatClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierIndex.setDescription('The value of this object identifies the classifier index.')
hwCBQoSMultiPolicyStatClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierName.setDescription('Name of classifier.')
hwCBQoSMultiPolicyStatClassifierMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedPackets.setDescription('Number of matched packets.')
hwCBQoSMultiPolicyStatClassifierMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedBytes.setDescription('Number of matched bytes.')
hwCBQoSMultiPolicyStatClassifierUnmatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierUnmatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierUnmatchedPackets.setDescription('Number of unmatched packets.')
hwCBQoSMultiPolicyStatClassifierUnmatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierUnmatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierUnmatchedBytes.setDescription('Number of unmatched bytes.')
hwCBQoSMultiPolicyStatClassifierMatchedPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedPassPackets.setDescription('Number of packets that match the traffic classifier and pass through')
hwCBQoSMultiPolicyStatClassifierMatchedPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedPassBytes.setDescription('Number of bytes that match the traffic classifier and pass through')
hwCBQoSMultiPolicyStatClassifierMatchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedDropPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedDropPackets.setDescription('Number of packets that match the traffic classifier and discard')
hwCBQoSMultiPolicyStatClassifierMatchedDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedDropBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMultiPolicyStatClassifierMatchedDropBytes.setDescription('Number of bytes that match the traffic classifier and discard')
hwCBQoSPolicyStatSubPolicyClassifierRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9), )
if mibBuilder.loadTexts: hwCBQoSPolicyStatSubPolicyClassifierRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatSubPolicyClassifierRunInfoTable.setDescription('A table of class based subpolicy statistics.')
hwCBQoSPolicyStatSubPolicyClassifierRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyStatSubPolicyClassifierRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatSubPolicyClassifierRunInfoEntry.setDescription('Class based subpolicy statistics entry.')
hwCBQoSSubPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyClassIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyClassIndex.setDescription('PolicyClassIndex of subpolicy.')
hwCBQoSSubPolicyStatClassifierMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPackets.setDescription('Number of matched packets.')
hwCBQoSSubPolicyStatClassifierMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedBytes.setDescription('Number of matched bytes.')
hwCBQoSSubPolicyStatClassifierPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierPassPackets.setDescription('Number of passed packets.')
hwCBQoSSubPolicyStatClassifierPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierPassBytes.setDescription('Number of passed bytes.')
hwCBQoSSubPolicyStatClassifierDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierDropPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierDropPackets.setDescription('Number of dropped packets.')
hwCBQoSSubPolicyStatClassifierDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierDropBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierDropBytes.setDescription('Number of dropped bytes.')
hwCBQoSSubPolicyStatClassifierQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedPackets.setDescription('Number of queue matched packets.')
hwCBQoSSubPolicyStatClassifierQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedBytes.setDescription('Number of queue matched bytes.')
hwCBQoSSubPolicyStatClassifierQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedPackets.setDescription('Number of queue passed packets.')
hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytes.setDescription('Number of queue passed bytes.')
hwCBQoSSubPolicyStatClassifierQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedPackets.setDescription('Number of queue dropped packets.')
hwCBQoSSubPolicyStatClassifierQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedBytes.setDescription('Number of queue dropped bytes.')
hwCBQoSSubPolicyStatClassifierCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenPackets.setDescription('Number of green packets.')
hwCBQoSSubPolicyStatClassifierCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenBytes.setDescription('Number of green bytes.')
hwCBQoSSubPolicyStatClassifierCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowPackets.setDescription('Number of yellow packets.')
hwCBQoSSubPolicyStatClassifierCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowBytes.setDescription('Number of yellow bytes.')
hwCBQoSSubPolicyStatClassifierCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedPackets.setDescription('Number of red packets.')
hwCBQoSSubPolicyStatClassifierCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedBytes.setDescription('Number of red bytes.')
hwCBQoSSubPolicyStatClassifierMatchedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPacketsRate.setDescription('Rate of matched packets.')
hwCBQoSSubPolicyStatClassifierMatchedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedBytesRate.setDescription('Rate of matched bytes.')
hwCBQoSSubPolicyStatClassifierMatchedPassPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPassPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPassPacketsRate.setDescription('Rate of passed packets.')
hwCBQoSSubPolicyStatClassifierMatchedPassBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPassBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedPassBytesRate.setDescription('Rate of passed bytes.')
hwCBQoSSubPolicyStatClassifierMatchedDropPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedDropPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedDropPacketsRate.setDescription('Rate of dropped packets.')
hwCBQoSSubPolicyStatClassifierMatchedDropBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedDropBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierMatchedDropBytesRate.setDescription('Rate of dropped bytes.')
hwCBQoSSubPolicyStatClassifierQueueMatchedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedPacketsRate.setDescription('Rate of queue matched packets.')
hwCBQoSSubPolicyStatClassifierQueueMatchedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueMatchedBytesRate.setDescription('Rate of queue matched bytes.')
hwCBQoSSubPolicyStatClassifierQueueEnqueuedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedPacketsRate.setDescription('Rate of queue passed packets.')
hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytesRate.setDescription('Rate of queue passed bytes.')
hwCBQoSSubPolicyStatClassifierQueueDiscardedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedPacketsRate.setDescription('Rate of queue dropped packets.')
hwCBQoSSubPolicyStatClassifierQueueDiscardedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierQueueDiscardedBytesRate.setDescription('Rate of queue dropped bytes.')
hwCBQoSSubPolicyStatClassifierCarGreenPassedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenPassedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenPassedPacketsRate.setDescription('Rate of green packets.')
hwCBQoSSubPolicyStatClassifierCarGreenPassedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenPassedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarGreenPassedBytesRate.setDescription('Rate of green bytes.')
hwCBQoSSubPolicyStatClassifierCarYellowPassedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowPassedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowPassedPacketsRate.setDescription('Rate of yellow packets.')
hwCBQoSSubPolicyStatClassifierCarYellowPassedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowPassedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarYellowPassedBytesRate.setDescription('Rate of yellow bytes.')
hwCBQoSSubPolicyStatClassifierCarRedPassedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedPassedPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedPassedPacketsRate.setDescription('Rate of red bytes.')
hwCBQoSSubPolicyStatClassifierCarRedPassedBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 5, 6, 9, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedPassedBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSubPolicyStatClassifierCarRedPassedBytesRate.setDescription('Rate of red bytes.')
hwCBQoSGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6))
hwCBQoSFrameId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrameId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrameId.setDescription('The ID of the frame.')
hwCBQoSSlotId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSSlotId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSlotId.setDescription('The ID of the slot that the interface is located')
hwCBQoSPortId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPortId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPortId.setDescription('The ID of the port')
hwCBQoSTrapIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSTrapIfName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSTrapIfName.setDescription('Interface Name.')
hwCBQoSTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cir", 1), ("pir", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSTrapType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSTrapType.setDescription('The type of the CAR alarm.')
hwCBQoSTrapAction = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remark", 1), ("drop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSTrapAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSTrapAction.setDescription('The action that will be taken when trap is happened.')
hwCBQoSTrapPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSTrapPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSTrapPolicyName.setDescription('Policy Name.')
hwCBQoSTrapVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSTrapVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSTrapVlanId.setDescription('The vlan that the policy applied.')
hwCBQoSTrapEgressIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSTrapEgressIfName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSTrapEgressIfName.setDescription('The name of Egress Interface.')
hwCBQoSTrapDiscardPackets = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSTrapDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSTrapDiscardPackets.setDescription('The number of discarded packets.')
hwCBQoSQueryObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 7))
hwCBQoSClassifierIndexQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 7, 1), )
if mibBuilder.loadTexts: hwCBQoSClassifierIndexQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierIndexQueryTable.setDescription('A table of QoS ClassifierIndexQuery.')
hwCBQoSClassifierIndexQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 7, 1, 1), ).setIndexNames((0, "HUAWEI-CBQOS-MIB", "hwCBQoSQueryPolicyName"), (0, "HUAWEI-CBQOS-MIB", "hwCBQoSQueryClassifierName"))
if mibBuilder.loadTexts: hwCBQoSClassifierIndexQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierIndexQueryEntry.setDescription('QoS Classifier Query Entry.')
hwCBQoSQueryPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 7, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSQueryPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueryPolicyName.setDescription('The name of QoS policy')
hwCBQoSQueryClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSQueryClassifierName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueryClassifierName.setDescription('The name of qos classfier')
hwCBQoSQueryClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueryClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueryClassifierIndex.setDescription('This value of qos classifier index.')
hwCBQoSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 2))
hwCBQoSGtsDiscardThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 2, 1)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrameId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSlotId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPortId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapIfName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapVlanId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapEgressIfName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapDiscardPackets"))
if mibBuilder.loadTexts: hwCBQoSGtsDiscardThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsDiscardThresholdTrap.setDescription('The SNMP trap is generated when the number of packages that Gts discard is larger than the configured threshold.')
hwCBQoSCarOverSpeedThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 2, 2)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrameId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSlotId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPortId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapIfName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapVlanId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapAction"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapDiscardPackets"))
if mibBuilder.loadTexts: hwCBQoSCarOverSpeedThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarOverSpeedThresholdTrap.setDescription('The SNMP trap is generated when the speed of cir or pir exceeds the configured threshold.')
hwCBQoSRuleNotSupportAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 2, 3)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSRuleDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRuleSlotID"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRuleInfo"))
if mibBuilder.loadTexts: hwCBQoSRuleNotSupportAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRuleNotSupportAlarm.setDescription('The SNMP trap is generated when the rule is not supported.')
hwCBQoSActionNotSupportAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 2, 4)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSActionDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSActionSlotID"), ("HUAWEI-CBQOS-MIB", "hwCBQoSActionInfo"))
if mibBuilder.loadTexts: hwCBQoSActionNotSupportAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSActionNotSupportAlarm.setDescription('The SNMP trap is generated when the action is not supported.')
hwCBQoSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3))
hwCBQoSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 1))
hwCBQoSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 1, 1)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSGtsGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRemarkGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSWredGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSNatGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFirewallGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSamplingGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfClassMatchRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfRemarkRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfQueueRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfWredRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcClassMatchRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCarRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcRemarkRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcQueueRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcWredRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcClassMatchRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCarRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcRemarkRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcQueueRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcWredRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanClassMatchRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSLrGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSNestPolicyGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfLrRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcLrRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcLrRunInfoGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarStatisticsGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatisticsGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRuleNotSupportAlarmGroup"), ("HUAWEI-CBQOS-MIB", "hwCBQoSActionNotSupportAlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSCompliance = hwCBQoSCompliance.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCompliance.setDescription('The compliance statement for entities that implement class-based QoS on a router.')
hwCBQoSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2))
hwCBQoSClassifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 1)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndexNext"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierRuleCount"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierOperator"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierLayer"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleIfNot"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleStringValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchMacMask"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleIntValue1"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleIntValue2"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchVlanEndId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchInnerSrcIp"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchInnerSrcIpMask"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchInnerDstIp"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchInnerDstIpMask"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchInnerSrcPort"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchInnerDstPort"), ("HUAWEI-CBQOS-MIB", "hwCBQoSMatchInnerProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSClassifierGroup = hwCBQoSClassifierGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierGroup.setDescription('Required objects to provide CB QoS objects configuration information. hwCBQoSClassifierLayer is optional.')
hwCBQoSBehaviorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 2)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndexNext"), ("HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSBehaviorGroup = hwCBQoSBehaviorGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorGroup.setDescription('Required objects to provide CB QoS objects configuration information. One of hwCBQoSCarGroup, hwCBQoSGtsGroup, hwCBQoSRemarkGroup, hwCBQoSQueueGroup, hwCBQoSWredGroup, hwCBQoSNatGroup, hwCBQoSFirewallGroup, hwCBQoSSamplingGroup should be required.')
hwCBQoSCarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 3)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSCarCir"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarCbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarEbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarGreenAction"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarGreenRemarkValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarRedAction"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarRedRemarkValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarPir"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarPbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarYellowAction"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarYellowRemarkValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQosCarAggregation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSCarGroup = hwCBQoSCarGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarGroup.setDescription('This is a optional group of information.')
hwCBQoSGtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 4)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSGtsCir"), ("HUAWEI-CBQOS-MIB", "hwCBQoSGtsCbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSGtsPir"), ("HUAWEI-CBQOS-MIB", "hwCBQoSGtsEbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSGtsQueueLength"), ("HUAWEI-CBQOS-MIB", "hwCBQoSGtsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSGtsGroup = hwCBQoSGtsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsGroup.setDescription('This is a optional group of information.')
hwCBQoSRemarkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 5)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSRemarkType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRemarkValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRemarkRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRemarkStringValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSRemarkGroup = hwCBQoSRemarkGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkGroup.setDescription('This is a optional group of information.')
hwCBQoSQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 6)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSQueueType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueDropType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueLength"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueBandwidthUnit"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueBandwidthValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueCbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueQueueNumber"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSQueueCbsRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSQueueGroup = hwCBQoSQueueGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueGroup.setDescription('This is a optional group of information.')
hwCBQoSWredGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 7)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSWredType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSWredWeightConst"), ("HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSWredClassLowLimit"), ("HUAWEI-CBQOS-MIB", "hwCBQoSWredClassHighLimit"), ("HUAWEI-CBQOS-MIB", "hwCBQoSWredClassDiscardProb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSWredGroup = hwCBQoSWredGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredGroup.setDescription('This is a optional group of information.')
hwCBQoSNatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 9)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSNatServiceClass"), ("HUAWEI-CBQOS-MIB", "hwCBQoSNatRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSNatNoPat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSNatGroup = hwCBQoSNatGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatGroup.setDescription('This is a optional group of information.')
hwCBQoSFirewallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 10)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFirewallAction"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFirewallRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFirewallGroup = hwCBQoSFirewallGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallGroup.setDescription('This is a optional group of information.')
hwCBQoSSamplingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 11)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSSamplingNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSamplingRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfSamplingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSSamplingGroup = hwCBQoSSamplingGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingGroup.setDescription('This is a optional group of information.')
hwCBQoSEgressGtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 12)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSEgressGtsCir"), ("HUAWEI-CBQOS-MIB", "hwCBQoSEgressGtsPir"), ("HUAWEI-CBQOS-MIB", "hwCBQoSEgressGtsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSEgressGtsGroup = hwCBQoSEgressGtsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSEgressGtsGroup.setDescription('This is a optional group of information.')
hwCBQoSServiceClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 13)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSServiceClassQueueId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSServiceClassColor"), ("HUAWEI-CBQOS-MIB", "hwCBQoSServiceClassRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSServiceClassNoremarkflag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSServiceClassGroup = hwCBQoSServiceClassGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSServiceClassGroup.setDescription('This is a optional group of information.')
hwCBQoSPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 14)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndexNext"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassCount"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassClassifierIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassClassifierName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassBehaviorIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassBehaviorName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyConfigMode"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassPrecedence"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyShareFlag"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatisticsFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSPolicyGroup = hwCBQoSPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyGroup.setDescription('Required objects to provide CB QoS objects configuration information. hwCBQoSPolicyConfigMode, hwCBQoSPolicyClassPrecedence is optional.')
hwCBQoSIfApplyPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 15)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyLinkLayer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfApplyPolicyGroup = hwCBQoSIfApplyPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
hwCBQoSAtmPvcApplyPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 16)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcApplyPolicyGroup = hwCBQoSAtmPvcApplyPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyGroup.setDescription('This is a optional group of information.')
hwCBQoSIfVlanApplyPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 17)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyIfIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid1"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid2"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyLinkLayer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfVlanApplyPolicyGroup = hwCBQoSIfVlanApplyPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyGroup.setDescription('This is a optional group of information')
hwCBQoSFrClassApplyPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 18)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyFrClassName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrClassApplyPolicyGroup = hwCBQoSFrClassApplyPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcApplyPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 19)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcApplyPolicyGroup = hwCBQoSFrPvcApplyPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyGroup.setDescription('This is a optional group of information.')
hwCBQoSIfCbqRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 20)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqDiscard"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqEfQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqAfQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqBeQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqBeActiveQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqBeMaxActiveQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqBeTotalQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCbqAfAllocatedQueueNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfCbqRunInfoGroup = hwCBQoSIfCbqRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSIfClassMatchRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 21)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfClassMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfClassMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfClassAverageRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfClassMatchRunInfoGroup = hwCBQoSIfClassMatchRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
hwCBQoSIfCarRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 22)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarGreenPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarGreenPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarGreenRemarkedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarGreenRemarkedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarGreenDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarGreenDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarYellowPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarYellowPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarYellowRemarkedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarYellowRemarkedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarYellowDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarYellowDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarRedPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarRedPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarRedRemarkedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarRedRemarkedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarRedDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfCarRedDiscardedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfCarRunInfoGroup = hwCBQoSIfCarRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSIfGtsRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 23)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsDelayedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsDelayedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfGtsQueueSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfGtsRunInfoGroup = hwCBQoSIfGtsRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSIfRemarkRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 24)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfRemarkedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfRemarkRunInfoGroup = hwCBQoSIfRemarkRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSIfQueueRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 25)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfQueueMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfQueueMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfQueueEnqueuedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfQueueEnqueuedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfQueueDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfQueueDiscardedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfQueueRunInfoGroup = hwCBQoSIfQueueRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSIfWredRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 26)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfWredRandomDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfWredTailDiscardedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfWredRunInfoGroup = hwCBQoSIfWredRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcCbqRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 27)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqDiscard"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqEfQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqAfQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqBeQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqBeActiveQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqBeMaxActiveQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqBeTotalQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCbqAfAllocatedQueueNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcCbqRunInfoGroup = hwCBQoSAtmPvcCbqRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcClassMatchRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 28)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcClassMatchPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcClassMatchBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcClassAverageRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcClassMatchRunInfoGroup = hwCBQoSAtmPvcClassMatchRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcCarRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 29)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCarConformPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCarConformBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCarExceedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcCarExceedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcCarRunInfoGroup = hwCBQoSAtmPvcCarRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcGtsRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 30)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsDelayedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsDelayedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcGtsQueueSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcGtsRunInfoGroup = hwCBQoSAtmPvcGtsRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcRemarkRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 31)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcRemarkedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcRemarkRunInfoGroup = hwCBQoSAtmPvcRemarkRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcQueueRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 32)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcQueueMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcQueueMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcQueueEnqueuedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcQueueEnqueuedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcQueueDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcQueueDiscardedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcQueueRunInfoGroup = hwCBQoSAtmPvcQueueRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcWredRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 33)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcWredRandomDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcWredTailDiscardedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcWredRunInfoGroup = hwCBQoSAtmPvcWredRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoGroup.setDescription('RThis is a optional group of information.')
hwCBQoSFrPvcCbqRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 34)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqDiscard"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqEfQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqAfQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqBeQueueSize"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqBeActiveQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqBeMaxActiveQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqBeTotalQueueNum"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCbqAfAllocatedQueueNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcCbqRunInfoGroup = hwCBQoSFrPvcCbqRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcClassMatchRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 35)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcClassMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcClassMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcClassAverageRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcClassMatchRunInfoGroup = hwCBQoSFrPvcClassMatchRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcCarRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 36)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCarConformPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCarConformBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCarExceedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcCarExceedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcCarRunInfoGroup = hwCBQoSFrPvcCarRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcGtsRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 37)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsDelayedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsDelayedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcGtsQueueSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcGtsRunInfoGroup = hwCBQoSFrPvcGtsRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcRemarkRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 38)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcRemarkedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcRemarkRunInfoGroup = hwCBQoSFrPvcRemarkRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcQueueRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 39)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcQueueMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcQueueMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcQueueEnqueuedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcQueueEnqueuedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcQueueDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcQueueDiscardedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcQueueRunInfoGroup = hwCBQoSFrPvcQueueRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcWredRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 40)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcWredRandomDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcWredTailDiscardedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcWredRunInfoGroup = hwCBQoSFrPvcWredRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSIfVlanClassMatchRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 41)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanClassMatchedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfVlanClassMatchRunInfoGroup = hwCBQoSIfVlanClassMatchRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSLrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 42)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSLrUnit"), ("HUAWEI-CBQOS-MIB", "hwCBQoSLrCir"), ("HUAWEI-CBQOS-MIB", "hwCBQoSLrCbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSLrEbs"), ("HUAWEI-CBQOS-MIB", "hwCBQoSLrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSLrGroup = hwCBQoSLrGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrGroup.setDescription('This is a optional group of information.')
hwCBQoSNestPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 43)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSNestPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSNestPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSNestPolicyGroup = hwCBQoSNestPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyGroup.setDescription('This is a optional group of information.')
hwCBQoSIfLrRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 44)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSIfLrPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfLrPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfLrDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfLrDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfLrDelayedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSIfLrDelayedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSIfLrRunInfoGroup = hwCBQoSIfLrRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSAtmPvcLrRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 45)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcLrPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcLrPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcLrDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcLrDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcLrDelayedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcLrDelayedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSAtmPvcLrRunInfoGroup = hwCBQoSAtmPvcLrRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSFrPvcLrRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 46)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcLrPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcLrPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcLrDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcLrDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcLrDelayedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcLrDelayedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSFrPvcLrRunInfoGroup = hwCBQoSFrPvcLrRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoGroup.setDescription('This is a optional group of information.')
hwCBQoSCarStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 47)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSCarConformedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarConformedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarConformedPacketRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarConformedByteRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarExceededPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarExceededBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarExceededPacketRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarExceededByteRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarOverflowPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarOverflowBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarOverflowPacketRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarOverflowByteRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarPassedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarDroppedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarDroppedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSCarStatisticsGroup = hwCBQoSCarStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarStatisticsGroup.setDescription('This is a optional group of information.')
hwCBQoSPolicyStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 48)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyUnmatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyUnmatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyMatchedPassPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyMatchedPassBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyMatchedDropPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyMatchedDropBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyResetFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSPolicyStatisticsGroup = hwCBQoSPolicyStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsGroup.setDescription('This is a optional group of information.')
hwCBQoSRedirectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 49)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectIpAddress"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectIfIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectVlanId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectCtrlType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectLSPDstIpAddress"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRedirectLSPSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSRedirectGroup = hwCBQoSRedirectGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRedirectGroup.setDescription('This is a optional group of information.')
hwCBQoSGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 50)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSFrameId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSlotId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPortId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapIfName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapType"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapAction"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapVlanId"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapEgressIfName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSTrapDiscardPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSGeneralGroup = hwCBQoSGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGeneralGroup.setDescription('This is a optional group of information.')
hwCBQoSNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 51)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSGtsDiscardThresholdTrap"), ("HUAWEI-CBQOS-MIB", "hwCBQoSCarOverSpeedThresholdTrap"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRuleNotSupportAlarm"), ("HUAWEI-CBQOS-MIB", "hwCBQoSActionNotSupportAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSNotificationsGroup = hwCBQoSNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNotificationsGroup.setDescription('This is a optional group of information.')
hwCBQoSPolicyShareModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 52)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyShareModeFlag"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyShareModeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSPolicyShareModeGroup = hwCBQoSPolicyShareModeGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyShareModeGroup.setDescription('This is a optional group of information.')
hwCBQoSClassifierStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 53)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassifierIndex"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierMatchedPassPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierMatchedPassBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierMatchedDropPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSClassifierMatchedDropBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSClassifierStatisticsGroup = hwCBQoSClassifierStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierStatisticsGroup.setDescription('This is a optional group of information.')
hwCBQoSPolicyStatisticsClassifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 54)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierUnmatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierUnmatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierMatchedPassPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierMatchedPassBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierMatchedDropPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSPolicyStatClassifierMatchedDropBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSPolicyStatisticsClassifierGroup = hwCBQoSPolicyStatisticsClassifierGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatisticsClassifierGroup.setDescription('This is a optional group of information.')
hwCBQoSVlanApplyPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 55)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyName"), ("HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyRowStatus"), ("HUAWEI-CBQOS-MIB", "hwCBQoSVlanApplyPolicyVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSVlanApplyPolicyGroup = hwCBQoSVlanApplyPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSVlanApplyPolicyGroup.setDescription('This is a optional group of information.')
hwCBQoSSVlanClassMatchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 56)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSVlanClassMatchedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSSVlanClassMatchGroup = hwCBQoSSVlanClassMatchGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSVlanClassMatchGroup.setDescription('This is a optional group of information.')
hwCBQoSSVlanCarMatchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 57)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSVlanCarPassedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSVlanCarDiscardedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSSVlanCarMatchGroup = hwCBQoSSVlanCarMatchGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSVlanCarMatchGroup.setDescription('This is a optional group of information.')
hwCBQoSRandomDiscardCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 58)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSRandomPercent"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRandomDiscardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSRandomDiscardCfgInfoGroup = hwCBQoSRandomDiscardCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRandomDiscardCfgInfoGroup.setDescription('Description.')
hwCBQoSDenyPacketLengthCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 59)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSDenyPacketLengthOptype"), ("HUAWEI-CBQOS-MIB", "hwCBQoSDenyPacketLengthMax"), ("HUAWEI-CBQOS-MIB", "hwCBQoSDenyPacketLengthMin"), ("HUAWEI-CBQOS-MIB", "hwCBQoSDenyPacketLength"), ("HUAWEI-CBQOS-MIB", "hwCBQoSDenyPacketLengthRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSDenyPacketLengthCfgInfoGroup = hwCBQoSDenyPacketLengthCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDenyPacketLengthCfgInfoGroup.setDescription('Description.')
hwCBQoSDAAStatisticsCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 60)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSDAAStatisticsSummary"), ("HUAWEI-CBQOS-MIB", "hwCBQoSDAAStatisticsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSDAAStatisticsCfgInfoGroup = hwCBQoSDAAStatisticsCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAAStatisticsCfgInfoGroup.setDescription('Description.')
hwCBQoSDAATariffLevelCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 61)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSDAATariffLevelValue"), ("HUAWEI-CBQOS-MIB", "hwCBQoSDAATariffLevelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSDAATariffLevelCfgInfoGroup = hwCBQoSDAATariffLevelCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSDAATariffLevelCfgInfoGroup.setDescription('Description.')
hwCBQoSRuleNotSupportAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 62)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSRuleDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRuleSlotID"), ("HUAWEI-CBQOS-MIB", "hwCBQoSRuleInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSRuleNotSupportAlarmGroup = hwCBQoSRuleNotSupportAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRuleNotSupportAlarmGroup.setDescription('Description.')
hwCBQoSActionNotSupportAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 63)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSActionDirection"), ("HUAWEI-CBQOS-MIB", "hwCBQoSActionSlotID"), ("HUAWEI-CBQOS-MIB", "hwCBQoSActionInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSActionNotSupportAlarmGroup = hwCBQoSActionNotSupportAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSActionNotSupportAlarmGroup.setDescription('Description.')
hwCBQoSPolicyStatSubPolicyClassifierRunInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 1, 3, 2, 64)).setObjects(("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierPassPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierPassBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierDropPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierDropBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueMatchedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueMatchedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueEnqueuedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueDiscardedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueDiscardedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarGreenPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarGreenBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarYellowPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarYellowBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarRedPackets"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarRedBytes"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedPassPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedPassBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedDropPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierMatchedDropBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueMatchedPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueMatchedBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueEnqueuedPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueDiscardedPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierQueueDiscardedBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarGreenPassedPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarGreenPassedBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarYellowPassedPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarYellowPassedBytesRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarRedPassedPacketsRate"), ("HUAWEI-CBQOS-MIB", "hwCBQoSSubPolicyStatClassifierCarRedPassedBytesRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCBQoSPolicyStatSubPolicyClassifierRunInfoGroup = hwCBQoSPolicyStatSubPolicyClassifierRunInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyStatSubPolicyClassifierRunInfoGroup.setDescription('This is a optional group of information.')
mibBuilder.exportSymbols("HUAWEI-CBQOS-MIB", hwCBQoSServiceClassRowStatus=hwCBQoSServiceClassRowStatus, hwCBQoSAtmPvcApplyPolicyIfIndex=hwCBQoSAtmPvcApplyPolicyIfIndex, hwCBQoSMatchInnerSrcPort=hwCBQoSMatchInnerSrcPort, hwCBQoSFrPvcCarConformPackets=hwCBQoSFrPvcCarConformPackets, hwCBQoSActionInfo=hwCBQoSActionInfo, hwCBQoSRedirectIfIndex=hwCBQoSRedirectIfIndex, hwCBQoSFrClassApplyPolicyEntry=hwCBQoSFrClassApplyPolicyEntry, hwCBQoSLoadBalanceCfgInfoTable=hwCBQoSLoadBalanceCfgInfoTable, hwCBQoSIfVlanApplyPolicyEntry=hwCBQoSIfVlanApplyPolicyEntry, hwCBQoSAtmPvcCarExceedBytesRate=hwCBQoSAtmPvcCarExceedBytesRate, hwCBQoSVlanApplyPolicyDirection=hwCBQoSVlanApplyPolicyDirection, hwCBQoSIfCarGreenDiscardedBytesRate=hwCBQoSIfCarGreenDiscardedBytesRate, hwCBQoSCarRowStatus=hwCBQoSCarRowStatus, hwCBQoSIfQueueEnqueuedPackets=hwCBQoSIfQueueEnqueuedPackets, hwCBQoSAtmPvcCarExceedPackets=hwCBQoSAtmPvcCarExceedPackets, hwCBQoSIfQueueEnqueuedPacketsRate=hwCBQoSIfQueueEnqueuedPacketsRate, CosType=CosType, hwCBQoSCarCfgInfoTable=hwCBQoSCarCfgInfoTable, hwCBQoSClassifierMatchedPassPackets=hwCBQoSClassifierMatchedPassPackets, hwCBQoSIfCarRedDiscardedPacketsRate=hwCBQoSIfCarRedDiscardedPacketsRate, hwCBQoSRedirectLSPSecondary=hwCBQoSRedirectLSPSecondary, hwCBQoSVsiApplyPolicyTable=hwCBQoSVsiApplyPolicyTable, hwCBQoSTrapIfName=hwCBQoSTrapIfName, hwCBQoSFrPvcCarRunInfoTable=hwCBQoSFrPvcCarRunInfoTable, hwCBQoSIfApplyMultiPolicyTable=hwCBQoSIfApplyMultiPolicyTable, hwCBQoSPolicyStatClassifierMatchedPassPackets=hwCBQoSPolicyStatClassifierMatchedPassPackets, hwCBQoSSubPolicyStatClassifierMatchedBytesRate=hwCBQoSSubPolicyStatClassifierMatchedBytesRate, hwCBQoSVlanApplyMultiPolicyName=hwCBQoSVlanApplyMultiPolicyName, hwCBQosIfClassDroppedPackets=hwCBQosIfClassDroppedPackets, hwCBQoSFrClassApplyPolicyRowStatus=hwCBQoSFrClassApplyPolicyRowStatus, hwCBQoSMultiPolicyStatClassifierMatchedDropPackets=hwCBQoSMultiPolicyStatClassifierMatchedDropPackets, hwQoS=hwQoS, hwCBQoSRuleSlotID=hwCBQoSRuleSlotID, hwCBQoSPolicyStatSubPolicyClassifierRunInfoTable=hwCBQoSPolicyStatSubPolicyClassifierRunInfoTable, hwCBQoSDenyPacketLengthMin=hwCBQoSDenyPacketLengthMin, hwCBQoSSuppressionCir=hwCBQoSSuppressionCir, hwCBQoSIfLrDiscardedPackets=hwCBQoSIfLrDiscardedPackets, hwCBQoSSubPolicyStatClassifierPassBytes=hwCBQoSSubPolicyStatClassifierPassBytes, hwCBQoSSVlanCarMatchGroup=hwCBQoSSVlanCarMatchGroup, hwCBQoSIfCarRedRemarkedPacketsRate=hwCBQoSIfCarRedRemarkedPacketsRate, hwCBQoSFrPvcRemarkRunInfoGroup=hwCBQoSFrPvcRemarkRunInfoGroup, hwCBQoSTrapEgressIfName=hwCBQoSTrapEgressIfName, hwCBQoSIfUrpfRunInfoEntry=hwCBQoSIfUrpfRunInfoEntry, hwCBQoSAtmPvcCarRunInfoGroup=hwCBQoSAtmPvcCarRunInfoGroup, hwCBQoSClassifierCfgInfoTable=hwCBQoSClassifierCfgInfoTable, hwCBQoSPolicyStatClassifierName=hwCBQoSPolicyStatClassifierName, hwCBQoSAtmPvcLrDiscardedBytes=hwCBQoSAtmPvcLrDiscardedBytes, UrpfCtrlType=UrpfCtrlType, hwCBQoSCarDroppedBytes=hwCBQoSCarDroppedBytes, hwCBQoSFrPvcCarExceedPacketsRate=hwCBQoSFrPvcCarExceedPacketsRate, hwCBQoSFrPvcGtsRunInfoEntry=hwCBQoSFrPvcGtsRunInfoEntry, hwCBQoSFrameId=hwCBQoSFrameId, hwCBQoSServiceClassQueueId=hwCBQoSServiceClassQueueId, hwCBQoSEgressGtsIfIndex=hwCBQoSEgressGtsIfIndex, hwCBQoSIfCbqQueueSize=hwCBQoSIfCbqQueueSize, hwCBQoSFrClassApplyPolicyDirection=hwCBQoSFrClassApplyPolicyDirection, hwCBQoSPolicyMatchedPacketsRate=hwCBQoSPolicyMatchedPacketsRate, hwCBQoSFrPvcClassMatchRunInfoEntry=hwCBQoSFrPvcClassMatchRunInfoEntry, hwCBQoSIfRedirectRunInfoTable=hwCBQoSIfRedirectRunInfoTable, hwCBQoSMultiPolicyUnmatchedBytes=hwCBQoSMultiPolicyUnmatchedBytes, hwCBQoSPolicyIndexNext=hwCBQoSPolicyIndexNext, hwCBQoSAtmPvcLrDelayedPackets=hwCBQoSAtmPvcLrDelayedPackets, hwCBQoSPolicyClassifierIndex=hwCBQoSPolicyClassifierIndex, hwCBQoSSubPolicyStatClassifierQueueMatchedBytesRate=hwCBQoSSubPolicyStatClassifierQueueMatchedBytesRate, hwCBQoSRedirectLSPDstIpAddress=hwCBQoSRedirectLSPDstIpAddress, hwCBQoSSubPolicyStatClassifierQueueEnqueuedPacketsRate=hwCBQoSSubPolicyStatClassifierQueueEnqueuedPacketsRate, hwCBQoSSuppressionRedRemarkValue=hwCBQoSSuppressionRedRemarkValue, hwCBQoSIfVlanClassMatchRunInfoEntry=hwCBQoSIfVlanClassMatchRunInfoEntry, hwCBQoSIfQueueRunInfoTable=hwCBQoSIfQueueRunInfoTable, hwCBQoSApplyPolicyObjects=hwCBQoSApplyPolicyObjects, hwCBQoSAtmPvcQueueRunInfoGroup=hwCBQoSAtmPvcQueueRunInfoGroup, hwCBQoSIfCbqRunInfoTable=hwCBQoSIfCbqRunInfoTable, hwCBQoSPolicyStatClassifierMatchedDropBytes=hwCBQoSPolicyStatClassifierMatchedDropBytes, hwCBQoSClassifierMatchedBytes=hwCBQoSClassifierMatchedBytes, hwCBQoSMultiPolicyStatClassifierMatchedPassBytes=hwCBQoSMultiPolicyStatClassifierMatchedPassBytes, hwCBQoSFrPvcCbqAfQueueSize=hwCBQoSFrPvcCbqAfQueueSize, hwCBQoSFrPvcGtsDelayedBytes=hwCBQoSFrPvcGtsDelayedBytes, hwCBQoSAtmPvcApplyPolicyDirection=hwCBQoSAtmPvcApplyPolicyDirection, hwCBQoSIfQueueEnqueuedBytes=hwCBQoSIfQueueEnqueuedBytes, hwCBQoSClassifierIndexQueryEntry=hwCBQoSClassifierIndexQueryEntry, hwCBQoSIfMirrorRunInfoTable=hwCBQoSIfMirrorRunInfoTable, hwCBQoSEgressGtsGroup=hwCBQoSEgressGtsGroup, hwCBQoSVlanApplyPolicyTable=hwCBQoSVlanApplyPolicyTable, hwCBQoSWredClassHighLimit=hwCBQoSWredClassHighLimit, hwCBQoSFrPvcGtsRunInfoTable=hwCBQoSFrPvcGtsRunInfoTable, hwCBQoSSubPolicyStatClassifierMatchedBytes=hwCBQoSSubPolicyStatClassifierMatchedBytes, hwCBQoSQueueCfgInfoTable=hwCBQoSQueueCfgInfoTable, hwCBQoSVsiClassMatchedBytes=hwCBQoSVsiClassMatchedBytes, hwCBQoSIfApplyPolicyIfIndex=hwCBQoSIfApplyPolicyIfIndex, hwCBQoSIfQueueDiscardedPacketsRate=hwCBQoSIfQueueDiscardedPacketsRate, hwCBQoSMultiPolicyStatClassifierMatchedDropBytes=hwCBQoSMultiPolicyStatClassifierMatchedDropBytes, hwCBQoSCarOverflowBytes=hwCBQoSCarOverflowBytes, hwCBQoSAtmPvcWredRunInfoTable=hwCBQoSAtmPvcWredRunInfoTable, hwCBQoSPolicyCfgInfoTable=hwCBQoSPolicyCfgInfoTable, hwCBQoSRemarkGroup=hwCBQoSRemarkGroup, hwCBQoSActionSlotID=hwCBQoSActionSlotID, hwCBQoSAtmPvcStaticsObjects=hwCBQoSAtmPvcStaticsObjects, hwCBQoSActionNotSupportAlarmTable=hwCBQoSActionNotSupportAlarmTable, hwCBQoSIfCbqBeTotalQueueNum=hwCBQoSIfCbqBeTotalQueueNum, hwCBQoSMatchInnerSrcIpMask=hwCBQoSMatchInnerSrcIpMask, hwCBQoSRedirectCfgInfoEntry=hwCBQoSRedirectCfgInfoEntry, hwCBQoSNatCfgInfoEntry=hwCBQoSNatCfgInfoEntry, hwCBQoSMatchInnerDstPort=hwCBQoSMatchInnerDstPort, hwCBQoSWredClassCfgInfoEntry=hwCBQoSWredClassCfgInfoEntry, hwCBQoSIfCarGreenRemarkedPacketsRate=hwCBQoSIfCarGreenRemarkedPacketsRate, hwCBQoSFrPvcCbqBeActiveQueueNum=hwCBQoSFrPvcCbqBeActiveQueueNum, hwCBQoSWredGroup=hwCBQoSWredGroup, hwCBQoSClassifierRuleCount=hwCBQoSClassifierRuleCount, hwCBQoSAtmPvcRemarkRunInfoEntry=hwCBQoSAtmPvcRemarkRunInfoEntry, hwCBQoSLoadBalanceCfgInfoEntry=hwCBQoSLoadBalanceCfgInfoEntry, CarAction=CarAction, hwCBQoSIfApplyMultiPolicyDirection=hwCBQoSIfApplyMultiPolicyDirection, hwCBQoSSubPolicyStatClassifierQueueMatchedBytes=hwCBQoSSubPolicyStatClassifierQueueMatchedBytes, hwCBQoSMatchRuleStringValue=hwCBQoSMatchRuleStringValue, hwCBQoSRemarkValue=hwCBQoSRemarkValue, hwCBQoSAtmPvcQueueEnqueuedBytesRate=hwCBQoSAtmPvcQueueEnqueuedBytesRate, hwCBQoSFrPvcQueueMatchedPacketsRate=hwCBQoSFrPvcQueueMatchedPacketsRate, hwCBQoSRedirectMULIpAddress4=hwCBQoSRedirectMULIpAddress4, hwCBQoSDAATariffLevelCfgInfoEntry=hwCBQoSDAATariffLevelCfgInfoEntry, hwCBQoSSubPolicyStatClassifierQueueMatchedPacketsRate=hwCBQoSSubPolicyStatClassifierQueueMatchedPacketsRate, hwCBQoSAtmPvcCbqBeQueueSize=hwCBQoSAtmPvcCbqBeQueueSize, hwCBQoSIfCarGreenDiscardedBytes=hwCBQoSIfCarGreenDiscardedBytes, hwCBQoSIfQueueRunInfoEntry=hwCBQoSIfQueueRunInfoEntry, hwCBQoSIfSampledBytes=hwCBQoSIfSampledBytes, hwCBQoSIfCarGreenPassedBytes=hwCBQoSIfCarGreenPassedBytes, hwCBQoSFrPvcQueueEnqueuedBytesRate=hwCBQoSFrPvcQueueEnqueuedBytesRate, hwCBQoSIfVlanApplyPolicyVlanid2=hwCBQoSIfVlanApplyPolicyVlanid2, hwCBQoSQueueLength=hwCBQoSQueueLength, hwCBQoSDenyPacketLengthCfgInfoEntry=hwCBQoSDenyPacketLengthCfgInfoEntry, hwCBQoSSubPolicyStatClassifierCarYellowPassedBytesRate=hwCBQoSSubPolicyStatClassifierCarYellowPassedBytesRate, RedirectType=RedirectType, hwCBQoSIfSamplingType=hwCBQoSIfSamplingType, hwCBQoSIfWredRunInfoEntry=hwCBQoSIfWredRunInfoEntry, hwCBQoSAtmPvcQueueDiscardedPacketsRate=hwCBQoSAtmPvcQueueDiscardedPacketsRate, hwCBQoSFrPvcCbqBeQueueSize=hwCBQoSFrPvcCbqBeQueueSize, hwCBQoSRuleNotSupportAlarm=hwCBQoSRuleNotSupportAlarm, hwCBQoSFrPvcApplyPolicyEntry=hwCBQoSFrPvcApplyPolicyEntry, hwCBQoSVsiApplyPolicyEntry=hwCBQoSVsiApplyPolicyEntry, hwCBQoSIfGtsRunInfoTable=hwCBQoSIfGtsRunInfoTable, hwCBQoSVlanApplyMultiPolicyEntry=hwCBQoSVlanApplyMultiPolicyEntry, hwCBQoSDropProfileCfgInfoTable=hwCBQoSDropProfileCfgInfoTable, hwCBQoSAtmPvcQueueMatchedPackets=hwCBQoSAtmPvcQueueMatchedPackets, hwCBQoSFrPvcApplyPolicyGroup=hwCBQoSFrPvcApplyPolicyGroup, hwCBQoSSubPolicyStatClassifierCarRedBytes=hwCBQoSSubPolicyStatClassifierCarRedBytes, hwCBQoSIfApplyPolicyDirection=hwCBQoSIfApplyPolicyDirection, hwCBQoSClassifierObjects=hwCBQoSClassifierObjects, hwCBQoSRedirectMULIfIndex4=hwCBQoSRedirectMULIfIndex4, hwCBQoSPolicyCfgInfoEntry=hwCBQoSPolicyCfgInfoEntry, hwCBQoSVsiClassMatchRunInfoEntry=hwCBQoSVsiClassMatchRunInfoEntry, hwCBQoSVlanApplyMultiPolicyRowStatus=hwCBQoSVlanApplyMultiPolicyRowStatus, hwCBQoSAtmPvcCbqBeMaxActiveQueueNum=hwCBQoSAtmPvcCbqBeMaxActiveQueueNum, hwCBQoSLrRowStatus=hwCBQoSLrRowStatus, hwCBQoSFirewallCfgInfoTable=hwCBQoSFirewallCfgInfoTable, hwCBQoSIfCarGreenPassedPacketsRate=hwCBQoSIfCarGreenPassedPacketsRate, hwCBQoSIfCarYellowRemarkedBytesRate=hwCBQoSIfCarYellowRemarkedBytesRate, hwCBQoSPolicyClassClassifierIndex=hwCBQoSPolicyClassClassifierIndex, hwCBQoSIfCarRedPassedBytes=hwCBQoSIfCarRedPassedBytes, hwCBQoSIfGtsDiscardedBytes=hwCBQoSIfGtsDiscardedBytes, RedirectCtrlType=RedirectCtrlType, hwCBQoSAtmPvcCarRunInfoTable=hwCBQoSAtmPvcCarRunInfoTable, hwCBQoSVsiName=hwCBQoSVsiName, hwCBQoSDropProfileClassCfgInfoTable=hwCBQoSDropProfileClassCfgInfoTable, hwCBQoSIfCbqAfAllocatedQueueNum=hwCBQoSIfCbqAfAllocatedQueueNum, hwCBQoSFrPvcCbqEfQueueSize=hwCBQoSFrPvcCbqEfQueueSize, hwCBQoSMultiPolicyStatClassifierMatchedPassPackets=hwCBQoSMultiPolicyStatClassifierMatchedPassPackets, hwCBQoSFirewallGroup=hwCBQoSFirewallGroup, hwCBQoSNestPolicyName=hwCBQoSNestPolicyName, hwCBQoSMultiPolicyMatchedPackets=hwCBQoSMultiPolicyMatchedPackets, hwCBQoSPolicyStatSubPolicyClassifierRunInfoGroup=hwCBQoSPolicyStatSubPolicyClassifierRunInfoGroup, hwCBQoSPolicyShareModeCfgInfoTable=hwCBQoSPolicyShareModeCfgInfoTable, hwCBQoSSubPolicyStatClassifierCarGreenPassedBytesRate=hwCBQoSSubPolicyStatClassifierCarGreenPassedBytesRate, hwCBQoSIfMirroredPackets=hwCBQoSIfMirroredPackets, hwCBQoSIfCarYellowPassedPackets=hwCBQoSIfCarYellowPassedPackets, hwCBQoSMatchRuleCfgInfoEntry=hwCBQoSMatchRuleCfgInfoEntry, hwCBQoSIfApplyPolicyLinkLayer=hwCBQoSIfApplyPolicyLinkLayer, hwCBQoSWredCfgRowStatus=hwCBQoSWredCfgRowStatus, hwCBQoSLrCfgInfoTable=hwCBQoSLrCfgInfoTable, hwCBQoSIfLrRunInfoGroup=hwCBQoSIfLrRunInfoGroup, hwCBQoSPolicyStatClassifierMatchedPassPacketsRate=hwCBQoSPolicyStatClassifierMatchedPassPacketsRate, hwCBQoSIfCarRunInfoTable=hwCBQoSIfCarRunInfoTable, hwCBQoSGtsCfgInfoEntry=hwCBQoSGtsCfgInfoEntry, hwCBQoSRedirectMULRowStatus=hwCBQoSRedirectMULRowStatus, hwCBQoSIfQueueMatchedBytesRate=hwCBQoSIfQueueMatchedBytesRate, hwCBQoSIfApplyMultiPolicyEntry=hwCBQoSIfApplyMultiPolicyEntry, hwCBQoSFrPvcGtsQueueSize=hwCBQoSFrPvcGtsQueueSize, hwCBQoSIfWredRunInfoGroup=hwCBQoSIfWredRunInfoGroup, hwCBQoSIfCarGreenDiscardedPacketsRate=hwCBQoSIfCarGreenDiscardedPacketsRate, hwCBQoSVlanCarPassedPackets=hwCBQoSVlanCarPassedPackets, hwCBQoSUrpfRowStatus=hwCBQoSUrpfRowStatus, hwCBQoSSubPolicyStatClassifierDropBytes=hwCBQoSSubPolicyStatClassifierDropBytes, hwCBQoSIfVlanApplyPolicyGroup=hwCBQoSIfVlanApplyPolicyGroup, hwCBQoSMatchRuleType=hwCBQoSMatchRuleType, hwCBQoSIfCarYellowRemarkedBytes=hwCBQoSIfCarYellowRemarkedBytes, hwCBQoSPolicyObjects=hwCBQoSPolicyObjects, hwCBQoSGtsCir=hwCBQoSGtsCir, hwCBQoSFrPvcCbqRunInfoEntry=hwCBQoSFrPvcCbqRunInfoEntry, hwCBQoSClassifierStatisticsGroup=hwCBQoSClassifierStatisticsGroup, hwCBQoSHighDropPrecedence=hwCBQoSHighDropPrecedence, hwCBQoSRandomDiscardCfgInfoEntry=hwCBQoSRandomDiscardCfgInfoEntry, hwCBQoSLrGroup=hwCBQoSLrGroup, hwCBQoSGtsCbs=hwCBQoSGtsCbs, hwCBQoSRedirectVsiName=hwCBQoSRedirectVsiName, hwCBQoSFrPvcCarConformPacketsRate=hwCBQoSFrPvcCarConformPacketsRate, hwCBQoSFrPvcCbqRunInfoTable=hwCBQoSFrPvcCbqRunInfoTable, hwCBQoSBehaviorCfgInfoTable=hwCBQoSBehaviorCfgInfoTable, hwCBQoSRemarkIpDfCfgInfoTable=hwCBQoSRemarkIpDfCfgInfoTable, hwCBQoSPolicyMatchedDropBytesRate=hwCBQoSPolicyMatchedDropBytesRate, hwCBQoSPolicyStatClassifierMatchedPassBytesRate=hwCBQoSPolicyStatClassifierMatchedPassBytesRate, hwCBQoSClassifierOperator=hwCBQoSClassifierOperator, hwCBQoSClassifierIndexQueryTable=hwCBQoSClassifierIndexQueryTable, hwCBQoSBehaviorIndex=hwCBQoSBehaviorIndex, hwCBQoSFrPvcGtsDelayedPackets=hwCBQoSFrPvcGtsDelayedPackets, hwCBQoSPolicyStatisticsClassifierEntry=hwCBQoSPolicyStatisticsClassifierEntry, hwCBQoSAtmPvcGtsDelayedBytes=hwCBQoSAtmPvcGtsDelayedBytes, hwCBQoSIfQueueMatchedPackets=hwCBQoSIfQueueMatchedPackets, hwCBQoSAtmPvcClassAverageRate=hwCBQoSAtmPvcClassAverageRate, hwCBQoSQueueCbs=hwCBQoSQueueCbs, hwCBQoSFrPvcClassMatchRunInfoTable=hwCBQoSFrPvcClassMatchRunInfoTable, hwCBQoSMultiPolicyUnmatchedPackets=hwCBQoSMultiPolicyUnmatchedPackets, hwCBQoSPolicyMatchedPackets=hwCBQoSPolicyMatchedPackets, hwCBQoSSubPolicyStatClassifierQueueDiscardedBytes=hwCBQoSSubPolicyStatClassifierQueueDiscardedBytes, hwCBQoSIfGtsQueueSize=hwCBQoSIfGtsQueueSize, hwCBQoSIfVlanClassMatchRunInfoGroup=hwCBQoSIfVlanClassMatchRunInfoGroup, hwCBQoSAtmPvcCarRunInfoEntry=hwCBQoSAtmPvcCarRunInfoEntry, hwCBQoSIfWredRandomDiscardedPackets=hwCBQoSIfWredRandomDiscardedPackets, hwCBQoSMultiPolicyStatisticsClassifierTable=hwCBQoSMultiPolicyStatisticsClassifierTable, hwCBQoSIfUrpfPassedPackets=hwCBQoSIfUrpfPassedPackets, hwCBQoSSubPolicyStatClassifierMatchedPassPacketsRate=hwCBQoSSubPolicyStatClassifierMatchedPassPacketsRate, hwCBQoSSubPolicyStatClassifierQueueDiscardedPacketsRate=hwCBQoSSubPolicyStatClassifierQueueDiscardedPacketsRate, hwCBQoSDropProfileHighLimit=hwCBQoSDropProfileHighLimit, hwCBQoSIfClassMatchedBytes=hwCBQoSIfClassMatchedBytes, hwCBQoSSuppressionGreenRemarkValue=hwCBQoSSuppressionGreenRemarkValue, hwCBQoSIfVlanApplyPolicyCeVidEnd=hwCBQoSIfVlanApplyPolicyCeVidEnd, hwCBQoSMatchInnerProtocol=hwCBQoSMatchInnerProtocol, hwCBQoSVlanApplyMultiPolicyIndex=hwCBQoSVlanApplyMultiPolicyIndex, hwCBQoSCarConformedByteRate=hwCBQoSCarConformedByteRate, PYSNMP_MODULE_ID=hwCBQoSMIB, hwCBQoSPolicyMatchedPassPacketsRate=hwCBQoSPolicyMatchedPassPacketsRate, hwCBQoSClassifierIndexNext=hwCBQoSClassifierIndexNext, hwCBQoSRandomPercent=hwCBQoSRandomPercent, hwCBQoSFrPvcLrRunInfoEntry=hwCBQoSFrPvcLrRunInfoEntry, hwCBQoSFrPvcCbqRunInfoGroup=hwCBQoSFrPvcCbqRunInfoGroup, hwCBQoSRedirectMULIpAddress2=hwCBQoSRedirectMULIpAddress2, hwCBQoSRemarkType=hwCBQoSRemarkType, hwCBQoSFrPvcRemarkedPackets=hwCBQoSFrPvcRemarkedPackets, hwCBQoSClassifierMatchedDropPackets=hwCBQoSClassifierMatchedDropPackets, hwCBQoSUrpfCtrlType=hwCBQoSUrpfCtrlType, hwCBQoSNatAddressGroup=hwCBQoSNatAddressGroup, hwCBQoSAtmPvcApplyPolicyEntry=hwCBQoSAtmPvcApplyPolicyEntry, hwCBQoSVlanApplyMultiPolicyVlanId=hwCBQoSVlanApplyMultiPolicyVlanId, hwCBQoSCarOverSpeedThresholdTrap=hwCBQoSCarOverSpeedThresholdTrap, hwCBQoSIfVlanStaticsObjects=hwCBQoSIfVlanStaticsObjects, hwCBQoSIfLrDelayedBytes=hwCBQoSIfLrDelayedBytes, hwCBQoSIfGtsDelayedBytes=hwCBQoSIfGtsDelayedBytes)
mibBuilder.exportSymbols("HUAWEI-CBQOS-MIB", hwCBQoSClassifierMatchedDropBytes=hwCBQoSClassifierMatchedDropBytes, hwCBQoSFrPvcCarConformBytesRate=hwCBQoSFrPvcCarConformBytesRate, hwCBQoSSubPolicyStatClassifierCarYellowBytes=hwCBQoSSubPolicyStatClassifierCarYellowBytes, hwCBQoSAtmPvcGtsPassedBytes=hwCBQoSAtmPvcGtsPassedBytes, hwCBQoSVlanClassMatchRunInfoTable=hwCBQoSVlanClassMatchRunInfoTable, hwCBQoSMultiPolicyResetFlag=hwCBQoSMultiPolicyResetFlag, hwCBQoSMultiPolicyStatClassifierMatchedBytes=hwCBQoSMultiPolicyStatClassifierMatchedBytes, hwCBQoSTrapVlanId=hwCBQoSTrapVlanId, hwCBQoSAtmPvcCarConformBytes=hwCBQoSAtmPvcCarConformBytes, hwCBQoSAtmPvcLrRunInfoGroup=hwCBQoSAtmPvcLrRunInfoGroup, hwCBQoSIfVlanApplyPolicyDirection=hwCBQoSIfVlanApplyPolicyDirection, hwCBQoSPolicyClassRowStatus=hwCBQoSPolicyClassRowStatus, hwCBQoSPolicyMatchedDropPacketsRate=hwCBQoSPolicyMatchedDropPacketsRate, hwCBQoSLrEbs=hwCBQoSLrEbs, hwCBQoSDenyPacketLengthOptype=hwCBQoSDenyPacketLengthOptype, hwCBQoSPolicyShareModeFlag=hwCBQoSPolicyShareModeFlag, hwCBQoSIfQueueMatchedPacketsRate=hwCBQoSIfQueueMatchedPacketsRate, hwCBQoSPolicyMatchedPassPackets=hwCBQoSPolicyMatchedPassPackets, hwCBQoSCarRedAction=hwCBQoSCarRedAction, hwCBQoSDenyPacketLength=hwCBQoSDenyPacketLength, hwCBQoSIfCbqBeQueueSize=hwCBQoSIfCbqBeQueueSize, hwCBQoSHighDropRowStatus=hwCBQoSHighDropRowStatus, hwCBQoSNatNoPat=hwCBQoSNatNoPat, hwCBQoSFrPvcWredRunInfoTable=hwCBQoSFrPvcWredRunInfoTable, hwCBQoSMultiPolicyStatClassifierName=hwCBQoSMultiPolicyStatClassifierName, hwCBQoSSamplingCfgInfoEntry=hwCBQoSSamplingCfgInfoEntry, hwCBQoSIfCbqRunInfoEntry=hwCBQoSIfCbqRunInfoEntry, hwCBQoSPolicyStatClassifierMatchedBytesRate=hwCBQoSPolicyStatClassifierMatchedBytesRate, hwCBQoSTrapDiscardPackets=hwCBQoSTrapDiscardPackets, hwCBQoSSubPolicyStatClassifierCarGreenPackets=hwCBQoSSubPolicyStatClassifierCarGreenPackets, hwCBQoSVsiApplyPolicyRowStatus=hwCBQoSVsiApplyPolicyRowStatus, hwCBQoSIfQueueEnqueuedBytesRate=hwCBQoSIfQueueEnqueuedBytesRate, hwCBQoSFrPvcWredRandomDiscardedPackets=hwCBQoSFrPvcWredRandomDiscardedPackets, hwCBQoSIfCarYellowDiscardedBytesRate=hwCBQoSIfCarYellowDiscardedBytesRate, hwCBQoSNatServiceClass=hwCBQoSNatServiceClass, hwCBQoSVsiApplyPolicyVsiIndex=hwCBQoSVsiApplyPolicyVsiIndex, hwCBQoSCarExceededPacketRate=hwCBQoSCarExceededPacketRate, hwCBQoSSubPolicyStatClassifierCarRedPassedPacketsRate=hwCBQoSSubPolicyStatClassifierCarRedPassedPacketsRate, hwCBQoSQueryPolicyName=hwCBQoSQueryPolicyName, hwCBQoSLoadBalanceRowStatus=hwCBQoSLoadBalanceRowStatus, hwCBQoSPolicyMatchedPassBytes=hwCBQoSPolicyMatchedPassBytes, hwCBQoSClassifierIndex=hwCBQoSClassifierIndex, hwCBQoSGtsPir=hwCBQoSGtsPir, hwCBQoSIfLrDelayedPackets=hwCBQoSIfLrDelayedPackets, hwCBQoSUrpfAllowDefault=hwCBQoSUrpfAllowDefault, hwCBQoSCountAction=hwCBQoSCountAction, hwCBQoSFrPvcLrPassedBytes=hwCBQoSFrPvcLrPassedBytes, hwCBQoSAtmPvcCarConformPackets=hwCBQoSAtmPvcCarConformPackets, hwCBQoSVlanApplyPolicyGroup=hwCBQoSVlanApplyPolicyGroup, hwCBQoSObjects=hwCBQoSObjects, hwCBQoSAtmPvcCarExceedPacketsRate=hwCBQoSAtmPvcCarExceedPacketsRate, hwCBQoSVlanCarRunInfoEntry=hwCBQoSVlanCarRunInfoEntry, hwCBQoSVsiClassMatchRunInfoTable=hwCBQoSVsiClassMatchRunInfoTable, hwCBQoSMatchVlanEndId=hwCBQoSMatchVlanEndId, hwCBQoSDAATariffLevelValue=hwCBQoSDAATariffLevelValue, hwCBQoSNotifications=hwCBQoSNotifications, hwCBQoSMatchRuleCfgInfoTable=hwCBQoSMatchRuleCfgInfoTable, hwCBQoSMultiPolicyMatchedPassBytes=hwCBQoSMultiPolicyMatchedPassBytes, hwCBQoSFrPvcQueueMatchedPackets=hwCBQoSFrPvcQueueMatchedPackets, hwCBQoSTrapType=hwCBQoSTrapType, hwCBQoSIfQueueDiscardedPackets=hwCBQoSIfQueueDiscardedPackets, hwCBQoSFrPvcClassMatchedPackets=hwCBQoSFrPvcClassMatchedPackets, hwCBQoSIfCarRunInfoEntry=hwCBQoSIfCarRunInfoEntry, hwCBQoSMatchRuleIndex=hwCBQoSMatchRuleIndex, hwCBQoSAtmPvcGtsRunInfoTable=hwCBQoSAtmPvcGtsRunInfoTable, hwCBQoSFrPvcQueueDiscardedPacketsRate=hwCBQoSFrPvcQueueDiscardedPacketsRate, hwCBQoSMatchRuleIntValue2=hwCBQoSMatchRuleIntValue2, hwCBQoSPolicyShareFlag=hwCBQoSPolicyShareFlag, hwCBQoSRandomDiscardCfgInfoTable=hwCBQoSRandomDiscardCfgInfoTable, hwCBQoSAtmPvcQueueEnqueuedBytes=hwCBQoSAtmPvcQueueEnqueuedBytes, hwCBQoSFrPvcQueueEnqueuedBytes=hwCBQoSFrPvcQueueEnqueuedBytes, hwCBQoSIfClassMatchRunInfoEntry=hwCBQoSIfClassMatchRunInfoEntry, hwCBQoSMatchInnerDstIp=hwCBQoSMatchInnerDstIp, hwCBQoSAtmPvcApplyPolicyName=hwCBQoSAtmPvcApplyPolicyName, hwCBQoSFrPvcLrDelayedBytes=hwCBQoSFrPvcLrDelayedBytes, hwCBQoSFrPvcApplyPolicyTable=hwCBQoSFrPvcApplyPolicyTable, hwCBQoSIfVlanApplyPolicyVlanid1=hwCBQoSIfVlanApplyPolicyVlanid1, hwCBQoSAtmPvcClassMatchBytes=hwCBQoSAtmPvcClassMatchBytes, hwCBQoSIfRemarkRunInfoGroup=hwCBQoSIfRemarkRunInfoGroup, hwCBQoSRedirectVsiEntry=hwCBQoSRedirectVsiEntry, hwCBQoSServiceClassCfgInfoTable=hwCBQoSServiceClassCfgInfoTable, hwCBQoSAtmPvcRemarkedPackets=hwCBQoSAtmPvcRemarkedPackets, hwCBQoSSuppressionRedAction=hwCBQoSSuppressionRedAction, hwCBQoSFrPvcCbqAfAllocatedQueueNum=hwCBQoSFrPvcCbqAfAllocatedQueueNum, hwCBQoSIfApplyPolicyTable=hwCBQoSIfApplyPolicyTable, hwCBQoSRuleNotSupportAlarmEntry=hwCBQoSRuleNotSupportAlarmEntry, hwCBQoSCompliance=hwCBQoSCompliance, hwCBQoSIfVlanApplyPolicyIfIndex=hwCBQoSIfVlanApplyPolicyIfIndex, hwCBQoSSubPolicyStatClassifierMatchedPassBytesRate=hwCBQoSSubPolicyStatClassifierMatchedPassBytesRate, hwCBQosCarAggregation=hwCBQosCarAggregation, hwCBQoSPolicyResetFlag=hwCBQoSPolicyResetFlag, hwCBQoSRedirectCfgInfoTable=hwCBQoSRedirectCfgInfoTable, hwCBQoSSubPolicyStatClassifierCarGreenBytes=hwCBQoSSubPolicyStatClassifierCarGreenBytes, hwCBQoSAtmPvcCbqBeActiveQueueNum=hwCBQoSAtmPvcCbqBeActiveQueueNum, hwCBQoSGtsDiscardThresholdTrap=hwCBQoSGtsDiscardThresholdTrap, hwCBQoSAtmPvcCbqRunInfoGroup=hwCBQoSAtmPvcCbqRunInfoGroup, hwCBQoSIfVlanClassMatchRunInfoTable=hwCBQoSIfVlanClassMatchRunInfoTable, hwCBQoSPolicyStatisticsObjects=hwCBQoSPolicyStatisticsObjects, hwCBQoSIfCarRedPassedPackets=hwCBQoSIfCarRedPassedPackets, hwCBQoSFrPvcLrDelayedPackets=hwCBQoSFrPvcLrDelayedPackets, hwCBQoSMatchRuleIfNot=hwCBQoSMatchRuleIfNot, hwCBQoSRedirectMULIpAddress3=hwCBQoSRedirectMULIpAddress3, hwCBQoSPolicyStatClassifierMatchedPackets=hwCBQoSPolicyStatClassifierMatchedPackets, hwCBQoSFrClassApplyPolicyGroup=hwCBQoSFrClassApplyPolicyGroup, hwCBQoSSubPolicyStatClassifierDropPackets=hwCBQoSSubPolicyStatClassifierDropPackets, hwCBQoSWredCfgInfoTable=hwCBQoSWredCfgInfoTable, hwCBQoSNotificationsGroup=hwCBQoSNotificationsGroup, hwCBQoSRedirectVlanId=hwCBQoSRedirectVlanId, hwCBQoSFrPvcCbqBeMaxActiveQueueNum=hwCBQoSFrPvcCbqBeMaxActiveQueueNum, hwCBQoSIfApplyPolicyRowStatus=hwCBQoSIfApplyPolicyRowStatus, hwCBQoSEgressGtsCfgInfoEntry=hwCBQoSEgressGtsCfgInfoEntry, hwCBQoSRandomDiscardCfgInfoGroup=hwCBQoSRandomDiscardCfgInfoGroup, hwCBQoSPolicyConfigMode=hwCBQoSPolicyConfigMode, hwCBQoSMultiPolicyIndex=hwCBQoSMultiPolicyIndex, hwCBQoSBehaviorName=hwCBQoSBehaviorName, hwCBQoSPolicyMatchedDropPackets=hwCBQoSPolicyMatchedDropPackets, hwCBQoSFrPvcLrRunInfoGroup=hwCBQoSFrPvcLrRunInfoGroup, hwCBQoSVlanApplyPolicyRowStatus=hwCBQoSVlanApplyPolicyRowStatus, hwCBQoSAtmPvcGtsRunInfoEntry=hwCBQoSAtmPvcGtsRunInfoEntry, hwCBQoSNestPolicyCfgInfoEntry=hwCBQoSNestPolicyCfgInfoEntry, hwCBQoSIfGtsPassedBytes=hwCBQoSIfGtsPassedBytes, hwCBQoSCountCfgInfoTable=hwCBQoSCountCfgInfoTable, hwCBQoSAtmPvcLrRunInfoTable=hwCBQoSAtmPvcLrRunInfoTable, hwCBQoSVsiStaticsObjects=hwCBQoSVsiStaticsObjects, hwCBQoSTrapPolicyName=hwCBQoSTrapPolicyName, hwCBQoSIfCarYellowDiscardedBytes=hwCBQoSIfCarYellowDiscardedBytes, hwCBQoSAtmPvcQueueMatchedBytesRate=hwCBQoSAtmPvcQueueMatchedBytesRate, hwCBQoSIfGtsDelayedPackets=hwCBQoSIfGtsDelayedPackets, hwCBQoSSubPolicyStatClassifierCarYellowPackets=hwCBQoSSubPolicyStatClassifierCarYellowPackets, hwCBQoSMultiPolicyMatchedDropBytes=hwCBQoSMultiPolicyMatchedDropBytes, hwCBQoSCarYellowRemarkValue=hwCBQoSCarYellowRemarkValue, hwCBQoSRandomDiscardRowStatus=hwCBQoSRandomDiscardRowStatus, hwCBQoSCarStatisticsEntry=hwCBQoSCarStatisticsEntry, hwCBQoSIfCarGreenDiscardedPackets=hwCBQoSIfCarGreenDiscardedPackets, hwCBQoSMatchInnerDstIpMask=hwCBQoSMatchInnerDstIpMask, hwCBQoSSubPolicyStatClassifierMatchedPacketsRate=hwCBQoSSubPolicyStatClassifierMatchedPacketsRate, hwCBQoSAtmPvcGtsDiscardedBytes=hwCBQoSAtmPvcGtsDiscardedBytes, WredType=WredType, hwCBQoSIfApplyMultiPolicyRowStatus=hwCBQoSIfApplyMultiPolicyRowStatus, hwCBQoSEgressGtsPir=hwCBQoSEgressGtsPir, hwCBQoSIfVlanApplyPolicyRowStatus=hwCBQoSIfVlanApplyPolicyRowStatus, hwCBQoSVlanApplyPolicyVlanId=hwCBQoSVlanApplyPolicyVlanId, hwCBQoSClassifierMatchedPackets=hwCBQoSClassifierMatchedPackets, hwCBQoSFrPvcCarRunInfoGroup=hwCBQoSFrPvcCarRunInfoGroup, hwCBQoSIfUrpfRunInfoTable=hwCBQoSIfUrpfRunInfoTable, hwCBQoSFrPvcClassMatchedBytes=hwCBQoSFrPvcClassMatchedBytes, hwCBQoSIfClassMatchRunInfoGroup=hwCBQoSIfClassMatchRunInfoGroup, hwCBQoSLrCfgInfoEntry=hwCBQoSLrCfgInfoEntry, hwCBQoSDenyPacketLengthCfgInfoTable=hwCBQoSDenyPacketLengthCfgInfoTable, hwCBQoSAtmPvcApplyPolicyVPI=hwCBQoSAtmPvcApplyPolicyVPI, hwCBQoSCarConformedPacketRate=hwCBQoSCarConformedPacketRate, hwCBQoSIfClassMatchedPackets=hwCBQoSIfClassMatchedPackets, hwCBQoSAtmPvcClassMatchRunInfoEntry=hwCBQoSAtmPvcClassMatchRunInfoEntry, hwCBQoSAtmPvcWredRunInfoEntry=hwCBQoSAtmPvcWredRunInfoEntry, CBQueueType=CBQueueType, hwCBQoSIfWredRunInfoTable=hwCBQoSIfWredRunInfoTable, hwCBQoSLoadBalanceType=hwCBQoSLoadBalanceType, hwCBQoSPolicyClassPrecedence=hwCBQoSPolicyClassPrecedence, hwCBQoSSubPolicyStatClassifierQueueEnqueuedPackets=hwCBQoSSubPolicyStatClassifierQueueEnqueuedPackets, hwCBQoSIfCarYellowRemarkedPackets=hwCBQoSIfCarYellowRemarkedPackets, hwCBQoSAtmPvcCarExceedBytes=hwCBQoSAtmPvcCarExceedBytes, hwCBQoSAtmPvcQueueMatchedPacketsRate=hwCBQoSAtmPvcQueueMatchedPacketsRate, hwCBQoSSubPolicyStatClassifierCarGreenPassedPacketsRate=hwCBQoSSubPolicyStatClassifierCarGreenPassedPacketsRate, hwCBQoSAtmPvcGtsPassedPackets=hwCBQoSAtmPvcGtsPassedPackets, hwCBQoSCarCir=hwCBQoSCarCir, hwCBQoSQueueCbsRatio=hwCBQoSQueueCbsRatio, hwCBQoSAtmPvcQueueMatchedBytes=hwCBQoSAtmPvcQueueMatchedBytes, hwCBQoSDropProfileClassValue=hwCBQoSDropProfileClassValue, hwCBQoSIfVlanApplyPolicyTable=hwCBQoSIfVlanApplyPolicyTable, hwCBQoSGeneralGroup=hwCBQoSGeneralGroup, hwCBQoSFrPvcLrPassedPackets=hwCBQoSFrPvcLrPassedPackets, hwCBQoSIfCarYellowPassedPacketsRate=hwCBQoSIfCarYellowPassedPacketsRate, hwCBQoSPolicyStatClassifierMatchedPassBytes=hwCBQoSPolicyStatClassifierMatchedPassBytes, hwCBQoSVlanCarRunInfoTable=hwCBQoSVlanCarRunInfoTable, hwCBQoSSubPolicyStatClassifierMatchedDropBytesRate=hwCBQoSSubPolicyStatClassifierMatchedDropBytesRate, hwCBQoSSlotId=hwCBQoSSlotId, hwCBQoSRedirectRowStatus=hwCBQoSRedirectRowStatus, hwCBQoSRedirectMULCfgInfoTable=hwCBQoSRedirectMULCfgInfoTable, hwCBQoSClassifierMatchedPassBytes=hwCBQoSClassifierMatchedPassBytes, hwCBQoSMatchRuleRowStatus=hwCBQoSMatchRuleRowStatus, hwCBQoSPolicyStatSubPolicyClassifierRunInfoEntry=hwCBQoSPolicyStatSubPolicyClassifierRunInfoEntry, hwCBQoSIfCarRedDiscardedBytesRate=hwCBQoSIfCarRedDiscardedBytesRate, hwCBQoSBehaviorGroup=hwCBQoSBehaviorGroup, hwCBQoSWredClassValue=hwCBQoSWredClassValue, hwCBQoSIfRedirectRunInfoEntry=hwCBQoSIfRedirectRunInfoEntry, hwCBQoSIfCarGreenRemarkedBytesRate=hwCBQoSIfCarGreenRemarkedBytesRate, hwCBQoSCarConformedBytes=hwCBQoSCarConformedBytes, hwCBQoSVlanApplyPolicyName=hwCBQoSVlanApplyPolicyName, hwCBQoSClassifierLayer=hwCBQoSClassifierLayer, hwCBQoSFrPvcCarExceedBytesRate=hwCBQoSFrPvcCarExceedBytesRate, hwCBQoSDAAStatisticsCfgInfoTable=hwCBQoSDAAStatisticsCfgInfoTable, hwCBQoSCarRedRemarkValue=hwCBQoSCarRedRemarkValue, hwCBQoSSubPolicyStatClassifierPassPackets=hwCBQoSSubPolicyStatClassifierPassPackets, hwCBQoSAtmPvcGtsDiscardedPackets=hwCBQoSAtmPvcGtsDiscardedPackets, hwCBQoSMultiPolicyStatClassifierUnmatchedPackets=hwCBQoSMultiPolicyStatClassifierUnmatchedPackets, hwCBQoSCarPassedPackets=hwCBQoSCarPassedPackets, hwCBQoSIfQueueDiscardedBytesRate=hwCBQoSIfQueueDiscardedBytesRate, hwCBQoSSubPolicyClassIndex=hwCBQoSSubPolicyClassIndex, hwCBQoSRedirectMULIpAddress1=hwCBQoSRedirectMULIpAddress1, hwCBQoSVlanClassDroppedPackets=hwCBQoSVlanClassDroppedPackets, hwCBQoSIfCarYellowDiscardedPacketsRate=hwCBQoSIfCarYellowDiscardedPacketsRate, hwCBQoSNatRowStatus=hwCBQoSNatRowStatus, hwCBQoSSubPolicyStatClassifierMatchedDropPacketsRate=hwCBQoSSubPolicyStatClassifierMatchedDropPacketsRate, hwCBQoSFrClassApplyPolicyTable=hwCBQoSFrClassApplyPolicyTable, hwCBQoSMultiPolicyMatchedBytes=hwCBQoSMultiPolicyMatchedBytes, hwCBQoSAtmPvcRemarkRunInfoGroup=hwCBQoSAtmPvcRemarkRunInfoGroup, hwCBQoSIfQueueDiscardedBytes=hwCBQoSIfQueueDiscardedBytes, hwCBQoSFrPvcCbqDiscard=hwCBQoSFrPvcCbqDiscard, hwCBQoSCarExceededBytes=hwCBQoSCarExceededBytes, hwCBQoSFrPvcWredRunInfoGroup=hwCBQoSFrPvcWredRunInfoGroup, hwCBQoSMultiPolicyMatchedPassPackets=hwCBQoSMultiPolicyMatchedPassPackets, hwCBQoSRedirectVsiTable=hwCBQoSRedirectVsiTable, hwCBQoSSuppressionRowStatus=hwCBQoSSuppressionRowStatus, hwCBQoSIfUrpfPassedBytes=hwCBQoSIfUrpfPassedBytes, hwCBQoSPolicyStatisticsTable=hwCBQoSPolicyStatisticsTable, hwCBQoSFrPvcGtsPassedBytes=hwCBQoSFrPvcGtsPassedBytes, hwCBQoSIfCbqBeActiveQueueNum=hwCBQoSIfCbqBeActiveQueueNum, hwCBQoSAtmPvcRemarkRunInfoTable=hwCBQoSAtmPvcRemarkRunInfoTable, hwCBQoSGtsRowStatus=hwCBQoSGtsRowStatus, hwCBQoSFrPvcRemarkRunInfoTable=hwCBQoSFrPvcRemarkRunInfoTable, hwCBQoSPolicyStatClassifierMatchedDropBytesRate=hwCBQoSPolicyStatClassifierMatchedDropBytesRate, hwCBQoSCompliances=hwCBQoSCompliances, hwCBQoSIfFilteredPackets=hwCBQoSIfFilteredPackets, hwCBQoSCarOverflowPackets=hwCBQoSCarOverflowPackets, hwCBQoSRedirectGroup=hwCBQoSRedirectGroup, hwCBQoSAtmPvcQueueDiscardedBytesRate=hwCBQoSAtmPvcQueueDiscardedBytesRate, hwCBQoSIfApplyPolicyName=hwCBQoSIfApplyPolicyName, hwCBQoSIfCarGreenPassedBytesRate=hwCBQoSIfCarGreenPassedBytesRate, hwCBQoSCarOverflowByteRate=hwCBQoSCarOverflowByteRate, hwCBQoSAtmPvcQueueDiscardedBytes=hwCBQoSAtmPvcQueueDiscardedBytes, hwCBQoSSubPolicyStatClassifierCarRedPassedBytesRate=hwCBQoSSubPolicyStatClassifierCarRedPassedBytesRate, hwCBQoSCountRowStatus=hwCBQoSCountRowStatus, hwCBQoSIfGtsDiscardedPackets=hwCBQoSIfGtsDiscardedPackets, hwCBQoSAtmPvcClassMatchPackets=hwCBQoSAtmPvcClassMatchPackets, hwCBQoSAtmPvcClassMatchRunInfoGroup=hwCBQoSAtmPvcClassMatchRunInfoGroup, hwCBQoSSuppressionCfgInfoEntry=hwCBQoSSuppressionCfgInfoEntry, hwCBQoSGtsEbs=hwCBQoSGtsEbs, hwCBQoSCarPbs=hwCBQoSCarPbs, hwCBQoSIfApplyMultiPolicyName=hwCBQoSIfApplyMultiPolicyName, hwCBQoSGtsQueueLength=hwCBQoSGtsQueueLength, hwCBQoSAtmPvcLrRunInfoEntry=hwCBQoSAtmPvcLrRunInfoEntry, hwCBQoSMultiPolicyStaPolicyIndex=hwCBQoSMultiPolicyStaPolicyIndex, hwCBQoSIfVlanApplyPolicyLinkLayer=hwCBQoSIfVlanApplyPolicyLinkLayer, hwCBQoSIfGtsRunInfoEntry=hwCBQoSIfGtsRunInfoEntry, hwCBQoSQueueQueueNumber=hwCBQoSQueueQueueNumber, hwCBQoSWredClassLowLimit=hwCBQoSWredClassLowLimit, hwCBQoSWredCfgInfoEntry=hwCBQoSWredCfgInfoEntry, hwCBQoSMultiPolicyStatClassifierIndex=hwCBQoSMultiPolicyStatClassifierIndex, hwCBQoSMatchInnerSrcIp=hwCBQoSMatchInnerSrcIp, hwCBQoSPolicyStatClassifierMatchedDropPacketsRate=hwCBQoSPolicyStatClassifierMatchedDropPacketsRate, hwCBQoSFrPvcCbqBeTotalQueueNum=hwCBQoSFrPvcCbqBeTotalQueueNum, hwCBQoSVlanClassMatchRunInfoEntry=hwCBQoSVlanClassMatchRunInfoEntry, hwCBQoSFrPvcQueueEnqueuedPackets=hwCBQoSFrPvcQueueEnqueuedPackets, hwCBQoSFrPvcClassAverageRate=hwCBQoSFrPvcClassAverageRate)
mibBuilder.exportSymbols("HUAWEI-CBQOS-MIB", hwCBQoSMultiPolicyStatClassifierMatchedPackets=hwCBQoSMultiPolicyStatClassifierMatchedPackets, hwCBQoSIfRemarkRunInfoTable=hwCBQoSIfRemarkRunInfoTable, hwCBQoSAtmPvcLrPassedBytes=hwCBQoSAtmPvcLrPassedBytes, hwCBQoSEgressGtsCir=hwCBQoSEgressGtsCir, hwCBQoSGtsGroup=hwCBQoSGtsGroup, hwCBQoSPolicyMatchedBytesRate=hwCBQoSPolicyMatchedBytesRate, hwCBQoSIfCarRedRemarkedBytes=hwCBQoSIfCarRedRemarkedBytes, hwCBQoSIfClassMatchRunInfoTable=hwCBQoSIfClassMatchRunInfoTable, hwCBQoSIfLrRunInfoEntry=hwCBQoSIfLrRunInfoEntry, hwCBQoSFrPvcQueueRunInfoGroup=hwCBQoSFrPvcQueueRunInfoGroup, hwCBQoSSubPolicyStatClassifierCarRedPackets=hwCBQoSSubPolicyStatClassifierCarRedPackets, hwCBQoSAtmPvcWredRunInfoGroup=hwCBQoSAtmPvcWredRunInfoGroup, hwCBQoSNatGroup=hwCBQoSNatGroup, hwCBQoSActionNotSupportAlarmEntry=hwCBQoSActionNotSupportAlarmEntry, hwCBQoSFrPvcQueueDiscardedBytesRate=hwCBQoSFrPvcQueueDiscardedBytesRate, hwCBQoSRuleDirection=hwCBQoSRuleDirection, hwCBQoSAtmPvcLrPassedPackets=hwCBQoSAtmPvcLrPassedPackets, hwCBQoSDAAStatisticsCfgInfoEntry=hwCBQoSDAAStatisticsCfgInfoEntry, hwCBQoSWredClassCfgInfoTable=hwCBQoSWredClassCfgInfoTable, hwCBQoSIfCarRedDiscardedBytes=hwCBQoSIfCarRedDiscardedBytes, hwCBQoSFrPvcQueueMatchedBytesRate=hwCBQoSFrPvcQueueMatchedBytesRate, hwCBQoSAtmPvcCbqQueueSize=hwCBQoSAtmPvcCbqQueueSize, hwCBQoSWredWeightConst=hwCBQoSWredWeightConst, hwCBQoSNestPolicyCfgInfoTable=hwCBQoSNestPolicyCfgInfoTable, hwCBQoSAtmPvcCbqRunInfoEntry=hwCBQoSAtmPvcCbqRunInfoEntry, hwCBQoSRedirectMULIfIndex2=hwCBQoSRedirectMULIfIndex2, hwCBQoSLrCbs=hwCBQoSLrCbs, hwCBQoSQueueBandwidthValue=hwCBQoSQueueBandwidthValue, hwCBQoSPolicyClassCount=hwCBQoSPolicyClassCount, hwCBQoSFrPvcQueueRunInfoTable=hwCBQoSFrPvcQueueRunInfoTable, hwCBQoSSuppressionCfgInfoTable=hwCBQoSSuppressionCfgInfoTable, hwCBQoSIfUrpfDroppedBytes=hwCBQoSIfUrpfDroppedBytes, hwCBQoSConformance=hwCBQoSConformance, hwCBQoSMultiPolicyStatisticsEntry=hwCBQoSMultiPolicyStatisticsEntry, hwCBQoSIfCarYellowPassedBytes=hwCBQoSIfCarYellowPassedBytes, hwCBQoSRedirectCtrlType=hwCBQoSRedirectCtrlType, hwCBQoSRedirectVsiRowStatus=hwCBQoSRedirectVsiRowStatus, hwCBQoSPolicyStatClassifierMatchedPacketsRate=hwCBQoSPolicyStatClassifierMatchedPacketsRate, hwCBQoSIfCbqBeMaxActiveQueueNum=hwCBQoSIfCbqBeMaxActiveQueueNum, hwCBQoSFrPvcCarExceedBytes=hwCBQoSFrPvcCarExceedBytes, hwCBQoSIfCbqDiscard=hwCBQoSIfCbqDiscard, hwCBQoSPolicyStatClassifierMatchedDropPackets=hwCBQoSPolicyStatClassifierMatchedDropPackets, hwCBQoSDenyPacketLengthMax=hwCBQoSDenyPacketLengthMax, hwCBQoSAtmPvcQueueRunInfoEntry=hwCBQoSAtmPvcQueueRunInfoEntry, hwCBQoSQueryObjects=hwCBQoSQueryObjects, hwCBQoSFrPvcGtsRunInfoGroup=hwCBQoSFrPvcGtsRunInfoGroup, hwCBQoSFrPvcCarRunInfoEntry=hwCBQoSFrPvcCarRunInfoEntry, hwCBQoSMirrorCfgInfoTable=hwCBQoSMirrorCfgInfoTable, hwCBQoSFrClassApplyPolicyFrClassName=hwCBQoSFrClassApplyPolicyFrClassName, hwCBQosIfClassPassedPackets=hwCBQosIfClassPassedPackets, hwCBQoSIfSampledPackets=hwCBQoSIfSampledPackets, hwCBQoSFrPvcCbqQueueSize=hwCBQoSFrPvcCbqQueueSize, hwCBQoSFrPvcLrDiscardedBytes=hwCBQoSFrPvcLrDiscardedBytes, hwCBQoSNestPolicyRowStatus=hwCBQoSNestPolicyRowStatus, hwCBQoSUrpfCfgInfoTable=hwCBQoSUrpfCfgInfoTable, hwCBQoSAtmPvcApplyPolicyRowStatus=hwCBQoSAtmPvcApplyPolicyRowStatus, hwCBQoSSubPolicyStatClassifierMatchedPackets=hwCBQoSSubPolicyStatClassifierMatchedPackets, hwCBQoSDropProfileDiscardProb=hwCBQoSDropProfileDiscardProb, hwCBQoSSamplingRowStatus=hwCBQoSSamplingRowStatus, hwCBQoSCarCbs=hwCBQoSCarCbs, QueueBandwidthUnit=QueueBandwidthUnit, hwCBQoSVlanApplyMultiPolicyDirection=hwCBQoSVlanApplyMultiPolicyDirection, hwCBQoSIfRemarkRunInfoEntry=hwCBQoSIfRemarkRunInfoEntry, hwCBQoSFrClassApplyPolicyName=hwCBQoSFrClassApplyPolicyName, hwCBQoSAtmPvcGtsQueueSize=hwCBQoSAtmPvcGtsQueueSize, hwCBQoSPortId=hwCBQoSPortId, hwCBQoSDenyPacketLengthCfgInfoGroup=hwCBQoSDenyPacketLengthCfgInfoGroup, hwCBQoSVlanClassMatchedPackets=hwCBQoSVlanClassMatchedPackets, hwCBQoSSubPolicyStatClassifierQueueDiscardedPackets=hwCBQoSSubPolicyStatClassifierQueueDiscardedPackets, hwCBQoSDAATariffLevelRowStatus=hwCBQoSDAATariffLevelRowStatus, hwCBQoSIfCbqEfQueueSize=hwCBQoSIfCbqEfQueueSize, hwCBQoSFrPvcQueueRunInfoEntry=hwCBQoSFrPvcQueueRunInfoEntry, hwCBQoSIfCarRedDiscardedPackets=hwCBQoSIfCarRedDiscardedPackets, hwCBQoSSamplingGroup=hwCBQoSSamplingGroup, hwCBQoSLrCir=hwCBQoSLrCir, hwCBQoSClassifierGroup=hwCBQoSClassifierGroup, hwCBQoSSubPolicyStatClassifierQueueMatchedPackets=hwCBQoSSubPolicyStatClassifierQueueMatchedPackets, hwCBQoSQueueBandwidthUnit=hwCBQoSQueueBandwidthUnit, hwCBQoSRedirectType=hwCBQoSRedirectType, hwCBQoSBehaviorRowStatus=hwCBQoSBehaviorRowStatus, SamplingType=SamplingType, hwCBQoSApplyPolicyStaticsObjects=hwCBQoSApplyPolicyStaticsObjects, hwCBQoSPolicyClassIndex=hwCBQoSPolicyClassIndex, hwCBQoSMirrorObserveIndex=hwCBQoSMirrorObserveIndex, hwCBQoSVsiApplyPolicyName=hwCBQoSVsiApplyPolicyName, hwCBQoSUrpfCfgInfoEntry=hwCBQoSUrpfCfgInfoEntry, hwCBQoSRuleInfo=hwCBQoSRuleInfo, hwCBQoSAtmPvcGtsRunInfoGroup=hwCBQoSAtmPvcGtsRunInfoGroup, hwCBQoSIfCbqRunInfoGroup=hwCBQoSIfCbqRunInfoGroup, hwCBQoSDenyPacketLengthRowStatus=hwCBQoSDenyPacketLengthRowStatus, hwCBQoSPolicyUnmatchedPackets=hwCBQoSPolicyUnmatchedPackets, hwCBQoSQueueDropType=hwCBQoSQueueDropType, hwCBQoSDAAStatisticsCfgInfoGroup=hwCBQoSDAAStatisticsCfgInfoGroup, MatchRuleType=MatchRuleType, hwCBQoSAtmPvcApplyPolicyVCI=hwCBQoSAtmPvcApplyPolicyVCI, hwCBQoSRemarkIpDfCfgInfoEntry=hwCBQoSRemarkIpDfCfgInfoEntry, hwCBQoSCarEbs=hwCBQoSCarEbs, hwCBQoSEgressGtsCfgInfoTable=hwCBQoSEgressGtsCfgInfoTable, hwCBQoSFrPvcRemarkRunInfoEntry=hwCBQoSFrPvcRemarkRunInfoEntry, hwCBQoSIfMirrorRunInfoEntry=hwCBQoSIfMirrorRunInfoEntry, hwCBQoSFrPvcLrDiscardedPackets=hwCBQoSFrPvcLrDiscardedPackets, hwCBQoSFrPvcGtsDiscardedPackets=hwCBQoSFrPvcGtsDiscardedPackets, hwCBQoSPolicyShareModeRowStatus=hwCBQoSPolicyShareModeRowStatus, hwCBQoSNatCfgInfoTable=hwCBQoSNatCfgInfoTable, hwCBQoSIfApplyMultiPolicyIndex=hwCBQoSIfApplyMultiPolicyIndex, hwCBQoSIfCarYellowRemarkedPacketsRate=hwCBQoSIfCarYellowRemarkedPacketsRate, hwCBQoSPolicyClassBehaviorName=hwCBQoSPolicyClassBehaviorName, hwCBQoSMultiPolicyStatisticsClassifierEntry=hwCBQoSMultiPolicyStatisticsClassifierEntry, hwCBQoSTrapAction=hwCBQoSTrapAction, hwCBQoSWredDropProfileIndex=hwCBQoSWredDropProfileIndex, hwCBQoSVlanClassPassedPackets=hwCBQoSVlanClassPassedPackets, hwCBQoSGtsCfgInfoTable=hwCBQoSGtsCfgInfoTable, hwCBQoSDAAStatisticsRowStatus=hwCBQoSDAAStatisticsRowStatus, hwCBQoSFrPvcClassMatchRunInfoGroup=hwCBQoSFrPvcClassMatchRunInfoGroup, hwCBQoSPolicyClassCfgInfoEntry=hwCBQoSPolicyClassCfgInfoEntry, hwCBQoSActionDirection=hwCBQoSActionDirection, hwCBQoSRemarkCfgInfoEntry=hwCBQoSRemarkCfgInfoEntry, hwCBQoSFrPvcCarExceedPackets=hwCBQoSFrPvcCarExceedPackets, hwCBQoSClassifierRowStatus=hwCBQoSClassifierRowStatus, hwCBQoSRedirectMULIfIndex1=hwCBQoSRedirectMULIfIndex1, hwCBQoSFrPvcQueueDiscardedBytes=hwCBQoSFrPvcQueueDiscardedBytes, hwCBQoSPolicyMatchedPassBytesRate=hwCBQoSPolicyMatchedPassBytesRate, hwCBQoSMultiPolicyStatisticsTable=hwCBQoSMultiPolicyStatisticsTable, hwCBQoSPolicyGroup=hwCBQoSPolicyGroup, hwCBQoSQueueGroup=hwCBQoSQueueGroup, hwCBQoSIfCarGreenRemarkedBytes=hwCBQoSIfCarGreenRemarkedBytes, hwCBQoSIfApplyPolicyGroup=hwCBQoSIfApplyPolicyGroup, hwCBQoSQueueRowStatus=hwCBQoSQueueRowStatus, hwCBQoSAtmPvcCbqAfAllocatedQueueNum=hwCBQoSAtmPvcCbqAfAllocatedQueueNum, hwCBQoSAtmPvcQueueEnqueuedPacketsRate=hwCBQoSAtmPvcQueueEnqueuedPacketsRate, hwCBQoSIfCarGreenPassedPackets=hwCBQoSIfCarGreenPassedPackets, hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytesRate=hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytesRate, hwCBQoSIfRedirectedPackets=hwCBQoSIfRedirectedPackets, hwCBQoSCarGreenRemarkValue=hwCBQoSCarGreenRemarkValue, hwCBQoSPolicyMatchedDropBytes=hwCBQoSPolicyMatchedDropBytes, hwCBQoSAtmPvcQueueEnqueuedPackets=hwCBQoSAtmPvcQueueEnqueuedPackets, hwCBQoSCarStatisticsTable=hwCBQoSCarStatisticsTable, hwCBQoSPolicyShareModeCfgInfoEntry=hwCBQoSPolicyShareModeCfgInfoEntry, hwCBQoSFrPvcWredRunInfoEntry=hwCBQoSFrPvcWredRunInfoEntry, hwCBQoSSamplingCfgInfoTable=hwCBQoSSamplingCfgInfoTable, hwCBQoSPolicyStatisticsEntry=hwCBQoSPolicyStatisticsEntry, hwCBQoSPolicyStatClassifierUnmatchedPackets=hwCBQoSPolicyStatClassifierUnmatchedPackets, hwCBQoSCarExceededByteRate=hwCBQoSCarExceededByteRate, hwCBQoSIfQueueRunInfoGroup=hwCBQoSIfQueueRunInfoGroup, hwCBQoSFrPvcApplyPolicyName=hwCBQoSFrPvcApplyPolicyName, hwCBQoSCarConformedPackets=hwCBQoSCarConformedPackets, hwCBQoSFrPvcQueueDiscardedPackets=hwCBQoSFrPvcQueueDiscardedPackets, hwCBQoSDAATariffLevelCfgInfoTable=hwCBQoSDAATariffLevelCfgInfoTable, hwCBQoSBehaviorObjects=hwCBQoSBehaviorObjects, hwCBQoSFrPvcLrRunInfoTable=hwCBQoSFrPvcLrRunInfoTable, hwCBQoSCarPir=hwCBQoSCarPir, hwCBQoSRemarkStringValue=hwCBQoSRemarkStringValue, hwCBQoSVsiApplyPolicyDirection=hwCBQoSVsiApplyPolicyDirection, hwCBQoSClassifierStatisticsEntry=hwCBQoSClassifierStatisticsEntry, hwCBQoSQueueCfgInfoEntry=hwCBQoSQueueCfgInfoEntry, hwCBQoSIfFirewallRunInfoTable=hwCBQoSIfFirewallRunInfoTable, hwCBQoSSVlanClassMatchGroup=hwCBQoSSVlanClassMatchGroup, hwCBQoSIfMirroredBytes=hwCBQoSIfMirroredBytes, hwCBQoSQueryClassifierIndex=hwCBQoSQueryClassifierIndex, hwCBQoSServiceClassGroup=hwCBQoSServiceClassGroup, hwCBQoSIfLrPassedPackets=hwCBQoSIfLrPassedPackets, LrCirUnit=LrCirUnit, RemarkType=RemarkType, hwCBQoSPolicyClassBehaviorIndex=hwCBQoSPolicyClassBehaviorIndex, hwCBQoSVlanApplyPolicyEntry=hwCBQoSVlanApplyPolicyEntry, hwCBQoSFrPvcGtsPassedPackets=hwCBQoSFrPvcGtsPassedPackets, hwCBQoSPolicyShareModeGroup=hwCBQoSPolicyShareModeGroup, hwCBQoSAtmPvcCbqBeTotalQueueNum=hwCBQoSAtmPvcCbqBeTotalQueueNum, hwCBQoSCountCfgInfoEntry=hwCBQoSCountCfgInfoEntry, hwCBQoSIfCarRedRemarkedBytesRate=hwCBQoSIfCarRedRemarkedBytesRate, hwCBQoSAtmPvcQueueDiscardedPackets=hwCBQoSAtmPvcQueueDiscardedPackets, hwCBQoSDAATariffLevelCfgInfoGroup=hwCBQoSDAATariffLevelCfgInfoGroup, hwCBQoSDAAStatisticsSummary=hwCBQoSDAAStatisticsSummary, hwCBQoSPolicyMatchedBytes=hwCBQoSPolicyMatchedBytes, hwCBQoSDropProfileIndex=hwCBQoSDropProfileIndex, hwCBQoSAtmPvcCbqAfQueueSize=hwCBQoSAtmPvcCbqAfQueueSize, hwCBQoSDropProfileClassCfgInfoEntry=hwCBQoSDropProfileClassCfgInfoEntry, hwCBQoSHighDropCfgInfoTable=hwCBQoSHighDropCfgInfoTable, hwCBQoSMIB=hwCBQoSMIB, hwCBQoSServiceClassNoremarkflag=hwCBQoSServiceClassNoremarkflag, hwCBQoSAtmPvcLrDelayedBytes=hwCBQoSAtmPvcLrDelayedBytes, hwCBQoSFirewallAction=hwCBQoSFirewallAction, hwCBQoSMatchMacMask=hwCBQoSMatchMacMask, hwCBQoSRemarkCfgInfoTable=hwCBQoSRemarkCfgInfoTable, hwCBQoSSamplingNum=hwCBQoSSamplingNum, hwCBQoSFrPvcStaticsObjects=hwCBQoSFrPvcStaticsObjects, hwCBQoSIfVlanClassMatchedBytes=hwCBQoSIfVlanClassMatchedBytes, hwCBQoSVlanCarDiscardedPackets=hwCBQoSVlanCarDiscardedPackets, hwCBQoSServiceClassColor=hwCBQoSServiceClassColor, hwCBQoSAtmPvcCarConformPacketsRate=hwCBQoSAtmPvcCarConformPacketsRate, hwCBQoSIfGtsRunInfoGroup=hwCBQoSIfGtsRunInfoGroup, hwCBQoSActionNotSupportAlarmGroup=hwCBQoSActionNotSupportAlarmGroup, hwCBQoSBehaviorIndexNext=hwCBQoSBehaviorIndexNext, hwCBQoSPolicyName=hwCBQoSPolicyName, hwCBQoSRuleNotSupportAlarmGroup=hwCBQoSRuleNotSupportAlarmGroup, hwCBQoSQueueType=hwCBQoSQueueType, hwCBQoSSuppressionGreenAction=hwCBQoSSuppressionGreenAction, hwCBQoSCarDroppedPackets=hwCBQoSCarDroppedPackets, hwCBQoSRemarkRowStatus=hwCBQoSRemarkRowStatus, hwCBQoSIfGtsPassedPackets=hwCBQoSIfGtsPassedPackets, hwCBQoSIfSampleRunInfoTable=hwCBQoSIfSampleRunInfoTable, hwCBQoSVlanApplyMultiPolicyTable=hwCBQoSVlanApplyMultiPolicyTable, hwCBQoSIfRemarkedPackets=hwCBQoSIfRemarkedPackets, hwCBQoSRedirectIpAddress=hwCBQoSRedirectIpAddress, hwCBQoSIfCarRedPassedBytesRate=hwCBQoSIfCarRedPassedBytesRate, hwCBQoSAtmPvcQueueRunInfoTable=hwCBQoSAtmPvcQueueRunInfoTable, hwCBQoSMatchRuleIntValue1=hwCBQoSMatchRuleIntValue1, hwCBQoSClassifierStatisticsTable=hwCBQoSClassifierStatisticsTable, hwCBQoSFrPvcQueueMatchedBytes=hwCBQoSFrPvcQueueMatchedBytes, hwCBQoSIfApplyPolicyEntry=hwCBQoSIfApplyPolicyEntry, hwCBQoSDropProfileLowLimit=hwCBQoSDropProfileLowLimit, hwCBQoSGeneral=hwCBQoSGeneral, hwCBQoSCarPassedBytes=hwCBQoSCarPassedBytes, hwCBQoSIfLrDiscardedBytes=hwCBQoSIfLrDiscardedBytes, hwCBQoSFrPvcApplyPolicyIfIndex=hwCBQoSFrPvcApplyPolicyIfIndex, hwCBQoSAtmPvcGtsDelayedPackets=hwCBQoSAtmPvcGtsDelayedPackets, hwCBQoSGroups=hwCBQoSGroups, hwCBQoSPolicyClassClassifierName=hwCBQoSPolicyClassClassifierName, hwCBQoSRuleNotSupportAlarmTable=hwCBQoSRuleNotSupportAlarmTable, hwCBQoSAtmPvcCbqRunInfoTable=hwCBQoSAtmPvcCbqRunInfoTable, hwCBQoSSubPolicyStatClassifierQueueDiscardedBytesRate=hwCBQoSSubPolicyStatClassifierQueueDiscardedBytesRate, hwCBQoSIfVlanApplyPolicyName=hwCBQoSIfVlanApplyPolicyName, hwCBQoSIfQueueMatchedBytes=hwCBQoSIfQueueMatchedBytes, hwCBQoSAtmPvcCbqEfQueueSize=hwCBQoSAtmPvcCbqEfQueueSize, hwCBQoSDropProfileType=hwCBQoSDropProfileType, hwCBQoSIfVlanClassMatchedPackets=hwCBQoSIfVlanClassMatchedPackets, hwCBQoSVsiClassMatchedPackets=hwCBQoSVsiClassMatchedPackets, DirectionType=DirectionType, hwCBQoSRedirectMULCfgInfoEntry=hwCBQoSRedirectMULCfgInfoEntry, hwCBQoSAtmPvcCarConformBytesRate=hwCBQoSAtmPvcCarConformBytesRate, hwCBQoSRemarkIpDf=hwCBQoSRemarkIpDf, hwCBQoSCarYellowAction=hwCBQoSCarYellowAction, hwCBQoSIfLrPassedBytes=hwCBQoSIfLrPassedBytes, hwCBQoSAtmPvcApplyPolicyTable=hwCBQoSAtmPvcApplyPolicyTable, hwCBQoSClassifierName=hwCBQoSClassifierName, hwCBQoSHighDropCfgInfoEntry=hwCBQoSHighDropCfgInfoEntry, hwCBQoSFrPvcApplyPolicyDirection=hwCBQoSFrPvcApplyPolicyDirection, hwCBQoSAtmPvcClassMatchRunInfoTable=hwCBQoSAtmPvcClassMatchRunInfoTable, hwCBQoSIfRedirectedBytes=hwCBQoSIfRedirectedBytes, hwCBQoSFrPvcGtsDiscardedBytes=hwCBQoSFrPvcGtsDiscardedBytes, hwCBQoSCarCfgInfoEntry=hwCBQoSCarCfgInfoEntry, hwCBQoSFrPvcQueueEnqueuedPacketsRate=hwCBQoSFrPvcQueueEnqueuedPacketsRate, hwCBQoSClassifierCfgInfoEntry=hwCBQoSClassifierCfgInfoEntry, hwCBQoSPolicyRowStatus=hwCBQoSPolicyRowStatus, hwCBQoSNestPolicyGroup=hwCBQoSNestPolicyGroup, hwCBQoSRemarkIpDfRowStatus=hwCBQoSRemarkIpDfRowStatus, hwCBQoSCarStatisticsGroup=hwCBQoSCarStatisticsGroup, hwCBQoSIfCarRedRemarkedPackets=hwCBQoSIfCarRedRemarkedPackets, hwCBQoSIfCbqAfQueueSize=hwCBQoSIfCbqAfQueueSize, hwCBQoSAtmPvcWredRandomDiscardedPackets=hwCBQoSAtmPvcWredRandomDiscardedPackets, hwCBQoSIfCarYellowPassedBytesRate=hwCBQoSIfCarYellowPassedBytesRate, hwCBQoSPolicyStatisticsClassifierGroup=hwCBQoSPolicyStatisticsClassifierGroup, hwCBQoSRedirectMULIfIndex3=hwCBQoSRedirectMULIfIndex3, hwCBQoSCarGroup=hwCBQoSCarGroup)
mibBuilder.exportSymbols("HUAWEI-CBQOS-MIB", hwCBQoSCarOverflowPacketRate=hwCBQoSCarOverflowPacketRate, hwCBQoSFrPvcWredTailDiscardedPackets=hwCBQoSFrPvcWredTailDiscardedPackets, hwCBQoSSuppressionCbs=hwCBQoSSuppressionCbs, hwCBQoSIfCarRunInfoGroup=hwCBQoSIfCarRunInfoGroup, hwCBQoSDropProfileCfgInfoEntry=hwCBQoSDropProfileCfgInfoEntry, hwCBQoSAtmPvcCbqDiscard=hwCBQoSAtmPvcCbqDiscard, hwCBQoSActionNotSupportAlarm=hwCBQoSActionNotSupportAlarm, hwCBQoSRedirectMULCtrlType=hwCBQoSRedirectMULCtrlType, hwCBQoSIfApplyMultiPolicyIfIndex=hwCBQoSIfApplyMultiPolicyIfIndex, hwCBQoSPolicyIndex=hwCBQoSPolicyIndex, hwCBQoSIfFirewallRunInfoEntry=hwCBQoSIfFirewallRunInfoEntry, hwCBQoSMultiPolicyStatClassifierUnmatchedBytes=hwCBQoSMultiPolicyStatClassifierUnmatchedBytes, hwCBQoSMirrorRowStatus=hwCBQoSMirrorRowStatus, hwCBQoSFirewallRowStatus=hwCBQoSFirewallRowStatus, hwCBQoSLrUnit=hwCBQoSLrUnit, hwCBQoSEgressGtsRowStatus=hwCBQoSEgressGtsRowStatus, hwCBQoSQueryClassifierName=hwCBQoSQueryClassifierName, hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytes=hwCBQoSSubPolicyStatClassifierQueueEnqueuedBytes, hwCBQoSBehaviorCfgInfoEntry=hwCBQoSBehaviorCfgInfoEntry, hwCBQoSCarExceededPackets=hwCBQoSCarExceededPackets, hwCBQoSIfWredTailDiscardedPackets=hwCBQoSIfWredTailDiscardedPackets, hwCBQoSSuppressionType=hwCBQoSSuppressionType, hwCBQoSMirrorCfgInfoEntry=hwCBQoSMirrorCfgInfoEntry, hwCBQoSPolicyStatClassifierMatchedBytes=hwCBQoSPolicyStatClassifierMatchedBytes, hwCBQoSMultiPolicyMatchedDropPackets=hwCBQoSMultiPolicyMatchedDropPackets, hwCBQoSAtmPvcWredTailDiscardedPackets=hwCBQoSAtmPvcWredTailDiscardedPackets, hwCBQoSPolicyStatClassifierUnmatchedBytes=hwCBQoSPolicyStatClassifierUnmatchedBytes, hwCBQoSServiceClassCfgInfoEntry=hwCBQoSServiceClassCfgInfoEntry, hwCBQoSFrPvcApplyPolicyDlciNum=hwCBQoSFrPvcApplyPolicyDlciNum, hwCBQoSDropProfileRowStatus=hwCBQoSDropProfileRowStatus, hwCBQoSFrPvcCarConformBytes=hwCBQoSFrPvcCarConformBytes, hwCBQoSSubPolicyStatClassifierCarYellowPassedPacketsRate=hwCBQoSSubPolicyStatClassifierCarYellowPassedPacketsRate, hwCBQoSIfStaticsObjects=hwCBQoSIfStaticsObjects, hwCBQoSIfCarGreenRemarkedPackets=hwCBQoSIfCarGreenRemarkedPackets, hwCBQoSIfFilteredBytes=hwCBQoSIfFilteredBytes, hwCBQoSPolicyStatisticsFlag=hwCBQoSPolicyStatisticsFlag, hwCBQoSPolicyStatisticsGroup=hwCBQoSPolicyStatisticsGroup, hwCBQoSIfClassAverageRate=hwCBQoSIfClassAverageRate, hwCBQoSPolicyClassCfgInfoTable=hwCBQoSPolicyClassCfgInfoTable, hwCBQoSIfCarYellowDiscardedPackets=hwCBQoSIfCarYellowDiscardedPackets, hwCBQoSAtmPvcLrDiscardedPackets=hwCBQoSAtmPvcLrDiscardedPackets, hwCBQoSIfUrpfDroppedPackets=hwCBQoSIfUrpfDroppedPackets, hwCBQoSFirewallCfgInfoEntry=hwCBQoSFirewallCfgInfoEntry, hwCBQoSWredType=hwCBQoSWredType, hwCBQoSDropProfileName=hwCBQoSDropProfileName, hwCBQoSIfSampleRunInfoEntry=hwCBQoSIfSampleRunInfoEntry, hwCBQoSIfRemarkedBytes=hwCBQoSIfRemarkedBytes, hwCBQoSAtmPvcApplyPolicyGroup=hwCBQoSAtmPvcApplyPolicyGroup, hwCBQoSPolicyStatisticsClassifierTable=hwCBQoSPolicyStatisticsClassifierTable, hwCBQoSCarGreenAction=hwCBQoSCarGreenAction, hwCBQoSMatchVlanBeginId=hwCBQoSMatchVlanBeginId, hwCBQoSIfCarRedPassedPacketsRate=hwCBQoSIfCarRedPassedPacketsRate, hwCBQoSPolicyUnmatchedBytes=hwCBQoSPolicyUnmatchedBytes, hwCBQoSIfLrRunInfoTable=hwCBQoSIfLrRunInfoTable, hwCBQoSWredClassDiscardProb=hwCBQoSWredClassDiscardProb)
