#
# PySNMP MIB module BayNetworks-DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BayNetworks-DNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:42:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, ObjectIdentity, NotificationType, Unsigned32, TimeTicks, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Gauge32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "ObjectIdentity", "NotificationType", "Unsigned32", "TimeTicks", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Gauge32", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfDnsGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDnsGroup")
wfDns = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1))
wfDnsDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsDelete.setDescription('Delete DNS instance')
wfDnsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsDisable.setDescription('Enables or Disables DNS Subsystem')
wfDnsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsTimeOut.setDescription('General Retransmission time-out value (seconds)')
wfDnsRexmit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsRexmit.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsRexmit.setDescription('Maximum Number of Retransmissions')
wfDnsMaxAllow = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsMaxAllow.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsMaxAllow.setDescription('Maximum Number of Outstanding queries allowed')
wfDnsIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lowdelay", 2))).clone('lowdelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsIpTos.setStatus('obsolete')
if mibBuilder.loadTexts: wfDnsIpTos.setDescription('The Type Of Service value set in the IP datagram specifies to the Internet transport layer how the datagram should be handled. For DNS packet transfers low delay is preferred')
wfDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsDomainName.setDescription('The Default Domain name')
wfDnsRecursion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsRecursion.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsRecursion.setDescription('Recursion desired verses iterative request')
wfDnsTruncation = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsTruncation.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsTruncation.setDescription('Ignore truncations errors')
wfDnsAuthOnly = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsAuthOnly.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsAuthOnly.setDescription('Use authoriatative answers only')
wfDnsDefDomain = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDefDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsDefDomain.setDescription('Use default domain name for requests')
wfDnsQueries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsQueries.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsQueries.setDescription('Total number of queries send out')
wfDnsResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsResps.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsResps.setDescription('Total number of responses received')
wfDnsNonAuthResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsNonAuthResps.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsNonAuthResps.setDescription('Number of non-authoritative (cached data) responses')
wfDnsNoData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsNoData.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsNoData.setDescription('Number of requests that contained NO_DATA (empty)')
wfDnsMartians = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsMartians.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsMartians.setDescription('Number of responses received from servers that the resolver does not think it asked')
wfDnsUnParseResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsUnParseResps.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsUnParseResps.setDescription('Number responses received that were unparseable')
wfDnsRexmitPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsRexmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsRexmitPkts.setDescription('Number of Re-transmitted packets')
wfDnsTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsTimeOuts.setDescription('Number of quries that internally timed out.')
wfDnsHostsFile = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsHostsFile.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsHostsFile.setDescription('The default hosts file')
wfDnsRcvdError = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsRcvdError.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsRcvdError.setDescription('Number of quries that were returned with an error.')
wfDnsLocalError = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsLocalError.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsLocalError.setDescription('The number of local errors which occured.')
wfDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2), )
if mibBuilder.loadTexts: wfDnsServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsServerTable.setDescription('DNS base entry table. ')
wfDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1), ).setIndexNames((0, "BayNetworks-DNS-MIB", "wfDnsServerIndex"))
if mibBuilder.loadTexts: wfDnsServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsServerEntry.setDescription('An DNS base entry description')
wfDnsServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsServerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsServerDelete.setDescription('Delete DNS Server instance')
wfDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsServerIndex.setDescription('Index of this entry. Index can only be one to three.')
wfDnsServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsServerAddr.setDescription('The IP address for DNS server.')
wfDnsServerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 4), Integer32().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsServerPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsServerPortNo.setDescription('The port the DNS server is utilizing. Default is 53.')
wfDnsProxyIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3), )
if mibBuilder.loadTexts: wfDnsProxyIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfTable.setDescription('This table contains per-interface configuration information for the DNS Proxy Server operation')
wfDnsProxyIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1), ).setIndexNames((0, "BayNetworks-DNS-MIB", "wfDnsProxyIntfAddress"))
if mibBuilder.loadTexts: wfDnsProxyIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfEntry.setDescription('a BOOTP relay agent interface description')
wfDnsProxyIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfDelete.setDescription('Create/Delete: if set to delete, the DNS Proxy Server is removed from this network interface.')
wfDnsProxyIntfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfDisable.setDescription('Enable/Disable: controls whether the DNS Proxy Server is enabled or disabled on this network interface.')
wfDnsProxyIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfState.setDescription('The state of the DNS Proxy Server on this interface.')
wfDnsProxyIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfAddress.setDescription('Network interface address for the DNS Proxy Server.')
wfDnsProxyIntfPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 5), Integer32().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfPortNo.setDescription('The port the DNS Proxy is listening. Default is 53.')
wfDnsProxyIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass-thru", 1), ("nat-translation", 2))).clone('pass-thru')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfMode.setDescription('Controls mode whether the DNS Proxy Server is operating in standard pass thru mode or translating address for Network Address Translation (NAT).')
wfDnsProxyIntfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfDomain.setDescription('The domain name for this Network Interface (NAT only).')
wfDnsProxyIntfFwdServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer1.setDescription('The first DNS Server to forward requests to for this domain.')
wfDnsProxyIntfFwdServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer2.setDescription('The second DNS Server to forward requests to for this domain.')
wfDnsProxyIntfFwdServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer3.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer3.setDescription('The third DNS Server to forward requests to for this domain.')
wfDnsProxyIntfFwdServerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 11), Integer32().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServerPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServerPortNo.setDescription('The port the DNS Fwd Server(s) are on. Default is 53.')
wfDnsProxyIntfTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfTimeOut.setDescription('General Retransmission time-out value (seconds)')
wfDnsProxyIntfRexmit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfRexmit.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfRexmit.setDescription('Maximum Number of Retransmissions')
wfDnsProxyIntfMaxAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfMaxAllow.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfMaxAllow.setDescription('Maximum Number of Outstanding queries allowed')
wfDnsProxyIntfTruncDnsAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfTruncDnsAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfTruncDnsAnswer.setDescription('Enable/Disable: controls whether the DNS Proxy Server is enabled for truncating the number of DNS answers')
wfDnsProxyIntfTruncMaxNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfTruncMaxNo.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfTruncMaxNo.setDescription('If wfDnsProxyIntfTruncDnsAnswer is set to enable, this controls the maximum number of answers returned to the requester.')
wfDnsProxyIntfCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfCacheSize.setDescription('Maximum Number Cache Entries allowed')
wfDnsProxyIntfForward = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfForward.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfForward.setDescription('Total number of queries forwarded')
wfDnsProxyIntfResps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfResps.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfResps.setDescription('Total number of responses received')
wfDnsProxyIntfDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfDropped.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfDropped.setDescription('Total number of queries dropped')
wfDnsProxyIntfMartians = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfMartians.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfMartians.setDescription('Number of responses received from servers that the DNS Proxy does not think it asked')
wfDnsProxyIntfUnParseResps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfUnParseResps.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfUnParseResps.setDescription('Number responses received that were unparseable')
wfDnsProxyIntfRexmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfRexmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfRexmitPkts.setDescription('Number of Re-transmitted packets')
wfDnsProxyIntfTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfTimeOuts.setDescription('Number of quries that internally timed out.')
wfDnsProxyIntfLocalError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfLocalError.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfLocalError.setDescription('The number of local errors which occured.')
wfDnsProxyIntfCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: wfDnsProxyIntfCacheHits.setDescription('The number of requests that were found in the local cache.')
mibBuilder.exportSymbols("BayNetworks-DNS-MIB", wfDnsDisable=wfDnsDisable, wfDnsQueries=wfDnsQueries, wfDnsServerIndex=wfDnsServerIndex, wfDnsNoData=wfDnsNoData, wfDnsProxyIntfDelete=wfDnsProxyIntfDelete, wfDnsUnParseResps=wfDnsUnParseResps, wfDnsRcvdError=wfDnsRcvdError, wfDnsProxyIntfLocalError=wfDnsProxyIntfLocalError, wfDnsProxyIntfEntry=wfDnsProxyIntfEntry, wfDnsRexmit=wfDnsRexmit, wfDnsServerEntry=wfDnsServerEntry, wfDnsProxyIntfTimeOuts=wfDnsProxyIntfTimeOuts, wfDnsProxyIntfDomain=wfDnsProxyIntfDomain, wfDnsProxyIntfRexmit=wfDnsProxyIntfRexmit, wfDnsProxyIntfResps=wfDnsProxyIntfResps, wfDnsProxyIntfForward=wfDnsProxyIntfForward, wfDns=wfDns, wfDnsProxyIntfState=wfDnsProxyIntfState, wfDnsProxyIntfUnParseResps=wfDnsProxyIntfUnParseResps, wfDnsProxyIntfMaxAllow=wfDnsProxyIntfMaxAllow, wfDnsProxyIntfTruncDnsAnswer=wfDnsProxyIntfTruncDnsAnswer, wfDnsIpTos=wfDnsIpTos, wfDnsProxyIntfFwdServer2=wfDnsProxyIntfFwdServer2, wfDnsProxyIntfTimeOut=wfDnsProxyIntfTimeOut, wfDnsTimeOut=wfDnsTimeOut, wfDnsRexmitPkts=wfDnsRexmitPkts, wfDnsServerTable=wfDnsServerTable, wfDnsMartians=wfDnsMartians, wfDnsServerDelete=wfDnsServerDelete, wfDnsDelete=wfDnsDelete, wfDnsProxyIntfFwdServer3=wfDnsProxyIntfFwdServer3, wfDnsHostsFile=wfDnsHostsFile, wfDnsProxyIntfTruncMaxNo=wfDnsProxyIntfTruncMaxNo, wfDnsProxyIntfRexmitPkts=wfDnsProxyIntfRexmitPkts, wfDnsServerPortNo=wfDnsServerPortNo, wfDnsServerAddr=wfDnsServerAddr, wfDnsProxyIntfDropped=wfDnsProxyIntfDropped, wfDnsResps=wfDnsResps, wfDnsNonAuthResps=wfDnsNonAuthResps, wfDnsAuthOnly=wfDnsAuthOnly, wfDnsProxyIntfMode=wfDnsProxyIntfMode, wfDnsProxyIntfCacheHits=wfDnsProxyIntfCacheHits, wfDnsRecursion=wfDnsRecursion, wfDnsDomainName=wfDnsDomainName, wfDnsProxyIntfTable=wfDnsProxyIntfTable, wfDnsMaxAllow=wfDnsMaxAllow, wfDnsProxyIntfMartians=wfDnsProxyIntfMartians, wfDnsProxyIntfDisable=wfDnsProxyIntfDisable, wfDnsProxyIntfPortNo=wfDnsProxyIntfPortNo, wfDnsProxyIntfCacheSize=wfDnsProxyIntfCacheSize, wfDnsTruncation=wfDnsTruncation, wfDnsLocalError=wfDnsLocalError, wfDnsProxyIntfAddress=wfDnsProxyIntfAddress, wfDnsProxyIntfFwdServer1=wfDnsProxyIntfFwdServer1, wfDnsTimeOuts=wfDnsTimeOuts, wfDnsDefDomain=wfDnsDefDomain, wfDnsProxyIntfFwdServerPortNo=wfDnsProxyIntfFwdServerPortNo)
