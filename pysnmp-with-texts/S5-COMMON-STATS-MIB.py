#
# PySNMP MIB module S5-COMMON-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-COMMON-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
s5Com, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5Com")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, Integer32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, NotificationType, ModuleIdentity, Bits, MibIdentifier, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Integer32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "NotificationType", "ModuleIdentity", "Bits", "MibIdentifier", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
s5CmStat = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1))
s5CmSNodeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1), )
if mibBuilder.loadTexts: s5CmSNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmSNodeTable.setDescription('A Table of MAC addresses of active nodes, which are detected to be connected to the concentrator. These nodes may be directly connected to the concentrator or may be indirectly connected via an interconnect port, bridge or switch. The definition of active node is provided by s5CmSNodeStatus. The object s5CmSNodeIfIndex specifies the source that is used to detect MAC addresses. When the source is not an interface, the agent uses best effort to detect entries. These entries may, but are not required to be, MACs from media types other than the interfaces for the agent. This table is indexed by source of the detection, board, port, and MAC address of the node. This table is indexed differently from the FindNodes table which uses only the source of the detection and MAC address of the node. Note: a MAC address could appear multiple times in this table (on different board and port).')
s5CmSNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1), ).setIndexNames((0, "S5-COMMON-STATS-MIB", "s5CmSNodeIfIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmSNodeBrdIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmSNodePortIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmSNodeMacAddr"))
if mibBuilder.loadTexts: s5CmSNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmSNodeEntry.setDescription('A row in the Show Node table. Entries can not be created or deleted via SNMP.')
s5CmSNodeIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeIfIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmSNodeIfIndx.setDescription("An integer value representing the source that detected the active node. A value greater than zero is the index of the agent's interface in the NMM. This is the same value as ifIndex for the interface. A value of zero indicates that the agent detected the node information via best available efforts. The nodes may be, but are note required to be, from media types other than the interfaces for the agent.")
s5CmSNodeBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeBrdIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmSNodeBrdIndx.setDescription('The index of the board. This corresponds to the index of the slot containing the board.')
s5CmSNodePortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodePortIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmSNodePortIndx.setDescription('The index of the port on the board. Its value ranges between 1 and index of the last manageable port on the board.')
s5CmSNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmSNodeMacAddr.setDescription('The MAC address of the station.')
s5CmSNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmSNodeStatus.setDescription('The status of the MAC address for a station. The meaning varies depending on the media type of the NMM reporting the status. The values are: other(1)......unknown or other active(2).....the station is actively sending and receiving, or participating in the ring poll inactive(3)...the station is idle For Ethernet, active(2) means that the station has sent a frame in the last N seconds and inactive(3) means the station has not sent a frame in the last N seconds. N is specified by the s5EnNodeInactInterval object, which is defined in the 5000 Ethernet MIB. The status of other(3) is reported when the current status of the station is unknown. For Token Ring and FDDI, the status of a station will always be reported as active(2) since it is based on being in the ring poll. When no longer in the ring poll, a station is removed from the table.')
s5CmFNodeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2), )
if mibBuilder.loadTexts: s5CmFNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmFNodeTable.setDescription('A Table of MAC addresses of active nodes, which are detected to be connected to the concentrator. These nodes may be directly connected to the concentrator or may be indirectly connected via an interconnect port, bridge or switch. The definition of active node is provided by s5CmSNodeStatus. The object s5CmSNodeIfIndex specifies the source that is used to detect MAC addresses. When the source is not an interface, the agent uses best effort to detect entries. These entries may, but are not required to be, MACs from media types other than the interfaces for the agent. This table is indexed by source of the detection and MAC address of the node. This table is indexed differently from the ShowNodes table which uses the source of the detection, board, port, and MAC address of the node. Note: The same MAC may be detected at several locations. The entry in this table is the last detected location. In addition, more than one MAC address could appear on the same board and port.')
s5CmFNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1), ).setIndexNames((0, "S5-COMMON-STATS-MIB", "s5CmFNodeIfIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmFNodeMacAddr"))
if mibBuilder.loadTexts: s5CmFNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmFNodeEntry.setDescription('A row in the Find Node table. Entries can not be created or deleted via SNMP.')
s5CmFNodeIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodeIfIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmFNodeIfIndx.setDescription("An integer value representing the source that detected the active node. A value greater than zero is the index of the agent's interface in the NMM. This is the same value as ifIndex for the interface. A value of zero indicates that the agent detected the node information via best available efforts. The nodes may be, but are note required to be, from media types other than the interfaces for the agent.")
s5CmFNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodeMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmFNodeMacAddr.setDescription('MAC address of the station.')
s5CmFNodeBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodeBrdIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmFNodeBrdIndx.setDescription('The index of the board. This corresponds to the index of the slot containing the board. The value of zero has the special meaning that the true board index value is currently unknown. Note that the syntax of this object is not identical to s5CmSNodeBrdIndx.')
s5CmFNodePortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodePortIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmFNodePortIndx.setDescription('The index of the port on the board. This corresponds to the index of one of the manageable ports on the board. The value of zero has the special meaning that the true port index value is currently unknown. Note that the syntax of this object is not identical to s5CmSNodePortIndx.')
s5CmNetAddrTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3), )
if mibBuilder.loadTexts: s5CmNetAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrTable.setDescription('A table of network layer addresses associated with MAC addresses of active nodes, which are detected to be connected to the concentrator. This table is indexed by the interface it was detected, the board and port the node is connected, the MAC address of the node and an integer index (enumerating multiple network addresses). Note: Only a small implementation determined number of network addresses are stored. The oldest one is discarded, so that the most recent one may be retained. When packet decoding is switched off entries in the network address mapping table may remain present for some time, but no new addresses are added. An network address could appear multiple times in this table (on different board and port) and can appear under different s5CmNetAddrNetIndx over time.')
s5CmNetAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1), ).setIndexNames((0, "S5-COMMON-STATS-MIB", "s5CmNetAddrIfIndex"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrBrdIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrPortIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrMacAddr"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrNetIndx"))
if mibBuilder.loadTexts: s5CmNetAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrEntry.setDescription('A row in the network address mapping table. Entries can not be created or deleted via SNMP.')
s5CmNetAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrIfIndex.setDescription('The index of the interface on the NMM on which the address was detected. This is the same as the ifIndex.')
s5CmNetAddrBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrBrdIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrBrdIndx.setDescription('The index of the board. This corresponds to the index of the slot containing the board.')
s5CmNetAddrPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrPortIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrPortIndx.setDescription('The index of the port on the board.')
s5CmNetAddrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrMacAddr.setDescription('The MAC address of the station.')
s5CmNetAddrNetIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrNetIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrNetIndx.setDescription('The sequence number of the network address.')
s5CmNetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrType.setDescription('The type of network layer address: ip(1).....an IP address as defined in RFC 791.')
s5CmNetAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrAddr.setDescription('The network layer address of the station represented in network byte-order')
s5CmNetAddrLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrLastSeen.setStatus('mandatory')
if mibBuilder.loadTexts: s5CmNetAddrLastSeen.setDescription('The value of sysUpTime at the time this network address was last seen on this interface/board/port/MAC.')
mibBuilder.exportSymbols("S5-COMMON-STATS-MIB", s5CmSNodePortIndx=s5CmSNodePortIndx, s5CmSNodeTable=s5CmSNodeTable, s5CmSNodeBrdIndx=s5CmSNodeBrdIndx, s5CmFNodeIfIndx=s5CmFNodeIfIndx, s5CmFNodeMacAddr=s5CmFNodeMacAddr, s5CmFNodeBrdIndx=s5CmFNodeBrdIndx, s5CmFNodeEntry=s5CmFNodeEntry, s5CmSNodeStatus=s5CmSNodeStatus, s5CmNetAddrTable=s5CmNetAddrTable, s5CmNetAddrAddr=s5CmNetAddrAddr, s5CmFNodeTable=s5CmFNodeTable, s5CmNetAddrBrdIndx=s5CmNetAddrBrdIndx, s5CmNetAddrNetIndx=s5CmNetAddrNetIndx, s5CmSNodeIfIndx=s5CmSNodeIfIndx, s5CmNetAddrPortIndx=s5CmNetAddrPortIndx, s5CmFNodePortIndx=s5CmFNodePortIndx, s5CmNetAddrMacAddr=s5CmNetAddrMacAddr, s5CmSNodeMacAddr=s5CmSNodeMacAddr, s5CmStat=s5CmStat, s5CmNetAddrEntry=s5CmNetAddrEntry, s5CmSNodeEntry=s5CmSNodeEntry, s5CmNetAddrIfIndex=s5CmNetAddrIfIndex, s5CmNetAddrType=s5CmNetAddrType, s5CmNetAddrLastSeen=s5CmNetAddrLastSeen)
