#
# PySNMP MIB module HPN-ICF-IPV6-ADDRESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-IPV6-ADDRESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:39:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, ObjectIdentity, NotificationType, ModuleIdentity, MibIdentifier, Bits, Integer32, IpAddress, Counter64, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "ObjectIdentity", "NotificationType", "ModuleIdentity", "MibIdentifier", "Bits", "Integer32", "IpAddress", "Counter64", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hpnicfIpv6AddrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71))
hpnicfIpv6AddrMIB.setRevisions(('2006-03-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfIpv6AddrMIB.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfIpv6AddrMIB.setLastUpdated('200603150000Z')
if mibBuilder.loadTexts: hpnicfIpv6AddrMIB.setOrganization('')
if mibBuilder.loadTexts: hpnicfIpv6AddrMIB.setContactInfo('')
if mibBuilder.loadTexts: hpnicfIpv6AddrMIB.setDescription('The MIB module for managing IPv6 address')
hpnicfIpv6AddressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1))
hpnicfIpv6AddressConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1))
hpnicfIpv6AddrSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfIpv6AddrSetTable.setReference('RFC 2456')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetTable.setDescription("The table of address information is relevant to this entity's IPv6 addresses for setting. The address information that can be read and set in this table is a subset of the address information that can be read in hpnicfIpv6AddrReadTable and ipv6AddrTable in IPV6-MIB. This table is used to configure IPv6 addresses of an interface identified by hpnicfIpv6AddrSetIfIndex. When users create or delete an entry in this table, the agent also increases or reduces a corresponding entry in the hpnicfIpv6AddrReadTable and ipv6AddrTable in IPV6-MIB. When an interface which has been assigned IPv6 address is deleted, the agent also deletes the entry corresponding to the interface in this table and hpnicfIpv6AddrReadTable. All IPv6 addresses in this table will also show in ipv6AddrTable in IPV6-MIB.")
hpnicfIpv6AddrSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrSetIfIndex"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrSetAddrType"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrSetAddr"))
if mibBuilder.loadTexts: hpnicfIpv6AddrSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetEntry.setDescription('Define the IPv6 address information.')
hpnicfIpv6AddrSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfIpv6AddrSetIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetIfIndex.setDescription("The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of RFC 1573's ifIndex.")
hpnicfIpv6AddrSetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfIpv6AddrSetAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetAddrType.setDescription("The IP address type to which this entry's address information pertains. The value must be ipv6.")
hpnicfIpv6AddrSetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpnicfIpv6AddrSetAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetAddr.setDescription("The IPv6 address to which this entry's address information pertains.")
hpnicfIpv6AddrSetPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIpv6AddrSetPfxLength.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetPfxLength.setDescription('The length of the prefix (in bits) associated with the IPv6 address of this entry.')
hpnicfIpv6AddrSetSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("assignedIp", 1), ("assignedEUI64Ip", 2), ("assignedLinklocalIp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIpv6AddrSetSourceType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetSourceType.setDescription("Indicate the type of source of IPv6 address. The value can be one of following: 'assignedIp': Assigned global/site-local IPv6 address; 'assignedEUI64Ip': Assigned global/site-local IPv6 address by using EUI-64 interface identifier; 'assignedLinklocalIp': Assigned link-local IPv6 address. The value of hpnicfIpv6AddrSetSourceType is relevant to hpnicfIpv6AddrReadSourceType and hpnicfIpv6AddrReadCatalog . For example, if the value of hpnicfIpv6AddrSetSourceType is set to 'assignedIp', then the value of hpnicfIpv6AddrReadSourceType is 'assignedIp' and the value of hpnicfIpv6AddrReadCatalog is 'global' or 'sitelocal'. The relation listed in the following table. ---------------------------------------------------------------- hpnicfIpv6Addr- | hpnicfIpv6Addr- | hpnicfIpv6Addr- SetSourceType | ReadSourceType | ReadCatalog ---------------------------------------------------------------- assignedIp | assignedIp | global or sitelocal ---------------------------------------------------------------- assignedEUI64Ip | assignedEUI64Ip | global or sitelocal ---------------------------------------------------------------- assignedLinklocalIp | assignedIp | linklocal ---------------------------------------------------------------- ")
hpnicfIpv6AddrSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIpv6AddrSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrSetRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table, only supports active(1), createAndGo(4) and destroy(6).')
hpnicfIpv6AddrReadTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfIpv6AddrReadTable.setReference('RFC 2456')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadTable.setDescription("The table of address information is relevant to this entity's IPv6 addresses for reading. This is the extension of the ipv6AddrTable in IPV6-MIB. All IPv6 addresses in this table will also show in ipv6AddrTable in IPV6-MIB.")
hpnicfIpv6AddrReadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrReadIfIndex"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrReadAddrType"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrReadAddr"))
if mibBuilder.loadTexts: hpnicfIpv6AddrReadEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadEntry.setDescription('Define the IPv6 address information.')
hpnicfIpv6AddrReadIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfIpv6AddrReadIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadIfIndex.setDescription("The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of RFC 1573's ifIndex.")
hpnicfIpv6AddrReadAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfIpv6AddrReadAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadAddrType.setDescription("The IP address type to which this entry's address information pertains. The value must be ipv6.")
hpnicfIpv6AddrReadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpnicfIpv6AddrReadAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadAddr.setDescription("The IPv6 address to which this entry's address information pertains.")
hpnicfIpv6AddrReadPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpv6AddrReadPfxLength.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadPfxLength.setDescription('The length of the prefix (in bits) associated with the IPv6 address of this entry.')
hpnicfIpv6AddrReadSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("assignedIp", 1), ("assignedEUI64Ip", 2), ("assignedAutoIp", 3), ("autoIp", 4), ("dhcpv6", 5), ("negotiate", 6), ("cluster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpv6AddrReadSourceType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadSourceType.setDescription("Indicate the type of source of IPv6 address. The value can be one of following: 'assignedIp': Assigned IPv6 address; 'assignedEUI64Ip': Assigned IPv6 address by using EUI-64 interface identifier; 'assignedAutoIp': Auto generated IPv6 address by user setting; 'autoIp': Auto generated IPv6 address as a result of non-linklocal anycast/unicast address configuration; 'dhcpv6': Assigned IPv6 address through DHCPv6 protocol; 'negotiate': Assigned IPv6 address through negotiation; 'cluster': Assigned IPv6 address through cluster module.")
hpnicfIpv6AddrReadCatalog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nodelocal", 1), ("linklocal", 2), ("sitelocal", 3), ("orglocal", 4), ("global", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpv6AddrReadCatalog.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpv6AddrReadCatalog.setDescription("Indicate the category of the IPv6 address. The value can be one of following: 'nodelocal': node-local scope; 'linklocal': link-local scope; 'sitelocal': site-local scope; 'orglocal': organization-local scope; 'global': global scope. ")
mibBuilder.exportSymbols("HPN-ICF-IPV6-ADDRESS-MIB", hpnicfIpv6AddrReadIfIndex=hpnicfIpv6AddrReadIfIndex, hpnicfIpv6AddrSetIfIndex=hpnicfIpv6AddrSetIfIndex, hpnicfIpv6AddressConfig=hpnicfIpv6AddressConfig, hpnicfIpv6AddrReadEntry=hpnicfIpv6AddrReadEntry, hpnicfIpv6AddrSetTable=hpnicfIpv6AddrSetTable, hpnicfIpv6AddrSetEntry=hpnicfIpv6AddrSetEntry, hpnicfIpv6AddrReadSourceType=hpnicfIpv6AddrReadSourceType, hpnicfIpv6AddrSetAddrType=hpnicfIpv6AddrSetAddrType, hpnicfIpv6AddrReadPfxLength=hpnicfIpv6AddrReadPfxLength, hpnicfIpv6AddrReadAddr=hpnicfIpv6AddrReadAddr, hpnicfIpv6AddrSetAddr=hpnicfIpv6AddrSetAddr, hpnicfIpv6AddrReadAddrType=hpnicfIpv6AddrReadAddrType, hpnicfIpv6AddrMIB=hpnicfIpv6AddrMIB, hpnicfIpv6AddrSetPfxLength=hpnicfIpv6AddrSetPfxLength, hpnicfIpv6AddrSetSourceType=hpnicfIpv6AddrSetSourceType, hpnicfIpv6AddrReadCatalog=hpnicfIpv6AddrReadCatalog, hpnicfIpv6AddrReadTable=hpnicfIpv6AddrReadTable, hpnicfIpv6AddressObjects=hpnicfIpv6AddressObjects, PYSNMP_MODULE_ID=hpnicfIpv6AddrMIB, hpnicfIpv6AddrSetRowStatus=hpnicfIpv6AddrSetRowStatus)
