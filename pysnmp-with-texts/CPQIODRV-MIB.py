#
# PySNMP MIB module CPQIODRV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQIODRV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, Unsigned32, MibIdentifier, Integer32, TimeTicks, NotificationType, Counter64, NotificationType, IpAddress, ModuleIdentity, Counter32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "Unsigned32", "MibIdentifier", "Integer32", "TimeTicks", "NotificationType", "Counter64", "NotificationType", "IpAddress", "ModuleIdentity", "Counter32", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqIoDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172))
cpqIoDrvMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 1))
cpqIoDrvComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2))
cpqIoDrvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 1))
cpqIoDrvExtn = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 2))
cpqIoDrvCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 3))
cpqIoDrvWrite = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 4))
cpqIoDrvTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 5))
cpqIoDrvProc = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 172, 2, 6))
cpqIoDrvMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 172, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvMibRevMajor.setDescription('Major MIB revision. This will increment when incompatible structural changes occur.')
cpqIoDrvMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 172, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvMibRevMinor.setDescription('Minor MIB revision. This will increment when minor additions occur.')
cpqIoDrvMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 172, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvMibCondition.setDescription('The overall condition (status) of the system represented by this MIB.')
cpqIoDrvInfoTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1), )
if mibBuilder.loadTexts: cpqIoDrvInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoTable.setDescription('There will be an entry in this table for each IO Drive installed.')
cpqIoDrvInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvInfoIndex"))
if mibBuilder.loadTexts: cpqIoDrvInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoEntry.setDescription('Each entry represents an IO Drive device in system.')
cpqIoDrvInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoIndex.setDescription('Unique number index for each IO Drive entries.')
cpqIoDrvInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoStatus.setDescription('The overall status of the unique IO Drive device.')
cpqIoDrvInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvInfoName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoName.setDescription('System control device name for this IO Drive.')
cpqIoDrvInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoSerialNumber.setDescription('IO Drive serial number.')
cpqIoDrvInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPartNumber.setDescription('IO Drive part number.')
cpqIoDrvInfoSubVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoSubVendorPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoSubVendorPartNumber.setDescription('Sub-vendor system part number of this device.')
cpqIoDrvInfoSparesPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoSparesPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoSparesPartNumber.setDescription('The spares part number of this IO Drive.')
cpqIoDrvInfoAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoAssemblyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoAssemblyNumber.setDescription('The assembly number of this IO Drive (HW revision).')
cpqIoDrvInfoFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoFirmwareVersion.setDescription('IO Drive firmware version.')
cpqIoDrvInfoDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoDriverVersion.setDescription('Device driver version of this IO Drive.')
cpqIoDrvInfoUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoUID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoUID.setDescription('IO Drive UID written at format time.')
cpqIoDrvInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("detached", 1), ("attached", 2), ("minimal", 3), ("error", 4), ("detaching", 5), ("attaching", 6), ("scanning", 7), ("formatting", 8), ("updating", 9), ("attach", 10), ("detach", 11), ("format", 12), ("update", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoState.setDescription("The current state of the attached client device. In order to function normally, the device must be in the 'attached' state. Quiescent states: attached = device is ready for normal use detached = device is stopped minimal = driver loaded but firmware needs updating error = device is not working properly Transitional states: attaching = device is initializing scanning = part of device initialization detaching = device is stopping formatting = the format operation is in process updating = the firmware is being updated Operations: attach = make device operational detach = take device off-line format = re-formats device update = firmware update Device state must be minimal or detached to update the firmware and must be detached in order format.")
cpqIoDrvInfoClientDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoClientDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoClientDeviceName.setDescription('The name of the attached client device.')
cpqIoDrvInfoBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvInfoBeacon.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoBeacon.setDescription('Writing a true value here will turn on the LED flashing beacon for visual card identification. A false value will turn the LED beacon off.')
cpqIoDrvInfoPCIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCIAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPCIAddress.setDescription('IO Drive address on the PCI bus.')
cpqIoDrvInfoPCIDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCIDeviceID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPCIDeviceID.setDescription('IO Drive PCI ID.')
cpqIoDrvInfoPCISubdeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCISubdeviceID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPCISubdeviceID.setDescription('The PCI subdevice ID of this IO Drive.')
cpqIoDrvInfoPCIVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCIVendorID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPCIVendorID.setDescription('The subvendor ID of this IO Drive.')
cpqIoDrvInfoPCISubvendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCISubvendorID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPCISubvendorID.setDescription('The subvendor ID of this IO Drive.')
cpqIoDrvInfoPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPCISlot.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPCISlot.setDescription('The PCI slot number of this IO Drive.')
cpqIoDrvInfoWearoutIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoWearoutIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoWearoutIndicator.setDescription('A true condition indicates that the device has surpassed the wearout threshold.')
cpqIoDrvInfoFlashbackIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoFlashbackIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoFlashbackIndicator.setDescription('A true condition indicates that flashback redundancy is degraded.')
cpqIoDrvInfoNonWritableIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoNonWritableIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoNonWritableIndicator.setDescription('A true condition indicates that the device is no longer writable because it has surpassed the read-only threshold..')
cpqIoDrvInfoCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoCurrentTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoCurrentTemp.setDescription('The current temperature of the device in Celsius.')
cpqIoDrvInfoPercentLifeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoPercentLifeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoPercentLifeRemaining.setDescription('An estimate of the health of the drive expressed as the remaining percentage of drive life.')
cpqIoDrvInfoShortTermWearoutDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoShortTermWearoutDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoShortTermWearoutDate.setDescription('The date that the drive is estimated to reach the wearout threshold based on drive usage in the short-term interval.')
cpqIoDrvInfoLongTermWearoutDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoLongTermWearoutDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoLongTermWearoutDate.setDescription('The date that the drive is estimated to reach the wearout threshold based on drive usage in the long-term interval.')
cpqIoDrvInfoShortTermNonWritableDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoShortTermNonWritableDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoShortTermNonWritableDate.setDescription('The date that the drive is estimated to go non-writable based on drive usage in the short-term interval.')
cpqIoDrvInfoLongTermNonWritableDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 1, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvInfoLongTermNonWritableDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvInfoLongTermNonWritableDate.setDescription('The date that the drive is estimated to go non-writable based on drive usage in the long-term interval.')
cpqIoDrvExtnTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1), )
if mibBuilder.loadTexts: cpqIoDrvExtnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnTable.setDescription('This table is extension of IO Drive information.')
cpqIoDrvExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvExtnIndex"))
if mibBuilder.loadTexts: cpqIoDrvExtnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnEntry.setDescription('Addiotnal Informaiton about IO Drive will be populated in this table.')
cpqIoDrvExtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnIndex.setDescription('Unique number index for each IO Drive extension entries. There will be one-one mapping between cpqIoDrvExtnIndex and cpqIoDrvInfoIndex.')
cpqIoDrvExtnTotalPhysicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalPhysicalCapacityU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnTotalPhysicalCapacityU.setDescription('The upper word of the total physical capacity in bytes.')
cpqIoDrvExtnTotalPhysicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalPhysicalCapacityL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnTotalPhysicalCapacityL.setDescription('The lower word of the total physical capacity in bytes.')
cpqIoDrvExtnUsablePhysicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsablePhysicalCapacityU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnUsablePhysicalCapacityU.setDescription('The upper word of the usable physical capacity in bytes. This is space that is holding valid data, is erased and ready for writing or waiting to be reclaimed via garbage collection.')
cpqIoDrvExtnUsablePhysicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsablePhysicalCapacityL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnUsablePhysicalCapacityL.setDescription('The lower word of the usable physical capacity in bytes. This is space that is holding valid data, is erased and ready for writing or waiting to be reclaimed via garbage collection.')
cpqIoDrvExtnUsedPhysicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsedPhysicalCapacityU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnUsedPhysicalCapacityU.setDescription('The upper word used physical capacity in bytes. This is the space holding valid, current data.')
cpqIoDrvExtnUsedPhysicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnUsedPhysicalCapacityL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnUsedPhysicalCapacityL.setDescription('The lower word used physical capacity in bytes. This is the space holding valid, current data.')
cpqIoDrvExtnTotalLogicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalLogicalCapacityU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnTotalLogicalCapacityU.setDescription('The upper word of the total logical capacity in bytes as formatted.')
cpqIoDrvExtnTotalLogicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnTotalLogicalCapacityL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnTotalLogicalCapacityL.setDescription('The lower word of the total logical capacity in bytes as formatted.')
cpqIoDrvExtnAvailableLogicalCapacityU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnAvailableLogicalCapacityU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnAvailableLogicalCapacityU.setDescription('The upper word of the available logical capacity in bytes.')
cpqIoDrvExtnAvailableLogicalCapacityL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnAvailableLogicalCapacityL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnAvailableLogicalCapacityL.setDescription('The lower word of the available logical capacity in bytes.')
cpqIoDrvExtnBytesReadU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnBytesReadU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnBytesReadU.setDescription('The upper word of the total number of bytes read since the device was formatted.')
cpqIoDrvExtnBytesReadL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnBytesReadL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnBytesReadL.setDescription('The lower word of the total number of bytes read since the device was formatted.')
cpqIoDrvExtnPhysicalBytesWrittenU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnPhysicalBytesWrittenU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnPhysicalBytesWrittenU.setDescription('The upper word of the total physical bytes written.')
cpqIoDrvExtnPhysicalBytesWrittenL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnPhysicalBytesWrittenL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnPhysicalBytesWrittenL.setDescription('The lower word of the total physical bytes written.')
cpqIoDrvExtnLogicalBytesWrittenU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnLogicalBytesWrittenU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLogicalBytesWrittenU.setDescription('The upper word of the number of user data bytes written.')
cpqIoDrvExtnLogicalBytesWrittenL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvExtnLogicalBytesWrittenL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLogicalBytesWrittenL.setDescription('The lower word of the number of user data bytes written.')
cpqIoDrvExtnShortTermStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermStartDate.setDescription('The start date used to characterize short-term drive usage.')
cpqIoDrvExtnShortTermWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermWindow.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermWindow.setDescription('The number of hours in the short-term usage characterization window. If this value is non-zero, then the short-term start date will automatically track with the short-term end date by the number of hours specified.')
cpqIoDrvExtnShortTermEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermEndDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermEndDate.setDescription('The end date used to characterize short-term drive usage.')
cpqIoDrvExtnShortTermEndDateFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermEndDateFloat.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermEndDateFloat.setDescription('Set this variable true to automatically have the short-term end date automatically updated to the present date.')
cpqIoDrvExtnLongTermStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermStartDate.setDescription('The start date used to characterize long-term drive usage.')
cpqIoDrvExtnLongTermWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermWindow.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermWindow.setDescription('The number of hours in the long-term usage characterization window. If this value is non-zero, then the long-term start date will automatically track with the long-term end date by the number of hours specified.')
cpqIoDrvExtnLongTermEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermEndDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermEndDate.setDescription('The end date used to characterize long-term drive usage.')
cpqIoDrvExtnLongTermEndDateFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermEndDateFloat.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermEndDateFloat.setDescription('Set this variable true to automatically have the long-term end date automatically updated to the present date.')
cpqIoDrvExtnWriteRateAutoCalc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnWriteRateAutoCalc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnWriteRateAutoCalc.setDescription('Set this true to automatically calculate the long-term and short-term average write rate based on the start and end dates selected. Otherwise, the average write rate must be set manually.')
cpqIoDrvExtnShortTermAvgU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermAvgU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermAvgU.setDescription('The upper word of the short-term average write rate used to characterize drive usage. This will be automatically calculated based on short-term start and end dates if the auto calc value is true.')
cpqIoDrvExtnShortTermAvgL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermAvgL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnShortTermAvgL.setDescription('The lower word of the short-term average write rate used to characterize drive usage. This will be automatically calculated based on short-term start and end dates if the auto calc value is true.')
cpqIoDrvExtnLongTermAvgU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermAvgU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermAvgU.setDescription('The upper word of the long-term average write rate used to characterize drive usage. This will be automatically calculated based on long-term start and end dates if the auto calc value is true.')
cpqIoDrvExtnLongTermAvgL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermAvgL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnLongTermAvgL.setDescription('The lower word of the long-term average write rate used to characterize drive usage. This will be automatically calculated based on long-term start and end dates if the auto calc value is true.')
cpqIoDrvExtnConfidenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqIoDrvExtnConfidenceInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvExtnConfidenceInterval.setDescription('This defines the confidence interval used to calculate the wearout and non-writable dates. Expressed as a percentage, this value reflects the confidence in the short and long-term averages used to characterize drive usage.')
cpqIoDrvCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1), )
if mibBuilder.loadTexts: cpqIoDrvCapacityTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvCapacityTable.setDescription('This table will describe the physical capacity of IO Drive.')
cpqIoDrvCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvCapacityInfoIndex"), (0, "CPQIODRV-MIB", "cpqIoDrvCapacityIndex"))
if mibBuilder.loadTexts: cpqIoDrvCapacityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvCapacityEntry.setDescription('Defines an entry of the usable physical capacity table')
cpqIoDrvCapacityInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvCapacityInfoIndex.setDescription('The ioDrive index. This correlates to the drive index in the info table.')
cpqIoDrvCapacityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvCapacityIndex.setDescription('Unique index for the usable physical capacity log.')
cpqIoDrvCapacityValueU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityValueU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvCapacityValueU.setDescription('The upper word of the physical usable capacity at this point in time')
cpqIoDrvCapacityValueL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityValueL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvCapacityValueL.setDescription('The lower word of the physical usable capacity at this point in time')
cpqIoDrvCapacityTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvCapacityTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvCapacityTimestamp.setDescription('The time stamp entry.')
cpqIoDrvWriteTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1), )
if mibBuilder.loadTexts: cpqIoDrvWriteTable.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvWriteTable.setDescription('This table will keep the history of writes on the IO Drive')
cpqIoDrvWriteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvWriteInfoIndex"), (0, "CPQIODRV-MIB", "cpqIoDrvWriteIndex"))
if mibBuilder.loadTexts: cpqIoDrvWriteEntry.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvWriteEntry.setDescription('A log of write volume history.')
cpqIoDrvWriteInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvWriteInfoIndex.setDescription('The ioDrive index. This correlates with the index in the info table.')
cpqIoDrvWriteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvWriteIndex.setDescription('Unique index for this write volume entry.')
cpqIoDrvWriteValueU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteValueU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvWriteValueU.setDescription('The upper word of the total physical number of bytes written at a given moment in time.')
cpqIoDrvWriteValueL = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteValueL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvWriteValueL.setDescription('The lower word of the total physical number of bytes written at a given moment in time.')
cpqIoDrvWriteTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvWriteTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvWriteTimestamp.setDescription('The time stamp entryfor this value.')
cpqIoDrvTempTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1), )
if mibBuilder.loadTexts: cpqIoDrvTempTable.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvTempTable.setDescription('IO Drive temperature history table.')
cpqIoDrvTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvTempInfoIndex"), (0, "CPQIODRV-MIB", "cpqIoDrvTempIndex"))
if mibBuilder.loadTexts: cpqIoDrvTempEntry.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvTempEntry.setDescription('Log of IO Drive temperature.')
cpqIoDrvTempInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvTempInfoIndex.setDescription('The device index. This correlates to the index in the info table.')
cpqIoDrvTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvTempIndex.setDescription('Unique index for this temperature log entry.')
cpqIoDrvTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempValue.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvTempValue.setDescription('The current temperature of the device in Celsius.')
cpqIoDrvTempTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvTempTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvTempTimestamp.setDescription('The timestamp for this entry.')
cpqIoDrvProcTable = MibTable((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1), )
if mibBuilder.loadTexts: cpqIoDrvProcTable.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvProcTable.setDescription('A table of processes that support IO Drive operation.')
cpqIoDrvProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1), ).setIndexNames((0, "CPQIODRV-MIB", "cpqIoDrvProcIndex"))
if mibBuilder.loadTexts: cpqIoDrvProcEntry.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvProcEntry.setDescription('Each entry represents a process in the table.')
cpqIoDrvProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqIoDrvProcIndex.setDescription('A unique index for each process.')
cpqIoDrvProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvProcName.setDescription('The process name.')
cpqIoDrvProcState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvProcState.setDescription('The process state.')
cpqIoDrvProcRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcRAM.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvProcRAM.setDescription('The bytes of RAM currently in use by the process.')
cpqIoDrvProcCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 172, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqIoDrvProcCPU.setStatus('mandatory')
if mibBuilder.loadTexts: cpqIoDrvProcCPU.setDescription('The overall percentage of CPU usage.')
cpqIoDrvWearoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoWearoutIndicator"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
if mibBuilder.loadTexts: cpqIoDrvWearoutTrap.setDescription('IO Drive begins to wear out. This trap signifies that the agent has detected a wear out of IO Drive configured with your system.')
cpqIoDrvNonWritableTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoNonWritableIndicator"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
if mibBuilder.loadTexts: cpqIoDrvNonWritableTrap.setDescription('IO Drive is not writeable due to excessive wear This trap signifies that IO Drive configured with system is not writeable due to excessive wear. User Action: Replace the existing IO Drive to make it writable.')
cpqIoDrvFlashbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoFlashbackIndicator"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
if mibBuilder.loadTexts: cpqIoDrvFlashbackTrap.setDescription('IO Drive flashback protection becomes degraded This trap signifies that IO Drive flashback protection configured with system is degraded.')
cpqIoDrvTempHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoCurrentTemp"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
if mibBuilder.loadTexts: cpqIoDrvTempHighTrap.setDescription('Temperature sensor of IO Drive surpasses the threshold. This trap signifies that the temperature sensor of IO Drive configured with system surpasses the threshold configured.')
cpqIoDrvTempOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoCurrentTemp"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
if mibBuilder.loadTexts: cpqIoDrvTempOkTrap.setDescription('Temperature sensor of IO Drive set below threshold. This trap signifies that the temperature sensor of IO Drive configured with system surpasses the threshold configured.')
cpqIoDrvErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,172006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQIODRV-MIB", "cpqIoDrvInfoState"), ("CPQIODRV-MIB", "cpqIoDrvInfoIndex"), ("CPQIODRV-MIB", "cpqIoDrvInfoName"), ("CPQIODRV-MIB", "cpqIoDrvInfoFirmwareVersion"), ("CPQIODRV-MIB", "cpqIoDrvInfoSparesPartNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoSerialNumber"), ("CPQIODRV-MIB", "cpqIoDrvInfoPCISlot"))
if mibBuilder.loadTexts: cpqIoDrvErrorTrap.setDescription('IO Drive is in an error state.')
mibBuilder.exportSymbols("CPQIODRV-MIB", cpqIoDrvExtnShortTermAvgL=cpqIoDrvExtnShortTermAvgL, cpqIoDrvCapacityInfoIndex=cpqIoDrvCapacityInfoIndex, cpqIoDrvExtnLongTermStartDate=cpqIoDrvExtnLongTermStartDate, cpqIoDrvExtnLongTermAvgL=cpqIoDrvExtnLongTermAvgL, cpqIoDrvExtn=cpqIoDrvExtn, cpqIoDrvTempHighTrap=cpqIoDrvTempHighTrap, cpqIoDrvInfoIndex=cpqIoDrvInfoIndex, cpqIoDrvComponent=cpqIoDrvComponent, cpqIoDrvExtnEntry=cpqIoDrvExtnEntry, cpqIoDrvInfoPCIDeviceID=cpqIoDrvInfoPCIDeviceID, cpqIoDrvWriteValueU=cpqIoDrvWriteValueU, cpqIoDrvWriteEntry=cpqIoDrvWriteEntry, cpqIoDrvTempOkTrap=cpqIoDrvTempOkTrap, cpqIoDrvExtnBytesReadL=cpqIoDrvExtnBytesReadL, cpqIoDrvProc=cpqIoDrvProc, cpqIoDrvProcCPU=cpqIoDrvProcCPU, cpqIoDrvInfoUID=cpqIoDrvInfoUID, cpqIoDrvInfoPCISubdeviceID=cpqIoDrvInfoPCISubdeviceID, cpqIoDrvProcRAM=cpqIoDrvProcRAM, cpqIoDrvExtnLongTermEndDate=cpqIoDrvExtnLongTermEndDate, cpqIoDrvCapacityValueL=cpqIoDrvCapacityValueL, cpqIoDrvInfoAssemblyNumber=cpqIoDrvInfoAssemblyNumber, cpqIoDrvExtnShortTermStartDate=cpqIoDrvExtnShortTermStartDate, cpqIoDrvExtnConfidenceInterval=cpqIoDrvExtnConfidenceInterval, cpqIoDrvCapacityIndex=cpqIoDrvCapacityIndex, cpqIoDrvWearoutTrap=cpqIoDrvWearoutTrap, cpqIoDrvExtnIndex=cpqIoDrvExtnIndex, cpqIoDrvTempTable=cpqIoDrvTempTable, cpqIoDrvTempInfoIndex=cpqIoDrvTempInfoIndex, cpqIoDrvInfoSubVendorPartNumber=cpqIoDrvInfoSubVendorPartNumber, cpqIoDrvInfoShortTermNonWritableDate=cpqIoDrvInfoShortTermNonWritableDate, cpqIoDrvExtnTotalPhysicalCapacityL=cpqIoDrvExtnTotalPhysicalCapacityL, cpqIoDrvInfoFirmwareVersion=cpqIoDrvInfoFirmwareVersion, cpqIoDrvInfoShortTermWearoutDate=cpqIoDrvInfoShortTermWearoutDate, cpqIoDrvExtnShortTermWindow=cpqIoDrvExtnShortTermWindow, cpqIoDrvProcTable=cpqIoDrvProcTable, cpqIoDrvInfoPCISubvendorID=cpqIoDrvInfoPCISubvendorID, cpqIoDrvExtnLogicalBytesWrittenL=cpqIoDrvExtnLogicalBytesWrittenL, cpqIoDrvInfoName=cpqIoDrvInfoName, cpqIoDrvExtnLongTermWindow=cpqIoDrvExtnLongTermWindow, cpqIoDrvInfoLongTermWearoutDate=cpqIoDrvInfoLongTermWearoutDate, cpqIoDrv=cpqIoDrv, cpqIoDrvInfoWearoutIndicator=cpqIoDrvInfoWearoutIndicator, cpqIoDrvInfoNonWritableIndicator=cpqIoDrvInfoNonWritableIndicator, cpqIoDrvExtnAvailableLogicalCapacityU=cpqIoDrvExtnAvailableLogicalCapacityU, cpqIoDrvCapacity=cpqIoDrvCapacity, cpqIoDrvInfoPCISlot=cpqIoDrvInfoPCISlot, cpqIoDrvExtnAvailableLogicalCapacityL=cpqIoDrvExtnAvailableLogicalCapacityL, cpqIoDrvExtnPhysicalBytesWrittenL=cpqIoDrvExtnPhysicalBytesWrittenL, cpqIoDrvWriteTimestamp=cpqIoDrvWriteTimestamp, cpqIoDrvWriteIndex=cpqIoDrvWriteIndex, cpqIoDrvFlashbackTrap=cpqIoDrvFlashbackTrap, cpqIoDrvErrorTrap=cpqIoDrvErrorTrap, cpqIoDrvCapacityValueU=cpqIoDrvCapacityValueU, cpqIoDrvNonWritableTrap=cpqIoDrvNonWritableTrap, cpqIoDrvInfoPCIAddress=cpqIoDrvInfoPCIAddress, cpqIoDrvExtnBytesReadU=cpqIoDrvExtnBytesReadU, cpqIoDrvExtnUsablePhysicalCapacityL=cpqIoDrvExtnUsablePhysicalCapacityL, cpqIoDrvCapacityEntry=cpqIoDrvCapacityEntry, cpqIoDrvInfoCurrentTemp=cpqIoDrvInfoCurrentTemp, cpqIoDrvMibRevMajor=cpqIoDrvMibRevMajor, cpqIoDrvInfoTable=cpqIoDrvInfoTable, cpqIoDrvInfoClientDeviceName=cpqIoDrvInfoClientDeviceName, cpqIoDrvInfoBeacon=cpqIoDrvInfoBeacon, cpqIoDrvExtnShortTermEndDateFloat=cpqIoDrvExtnShortTermEndDateFloat, cpqIoDrvMibRevMinor=cpqIoDrvMibRevMinor, cpqIoDrvExtnTotalPhysicalCapacityU=cpqIoDrvExtnTotalPhysicalCapacityU, cpqIoDrvExtnUsedPhysicalCapacityL=cpqIoDrvExtnUsedPhysicalCapacityL, cpqIoDrvMibRev=cpqIoDrvMibRev, cpqIoDrvExtnUsedPhysicalCapacityU=cpqIoDrvExtnUsedPhysicalCapacityU, cpqIoDrvWriteValueL=cpqIoDrvWriteValueL, cpqIoDrvProcIndex=cpqIoDrvProcIndex, cpqIoDrvExtnUsablePhysicalCapacityU=cpqIoDrvExtnUsablePhysicalCapacityU, cpqIoDrvExtnLongTermEndDateFloat=cpqIoDrvExtnLongTermEndDateFloat, cpqIoDrvInfoDriverVersion=cpqIoDrvInfoDriverVersion, cpqIoDrvTemp=cpqIoDrvTemp, cpqIoDrvExtnTable=cpqIoDrvExtnTable, cpqIoDrvTempValue=cpqIoDrvTempValue, cpqIoDrvInfoPartNumber=cpqIoDrvInfoPartNumber, cpqIoDrvInfoSparesPartNumber=cpqIoDrvInfoSparesPartNumber, cpqIoDrvExtnShortTermEndDate=cpqIoDrvExtnShortTermEndDate, cpqIoDrvWriteInfoIndex=cpqIoDrvWriteInfoIndex, cpqIoDrvTempTimestamp=cpqIoDrvTempTimestamp, cpqIoDrvInfoSerialNumber=cpqIoDrvInfoSerialNumber, cpqIoDrvCapacityTimestamp=cpqIoDrvCapacityTimestamp, cpqIoDrvExtnLogicalBytesWrittenU=cpqIoDrvExtnLogicalBytesWrittenU, cpqIoDrvInfoStatus=cpqIoDrvInfoStatus, cpqIoDrvWriteTable=cpqIoDrvWriteTable, cpqIoDrvInfoPercentLifeRemaining=cpqIoDrvInfoPercentLifeRemaining, cpqIoDrvCapacityTable=cpqIoDrvCapacityTable, cpqIoDrvExtnShortTermAvgU=cpqIoDrvExtnShortTermAvgU, cpqIoDrvExtnWriteRateAutoCalc=cpqIoDrvExtnWriteRateAutoCalc, cpqIoDrvInfoFlashbackIndicator=cpqIoDrvInfoFlashbackIndicator, cpqIoDrvProcEntry=cpqIoDrvProcEntry, cpqIoDrvInfoEntry=cpqIoDrvInfoEntry, cpqIoDrvExtnTotalLogicalCapacityU=cpqIoDrvExtnTotalLogicalCapacityU, cpqIoDrvExtnLongTermAvgU=cpqIoDrvExtnLongTermAvgU, cpqIoDrvProcState=cpqIoDrvProcState, cpqIoDrvTempIndex=cpqIoDrvTempIndex, cpqIoDrvInfoLongTermNonWritableDate=cpqIoDrvInfoLongTermNonWritableDate, cpqIoDrvTempEntry=cpqIoDrvTempEntry, cpqIoDrvInfoState=cpqIoDrvInfoState, cpqIoDrvMibCondition=cpqIoDrvMibCondition, cpqIoDrvExtnPhysicalBytesWrittenU=cpqIoDrvExtnPhysicalBytesWrittenU, cpqIoDrvInfo=cpqIoDrvInfo, cpqIoDrvWrite=cpqIoDrvWrite, cpqIoDrvInfoPCIVendorID=cpqIoDrvInfoPCIVendorID, cpqIoDrvProcName=cpqIoDrvProcName, cpqIoDrvExtnTotalLogicalCapacityL=cpqIoDrvExtnTotalLogicalCapacityL)
