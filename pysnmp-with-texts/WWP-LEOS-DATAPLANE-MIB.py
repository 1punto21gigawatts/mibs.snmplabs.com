#
# PySNMP MIB module WWP-LEOS-DATAPLANE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-DATAPLANE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, TimeTicks, Counter32, iso, Gauge32, NotificationType, Unsigned32, ModuleIdentity, ObjectIdentity, Integer32, MibIdentifier, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Counter32", "iso", "Gauge32", "NotificationType", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibIdentifier", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosDataplaneMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500))
wwpLeosDataplaneMIB.setRevisions(('2012-06-08 00:50', '2011-06-13 00:50', '2011-05-10 00:50', '2010-07-28 00:00', '2010-02-12 00:00', '2008-11-11 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosDataplaneMIB.setRevisionsDescriptions(('Added Mpls Tc via wwpLeosDpTsMplsTcCosMapTable and wwpLeosDpTsFrameCosMap', 'Added Egress Queue stats via wwpLeosDpTsQEgressPortQueueGroupQStatsTable ', 'Added Egress Frame Cos Map OBJECTS like wwpLeosDpTsFrameCosMapProfileTable wwpLeosDpTsFrameCosMapEntry to MIB', 'Added green and yellow simple WRED curves for 5150', 'This MIB module is the Dataplane Management for WWP Products', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosDataplaneMIB.setLastUpdated('201206080050Z')
if mibBuilder.loadTexts: wwpLeosDataplaneMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosDataplaneMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosDataplaneMIB.setDescription('Changed port shaper burst size limits and per COS cbs and ebs limits ')
class DpTsQSredDropProbability(TextualConvention, Integer32):
    description = 'Drop Probability for Raven SRED platform. Numbers below indicate % value '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("drop-100-percent", 1), ("drop-6-25-percent", 2), ("drop-3-125-percent", 3), ("drop-1-5625-percent", 4), ("drop-0-78125-percent", 5), ("drop-0-390625-percent", 6), ("drop-0-1953125-percent", 7), ("drop-0-0976562-percent", 8))

class DpTsQWredSimpleMaxDropProbability(TextualConvention, Integer32):
    description = 'Max Drop probability for Triumph Weighted RED platform. Numbers below indicate percentage value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("drop-100-percent", 1), ("drop-75-percent", 2), ("drop-50-percent", 3), ("drop-25-percent", 4), ("drop-10-percent", 5), ("drop-9-percent", 6), ("drop-8-percent", 7), ("drop-7-percent", 8), ("drop-6-percent", 9), ("drop-5-percent", 10), ("drop-4-percent", 11), ("drop-3-percent", 12), ("drop-2-percent", 13), ("drop-1-percent", 14), ("drop-0-percent", 15))

class DpTsRCosMappingColor(TextualConvention, Integer32):
    description = 'Resolved Color for use in ingress and egress table settings percentage value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("green", 1), ("yellow", 2))

wwpLeosDpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1))
wwpLeosDpTs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1))
wwpLeosDpTsQueuing = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1))
wwpLeosDpTsQCongestionAvoidanceProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1))
wwpLeosDpTsQEgressPortQueueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2))
wwpLeosDpTsQRcosToCosQueueMap = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3))
wwpLeosDpTsCosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2))
wwpLeosDpTsFrameCosMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3))
wwpLeosDpTsQCAProfileSREDTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDTable.setDescription(' The (conceptual) table listing configuration parameters of congestion Avoidance profile for SRED type of congestion Avoidance Profile type.')
wwpLeosDpTsQCAProfileSREDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQCAProfileSREDId"))
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDEntry.setDescription('An entry (conceptual row) in the wwpLeosDpTsQCAProfileSREDTable.')
wwpLeosDpTsQCAProfileSREDId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDId.setDescription('The Profile Id')
wwpLeosDpTsQCAProfileSREDName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDName.setDescription('The congestion Avoidance Profile name.')
wwpLeosDpTsQCAProfileSREDGreenThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDGreenThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDGreenThreshold.setDescription('The green threshold value for this profile above which all green frames would be dropped.')
wwpLeosDpTsQCAProfileSREDGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1, 5), DpTsQSredDropProbability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDGreenDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDGreenDropProbability.setDescription('The drop probability value in percentage. This indicates the percentage of green frames to be dropped.')
wwpLeosDpTsQCAProfileSREDYellowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDYellowThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDYellowThreshold.setDescription('The yellow threshold value for this profile above which all green frames would be dropped.')
wwpLeosDpTsQCAProfileSREDYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1, 7), DpTsQSredDropProbability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDYellowDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDYellowDropProbability.setDescription('The drop probability value in percentage. This indicates the percentage of yellow frames to be dropped.')
wwpLeosDpTsQCAProfileSREDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileSREDRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this object to 'destroy'.")
wwpLeosDpTsQCAProfileWREDSimpleTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTable.setDescription(' The (conceptual) table listing configuration parameters of congestion Avoidance profile for Simple WRED type of congestion Avoidance Profile type.')
wwpLeosDpTsQCAProfileWREDSimpleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQCAProfileWREDSimpleId"))
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleEntry.setDescription('An entry (conceptual row in the wwpLeosDpTsQCAProfileWREDSimpleEntry.')
wwpLeosDpTsQCAProfileWREDSimpleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleId.setDescription('Unique identifier for the WREDSimple profile entry. ')
wwpLeosDpTsQCAProfileWREDSimpleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleName.setDescription('Profile name associated with this index.')
wwpLeosDpTsQCAProfileWREDSimpleTCPGreenThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPGreenThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPGreenThreshold.setDescription('Specifies the threshold to begin dropping TCP green frames. ')
wwpLeosDpTsQCAProfileWREDSimpleTCPGreenUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPGreenUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPGreenUpperThreshold.setDescription('Specifies the threshold above which all the TCP green frames will be dropped.')
wwpLeosDpTsQCAProfileWREDSimpleTCPGreenMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 5), DpTsQWredSimpleMaxDropProbability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPGreenMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPGreenMaxDropProbability.setDescription(' Specifies the maximum drop probability for TCP green frames before hitting the TCP green upper threshold.')
wwpLeosDpTsQCAProfileWREDSimpleTCPYellowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPYellowThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPYellowThreshold.setDescription('Specifies the threshold to begin dropping the TCP yellow frames.')
wwpLeosDpTsQCAProfileWREDSimpleTCPYellowUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPYellowUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPYellowUpperThreshold.setDescription('Specifies the threshold above which all the TCP yellow frames will be dropped.')
wwpLeosDpTsQCAProfileWREDSimpleTCPYellowMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 8), DpTsQWredSimpleMaxDropProbability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPYellowMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleTCPYellowMaxDropProbability.setDescription('Specifies the max drop probability for TCP yellow frames before hitting the TCP yellow upper threshold.')
wwpLeosDpTsQCAProfileWREDSimpleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this object to 'destroy'.")
wwpLeosDpTsQCAProfileWREDSimpleNonTCPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleNonTCPThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleNonTCPThreshold.setDescription('Specifies the threshold to begin dropping non-TCP frames. ')
wwpLeosDpTsQCAProfileWREDSimpleNonTCPUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleNonTCPUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleNonTCPUpperThreshold.setDescription('Specifies the threshold above which all the non-TCP frames will be dropped.')
wwpLeosDpTsQCAProfileWREDSimpleNonTCPMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 12), DpTsQWredSimpleMaxDropProbability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleNonTCPMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleNonTCPMaxDropProbability.setDescription(' Specifies the maximum drop probability for non-TCP frames before hitting the non-TCP upper threshold.')
wwpLeosDpTsQCAProfileWREDSimpleGreenLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleGreenLowerThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleGreenLowerThreshold.setDescription('Specifies the threshold to begin dropping green frames. ')
wwpLeosDpTsQCAProfileWREDSimpleGreenUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleGreenUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleGreenUpperThreshold.setDescription('Specifies the threshold above which all the green frames will be dropped.')
wwpLeosDpTsQCAProfileWREDSimpleGreenMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 15), DpTsQWredSimpleMaxDropProbability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleGreenMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleGreenMaxDropProbability.setDescription(' Specifies the maximum drop probability for green frames before hitting the green upper threshold.')
wwpLeosDpTsQCAProfileWREDSimpleYellowLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowLowerThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowLowerThreshold.setDescription('Specifies the threshold to begin dropping yellow frames. ')
wwpLeosDpTsQCAProfileWREDSimpleYellowUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowUpperThreshold.setDescription('Specifies the threshold above which all the yellow frames will be dropped.')
wwpLeosDpTsQCAProfileWREDSimpleYellowMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 18), DpTsQWredSimpleMaxDropProbability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowMaxDropProbability.setDescription(' Specifies the maximum drop probability for yellow frames before hitting the yellow upper threshold.')
wwpLeosDpTsQCAProfileWREDSimpleYellowAdmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowAdmitLimit.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQCAProfileWREDSimpleYellowAdmitLimit.setDescription(' Specifies queue limit above which yellow frames will be dropped and below which they will not be touched. This should not be confused with the yellow curve above.')
wwpLeosDpTsQEgressPortQueueGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupTable.setDescription('The (conceptual) table listing configuration parameters of Egress Port Queue.')
wwpLeosDpTsQEgressPortQueueGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQEgressPortQueueGroupId"))
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupEntry.setDescription('An entry (conceptual row) in the wwpLeosDpTsQEgressPortQueueGroupTable.')
wwpLeosDpTsQEgressPortQueueGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupId.setDescription('Group Id of the egress port queue group. This is the same as the pgid of the port.')
wwpLeosDpTsQEgressPortQueueGroupQCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQCount.setDescription('Number of queues in the egress port group.')
wwpLeosDpTsQEgressPortQueueGroupSchedulerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("strictpriority", 1), ("weightedfairqueuing", 2), ("roundrobin", 3), ("weighteddeficitroundrobin", 4), ("weightedroundrobin", 5), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupSchedulerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupSchedulerAlgorithm.setDescription('Scheduler Algorithm for the egress port queue.')
wwpLeosDpTsQEgressPortQueueGroupShaperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1, 1, 4), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupShaperBandwidth.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupShaperBandwidth.setDescription('Shaper Bandwidth associated with the egress port group.')
wwpLeosDpTsQEgressPortQueueGroupBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 262144))).setUnits('kb').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupBurstSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupBurstSize.setDescription('The burst size associated with the egress port group.')
wwpLeosDpTsQEgressPortQueueGroupWdrrSchedulerGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 1600))).setUnits('kb').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupWdrrSchedulerGranularity.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupWdrrSchedulerGranularity.setDescription('The WDRR scheduling granularity in K Bytes')
wwpLeosDpTsQEgressPortQueueGroupQConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQConfigTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQConfigTable.setDescription('The (conceptual) table listing configuration parameters of an egress Queue.')
wwpLeosDpTsQEgressPortQueueGroupQConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQEgressPortQueueGroupId"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQEgressPortQueueGroupQueueId"))
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQConfigEntry.setDescription('An entry (conceptual row) in the wwpLeosDpTsQEgressPortQueueGroupQConfigTable.')
wwpLeosDpTsQEgressPortQueueGroupQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueId.setDescription('The per port per group queue Id.')
wwpLeosDpTsQEgressPortQueueGroupQueueCAPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueCAPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueCAPId.setDescription('The Congestion Avoidance Profile Id associated with the queue.')
wwpLeosDpTsQEgressPortQueueGroupQueuePriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueuePriorityId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueuePriorityId.setDescription('Relative priority id of the queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueSchedulerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueSchedulerWeight.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueSchedulerWeight.setDescription('Scheduler weight of the queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueSize.setDescription('Queue size of teh queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueCIR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueCIR.setDescription('CIR for the queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 262144))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueCBS.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueCBS.setDescription('CBS for the queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueEIR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueEIR.setDescription('EIR for the queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 262144))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueEBS.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueEBS.setDescription('EBS for the queue.')
wwpLeosDpTsQEgressPortQueueGroupQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQStatsTable.setDescription('The (conceptual) table listing statistics for an egress Queue.')
wwpLeosDpTsQEgressPortQueueGroupQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQEgressPortQueueGroupId"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQEgressPortQueueGroupStatsQueueId"))
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQStatsEntry.setDescription('An entry (conceptual row) in the wwpLeosDpTsQEgressPortQueueGroupQStatsTable.')
wwpLeosDpTsQEgressPortQueueGroupStatsQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupStatsQueueId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupStatsQueueId.setDescription('The per port per group queue Id.')
wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxBytes.setDescription('Tx bytes for this queue')
wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxPkts.setDescription('Tx packets for this queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedBytes.setDescription('Dropped bytes for this queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedPkts.setDescription('Dropped packets for this queue.')
wwpLeosDpTsQEgressPortQueueGroupQueueStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 2, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQEgressPortQueueGroupQueueStatsClear.setDescription("When this value is set to true, this queue's stats will be reset to 0. When read, this always returns false ")
wwpLeosDpTsQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapTable.setDescription('The (conceptual) table listing configuration parameters of RCOS to COS Queue mapping.')
wwpLeosDpTsQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsQueueMapId"))
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapEntry.setDescription('An entry (conceptual row) in the wwpLeosDpTsQueueMapTable.')
wwpLeosDpTsQueueMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapId.setDescription('Unique index for the queue map.')
wwpLeosDpTsQueueMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapName.setDescription('Queue map name.')
wwpLeosDpTsQueueMapQCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapQCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapQCount.setDescription('number of queues associated with the map.')
wwpLeosDpTsQueueMapRCOS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS0.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS0.setDescription('The COS queue value for RCOS[0].')
wwpLeosDpTsQueueMapRCOS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS1.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS1.setDescription('The COS queue value for RCOS[1].')
wwpLeosDpTsQueueMapRCOS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS2.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS2.setDescription('The COS queue value for RCOS[2].')
wwpLeosDpTsQueueMapRCOS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS3.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS3.setDescription('The COS queue value for RCOS[3].')
wwpLeosDpTsQueueMapRCOS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS4.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS4.setDescription('The COS queue value for RCOS[4].')
wwpLeosDpTsQueueMapRCOS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS5.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS5.setDescription('The COS queue value for RCOS[5].')
wwpLeosDpTsQueueMapRCOS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS6.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS6.setDescription('The COS queue value for RCOS[6].')
wwpLeosDpTsQueueMapRCOS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS7.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRCOS7.setDescription('The COS queue value for RCOS[7].')
wwpLeosDpTsQueueMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 1, 3, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsQueueMapRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this object to 'destroy'.")
wwpLeosDpTsCosMapProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileTable.setDescription('The (conceptual) table listing the resolved cos map profiles.')
wwpLeosDpTsCosMapProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsCosMapProfileId"))
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileEntry.setDescription('An entry in the wwpLeosDpTsCosMapProfileTable.')
wwpLeosDpTsCosMapProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileId.setDescription('Unique identifier for the resolved cos map profile. The maximum allowed profiles on the device is equal to the number of ports + 1 (Default COS map).')
wwpLeosDpTsCosMapProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsCosMapProfileName.setDescription('Name of the COS map profile.')
wwpLeosDpTsCosMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsCosMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsCosMapRowStatus.setDescription('Setting this object to createAndGo creates a COS map profile. Setting the object to destroy deletes a COS map profile.')
wwpLeosDpTsDot1dCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapTable.setDescription('Conceptual table which represents the dot1d cos map to internal RCOS values for a given profile.')
wwpLeosDpTsDot1dCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsCosMapProfileId"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsDot1dCosMapDot1dValue"))
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapEntry.setDescription('An entry in the wwpLeosDpTsDot1dCosMapTable.')
wwpLeosDpTsDot1dCosMapDot1dValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapDot1dValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapDot1dValue.setDescription('The dot1d cos value.')
wwpLeosDpTsDot1dCosMapRCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapRCOS.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dCosMapRCOS.setDescription('The corresponding RCOS value mapped to the dot1d cos value.')
wwpLeosDpTsDscpCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 3), )
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapTable.setDescription('Conceptual table which represents the DSCP cos map to internal RCOS values for a given profile.')
wwpLeosDpTsDscpCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 3, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsCosMapProfileId"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsDscpCosMapDscpValue"))
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapEntry.setDescription('An entry in the wwpLeosDpTsDscpCosMapTable.')
wwpLeosDpTsDscpCosMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapDscpValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapDscpValue.setDescription('The DSCP cos value.')
wwpLeosDpTsDscpCosMapRCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapRCOS.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapRCOS.setDescription('The RCOS value to which the DSCP cos is mapped to.')
wwpLeosDpTsDscpCosMapRColorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 3, 1, 3), DpTsRCosMappingColor()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapRColorValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDscpCosMapRColorValue.setDescription("The internal resolved color R-Color of the frame. Green (1), Yellow(2) represents frame's internal R-Color.")
wwpLeosDpTsDot1dDeiCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 4), )
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapTable.setDescription('Conceptual table which represents the dot1d/dot1d-dei cos/color map to internal RCOS/Rcolor values for a given profile. This table is the new Extendedended version of the deprecated wpLeosDpTsDot1dCosMapTable above. It has color attributes now.')
wwpLeosDpTsDot1dDeiCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 4, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsCosMapProfileId"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsDot1dDeiCosMapDot1dValue"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsDot1dDeiCosMapDeiValue"))
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapEntry.setDescription('An entry in the wwpLeosDpTsDot1dDeiCosMapTable which is an extended version of wwpLeosDpTsDot1dCosMapTable.')
wwpLeosDpTsDot1dDeiCosMapDot1dValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapDot1dValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapDot1dValue.setDescription('The dot1d COS value.')
wwpLeosDpTsDot1dDeiCosMapDeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapDeiValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapDeiValue.setDescription('The dot1d DEI value (0) green (1) yellow at ingress.')
wwpLeosDpTsDot1dDeiCosMapRCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapRCosValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapRCosValue.setDescription('The corresponding RCos value mapped to the dot1d COS and dot1d DEI value.')
wwpLeosDpTsDot1dDeiCosMapRColorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 4, 1, 4), DpTsRCosMappingColor()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapRColorValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsDot1dDeiCosMapRColorValue.setDescription('The corresponding RColor value mapped to the dot1d cos and dot1dei value.')
wwpLeosDpTsMplsTcCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 5), )
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapTable.setDescription('Conceptual table which represents the MPLS-TC COS/color map to internal RCOS/Rcolor values for a given profile. ')
wwpLeosDpTsMplsTcCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 5, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsCosMapProfileId"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsMplsTcCosMapMplsTcValue"))
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapEntry.setDescription('An entry in the wwpLeosDpTsMplsTcCosMapTable. ')
wwpLeosDpTsMplsTcCosMapMplsTcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapMplsTcValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapMplsTcValue.setDescription('The MPLS-TC value.')
wwpLeosDpTsMplsTcCosMapRCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapRCosValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapRCosValue.setDescription('The corresponding RCos value mapped to the MPLS-TC value.')
wwpLeosDpTsMplsTcCosMapRColorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 2, 5, 1, 3), DpTsRCosMappingColor()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapRColorValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsMplsTcCosMapRColorValue.setDescription('The corresponding RColor value mapped to the MPLS-TC value.')
wwpLeosDpTsFrameCosMapProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileTable.setDescription('The (conceptual) table listing the frame cos map profiles.')
wwpLeosDpTsFrameCosMapProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsFrameCosMapProfileId"))
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileEntry.setDescription('An entry in the wwpLeosDpTsFrameCosMapProfileTable.')
wwpLeosDpTsFrameCosMapProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileId.setDescription('Unique identifier for the frame cos map profile. The maximum allowed profiles on the device is equal to 4 at this time.')
wwpLeosDpTsFrameCosMapProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapProfileName.setDescription('Name of the frame cos map profile.')
wwpLeosDpTsFrameCosMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapRowStatus.setDescription('Setting this object to createAndGo creates a frame cos map profile. Setting the object to destroy deletes a frame cos map profile.')
wwpLeosDpTsFrameCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 2), )
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapTable.setDescription('Conceptual table which represents the resolved cos to dot1d cos map for a given profile.')
wwpLeosDpTsFrameCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 2, 1), ).setIndexNames((0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsFrameCosMapProfileId"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsFrameCosMapRCosValue"), (0, "WWP-LEOS-DATAPLANE-MIB", "wwpLeosDpTsFrameCosMapRColorValue"))
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapEntry.setDescription('An entry in the wwpLeosDpTsRCosToFrameCosMapTable.')
wwpLeosDpTsFrameCosMapRCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapRCosValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapRCosValue.setDescription('The resolved COS value.')
wwpLeosDpTsFrameCosMapRColorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 2, 1, 2), DpTsRCosMappingColor())
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapRColorValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapRColorValue.setDescription('The corresponding resolved color value. Green (1) and Yellow(2) get mapped to the dot1d COS/CFI/DEI value.')
wwpLeosDpTsFrameCosMapDot1dValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapDot1dValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapDot1dValue.setDescription('The dot1d COS value for the outgoing frame')
wwpLeosDpTsFrameCosMapDot1dDeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapDot1dDeiValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapDot1dDeiValue.setDescription("The outgoing frame CFI/DEI frame marking. Green (0), Yellow(1) in the CFI/DEI bit position of the frame represents the frame's outgoing color")
wwpLeosDpTsFrameCosMapMplsTcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 500, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapMplsTcValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDpTsFrameCosMapMplsTcValue.setDescription('The MPLS TC value for the outgoing frame')
mibBuilder.exportSymbols("WWP-LEOS-DATAPLANE-MIB", wwpLeosDpTsQRcosToCosQueueMap=wwpLeosDpTsQRcosToCosQueueMap, wwpLeosDpTsQCAProfileWREDSimpleGreenUpperThreshold=wwpLeosDpTsQCAProfileWREDSimpleGreenUpperThreshold, wwpLeosDpTsCosMapping=wwpLeosDpTsCosMapping, wwpLeosDpTsQCAProfileWREDSimpleTCPGreenMaxDropProbability=wwpLeosDpTsQCAProfileWREDSimpleTCPGreenMaxDropProbability, wwpLeosDpTsQEgressPortQueueGroupQueueCAPId=wwpLeosDpTsQEgressPortQueueGroupQueueCAPId, wwpLeosDpTsQCAProfileSREDId=wwpLeosDpTsQCAProfileSREDId, wwpLeosDpTsQueueMapRCOS3=wwpLeosDpTsQueueMapRCOS3, wwpLeosDpTsCosMapProfileName=wwpLeosDpTsCosMapProfileName, wwpLeosDpTsDot1dCosMapRCOS=wwpLeosDpTsDot1dCosMapRCOS, wwpLeosDpTsMplsTcCosMapMplsTcValue=wwpLeosDpTsMplsTcCosMapMplsTcValue, wwpLeosDpTsFrameCosMapProfileName=wwpLeosDpTsFrameCosMapProfileName, wwpLeosDpTsDot1dDeiCosMapTable=wwpLeosDpTsDot1dDeiCosMapTable, wwpLeosDpTsFrameCosMapRCosValue=wwpLeosDpTsFrameCosMapRCosValue, wwpLeosDpTsQCAProfileWREDSimpleTCPGreenUpperThreshold=wwpLeosDpTsQCAProfileWREDSimpleTCPGreenUpperThreshold, wwpLeosDpTsQEgressPortQueueGroupWdrrSchedulerGranularity=wwpLeosDpTsQEgressPortQueueGroupWdrrSchedulerGranularity, wwpLeosDpTsFrameCosMapRColorValue=wwpLeosDpTsFrameCosMapRColorValue, wwpLeosDpTsQCAProfileWREDSimpleGreenLowerThreshold=wwpLeosDpTsQCAProfileWREDSimpleGreenLowerThreshold, wwpLeosDpTsQCAProfileSREDTable=wwpLeosDpTsQCAProfileSREDTable, wwpLeosDpTsQCAProfileWREDSimpleTCPYellowMaxDropProbability=wwpLeosDpTsQCAProfileWREDSimpleTCPYellowMaxDropProbability, wwpLeosDpTsDscpCosMapDscpValue=wwpLeosDpTsDscpCosMapDscpValue, wwpLeosDpTsQCAProfileWREDSimpleRowStatus=wwpLeosDpTsQCAProfileWREDSimpleRowStatus, wwpLeosDpTsQueueMapRCOS2=wwpLeosDpTsQueueMapRCOS2, wwpLeosDpTsQEgressPortQueueGroupQueueEIR=wwpLeosDpTsQEgressPortQueueGroupQueueEIR, wwpLeosDpTsQEgressPortQueueGroupQConfigTable=wwpLeosDpTsQEgressPortQueueGroupQConfigTable, wwpLeosDpTsQEgressPortQueueGroupQueueSchedulerWeight=wwpLeosDpTsQEgressPortQueueGroupQueueSchedulerWeight, wwpLeosDpTsQEgressPortQueueGroupQStatsEntry=wwpLeosDpTsQEgressPortQueueGroupQStatsEntry, wwpLeosDpTsMplsTcCosMapTable=wwpLeosDpTsMplsTcCosMapTable, wwpLeosDataplaneMIB=wwpLeosDataplaneMIB, wwpLeosDpTsQCAProfileWREDSimpleName=wwpLeosDpTsQCAProfileWREDSimpleName, wwpLeosDpTsDot1dCosMapEntry=wwpLeosDpTsDot1dCosMapEntry, wwpLeosDpTsQCongestionAvoidanceProfile=wwpLeosDpTsQCongestionAvoidanceProfile, wwpLeosDpTsQEgressPortQueueGroup=wwpLeosDpTsQEgressPortQueueGroup, wwpLeosDpTsFrameCosMapProfileTable=wwpLeosDpTsFrameCosMapProfileTable, wwpLeosDpTsQEgressPortQueueGroupQueueEBS=wwpLeosDpTsQEgressPortQueueGroupQueueEBS, wwpLeosDpTsQEgressPortQueueGroupId=wwpLeosDpTsQEgressPortQueueGroupId, wwpLeosDpTsQCAProfileWREDSimpleNonTCPUpperThreshold=wwpLeosDpTsQCAProfileWREDSimpleNonTCPUpperThreshold, wwpLeosDpTsFrameCosMapMplsTcValue=wwpLeosDpTsFrameCosMapMplsTcValue, wwpLeosDpTsQCAProfileWREDSimpleYellowUpperThreshold=wwpLeosDpTsQCAProfileWREDSimpleYellowUpperThreshold, wwpLeosDpTsQCAProfileSREDGreenThreshold=wwpLeosDpTsQCAProfileSREDGreenThreshold, wwpLeosDpTsQCAProfileWREDSimpleYellowAdmitLimit=wwpLeosDpTsQCAProfileWREDSimpleYellowAdmitLimit, wwpLeosDpTsQueueMapQCount=wwpLeosDpTsQueueMapQCount, wwpLeosDpTsQCAProfileWREDSimpleTCPYellowThreshold=wwpLeosDpTsQCAProfileWREDSimpleTCPYellowThreshold, wwpLeosDpTsDscpCosMapRColorValue=wwpLeosDpTsDscpCosMapRColorValue, DpTsQSredDropProbability=DpTsQSredDropProbability, wwpLeosDpTsCosMapRowStatus=wwpLeosDpTsCosMapRowStatus, wwpLeosDpTsFrameCosMapEntry=wwpLeosDpTsFrameCosMapEntry, wwpLeosDpTsQCAProfileWREDSimpleTCPGreenThreshold=wwpLeosDpTsQCAProfileWREDSimpleTCPGreenThreshold, wwpLeosDpTsFrameCosMapTable=wwpLeosDpTsFrameCosMapTable, wwpLeosDpTsQueueMapTable=wwpLeosDpTsQueueMapTable, wwpLeosDpTsCosMapProfileId=wwpLeosDpTsCosMapProfileId, wwpLeosDpTsQEgressPortQueueGroupQStatsTable=wwpLeosDpTsQEgressPortQueueGroupQStatsTable, wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxPkts=wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxPkts, wwpLeosDpTsQCAProfileWREDSimpleTable=wwpLeosDpTsQCAProfileWREDSimpleTable, wwpLeosDpTsQCAProfileWREDSimpleYellowLowerThreshold=wwpLeosDpTsQCAProfileWREDSimpleYellowLowerThreshold, wwpLeosDpTsQCAProfileWREDSimpleNonTCPMaxDropProbability=wwpLeosDpTsQCAProfileWREDSimpleNonTCPMaxDropProbability, wwpLeosDpTsDot1dDeiCosMapDot1dValue=wwpLeosDpTsDot1dDeiCosMapDot1dValue, wwpLeosDpTsFrameCosMapProfileEntry=wwpLeosDpTsFrameCosMapProfileEntry, wwpLeosDpTsFrameCosMapDot1dValue=wwpLeosDpTsFrameCosMapDot1dValue, wwpLeosDpTsFrameCosMapProfileId=wwpLeosDpTsFrameCosMapProfileId, wwpLeosDpTsQEgressPortQueueGroupShaperBandwidth=wwpLeosDpTsQEgressPortQueueGroupShaperBandwidth, wwpLeosDpTsDot1dCosMapDot1dValue=wwpLeosDpTsDot1dCosMapDot1dValue, wwpLeosDpTsQueuing=wwpLeosDpTsQueuing, wwpLeosDpTsQueueMapRCOS1=wwpLeosDpTsQueueMapRCOS1, wwpLeosDpTsDot1dDeiCosMapRCosValue=wwpLeosDpTsDot1dDeiCosMapRCosValue, wwpLeosDpTsQCAProfileSREDRowStatus=wwpLeosDpTsQCAProfileSREDRowStatus, wwpLeosDpTsQCAProfileWREDSimpleGreenMaxDropProbability=wwpLeosDpTsQCAProfileWREDSimpleGreenMaxDropProbability, wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedPkts=wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedPkts, wwpLeosDpTsQEgressPortQueueGroupQueueId=wwpLeosDpTsQEgressPortQueueGroupQueueId, wwpLeosDpTsQEgressPortQueueGroupStatsQueueId=wwpLeosDpTsQEgressPortQueueGroupStatsQueueId, wwpLeosDpTsQEgressPortQueueGroupQConfigEntry=wwpLeosDpTsQEgressPortQueueGroupQConfigEntry, wwpLeosDpTsMplsTcCosMapRCosValue=wwpLeosDpTsMplsTcCosMapRCosValue, wwpLeosDpTsFrameCosMapDot1dDeiValue=wwpLeosDpTsFrameCosMapDot1dDeiValue, wwpLeosDpTsDot1dDeiCosMapEntry=wwpLeosDpTsDot1dDeiCosMapEntry, wwpLeosDpTsQEgressPortQueueGroupQueueCBS=wwpLeosDpTsQEgressPortQueueGroupQueueCBS, wwpLeosDpTsQEgressPortQueueGroupQueueCIR=wwpLeosDpTsQEgressPortQueueGroupQueueCIR, wwpLeosDpTsQueueMapEntry=wwpLeosDpTsQueueMapEntry, wwpLeosDpTsQEgressPortQueueGroupQCount=wwpLeosDpTsQEgressPortQueueGroupQCount, wwpLeosDpTsQEgressPortQueueGroupQueueStatsClear=wwpLeosDpTsQEgressPortQueueGroupQueueStatsClear, PYSNMP_MODULE_ID=wwpLeosDataplaneMIB, wwpLeosDpTsDot1dCosMapTable=wwpLeosDpTsDot1dCosMapTable, DpTsQWredSimpleMaxDropProbability=DpTsQWredSimpleMaxDropProbability, wwpLeosDpTsQueueMapRCOS6=wwpLeosDpTsQueueMapRCOS6, wwpLeosDpTsQueueMapRowStatus=wwpLeosDpTsQueueMapRowStatus, wwpLeosDpTsQueueMapName=wwpLeosDpTsQueueMapName, wwpLeosDpTsCosMapProfileEntry=wwpLeosDpTsCosMapProfileEntry, wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxBytes=wwpLeosDpTsQEgressPortQueueGroupQueueStatsTxBytes, wwpLeosDpTsQCAProfileSREDName=wwpLeosDpTsQCAProfileSREDName, wwpLeosDpTsQueueMapRCOS0=wwpLeosDpTsQueueMapRCOS0, wwpLeosDpTsQueueMapRCOS7=wwpLeosDpTsQueueMapRCOS7, wwpLeosDpTsQEgressPortQueueGroupSchedulerAlgorithm=wwpLeosDpTsQEgressPortQueueGroupSchedulerAlgorithm, wwpLeosDpTsDscpCosMapTable=wwpLeosDpTsDscpCosMapTable, wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedBytes=wwpLeosDpTsQEgressPortQueueGroupQueueStatsDroppedBytes, wwpLeosDpTsQCAProfileWREDSimpleTCPYellowUpperThreshold=wwpLeosDpTsQCAProfileWREDSimpleTCPYellowUpperThreshold, wwpLeosDpTsQCAProfileWREDSimpleId=wwpLeosDpTsQCAProfileWREDSimpleId, wwpLeosDpTsQEgressPortQueueGroupQueueSize=wwpLeosDpTsQEgressPortQueueGroupQueueSize, wwpLeosDpTs=wwpLeosDpTs, wwpLeosDpTsQCAProfileSREDYellowDropProbability=wwpLeosDpTsQCAProfileSREDYellowDropProbability, DpTsRCosMappingColor=DpTsRCosMappingColor, wwpLeosDpTsQCAProfileWREDSimpleYellowMaxDropProbability=wwpLeosDpTsQCAProfileWREDSimpleYellowMaxDropProbability, wwpLeosDpTsFrameCosMapping=wwpLeosDpTsFrameCosMapping, wwpLeosDpTsQEgressPortQueueGroupTable=wwpLeosDpTsQEgressPortQueueGroupTable, wwpLeosDpTsDot1dDeiCosMapDeiValue=wwpLeosDpTsDot1dDeiCosMapDeiValue, wwpLeosDpTsCosMapProfileTable=wwpLeosDpTsCosMapProfileTable, wwpLeosDpTsQueueMapRCOS5=wwpLeosDpTsQueueMapRCOS5, wwpLeosDpTsQCAProfileSREDEntry=wwpLeosDpTsQCAProfileSREDEntry, wwpLeosDpTsQEgressPortQueueGroupBurstSize=wwpLeosDpTsQEgressPortQueueGroupBurstSize, wwpLeosDpTsMplsTcCosMapEntry=wwpLeosDpTsMplsTcCosMapEntry, wwpLeosDpTsMplsTcCosMapRColorValue=wwpLeosDpTsMplsTcCosMapRColorValue, wwpLeosDpTsQueueMapRCOS4=wwpLeosDpTsQueueMapRCOS4, wwpLeosDpTsQEgressPortQueueGroupEntry=wwpLeosDpTsQEgressPortQueueGroupEntry, wwpLeosDpTsQueueMapId=wwpLeosDpTsQueueMapId, wwpLeosDpTsDscpCosMapRCOS=wwpLeosDpTsDscpCosMapRCOS, wwpLeosDpTsQCAProfileWREDSimpleEntry=wwpLeosDpTsQCAProfileWREDSimpleEntry, wwpLeosDpTsQCAProfileWREDSimpleNonTCPThreshold=wwpLeosDpTsQCAProfileWREDSimpleNonTCPThreshold, wwpLeosDpTsQCAProfileSREDGreenDropProbability=wwpLeosDpTsQCAProfileSREDGreenDropProbability, wwpLeosDpTsQEgressPortQueueGroupQueuePriorityId=wwpLeosDpTsQEgressPortQueueGroupQueuePriorityId, wwpLeosDpTsDscpCosMapEntry=wwpLeosDpTsDscpCosMapEntry, wwpLeosDpTsDot1dDeiCosMapRColorValue=wwpLeosDpTsDot1dDeiCosMapRColorValue, wwpLeosDpTsFrameCosMapRowStatus=wwpLeosDpTsFrameCosMapRowStatus, wwpLeosDpMIBObjects=wwpLeosDpMIBObjects, wwpLeosDpTsQCAProfileSREDYellowThreshold=wwpLeosDpTsQCAProfileSREDYellowThreshold)
