#
# PySNMP MIB module BASEBRDD-MIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BASEBRDD-MIB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
DmiInteger64, dmiEventSubSystem, DmiDate, dmiEventStateKey, dmiEventDateTime, dmiEventAssociatedGroup, dmiEventSystem, dmiCompId, dmiEventSeverity = mibBuilder.importSymbols("DMTF-DMI-MIB", "DmiInteger64", "dmiEventSubSystem", "DmiDate", "dmiEventStateKey", "dmiEventDateTime", "dmiEventAssociatedGroup", "dmiEventSystem", "dmiCompId", "dmiEventSeverity")
InternationalDisplayString, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "InternationalDisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Bits, NotificationType, ObjectIdentity, enterprises, Counter32, Unsigned32, Integer32, TimeTicks, IpAddress, Counter64, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Bits", "NotificationType", "ObjectIdentity", "enterprises", "Counter32", "Unsigned32", "Integer32", "TimeTicks", "IpAddress", "Counter64", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfServiceLayerMIF = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2, 1))
dMTFComponentIDTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 1, 1), )
if mibBuilder.loadTexts: dMTFComponentIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFComponentIDTable.setDescription('This group defines the attributes common to all components. This group is required.')
dMTFComponentIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFComponentIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFComponentIDEntry.setDescription('This group defines the attributes common to all components. This group is required.')
manufacturerAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturerAtt1.setReference("'DMTF|ComponentID|001' 1")
if mibBuilder.loadTexts: manufacturerAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: manufacturerAtt1.setDescription('Manufacturer of this system.')
productAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAtt2.setReference("'DMTF|ComponentID|001' 2")
if mibBuilder.loadTexts: productAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: productAtt2.setDescription('Product name for this system.')
versionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionAtt3.setReference("'DMTF|ComponentID|001' 3")
if mibBuilder.loadTexts: versionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: versionAtt3.setDescription('Version number of this system.')
serialNumberAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumberAtt4.setReference("'DMTF|ComponentID|001' 4")
if mibBuilder.loadTexts: serialNumberAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: serialNumberAtt4.setDescription('Serial number for this system.')
installationAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installationAtt5.setReference("'DMTF|ComponentID|001' 5")
if mibBuilder.loadTexts: installationAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: installationAtt5.setDescription('The time and date when this component was installed.')
verifyAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anErrorOccurredCheckStatusCode", 0), ("thisComponentDoesNotExist", 1), ("verificationIsNotSupported", 2), ("reserved", 3), ("thisComponentExistsButTheFunctionalityIsUntested", 4), ("thisComponentExistsButTheFunctionalityIsUnknown", 5), ("thisComponentExistsAndIsNotFunctioningCorrectly", 6), ("thisComponentExistsAndIsFunctioningCorrectly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: verifyAtt6.setReference("'DMTF|ComponentID|001' 6")
if mibBuilder.loadTexts: verifyAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: verifyAtt6.setDescription('A code that provides a level of verification that the component is still installed and working.')
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server2 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10891))
dellTemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 300), )
if mibBuilder.loadTexts: dellTemperatureProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellTemperatureProbeTable.setDescription('This group defines the attributes for the temperature probes this system.')
dellTemperatureProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "tempParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "tempIndexAtt2"))
if mibBuilder.loadTexts: dellTemperatureProbeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellTemperatureProbeEntry.setDescription('This group defines the attributes for the temperature probes this system.')
dellTemperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellTemperatureProbeState.setReference("'Dell|Temperature Probe|003' 0")
if mibBuilder.loadTexts: dellTemperatureProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: dellTemperatureProbeState.setDescription('')
tempParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempParentIndexAtt1.setReference("'Dell|Temperature Probe|003' 1")
if mibBuilder.loadTexts: tempParentIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: tempParentIndexAtt1.setDescription('An index into the chassis table.')
tempIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempIndexAtt2.setReference("'Dell|Temperature Probe|003' 2")
if mibBuilder.loadTexts: tempIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: tempIndexAtt2.setDescription('index into this temperature probe table.')
tempTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("tMC", 3), ("tVM", 4), ("eSM", 5), ("backplane", 6), ("harrierBackplane", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTypeAtt3.setReference("'Dell|Temperature Probe|003' 3")
if mibBuilder.loadTexts: tempTypeAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: tempTypeAtt3.setDescription('Defines the type of the temperature probe.')
tempStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempStatusAtt4.setReference("'Dell|Temperature Probe|003' 4")
if mibBuilder.loadTexts: tempStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: tempStatusAtt4.setDescription('Current status of the temperature probe.')
tempReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempReadingAtt5.setReference("'Dell|Temperature Probe|003' 5")
if mibBuilder.loadTexts: tempReadingAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: tempReadingAtt5.setDescription('The reading of the temperature probe in tenths of degrees.')
tempMinWarnAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempMinWarnAtt6.setReference("'Dell|Temperature Probe|003' 6")
if mibBuilder.loadTexts: tempMinWarnAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: tempMinWarnAtt6.setDescription('The lower warning threshold for the temperature probe set by the user.')
tempMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempMaxWarnAtt7.setReference("'Dell|Temperature Probe|003' 7")
if mibBuilder.loadTexts: tempMaxWarnAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: tempMaxWarnAtt7.setDescription('The upper warning threshold for the temperature probe set by the user.')
tempMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempMinFailAtt8.setReference("'Dell|Temperature Probe|003' 8")
if mibBuilder.loadTexts: tempMinFailAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: tempMinFailAtt8.setDescription('The lower failure threshold for the temperature probe.')
tempMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempMaxFailAtt9.setReference("'Dell|Temperature Probe|003' 9")
if mibBuilder.loadTexts: tempMaxFailAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: tempMaxFailAtt9.setDescription('The upper failure threshold for the temperature probe.')
tempLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempLocationAtt10.setReference("'Dell|Temperature Probe|003' 10")
if mibBuilder.loadTexts: tempLocationAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: tempLocationAtt10.setDescription('The location of this temperature probe within the system.')
dellFanSensorTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 301), )
if mibBuilder.loadTexts: dellFanSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellFanSensorTable.setDescription('This group defines the attributes for the fan probes this system.')
dellFanSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "fansParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "fansIndexAtt2"))
if mibBuilder.loadTexts: dellFanSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellFanSensorEntry.setDescription('This group defines the attributes for the fan probes this system.')
dellFanSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellFanSensorState.setReference("'Dell|Fan Sensor|003' 0")
if mibBuilder.loadTexts: dellFanSensorState.setStatus('mandatory')
if mibBuilder.loadTexts: dellFanSensorState.setDescription('')
fansParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansParentIndexAtt1.setReference("'Dell|Fan Sensor|003' 1")
if mibBuilder.loadTexts: fansParentIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: fansParentIndexAtt1.setDescription('An index into the chassis table.')
fansIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansIndexAtt2.setReference("'Dell|Fan Sensor|003' 2")
if mibBuilder.loadTexts: fansIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: fansIndexAtt2.setDescription('index into this fan probe table.')
fansTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("boolean", 3), ("rPM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansTypeAtt3.setReference("'Dell|Fan Sensor|003' 3")
if mibBuilder.loadTexts: fansTypeAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: fansTypeAtt3.setDescription('Defines the type of the fan probe.')
fansStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansStatusAtt4.setReference("'Dell|Fan Sensor|003' 4")
if mibBuilder.loadTexts: fansStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: fansStatusAtt4.setDescription('Current status of the fan probe.')
fansReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansReadingAtt5.setReference("'Dell|Fan Sensor|003' 5")
if mibBuilder.loadTexts: fansReadingAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: fansReadingAtt5.setDescription('The reading of the fan probe in RPM (or boolean).')
fansWarningMinAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansWarningMinAtt6.setReference("'Dell|Fan Sensor|003' 6")
if mibBuilder.loadTexts: fansWarningMinAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: fansWarningMinAtt6.setDescription('The lower warning threshold for the fan probe set by the user.')
fansMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansMaxWarnAtt7.setReference("'Dell|Fan Sensor|003' 7")
if mibBuilder.loadTexts: fansMaxWarnAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: fansMaxWarnAtt7.setDescription('The upper warning threshold for the fan probe set by the user.')
fansMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansMinFailAtt8.setReference("'Dell|Fan Sensor|003' 8")
if mibBuilder.loadTexts: fansMinFailAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: fansMinFailAtt8.setDescription('The lower failure threshold for the fan probe.')
fansMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansMaxFailAtt9.setReference("'Dell|Fan Sensor|003' 9")
if mibBuilder.loadTexts: fansMaxFailAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: fansMaxFailAtt9.setDescription('The upper failure threshold for the fan probe.')
fansLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansLocationAtt10.setReference("'Dell|Fan Sensor|003' 10")
if mibBuilder.loadTexts: fansLocationAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: fansLocationAtt10.setDescription('The location of this fan probe within the system.')
dellVoltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 302), )
if mibBuilder.loadTexts: dellVoltageProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellVoltageProbeTable.setDescription('The Voltage group contains the data on all the voltage probes in a system.')
dellVoltageProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "voltParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "voltIndexAtt2"))
if mibBuilder.loadTexts: dellVoltageProbeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellVoltageProbeEntry.setDescription('The Voltage group contains the data on all the voltage probes in a system.')
dellVoltageProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellVoltageProbeState.setReference("'Dell|Voltage Probe|002' 0")
if mibBuilder.loadTexts: dellVoltageProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: dellVoltageProbeState.setDescription('')
voltParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltParentIndexAtt1.setReference("'Dell|Voltage Probe|002' 1")
if mibBuilder.loadTexts: voltParentIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: voltParentIndexAtt1.setDescription('The chassis this voltage probe is connected to.')
voltIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltIndexAtt2.setReference("'Dell|Voltage Probe|002' 2")
if mibBuilder.loadTexts: voltIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: voltIndexAtt2.setDescription('the index of the voltage probe within the chassis.')
voltTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("v33", 3), ("v33-1", 4), ("v5", 5), ("v5-1", 6), ("v12", 7), ("v12-1", 8), ("v15", 9), ("core", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTypeAtt3.setReference("'Dell|Voltage Probe|002' 3")
if mibBuilder.loadTexts: voltTypeAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: voltTypeAtt3.setDescription('The type of voltage probe')
voltStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltStatusAtt4.setReference("'Dell|Voltage Probe|002' 4")
if mibBuilder.loadTexts: voltStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: voltStatusAtt4.setDescription('Status of the voltage probe.')
voltReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltReadingAtt5.setReference("'Dell|Voltage Probe|002' 5")
if mibBuilder.loadTexts: voltReadingAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: voltReadingAtt5.setDescription('Current reading of the voltage probe, in millivolts.')
voltMinWarnAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltMinWarnAtt6.setReference("'Dell|Voltage Probe|002' 6")
if mibBuilder.loadTexts: voltMinWarnAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: voltMinWarnAtt6.setDescription('lower warning threshold value for this voltage probe.')
voltMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltMaxWarnAtt7.setReference("'Dell|Voltage Probe|002' 7")
if mibBuilder.loadTexts: voltMaxWarnAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: voltMaxWarnAtt7.setDescription('upper warning threshold value for this voltage probe.')
voltMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltMinFailAtt8.setReference("'Dell|Voltage Probe|002' 8")
if mibBuilder.loadTexts: voltMinFailAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: voltMinFailAtt8.setDescription('lower failure threshold value for this voltage probe.')
voltMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltMaxFailAtt9.setReference("'Dell|Voltage Probe|002' 9")
if mibBuilder.loadTexts: voltMaxFailAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: voltMaxFailAtt9.setDescription('upper failure threshold value for this voltage probe.')
voltLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltLocationAtt10.setReference("'Dell|Voltage Probe|002' 10")
if mibBuilder.loadTexts: voltLocationAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: voltLocationAtt10.setDescription('the location of this voltage probe within the system.')
dellCurrentProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 303), )
if mibBuilder.loadTexts: dellCurrentProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellCurrentProbeTable.setDescription('The Current group contains the data on all the Current probes in a system.')
dellCurrentProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "ampParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "ampIndexAtt2"))
if mibBuilder.loadTexts: dellCurrentProbeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellCurrentProbeEntry.setDescription('The Current group contains the data on all the Current probes in a system.')
dellCurrentProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellCurrentProbeState.setReference("'Dell|Current Probe|002' 0")
if mibBuilder.loadTexts: dellCurrentProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: dellCurrentProbeState.setDescription('')
ampParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampParentIndexAtt1.setReference("'Dell|Current Probe|002' 1")
if mibBuilder.loadTexts: ampParentIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: ampParentIndexAtt1.setDescription('The chassis this current probe is connected to.')
ampIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampIndexAtt2.setReference("'Dell|Current Probe|002' 2")
if mibBuilder.loadTexts: ampIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: ampIndexAtt2.setDescription('the index of the current probe within the chassis.')
ampTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("v33", 3), ("v33", 4), ("v5", 5), ("v5", 6), ("v12", 7), ("v12", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampTypeAtt3.setReference("'Dell|Current Probe|002' 3")
if mibBuilder.loadTexts: ampTypeAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: ampTypeAtt3.setDescription('The type of current probe')
ampStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampStatusAtt4.setReference("'Dell|Current Probe|002' 4")
if mibBuilder.loadTexts: ampStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: ampStatusAtt4.setDescription('Status of the current probe.')
ampReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampReadingAtt5.setReference("'Dell|Current Probe|002' 5")
if mibBuilder.loadTexts: ampReadingAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: ampReadingAtt5.setDescription('Current reading of the current probe in milliamps.')
ampMinWarnAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ampMinWarnAtt6.setReference("'Dell|Current Probe|002' 6")
if mibBuilder.loadTexts: ampMinWarnAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: ampMinWarnAtt6.setDescription('lower warning threshold value for this current probe.')
ampMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ampMaxWarnAtt7.setReference("'Dell|Current Probe|002' 7")
if mibBuilder.loadTexts: ampMaxWarnAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: ampMaxWarnAtt7.setDescription('upper warning threshold value for this current probe.')
ampMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampMinFailAtt8.setReference("'Dell|Current Probe|002' 8")
if mibBuilder.loadTexts: ampMinFailAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: ampMinFailAtt8.setDescription('lower failure threshold value for this current probe.')
ampMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampMaxFailAtt9.setReference("'Dell|Current Probe|002' 9")
if mibBuilder.loadTexts: ampMaxFailAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: ampMaxFailAtt9.setDescription('upper failure threshold value for this current probe.')
ampLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampLocationAtt10.setReference("'Dell|Current Probe|002' 10")
if mibBuilder.loadTexts: ampLocationAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: ampLocationAtt10.setDescription('the location of this current probe within the system.')
dellRedundantPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 304), )
if mibBuilder.loadTexts: dellRedundantPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellRedundantPowerSupplyTable.setDescription('The Power Supply group contains the data on all the redundant power supplies in a system.')
dellRedundantPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "pwrSupplyParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "pwrSupplyIndexAtt2"))
if mibBuilder.loadTexts: dellRedundantPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellRedundantPowerSupplyEntry.setDescription('The Power Supply group contains the data on all the redundant power supplies in a system.')
dellRedundantPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellRedundantPowerSupplyState.setReference("'Dell|RedundantPowerSupply|001' 0")
if mibBuilder.loadTexts: dellRedundantPowerSupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: dellRedundantPowerSupplyState.setDescription('')
pwrSupplyParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyParentIndexAtt1.setReference("'Dell|RedundantPowerSupply|001' 1")
if mibBuilder.loadTexts: pwrSupplyParentIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: pwrSupplyParentIndexAtt1.setDescription('The chassis this power supply is connected to.')
pwrSupplyIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyIndexAtt2.setReference("'Dell|RedundantPowerSupply|001' 2")
if mibBuilder.loadTexts: pwrSupplyIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: pwrSupplyIndexAtt2.setDescription('The index within the chassis of this power supply.')
pwrSupplyTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pSPB", 3), ("x230W", 4), ("x500W", 5), ("x700W", 6), ("x320W", 7), ("x275W", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyTypeAtt3.setReference("'Dell|RedundantPowerSupply|001' 3")
if mibBuilder.loadTexts: pwrSupplyTypeAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: pwrSupplyTypeAtt3.setDescription('The type of power supply.')
pwrSupplyStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyStatusAtt4.setReference("'Dell|RedundantPowerSupply|001' 4")
if mibBuilder.loadTexts: pwrSupplyStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: pwrSupplyStatusAtt4.setDescription('The current status of this power supply.')
pwrSupplyOnlineAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrSupplyOnlineAtt5.setReference("'Dell|RedundantPowerSupply|001' 5")
if mibBuilder.loadTexts: pwrSupplyOnlineAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: pwrSupplyOnlineAtt5.setDescription('The current online status of this power supply. Setting this value to FALSE will turn off the power supply, setting it to TRUE will turn on the power supply. ')
pwrLocationAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrLocationAtt6.setReference("'Dell|RedundantPowerSupply|001' 6")
if mibBuilder.loadTexts: pwrLocationAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: pwrLocationAtt6.setDescription('the location of this power supply within the system.')
dellGlobalPowerUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 305), )
if mibBuilder.loadTexts: dellGlobalPowerUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellGlobalPowerUnitTable.setDescription('This group contains the global status for the power supplies in the system.')
dellGlobalPowerUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "pwrUnitIndexAtt11"))
if mibBuilder.loadTexts: dellGlobalPowerUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellGlobalPowerUnitEntry.setDescription('This group contains the global status for the power supplies in the system.')
dellGlobalPowerUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellGlobalPowerUnitState.setReference("'Dell|GlobalPowerUnit|003' 0")
if mibBuilder.loadTexts: dellGlobalPowerUnitState.setStatus('mandatory')
if mibBuilder.loadTexts: dellGlobalPowerUnitState.setDescription('')
pwrUnitStatusAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("notApplicableUnitNotRedundant", 3), ("offline", 4), ("fullyRedundant", 5), ("degradedRedundancy", 6), ("redundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitStatusAtt1.setReference("'Dell|GlobalPowerUnit|003' 1")
if mibBuilder.loadTexts: pwrUnitStatusAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitStatusAtt1.setDescription('The current redundancy status of the power unit.')
pwrUnitGlobalLevelAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitGlobalLevelAtt2.setReference("'Dell|GlobalPowerUnit|003' 2")
if mibBuilder.loadTexts: pwrUnitGlobalLevelAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitGlobalLevelAtt2.setDescription('The current global power level usage, in percent.')
pwrUnitGlobalMaxWarnAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitGlobalMaxWarnAtt3.setReference("'Dell|GlobalPowerUnit|003' 3")
if mibBuilder.loadTexts: pwrUnitGlobalMaxWarnAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitGlobalMaxWarnAtt3.setDescription('Warning threshold, in percent')
pwrUnitLevel33vAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitLevel33vAtt4.setReference("'Dell|GlobalPowerUnit|003' 4")
if mibBuilder.loadTexts: pwrUnitLevel33vAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitLevel33vAtt4.setDescription('The current 3.3v power level usage, in percent.')
pwrUnitMaxWarn33vAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitMaxWarn33vAtt5.setReference("'Dell|GlobalPowerUnit|003' 5")
if mibBuilder.loadTexts: pwrUnitMaxWarn33vAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitMaxWarn33vAtt5.setDescription('Warning threshold, in percent')
pwrUnitLevel5vAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitLevel5vAtt6.setReference("'Dell|GlobalPowerUnit|003' 6")
if mibBuilder.loadTexts: pwrUnitLevel5vAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitLevel5vAtt6.setDescription('The current 5v power level usage, in percent.')
pwrUnitMaxWarn5vAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitMaxWarn5vAtt7.setReference("'Dell|GlobalPowerUnit|003' 7")
if mibBuilder.loadTexts: pwrUnitMaxWarn5vAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitMaxWarn5vAtt7.setDescription('Warning threshold, in percent')
pwrUnitLevel12vAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitLevel12vAtt8.setReference("'Dell|GlobalPowerUnit|003' 8")
if mibBuilder.loadTexts: pwrUnitLevel12vAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitLevel12vAtt8.setDescription('The current 12v power level usage, in percent.')
pwrUnitMaxWarn12vAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 9), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitMaxWarn12vAtt9.setReference("'Dell|GlobalPowerUnit|003' 9")
if mibBuilder.loadTexts: pwrUnitMaxWarn12vAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitMaxWarn12vAtt9.setDescription('Warning threshold, in percent')
pwrUnitUidAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitUidAtt10.setReference("'Dell|GlobalPowerUnit|003' 10")
if mibBuilder.loadTexts: pwrUnitUidAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitUidAtt10.setDescription('The unique ID for this power supply unit.')
pwrUnitIndexAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitIndexAtt11.setReference("'Dell|GlobalPowerUnit|003' 11")
if mibBuilder.loadTexts: pwrUnitIndexAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: pwrUnitIndexAtt11.setDescription('The index into the power supply unit table.')
dellSystemChassisExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 306), )
if mibBuilder.loadTexts: dellSystemChassisExtensionTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemChassisExtensionTable.setDescription('Global status of devices in chassis.')
dellSystemChassisExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "chassIndexAtt1"))
if mibBuilder.loadTexts: dellSystemChassisExtensionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemChassisExtensionEntry.setDescription('Global status of devices in chassis.')
dellSystemChassisExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellSystemChassisExtensionState.setReference("'Dell|SystemChassisExtension|004' 0")
if mibBuilder.loadTexts: dellSystemChassisExtensionState.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemChassisExtensionState.setDescription('')
chassIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassIndexAtt1.setReference("'Dell|SystemChassisExtension|004' 1")
if mibBuilder.loadTexts: chassIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: chassIndexAtt1.setDescription('Physical container index')
chassGlobStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassGlobStatusAtt2.setReference("'Dell|SystemChassisExtension|004' 2")
if mibBuilder.loadTexts: chassGlobStatusAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: chassGlobStatusAtt2.setDescription('Global status of all devices in chassis.')
chassTempStatusAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTempStatusAtt3.setReference("'Dell|SystemChassisExtension|004' 3")
if mibBuilder.loadTexts: chassTempStatusAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: chassTempStatusAtt3.setDescription('Global status of temperature probes.')
chassTempProbesAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 4), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTempProbesAtt4.setReference("'Dell|SystemChassisExtension|004' 4")
if mibBuilder.loadTexts: chassTempProbesAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: chassTempProbesAtt4.setDescription('This contains the statuses of all temp probes in the system, one probe per octet. The value of each octet is the value of the status field.')
chassFansStatusAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassFansStatusAtt5.setReference("'Dell|SystemChassisExtension|004' 5")
if mibBuilder.loadTexts: chassFansStatusAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: chassFansStatusAtt5.setDescription('Global status of fan sensors.')
chassFansProbesAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 6), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassFansProbesAtt6.setReference("'Dell|SystemChassisExtension|004' 6")
if mibBuilder.loadTexts: chassFansProbesAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: chassFansProbesAtt6.setDescription('This contains the statuses of all fan probes in the system, one probe per octet. The value of each octet is the value of the status field.')
chassVoltStatusAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassVoltStatusAtt7.setReference("'Dell|SystemChassisExtension|004' 7")
if mibBuilder.loadTexts: chassVoltStatusAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: chassVoltStatusAtt7.setDescription('Global status of voltage probes.')
chassVoltProbesAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 8), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassVoltProbesAtt8.setReference("'Dell|SystemChassisExtension|004' 8")
if mibBuilder.loadTexts: chassVoltProbesAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: chassVoltProbesAtt8.setDescription('This contains the statuses of all volt probes in the system, one probe per octet. The value of each octet is the value of the status field.')
chassAmpStatusAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassAmpStatusAtt9.setReference("'Dell|SystemChassisExtension|004' 9")
if mibBuilder.loadTexts: chassAmpStatusAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: chassAmpStatusAtt9.setDescription('Global status of current probes.')
chassAmpProbesAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 10), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassAmpProbesAtt10.setReference("'Dell|SystemChassisExtension|004' 10")
if mibBuilder.loadTexts: chassAmpProbesAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: chassAmpProbesAtt10.setDescription('This contains the statuses of all amp probes in the system, one probe per octet. The value of each octet is the value of the status field.')
chassPsStatusAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassPsStatusAtt11.setReference("'Dell|SystemChassisExtension|004' 11")
if mibBuilder.loadTexts: chassPsStatusAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: chassPsStatusAtt11.setDescription('Global status of power supplies.')
chassPwrSuppliesAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 12), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassPwrSuppliesAtt12.setReference("'Dell|SystemChassisExtension|004' 12")
if mibBuilder.loadTexts: chassPwrSuppliesAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: chassPwrSuppliesAtt12.setDescription('This contains the statuses of all power supplies in the system, one probe per octet. The value of each octet is the value of the status field.')
chassServiceTagAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 13), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassServiceTagAtt13.setReference("'Dell|SystemChassisExtension|004' 13")
if mibBuilder.loadTexts: chassServiceTagAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: chassServiceTagAtt13.setDescription('This is the service tag for this chassis, if it exists.')
chassUidAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 14), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassUidAtt14.setReference("'Dell|SystemChassisExtension|004' 14")
if mibBuilder.loadTexts: chassUidAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: chassUidAtt14.setDescription('This is the Unique ID for this chassis, if it exists.')
chassBackPlaneUidAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 15), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassBackPlaneUidAtt15.setReference("'Dell|SystemChassisExtension|004' 15")
if mibBuilder.loadTexts: chassBackPlaneUidAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: chassBackPlaneUidAtt15.setDescription('This is the Unique ID for the backplane in this chassis.')
chassIdentifyAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 16), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassIdentifyAtt16.setReference("'Dell|SystemChassisExtension|004' 16")
if mibBuilder.loadTexts: chassIdentifyAtt16.setStatus('mandatory')
if mibBuilder.loadTexts: chassIdentifyAtt16.setDescription('This attribute is used to visually identify a disk pod or other chassis by causing its lights to flash. Setting this value to non-zero turns on the identify, setting it back to zero turns it off.')
chassFanControlAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 17), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassFanControlAtt17.setReference("'Dell|SystemChassisExtension|004' 17")
if mibBuilder.loadTexts: chassFanControlAtt17.setStatus('mandatory')
if mibBuilder.loadTexts: chassFanControlAtt17.setDescription('This attribute is used to control the fan speed in a chassis. If the value is 0, then fan control is notavailable. A value of 2 indicates maximum cooling. Avalue of 1 indicates minimize fan noise (and speed).')
chassLEDConfigAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 18), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassLEDConfigAtt18.setReference("'Dell|SystemChassisExtension|004' 18")
if mibBuilder.loadTexts: chassLEDConfigAtt18.setStatus('mandatory')
if mibBuilder.loadTexts: chassLEDConfigAtt18.setDescription('This attribute is used to configure which fault conditionscause the fault LED to flash. If the value is 0, thenthis feature is not available. A value of 16 indicatesflash for failure conditions. A value of 8 indicatesfla h for failure and warning conditions.')
chassFaultClearAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 19), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassFaultClearAtt19.setReference("'Dell|SystemChassisExtension|004' 19")
if mibBuilder.loadTexts: chassFaultClearAtt19.setStatus('mandatory')
if mibBuilder.loadTexts: chassFaultClearAtt19.setDescription('This attribute is used to clear the hard drive fault LED.If this value is non-zero, then it is available. Writingany value to this attribut will clear the hard drive faultLED.')
chassThermalShutdownAtt20 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 20), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassThermalShutdownAtt20.setReference("'Dell|SystemChassisExtension|004' 20")
if mibBuilder.loadTexts: chassThermalShutdownAtt20.setStatus('mandatory')
if mibBuilder.loadTexts: chassThermalShutdownAtt20.setDescription('This attribute is used to enable thermal shutdown of a chassis. If the value is -1, then thermal shutdown is notenabled. A value of 5 will shutdown on failures, a value of 4will shutdown on failures and warnings.')
chassMemStatusAtt21 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassMemStatusAtt21.setReference("'Dell|SystemChassisExtension|004' 21")
if mibBuilder.loadTexts: chassMemStatusAtt21.setStatus('mandatory')
if mibBuilder.loadTexts: chassMemStatusAtt21.setDescription('Global status of Memory Devices.')
chassMemDevicesAtt22 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 22), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassMemDevicesAtt22.setReference("'Dell|SystemChassisExtension|004' 22")
if mibBuilder.loadTexts: chassMemDevicesAtt22.setStatus('mandatory')
if mibBuilder.loadTexts: chassMemDevicesAtt22.setDescription('This contains the statuses of all memory devices in the system, one device per octet. The value of each octet is the value of the status field.')
dmtfSystemsMIF = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2, 4))
dMTFPhysicalContainerGlobalTableTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 63), )
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableTable.setDescription('This group of attributes describes the fields in a row ofthe Physical Container Global Table. This table lists all of the containers (e.g. chassis, sub-chassis, etc.) included within the component whose structure is being described')
dMTFPhysicalContainerGlobalTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "containerIndexAtt9"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEntry.setDescription('This group of attributes describes the fields in a row ofthe Physical Container Global Table. This table lists all of the containers (e.g. chassis, sub-chassis, etc.) included within the component whose structure is being described')
dMTFPhysicalContainerGlobalTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableState.setReference("'DMTF|Physical Container Global Table|002' 0")
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableState.setDescription('')
containerOrChassisTypeAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("desktop", 3), ("lowProfileDesktop", 4), ("pizzaBox", 5), ("miniTower", 6), ("tower", 7), ("portable", 8), ("lapTop", 9), ("notebook", 10), ("handHeld", 11), ("dockingStation", 12), ("allInOne", 13), ("subNotebook", 14), ("spaceSaving", 15), ("lunchBox", 16), ("mainSystemChassis", 17), ("expansionChassis", 18), ("subChassis", 19), ("busExpansionChassis", 20), ("peripheralChassis", 21), ("rAIDChassis", 22), ("rackMountChassis", 23), ("sealedCasePC", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOrChassisTypeAtt1.setReference("'DMTF|Physical Container Global Table|002' 1")
if mibBuilder.loadTexts: containerOrChassisTypeAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: containerOrChassisTypeAtt1.setDescription('The type of container or chassis.')
assetTagAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: assetTagAtt2.setReference("'DMTF|Physical Container Global Table|002' 2")
if mibBuilder.loadTexts: assetTagAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: assetTagAtt2.setDescription('The Container asset tag string. This asset tag string is writeable by the system administrator.')
chassisLockPresentAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLockPresentAtt3.setReference("'DMTF|Physical Container Global Table|002' 3")
if mibBuilder.loadTexts: chassisLockPresentAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: chassisLockPresentAtt3.setDescription('If true, a chassis lock is present on the Container.')
bootupStateAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("warning", 4), ("critical", 5), ("nonRecoverable-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootupStateAtt4.setReference("'DMTF|Physical Container Global Table|002' 4")
if mibBuilder.loadTexts: bootupStateAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: bootupStateAtt4.setDescription('The current state of this system when it booted.')
powerStateAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("warning", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStateAtt5.setReference("'DMTF|Physical Container Global Table|002' 5")
if mibBuilder.loadTexts: powerStateAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: powerStateAtt5.setDescription('The current state of the power supply or battery(s) for this system.')
thermalStateAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("warning", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermalStateAtt6.setReference("'DMTF|Physical Container Global Table|002' 6")
if mibBuilder.loadTexts: thermalStateAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: thermalStateAtt6.setDescription('The current thermal state of this Container.')
fRUGroupIndexAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt7.setReference("'DMTF|Physical Container Global Table|002' 7")
if mibBuilder.loadTexts: fRUGroupIndexAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt7.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
operationalGroupIndexAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt8.setReference("'DMTF|Physical Container Global Table|002' 8")
if mibBuilder.loadTexts: operationalGroupIndexAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt8.setDescription('The index into the Operational State table for this device if applicable.')
containerIndexAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerIndexAtt9.setReference("'DMTF|Physical Container Global Table|002' 9")
if mibBuilder.loadTexts: containerIndexAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: containerIndexAtt9.setDescription('A unique index for the Physical Container in Physical Container Global Table.')
containerNameAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 10), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: containerNameAtt10.setReference("'DMTF|Physical Container Global Table|002' 10")
if mibBuilder.loadTexts: containerNameAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: containerNameAtt10.setDescription('This is any 64-octet long name that the user or system administr tor wishes to give this specific physical container.')
containerLocationAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 11), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: containerLocationAtt11.setReference("'DMTF|Physical Container Global Table|002' 11")
if mibBuilder.loadTexts: containerLocationAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: containerLocationAtt11.setDescription('This attribute is a string name for the location of the containe . This attribute is Read-Write and may be set to any appropriate value by the user. The string may be 128 octets long.')
containerSecurityStatusAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noSecurityBreachDetected", 3), ("containerSecurityBreachAttempted", 4), ("containerSecurityBreached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSecurityStatusAtt12.setReference("'DMTF|Physical Container Global Table|002' 12")
if mibBuilder.loadTexts: containerSecurityStatusAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: containerSecurityStatusAtt12.setDescription('This attribute describes whether the Container is physically secure or not. This includes the state of the door lock, or the boot devices or the keyboard or mouse.')
dellSystemResetTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 312), )
if mibBuilder.loadTexts: dellSystemResetTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemResetTable.setDescription('This group defines whether System Control functions are availabl and enabled.')
dellSystemResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dellSystemResetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemResetEntry.setDescription('This group defines whether System Control functions are availabl and enabled.')
automaticCapabilitiesAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automaticCapabilitiesAtt1.setReference("'Dell|System Reset|001' 1")
if mibBuilder.loadTexts: automaticCapabilitiesAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: automaticCapabilitiesAtt1.setDescription('Indicates which Automatic Capabilities are available for the current operating system. Encoding is as follows: 0x1 = Supports Reboot 0x2 = Supports Power Cycle 0x4 = Supports Notification 0x8 = Supports Configurable Timer If value is nonzero, Watchdog is supported.')
automaticSettingsAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: automaticSettingsAtt2.setReference("'Dell|System Reset|001' 2")
if mibBuilder.loadTexts: automaticSettingsAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: automaticSettingsAtt2.setDescription('Indicates which Automatic Settings are enabled by the user. Encoding is as follows: 0x1 = Enabled w/ Reboot 0x2 = Enabled w/ Power Cycle 0x4 = Enabled w/ Notification If value is nonzero, Watchdog is Enabled.')
notificationNumberAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: notificationNumberAtt3.setReference("'Dell|System Reset|001' 3")
if mibBuilder.loadTexts: notificationNumberAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: notificationNumberAtt3.setDescription('The number to dial when the watchdog timer elapses.')
manualCapabilitiesAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manualCapabilitiesAtt4.setReference("'Dell|System Reset|001' 4")
if mibBuilder.loadTexts: manualCapabilitiesAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: manualCapabilitiesAtt4.setDescription('Describes which system reset actions may occur.Bit encodings: 0x1 = Reboot 0x2 = Power Off 0x4 = Power Cycle 0x8 = Shutdown OS')
manualControlAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manualControlAtt5.setReference("'Dell|System Reset|001' 5")
if mibBuilder.loadTexts: manualControlAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: manualControlAtt5.setDescription('Setting this value will immediately perform one of the following functions. Encoding as follows: Bit encoding: 0x1 = Reboot 0x2 = Power Off 0x4 = Power Cycle 0x8 = Shutdown OS')
automaticSystemResetTimerAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: automaticSystemResetTimerAtt6.setReference("'Dell|System Reset|001' 6")
if mibBuilder.loadTexts: automaticSystemResetTimerAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: automaticSystemResetTimerAtt6.setDescription('Automatic System Reset Timer in seconds. Minimum value is 20 seconds.')
dellEsmLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 307), )
if mibBuilder.loadTexts: dellEsmLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellEsmLogTable.setDescription('ESM Event Log.')
dellEsmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "esmLogIndexAtt1"))
if mibBuilder.loadTexts: dellEsmLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellEsmLogEntry.setDescription('ESM Event Log.')
dellEsmLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellEsmLogState.setReference("'Dell|EsmLog|001' 0")
if mibBuilder.loadTexts: dellEsmLogState.setStatus('mandatory')
if mibBuilder.loadTexts: dellEsmLogState.setDescription('')
esmLogIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmLogIndexAtt1.setReference("'Dell|EsmLog|001' 1")
if mibBuilder.loadTexts: esmLogIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: esmLogIndexAtt1.setDescription('KEY: The index to this log.')
esmLogDataAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmLogDataAtt2.setReference("'Dell|EsmLog|001' 2")
if mibBuilder.loadTexts: esmLogDataAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: esmLogDataAtt2.setDescription('The event log data for the ESM.')
dellPOSTLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 308), )
if mibBuilder.loadTexts: dellPOSTLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellPOSTLogTable.setDescription('POST Codes Event Log.')
dellPOSTLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "postLogIndexAtt1"))
if mibBuilder.loadTexts: dellPOSTLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellPOSTLogEntry.setDescription('POST Codes Event Log.')
dellPOSTLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellPOSTLogState.setReference("'Dell|POSTLog|001' 0")
if mibBuilder.loadTexts: dellPOSTLogState.setStatus('mandatory')
if mibBuilder.loadTexts: dellPOSTLogState.setDescription('')
postLogIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogIndexAtt1.setReference("'Dell|POSTLog|001' 1")
if mibBuilder.loadTexts: postLogIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: postLogIndexAtt1.setDescription('KEY: The index into the post log.')
postLogDataAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1, 2), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogDataAtt2.setReference("'Dell|POSTLog|001' 2")
if mibBuilder.loadTexts: postLogDataAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: postLogDataAtt2.setDescription('The event log data.')
dellSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 309), )
if mibBuilder.loadTexts: dellSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellSecurityTable.setDescription('Security Group - contains user database: Used by both DSA and Baseboard components.')
dellSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "userIndexAtt1"))
if mibBuilder.loadTexts: dellSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellSecurityEntry.setDescription('Security Group - contains user database: Used by both DSA and Baseboard components.')
dellSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellSecurityState.setReference("'Dell|Security|001' 0")
if mibBuilder.loadTexts: dellSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: dellSecurityState.setDescription('')
userIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIndexAtt1.setReference("'Dell|Security|001' 1")
if mibBuilder.loadTexts: userIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: userIndexAtt1.setDescription('Keyed ID for this group.')
userNameAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userNameAtt2.setReference("'Dell|Security|001' 2")
if mibBuilder.loadTexts: userNameAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: userNameAtt2.setDescription("User name. First user name is 'create', allows creation.")
userControlAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userControlAtt3.setReference("'Dell|Security|001' 3")
if mibBuilder.loadTexts: userControlAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: userControlAtt3.setDescription('User control. Used for creating/deleting/editing users.')
requestAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestAtt4.setReference("'Dell|Security|001' 4")
if mibBuilder.loadTexts: requestAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: requestAtt4.setDescription('Request field used for sets.')
dellDialupTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 310), )
if mibBuilder.loadTexts: dellDialupTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellDialupTable.setDescription('Dialup Control - contains information used by the ESM dialup interface.')
dellDialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 310, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dellDialupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellDialupEntry.setDescription('Dialup Control - contains information used by the ESM dialup interface.')
dialupCapabilityAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 310, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialupCapabilityAtt1.setReference("'Dell|Dialup|001' 1")
if mibBuilder.loadTexts: dialupCapabilityAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: dialupCapabilityAtt1.setDescription('Specifies if this system supports dialup.')
callbackNumberAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 310, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callbackNumberAtt2.setReference("'Dell|Dialup|001' 2")
if mibBuilder.loadTexts: callbackNumberAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: callbackNumberAtt2.setDescription('The number to callback when a dialup connection is established.')
dellFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 311), )
if mibBuilder.loadTexts: dellFirmwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellFirmwareTable.setDescription('Firmware Information - Contains version/status of firmware.')
dellFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "firmwareChassisIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "firmwareIndexAtt2"))
if mibBuilder.loadTexts: dellFirmwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellFirmwareEntry.setDescription('Firmware Information - Contains version/status of firmware.')
dellFirmwareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellFirmwareState.setReference("'Dell|Firmware|001' 0")
if mibBuilder.loadTexts: dellFirmwareState.setStatus('mandatory')
if mibBuilder.loadTexts: dellFirmwareState.setDescription('')
firmwareChassisIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareChassisIndexAtt1.setReference("'Dell|Firmware|001' 1")
if mibBuilder.loadTexts: firmwareChassisIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareChassisIndexAtt1.setDescription('Firmware chassis index')
firmwareIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareIndexAtt2.setReference("'Dell|Firmware|001' 2")
if mibBuilder.loadTexts: firmwareIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareIndexAtt2.setDescription('Index into the firmware information table')
firmwareTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("bIOS", 3), ("eSM", 4), ("pSPB", 5), ("backplane", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareTypeAtt3.setReference("'Dell|Firmware|001' 3")
if mibBuilder.loadTexts: firmwareTypeAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareTypeAtt3.setDescription('The type of this firmware.')
firmwareVersionAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersionAtt4.setReference("'Dell|Firmware|001' 4")
if mibBuilder.loadTexts: firmwareVersionAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareVersionAtt4.setDescription('Version level of this firmware')
firmwareStatusAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStatusAtt5.setReference("'Dell|Firmware|001' 5")
if mibBuilder.loadTexts: firmwareStatusAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareStatusAtt5.setDescription('Current status of this firmware, if applicable')
dMTFCoolingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 17), )
if mibBuilder.loadTexts: dMTFCoolingDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFCoolingDeviceTable.setDescription('This group defines various attributes for cooling devices in this system.')
dMTFCoolingDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "coolingDeviceTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFCoolingDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFCoolingDeviceEntry.setDescription('This group defines various attributes for cooling devices in this system.')
dMTFCoolingDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFCoolingDeviceState.setReference("'DMTF|Cooling Device|002' 0")
if mibBuilder.loadTexts: dMTFCoolingDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFCoolingDeviceState.setDescription('')
coolingDeviceTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceTableIndexAtt1.setReference("'DMTF|Cooling Device|002' 1")
if mibBuilder.loadTexts: coolingDeviceTableIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceTableIndexAtt1.setDescription('An index into the cooling device table.')
fRUGroupIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt2.setReference("'DMTF|Cooling Device|002' 2")
if mibBuilder.loadTexts: fRUGroupIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt2.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
operationalGroupIndexAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt3.setReference("'DMTF|Cooling Device|002' 3")
if mibBuilder.loadTexts: operationalGroupIndexAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt3.setDescription('The index into the Operational State table for this device.')
coolingUnitIndexAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitIndexAtt4.setReference("'DMTF|Cooling Device|002' 4")
if mibBuilder.loadTexts: coolingUnitIndexAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitIndexAtt4.setDescription('This is the ID of the Cooling Unit (logical cooling device) of which this Cooling Device is a part. This value matches up with the Cooling Unit Table Index attribute defined in the Cooling Unit Global Table.')
coolingDeviceTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 33))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("fan", 3), ("centrifugalBlower", 4), ("chipFan", 5), ("cabinetFan", 6), ("powerSupplyFan", 7), ("heatPipe", 8), ("integratedRefrigeration", 9), ("activeCooling", 32), ("passiveCooling", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceTypeAtt5.setReference("'DMTF|Cooling Device|002' 5")
if mibBuilder.loadTexts: coolingDeviceTypeAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceTypeAtt5.setDescription('The type of Cooling Device that this is e.g. Fan, Heat Pipe, etc.')
temperatureProbeIndexAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeIndexAtt6.setReference("'DMTF|Cooling Device|002' 6")
if mibBuilder.loadTexts: temperatureProbeIndexAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeIndexAtt6.setDescription('Index into the Temperature Probe table identifying the temperatu e probe monitoring this cooling device. 0 indicates no probe provided.')
dMTFElectricalCurrentProbeTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 55), )
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeTable.setDescription('This group defines the attributes for the current probes in this system.')
dMTFElectricalCurrentProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "electricalCurrentProbeTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEntry.setDescription('This group defines the attributes for the current probes in this system.')
dMTFElectricalCurrentProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeState.setReference("'DMTF|Electrical Current Probe|001' 0")
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeState.setDescription('')
electricalCurrentProbeTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeTableIndexAtt1.setReference("'DMTF|Electrical Current Probe|001' 1")
if mibBuilder.loadTexts: electricalCurrentProbeTableIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeTableIndexAtt1.setDescription('Index into this electrical current probe table.')
electricalCurrentProbeLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheralBay", 5), ("sMBMaster", 6), ("motherboard", 7), ("memoryModule", 8), ("processorModule", 9), ("powerUnit", 10), ("addInCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeLocationAtt2.setReference("'DMTF|Electrical Current Probe|001' 2")
if mibBuilder.loadTexts: electricalCurrentProbeLocationAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeLocationAtt2.setDescription('Identifies the physical location of the electrical current probe.')
electricalCurrentProbeDescriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeDescriptionAtt3.setReference("'DMTF|Electrical Current Probe|001' 3")
if mibBuilder.loadTexts: electricalCurrentProbeDescriptionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeDescriptionAtt3.setDescription("Additional descriptive information about the electrical current probe or probe's location.")
electricalCurrentStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentStatusAtt4.setReference("'DMTF|Electrical Current Probe|001' 4")
if mibBuilder.loadTexts: electricalCurrentStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentStatusAtt4.setDescription('Defines the status of the electrical current monitored by this electrical current probe.')
electricalCurrentProbeReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeReadingAtt5.setReference("'DMTF|Electrical Current Probe|001' 5")
if mibBuilder.loadTexts: electricalCurrentProbeReadingAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeReadingAtt5.setDescription("The present electrical current reading of this probe in milliamp . 0x8000000 denotes 'unknown'.")
monitoredElectricalCurrentNominalReadingAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredElectricalCurrentNominalReadingAtt6.setReference("'DMTF|Electrical Current Probe|001' 6")
if mibBuilder.loadTexts: monitoredElectricalCurrentNominalReadingAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredElectricalCurrentNominalReadingAtt6.setDescription("The nominal electrical current reading of the current monitored by this probe in milliamps. 0x80000000 denotes 'unknown'.")
monitoredElectricalCurrentNormalMaximumAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMaximumAtt7.setReference("'DMTF|Electrical Current Probe|001' 7")
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMaximumAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMaximumAtt7.setDescription("The normal maximum electrical current reading of the current monitored by this probe in milliamps. 0x80000000 denotes 'unknown'.")
monitoredElectricalCurrentNormalMinimumAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMinimumAtt8.setReference("'DMTF|Electrical Current Probe|001' 8")
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMinimumAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMinimumAtt8.setDescription("The normal minimum electrical current reading of the current monitored by this probe in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentProbeMaximumAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeMaximumAtt9.setReference("'DMTF|Electrical Current Probe|001' 9")
if mibBuilder.loadTexts: electricalCurrentProbeMaximumAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeMaximumAtt9.setDescription("The maximum electrical current reading specified to be readable by this probe in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentProbeMinimumAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeMinimumAtt10.setReference("'DMTF|Electrical Current Probe|001' 10")
if mibBuilder.loadTexts: electricalCurrentProbeMinimumAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeMinimumAtt10.setDescription("The minimum electrical current reading specified to be readable by this probe in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentReadingLowerThresholdNonCriticalAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonCriticalAtt11.setReference("'DMTF|Electrical Current Probe|001' 11")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonCriticalAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonCriticalAtt11.setDescription("The lower non-critical threshold for the electrical current reading set by the user, in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentReadingUpperThresholdNonCriticalAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 12), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonCriticalAtt12.setReference("'DMTF|Electrical Current Probe|001' 12")
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonCriticalAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonCriticalAtt12.setDescription("The upper non-critical threshold for the electrical current reading, in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentReadingLowerThresholdCriticalAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdCriticalAtt13.setReference("'DMTF|Electrical Current Probe|001' 13")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdCriticalAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdCriticalAtt13.setDescription("The lower critical threshold for the electrical current probe, in milliamps. 0x80000000 denotes 'unknown'.")
currentReadingUpperThresholdCriticalAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentReadingUpperThresholdCriticalAtt14.setReference("'DMTF|Electrical Current Probe|001' 14")
if mibBuilder.loadTexts: currentReadingUpperThresholdCriticalAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: currentReadingUpperThresholdCriticalAtt14.setDescription("The upper critical threshold for the electrical current probe, in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentReadingLowerThresholdNonRecoverabAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonRecoverabAtt15.setReference("'DMTF|Electrical Current Probe|001' 15")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonRecoverabAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonRecoverabAtt15.setDescription("The lower non-recoverable threshold for the electrical current probe, in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentReadingUpperThresholdNonRecoverabAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 16), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonRecoverabAtt16.setReference("'DMTF|Electrical Current Probe|001' 16")
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonRecoverabAtt16.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonRecoverabAtt16.setDescription("The upper non-recoverable threshold for the electrical current probe, in milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentProbeResolutionAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentProbeResolutionAtt17.setReference("'DMTF|Electrical Current Probe|001' 17")
if mibBuilder.loadTexts: electricalCurrentProbeResolutionAtt17.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeResolutionAtt17.setDescription("The resolution for the reading from this electrical current probe, in tenths of milliamps. '0x80000000 denotes 'unknown'.")
electricalCurrentProbeToleranceAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentProbeToleranceAtt18.setReference("'DMTF|Electrical Current Probe|001' 18")
if mibBuilder.loadTexts: electricalCurrentProbeToleranceAtt18.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeToleranceAtt18.setDescription("The tolerance for the reading from this electrical current probe, in plus/minus milliamps. 0x80000000 denotes 'unknown'.")
electricalCurrentProbeAccuracyAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentProbeAccuracyAtt19.setReference("'DMTF|Electrical Current Probe|001' 19")
if mibBuilder.loadTexts: electricalCurrentProbeAccuracyAtt19.setStatus('mandatory')
if mibBuilder.loadTexts: electricalCurrentProbeAccuracyAtt19.setDescription("The accuracy for the reading from this electrical current probe, in plus/minus hundredths of a percent. 0x80000000 denotes 'unknown'.")
fRUGroupIndexAtt20 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt20.setReference("'DMTF|Electrical Current Probe|001' 20")
if mibBuilder.loadTexts: fRUGroupIndexAtt20.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt20.setDescription('Index into the FRU table')
operationalGroupIndexAtt21 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt21.setReference("'DMTF|Electrical Current Probe|001' 21")
if mibBuilder.loadTexts: operationalGroupIndexAtt21.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt21.setDescription('Index into the Operational State table')
dMTFFRUTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 29), )
if mibBuilder.loadTexts: dMTFFRUTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFFRUTable.setDescription('A Field Replaceable Unit (FRU), is defined as a hardware component which is designed to be separately removable for replacement or repair. For the purposes of this definition, a motherboard and a fixed hard disk are FRUs, whereas a fixed hard disk platter or a chip fixed in place on the motherboard are not FRUs since they are not designed to be separately removable. Each instance within the FRU table should contain the device group and instance data for the associated hardware component.')
dMTFFRUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "fRUIndexAtt1"))
if mibBuilder.loadTexts: dMTFFRUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFFRUEntry.setDescription('A Field Replaceable Unit (FRU), is defined as a hardware component which is designed to be separately removable for replacement or repair. For the purposes of this definition, a motherboard and a fixed hard disk are FRUs, whereas a fixed hard disk platter or a chip fixed in place on the motherboard are not FRUs since they are not designed to be separately removable. Each instance within the FRU table should contain the device group and instance data for the associated hardware component.')
dMTFFRUState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFFRUState.setReference("'DMTF|FRU|002' 0")
if mibBuilder.loadTexts: dMTFFRUState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFFRUState.setDescription('')
fRUIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUIndexAtt1.setReference("'DMTF|FRU|002' 1")
if mibBuilder.loadTexts: fRUIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: fRUIndexAtt1.setDescription('The index into the Field Replaceable Unit table.')
deviceGroupIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceGroupIndexAtt2.setReference("'DMTF|FRU|002' 2")
if mibBuilder.loadTexts: deviceGroupIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGroupIndexAtt2.setDescription('The group ID of the group referencing this Field Replaceable Unit instance.')
descriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: descriptionAtt3.setReference("'DMTF|FRU|002' 3")
if mibBuilder.loadTexts: descriptionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: descriptionAtt3.setDescription('A clear description of this Field Replaceable Unit.')
manufacturerAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturerAtt4.setReference("'DMTF|FRU|002' 4")
if mibBuilder.loadTexts: manufacturerAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: manufacturerAtt4.setDescription('The name of the company manufacturing or providing this Field Replaceable Unit.')
modelAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelAtt5.setReference("'DMTF|FRU|002' 5")
if mibBuilder.loadTexts: modelAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: modelAtt5.setDescription("The manufacturer's model number for this Field Replaceable Unit.")
partNumberAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partNumberAtt6.setReference("'DMTF|FRU|002' 6")
if mibBuilder.loadTexts: partNumberAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: partNumberAtt6.setDescription('A part number by which a replacement part can be ordered for this Field Replaceable Unit.')
fRUSerialNumberAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUSerialNumberAtt7.setReference("'DMTF|FRU|002' 7")
if mibBuilder.loadTexts: fRUSerialNumberAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: fRUSerialNumberAtt7.setDescription("The manufacturer's serial number for this Field Replaceable Unit.")
revisionLevelAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revisionLevelAtt8.setReference("'DMTF|FRU|002' 8")
if mibBuilder.loadTexts: revisionLevelAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: revisionLevelAtt8.setDescription('The revision level of this Field Replaceable Unit.')
warrantyStartDateAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 9), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: warrantyStartDateAtt9.setReference("'DMTF|FRU|002' 9")
if mibBuilder.loadTexts: warrantyStartDateAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: warrantyStartDateAtt9.setDescription('The start date of the service warranty for this Field Replaceabl Unit.')
warrantyDurationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: warrantyDurationAtt10.setReference("'DMTF|FRU|002' 10")
if mibBuilder.loadTexts: warrantyDurationAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: warrantyDurationAtt10.setDescription('The total duration of this Field Replaceable Unit warranty in months.')
supportPhoneNumberAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportPhoneNumberAtt11.setReference("'DMTF|FRU|002' 11")
if mibBuilder.loadTexts: supportPhoneNumberAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: supportPhoneNumberAtt11.setDescription('The phone number(s) for support for this Field Replaceable Unit.')
fRUInternetUniformResourceLocatorAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 12), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUInternetUniformResourceLocatorAtt12.setReference("'DMTF|FRU|002' 12")
if mibBuilder.loadTexts: fRUInternetUniformResourceLocatorAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: fRUInternetUniformResourceLocatorAtt12.setDescription('The Internet Uniform Resource Locator string that can be used through a World Wide Web browser to obtain further information about this FRU')
dMTFGeneralInformationTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 1), )
if mibBuilder.loadTexts: dMTFGeneralInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFGeneralInformationTable.setDescription('This group defines general information about this system.')
dMTFGeneralInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFGeneralInformationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFGeneralInformationEntry.setDescription('This group defines general information about this system.')
systemNameAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNameAtt1.setReference("'DMTF|General Information|001' 1")
if mibBuilder.loadTexts: systemNameAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemNameAtt1.setDescription('A name to identify this system.')
systemLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocationAtt2.setReference("'DMTF|General Information|001' 2")
if mibBuilder.loadTexts: systemLocationAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: systemLocationAtt2.setDescription('The physical location of this system.')
systemPrimaryUserNameAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPrimaryUserNameAtt3.setReference("'DMTF|General Information|001' 3")
if mibBuilder.loadTexts: systemPrimaryUserNameAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: systemPrimaryUserNameAtt3.setDescription('The name of the primary user or owner of this system.')
systemPrimaryUserPhoneAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPrimaryUserPhoneAtt4.setReference("'DMTF|General Information|001' 4")
if mibBuilder.loadTexts: systemPrimaryUserPhoneAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: systemPrimaryUserPhoneAtt4.setDescription('The phone number of the primary user of this system.')
systemBootupTimeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootupTimeAtt5.setReference("'DMTF|General Information|001' 5")
if mibBuilder.loadTexts: systemBootupTimeAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: systemBootupTimeAtt5.setDescription('The time at which the system was last booted.')
systemDateTimeAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 6), DmiDate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDateTimeAtt6.setReference("'DMTF|General Information|001' 6")
if mibBuilder.loadTexts: systemDateTimeAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: systemDateTimeAtt6.setDescription('The actual system date and time.')
dMTFMemoryArrayMappedAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 34), )
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesTable.setDescription('This table presents ranges of physical addresses that are mapped to a given Memory Array.')
dMTFMemoryArrayMappedAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryArrayMappedAddressesTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesEntry.setDescription('This table presents ranges of physical addresses that are mapped to a given Memory Array.')
dMTFMemoryArrayMappedAddressesState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesState.setReference("'DMTF|Memory Array Mapped Addresses|001' 0")
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesState.setDescription('')
memoryArrayMappedAddressesTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayMappedAddressesTableIndexAtt1.setReference("'DMTF|Memory Array Mapped Addresses|001' 1")
if mibBuilder.loadTexts: memoryArrayMappedAddressesTableIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: memoryArrayMappedAddressesTableIndexAtt1.setDescription('A unique number that identifies this row.')
memoryArrayIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayIndexAtt2.setReference("'DMTF|Memory Array Mapped Addresses|001' 2")
if mibBuilder.loadTexts: memoryArrayIndexAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: memoryArrayIndexAtt2.setDescription('The ID of the Memory Array that this address range is mapped to. Multiple address ranges may be mapped to a Memory Array.')
mappedRangeStartingAddressAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt3.setReference("'DMTF|Memory Array Mapped Addresses|001' 3")
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt3.setDescription("The physical starting address, in kilobytes, of a range of memory mapped to the specified Memory Array. 0x80000000 denotes 'unknown'.")
mappedRangeEndingAddressAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt4.setReference("'DMTF|Memory Array Mapped Addresses|001' 4")
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt4.setDescription("The physical ending address of the last kilobyte of a range of addresses mapped to the specified Memory Array. 0x80000000 denotes 'unknown'.")
partitionIDAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionIDAtt5.setReference("'DMTF|Memory Array Mapped Addresses|001' 5")
if mibBuilder.loadTexts: partitionIDAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: partitionIDAtt5.setDescription("Identifies a Memory Partition associated with the Memory Array specified by Memory Array Table Index. 0x80000000 denotes 'unknown'.")
partitionWidthAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionWidthAtt6.setReference("'DMTF|Memory Array Mapped Addresses|001' 6")
if mibBuilder.loadTexts: partitionWidthAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: partitionWidthAtt6.setDescription("The number of Memory Devices that form a single row of memory for the partition. 0x80000000 denotes 'unknown'.")
operationalGroupIndexAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt7.setReference("'DMTF|Memory Array Mapped Addresses|001' 7")
if mibBuilder.loadTexts: operationalGroupIndexAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt7.setDescription('The index into the Operational State Table for this Memory Range. Generally, there will be a 1:1 correspondence between a mapped range and a partition. In which case, the Operational State will be for the partition as well. In the case that there is more than one mapped range for a partion, it will be necessary to check the Operational State entries for each range to determine the overall status of the partition.')
dMTFMemoryDeviceMappedAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 36), )
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesTable.setDescription('This table presents ranges of physical addresses that are mapped to a given Memory Device Set.')
dMTFMemoryDeviceMappedAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryDeviceMappedAddressesTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesEntry.setDescription('This table presents ranges of physical addresses that are mapped to a given Memory Device Set.')
dMTFMemoryDeviceMappedAddressesState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesState.setReference("'DMTF|Memory Device Mapped Addresses|001' 0")
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesState.setDescription('')
memoryDeviceMappedAddressesTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressesTableIndexAtt1.setReference("'DMTF|Memory Device Mapped Addresses|001' 1")
if mibBuilder.loadTexts: memoryDeviceMappedAddressesTableIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressesTableIndexAtt1.setDescription('A unique number that identifies this row.')
memoryDeviceSetIDAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSetIDAtt2.setReference("'DMTF|Memory Device Mapped Addresses|001' 2")
if mibBuilder.loadTexts: memoryDeviceSetIDAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSetIDAtt2.setDescription('The row in the Memory Device table that this address range is for. This matches with a Memory Device Table Index. There may be multiple rows in Memory Device Mapped addresses for a single Memory Device.')
partitionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionAtt3.setReference("'DMTF|Memory Device Mapped Addresses|001' 3")
if mibBuilder.loadTexts: partitionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: partitionAtt3.setDescription("Identifies the Memory partition in the Memory Array Mapped Addresses table that this Memory Device is part of. Partition number should be positive. 0x80000000 denotes 'unknown'.")
mappedRangeStartingAddressAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt4.setReference("'DMTF|Memory Device Mapped Addresses|001' 4")
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt4.setDescription("The physical starting address, in kilobytes, of a range of memory mapped to the specified Memory Device set. The address is specified relative to the bus that the device is connected to. 0x80000000 denotes 'unknown .")
mappedRangeEndingAddressAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt5.setReference("'DMTF|Memory Device Mapped Addresses|001' 5")
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt5.setDescription("The physical ending address of the last kilobyte of a range of addresses mapped to the specified Memory Device. The address is specified relative to the bus that the device is connected to. 0x80000000 denotes 'unknown .")
partitionRowPositionAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionRowPositionAtt6.setReference("'DMTF|Memory Device Mapped Addresses|001' 6")
if mibBuilder.loadTexts: partitionRowPositionAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: partitionRowPositionAtt6.setDescription("This specifies the position of the device in a row of the partition. For example, if it takes two 8-bit memory devices to form a 16-bit row, then a value of '2'in this attribute means the device is the second device. 0 is an invalid return value. 0x80000000 denotes 'unknown'.")
interleavePositionAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interleavePositionAtt7.setReference("'DMTF|Memory Device Mapped Addresses|001' 7")
if mibBuilder.loadTexts: interleavePositionAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: interleavePositionAtt7.setDescription("The position of this device in an interleave. 0 indicates non-interleaved. 1 indicates the first position 2 the second, and so on. For example, in a 2:1 interleave, a value of '1' would indicate the device is in the 'even' position, in a 4:1 interleave this would be the first of four possible positions). 0x80000000 denotes 'unknown' or'unsupported'.")
dataDepthAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataDepthAtt8.setReference("'DMTF|Memory Device Mapped Addresses|001' 8")
if mibBuilder.loadTexts: dataDepthAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: dataDepthAtt8.setDescription("The maximum number of consecutive rows accessed from this device in a single interleaved transfer. For example, if a device transfers two rows each time it is read, its Interleaved Data Depth would be 2. If that device is 2:1 interleaved and in Interleave Position '1', then the rows mapped to that device would be rows 1,2,5,6,9,10, etc. If the device is not part of an interleave, this value should be 0. 0x80000000 denotes 'unknown'.")
dMTFMemoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 35), )
if mibBuilder.loadTexts: dMTFMemoryDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryDeviceTable.setDescription('This group presents information about individual memory devices in the system. A memory device can be a SIMM, a SIPP, or a single chip, or an entire card-based on the resolution to which a memory error can be determined and whether the device is replaceable as a unit.')
dMTFMemoryDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryDeviceTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFMemoryDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryDeviceEntry.setDescription('This group presents information about individual memory devices in the system. A memory device can be a SIMM, a SIPP, or a single chip, or an entire card-based on the resolution to which a memory error can be determined and whether the device is replaceable as a unit.')
dMTFMemoryDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFMemoryDeviceState.setReference("'DMTF|Memory Device|001' 0")
if mibBuilder.loadTexts: dMTFMemoryDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFMemoryDeviceState.setDescription('')
memoryDeviceTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceTableIndexAtt1.setReference("'DMTF|Memory Device|001' 1")
if mibBuilder.loadTexts: memoryDeviceTableIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTableIndexAtt1.setDescription('A unique number that identifies this row.')
memoryArrayIndexAtt2_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 2), DmiInteger()).setLabel("memoryArrayIndexAtt2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayIndexAtt2_1.setReference("'DMTF|Memory Device|001' 2")
if mibBuilder.loadTexts: memoryArrayIndexAtt2_1.setStatus('mandatory')
if mibBuilder.loadTexts: memoryArrayIndexAtt2_1.setDescription('The ID of the Memory Array that this Memory Device is a part of.')
deviceLocatorAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLocatorAtt3.setReference("'DMTF|Memory Device|001' 3")
if mibBuilder.loadTexts: deviceLocatorAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: deviceLocatorAtt3.setDescription("A string identifying the physically labeled socket or board position where the memory device is located. Eg. 'SIMM 3' or 'IC12'.")
bankLocatorAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankLocatorAtt4.setReference("'DMTF|Memory Device|001' 4")
if mibBuilder.loadTexts: bankLocatorAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: bankLocatorAtt4.setDescription("A string identifying the physically labeled bank where the memory device is located. Eg. 'Bank 0' or 'A'.")
sizeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sizeAtt5.setReference("'DMTF|Memory Device|001' 5")
if mibBuilder.loadTexts: sizeAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: sizeAtt5.setDescription('Size of this memory device, in bytes.')
formFactorAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("sIMM", 3), ("sIP", 4), ("chip", 5), ("dIP", 6), ("zIP", 7), ("proprietaryCard", 8), ("dIMM", 9), ("tSOP", 10), ("rowOfChips", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: formFactorAtt6.setReference("'DMTF|Memory Device|001' 6")
if mibBuilder.loadTexts: formFactorAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: formFactorAtt6.setDescription('Implementation form factor for this memory device.')
totalWidthAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalWidthAtt7.setReference("'DMTF|Memory Device|001' 7")
if mibBuilder.loadTexts: totalWidthAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: totalWidthAtt7.setDescription("Total width of this memory device, including check or error correction bits, in bits. If there are no error correction bits, the value in this attribute should match that specified in Data Width. 0x80000000 denotes 'unknown'.")
dataWidthAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataWidthAtt8.setReference("'DMTF|Memory Device|001' 8")
if mibBuilder.loadTexts: dataWidthAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: dataWidthAtt8.setDescription("Data width of this memory device, in bits. A data width of 0 and a Total Width of 8 would indicate that the device is solely being used to provide eight error correction bits. 0x80000000 denotes 'unknown'.")
memoryTypeAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dRAM", 3), ("eDRAM", 4), ("vRAM", 5), ("sRAM", 6), ("rAM", 7), ("rOM", 8), ("fLASH", 9), ("eEPROM", 10), ("fEPROM", 11), ("ePROM", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTypeAtt9.setReference("'DMTF|Memory Device|001' 9")
if mibBuilder.loadTexts: memoryTypeAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: memoryTypeAtt9.setDescription('Type of memory used in this memory device.')
typeDetailAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("fastPaged", 3), ("staticColumn", 4), ("pseudoStatic", 5), ("rAMBUS", 6), ("synchronous", 7), ("cMOS", 8), ("eDO", 9), ("windowDRAM", 10), ("cacheDRAM", 11), ("nonVolatile", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: typeDetailAtt10.setReference("'DMTF|Memory Device|001' 10")
if mibBuilder.loadTexts: typeDetailAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: typeDetailAtt10.setDescription('Additional detail on the device type.')
deviceSetAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSetAtt11.setReference("'DMTF|Memory Device|001' 11")
if mibBuilder.loadTexts: deviceSetAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: deviceSetAtt11.setDescription("This attribute is used to identify when the Memory Device is one of a set of Memory Devices that must be populated with all devices of the same type and size, and which set the device belongs to. For example, when one SIMM belongs to a set of four. 0 indicates the Memory Device isn't part of a set. 0x80000000 denotes 'unknown'.")
deviceErrorTypeAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("cRCError", 11), ("correctedSingleBitError", 12), ("correctedError", 13), ("uncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceErrorTypeAtt12.setReference("'DMTF|Memory Device|001' 12")
if mibBuilder.loadTexts: deviceErrorTypeAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: deviceErrorTypeAtt12.setDescription('The type of error that is associated with the current status reported in Operational State for this Memory Device.')
errorGranularityAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("deviceLevel", 3), ("memoryPartitionLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorGranularityAtt13.setReference("'DMTF|Memory Device|001' 13")
if mibBuilder.loadTexts: errorGranularityAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: errorGranularityAtt13.setDescription("Specifies whether the current error's location can be resolved to the partition or device level.")
lastErrorUpdateAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noUpdateSinceLastInstrumentationStart", 3), ("updatedFromInformationObtainedPriorToInstrumentati", 4), ("updatedDuringInstrumentationRunTime", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorUpdateAtt14.setReference("'DMTF|Memory Device|001' 14")
if mibBuilder.loadTexts: lastErrorUpdateAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: lastErrorUpdateAtt14.setDescription('System state during which the last error update was collected.')
errorOperationAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorOperationAtt15.setReference("'DMTF|Memory Device|001' 15")
if mibBuilder.loadTexts: errorOperationAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: errorOperationAtt15.setDescription('The memory access operation that caused the current error.')
errorDataSizeAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataSizeAtt16.setReference("'DMTF|Memory Device|001' 16")
if mibBuilder.loadTexts: errorDataSizeAtt16.setStatus('mandatory')
if mibBuilder.loadTexts: errorDataSizeAtt16.setDescription("The size of the data transfer that caused the error,in bits. Zero indicates no error, 0x80000000 denotes 'unknown'.")
errorDataAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 17), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataAtt17.setReference("'DMTF|Memory Device|001' 17")
if mibBuilder.loadTexts: errorDataAtt17.setStatus('mandatory')
if mibBuilder.loadTexts: errorDataAtt17.setDescription("Data captured during the erroneous Memory Array access. The data occupies the first n bytes of the octet string required to hold 'Error Data Size' bits of the data. Data is stored least-significant byte first.")
vendorSyndromeAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 18), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorSyndromeAtt18.setReference("'DMTF|Memory Device|001' 18")
if mibBuilder.loadTexts: vendorSyndromeAtt18.setStatus('mandatory')
if mibBuilder.loadTexts: vendorSyndromeAtt18.setDescription('Vendor-specific syndrome or CRC data associated with the erroneous access.')
deviceErrorAddressAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceErrorAddressAtt19.setReference("'DMTF|Memory Device|001' 19")
if mibBuilder.loadTexts: deviceErrorAddressAtt19.setStatus('mandatory')
if mibBuilder.loadTexts: deviceErrorAddressAtt19.setDescription("Physical address of the error relative to the start of the device, in bytes. 0x80000000 denotes 'unknown'.")
arrayErrorAddressAtt20 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayErrorAddressAtt20.setReference("'DMTF|Memory Device|001' 20")
if mibBuilder.loadTexts: arrayErrorAddressAtt20.setStatus('mandatory')
if mibBuilder.loadTexts: arrayErrorAddressAtt20.setDescription("Physical address of the kilobyte where the error is located, relative to the bus for the Memory Array. 0x80000000 denotes 'unknown'.")
errorResolutionAtt21 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorResolutionAtt21.setReference("'DMTF|Memory Device|001' 21")
if mibBuilder.loadTexts: errorResolutionAtt21.setStatus('mandatory')
if mibBuilder.loadTexts: errorResolutionAtt21.setDescription("Range in bytes that the error can be determined to be within,whe an Error Address is given. 0x80000000 denotes 'unknown'.")
fRUGroupIndexAtt22 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt22.setReference("'DMTF|Memory Device|001' 22")
if mibBuilder.loadTexts: fRUGroupIndexAtt22.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt22.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
operationalGroupIndexAtt23 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt23.setReference("'DMTF|Memory Device|001' 23")
if mibBuilder.loadTexts: operationalGroupIndexAtt23.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt23.setDescription('The index into the Operational State Table for this device.')
dMTFOperatingSystemTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 2), )
if mibBuilder.loadTexts: dMTFOperatingSystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFOperatingSystemTable.setDescription('This group defines general information about operating systems installed on this system.')
dMTFOperatingSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "operatingSystemIndexAtt1"))
if mibBuilder.loadTexts: dMTFOperatingSystemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFOperatingSystemEntry.setDescription('This group defines general information about operating systems installed on this system.')
dMTFOperatingSystemState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFOperatingSystemState.setReference("'DMTF|Operating System|001' 0")
if mibBuilder.loadTexts: dMTFOperatingSystemState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFOperatingSystemState.setDescription('')
operatingSystemIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemIndexAtt1.setReference("'DMTF|Operating System|001' 1")
if mibBuilder.loadTexts: operatingSystemIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemIndexAtt1.setDescription('The index into the operating system table.')
operatingSystemNameAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemNameAtt2.setReference("'DMTF|Operating System|001' 2")
if mibBuilder.loadTexts: operatingSystemNameAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemNameAtt2.setDescription('The name of this operating system.')
operatingSystemVersionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemVersionAtt3.setReference("'DMTF|Operating System|001' 3")
if mibBuilder.loadTexts: operatingSystemVersionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemVersionAtt3.setDescription('The version number of this operating system.')
primaryOperatingSystemAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryOperatingSystemAtt4.setReference("'DMTF|Operating System|001' 4")
if mibBuilder.loadTexts: primaryOperatingSystemAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: primaryOperatingSystemAtt4.setDescription('If true, this is the primary operating system.')
operatingSystemBootDeviceStorageTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("hardDisk", 3), ("floppyDisk", 4), ("opticalROM", 5), ("opticalWORM", 6), ("opticalRW", 7), ("compactDisk", 8), ("flashDisk", 9), ("bernoulli", 10), ("opticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemBootDeviceStorageTypeAtt5.setReference("'DMTF|Operating System|001' 5")
if mibBuilder.loadTexts: operatingSystemBootDeviceStorageTypeAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemBootDeviceStorageTypeAtt5.setDescription('An index into the Disks Table to indicate the device from which this operating system was booted. To fully access the Disks Table, this index must be combined with the attribute Boot Device Index.')
operatingSystemBootDeviceIndexAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemBootDeviceIndexAtt6.setReference("'DMTF|Operating System|001' 6")
if mibBuilder.loadTexts: operatingSystemBootDeviceIndexAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemBootDeviceIndexAtt6.setDescription('An index into the Disks Table.')
operatingSystemBootPartitionIndexAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemBootPartitionIndexAtt7.setReference("'DMTF|Operating System|001' 7")
if mibBuilder.loadTexts: operatingSystemBootPartitionIndexAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemBootPartitionIndexAtt7.setDescription('An index into the Partition table indicating the partition from which this operating system booted.')
operatingSystemDescriptionAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemDescriptionAtt8.setReference("'DMTF|Operating System|001' 8")
if mibBuilder.loadTexts: operatingSystemDescriptionAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemDescriptionAtt8.setDescription('A description of this operating system.')
dMTFOperationalStateTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 30), )
if mibBuilder.loadTexts: dMTFOperationalStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFOperationalStateTable.setDescription('This group provides the operational state, usage, and availabili y status,and administrative state indicators for specific Device Group instances ')
dMTFOperationalStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "operationalStateInstanceIndexAtt1"))
if mibBuilder.loadTexts: dMTFOperationalStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFOperationalStateEntry.setDescription('This group provides the operational state, usage, and availabili y status,and administrative state indicators for specific Device Group instances ')
dMTFOperationalStateState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFOperationalStateState.setReference("'DMTF|Operational State|003' 0")
if mibBuilder.loadTexts: dMTFOperationalStateState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFOperationalStateState.setDescription('')
operationalStateInstanceIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalStateInstanceIndexAtt1.setReference("'DMTF|Operational State|003' 1")
if mibBuilder.loadTexts: operationalStateInstanceIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: operationalStateInstanceIndexAtt1.setDescription('The Index into the Operational State table.')
deviceGroupIndexAtt2_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 2), DmiInteger()).setLabel("deviceGroupIndexAtt2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceGroupIndexAtt2_1.setReference("'DMTF|Operational State|003' 2")
if mibBuilder.loadTexts: deviceGroupIndexAtt2_1.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGroupIndexAtt2_1.setDescription('The group ID of the group referencing this instance.')
operationalStatusAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalStatusAtt3.setReference("'DMTF|Operational State|003' 3")
if mibBuilder.loadTexts: operationalStatusAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: operationalStatusAtt3.setDescription('The operational status of the Device Group instance.')
usageStateAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("idle", 3), ("active", 4), ("busy", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageStateAtt4.setReference("'DMTF|Operational State|003' 4")
if mibBuilder.loadTexts: usageStateAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: usageStateAtt4.setDescription('The usage state of the Device Group instance.')
availabilityStatusAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("running", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: availabilityStatusAtt5.setReference("'DMTF|Operational State|003' 5")
if mibBuilder.loadTexts: availabilityStatusAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: availabilityStatusAtt5.setDescription('The availability status of the Device Group instance.')
administrativeStateAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("locked", 3), ("unlocked", 4), ("notApplicable", 5), ("shuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: administrativeStateAtt6.setReference("'DMTF|Operational State|003' 6")
if mibBuilder.loadTexts: administrativeStateAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: administrativeStateAtt6.setDescription('The administrative state of the Device Group instance.')
fatalErrorCountAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalErrorCountAtt7.setReference("'DMTF|Operational State|003' 7")
if mibBuilder.loadTexts: fatalErrorCountAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: fatalErrorCountAtt7.setDescription('The accumulated Fatal or Non-recoverable error count for this Device Group instance.')
majorErrorCountAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorErrorCountAtt8.setReference("'DMTF|Operational State|003' 8")
if mibBuilder.loadTexts: majorErrorCountAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: majorErrorCountAtt8.setDescription('The accumulated Major or Critical error count for this Device Group instance.')
warningErrorCountAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: warningErrorCountAtt9.setReference("'DMTF|Operational State|003' 9")
if mibBuilder.loadTexts: warningErrorCountAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: warningErrorCountAtt9.setDescription('The accumulated Warning or Non-Critical error count for this Device Group instance.')
currentErrorStatusAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentErrorStatusAtt10.setReference("'DMTF|Operational State|003' 10")
if mibBuilder.loadTexts: currentErrorStatusAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: currentErrorStatusAtt10.setDescription("This attribute presents the current error status for this Device Group instance. The most critical error status in effect should be presented. I.e. if a part of the Device Group instance is 'Critical', while other status is 'Non-critical' then the status'Critical' should be reported.")
devicePredictedFailureStatusAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("notSupportedByThisDevice", 3), ("noFailurePredictedByTheDevice", 4), ("deviceFailurePredictedByTheDevice", 5), ("mediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePredictedFailureStatusAtt11.setReference("'DMTF|Operational State|003' 11")
if mibBuilder.loadTexts: devicePredictedFailureStatusAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: devicePredictedFailureStatusAtt11.setDescription('Enumeration describing the current Device Predicted Failure Status (e.g.: the S.M.A.R.T. status of the device).')
dmiDynOid386845712 = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3, 386845712))
dmiDynOid73111109 = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109))
dmiDynOid3922453424 = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424))
iNTELMIFTOMIBTable = MibTable((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472), )
if mibBuilder.loadTexts: iNTELMIFTOMIBTable.setStatus('mandatory')
if mibBuilder.loadTexts: iNTELMIFTOMIBTable.setDescription('This group maps the DMI attributes to SNMP.')
iNTELMIFTOMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: iNTELMIFTOMIBEntry.setStatus('mandatory')
if mibBuilder.loadTexts: iNTELMIFTOMIBEntry.setDescription('This group maps the DMI attributes to SNMP.')
dellBaseBoardMIBAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellBaseBoardMIBAtt1.setReference("'INTEL|MIFTOMIB|1.0' 1")
if mibBuilder.loadTexts: dellBaseBoardMIBAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: dellBaseBoardMIBAtt1.setDescription('The MIB name that defines this MIF')
mIBOIDAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBOIDAtt2.setReference("'INTEL|MIFTOMIB|1.0' 2")
if mibBuilder.loadTexts: mIBOIDAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: mIBOIDAtt2.setDescription('The MIB OID that corresponds to this MIF')
disableTrapsAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disableTrapsAtt3.setReference("'INTEL|MIFTOMIB|1.0' 3")
if mibBuilder.loadTexts: disableTrapsAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: disableTrapsAtt3.setDescription('Setting this value to 1 disables trap generation.')
dMTFPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 16), )
if mibBuilder.loadTexts: dMTFPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerSupplyTable.setDescription('This group defines various attributes for power supplies in this system.')
dMTFPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "powerSupplyIndexAtt1"))
if mibBuilder.loadTexts: dMTFPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerSupplyEntry.setDescription('This group defines various attributes for power supplies in this system.')
dMTFPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPowerSupplyState.setReference("'DMTF|Power Supply|002' 0")
if mibBuilder.loadTexts: dMTFPowerSupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerSupplyState.setDescription('')
powerSupplyIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndexAtt1.setReference("'DMTF|Power Supply|002' 1")
if mibBuilder.loadTexts: powerSupplyIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyIndexAtt1.setDescription('The index number of the current power supply.')
fRUGroupIndexAtt2_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 2), DmiInteger()).setLabel("fRUGroupIndexAtt2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt2_1.setReference("'DMTF|Power Supply|002' 2")
if mibBuilder.loadTexts: fRUGroupIndexAtt2_1.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt2_1.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
operationalGroupIndexAtt3_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 3), DmiInteger()).setLabel("operationalGroupIndexAtt3-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt3_1.setReference("'DMTF|Power Supply|002' 3")
if mibBuilder.loadTexts: operationalGroupIndexAtt3_1.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt3_1.setDescription('The index into the Operational State table for this device.')
powerUnitIndexAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndexAtt4.setReference("'DMTF|Power Supply|002' 4")
if mibBuilder.loadTexts: powerUnitIndexAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitIndexAtt4.setDescription('This is the ID of the Power Unit (logical power supply) to which this Power Supply belongs. This value matches up with the Power Unit Table Index attribute defined in the Power Unit Global Table.')
powerSupplyTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("linear", 3), ("switching", 4), ("battery", 5), ("uPS", 6), ("converter", 7), ("regulator", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyTypeAtt5.setReference("'DMTF|Power Supply|002' 5")
if mibBuilder.loadTexts: powerSupplyTypeAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTypeAtt5.setDescription('This attribute describes the type of Power Supply, e.g. Linear, Switching, Battery, etc.')
inputVoltageCapabilityDescriptionAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageCapabilityDescriptionAtt6.setReference("'DMTF|Power Supply|002' 6")
if mibBuilder.loadTexts: inputVoltageCapabilityDescriptionAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: inputVoltageCapabilityDescriptionAtt6.setDescription('An expanded description of the Input Voltage Capability for this Power Supply.')
range1InputVoltageLowAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputVoltageLowAtt7.setReference("'DMTF|Power Supply|002' 7")
if mibBuilder.loadTexts: range1InputVoltageLowAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: range1InputVoltageLowAtt7.setDescription("The low voltage of Input Voltage Range 1 for this Power Supply, in millivolts. A value of 0x80000000 denotes 'unknown'.")
range1InputVoltageHighAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputVoltageHighAtt8.setReference("'DMTF|Power Supply|002' 8")
if mibBuilder.loadTexts: range1InputVoltageHighAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: range1InputVoltageHighAtt8.setDescription("The high voltage of Input Voltage Range 1 for this Power Supply, in millivolts. A value of 0x80000000 denotes 'unknown'.")
range1VoltageProbeIndexAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1VoltageProbeIndexAtt9.setReference("'DMTF|Power Supply|002' 9")
if mibBuilder.loadTexts: range1VoltageProbeIndexAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: range1VoltageProbeIndexAtt9.setDescription('Index into the Voltage Probe table identifying the voltage probe monitoring this input range. 0 indicates no probe provided.')
range1ElectricalCurrentProbeIndexAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1ElectricalCurrentProbeIndexAtt10.setReference("'DMTF|Power Supply|002' 10")
if mibBuilder.loadTexts: range1ElectricalCurrentProbeIndexAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: range1ElectricalCurrentProbeIndexAtt10.setDescription('Index into the Elelctrical Current Probe table identifying the Electrical current probe monitoring this input range. 0 indicates no probe provided.')
range2InputVoltageLowAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputVoltageLowAtt11.setReference("'DMTF|Power Supply|002' 11")
if mibBuilder.loadTexts: range2InputVoltageLowAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: range2InputVoltageLowAtt11.setDescription("The low voltage of Input Voltage Range 2 for this Power Supply, in millivolts. A value of 0x80000000 denotes 'unknown'.")
range2InputVoltageHighAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputVoltageHighAtt12.setReference("'DMTF|Power Supply|002' 12")
if mibBuilder.loadTexts: range2InputVoltageHighAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: range2InputVoltageHighAtt12.setDescription("The high voltage of Input Voltage Range 2 for this Power Supply, in millivolts. A value of 0x80000000 denotes 'unknown'")
range2VoltageProbeIndexAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2VoltageProbeIndexAtt13.setReference("'DMTF|Power Supply|002' 13")
if mibBuilder.loadTexts: range2VoltageProbeIndexAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: range2VoltageProbeIndexAtt13.setDescription('Index into the Voltage Probe table identifying the voltage probe monitoring this input range. 0 indicates no probe provided.')
range2CurrentProbeIndexAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2CurrentProbeIndexAtt14.setReference("'DMTF|Power Supply|002' 14")
if mibBuilder.loadTexts: range2CurrentProbeIndexAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: range2CurrentProbeIndexAtt14.setDescription('Index into the Current Probe table identifying the current probe monitoring this input range. 0 indicates no probe provided.')
activeInputVoltageRangeAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("range1", 3), ("range2", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeInputVoltageRangeAtt15.setReference("'DMTF|Power Supply|002' 15")
if mibBuilder.loadTexts: activeInputVoltageRangeAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: activeInputVoltageRangeAtt15.setDescription('The value of this attribute indicates which input voltage range of this Power Supply is currently active.')
inputVoltageRangeSwitchingAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("manual", 3), ("autoswitch", 4), ("wideRange", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageRangeSwitchingAtt16.setReference("'DMTF|Power Supply|002' 16")
if mibBuilder.loadTexts: inputVoltageRangeSwitchingAtt16.setStatus('mandatory')
if mibBuilder.loadTexts: inputVoltageRangeSwitchingAtt16.setDescription('This attribute describes the kind of input voltage range switching that is implemented in this power supply.')
range1InputFrequencyLowAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputFrequencyLowAtt17.setReference("'DMTF|Power Supply|002' 17")
if mibBuilder.loadTexts: range1InputFrequencyLowAtt17.setStatus('mandatory')
if mibBuilder.loadTexts: range1InputFrequencyLowAtt17.setDescription("The frequency at the low end of this power supply's Input Frequency Range 1. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
range1InputFrequencyHighAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputFrequencyHighAtt18.setReference("'DMTF|Power Supply|002' 18")
if mibBuilder.loadTexts: range1InputFrequencyHighAtt18.setStatus('mandatory')
if mibBuilder.loadTexts: range1InputFrequencyHighAtt18.setDescription("The frequency at the high end of this power supply's Input Frequency Range 1. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
range2InputFrequencyLowAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputFrequencyLowAtt19.setReference("'DMTF|Power Supply|002' 19")
if mibBuilder.loadTexts: range2InputFrequencyLowAtt19.setStatus('mandatory')
if mibBuilder.loadTexts: range2InputFrequencyLowAtt19.setDescription("The frequency at the low end of this power supply's Input Frequency Range 2. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
range2InputFrequencyHighAtt20 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputFrequencyHighAtt20.setReference("'DMTF|Power Supply|002' 20")
if mibBuilder.loadTexts: range2InputFrequencyHighAtt20.setStatus('mandatory')
if mibBuilder.loadTexts: range2InputFrequencyHighAtt20.setDescription("The frequency at the high end of this power supply's Input Frequency Range 2. A value of zero implies DC. A value of 0x80000000 denotes 'unknown'")
totalOutputPowerAtt21 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOutputPowerAtt21.setReference("'DMTF|Power Supply|002' 21")
if mibBuilder.loadTexts: totalOutputPowerAtt21.setStatus('mandatory')
if mibBuilder.loadTexts: totalOutputPowerAtt21.setDescription("This attribute value represents the total output power of this power supply in milliWatts. 0x80000000 denotes 'unknown'")
dMTFPowerUnitGlobalTableTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 66), )
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableTable.setDescription("This global table describes all of the Power Units in this system component. The unique index of each Power Unit is the key into this table. A Power Unit is composed of potentially more than one Power Supply in a redundant configuration. Individual power supplies are described in the 'Power Supply' standard group. In that group, each individual power supply entry will point to a Power Unit in this table by using the index of the row in this table that describes the Power Unit. If a Power Unit is redunda")
dMTFPowerUnitGlobalTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "powerUnitIndexAtt1"))
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableEntry.setDescription("This global table describes all of the Power Units in this system component. The unique index of each Power Unit is the key into this table. A Power Unit is composed of potentially more than one Power Supply in a redundant configuration. Individual power supplies are described in the 'Power Supply' standard group. In that group, each individual power supply entry will point to a Power Unit in this table by using the index of the row in this table that describes the Power Unit. If a Power Unit is redunda")
dMTFPowerUnitGlobalTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableState.setReference("'DMTF|Power Unit Global Table|001' 0")
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableState.setDescription('')
powerUnitIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndexAtt1.setReference("'DMTF|Power Unit Global Table|001' 1")
if mibBuilder.loadTexts: powerUnitIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitIndexAtt1.setDescription('The unique index given to each Power Unit being described by this table. This unique index is the key into this table.')
powerUnitRedundancyStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("notApplicableUnitNotRedundant-1", 3), ("offline", 4), ("fullyRedundant-1", 5), ("degradedRedundancy", 6), ("redundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitRedundancyStatusAtt2.setReference("'DMTF|Power Unit Global Table|001' 2")
if mibBuilder.loadTexts: powerUnitRedundancyStatusAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitRedundancyStatusAtt2.setDescription("Gives the redundancy status of the Power Unit. 'Fully Redundant means that all of the configured redundancy is still available; 'Degraded Redundancy' means that some failures have been experienced but some reduced amount of redundancy is still available; 'Redundancy Lost' means that a sufficie t number of failures have been experienced that no redundancy is available and the next failure experienced within the Power Unit will cause overall Power Unit failure. ")
dMTFProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 5), )
if mibBuilder.loadTexts: dMTFProcessorTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFProcessorTable.setDescription('This group defines the attributes for each and every processor installed in this system.')
dMTFProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "processorIndexAtt1"))
if mibBuilder.loadTexts: dMTFProcessorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFProcessorEntry.setDescription('This group defines the attributes for each and every processor installed in this system.')
dMTFProcessorState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFProcessorState.setReference("'DMTF|Processor|006' 0")
if mibBuilder.loadTexts: dMTFProcessorState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFProcessorState.setDescription('')
processorIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorIndexAtt1.setReference("'DMTF|Processor|006' 1")
if mibBuilder.loadTexts: processorIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: processorIndexAtt1.setDescription('An index into the processor table.')
processorTypeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("centralProcessor", 3), ("mathProcessor", 4), ("dSPProcessor", 5), ("videoProcessor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorTypeAtt2.setReference("'DMTF|Processor|006' 2")
if mibBuilder.loadTexts: processorTypeAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: processorTypeAtt2.setDescription('The type of processor currently in the system.')
processorFamilyAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 25, 26, 32, 33, 34, 35, 36, 48, 64, 80, 96, 97, 98, 99, 100, 101, 112, 128, 144, 160))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8086", 3), ("x80286", 4), ("x80386", 5), ("x80486", 6), ("x8087", 7), ("x80287", 8), ("x80387", 9), ("x80487", 10), ("pentiumFamily", 11), ("pentiumPro", 12), ("pentiumII", 13), ("pentiumMMX", 14), ("celeron", 15), ("xeon", 16), ("m1Family", 18), ("m2Family", 19), ("k5Family", 25), ("k6Family", 26), ("powerPCFamily", 32), ("powerPC601", 33), ("powerPC603", 34), ("powerPC603-1", 35), ("powerPC604", 36), ("alphaFamily", 48), ("mIPSFamily", 64), ("sPARCFamily", 80), ("x68040", 96), ("x68xxxFamily", 97), ("x68000", 98), ("x68010", 99), ("x68020", 100), ("x68030", 101), ("hobbitFamily", 112), ("weitek", 128), ("pARISCFamily", 144), ("v30Family", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorFamilyAtt3.setReference("'DMTF|Processor|006' 3")
if mibBuilder.loadTexts: processorFamilyAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: processorFamilyAtt3.setDescription('The family of processors to which this processor belongs.')
processorVersionInformationAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorVersionInformationAtt4.setReference("'DMTF|Processor|006' 4")
if mibBuilder.loadTexts: processorVersionInformationAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: processorVersionInformationAtt4.setDescription('The version number or string for this processor.')
maximumSpeedAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumSpeedAtt5.setReference("'DMTF|Processor|006' 5")
if mibBuilder.loadTexts: maximumSpeedAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: maximumSpeedAtt5.setDescription('The maximum processor speed supported by this system in MHz.')
currentSpeedAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSpeedAtt6.setReference("'DMTF|Processor|006' 6")
if mibBuilder.loadTexts: currentSpeedAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: currentSpeedAtt6.setDescription('The current speed (in MHz) of this processor.')
processorUpgradeAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("daughterBoard", 3), ("zIFSocket", 4), ("replacementPiggyBack", 5), ("none", 6), ("lIFSocket", 7), ("slot1", 8), ("slot2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorUpgradeAtt7.setReference("'DMTF|Processor|006' 7")
if mibBuilder.loadTexts: processorUpgradeAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: processorUpgradeAtt7.setDescription('The method by which this processor can be upgraded, if upgrades are supported.')
fRUGroupIndexAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt8.setReference("'DMTF|Processor|006' 8")
if mibBuilder.loadTexts: fRUGroupIndexAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt8.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
operationalGroupIndexAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt9.setReference("'DMTF|Processor|006' 9")
if mibBuilder.loadTexts: operationalGroupIndexAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt9.setDescription('The index into the Operational State Table for this device if applicable.')
level1CacheIndexAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: level1CacheIndexAtt10.setReference("'DMTF|Processor|006' 10")
if mibBuilder.loadTexts: level1CacheIndexAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: level1CacheIndexAtt10.setDescription('An index into the System Cache table that identifies the entry that describes the L1 cache for this processor. If more than one processor points to the same cache entry this means they share that cache.')
level2CacheIndexAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: level2CacheIndexAtt11.setReference("'DMTF|Processor|006' 11")
if mibBuilder.loadTexts: level2CacheIndexAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: level2CacheIndexAtt11.setDescription('An index into the System Cache table that identifies the entry that describes the L2 cache for this processor If more than one processor points to the same cache entry this means they share that cache.')
level3CacheIndexAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: level3CacheIndexAtt12.setReference("'DMTF|Processor|006' 12")
if mibBuilder.loadTexts: level3CacheIndexAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: level3CacheIndexAtt12.setDescription('An index into the System Cache table that identifies the entry that describes the L3 cache for this processor. If more than one processor points to the same cache entry this means they share that cache.')
dMTFSerialPortsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 11), )
if mibBuilder.loadTexts: dMTFSerialPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSerialPortsTable.setDescription('This group defines the attributes for serial ports in this system.')
dMTFSerialPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "serialPortIndexAtt1"))
if mibBuilder.loadTexts: dMTFSerialPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSerialPortsEntry.setDescription('This group defines the attributes for serial ports in this system.')
dMTFSerialPortsState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSerialPortsState.setReference("'DMTF|Serial Ports|003' 0")
if mibBuilder.loadTexts: dMTFSerialPortsState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSerialPortsState.setDescription('')
serialPortIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortIndexAtt1.setReference("'DMTF|Serial Ports|003' 1")
if mibBuilder.loadTexts: serialPortIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortIndexAtt1.setDescription('An index into the serial ports table.')
serialBaseIOAddressAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialBaseIOAddressAtt2.setReference("'DMTF|Serial Ports|003' 2")
if mibBuilder.loadTexts: serialBaseIOAddressAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: serialBaseIOAddressAtt2.setDescription('Base I/O address for this serial port.')
iRQUsedAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRQUsedAtt3.setReference("'DMTF|Serial Ports|003' 3")
if mibBuilder.loadTexts: iRQUsedAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: iRQUsedAtt3.setDescription('IRQ number that is being used by this serial port.')
logicalNameAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalNameAtt4.setReference("'DMTF|Serial Ports|003' 4")
if mibBuilder.loadTexts: logicalNameAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: logicalNameAtt4.setDescription('The logical name of this serial port under this operating environment.')
connectorTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 160, 161))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dB9PinMale", 3), ("dB9PinFemale", 4), ("dB25PinMale", 5), ("dB25PinFemale", 6), ("rJ11", 7), ("rJ45", 8), ("proprietary", 9), ("circularDIN8Male", 10), ("circularDIN8Female", 11), ("miniCentronicsType14", 160), ("miniCentronicsType26", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorTypeAtt5.setReference("'DMTF|Serial Ports|003' 5")
if mibBuilder.loadTexts: connectorTypeAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: connectorTypeAtt5.setDescription('The connector used to interface with the I/O device on this serial port.')
maximumSpeedAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumSpeedAtt6.setReference("'DMTF|Serial Ports|003' 6")
if mibBuilder.loadTexts: maximumSpeedAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: maximumSpeedAtt6.setDescription('Maximum transfer speed of the device on this serial port in bits per second.')
serialPortCapabilitiesAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("xTATCompatible", 3), ("x16450Compatible", 4), ("x16550Compatible", 5), ("x16550ACompatible", 6), ("x8251Compatible", 160), ("x8251FIFOCompatible", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortCapabilitiesAtt7.setReference("'DMTF|Serial Ports|003' 7")
if mibBuilder.loadTexts: serialPortCapabilitiesAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortCapabilitiesAtt7.setDescription('The capabilities of this Serial port.')
operationalGroupIndexAtt8_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 8), DmiInteger()).setLabel("operationalGroupIndexAtt8-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt8_1.setReference("'DMTF|Serial Ports|003' 8")
if mibBuilder.loadTexts: operationalGroupIndexAtt8_1.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt8_1.setDescription('The index into the Operational State Table for this device.')
serialPortSecuritySettingsAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalInterfaceLockedOut", 4), ("externalInterfaceEnabled", 5), ("bootBypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortSecuritySettingsAtt9.setReference("'DMTF|Serial Ports|003' 9")
if mibBuilder.loadTexts: serialPortSecuritySettingsAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortSecuritySettingsAtt9.setDescription('Attribute describing the current hardware security settings on this device')
dMTFSystemBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 3), )
if mibBuilder.loadTexts: dMTFSystemBIOSTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemBIOSTable.setDescription('This group defines the attributes for the System BIOS.')
dMTFSystemBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "bIOSIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemBIOSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemBIOSEntry.setDescription('This group defines the attributes for the System BIOS.')
dMTFSystemBIOSState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemBIOSState.setReference("'DMTF|System BIOS|001' 0")
if mibBuilder.loadTexts: dMTFSystemBIOSState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemBIOSState.setDescription('')
bIOSIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSIndexAtt1.setReference("'DMTF|System BIOS|001' 1")
if mibBuilder.loadTexts: bIOSIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSIndexAtt1.setDescription('The index into the system BIOS table.')
bIOSManufacturerAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSManufacturerAtt2.setReference("'DMTF|System BIOS|001' 2")
if mibBuilder.loadTexts: bIOSManufacturerAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSManufacturerAtt2.setDescription('The name of the company that wrote this System BIOS.')
bIOSVersionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSVersionAtt3.setReference("'DMTF|System BIOS|001' 3")
if mibBuilder.loadTexts: bIOSVersionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSVersionAtt3.setDescription('The version number or version string of this BIOS.')
bIOSROMSizeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSROMSizeAtt4.setReference("'DMTF|System BIOS|001' 4")
if mibBuilder.loadTexts: bIOSROMSizeAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSROMSizeAtt4.setDescription('The physical size of this BIOS ROM device in kilobytes.')
bIOSStartingAddressAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 5), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSStartingAddressAtt5.setReference("'DMTF|System BIOS|001' 5")
if mibBuilder.loadTexts: bIOSStartingAddressAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSStartingAddressAtt5.setDescription('The starting physical address for the memory which the BIOS occupies.')
bIOSEndingAddressAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 6), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSEndingAddressAtt6.setReference("'DMTF|System BIOS|001' 6")
if mibBuilder.loadTexts: bIOSEndingAddressAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSEndingAddressAtt6.setDescription('The ending physical address for the memory which the BIOS occupies.')
bIOSLoaderVersionAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSLoaderVersionAtt7.setReference("'DMTF|System BIOS|001' 7")
if mibBuilder.loadTexts: bIOSLoaderVersionAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSLoaderVersionAtt7.setDescription('The BIOS flash loader version number or string.')
bIOSReleaseDateAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 8), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSReleaseDateAtt8.setReference("'DMTF|System BIOS|001' 8")
if mibBuilder.loadTexts: bIOSReleaseDateAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: bIOSReleaseDateAtt8.setDescription('The BIOS release date.')
primaryBIOSAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryBIOSAtt9.setReference("'DMTF|System BIOS|001' 9")
if mibBuilder.loadTexts: primaryBIOSAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: primaryBIOSAtt9.setDescription('If true, this is the primary System BIOS.')
dMTFSystemCacheTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 9), )
if mibBuilder.loadTexts: dMTFSystemCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemCacheTable.setDescription('This group defines the attributes for different System Caches installed in this system.')
dMTFSystemCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemCacheIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemCacheEntry.setDescription('This group defines the attributes for different System Caches installed in this system.')
dMTFSystemCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemCacheState.setReference("'DMTF|System Cache|003' 0")
if mibBuilder.loadTexts: dMTFSystemCacheState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemCacheState.setDescription('')
systemCacheIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheIndexAtt1.setReference("'DMTF|System Cache|003' 1")
if mibBuilder.loadTexts: systemCacheIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemCacheIndexAtt1.setDescription('An index into the System Cache table.')
systemCacheLevelAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("primary", 3), ("secondary", 4), ("tertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheLevelAtt2.setReference("'DMTF|System Cache|003' 2")
if mibBuilder.loadTexts: systemCacheLevelAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: systemCacheLevelAtt2.setDescription('Is this the primary System Cache, or a subsidiary cache?')
systemCacheSpeedAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheSpeedAtt3.setReference("'DMTF|System Cache|003' 3")
if mibBuilder.loadTexts: systemCacheSpeedAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: systemCacheSpeedAtt3.setDescription('The speed of this System Cache module in nanoseconds.')
systemCacheSizeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheSizeAtt4.setReference("'DMTF|System Cache|003' 4")
if mibBuilder.loadTexts: systemCacheSizeAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: systemCacheSizeAtt4.setDescription('The size of this System Cache module in kilobytes.')
systemCacheWritePolicyAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("writeBack", 3), ("writeThrough", 4), ("variesWithAddress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheWritePolicyAtt5.setReference("'DMTF|System Cache|003' 5")
if mibBuilder.loadTexts: systemCacheWritePolicyAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: systemCacheWritePolicyAtt5.setDescription('Is this a write-back or a write-through cache?')
systemCacheErrorCorrectionAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheErrorCorrectionAtt6.setReference("'DMTF|System Cache|003' 6")
if mibBuilder.loadTexts: systemCacheErrorCorrectionAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: systemCacheErrorCorrectionAtt6.setDescription('The error correction scheme supported by this cache component.')
fRUGroupIndexAtt7_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 7), DmiInteger()).setLabel("fRUGroupIndexAtt7-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt7_1.setReference("'DMTF|System Cache|003' 7")
if mibBuilder.loadTexts: fRUGroupIndexAtt7_1.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt7_1.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
operationalGroupIndexAtt8_2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 8), DmiInteger()).setLabel("operationalGroupIndexAtt8-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt8_2.setReference("'DMTF|System Cache|003' 8")
if mibBuilder.loadTexts: operationalGroupIndexAtt8_2.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt8_2.setDescription('The index into the Operational State Table for this device.')
systemCacheTypeAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("instruction", 3), ("data", 4), ("unified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheTypeAtt9.setReference("'DMTF|System Cache|003' 9")
if mibBuilder.loadTexts: systemCacheTypeAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: systemCacheTypeAtt9.setDescription('This defines the system cache type.')
lineSizeAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineSizeAtt10.setReference("'DMTF|System Cache|003' 10")
if mibBuilder.loadTexts: lineSizeAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: lineSizeAtt10.setDescription('The size, in bytes, of a single cache bucket or line.')
volatilityAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("temporaryVolatile", 3), ("volatile", 4), ("permanentNonVolatile", 5), ("temporaryNonVolatile", 6), ("uPSNonVolatile", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volatilityAtt11.setReference("'DMTF|System Cache|003' 11")
if mibBuilder.loadTexts: volatilityAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: volatilityAtt11.setDescription('This defines the volatility of the cache.')
replacementPolicyAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("leastRecentlyUsedLRU", 3), ("firstInFirstOutFIFO", 4), ("lastInFirstOutLIFO", 5), ("leastFrequentlyUsedLFU", 6), ("mostFrequentlyUsedMFU", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: replacementPolicyAtt12.setReference("'DMTF|System Cache|003' 12")
if mibBuilder.loadTexts: replacementPolicyAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: replacementPolicyAtt12.setDescription('The algorithm used by the cache to determine which cache lines or buckets should be re-used.')
readPolicyAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("readAhead", 4), ("readAndReadAhead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readPolicyAtt13.setReference("'DMTF|System Cache|003' 13")
if mibBuilder.loadTexts: readPolicyAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: readPolicyAtt13.setDescription('The policy that shall be employed by the cache for handling read requests.')
flushTimerAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flushTimerAtt14.setReference("'DMTF|System Cache|003' 14")
if mibBuilder.loadTexts: flushTimerAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: flushTimerAtt14.setDescription('The maximum amount of time, in seconds, dirty lines or buckets may remain in the cache before they are flushed. A value of zero indicated that a cache flush is not controlled by a flushing timer.')
associativityAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("directMapped", 3), ("x2WaySetAssociative", 4), ("x4WaySetAssociative", 5), ("fullyAssociative", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: associativityAtt15.setReference("'DMTF|System Cache|003' 15")
if mibBuilder.loadTexts: associativityAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: associativityAtt15.setDescription('This defines the system cache associativity (direct-mapped, 2-way, 4-way, etc).')
dMTFSystemHardwareSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 49), )
if mibBuilder.loadTexts: dMTFSystemHardwareSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemHardwareSecurityTable.setDescription('This group describes the system-wide hardware security settings.')
dMTFSystemHardwareSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFSystemHardwareSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemHardwareSecurityEntry.setDescription('This group describes the system-wide hardware security settings.')
powerOnPasswordStatusAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerOnPasswordStatusAtt1.setReference("'DMTF|System Hardware Security|001' 1")
if mibBuilder.loadTexts: powerOnPasswordStatusAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: powerOnPasswordStatusAtt1.setDescription('The current power-on password setting on the system.')
keyboardPasswordStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPasswordStatusAtt2.setReference("'DMTF|System Hardware Security|001' 2")
if mibBuilder.loadTexts: keyboardPasswordStatusAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPasswordStatusAtt2.setDescription('The current keyboard password setting on the system')
administratorPasswordStatisAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: administratorPasswordStatisAtt3.setReference("'DMTF|System Hardware Security|001' 3")
if mibBuilder.loadTexts: administratorPasswordStatisAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: administratorPasswordStatisAtt3.setDescription('The current administrator password setting on the system. This password is required to make hardware configuration changes to the system.')
frontPanelResetStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontPanelResetStatusAtt4.setReference("'DMTF|System Hardware Security|001' 4")
if mibBuilder.loadTexts: frontPanelResetStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: frontPanelResetStatusAtt4.setDescription('The present status of the front panel reset button capability. If Enabled, the machine can be reset via the front panel reset button. If Disabled, the reset button, if available, is inoperative.')
dMTFSystemPowerControlsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 51), )
if mibBuilder.loadTexts: dMTFSystemPowerControlsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemPowerControlsTable.setDescription('This group defines attributes for controlling the main power supply to the system.')
dMTFSystemPowerControlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFSystemPowerControlsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemPowerControlsEntry.setDescription('This group defines attributes for controlling the main power supply to the system.')
powerControlRequestAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("powerOff", 3), ("powerOffThenOnAgain", 4), ("enterStandbyMode", 5), ("enterSuspendMode", 6), ("enterHibernationMode", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerControlRequestAtt1.setReference("'DMTF|System Power Controls|001' 1")
if mibBuilder.loadTexts: powerControlRequestAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: powerControlRequestAtt1.setDescription('Reading the value of this attribute gives the value of the last valid power control request that was written into it. Writing a valid value into it causes the appropriate power control action to be executed immediately. Writing an invalid or unimplemented value causes no change.')
timedPowerOnAvailableAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timedPowerOnAvailableAtt2.setReference("'DMTF|System Power Controls|001' 2")
if mibBuilder.loadTexts: timedPowerOnAvailableAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: timedPowerOnAvailableAtt2.setDescription('Defines whether a timed power-on facility is available.')
timeToNextScheduledPowerOnAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeToNextScheduledPowerOnAtt3.setReference("'DMTF|System Power Controls|001' 3")
if mibBuilder.loadTexts: timeToNextScheduledPowerOnAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: timeToNextScheduledPowerOnAtt3.setDescription("The number of seconds until the next timed power-on is scheduled to occur. A value of 0 means that if the system is powered off, no automatic timed poweron will occur. A value of 0x80000000 denotes 'unknown'.")
dMTFSystemResourceDMAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 42), )
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoTable.setDescription('This group presents additional information about DMA resources that have been defined in the System Resources table.')
dMTFSystemResourceDMAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceDMAInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoEntry.setDescription('This group presents additional information about DMA resources that have been defined in the System Resources table.')
dMTFSystemResourceDMAInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoState.setReference("'DMTF|System Resource DMA Info|001' 0")
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoState.setDescription('')
systemResourceDMAInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAInfoIndexAtt1.setReference("'DMTF|System Resource DMA Info|001' 1")
if mibBuilder.loadTexts: systemResourceDMAInfoIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAInfoIndexAtt1.setDescription('A number the uniquely identifies rows in this table.')
dMATransferWidthAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8Bit", 3), ("x8And16Bit", 4), ("x16Bit", 5), ("x32Bit", 6), ("x64Bit", 7), ("x128Bit", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMATransferWidthAtt2.setReference("'DMTF|System Resource DMA Info|001' 2")
if mibBuilder.loadTexts: dMATransferWidthAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: dMATransferWidthAtt2.setDescription('Width of DMA transfers supported')
dMAAddressSizeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8Bit", 3), ("x16Bit", 5), ("x32Bit", 6), ("x64Bit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMAAddressSizeAtt3.setReference("'DMTF|System Resource DMA Info|001' 3")
if mibBuilder.loadTexts: dMAAddressSizeAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: dMAAddressSizeAtt3.setDescription('The width of the DMA address.')
dMAMaximumTransferSizeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMAMaximumTransferSizeAtt4.setReference("'DMTF|System Resource DMA Info|001' 4")
if mibBuilder.loadTexts: dMAMaximumTransferSizeAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: dMAMaximumTransferSizeAtt4.setDescription('The maximum number of bytes that can be transferred by this DMA Channel.')
dMATransferPreferenceAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8Bit", 3), ("x8And16Bit", 4), ("x16Bit", 5), ("x32Bit", 6), ("x64Bit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMATransferPreferenceAtt5.setReference("'DMTF|System Resource DMA Info|001' 5")
if mibBuilder.loadTexts: dMATransferPreferenceAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: dMATransferPreferenceAtt5.setDescription('DMA transfer type preference.')
busMasterAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("logicalDeviceIsNotABusMaster", 3), ("logicalDeviceIsABusMaster", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busMasterAtt6.setReference("'DMTF|System Resource DMA Info|001' 6")
if mibBuilder.loadTexts: busMasterAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: busMasterAtt6.setDescription('Indicates whether the device is using DMA is a bus master.')
byteModeAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dMAMayNotExecuteInCountByByteMode", 3), ("dMAMayExecuteInCountByByteMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteModeAtt7.setReference("'DMTF|System Resource DMA Info|001' 7")
if mibBuilder.loadTexts: byteModeAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: byteModeAtt7.setDescription("Indicates whether DMA may execute in 'count by byte' mode.")
wordModeAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dMAMayNotExecuteInCountByWordMode", 3), ("dMAMayExecuteInCountByWordMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordModeAtt8.setReference("'DMTF|System Resource DMA Info|001' 8")
if mibBuilder.loadTexts: wordModeAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: wordModeAtt8.setDescription("Indicates whether DMA may execute in 'count by word' mode.")
channelTimingAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("iSACompatible", 3), ("typeA", 4), ("typeB", 5), ("typeF", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTimingAtt9.setReference("'DMTF|System Resource DMA Info|001' 9")
if mibBuilder.loadTexts: channelTimingAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: channelTimingAtt9.setDescription('DMA channel speed support.')
typeCTimingAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("iSACompatible", 3), ("cTypeTimingIsNotSupported", 4), ("cTypeTimingIsSupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: typeCTimingAtt10.setReference("'DMTF|System Resource DMA Info|001' 10")
if mibBuilder.loadTexts: typeCTimingAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: typeCTimingAtt10.setDescription('Indicates whether C type (burst) timing is supported.')
dMTFSystemResourceDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 38), )
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoTable.setDescription('This group describes the base level of Memory, I/O, DMA, and INT (interrupt) resources that are used by a device in the system.')
dMTFSystemResourceDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "resourceUserAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoEntry.setDescription('This group describes the base level of Memory, I/O, DMA, and INT (interrupt) resources that are used by a device in the system.')
dMTFSystemResourceDeviceInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoState.setReference("'DMTF|System Resource Device Info|001' 0")
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoState.setDescription('')
resourceUserAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceUserAtt1.setReference("'DMTF|System Resource Device Info|001' 1")
if mibBuilder.loadTexts: resourceUserAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: resourceUserAtt1.setDescription("A number that uniquely identifies this device. This number may be derived from the 'device number' that is assigned by 'Plug N Play', or may be uniquely assigned by the component instrumentation.")
deviceIDAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIDAtt2.setReference("'DMTF|System Resource Device Info|001' 2")
if mibBuilder.loadTexts: deviceIDAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIDAtt2.setDescription('Physical Device ID from Config manager info. Equal to the CISTPL-MANFID field for PCMCIA devices. 0xFFFFFFFF = Unknown')
deviceSerialNumberAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumberAtt3.setReference("'DMTF|System Resource Device Info|001' 3")
if mibBuilder.loadTexts: deviceSerialNumberAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: deviceSerialNumberAtt3.setDescription('Device Serial Number from Config manager info. 0 = Undefined')
logicalDeviceIDClassCodeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceIDClassCodeAtt4.setReference("'DMTF|System Resource Device Info|001' 4")
if mibBuilder.loadTexts: logicalDeviceIDClassCodeAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: logicalDeviceIDClassCodeAtt4.setDescription('Logical device ID for PnP ISA devices, Class code for PCI devices, CISTPL-FUNCID for PCMCIA devices. 0xFFFFFFFF = Undefined, 0 = reserved')
deviceFlagsAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFlagsAtt5.setReference("'DMTF|System Resource Device Info|001' 5")
if mibBuilder.loadTexts: deviceFlagsAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFlagsAtt5.setDescription('Device flags from config manager info. Bit 0: 1 = device has been initialized, Bit 1: 1 = device is enabled, Bit 2: 1 = device config has been locked, Bit 3: 1 = device has temporary config resources assigned, Bit 4: 1 = device is reconfigurable')
deviceNumberAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNumberAtt6.setReference("'DMTF|System Resource Device Info|001' 6")
if mibBuilder.loadTexts: deviceNumberAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: deviceNumberAtt6.setDescription('Device Number for PCI Devices, Logical Device number for PnP Devices. 0 otherwise.')
functionNumberAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: functionNumberAtt7.setReference("'DMTF|System Resource Device Info|001' 7")
if mibBuilder.loadTexts: functionNumberAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: functionNumberAtt7.setDescription('Function Number for PCI & EISA Devices. 0 otherwise.')
busTypeAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busTypeAtt8.setReference("'DMTF|System Resource Device Info|001' 8")
if mibBuilder.loadTexts: busTypeAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: busTypeAtt8.setDescription('Bus number (0-255) for PCI Devices, Slot number for EISA and PnP Devices, Card logical socket number for PCMCIA devices. Zero otherwise.')
cMReservedAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMReservedAtt9.setReference("'DMTF|System Resource Device Info|001' 9")
if mibBuilder.loadTexts: cMReservedAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: cMReservedAtt9.setDescription('Data from the Reserved field of the Configuration Manager bus access structure, or 0.')
dMTFSystemResourceIOInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 40), )
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoTable.setDescription('This group presents additional information about I/O resources that have been defined in the System Resources table.')
dMTFSystemResourceIOInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceIOInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoEntry.setDescription('This group presents additional information about I/O resources that have been defined in the System Resources table.')
dMTFSystemResourceIOInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoState.setReference("'DMTF|System Resource I/O Info|001' 0")
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoState.setDescription('')
systemResourceIOInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOInfoIndexAtt1.setReference("'DMTF|System Resource I/O Info|001' 1")
if mibBuilder.loadTexts: systemResourceIOInfoIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOInfoIndexAtt1.setDescription('A number the uniquely identifies rows in this table.')
iODecodeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x10Bits", 3), ("x16Bits", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iODecodeAtt2.setReference("'DMTF|System Resource I/O Info|001' 2")
if mibBuilder.loadTexts: iODecodeAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: iODecodeAtt2.setDescription('Number of bits used for I/O decode')
dMTFSystemResourceIRQInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 41), )
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoTable.setDescription('This group presents additional information about I/O resources that have been defined in the System Resources table.')
dMTFSystemResourceIRQInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceIRQInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoEntry.setDescription('This group presents additional information about I/O resources that have been defined in the System Resources table.')
dMTFSystemResourceIRQInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoState.setReference("'DMTF|System Resource IRQ Info|001' 0")
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoState.setDescription('')
systemResourceIRQInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIRQInfoIndexAtt1.setReference("'DMTF|System Resource IRQ Info|001' 1")
if mibBuilder.loadTexts: systemResourceIRQInfoIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIRQInfoIndexAtt1.setDescription('A number the uniquely identifies rows in this table.')
triggerTypeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("level", 3), ("edge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerTypeAtt2.setReference("'DMTF|System Resource IRQ Info|001' 2")
if mibBuilder.loadTexts: triggerTypeAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: triggerTypeAtt2.setDescription('The trigger type for this interrupt.')
triggerLevelAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("activeLow", 3), ("activeHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerLevelAtt3.setReference("'DMTF|System Resource IRQ Info|001' 3")
if mibBuilder.loadTexts: triggerLevelAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: triggerLevelAtt3.setDescription('The trigger level for this interrupt.')
dMTFSystemResourceMemoryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 39), )
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoTable.setDescription('This group presents additional information about memory resource that have been defined in the System Resources table.')
dMTFSystemResourceMemoryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceMemoryInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoEntry.setDescription('This group presents additional information about memory resource that have been defined in the System Resources table.')
dMTFSystemResourceMemoryInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoState.setReference("'DMTF|System Resource Memory Info|001' 0")
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoState.setDescription('')
systemResourceMemoryInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryInfoIndexAtt1.setReference("'DMTF|System Resource Memory Info|001' 1")
if mibBuilder.loadTexts: systemResourceMemoryInfoIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryInfoIndexAtt1.setDescription('A number the uniquely identifies rows in this table.')
iSAPCMCIARangeDescriptorAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitMemoryOnly", 3), ("x16BitMemoryOnly", 4), ("x8And16BitMemorySupported", 5), ("x32BitMemoryOnly", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSAPCMCIARangeDescriptorAtt2.setReference("'DMTF|System Resource Memory Info|001' 2")
if mibBuilder.loadTexts: iSAPCMCIARangeDescriptorAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: iSAPCMCIARangeDescriptorAtt2.setDescription('For PnP ISA/PCMCIA memory range descriptor compatibility.')
eISARangeDescriptorAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitMemoryOnly", 3), ("x16BitMemoryOnly", 4), ("x8And16BitMemorySupported", 5), ("x32BitMemoryOnly", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eISARangeDescriptorAtt3.setReference("'DMTF|System Resource Memory Info|001' 3")
if mibBuilder.loadTexts: eISARangeDescriptorAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: eISARangeDescriptorAtt3.setDescription('For PnP EISA memory range descriptor compatibility.')
decodeSupportAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("decodeSupportsHighAddress", 3), ("decodeSupportsRangeLength", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decodeSupportAtt4.setReference("'DMTF|System Resource Memory Info|001' 4")
if mibBuilder.loadTexts: decodeSupportAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: decodeSupportAtt4.setDescription('For PnP memory range descriptor compatibility.')
cacheableAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheableAtt5.setReference("'DMTF|System Resource Memory Info|001' 5")
if mibBuilder.loadTexts: cacheableAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: cacheableAtt5.setDescription('Indicates whether it is allowable for this memory range to be cached or not.')
cacheTypeAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("writeBack-1", 3), ("writeThrough-1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTypeAtt6.setReference("'DMTF|System Resource Memory Info|001' 6")
if mibBuilder.loadTexts: cacheTypeAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: cacheTypeAtt6.setDescription('Indicates Cache Type that is compatible with this resource.')
readWriteAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("rOMReadOnly", 3), ("rAMReadwrite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readWriteAtt7.setReference("'DMTF|System Resource Memory Info|001' 7")
if mibBuilder.loadTexts: readWriteAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: readWriteAtt7.setDescription('Indicates the read-write accessibility of this memory resource.')
dMTFSystemResources2Table = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 37), )
if mibBuilder.loadTexts: dMTFSystemResources2Table.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResources2Table.setDescription('This group describes the base level of Memory, I/O, DMA, and INT (interrupt) resources that are used by a device in the system.')
dMTFSystemResources2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourcesIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResources2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResources2Entry.setDescription('This group describes the base level of Memory, I/O, DMA, and INT (interrupt) resources that are used by a device in the system.')
dMTFSystemResources2State = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResources2State.setReference("'DMTF|System Resources 2|001' 0")
if mibBuilder.loadTexts: dMTFSystemResources2State.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemResources2State.setDescription('')
systemResourcesIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourcesIndexAtt1.setReference("'DMTF|System Resources 2|001' 1")
if mibBuilder.loadTexts: systemResourcesIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourcesIndexAtt1.setDescription('A number that uniquely identifies the rows in this table.')
resourceUserAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceUserAtt2.setReference("'DMTF|System Resources 2|001' 2")
if mibBuilder.loadTexts: resourceUserAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: resourceUserAtt2.setDescription("A unique number for each different 'resource user' that has resources specified in this table.")
resourceSetAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceSetAtt3.setReference("'DMTF|System Resources 2|001' 3")
if mibBuilder.loadTexts: resourceSetAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: resourceSetAtt3.setDescription('A number used as the ID of a set of Memory, I/O, DMA and/or INT resources for the resource user.')
resourceAssignmentAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("allocated", 3), ("assignable", 4), ("temporaryAssignment", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAssignmentAtt4.setReference("'DMTF|System Resources 2|001' 4")
if mibBuilder.loadTexts: resourceAssignmentAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: resourceAssignmentAtt4.setDescription('Describes the state of the assignment of this set of resources. (Note: This value must be the same for all resources within a given set.)')
resourceTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("memory", 3), ("iO", 4), ("iRQ", 5), ("dMA", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceTypeAtt5.setReference("'DMTF|System Resources 2|001' 5")
if mibBuilder.loadTexts: resourceTypeAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: resourceTypeAtt5.setDescription('The type of resource described by this row.')
resourceNumberAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNumberAtt6.setReference("'DMTF|System Resources 2|001' 6")
if mibBuilder.loadTexts: resourceNumberAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: resourceNumberAtt6.setDescription('DMA or IRQ number - 0 for Memory and I/O ranges. This is the interrupt or DMA number relative to the bus that the interrupt is sourced from.')
resourceInfoIDAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceInfoIDAtt7.setReference("'DMTF|System Resources 2|001' 7")
if mibBuilder.loadTexts: resourceInfoIDAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: resourceInfoIDAtt7.setDescription("ID of the row in the 'Info' table for this type of system resource. E.g. if this Resource Type is 'I/O' then this would be an index into the 'System Resource I/O Info' table.")
startAddressAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 8), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startAddressAtt8.setReference("'DMTF|System Resources 2|001' 8")
if mibBuilder.loadTexts: startAddressAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: startAddressAtt8.setDescription('Starting physical address for this memory range, or the minimum base address if this attribute is being used to describe a programmable range. 0 for IRQ and DMA resources.')
endAddressAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 9), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endAddressAtt9.setReference("'DMTF|System Resources 2|001' 9")
if mibBuilder.loadTexts: endAddressAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: endAddressAtt9.setDescription('Ending physical address (address of last byte) for this memory range, or the maximum configurable base address if this attribute is being used to describe a programmable range. 0 for IRQ and DMA resources.')
resourceSizeAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceSizeAtt10.setReference("'DMTF|System Resources 2|001' 10")
if mibBuilder.loadTexts: resourceSizeAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: resourceSizeAtt10.setDescription('jNumber of consecutive bytes that a memory or I/O resource consumes. 0 for IRQ and DMA resources.')
baseAlignmentAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseAlignmentAtt11.setReference("'DMTF|System Resources 2|001' 11")
if mibBuilder.loadTexts: baseAlignmentAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: baseAlignmentAtt11.setDescription('Alignment of Start Address, in bytes. Indicates the granularity of the increments in which a programmable range can be set.')
shareableAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareableAtt12.setReference("'DMTF|System Resources 2|001' 12")
if mibBuilder.loadTexts: shareableAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: shareableAtt12.setDescription('Indicates whether the resource is shareable.')
sharedAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedAtt13.setReference("'DMTF|System Resources 2|001' 13")
if mibBuilder.loadTexts: sharedAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: sharedAtt13.setDescription('Indicates whether this resource, or a portion of this resource, is shared with another device.')
dMTFSystemSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 18), )
if mibBuilder.loadTexts: dMTFSystemSlotsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemSlotsTable.setDescription('This group defines the attributes for the different system expansion slots supported in this system.')
dMTFSystemSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "slotIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemSlotsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemSlotsEntry.setDescription('This group defines the attributes for the different system expansion slots supported in this system.')
dMTFSystemSlotsState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemSlotsState.setReference("'DMTF|System Slots|003' 0")
if mibBuilder.loadTexts: dMTFSystemSlotsState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFSystemSlotsState.setDescription('')
slotIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndexAtt1.setReference("'DMTF|System Slots|003' 1")
if mibBuilder.loadTexts: slotIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: slotIndexAtt1.setDescription('An index into the system slot table. This is the hardware ID number for each expansion slot, whether it is occupied or not (starting with 1).')
slotTypeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotTypeAtt2.setReference("'DMTF|System Slots|003' 2")
if mibBuilder.loadTexts: slotTypeAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: slotTypeAtt2.setDescription('The bus type supported in this slot. This is a bit field with the following definitions: Bit 0 (2^0), if 1, it is a long-length card; if 0, it is a short-length card, Bit 1 (2^1) if set, indicates ISA, Bit 2 (2^2) indicates EISA, Bit 3 (2^3) indicates MCA, Bit 4 (2^4) indicates PCI, Bit 5 (2^5) indicates VL, Bit 6 (2^6) indicates PCMCIA, Bit 7 (2^7) refers to NuBus, Bit 8 (2^8) indicates PC-98/C20, Bit 9 (2^9) indicates PC-98/C24, Bit 10 (2^10) indicates PC-98/E, Bit 11 (2^')
slotWidthAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitCard", 3), ("x16BitCard", 4), ("x32BitCard", 5), ("x64BitCard", 6), ("x128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotWidthAtt3.setReference("'DMTF|System Slots|003' 3")
if mibBuilder.loadTexts: slotWidthAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: slotWidthAtt3.setDescription('The maximum bus width of cards accepted in this slot.')
currentUsageAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("available", 3), ("inUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUsageAtt4.setReference("'DMTF|System Slots|003' 4")
if mibBuilder.loadTexts: currentUsageAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: currentUsageAtt4.setDescription('Is this slot is currently in use?')
slotDescriptionAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDescriptionAtt5.setReference("'DMTF|System Slots|003' 5")
if mibBuilder.loadTexts: slotDescriptionAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: slotDescriptionAtt5.setDescription('The card currently occupying this slot.')
slotCategoryAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("busConnector", 3), ("pCMCIASlot", 4), ("motherboard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCategoryAtt6.setReference("'DMTF|System Slots|003' 6")
if mibBuilder.loadTexts: slotCategoryAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: slotCategoryAtt6.setDescription("The word 'slot' is used to refer to bus slots. The last case (motherboard) refers to situations where a functional element is integrated onto, say, a motherboard and connects to a bus without a connector. It still takes up an expansion site on the bus but this is termed a 'virtual slot' as opposed to a physical slot (see the attribute 'Virtual Slot'). Virtual slots are in effect permanently occupied expansion sites. This attribute establishes which category of physical slot this table entry is defining.")
virtualSlotAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSlotAtt7.setReference("'DMTF|System Slots|003' 7")
if mibBuilder.loadTexts: virtualSlotAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSlotAtt7.setDescription("This attribute indicates whether this is a 'virtual slot' or not. A 'virtual slot' is an expansion site that is permanently occupied because of the level of integration of an expandable component. An example of a virtual slot is an I/O bus position taken up by a LAN controller that is integrated onto a motherboard. A slot with the 'Slot Category' of Motherboard is typically a Virtual Slot.")
resourceUserIDAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceUserIDAtt8.setReference("'DMTF|System Slots|003' 8")
if mibBuilder.loadTexts: resourceUserIDAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: resourceUserIDAtt8.setDescription("Value used to locate the rows in the System Resources 2 table for the resources associated with this slot or expansion site. 0 = 'unspecified .")
dMTFTemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 54), )
if mibBuilder.loadTexts: dMTFTemperatureProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFTemperatureProbeTable.setDescription('This group defines the attributes for the temperature probes in this system.')
dMTFTemperatureProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "temperatureProbeTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFTemperatureProbeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFTemperatureProbeEntry.setDescription('This group defines the attributes for the temperature probes in this system.')
dMTFTemperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFTemperatureProbeState.setReference("'DMTF|Temperature Probe|001' 0")
if mibBuilder.loadTexts: dMTFTemperatureProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFTemperatureProbeState.setDescription('')
temperatureProbeTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeTableIndexAtt1.setReference("'DMTF|Temperature Probe|001' 1")
if mibBuilder.loadTexts: temperatureProbeTableIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeTableIndexAtt1.setDescription('Index into this temperature probe table.')
temperatureProbeLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheralBay", 5), ("sMBMaster", 6), ("motherboard", 7), ("memoryModule", 8), ("processorModule", 9), ("powerUnit", 10), ("addInCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLocationAtt2.setReference("'DMTF|Temperature Probe|001' 2")
if mibBuilder.loadTexts: temperatureProbeLocationAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLocationAtt2.setDescription('Identifies the physical location of the temperature probe.')
temperatureProbeDescriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeDescriptionAtt3.setReference("'DMTF|Temperature Probe|001' 3")
if mibBuilder.loadTexts: temperatureProbeDescriptionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeDescriptionAtt3.setDescription("Additional descriptive information about the temperature probe or probe's location.")
temperatureStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureStatusAtt4.setReference("'DMTF|Temperature Probe|001' 4")
if mibBuilder.loadTexts: temperatureStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureStatusAtt4.setDescription('Defines the status of the temperature monitored by this temperat re probe.')
temperatureProbeTemperatureReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeTemperatureReadingAtt5.setReference("'DMTF|Temperature Probe|001' 5")
if mibBuilder.loadTexts: temperatureProbeTemperatureReadingAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeTemperatureReadingAtt5.setDescription("The present temperature reading of this temperature probe in 1/10th degrees C. 0x8000000 denotes 'unknown'.")
monitoredTemperatureNominalReadingAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredTemperatureNominalReadingAtt6.setReference("'DMTF|Temperature Probe|001' 6")
if mibBuilder.loadTexts: monitoredTemperatureNominalReadingAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredTemperatureNominalReadingAtt6.setDescription("The nominal temperature reading of the temperature monitored by this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
monitoredTemperatureNormalMaximumAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredTemperatureNormalMaximumAtt7.setReference("'DMTF|Temperature Probe|001' 7")
if mibBuilder.loadTexts: monitoredTemperatureNormalMaximumAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredTemperatureNormalMaximumAtt7.setDescription("The normal maximum temperature reading of the temperature monitored by this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
monitoredTemperatureNormalMinimumAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredTemperatureNormalMinimumAtt8.setReference("'DMTF|Temperature Probe|001' 8")
if mibBuilder.loadTexts: monitoredTemperatureNormalMinimumAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredTemperatureNormalMinimumAtt8.setDescription("The normal minimum temperature reading of the temperature monitored by this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureProbeMaximumAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaximumAtt9.setReference("'DMTF|Temperature Probe|001' 9")
if mibBuilder.loadTexts: temperatureProbeMaximumAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMaximumAtt9.setDescription("The maximum temperature reading specified to be readable by this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureProbeMinimumAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinimumAtt10.setReference("'DMTF|Temperature Probe|001' 10")
if mibBuilder.loadTexts: temperatureProbeMinimumAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMinimumAtt10.setDescription("The minimum temperature reading specified to be readable by this probe in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureReadingLowerThresholdNonCriticalAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonCriticalAtt11.setReference("'DMTF|Temperature Probe|001' 11")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonCriticalAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonCriticalAtt11.setDescription("The lower non-critical threshold for the temperature reading set by the user, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureReadingUpperThresholdNonCriticalAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 12), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonCriticalAtt12.setReference("'DMTF|Temperature Probe|001' 12")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonCriticalAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonCriticalAtt12.setDescription("The upper non-critical threshold for the temperature probe, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureReadingLowerThresholdCriticalAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdCriticalAtt13.setReference("'DMTF|Temperature Probe|001' 13")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdCriticalAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureReadingLowerThresholdCriticalAtt13.setDescription("The lower critical threshold for the temperature probe, in 1/10 degrees C. 0x80000000 denotes 'unknown'.")
temperatureReadingUpperThresholdCriticalAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdCriticalAtt14.setReference("'DMTF|Temperature Probe|001' 14")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdCriticalAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureReadingUpperThresholdCriticalAtt14.setDescription("The upper critical threshold for the temperature probe, in /10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureReadingLowerThresholdNonRecoverableAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonRecoverableAtt15.setReference("'DMTF|Temperature Probe|001' 15")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonRecoverableAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonRecoverableAtt15.setDescription("The lower non-recoverable threshold for the temperature probe, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureReadingUpperThresholdNonRecoverableAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 16), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonRecoverableAtt16.setReference("'DMTF|Temperature Probe|001' 16")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonRecoverableAtt16.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonRecoverableAtt16.setDescription("The upper non-recoverable threshold for the temperature probe, in 1/10th degrees C. 0x80000000 denotes 'unknown'.")
temperatureProbeResolutionAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureProbeResolutionAtt17.setReference("'DMTF|Temperature Probe|001' 17")
if mibBuilder.loadTexts: temperatureProbeResolutionAtt17.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeResolutionAtt17.setDescription("The resolution for the reading from this temperature probe, in tenths of 1/10th degrees C. '0x80000000 denotes 'unknown'.")
temperatureProbeToleranceAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureProbeToleranceAtt18.setReference("'DMTF|Temperature Probe|001' 18")
if mibBuilder.loadTexts: temperatureProbeToleranceAtt18.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeToleranceAtt18.setDescription("The tolerance for the reading from this temperature probe, in plus/minus 1/10 degrees C. 0x80000000 denotes 'unknown'.")
temperatureProbeAccuracyAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureProbeAccuracyAtt19.setReference("'DMTF|Temperature Probe|001' 19")
if mibBuilder.loadTexts: temperatureProbeAccuracyAtt19.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeAccuracyAtt19.setDescription("The accuracy for the reading from this temperature probe, in plus/minus hundredths of a percent. 0x80000000 denotes 'unknown' or'unsupport d'.")
fRUGroupIndexAtt20_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 20), DmiInteger()).setLabel("fRUGroupIndexAtt20-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt20_1.setReference("'DMTF|Temperature Probe|001' 20")
if mibBuilder.loadTexts: fRUGroupIndexAtt20_1.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt20_1.setDescription('Index into the FRU table. A value of -1 indicates that this device is not an FRU.')
operationalGroupIndexAtt21_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 21), DmiInteger()).setLabel("operationalGroupIndexAtt21-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt21_1.setReference("'DMTF|Temperature Probe|001' 21")
if mibBuilder.loadTexts: operationalGroupIndexAtt21_1.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt21_1.setDescription('Index into the Operational State table')
dMTFVoltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 53), )
if mibBuilder.loadTexts: dMTFVoltageProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFVoltageProbeTable.setDescription('This group defines the attributes for the voltage probes in this system.')
dMTFVoltageProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "voltageProbeIndexAtt1"))
if mibBuilder.loadTexts: dMTFVoltageProbeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFVoltageProbeEntry.setDescription('This group defines the attributes for the voltage probes in this system.')
dMTFVoltageProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFVoltageProbeState.setReference("'DMTF|Voltage Probe|001' 0")
if mibBuilder.loadTexts: dMTFVoltageProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFVoltageProbeState.setDescription('')
voltageProbeIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeIndexAtt1.setReference("'DMTF|Voltage Probe|001' 1")
if mibBuilder.loadTexts: voltageProbeIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeIndexAtt1.setDescription('Index into this voltage probe table.')
voltageProbeLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheralBay", 5), ("systemManagementModule", 6), ("motherboard", 7), ("memoryModule", 8), ("processorModule", 9), ("powerUnit", 10), ("addInCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLocationAtt2.setReference("'DMTF|Voltage Probe|001' 2")
if mibBuilder.loadTexts: voltageProbeLocationAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLocationAtt2.setDescription('Identifies the physical location of the voltage probe.')
voltageProbeDescriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeDescriptionAtt3.setReference("'DMTF|Voltage Probe|001' 3")
if mibBuilder.loadTexts: voltageProbeDescriptionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeDescriptionAtt3.setDescription("Additional descriptive information about the voltage probe or probe's location.")
voltageStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageStatusAtt4.setReference("'DMTF|Voltage Probe|001' 4")
if mibBuilder.loadTexts: voltageStatusAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: voltageStatusAtt4.setDescription('Defines the status of the voltage monitored by this voltage probe.')
voltageProbeVoltageLevelAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeVoltageLevelAtt5.setReference("'DMTF|Voltage Probe|001' 5")
if mibBuilder.loadTexts: voltageProbeVoltageLevelAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeVoltageLevelAtt5.setDescription("The current voltage level of this voltage probe in millivolts. 0x8000000 denotes 'unknown'.")
monitoredVoltageNominalLevelAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredVoltageNominalLevelAtt6.setReference("'DMTF|Voltage Probe|001' 6")
if mibBuilder.loadTexts: monitoredVoltageNominalLevelAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredVoltageNominalLevelAtt6.setDescription("The nominal voltage level of the voltage monitored by this probe in millivolts. 0x80000000 denotes 'unknown'.")
monitoredVoltageNormalMaximumAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredVoltageNormalMaximumAtt7.setReference("'DMTF|Voltage Probe|001' 7")
if mibBuilder.loadTexts: monitoredVoltageNormalMaximumAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredVoltageNormalMaximumAtt7.setDescription("The normal maximum voltage level of the voltage monitored by this probe in millivolts. 0x80000000 denotes 'unknown'.")
monitoredVoltageNormalMinimumAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredVoltageNormalMinimumAtt8.setReference("'DMTF|Voltage Probe|001' 8")
if mibBuilder.loadTexts: monitoredVoltageNormalMinimumAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: monitoredVoltageNormalMinimumAtt8.setDescription("The normal minimum voltage level of the voltage monitored by this probe in millivolts. 0x80000000 denotes 'unknown'.")
voltageProbeMaximumAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeMaximumAtt9.setReference("'DMTF|Voltage Probe|001' 9")
if mibBuilder.loadTexts: voltageProbeMaximumAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeMaximumAtt9.setDescription("The maximum voltage level specified to be readable by this probe in millivolts. 0x80000000 denotes 'unknown'.")
voltageProbeMinimumAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeMinimumAtt10.setReference("'DMTF|Voltage Probe|001' 10")
if mibBuilder.loadTexts: voltageProbeMinimumAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeMinimumAtt10.setDescription("The minimum voltage level specified to be readable by this probe in millivolts. 0x80000000 denotes 'unknown'.")
voltageLevelLowerThresholdNonCriticalAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonCriticalAtt11.setReference("'DMTF|Voltage Probe|001' 11")
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonCriticalAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonCriticalAtt11.setDescription("The lower non-critical threshold for the voltage level set by the user, in millivolts. 0x80000000 denotes 'unknown'.")
voltageLevelUpperThresholdNonCriticalAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 12), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonCriticalAtt12.setReference("'DMTF|Voltage Probe|001' 12")
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonCriticalAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonCriticalAtt12.setDescription("The upper non-critical threshold for the voltage probe, in millivolts. 0x80000000 denotes 'unknown'.")
voltageLevelLowerThresholdCriticalAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelLowerThresholdCriticalAtt13.setReference("'DMTF|Voltage Probe|001' 13")
if mibBuilder.loadTexts: voltageLevelLowerThresholdCriticalAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: voltageLevelLowerThresholdCriticalAtt13.setDescription("The lower critical threshold for the voltage probe, in millivolt . 0x80000000 denotes 'unknown'.")
voltageLevelUpperThresholdCriticalAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelUpperThresholdCriticalAtt14.setReference("'DMTF|Voltage Probe|001' 14")
if mibBuilder.loadTexts: voltageLevelUpperThresholdCriticalAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: voltageLevelUpperThresholdCriticalAtt14.setDescription("The upper critical threshold for the voltage probe, in millivolt . 0x80000000 denotes 'unknown'.")
voltageLevelLowerThresholdNonRecoverableAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonRecoverableAtt15.setReference("'DMTF|Voltage Probe|001' 15")
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonRecoverableAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonRecoverableAtt15.setDescription("The lower non-recoverable threshold for the voltage probe, in millivolts. 0x80000000 denotes 'unknown'.")
voltageLevelUpperThresholdNonRecoverableAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 16), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonRecoverableAtt16.setReference("'DMTF|Voltage Probe|001' 16")
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonRecoverableAtt16.setStatus('mandatory')
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonRecoverableAtt16.setDescription("The upper non-recoverable threshold for the voltage probe, in millivolts. 0x80000000 denotes 'unknown'.")
voltageProbeResolutionAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageProbeResolutionAtt17.setReference("'DMTF|Voltage Probe|001' 17")
if mibBuilder.loadTexts: voltageProbeResolutionAtt17.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeResolutionAtt17.setDescription("The resolution for the reading from this voltage probe, in tenths of millivolts. '0x80000000 denotes 'unknown'.")
voltageProbeToleranceAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageProbeToleranceAtt18.setReference("'DMTF|Voltage Probe|001' 18")
if mibBuilder.loadTexts: voltageProbeToleranceAtt18.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeToleranceAtt18.setDescription("The tolerance for the reading from this voltage probe, in plus/minus millivolts. 0x80000000 denotes 'unknown'.")
voltageProbeAccuracyAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageProbeAccuracyAtt19.setReference("'DMTF|Voltage Probe|001' 19")
if mibBuilder.loadTexts: voltageProbeAccuracyAtt19.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeAccuracyAtt19.setDescription("The accuracy for the reading from this voltage probe, in plus/minus hundredths of a percent. 0x80000000 denotes 'unknown'.")
fRUGroupIndexAtt20_2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 20), DmiInteger()).setLabel("fRUGroupIndexAtt20-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt20_2.setReference("'DMTF|Voltage Probe|001' 20")
if mibBuilder.loadTexts: fRUGroupIndexAtt20_2.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt20_2.setDescription('Index into the FRU table')
operationalGroupIndexAtt21_2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 21), DmiInteger()).setLabel("operationalGroupIndexAtt21-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt21_2.setReference("'DMTF|Voltage Probe|001' 21")
if mibBuilder.loadTexts: operationalGroupIndexAtt21_2.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt21_2.setDescription('Index into the Operational State table')
dMTFPhysicalMemoryArrayTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 33), )
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayTable.setDescription('This group represents an array of physical memory as a collectio of one or more Memory Devices associated in sets and partitions.')
dMTFPhysicalMemoryArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryArrayTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEntry.setDescription('This group represents an array of physical memory as a collectio of one or more Memory Devices associated in sets and partitions.')
dMTFPhysicalMemoryArrayState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayState.setReference("'DMTF|Physical Memory Array|001' 0")
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayState.setDescription('')
memoryArrayTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayTableIndexAtt1.setReference("'DMTF|Physical Memory Array|001' 1")
if mibBuilder.loadTexts: memoryArrayTableIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: memoryArrayTableIndexAtt1.setDescription('A unique number that identifies this row.')
memoryArrayLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("systemBoardOrMotherboard", 3), ("iSAAddOnCard", 4), ("eISAAddOnCard", 5), ("pCIAddOnCard", 6), ("mCAAddOnCard", 7), ("pCMCIAAddOnCard", 8), ("proprietaryAddOnCard", 9), ("nuBus", 16), ("pC98C20AddOnCard", 160), ("pC98C24AddOnCard", 161), ("pC98EAddOnCard", 162), ("pC98LocalBusAddOnCard", 163), ("pC98CardSlotAddOnCard", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayLocationAtt2.setReference("'DMTF|Physical Memory Array|001' 2")
if mibBuilder.loadTexts: memoryArrayLocationAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: memoryArrayLocationAtt2.setDescription('The physical location of the Memory Array, whether on the system board or an add-on board.')
memoryArrayUseAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("systemMemory", 3), ("videoMemory", 4), ("flashMemory", 5), ("nonVolatileRAM", 6), ("cacheMemory", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayUseAtt3.setReference("'DMTF|Physical Memory Array|001' 3")
if mibBuilder.loadTexts: memoryArrayUseAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: memoryArrayUseAtt3.setDescription('What this Memory Array is used for.')
maximumMemoryCapacityAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumMemoryCapacityAtt4.setReference("'DMTF|Physical Memory Array|001' 4")
if mibBuilder.loadTexts: maximumMemoryCapacityAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: maximumMemoryCapacityAtt4.setDescription("The maximum memory capacity, in kilobytes, on this array. 0x80000000denotes 'unknown'.")
numberOfMemoryDeviceSocketsAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsAtt5.setReference("'DMTF|Physical Memory Array|001' 5")
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsAtt5.setDescription("The number of SIMM slots or sockets available for Memory Devices in this array. 0x80000000 denotes 'unknown'. ")
numberOfMemoryDeviceSocketsUsedAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsUsedAtt6.setReference("'DMTF|Physical Memory Array|001' 6")
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsUsedAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsUsedAtt6.setDescription("The number of SIMM slots or sockets in use for Memory Devices in this array. 0x80000000 denotes 'unknown'.")
memoryErrorCorrectionAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6), ("cRC", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryErrorCorrectionAtt7.setReference("'DMTF|Physical Memory Array|001' 7")
if mibBuilder.loadTexts: memoryErrorCorrectionAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: memoryErrorCorrectionAtt7.setDescription('The main hardware error correction or detection method supported by this Memory Array.')
arrayErrorTypeAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("cRCError", 11), ("correctedSingleBitError", 12), ("correctedError", 13), ("uncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayErrorTypeAtt8.setReference("'DMTF|Physical Memory Array|001' 8")
if mibBuilder.loadTexts: arrayErrorTypeAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: arrayErrorTypeAtt8.setDescription('The type of error that is associated with the current status reported in Operational State for this Memory Array.')
lastErrorUpdateAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noUpdateSinceLastInstrumentationStart", 3), ("updatedFromInformationObtainedPriorToInstrumentati", 4), ("updatedDuringInstrumentationRunTime", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorUpdateAtt9.setReference("'DMTF|Physical Memory Array|001' 9")
if mibBuilder.loadTexts: lastErrorUpdateAtt9.setStatus('mandatory')
if mibBuilder.loadTexts: lastErrorUpdateAtt9.setDescription('System state during which last error status was collected.')
errorOperationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorOperationAtt10.setReference("'DMTF|Physical Memory Array|001' 10")
if mibBuilder.loadTexts: errorOperationAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: errorOperationAtt10.setDescription('The memory access operation that caused the current error.')
errorDataSizeAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataSizeAtt11.setReference("'DMTF|Physical Memory Array|001' 11")
if mibBuilder.loadTexts: errorDataSizeAtt11.setStatus('mandatory')
if mibBuilder.loadTexts: errorDataSizeAtt11.setDescription("The size of the data transfer that caused the error, in bits. Zero indicates no error, 0x80000000 denotes 'unknown'.")
errorDataAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 12), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataAtt12.setReference("'DMTF|Physical Memory Array|001' 12")
if mibBuilder.loadTexts: errorDataAtt12.setStatus('mandatory')
if mibBuilder.loadTexts: errorDataAtt12.setDescription("Data captured during the erroneous Memory Array access. The data occupy the first n bytes of the octet string required to hold 'Error Data Size' bits of the data. Data are stored least-significant byte first.")
vendorSyndromeAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 13), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorSyndromeAtt13.setReference("'DMTF|Physical Memory Array|001' 13")
if mibBuilder.loadTexts: vendorSyndromeAtt13.setStatus('mandatory')
if mibBuilder.loadTexts: vendorSyndromeAtt13.setDescription('Vendor-specific syndrome or CRC data associated with the erroneous access. ')
errorAddressAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 14), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorAddressAtt14.setReference("'DMTF|Physical Memory Array|001' 14")
if mibBuilder.loadTexts: errorAddressAtt14.setStatus('mandatory')
if mibBuilder.loadTexts: errorAddressAtt14.setDescription("Physical address of the error based on the addressing of the bus that the Memory Array is connected to. 0x8000 0000 0000 0000 denotes 'unknown'.")
errorResolutionAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorResolutionAtt15.setReference("'DMTF|Physical Memory Array|001' 15")
if mibBuilder.loadTexts: errorResolutionAtt15.setStatus('mandatory')
if mibBuilder.loadTexts: errorResolutionAtt15.setDescription("Range in bytes that the error can be determined to be within, when an Error Address is given. 0x80000000 denotes 'unknown'.")
fRUGroupIndexAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt16.setReference("'DMTF|Physical Memory Array|001' 16")
if mibBuilder.loadTexts: fRUGroupIndexAtt16.setStatus('mandatory')
if mibBuilder.loadTexts: fRUGroupIndexAtt16.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
operationalGroupIndexAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt17.setReference("'DMTF|Physical Memory Array|001' 17")
if mibBuilder.loadTexts: operationalGroupIndexAtt17.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt17.setDescription('The index into the Operational State Table for this Memory Array. The Operational State row is used to hold the overall error count and error status for this array.')
dMTFParallelPortsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 10), )
if mibBuilder.loadTexts: dMTFParallelPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFParallelPortsTable.setDescription('This group defines the attributes for parallel ports in this system.')
dMTFParallelPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "parallelPortIndexAtt1"))
if mibBuilder.loadTexts: dMTFParallelPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFParallelPortsEntry.setDescription('This group defines the attributes for parallel ports in this system.')
dMTFParallelPortsState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFParallelPortsState.setReference("'DMTF|Parallel Ports|003' 0")
if mibBuilder.loadTexts: dMTFParallelPortsState.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFParallelPortsState.setDescription('')
parallelPortIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortIndexAtt1.setReference("'DMTF|Parallel Ports|003' 1")
if mibBuilder.loadTexts: parallelPortIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortIndexAtt1.setDescription('An index into the parallel ports table.')
parallelBaseIOAddressAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelBaseIOAddressAtt2.setReference("'DMTF|Parallel Ports|003' 2")
if mibBuilder.loadTexts: parallelBaseIOAddressAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: parallelBaseIOAddressAtt2.setDescription('Base I/O address for this parallel port.')
iRQUsedAtt3_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 3), DmiInteger()).setLabel("iRQUsedAtt3-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: iRQUsedAtt3_1.setReference("'DMTF|Parallel Ports|003' 3")
if mibBuilder.loadTexts: iRQUsedAtt3_1.setStatus('mandatory')
if mibBuilder.loadTexts: iRQUsedAtt3_1.setDescription('IRQ number that is being used by this parallel port.')
logicalNameAtt4_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 4), DmiDisplaystring()).setLabel("logicalNameAtt4-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalNameAtt4_1.setReference("'DMTF|Parallel Ports|003' 4")
if mibBuilder.loadTexts: logicalNameAtt4_1.setStatus('mandatory')
if mibBuilder.loadTexts: logicalNameAtt4_1.setDescription('The logical name of the I/O device on this parallel port, under this operating environment.')
connectorTypeAtt5_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 160, 161, 162))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dB25Female", 3), ("dB25Male", 4), ("centronics", 5), ("miniCentronics", 6), ("proprietary", 7), ("centronics14", 160), ("dB36Female", 161), ("miniCentronics20", 162)))).setLabel("connectorTypeAtt5-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorTypeAtt5_1.setReference("'DMTF|Parallel Ports|003' 5")
if mibBuilder.loadTexts: connectorTypeAtt5_1.setStatus('mandatory')
if mibBuilder.loadTexts: connectorTypeAtt5_1.setDescription('The connector used to interface with the I/O device on this parallel port.')
connectorPinoutAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("xTAT", 3), ("pS2", 4), ("iEEE1284", 5), ("proprietary", 6), ("pC98", 160), ("pC98Hireso", 161), ("pCH98", 162), ("pC98Note", 163), ("pC98Full", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorPinoutAtt6.setReference("'DMTF|Parallel Ports|003' 6")
if mibBuilder.loadTexts: connectorPinoutAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: connectorPinoutAtt6.setDescription('The pinout used by the I/O device on this parallel port.')
dMASupportAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMASupportAtt7.setReference("'DMTF|Parallel Ports|003' 7")
if mibBuilder.loadTexts: dMASupportAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: dMASupportAtt7.setDescription('If true, DMA is supported.')
parallelPortCapabilitiesAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortCapabilitiesAtt8.setReference("'DMTF|Parallel Ports|003' 8")
if mibBuilder.loadTexts: parallelPortCapabilitiesAtt8.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortCapabilitiesAtt8.setDescription('Capabilities of this parallel port. This is a bit field mask with the bits defined as follows: Bit 0 (2^0) set = XT/AT compatible, Bit 1 (2^1) set = PS/2 compatible, Bit 2 (2^2) set = ECP, Bit 3 (2^3) set = EPP, Bit 4 (2^4) set = PC-98, Bit 5 (2^5) set = PC-98-Hireso, Bit 6 (2^6) set = PC-H98')
operationalGroupIndexAtt9_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 9), DmiInteger()).setLabel("operationalGroupIndexAtt9-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt9_1.setReference("'DMTF|Parallel Ports|003' 9")
if mibBuilder.loadTexts: operationalGroupIndexAtt9_1.setStatus('mandatory')
if mibBuilder.loadTexts: operationalGroupIndexAtt9_1.setDescription('The index into the Operational State Table for this device.')
parallelPortSecuritySettingsAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalInterfaceLockedOut", 4), ("externalInterfaceEnabled", 5), ("bootBypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortSecuritySettingsAtt10.setReference("'DMTF|Parallel Ports|003' 10")
if mibBuilder.loadTexts: parallelPortSecuritySettingsAtt10.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortSecuritySettingsAtt10.setDescription('Attribute describing the current hardware security settings on this device')
dELLSystemsManagementSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 400), )
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareTable.setDescription('This group defines the attributes of the management software which instruments this component.')
dELLSystemsManagementSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareEntry.setDescription('This group defines the attributes of the management software which instruments this component.')
productAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAtt1.setReference("'DELL|Systems Management Software|001' 1")
if mibBuilder.loadTexts: productAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: productAtt1.setDescription('The name of the Systems Management Software product that instruments this component.')
versionAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionAtt2.setReference("'DELL|Systems Management Software|001' 2")
if mibBuilder.loadTexts: versionAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: versionAtt2.setDescription('The version for the Systems Management Software.')
buildNumberAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildNumberAtt3.setReference("'DELL|Systems Management Software|001' 3")
if mibBuilder.loadTexts: buildNumberAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: buildNumberAtt3.setDescription('The build number of this Systems Management Software product.')
descriptionAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: descriptionAtt4.setReference("'DELL|Systems Management Software|001' 4")
if mibBuilder.loadTexts: descriptionAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: descriptionAtt4.setDescription('A description of this Systems Management Software product.')
supportedProtocolsAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportedProtocolsAtt5.setReference("'DELL|Systems Management Software|001' 5")
if mibBuilder.loadTexts: supportedProtocolsAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: supportedProtocolsAtt5.setDescription('This is a bit map field which is used to list protocols which can be used to access the systems management information. This is a bit map where a value of 1 indicates that the protocol is supported. Values are based on the Protocol-Type enum. Mappers will be listed in this list, but not as preferred protocols.')
preferredProtocolAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("sNMP", 1), ("dMIRPC", 2), ("cIMOM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: preferredProtocolAtt6.setReference("'DELL|Systems Management Software|001' 6")
if mibBuilder.loadTexts: preferredProtocolAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: preferredProtocolAtt6.setDescription('This is a field which is used to indicate which protocol is the preferred method for gathering management information. This is value is set by the instrumentation based on performance and features of protocols available.')
dMIRPCTypesAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMIRPCTypesAtt7.setReference("'DELL|Systems Management Software|001' 7")
if mibBuilder.loadTexts: dMIRPCTypesAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: dMIRPCTypesAtt7.setDescription('This field describes the RPC type, if any, for instance DCE:ncac -ip-tcp or ONC:tcpip. A semi-colon may seperate multiple supports, such as DCE:ncasn-ip-tcp;ONC:tcpip. This field should be empty if DMI RPC is not supported.')
dELLSystemsSummaryInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 402), )
if mibBuilder.loadTexts: dELLSystemsSummaryInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: dELLSystemsSummaryInformationTable.setDescription('This group provides minimal summarization information about a system.')
dELLSystemsSummaryInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 402, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dELLSystemsSummaryInformationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dELLSystemsSummaryInformationEntry.setDescription('This group provides minimal summarization information about a system.')
operatingSystemAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 402, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("windowsNT", 3), ("windows9x", 4), ("iBMOS2", 5), ("sCOUNIX", 6), ("netware", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemAtt1.setReference("'DELL|Systems Summary Information|001' 1")
if mibBuilder.loadTexts: operatingSystemAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemAtt1.setDescription('This is the operating system which is installed and running on the system.')
systemClassAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 402, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("workstation", 3), ("server", 4), ("desktop", 5), ("portable", 6), ("netPC", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClassAtt2.setReference("'DELL|Systems Summary Information|001' 2")
if mibBuilder.loadTexts: systemClassAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: systemClassAtt2.setDescription('This is the system type which is installed and running the instrumentation.')
dellMemoryPrefailureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 403), )
if mibBuilder.loadTexts: dellMemoryPrefailureTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellMemoryPrefailureTable.setDescription('This group provides information about a memory prefailure condition described in the operational state of the memory device.')
dellMemoryPrefailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryDeviceIndexAtt1"))
if mibBuilder.loadTexts: dellMemoryPrefailureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellMemoryPrefailureEntry.setDescription('This group provides information about a memory prefailure condition described in the operational state of the memory device.')
dellMemoryPrefailureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellMemoryPrefailureState.setReference("'Dell|Memory Prefailure|001' 0")
if mibBuilder.loadTexts: dellMemoryPrefailureState.setStatus('mandatory')
if mibBuilder.loadTexts: dellMemoryPrefailureState.setDescription('')
memoryDeviceIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceIndexAtt1.setReference("'Dell|Memory Prefailure|001' 1")
if mibBuilder.loadTexts: memoryDeviceIndexAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceIndexAtt1.setDescription('This is the index into the memory device table.')
resetMemoryDeviceErrorCountAndPrefailureStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetMemoryDeviceErrorCountAndPrefailureStatusAtt2.setReference("'Dell|Memory Prefailure|001' 2")
if mibBuilder.loadTexts: resetMemoryDeviceErrorCountAndPrefailureStatusAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: resetMemoryDeviceErrorCountAndPrefailureStatusAtt2.setDescription('Writing a non-zero value to this field will reset the memory device prefailure status and error count.')
dellTemperatureProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 300, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellTemperatureProbeEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dellTemperatureProbeEvSys.setDescription('')
dellTemperatureProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 300, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellTemperatureProbeEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dellTemperatureProbeEvSub.setDescription('')
dellTemperatureProbeEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 300, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellTemperatureProbeEvSol.setStatus('mandatory')
if mibBuilder.loadTexts: dellTemperatureProbeEvSol.setDescription('')
dellTemperatureProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 300) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellTemperatureProbeEvSys"), ("BASEBRDD-MIB-MIB", "dellTemperatureProbeEvSub"), ("BASEBRDD-MIB-MIB", "dellTemperatureProbeEvSol"))
if mibBuilder.loadTexts: dellTemperatureProbeEvt1.setDescription('coolingDeviceStatusChange')
if mibBuilder.loadTexts: dellTemperatureProbeEvt1.setReference("'Dell|Temperature Probe|003' 1")
dellFanSensorEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 301, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellFanSensorEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dellFanSensorEvSys.setDescription('')
dellFanSensorEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 301, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellFanSensorEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dellFanSensorEvSub.setDescription('')
dellFanSensorEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 301, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellFanSensorEvSol.setStatus('mandatory')
if mibBuilder.loadTexts: dellFanSensorEvSol.setDescription('')
dellFanSensorEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 301) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellFanSensorEvSys"), ("BASEBRDD-MIB-MIB", "dellFanSensorEvSub"), ("BASEBRDD-MIB-MIB", "dellFanSensorEvSol"))
if mibBuilder.loadTexts: dellFanSensorEvt1.setDescription('coolingDeviceStatusChange')
if mibBuilder.loadTexts: dellFanSensorEvt1.setReference("'Dell|Fan Sensor|003' 1")
dellVoltageProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 302, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellVoltageProbeEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dellVoltageProbeEvSys.setDescription('')
dellVoltageProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 302, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellVoltageProbeEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dellVoltageProbeEvSub.setDescription('')
dellVoltageProbeEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 302, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellVoltageProbeEvSol.setStatus('mandatory')
if mibBuilder.loadTexts: dellVoltageProbeEvSol.setDescription('')
dellVoltageProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 302) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellVoltageProbeEvSys"), ("BASEBRDD-MIB-MIB", "dellVoltageProbeEvSub"), ("BASEBRDD-MIB-MIB", "dellVoltageProbeEvSol"))
if mibBuilder.loadTexts: dellVoltageProbeEvt1.setDescription('powerSupplyStatusChange')
if mibBuilder.loadTexts: dellVoltageProbeEvt1.setReference("'Dell|Voltage Probe|002' 1")
dellCurrentProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 303, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellCurrentProbeEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dellCurrentProbeEvSys.setDescription('')
dellCurrentProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 303, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellCurrentProbeEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dellCurrentProbeEvSub.setDescription('')
dellCurrentProbeEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 303, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellCurrentProbeEvSol.setStatus('mandatory')
if mibBuilder.loadTexts: dellCurrentProbeEvSol.setDescription('')
dellCurrentProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 303) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellCurrentProbeEvSys"), ("BASEBRDD-MIB-MIB", "dellCurrentProbeEvSub"), ("BASEBRDD-MIB-MIB", "dellCurrentProbeEvSol"))
if mibBuilder.loadTexts: dellCurrentProbeEvt1.setDescription('powerSupplyStatusChange')
if mibBuilder.loadTexts: dellCurrentProbeEvt1.setReference("'Dell|Current Probe|002' 1")
dellGlobalPowerUnitEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 305, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSys.setDescription('')
dellGlobalPowerUnitEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 305, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSub.setDescription('')
dellGlobalPowerUnitEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 305, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSol.setStatus('mandatory')
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSol.setDescription('')
dellGlobalPowerUnitEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 305) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSys"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSub"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSol"))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvt1.setDescription('powerSupplyRedundancyChange')
if mibBuilder.loadTexts: dellGlobalPowerUnitEvt1.setReference("'Dell|GlobalPowerUnit|003' 1")
dellGlobalPowerUnitEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 305) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSys"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSub"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSol"))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvt2.setDescription('powerSupplyStatusChange')
if mibBuilder.loadTexts: dellGlobalPowerUnitEvt2.setReference("'Dell|GlobalPowerUnit|003' 2")
dellSystemChassisExtensionEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 306, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSys.setDescription('')
dellSystemChassisExtensionEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 306, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSub.setDescription('')
dellSystemChassisExtensionEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 306, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSol.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSol.setDescription('')
dellSystemChassisExtensionEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 306) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellSystemChassisExtensionEvSys"), ("BASEBRDD-MIB-MIB", "dellSystemChassisExtensionEvSub"), ("BASEBRDD-MIB-MIB", "dellSystemChassisExtensionEvSol"))
if mibBuilder.loadTexts: dellSystemChassisExtensionEvt1.setDescription('memoryECCError')
if mibBuilder.loadTexts: dellSystemChassisExtensionEvt1.setReference("'Dell|SystemChassisExtension|004' 1")
dMTFPhysicalContainerGlobalTableEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvSys.setDescription('The major functional aspect of the product causing the fault.')
dMTFPhysicalContainerGlobalTableEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dMTFPhysicalContainerGlobalTableEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt1.setDescription('securitySettingsChange')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt1.setReference("'DMTF|Physical Container Global Table|002' 1")
dMTFPhysicalContainerGlobalTableEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt2.setDescription('powerSupplyStatusChange')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt2.setReference("'DMTF|Physical Container Global Table|002' 2")
dMTFPhysicalContainerGlobalTableEvt3 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,3)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt3.setDescription('coolingDeviceStatusChange')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt3.setReference("'DMTF|Physical Container Global Table|002' 3")
dMTFPhysicalContainerGlobalTableEvt4 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,4)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt4.setDescription('physicalDeviceStatusChange')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt4.setReference("'DMTF|Physical Container Global Table|002' 4")
dMTFPhysicalContainerGlobalTableEvt5 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,5)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt5.setDescription('logicalDeviceStatusChange')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt5.setReference("'DMTF|Physical Container Global Table|002' 5")
dMTFPhysicalContainerGlobalTableEvt6 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,6)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt6.setDescription('containerSecurityBreach')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt6.setReference("'DMTF|Physical Container Global Table|002' 6")
dMTFPhysicalContainerGlobalTableEvt7 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,7)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt7.setDescription('configurationError')
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvt7.setReference("'DMTF|Physical Container Global Table|002' 7")
dellSystemResetEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 312, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemResetEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemResetEvSys.setDescription('')
dellSystemResetEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 312, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemResetEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemResetEvSub.setDescription('')
dellSystemResetEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 312, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellSystemResetEvSol.setStatus('mandatory')
if mibBuilder.loadTexts: dellSystemResetEvSol.setDescription('')
dellSystemResetEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 312) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellSystemResetEvSys"), ("BASEBRDD-MIB-MIB", "dellSystemResetEvSub"), ("BASEBRDD-MIB-MIB", "dellSystemResetEvSol"))
if mibBuilder.loadTexts: dellSystemResetEvt1.setDescription('systemUp')
if mibBuilder.loadTexts: dellSystemResetEvt1.setReference("'Dell|System Reset|001' 1")
dMTFCoolingDeviceEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFCoolingDeviceEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFCoolingDeviceEvSys.setDescription('The major functional aspect of the product causing the fault.')
dMTFCoolingDeviceEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFCoolingDeviceEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFCoolingDeviceEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dMTFCoolingDeviceEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 17) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSys"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSub"))
if mibBuilder.loadTexts: dMTFCoolingDeviceEvt1.setDescription('coolingDeviceStatusChange')
if mibBuilder.loadTexts: dMTFCoolingDeviceEvt1.setReference("'DMTF|Cooling Device|002' 1")
dMTFCoolingDeviceEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 17) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSys"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSub"))
if mibBuilder.loadTexts: dMTFCoolingDeviceEvt2.setDescription('temperatureFault')
if mibBuilder.loadTexts: dMTFCoolingDeviceEvt2.setReference("'DMTF|Cooling Device|002' 2")
dMTFElectricalCurrentProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvSys.setDescription('The major functional aspect of the product causing the fault.')
dMTFElectricalCurrentProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dMTFElectricalCurrentProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 55) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSub"))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvt1.setDescription('powerSupplyStatusChange')
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvt1.setReference("'DMTF|Electrical Current Probe|001' 1")
dMTFElectricalCurrentProbeEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 55) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSub"))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvt2.setDescription('coolingDeviceStatusChange')
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvt2.setReference("'DMTF|Electrical Current Probe|001' 2")
dMTFPhysicalMemoryArrayEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvSys.setDescription('The major functional aspect of the product causing the fault.')
dMTFPhysicalMemoryArrayEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dMTFPhysicalMemoryArrayEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 33) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvt1.setDescription('memoryError')
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvt1.setReference("'DMTF|Physical Memory Array|001' 1")
dMTFPhysicalMemoryArrayEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 33) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSub"))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvt2.setDescription('initializationFailure')
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvt2.setReference("'DMTF|Physical Memory Array|001' 2")
dMTFPowerSupplyEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPowerSupplyEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerSupplyEvSys.setDescription('The major functional aspect of the product causing the fault.')
dMTFPowerSupplyEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPowerSupplyEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFPowerSupplyEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dMTFPowerSupplyEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 16) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSub"))
if mibBuilder.loadTexts: dMTFPowerSupplyEvt1.setDescription('powerSupplyStatusChange')
if mibBuilder.loadTexts: dMTFPowerSupplyEvt1.setReference("'DMTF|Power Supply|002' 1")
dMTFPowerSupplyEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 16) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSub"))
if mibBuilder.loadTexts: dMTFPowerSupplyEvt2.setDescription('powerControlRequest')
if mibBuilder.loadTexts: dMTFPowerSupplyEvt2.setReference("'DMTF|Power Supply|002' 2")
dMTFTemperatureProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFTemperatureProbeEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFTemperatureProbeEvSys.setDescription('The major functional aspect of the product causing the fault.')
dMTFTemperatureProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFTemperatureProbeEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFTemperatureProbeEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dMTFTemperatureProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 54) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFTemperatureProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFTemperatureProbeEvSub"))
if mibBuilder.loadTexts: dMTFTemperatureProbeEvt1.setDescription('coolingDeviceStatusChange')
if mibBuilder.loadTexts: dMTFTemperatureProbeEvt1.setReference("'DMTF|Temperature Probe|001' 1")
dMTFVoltageProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFVoltageProbeEvSys.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFVoltageProbeEvSys.setDescription('The major functional aspect of the product causing the fault.')
dMTFVoltageProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFVoltageProbeEvSub.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFVoltageProbeEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dMTFVoltageProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 53) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFVoltageProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFVoltageProbeEvSub"))
if mibBuilder.loadTexts: dMTFVoltageProbeEvt1.setDescription('powerSupplyStatusChange')
if mibBuilder.loadTexts: dMTFVoltageProbeEvt1.setReference("'DMTF|Voltage Probe|001' 1")
mibBuilder.exportSymbols("BASEBRDD-MIB-MIB", arrayErrorTypeAtt8=arrayErrorTypeAtt8, errorResolutionAtt15=errorResolutionAtt15, dellFanSensorEvt1=dellFanSensorEvt1, dMTFSystemBIOSTable=dMTFSystemBIOSTable, dMTFPhysicalContainerGlobalTableEvt7=dMTFPhysicalContainerGlobalTableEvt7, currentErrorStatusAtt10=currentErrorStatusAtt10, chassLEDConfigAtt18=chassLEDConfigAtt18, dMTFSerialPortsEntry=dMTFSerialPortsEntry, dMTFVoltageProbeEvSub=dMTFVoltageProbeEvSub, electricalCurrentProbeAccuracyAtt19=electricalCurrentProbeAccuracyAtt19, dMTFComponentIDTable=dMTFComponentIDTable, dataDepthAtt8=dataDepthAtt8, timedPowerOnAvailableAtt2=timedPowerOnAvailableAtt2, dMTFParallelPortsState=dMTFParallelPortsState, dMTFPowerSupplyEvt1=dMTFPowerSupplyEvt1, voltageLevelUpperThresholdCriticalAtt14=voltageLevelUpperThresholdCriticalAtt14, chassVoltStatusAtt7=chassVoltStatusAtt7, operationalGroupIndexAtt23=operationalGroupIndexAtt23, dMTFElectricalCurrentProbeEvt2=dMTFElectricalCurrentProbeEvt2, dellEsmLogState=dellEsmLogState, administrativeStateAtt6=administrativeStateAtt6, temperatureProbeTemperatureReadingAtt5=temperatureProbeTemperatureReadingAtt5, voltageLevelLowerThresholdNonCriticalAtt11=voltageLevelLowerThresholdNonCriticalAtt11, postLogDataAtt2=postLogDataAtt2, lastErrorUpdateAtt9=lastErrorUpdateAtt9, dMTFOperatingSystemEntry=dMTFOperatingSystemEntry, operatingSystemNameAtt2=operatingSystemNameAtt2, versionAtt2=versionAtt2, resourceUserIDAtt8=resourceUserIDAtt8, iODecodeAtt2=iODecodeAtt2, dMTFCoolingDeviceEvSys=dMTFCoolingDeviceEvSys, ampMinFailAtt8=ampMinFailAtt8, dellSecurityTable=dellSecurityTable, memoryDeviceMappedAddressesTableIndexAtt1=memoryDeviceMappedAddressesTableIndexAtt1, dellCurrentProbeEntry=dellCurrentProbeEntry, dmtfServiceLayerMIF=dmtfServiceLayerMIF, dELLSystemsManagementSoftwareTable=dELLSystemsManagementSoftwareTable, ampTypeAtt3=ampTypeAtt3, manufacturerAtt4=manufacturerAtt4, operationalGroupIndexAtt17=operationalGroupIndexAtt17, voltageLevelLowerThresholdCriticalAtt13=voltageLevelLowerThresholdCriticalAtt13, dMTFProcessorEntry=dMTFProcessorEntry, dMTFOperationalStateState=dMTFOperationalStateState, bIOSROMSizeAtt4=bIOSROMSizeAtt4, dellTemperatureProbeEntry=dellTemperatureProbeEntry, mappedRangeEndingAddressAtt4=mappedRangeEndingAddressAtt4, dMTFSystemResourceIRQInfoState=dMTFSystemResourceIRQInfoState, dMTFElectricalCurrentProbeTable=dMTFElectricalCurrentProbeTable, ampReadingAtt5=ampReadingAtt5, containerOrChassisTypeAtt1=containerOrChassisTypeAtt1, tempReadingAtt5=tempReadingAtt5, mIBOIDAtt2=mIBOIDAtt2, chassServiceTagAtt13=chassServiceTagAtt13, powerOnPasswordStatusAtt1=powerOnPasswordStatusAtt1, currentUsageAtt4=currentUsageAtt4, electricalCurrentStatusAtt4=electricalCurrentStatusAtt4, dMTFVoltageProbeTable=dMTFVoltageProbeTable, frontPanelResetStatusAtt4=frontPanelResetStatusAtt4, preferredProtocolAtt6=preferredProtocolAtt6, operationalGroupIndexAtt8=operationalGroupIndexAtt8, level3CacheIndexAtt12=level3CacheIndexAtt12, fansMaxWarnAtt7=fansMaxWarnAtt7, operationalGroupIndexAtt21_1=operationalGroupIndexAtt21_1, bankLocatorAtt4=bankLocatorAtt4, dellFirmwareTable=dellFirmwareTable, dMTFElectricalCurrentProbeEvt1=dMTFElectricalCurrentProbeEvt1, voltStatusAtt4=voltStatusAtt4, temperatureProbeDescriptionAtt3=temperatureProbeDescriptionAtt3, memoryArrayUseAtt3=memoryArrayUseAtt3, parallelPortSecuritySettingsAtt10=parallelPortSecuritySettingsAtt10, deviceFlagsAtt5=deviceFlagsAtt5, voltIndexAtt2=voltIndexAtt2, temperatureStatusAtt4=temperatureStatusAtt4, dellMemoryPrefailureState=dellMemoryPrefailureState, pwrUnitUidAtt10=pwrUnitUidAtt10, temperatureProbeMaximumAtt9=temperatureProbeMaximumAtt9, dMTFElectricalCurrentProbeEntry=dMTFElectricalCurrentProbeEntry, electricalCurrentProbeDescriptionAtt3=electricalCurrentProbeDescriptionAtt3, connectorTypeAtt5_1=connectorTypeAtt5_1, electricalCurrentProbeResolutionAtt17=electricalCurrentProbeResolutionAtt17, dELLSystemsSummaryInformationEntry=dELLSystemsSummaryInformationEntry, voltageProbeToleranceAtt18=voltageProbeToleranceAtt18, systemLocationAtt2=systemLocationAtt2, systemResourceMemoryInfoIndexAtt1=systemResourceMemoryInfoIndexAtt1, buildNumberAtt3=buildNumberAtt3, dMTFPowerSupplyEvSys=dMTFPowerSupplyEvSys, dMTFVoltageProbeEvSys=dMTFVoltageProbeEvSys, chassFansStatusAtt5=chassFansStatusAtt5, operationalGroupIndexAtt21_2=operationalGroupIndexAtt21_2, pwrSupplyIndexAtt2=pwrSupplyIndexAtt2, dellCurrentProbeState=dellCurrentProbeState, parallelPortCapabilitiesAtt8=parallelPortCapabilitiesAtt8, functionNumberAtt7=functionNumberAtt7, dialupCapabilityAtt1=dialupCapabilityAtt1, memoryArrayTableIndexAtt1=memoryArrayTableIndexAtt1, range2VoltageProbeIndexAtt13=range2VoltageProbeIndexAtt13, fRUIndexAtt1=fRUIndexAtt1, dellEsmLogTable=dellEsmLogTable, logicalNameAtt4=logicalNameAtt4, requestAtt4=requestAtt4, dellGlobalPowerUnitEvt2=dellGlobalPowerUnitEvt2, dMTFOperatingSystemState=dMTFOperatingSystemState, voltageLevelUpperThresholdNonCriticalAtt12=voltageLevelUpperThresholdNonCriticalAtt12, deviceIDAtt2=deviceIDAtt2, dMTFSystemHardwareSecurityTable=dMTFSystemHardwareSecurityTable, range2InputFrequencyHighAtt20=range2InputFrequencyHighAtt20, fansLocationAtt10=fansLocationAtt10, dMTFSystemBIOSEntry=dMTFSystemBIOSEntry, wordModeAtt8=wordModeAtt8, mappedRangeEndingAddressAtt5=mappedRangeEndingAddressAtt5, currentSpeedAtt6=currentSpeedAtt6, DmiDisplaystring=DmiDisplaystring, dMTFSystemSlotsEntry=dMTFSystemSlotsEntry, chassUidAtt14=chassUidAtt14, operationalStatusAtt3=operationalStatusAtt3, dMTFPhysicalContainerGlobalTableEvt2=dMTFPhysicalContainerGlobalTableEvt2, dMTFSystemResourceDeviceInfoEntry=dMTFSystemResourceDeviceInfoEntry, dellVoltageProbeEntry=dellVoltageProbeEntry, electricalCurrentProbeReadingAtt5=electricalCurrentProbeReadingAtt5, resetMemoryDeviceErrorCountAndPrefailureStatusAtt2=resetMemoryDeviceErrorCountAndPrefailureStatusAtt2, monitoredElectricalCurrentNominalReadingAtt6=monitoredElectricalCurrentNominalReadingAtt6, maximumSpeedAtt6=maximumSpeedAtt6, dMTFPowerSupplyTable=dMTFPowerSupplyTable, thermalStateAtt6=thermalStateAtt6, pwrUnitMaxWarn12vAtt9=pwrUnitMaxWarn12vAtt9, dellFanSensorState=dellFanSensorState, connectorPinoutAtt6=connectorPinoutAtt6, fRUGroupIndexAtt2_1=fRUGroupIndexAtt2_1, temperatureReadingLowerThresholdCriticalAtt13=temperatureReadingLowerThresholdCriticalAtt13, firmwareChassisIndexAtt1=firmwareChassisIndexAtt1, chassPwrSuppliesAtt12=chassPwrSuppliesAtt12, esmLogIndexAtt1=esmLogIndexAtt1, dMTFMemoryDeviceTable=dMTFMemoryDeviceTable, descriptionAtt4=descriptionAtt4, manualCapabilitiesAtt4=manualCapabilitiesAtt4, dmtf=dmtf, dellCurrentProbeEvSol=dellCurrentProbeEvSol, tempMinWarnAtt6=tempMinWarnAtt6, powerUnitRedundancyStatusAtt2=powerUnitRedundancyStatusAtt2, fansMaxFailAtt9=fansMaxFailAtt9, dellTemperatureProbeEvt1=dellTemperatureProbeEvt1, ampLocationAtt10=ampLocationAtt10, dellSystemResetEntry=dellSystemResetEntry, fRUSerialNumberAtt7=fRUSerialNumberAtt7, range1InputVoltageLowAtt7=range1InputVoltageLowAtt7, dellPOSTLogTable=dellPOSTLogTable, dMTFPhysicalMemoryArrayEntry=dMTFPhysicalMemoryArrayEntry, fansParentIndexAtt1=fansParentIndexAtt1, userIndexAtt1=userIndexAtt1, operationalGroupIndexAtt3_1=operationalGroupIndexAtt3_1, systemResourcesIndexAtt1=systemResourcesIndexAtt1, DmiOctetstring=DmiOctetstring, dmtfStdMifs=dmtfStdMifs, voltageProbeDescriptionAtt3=voltageProbeDescriptionAtt3, bootupStateAtt4=bootupStateAtt4, errorOperationAtt15=errorOperationAtt15, fRUGroupIndexAtt7=fRUGroupIndexAtt7, voltageStatusAtt4=voltageStatusAtt4, dellGlobalPowerUnitState=dellGlobalPowerUnitState, vendorSyndromeAtt18=vendorSyndromeAtt18, operatingSystemBootPartitionIndexAtt7=operatingSystemBootPartitionIndexAtt7, dMTFPowerSupplyState=dMTFPowerSupplyState, cacheableAtt5=cacheableAtt5, lastErrorUpdateAtt14=lastErrorUpdateAtt14, monitoredVoltageNormalMinimumAtt8=monitoredVoltageNormalMinimumAtt8, dMTFPhysicalMemoryArrayState=dMTFPhysicalMemoryArrayState, dellSystemChassisExtensionEvSol=dellSystemChassisExtensionEvSol, partitionAtt3=partitionAtt3, readWriteAtt7=readWriteAtt7, processorVersionInformationAtt4=processorVersionInformationAtt4, fRUInternetUniformResourceLocatorAtt12=fRUInternetUniformResourceLocatorAtt12, shareableAtt12=shareableAtt12, iNTELMIFTOMIBTable=iNTELMIFTOMIBTable, electricalCurrentProbeToleranceAtt18=electricalCurrentProbeToleranceAtt18, systemCacheTypeAtt9=systemCacheTypeAtt9, dMTFMemoryDeviceState=dMTFMemoryDeviceState, pwrSupplyStatusAtt4=pwrSupplyStatusAtt4, startAddressAtt8=startAddressAtt8, errorDataAtt17=errorDataAtt17, dMTFSerialPortsTable=dMTFSerialPortsTable, chassIndexAtt1=chassIndexAtt1, mappedRangeStartingAddressAtt4=mappedRangeStartingAddressAtt4, slotDescriptionAtt5=slotDescriptionAtt5, byteModeAtt7=byteModeAtt7, fatalErrorCountAtt7=fatalErrorCountAtt7, dMTFSystemResourceIRQInfoTable=dMTFSystemResourceIRQInfoTable, dMTFFRUTable=dMTFFRUTable, dell=dell, dmiDynOid3922453424=dmiDynOid3922453424, ampIndexAtt2=ampIndexAtt2, notificationNumberAtt3=notificationNumberAtt3, associativityAtt15=associativityAtt15, powerUnitIndexAtt1=powerUnitIndexAtt1, dMTFPhysicalMemoryArrayEvSys=dMTFPhysicalMemoryArrayEvSys, esmLogDataAtt2=esmLogDataAtt2, systemResourceIOInfoIndexAtt1=systemResourceIOInfoIndexAtt1, voltParentIndexAtt1=voltParentIndexAtt1, dMTFPowerUnitGlobalTableEntry=dMTFPowerUnitGlobalTableEntry, memoryDeviceTableIndexAtt1=memoryDeviceTableIndexAtt1, dMTFPowerUnitGlobalTableTable=dMTFPowerUnitGlobalTableTable, channelTimingAtt9=channelTimingAtt9, dMTFCoolingDeviceTable=dMTFCoolingDeviceTable, dMATransferPreferenceAtt5=dMATransferPreferenceAtt5, temperatureReadingUpperThresholdNonCriticalAtt12=temperatureReadingUpperThresholdNonCriticalAtt12, currentReadingUpperThresholdCriticalAtt14=currentReadingUpperThresholdCriticalAtt14, monitoredTemperatureNormalMaximumAtt7=monitoredTemperatureNormalMaximumAtt7, readPolicyAtt13=readPolicyAtt13, operationalStateInstanceIndexAtt1=operationalStateInstanceIndexAtt1, dMTFPhysicalContainerGlobalTableEvt1=dMTFPhysicalContainerGlobalTableEvt1, decodeSupportAtt4=decodeSupportAtt4, dMTFMemoryArrayMappedAddressesEntry=dMTFMemoryArrayMappedAddressesEntry, fRUGroupIndexAtt8=fRUGroupIndexAtt8, dMTFSystemHardwareSecurityEntry=dMTFSystemHardwareSecurityEntry, installationAtt5=installationAtt5, operationalGroupIndexAtt3=operationalGroupIndexAtt3, sharedAtt13=sharedAtt13, firmwareTypeAtt3=firmwareTypeAtt3, pwrUnitGlobalLevelAtt2=pwrUnitGlobalLevelAtt2, majorErrorCountAtt8=majorErrorCountAtt8, electricalCurrentProbeMinimumAtt10=electricalCurrentProbeMinimumAtt10, resourceUserAtt2=resourceUserAtt2, dmiDynOid73111109=dmiDynOid73111109, dMTFOperationalStateTable=dMTFOperationalStateTable, errorGranularityAtt13=errorGranularityAtt13, voltageProbeVoltageLevelAtt5=voltageProbeVoltageLevelAtt5, disableTrapsAtt3=disableTrapsAtt3, dMTFOperatingSystemTable=dMTFOperatingSystemTable, dMTFSystemResourceIRQInfoEntry=dMTFSystemResourceIRQInfoEntry, administratorPasswordStatisAtt3=administratorPasswordStatisAtt3, dellCurrentProbeEvt1=dellCurrentProbeEvt1, powerUnitIndexAtt4=powerUnitIndexAtt4, processorUpgradeAtt7=processorUpgradeAtt7, coolingDeviceTableIndexAtt1=coolingDeviceTableIndexAtt1, deviceSetAtt11=deviceSetAtt11, dMTFPhysicalContainerGlobalTableEvt5=dMTFPhysicalContainerGlobalTableEvt5, versionAtt3=versionAtt3, electricalCurrentReadingLowerThresholdNonRecoverabAtt15=electricalCurrentReadingLowerThresholdNonRecoverabAtt15, electricalCurrentReadingUpperThresholdNonCriticalAtt12=electricalCurrentReadingUpperThresholdNonCriticalAtt12, voltageLevelUpperThresholdNonRecoverableAtt16=voltageLevelUpperThresholdNonRecoverableAtt16, formFactorAtt6=formFactorAtt6, slotWidthAtt3=slotWidthAtt3, dMTFCoolingDeviceEntry=dMTFCoolingDeviceEntry, descriptionAtt3=descriptionAtt3, chassThermalShutdownAtt20=chassThermalShutdownAtt20, dMTFSystemSlotsState=dMTFSystemSlotsState, voltReadingAtt5=voltReadingAtt5, dMTFOperationalStateEntry=dMTFOperationalStateEntry, bIOSLoaderVersionAtt7=bIOSLoaderVersionAtt7, logicalDeviceIDClassCodeAtt4=logicalDeviceIDClassCodeAtt4, dMTFSystemResources2Table=dMTFSystemResources2Table, pwrSupplyOnlineAtt5=pwrSupplyOnlineAtt5, dMTFSystemPowerControlsEntry=dMTFSystemPowerControlsEntry, logicalNameAtt4_1=logicalNameAtt4_1, dellPOSTLogEntry=dellPOSTLogEntry)
mibBuilder.exportSymbols("BASEBRDD-MIB-MIB", volatilityAtt11=volatilityAtt11, dellVoltageProbeEvt1=dellVoltageProbeEvt1, dMTFPowerSupplyEvSub=dMTFPowerSupplyEvSub, dMTFSystemResourceDMAInfoState=dMTFSystemResourceDMAInfoState, cacheTypeAtt6=cacheTypeAtt6, errorDataAtt12=errorDataAtt12, dMTFMemoryArrayMappedAddressesTable=dMTFMemoryArrayMappedAddressesTable, maximumSpeedAtt5=maximumSpeedAtt5, devicePredictedFailureStatusAtt11=devicePredictedFailureStatusAtt11, dMTFTemperatureProbeTable=dMTFTemperatureProbeTable, fRUGroupIndexAtt22=fRUGroupIndexAtt22, systemCacheWritePolicyAtt5=systemCacheWritePolicyAtt5, dMTFVoltageProbeEvt1=dMTFVoltageProbeEvt1, flushTimerAtt14=flushTimerAtt14, dellRedundantPowerSupplyState=dellRedundantPowerSupplyState, dellSystemChassisExtensionEvt1=dellSystemChassisExtensionEvt1, dellSystemChassisExtensionEvSys=dellSystemChassisExtensionEvSys, pwrUnitMaxWarn33vAtt5=pwrUnitMaxWarn33vAtt5, voltMaxWarnAtt7=voltMaxWarnAtt7, memoryErrorCorrectionAtt7=memoryErrorCorrectionAtt7, DmiGauge=DmiGauge, fRUGroupIndexAtt16=fRUGroupIndexAtt16, temperatureReadingLowerThresholdNonRecoverableAtt15=temperatureReadingLowerThresholdNonRecoverableAtt15, temperatureProbeToleranceAtt18=temperatureProbeToleranceAtt18, primaryOperatingSystemAtt4=primaryOperatingSystemAtt4, dellFirmwareState=dellFirmwareState, fRUGroupIndexAtt20=fRUGroupIndexAtt20, range1InputFrequencyHighAtt18=range1InputFrequencyHighAtt18, voltageProbeMaximumAtt9=voltageProbeMaximumAtt9, pwrSupplyTypeAtt3=pwrSupplyTypeAtt3, dellTemperatureProbeEvSol=dellTemperatureProbeEvSol, temperatureProbeTableIndexAtt1=temperatureProbeTableIndexAtt1, chassMemStatusAtt21=chassMemStatusAtt21, systemCacheSpeedAtt3=systemCacheSpeedAtt3, processorTypeAtt2=processorTypeAtt2, lineSizeAtt10=lineSizeAtt10, dMTFMemoryDeviceEntry=dMTFMemoryDeviceEntry, level1CacheIndexAtt10=level1CacheIndexAtt10, DmiCounter=DmiCounter, electricalCurrentReadingLowerThresholdNonCriticalAtt11=electricalCurrentReadingLowerThresholdNonCriticalAtt11, systemResourceDMAInfoIndexAtt1=systemResourceDMAInfoIndexAtt1, temperatureProbeResolutionAtt17=temperatureProbeResolutionAtt17, firmwareStatusAtt5=firmwareStatusAtt5, voltTypeAtt3=voltTypeAtt3, endAddressAtt9=endAddressAtt9, usageStateAtt4=usageStateAtt4, fansIndexAtt2=fansIndexAtt2, temperatureReadingUpperThresholdNonRecoverableAtt16=temperatureReadingUpperThresholdNonRecoverableAtt16, server2=server2, fansWarningMinAtt6=fansWarningMinAtt6, dellSecurityEntry=dellSecurityEntry, dMTFCoolingDeviceEvt2=dMTFCoolingDeviceEvt2, typeCTimingAtt10=typeCTimingAtt10, dMIRPCTypesAtt7=dMIRPCTypesAtt7, busTypeAtt8=busTypeAtt8, dMTFSystemResources2State=dMTFSystemResources2State, dMTFPowerSupplyEvt2=dMTFPowerSupplyEvt2, dMTFProcessorState=dMTFProcessorState, containerSecurityStatusAtt12=containerSecurityStatusAtt12, dellGlobalPowerUnitEvSub=dellGlobalPowerUnitEvSub, tempIndexAtt2=tempIndexAtt2, bIOSEndingAddressAtt6=bIOSEndingAddressAtt6, resourceInfoIDAtt7=resourceInfoIDAtt7, tempStatusAtt4=tempStatusAtt4, DmiCompId=DmiCompId, operationalGroupIndexAtt8_1=operationalGroupIndexAtt8_1, callbackNumberAtt2=callbackNumberAtt2, range2InputVoltageLowAtt11=range2InputVoltageLowAtt11, dMTFGeneralInformationEntry=dMTFGeneralInformationEntry, bIOSStartingAddressAtt5=bIOSStartingAddressAtt5, monitoredTemperatureNormalMinimumAtt8=monitoredTemperatureNormalMinimumAtt8, processorIndexAtt1=processorIndexAtt1, dellSystemChassisExtensionEvSub=dellSystemChassisExtensionEvSub, arrayErrorAddressAtt20=arrayErrorAddressAtt20, triggerTypeAtt2=triggerTypeAtt2, warningErrorCountAtt9=warningErrorCountAtt9, range1InputFrequencyLowAtt17=range1InputFrequencyLowAtt17, dellRedundantPowerSupplyTable=dellRedundantPowerSupplyTable, revisionLevelAtt8=revisionLevelAtt8, chassFansProbesAtt6=chassFansProbesAtt6, dellSystemResetTable=dellSystemResetTable, voltageProbeAccuracyAtt19=voltageProbeAccuracyAtt19, dMTFPhysicalMemoryArrayEvSub=dMTFPhysicalMemoryArrayEvSub, tempMaxWarnAtt7=tempMaxWarnAtt7, dMTFSystemResourceMemoryInfoTable=dMTFSystemResourceMemoryInfoTable, deviceGroupIndexAtt2_1=deviceGroupIndexAtt2_1, dMTFSystemResourceDMAInfoEntry=dMTFSystemResourceDMAInfoEntry, productAtt2=productAtt2, pwrUnitIndexAtt11=pwrUnitIndexAtt11, dellVoltageProbeEvSol=dellVoltageProbeEvSol, operationalGroupIndexAtt7=operationalGroupIndexAtt7, userNameAtt2=userNameAtt2, inputVoltageRangeSwitchingAtt16=inputVoltageRangeSwitchingAtt16, operatingSystemBootDeviceStorageTypeAtt5=operatingSystemBootDeviceStorageTypeAtt5, memoryArrayIndexAtt2_1=memoryArrayIndexAtt2_1, ampMaxFailAtt9=ampMaxFailAtt9, firmwareVersionAtt4=firmwareVersionAtt4, containerLocationAtt11=containerLocationAtt11, systemCacheIndexAtt1=systemCacheIndexAtt1, vendorSyndromeAtt13=vendorSyndromeAtt13, dellPOSTLogState=dellPOSTLogState, dellFanSensorEvSub=dellFanSensorEvSub, powerSupplyTypeAtt5=powerSupplyTypeAtt5, voltMaxFailAtt9=voltMaxFailAtt9, chassGlobStatusAtt2=chassGlobStatusAtt2, deviceNumberAtt6=deviceNumberAtt6, maximumMemoryCapacityAtt4=maximumMemoryCapacityAtt4, inputVoltageCapabilityDescriptionAtt6=inputVoltageCapabilityDescriptionAtt6, dellGlobalPowerUnitTable=dellGlobalPowerUnitTable, dellGlobalPowerUnitEvSol=dellGlobalPowerUnitEvSol, partitionRowPositionAtt6=partitionRowPositionAtt6, dMTFSystemResources2Entry=dMTFSystemResources2Entry, powerControlRequestAtt1=powerControlRequestAtt1, keyboardPasswordStatusAtt2=keyboardPasswordStatusAtt2, coolingDeviceTypeAtt5=coolingDeviceTypeAtt5, dMTFTemperatureProbeEvSys=dMTFTemperatureProbeEvSys, fRUGroupIndexAtt20_2=fRUGroupIndexAtt20_2, iSAPCMCIARangeDescriptorAtt2=iSAPCMCIARangeDescriptorAtt2, dMTFTemperatureProbeEvSub=dMTFTemperatureProbeEvSub, supportPhoneNumberAtt11=supportPhoneNumberAtt11, DmiGroupId=DmiGroupId, manualControlAtt5=manualControlAtt5, errorResolutionAtt21=errorResolutionAtt21, systemCacheLevelAtt2=systemCacheLevelAtt2, dMTFSystemCacheEntry=dMTFSystemCacheEntry, dMTFTemperatureProbeEntry=dMTFTemperatureProbeEntry, warrantyStartDateAtt9=warrantyStartDateAtt9, pwrUnitMaxWarn5vAtt7=pwrUnitMaxWarn5vAtt7, automaticCapabilitiesAtt1=automaticCapabilitiesAtt1, dellSystemChassisExtensionTable=dellSystemChassisExtensionTable, memoryDeviceSetIDAtt2=memoryDeviceSetIDAtt2, fRUGroupIndexAtt2=fRUGroupIndexAtt2, voltLocationAtt10=voltLocationAtt10, tempLocationAtt10=tempLocationAtt10, dMTFMemoryDeviceMappedAddressesTable=dMTFMemoryDeviceMappedAddressesTable, voltageProbeLocationAtt2=voltageProbeLocationAtt2, dellSystemChassisExtensionState=dellSystemChassisExtensionState, dMTFMemoryArrayMappedAddressesState=dMTFMemoryArrayMappedAddressesState, dMTFTemperatureProbeState=dMTFTemperatureProbeState, DmiCounter64=DmiCounter64, dMASupportAtt7=dMASupportAtt7, powerStateAtt5=powerStateAtt5, dellTemperatureProbeState=dellTemperatureProbeState, electricalCurrentProbeLocationAtt2=electricalCurrentProbeLocationAtt2, systemPrimaryUserPhoneAtt4=systemPrimaryUserPhoneAtt4, dMTFPowerSupplyEntry=dMTFPowerSupplyEntry, totalOutputPowerAtt21=totalOutputPowerAtt21, dMTFSystemResourceDeviceInfoTable=dMTFSystemResourceDeviceInfoTable, voltMinWarnAtt6=voltMinWarnAtt6, triggerLevelAtt3=triggerLevelAtt3, timeToNextScheduledPowerOnAtt3=timeToNextScheduledPowerOnAtt3, cMReservedAtt9=cMReservedAtt9, dMTFPhysicalMemoryArrayEvt2=dMTFPhysicalMemoryArrayEvt2, dellDialupEntry=dellDialupEntry, powerSupplyIndexAtt1=powerSupplyIndexAtt1, serialPortCapabilitiesAtt7=serialPortCapabilitiesAtt7, resourceSizeAtt10=resourceSizeAtt10, dMTFPhysicalContainerGlobalTableEvt6=dMTFPhysicalContainerGlobalTableEvt6, verifyAtt6=verifyAtt6, numberOfMemoryDeviceSocketsUsedAtt6=numberOfMemoryDeviceSocketsUsedAtt6, ampMaxWarnAtt7=ampMaxWarnAtt7, containerIndexAtt9=containerIndexAtt9, systemResourceIRQInfoIndexAtt1=systemResourceIRQInfoIndexAtt1, range1InputVoltageHighAtt8=range1InputVoltageHighAtt8, dMAMaximumTransferSizeAtt4=dMAMaximumTransferSizeAtt4, dMTFMemoryDeviceMappedAddressesState=dMTFMemoryDeviceMappedAddressesState, automaticSystemResetTimerAtt6=automaticSystemResetTimerAtt6, dellBaseBoardMIBAtt1=dellBaseBoardMIBAtt1, dELLSystemsManagementSoftwareEntry=dELLSystemsManagementSoftwareEntry, dellFirmwareEntry=dellFirmwareEntry, chassVoltProbesAtt8=chassVoltProbesAtt8, range2InputFrequencyLowAtt19=range2InputFrequencyLowAtt19, operatingSystemBootDeviceIndexAtt6=operatingSystemBootDeviceIndexAtt6, temperatureReadingLowerThresholdNonCriticalAtt11=temperatureReadingLowerThresholdNonCriticalAtt11, parallelBaseIOAddressAtt2=parallelBaseIOAddressAtt2, ampMinWarnAtt6=ampMinWarnAtt6, dellTemperatureProbeEvSys=dellTemperatureProbeEvSys, resourceNumberAtt6=resourceNumberAtt6, voltageLevelLowerThresholdNonRecoverableAtt15=voltageLevelLowerThresholdNonRecoverableAtt15, dellSecurityState=dellSecurityState, coolingUnitIndexAtt4=coolingUnitIndexAtt4, serialPortSecuritySettingsAtt9=serialPortSecuritySettingsAtt9, dMTFPhysicalContainerGlobalTableEvt3=dMTFPhysicalContainerGlobalTableEvt3, dMTFSystemPowerControlsTable=dMTFSystemPowerControlsTable, systemDateTimeAtt6=systemDateTimeAtt6, memoryDeviceIndexAtt1=memoryDeviceIndexAtt1, ampParentIndexAtt1=ampParentIndexAtt1, deviceGroupIndexAtt2=deviceGroupIndexAtt2, baseAlignmentAtt11=baseAlignmentAtt11, slotCategoryAtt6=slotCategoryAtt6, dMTFElectricalCurrentProbeEvSub=dMTFElectricalCurrentProbeEvSub, dMTFSystemResourceDMAInfoTable=dMTFSystemResourceDMAInfoTable, dellCurrentProbeEvSys=dellCurrentProbeEvSys, electricalCurrentReadingUpperThresholdNonRecoverabAtt16=electricalCurrentReadingUpperThresholdNonRecoverabAtt16, dMTFPhysicalContainerGlobalTableState=dMTFPhysicalContainerGlobalTableState, typeDetailAtt10=typeDetailAtt10, dMTFElectricalCurrentProbeState=dMTFElectricalCurrentProbeState, dellTemperatureProbeEvSub=dellTemperatureProbeEvSub, dMTFVoltageProbeState=dMTFVoltageProbeState, chassisLockPresentAtt3=chassisLockPresentAtt3, chassBackPlaneUidAtt15=chassBackPlaneUidAtt15, dellVoltageProbeTable=dellVoltageProbeTable, userControlAtt3=userControlAtt3, partitionWidthAtt6=partitionWidthAtt6, containerNameAtt10=containerNameAtt10, chassAmpStatusAtt9=chassAmpStatusAtt9, dMTFSystemResourceMemoryInfoState=dMTFSystemResourceMemoryInfoState, slotTypeAtt2=slotTypeAtt2, dMTFPhysicalContainerGlobalTableEvSys=dMTFPhysicalContainerGlobalTableEvSys, sizeAtt5=sizeAtt5, pwrUnitLevel5vAtt6=pwrUnitLevel5vAtt6, busMasterAtt6=busMasterAtt6, chassMemDevicesAtt22=chassMemDevicesAtt22, pwrUnitLevel12vAtt8=pwrUnitLevel12vAtt8, electricalCurrentReadingLowerThresholdCriticalAtt13=electricalCurrentReadingLowerThresholdCriticalAtt13, electricalCurrentProbeTableIndexAtt1=electricalCurrentProbeTableIndexAtt1, serialBaseIOAddressAtt2=serialBaseIOAddressAtt2, dMTFParallelPortsEntry=dMTFParallelPortsEntry, memoryArrayIndexAtt2=memoryArrayIndexAtt2, dMTFTemperatureProbeEvt1=dMTFTemperatureProbeEvt1, warrantyDurationAtt10=warrantyDurationAtt10, manufacturerAtt1=manufacturerAtt1, dmtfDynOids=dmtfDynOids, dellFanSensorEvSys=dellFanSensorEvSys, iRQUsedAtt3_1=iRQUsedAtt3_1, pwrLocationAtt6=pwrLocationAtt6, monitoredVoltageNormalMaximumAtt7=monitoredVoltageNormalMaximumAtt7, systemCacheSizeAtt4=systemCacheSizeAtt4, dMTFSystemResourceIOInfoEntry=dMTFSystemResourceIOInfoEntry, assetTagAtt2=assetTagAtt2, interleavePositionAtt7=interleavePositionAtt7, postLogIndexAtt1=postLogIndexAtt1, errorDataSizeAtt16=errorDataSizeAtt16, resourceUserAtt1=resourceUserAtt1, tempMaxFailAtt9=tempMaxFailAtt9, bIOSReleaseDateAtt8=bIOSReleaseDateAtt8, virtualSlotAtt7=virtualSlotAtt7, dELLSystemsSummaryInformationTable=dELLSystemsSummaryInformationTable, dMTFSystemCacheTable=dMTFSystemCacheTable, bIOSManufacturerAtt2=bIOSManufacturerAtt2, resourceSetAtt3=resourceSetAtt3, voltageProbeMinimumAtt10=voltageProbeMinimumAtt10, dMTFParallelPortsTable=dMTFParallelPortsTable, dMTFFRUState=dMTFFRUState, deviceErrorAddressAtt19=deviceErrorAddressAtt19, dellGlobalPowerUnitEvt1=dellGlobalPowerUnitEvt1, fansMinFailAtt8=fansMinFailAtt8, range1ElectricalCurrentProbeIndexAtt10=range1ElectricalCurrentProbeIndexAtt10, connectorTypeAtt5=connectorTypeAtt5, operatingSystemDescriptionAtt8=operatingSystemDescriptionAtt8, dellMemoryPrefailureTable=dellMemoryPrefailureTable, dellFanSensorEntry=dellFanSensorEntry, modelAtt5=modelAtt5, mappedRangeStartingAddressAtt3=mappedRangeStartingAddressAtt3)
mibBuilder.exportSymbols("BASEBRDD-MIB-MIB", tempParentIndexAtt1=tempParentIndexAtt1, dMTFSystemCacheState=dMTFSystemCacheState, memoryTypeAtt9=memoryTypeAtt9, dellSystemResetEvt1=dellSystemResetEvt1, numberOfMemoryDeviceSocketsAtt5=numberOfMemoryDeviceSocketsAtt5, fansTypeAtt3=fansTypeAtt3, dellVoltageProbeEvSys=dellVoltageProbeEvSys, fansStatusAtt4=fansStatusAtt4, dMTFSerialPortsState=dMTFSerialPortsState, productAtt1=productAtt1, primaryBIOSAtt9=primaryBIOSAtt9, fRUGroupIndexAtt20_1=fRUGroupIndexAtt20_1, errorDataSizeAtt11=errorDataSizeAtt11, pwrUnitLevel33vAtt4=pwrUnitLevel33vAtt4, serialPortIndexAtt1=serialPortIndexAtt1, temperatureProbeAccuracyAtt19=temperatureProbeAccuracyAtt19, dellDialupTable=dellDialupTable, replacementPolicyAtt12=replacementPolicyAtt12, dMAAddressSizeAtt3=dMAAddressSizeAtt3, dellFanSensorTable=dellFanSensorTable, operationalGroupIndexAtt9=operationalGroupIndexAtt9, dMTFSystemResourceIOInfoTable=dMTFSystemResourceIOInfoTable, dellSystemResetEvSol=dellSystemResetEvSol, parallelPortIndexAtt1=parallelPortIndexAtt1, dMTFSystemResourceDeviceInfoState=dMTFSystemResourceDeviceInfoState, partNumberAtt6=partNumberAtt6, dellSystemResetEvSys=dellSystemResetEvSys, pwrUnitStatusAtt1=pwrUnitStatusAtt1, deviceSerialNumberAtt3=deviceSerialNumberAtt3, dellSystemChassisExtensionEntry=dellSystemChassisExtensionEntry, voltMinFailAtt8=voltMinFailAtt8, voltageProbeResolutionAtt17=voltageProbeResolutionAtt17, dmtfSystemsMIF=dmtfSystemsMIF, dMTFFRUEntry=dMTFFRUEntry, eISARangeDescriptorAtt3=eISARangeDescriptorAtt3, electricalCurrentProbeMaximumAtt9=electricalCurrentProbeMaximumAtt9, range2InputVoltageHighAtt12=range2InputVoltageHighAtt12, DmiInteger=DmiInteger, dellVoltageProbeEvSub=dellVoltageProbeEvSub, dMTFPhysicalMemoryArrayTable=dMTFPhysicalMemoryArrayTable, errorOperationAtt10=errorOperationAtt10, operatingSystemVersionAtt3=operatingSystemVersionAtt3, dMTFGeneralInformationTable=dMTFGeneralInformationTable, dellGlobalPowerUnitEntry=dellGlobalPowerUnitEntry, temperatureProbeIndexAtt6=temperatureProbeIndexAtt6, operatingSystemAtt1=operatingSystemAtt1, totalWidthAtt7=totalWidthAtt7, resourceTypeAtt5=resourceTypeAtt5, chassTempStatusAtt3=chassTempStatusAtt3, dellCurrentProbeTable=dellCurrentProbeTable, dMTFProcessorTable=dMTFProcessorTable, dMTFPhysicalMemoryArrayEvt1=dMTFPhysicalMemoryArrayEvt1, chassFaultClearAtt19=chassFaultClearAtt19, dMTFSystemBIOSState=dMTFSystemBIOSState, partitionIDAtt5=partitionIDAtt5, pwrSupplyParentIndexAtt1=pwrSupplyParentIndexAtt1, dMATransferWidthAtt2=dMATransferWidthAtt2, fansReadingAtt5=fansReadingAtt5, dataWidthAtt8=dataWidthAtt8, systemNameAtt1=systemNameAtt1, dmiDynOid386845712=dmiDynOid386845712, fRUGroupIndexAtt7_1=fRUGroupIndexAtt7_1, supportedProtocolsAtt5=supportedProtocolsAtt5, dMTFVoltageProbeEntry=dMTFVoltageProbeEntry, firmwareIndexAtt2=firmwareIndexAtt2, dMTFCoolingDeviceEvSub=dMTFCoolingDeviceEvSub, tempMinFailAtt8=tempMinFailAtt8, chassAmpProbesAtt10=chassAmpProbesAtt10, systemBootupTimeAtt5=systemBootupTimeAtt5, memoryArrayMappedAddressesTableIndexAtt1=memoryArrayMappedAddressesTableIndexAtt1, dellFanSensorEvSol=dellFanSensorEvSol, chassIdentifyAtt16=chassIdentifyAtt16, systemCacheErrorCorrectionAtt6=systemCacheErrorCorrectionAtt6, temperatureProbeLocationAtt2=temperatureProbeLocationAtt2, monitoredVoltageNominalLevelAtt6=monitoredVoltageNominalLevelAtt6, dMTFPhysicalContainerGlobalTableEntry=dMTFPhysicalContainerGlobalTableEntry, dellTemperatureProbeTable=dellTemperatureProbeTable, dellMemoryPrefailureEntry=dellMemoryPrefailureEntry, slotIndexAtt1=slotIndexAtt1, dMTFPhysicalContainerGlobalTableTable=dMTFPhysicalContainerGlobalTableTable, chassFanControlAtt17=chassFanControlAtt17, monitoredTemperatureNominalReadingAtt6=monitoredTemperatureNominalReadingAtt6, systemClassAtt2=systemClassAtt2, bIOSVersionAtt3=bIOSVersionAtt3, range1VoltageProbeIndexAtt9=range1VoltageProbeIndexAtt9, bIOSIndexAtt1=bIOSIndexAtt1, level2CacheIndexAtt11=level2CacheIndexAtt11, systemPrimaryUserNameAtt3=systemPrimaryUserNameAtt3, dellGlobalPowerUnitEvSys=dellGlobalPowerUnitEvSys, range2CurrentProbeIndexAtt14=range2CurrentProbeIndexAtt14, temperatureReadingUpperThresholdCriticalAtt14=temperatureReadingUpperThresholdCriticalAtt14, dMTFComponentIDEntry=dMTFComponentIDEntry, dMTFCoolingDeviceEvt1=dMTFCoolingDeviceEvt1, dMTFCoolingDeviceState=dMTFCoolingDeviceState, processorFamilyAtt3=processorFamilyAtt3, dMTFPhysicalContainerGlobalTableEvSub=dMTFPhysicalContainerGlobalTableEvSub, dellSystemResetEvSub=dellSystemResetEvSub, deviceLocatorAtt3=deviceLocatorAtt3, monitoredElectricalCurrentNormalMaximumAtt7=monitoredElectricalCurrentNormalMaximumAtt7, dellCurrentProbeEvSub=dellCurrentProbeEvSub, operatingSystemIndexAtt1=operatingSystemIndexAtt1, operationalGroupIndexAtt9_1=operationalGroupIndexAtt9_1, chassPsStatusAtt11=chassPsStatusAtt11, pwrUnitGlobalMaxWarnAtt3=pwrUnitGlobalMaxWarnAtt3, dMTFSystemResourceMemoryInfoEntry=dMTFSystemResourceMemoryInfoEntry, errorAddressAtt14=errorAddressAtt14, voltageProbeIndexAtt1=voltageProbeIndexAtt1, dMTFPhysicalContainerGlobalTableEvt4=dMTFPhysicalContainerGlobalTableEvt4, operationalGroupIndexAtt21=operationalGroupIndexAtt21, dellVoltageProbeState=dellVoltageProbeState, iNTELMIFTOMIBEntry=iNTELMIFTOMIBEntry, activeInputVoltageRangeAtt15=activeInputVoltageRangeAtt15, resourceAssignmentAtt4=resourceAssignmentAtt4, dMTFMemoryDeviceMappedAddressesEntry=dMTFMemoryDeviceMappedAddressesEntry, temperatureProbeMinimumAtt10=temperatureProbeMinimumAtt10, dMTFPowerUnitGlobalTableState=dMTFPowerUnitGlobalTableState, dellEsmLogEntry=dellEsmLogEntry, deviceErrorTypeAtt12=deviceErrorTypeAtt12, automaticSettingsAtt2=automaticSettingsAtt2, dMTFSystemResourceIOInfoState=dMTFSystemResourceIOInfoState, operationalGroupIndexAtt8_2=operationalGroupIndexAtt8_2, dMTFSystemSlotsTable=dMTFSystemSlotsTable, chassTempProbesAtt4=chassTempProbesAtt4, iRQUsedAtt3=iRQUsedAtt3, memoryArrayLocationAtt2=memoryArrayLocationAtt2, serialNumberAtt4=serialNumberAtt4, monitoredElectricalCurrentNormalMinimumAtt8=monitoredElectricalCurrentNormalMinimumAtt8, ampStatusAtt4=ampStatusAtt4, dellRedundantPowerSupplyEntry=dellRedundantPowerSupplyEntry, dMTFElectricalCurrentProbeEvSys=dMTFElectricalCurrentProbeEvSys, availabilityStatusAtt5=availabilityStatusAtt5, tempTypeAtt3=tempTypeAtt3)
