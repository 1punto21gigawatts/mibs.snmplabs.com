#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-SoftwareMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-SoftwareMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
Unsigned32, DisplayString, RowStatus, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Unsigned32", "DisplayString", "RowStatus", "StorageType")
AsciiStringIndex, Link, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "AsciiStringIndex", "Link", "AsciiString", "NonReplicated")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Gauge32, Bits, ObjectIdentity, Counter32, Integer32, Counter64, NotificationType, Unsigned32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits", "ObjectIdentity", "Counter32", "Integer32", "Counter64", "NotificationType", "Unsigned32", "IpAddress", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
softwareMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17))
mscSw = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14))
mscSwRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 1), )
if mibBuilder.loadTexts: mscSwRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwRowStatusTable.setDescription('This entry controls the addition and deletion of mscSw components.')
mscSwRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"))
if mibBuilder.loadTexts: mscSwRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwRowStatusEntry.setDescription('A single entry in the table represents a single mscSw component.')
mscSwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSw components. These components cannot be added nor deleted.')
mscSwComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSwStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwStorageType.setDescription('This variable represents the storage type value for the mscSw tables.')
mscSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscSwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwIndex.setDescription('This variable represents the index for the mscSw tables.')
mscSwOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 11), )
if mibBuilder.loadTexts: mscSwOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwOperTable.setDescription('This group contain the operational attributes for the SW component.')
mscSwOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"))
if mibBuilder.loadTexts: mscSwOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwOperEntry.setDescription('An entry in the mscSwOperTable.')
mscSwTidyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("inProgress", 1), ("querying", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwTidyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwTidyStatus.setDescription('This attribute indicates the tidy or remove status. If the value is inactive, no tidy or remove is in progress. If the value is inProgress or querying, the tidy or remove process has begun and therefore no further Tidy Sw or Remove sw/<avName> command is allowed until status returns to inactive.')
mscSwAvBeingTidied = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 11, 1, 421), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvBeingTidied.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvBeingTidied.setDescription('This attribute indicates the name of the AV currently being tidied or removed. An empty string indicates there is no AV being tidied.')
mscSwAvlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 256), )
if mibBuilder.loadTexts: mscSwAvlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvlTable.setDescription("This attribute specifies, for each application, which version of its Features and the associated software will be loaded when any of its Features are selected in an LPT. A version of the 'base' application must be specified. All names specified by the user must actually be AV names. All AVs specified must be compatible with each other. No more than one version of a single application can be specified")
mscSwAvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 256, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvlValue"))
if mibBuilder.loadTexts: mscSwAvlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvlEntry.setDescription('An entry in the mscSwAvlTable.')
mscSwAvlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 256, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwAvlValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvlValue.setDescription('This variable represents both the value and the index for the mscSwAvlTable.')
mscSwAvlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 256, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscSwAvlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvlRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscSwAvlTable.')
mscSwAvListToTidyTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 422), )
if mibBuilder.loadTexts: mscSwAvListToTidyTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvListToTidyTable.setDescription('This attribute holds the list of names of AVs to be tidied or removed. As AVs are successfully cleaned, they are removed from this list and added to avListTidied.')
mscSwAvListToTidyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 422, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvListToTidyValue"))
if mibBuilder.loadTexts: mscSwAvListToTidyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvListToTidyEntry.setDescription('An entry in the mscSwAvListToTidyTable.')
mscSwAvListToTidyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 422, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvListToTidyValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvListToTidyValue.setDescription('This variable represents both the value and the index for the mscSwAvListToTidyTable.')
mscSwAvListTidiedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 423), )
if mibBuilder.loadTexts: mscSwAvListTidiedTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvListTidiedTable.setDescription('This attribute holds the list of names of AVs which have been successfully tidied or removed as a result of the last Tidy Sw or Remove Sw av/<avName> command. It is cleared each time a new Tidy Sw or Remove Sw av/<avName> command is issued.')
mscSwAvListTidiedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 423, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvListTidiedValue"))
if mibBuilder.loadTexts: mscSwAvListTidiedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvListTidiedEntry.setDescription('An entry in the mscSwAvListTidiedTable.')
mscSwAvListTidiedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 423, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvListTidiedValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvListTidiedValue.setDescription('This variable represents both the value and the index for the mscSwAvListTidiedTable.')
mscSwPatlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 436), )
if mibBuilder.loadTexts: mscSwPatlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwPatlTable.setDescription("This attribute specifies which patches are to be loaded and enabled. Only patches for Av's that appear in the AvList may be specified. Only patches appearing as instances of Sw Av Patch may be specified. Patch names are case insensitive. Except for case, patch names must be typed as they appear as instances of Sw Av Patch. All patches specified must be compatible with one another. Any prerequisite patches for specified patches, must themselves be specified. A patch must be specified only once in the list.")
mscSwPatlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 436, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwPatlValue"))
if mibBuilder.loadTexts: mscSwPatlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwPatlEntry.setDescription('An entry in the mscSwPatlTable.')
mscSwPatlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 436, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwPatlValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwPatlValue.setDescription('This variable represents both the value and the index for the mscSwPatlTable.')
mscSwPatlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 436, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscSwPatlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwPatlRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscSwPatlTable.')
mscSwDld = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2))
mscSwDldRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 1), )
if mibBuilder.loadTexts: mscSwDldRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldRowStatusTable.setDescription('This entry controls the addition and deletion of mscSwDld components.')
mscSwDldRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwDldIndex"))
if mibBuilder.loadTexts: mscSwDldRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldRowStatusEntry.setDescription('A single entry in the table represents a single mscSwDld component.')
mscSwDldRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwDldRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSwDld components. These components cannot be added nor deleted.')
mscSwDldComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwDldComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSwDldStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwDldStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldStorageType.setDescription('This variable represents the storage type value for the mscSwDld tables.')
mscSwDldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscSwDldIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldIndex.setDescription('This variable represents the index for the mscSwDld tables.')
mscSwDldOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 10), )
if mibBuilder.loadTexts: mscSwDldOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldOperTable.setDescription('This group contains the operational attributes for the Download component.')
mscSwDldOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwDldIndex"))
if mibBuilder.loadTexts: mscSwDldOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldOperEntry.setDescription('An entry in the mscSwDldOperTable.')
mscSwDldAvBeingDownloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwDldAvBeingDownloaded.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldAvBeingDownloaded.setDescription("This attribute indicates the name of the AV currently being downloaded. If the download is inProgress, this attribute will indicate the same as the first AV in the list of AV's to be downloaded. If there is no AV being downloaded, this attribute will indicate an empty string.")
mscSwDldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("inProgress", 1), ("stopping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwDldStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldStatus.setDescription('This attribute indicates the download status. If the value is inactive, no download is in progress. This is the value required in order to issue a Start command. If the value is inProgress, the download procedure has begun. This process starts from the time a Software Distribution Site (SDS) login is attempted and continues through the time during which files are actually being transferred. If the value is stopping, a user has requested a stoppage but the connections have not yet been completely torn down.')
mscSwDldFilesToTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwDldFilesToTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldFilesToTransfer.setDescription('This attribute indicates the number of files which are still left to transfer for the AV currently being downloaded. It is cleared each time a new AV is processed from the avListToDownload. Note that for each AV, the value of this attribute will be 0 until the actual number of files to transfer has been computed.')
mscSwDldProcessorTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwDldProcessorTargets.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldProcessorTargets.setDescription('This attribute indicated the processor based object file to download on switch. Description of bits: i960(0) ppc(1)')
mscSwDldDldListTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 260), )
if mibBuilder.loadTexts: mscSwDldDldListTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldDldListTable.setDescription('This attribute holds the list of names of AVs to be downloaded. If a download is in progress, the first one in the list is the one currently being downloaded. As AVs are successfully downloaded, they are removed from this list and added to the downloadedAvList. The user cannot specify an AV which already exists on disk. It must first be removed before re-downloading it (see the Tidy and Remove commands).')
mscSwDldDldListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 260, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwDldIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwDldDldListValue"))
if mibBuilder.loadTexts: mscSwDldDldListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldDldListEntry.setDescription('An entry in the mscSwDldDldListTable.')
mscSwDldDldListValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 260, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwDldDldListValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldDldListValue.setDescription('This variable represents both the value and the index for the mscSwDldDldListTable.')
mscSwDldDldListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 260, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscSwDldDldListRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldDldListRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscSwDldDldListTable.')
mscSwDldDownloadedAvListTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 261), )
if mibBuilder.loadTexts: mscSwDldDownloadedAvListTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldDownloadedAvListTable.setDescription('This attribute holds the list of names of AVs which have been successfully downloaded as a result of the last Start command. It is cleared each time the Start command is issued.')
mscSwDldDownloadedAvListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 261, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwDldIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwDldDownloadedAvListValue"))
if mibBuilder.loadTexts: mscSwDldDownloadedAvListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldDownloadedAvListEntry.setDescription('An entry in the mscSwDldDownloadedAvListTable.')
mscSwDldDownloadedAvListValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 2, 261, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwDldDownloadedAvListValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwDldDownloadedAvListValue.setDescription('This variable represents both the value and the index for the mscSwDldDownloadedAvListTable.')
mscSwAv = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3))
mscSwAvRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 1), )
if mibBuilder.loadTexts: mscSwAvRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscSwAv components.')
mscSwAvRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvIndex"))
if mibBuilder.loadTexts: mscSwAvRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvRowStatusEntry.setDescription('A single entry in the table represents a single mscSwAv component.')
mscSwAvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSwAv components. These components cannot be added nor deleted.')
mscSwAvComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSwAvStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvStorageType.setDescription('This variable represents the storage type value for the mscSwAv tables.')
mscSwAvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: mscSwAvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvIndex.setDescription('This variable represents the index for the mscSwAv tables.')
mscSwAvOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 10), )
if mibBuilder.loadTexts: mscSwAvOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational attributes for an AV component.')
mscSwAvOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvIndex"))
if mibBuilder.loadTexts: mscSwAvOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvOperEntry.setDescription('An entry in the mscSwAvOperTable.')
mscSwAvProcessorTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvProcessorTargets.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvProcessorTargets.setDescription('This is a list of the processor based object file types which exist on disk for a given AV. Semantic check will validate that the object files needed for a provisioned card type are present as part of an application. Description of bits: i960(0) ppc(1)')
mscSwAvCompatibleAvListTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 259), )
if mibBuilder.loadTexts: mscSwAvCompatibleAvListTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvCompatibleAvListTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is a list of the AV names which specify the minimum version of all other applications that can be used in conjunction with this AV in an AVL. Semantic checks will validate that AVs within the AVL are indeed compatible.')
mscSwAvCompatibleAvListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 259, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvCompatibleAvListValue"))
if mibBuilder.loadTexts: mscSwAvCompatibleAvListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvCompatibleAvListEntry.setDescription('An entry in the mscSwAvCompatibleAvListTable.')
mscSwAvCompatibleAvListValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 259, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvCompatibleAvListValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvCompatibleAvListValue.setDescription('This variable represents both the value and the index for the mscSwAvCompatibleAvListTable.')
mscSwAvFeat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 2))
mscSwAvFeatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 2, 1), )
if mibBuilder.loadTexts: mscSwAvFeatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvFeatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscSwAvFeat components.')
mscSwAvFeatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvFeatIndex"))
if mibBuilder.loadTexts: mscSwAvFeatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvFeatRowStatusEntry.setDescription('A single entry in the table represents a single mscSwAvFeat component.')
mscSwAvFeatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvFeatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvFeatRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSwAvFeat components. These components cannot be added nor deleted.')
mscSwAvFeatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvFeatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvFeatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSwAvFeatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvFeatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvFeatStorageType.setDescription('This variable represents the storage type value for the mscSwAvFeat tables.')
mscSwAvFeatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 25)))
if mibBuilder.loadTexts: mscSwAvFeatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvFeatIndex.setDescription('This variable represents the index for the mscSwAvFeat tables.')
mscSwAvPatch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3))
mscSwAvPatchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 1), )
if mibBuilder.loadTexts: mscSwAvPatchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscSwAvPatch components.')
mscSwAvPatchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvPatchIndex"))
if mibBuilder.loadTexts: mscSwAvPatchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchRowStatusEntry.setDescription('A single entry in the table represents a single mscSwAvPatch component.')
mscSwAvPatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvPatchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSwAvPatch components. These components cannot be added nor deleted.')
mscSwAvPatchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvPatchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSwAvPatchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvPatchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchStorageType.setDescription('This variable represents the storage type value for the mscSwAvPatch tables.')
mscSwAvPatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: mscSwAvPatchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchIndex.setDescription('This variable represents the index for the mscSwAvPatch tables.')
mscSwAvPatchOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 10), )
if mibBuilder.loadTexts: mscSwAvPatchOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational attributes for the Patch component.')
mscSwAvPatchOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwAvPatchIndex"))
if mibBuilder.loadTexts: mscSwAvPatchOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchOperEntry.setDescription('An entry in the mscSwAvPatchOperTable.')
mscSwAvPatchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 3, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwAvPatchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwAvPatchDescription.setDescription('This attribute indicates the new behavior that the patch provides. The availability of this description is dependent on the disk being available.')
mscSwLpt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4))
mscSwLptRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 1), )
if mibBuilder.loadTexts: mscSwLptRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptRowStatusTable.setDescription('This entry controls the addition and deletion of mscSwLpt components.')
mscSwLptRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwLptIndex"))
if mibBuilder.loadTexts: mscSwLptRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptRowStatusEntry.setDescription('A single entry in the table represents a single mscSwLpt component.')
mscSwLptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwLptRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSwLpt components. These components can be added and deleted.')
mscSwLptComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwLptComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSwLptStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwLptStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptStorageType.setDescription('This variable represents the storage type value for the mscSwLpt tables.')
mscSwLptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 25)))
if mibBuilder.loadTexts: mscSwLptIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptIndex.setDescription('This variable represents the index for the mscSwLpt tables.')
mscSwLptProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 10), )
if mibBuilder.loadTexts: mscSwLptProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptProvTable.setDescription('This group contains the provisionable attributes for the LPT component.')
mscSwLptProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwLptIndex"))
if mibBuilder.loadTexts: mscSwLptProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptProvEntry.setDescription('An entry in the mscSwLptProvTable.')
mscSwLptCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwLptCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptCommentText.setDescription('An arbitrary string used to enter a comment about an LPT.')
mscSwLptSystemConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("default", 0))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwLptSystemConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptSystemConfig.setDescription('This attribute specifies which set of preconfigured system parameters to use for the set of Features selected in featureList.')
mscSwLptFlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 257), )
if mibBuilder.loadTexts: mscSwLptFlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptFlTable.setDescription('This attribute specifies a list of names of Features that define a particular configuration of application functionality that the user wants to load on a single processor. The combination of Features selected must be compatible (for example, none can be mutually exclusive with another in the list). All Features must belong to an AV specified in the AVL. All Features must be able to be loaded on any of the Cards which are linked to LPs which are linked to this LPT. All prerequisite Features of the ones in this list will also be loaded.')
mscSwLptFlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 257, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwLptIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwLptFlValue"))
if mibBuilder.loadTexts: mscSwLptFlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptFlEntry.setDescription('An entry in the mscSwLptFlTable.')
mscSwLptFlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 257, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSwLptFlValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptFlValue.setDescription('This variable represents both the value and the index for the mscSwLptFlTable.')
mscSwLptFlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 257, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscSwLptFlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptFlRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscSwLptFlTable.')
mscSwLptLogicalProcessorsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 258), )
if mibBuilder.loadTexts: mscSwLptLogicalProcessorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptLogicalProcessorsTable.setDescription("This attribute shows which LPs are configured to load the Feature files associated with this LPT. It is the opposite side of the LP component's logicalProcessorType link attribute.")
mscSwLptLogicalProcessorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 258, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwLptIndex"), (0, "Nortel-MsCarrier-MscPassport-SoftwareMIB", "mscSwLptLogicalProcessorsValue"))
if mibBuilder.loadTexts: mscSwLptLogicalProcessorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptLogicalProcessorsEntry.setDescription('An entry in the mscSwLptLogicalProcessorsTable.')
mscSwLptLogicalProcessorsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 14, 4, 258, 1, 1), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSwLptLogicalProcessorsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscSwLptLogicalProcessorsValue.setDescription('This variable represents both the value and the index for the mscSwLptLogicalProcessorsTable.')
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 1))
softwareGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 1, 1))
softwareGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 1, 1, 3))
softwareGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 1, 1, 3, 2))
softwareCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 3))
softwareCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 3, 1))
softwareCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 3, 1, 3))
softwareCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 17, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-SoftwareMIB", mscSwDldDldListRowStatus=mscSwDldDldListRowStatus, softwareGroupCA=softwareGroupCA, mscSwLptStorageType=mscSwLptStorageType, mscSwDldRowStatus=mscSwDldRowStatus, mscSwAvOperEntry=mscSwAvOperEntry, mscSw=mscSw, mscSwRowStatusEntry=mscSwRowStatusEntry, mscSwAvCompatibleAvListEntry=mscSwAvCompatibleAvListEntry, mscSwDldDownloadedAvListEntry=mscSwDldDownloadedAvListEntry, mscSwDldOperEntry=mscSwDldOperEntry, mscSwAvComponentName=mscSwAvComponentName, mscSwAvPatchRowStatusTable=mscSwAvPatchRowStatusTable, mscSwLptFlValue=mscSwLptFlValue, softwareCapabilitiesCA02=softwareCapabilitiesCA02, softwareGroupCA02A=softwareGroupCA02A, mscSwLptProvTable=mscSwLptProvTable, mscSwDldProcessorTargets=mscSwDldProcessorTargets, mscSwAvBeingTidied=mscSwAvBeingTidied, mscSwAvPatch=mscSwAvPatch, softwareCapabilitiesCA02A=softwareCapabilitiesCA02A, mscSwOperTable=mscSwOperTable, mscSwAvOperTable=mscSwAvOperTable, mscSwDldRowStatusTable=mscSwDldRowStatusTable, mscSwAvCompatibleAvListTable=mscSwAvCompatibleAvListTable, mscSwAvListTidiedEntry=mscSwAvListTidiedEntry, mscSwAvPatchIndex=mscSwAvPatchIndex, mscSwDldDldListTable=mscSwDldDldListTable, mscSwIndex=mscSwIndex, softwareMIB=softwareMIB, mscSwDldDownloadedAvListTable=mscSwDldDownloadedAvListTable, mscSwAvFeatComponentName=mscSwAvFeatComponentName, mscSwDldAvBeingDownloaded=mscSwDldAvBeingDownloaded, mscSwLptFlRowStatus=mscSwLptFlRowStatus, mscSwLptFlEntry=mscSwLptFlEntry, mscSwLptComponentName=mscSwLptComponentName, mscSwStorageType=mscSwStorageType, mscSwPatlEntry=mscSwPatlEntry, mscSwDldDldListEntry=mscSwDldDldListEntry, mscSwLptFlTable=mscSwLptFlTable, mscSwDldDldListValue=mscSwDldDldListValue, mscSwOperEntry=mscSwOperEntry, mscSwLptIndex=mscSwLptIndex, mscSwAvCompatibleAvListValue=mscSwAvCompatibleAvListValue, mscSwAvlTable=mscSwAvlTable, mscSwAvFeatRowStatusEntry=mscSwAvFeatRowStatusEntry, mscSwRowStatus=mscSwRowStatus, mscSwAvPatchDescription=mscSwAvPatchDescription, mscSwDldDownloadedAvListValue=mscSwDldDownloadedAvListValue, mscSwLptProvEntry=mscSwLptProvEntry, mscSwDldComponentName=mscSwDldComponentName, mscSwDldOperTable=mscSwDldOperTable, mscSwAvProcessorTargets=mscSwAvProcessorTargets, mscSwDldStatus=mscSwDldStatus, mscSwPatlTable=mscSwPatlTable, mscSwDldRowStatusEntry=mscSwDldRowStatusEntry, softwareGroup=softwareGroup, mscSwLptRowStatusEntry=mscSwLptRowStatusEntry, mscSwAvFeatRowStatusTable=mscSwAvFeatRowStatusTable, mscSwLptRowStatusTable=mscSwLptRowStatusTable, mscSwPatlValue=mscSwPatlValue, mscSwAvlValue=mscSwAvlValue, mscSwAvListToTidyValue=mscSwAvListToTidyValue, mscSwAvPatchStorageType=mscSwAvPatchStorageType, mscSwAvPatchRowStatusEntry=mscSwAvPatchRowStatusEntry, mscSwPatlRowStatus=mscSwPatlRowStatus, mscSwAvFeatRowStatus=mscSwAvFeatRowStatus, mscSwAvRowStatusTable=mscSwAvRowStatusTable, mscSwAvPatchOperEntry=mscSwAvPatchOperEntry, mscSwAvFeatIndex=mscSwAvFeatIndex, mscSwLptRowStatus=mscSwLptRowStatus, mscSwAvListToTidyEntry=mscSwAvListToTidyEntry, mscSwAv=mscSwAv, mscSwAvFeat=mscSwAvFeat, mscSwAvStorageType=mscSwAvStorageType, mscSwAvPatchComponentName=mscSwAvPatchComponentName, mscSwAvlEntry=mscSwAvlEntry, mscSwAvlRowStatus=mscSwAvlRowStatus, mscSwDld=mscSwDld, mscSwDldFilesToTransfer=mscSwDldFilesToTransfer, mscSwAvRowStatus=mscSwAvRowStatus, mscSwDldStorageType=mscSwDldStorageType, mscSwAvListTidiedValue=mscSwAvListTidiedValue, mscSwAvIndex=mscSwAvIndex, mscSwLpt=mscSwLpt, mscSwAvPatchOperTable=mscSwAvPatchOperTable, mscSwLptLogicalProcessorsEntry=mscSwLptLogicalProcessorsEntry, softwareGroupCA02=softwareGroupCA02, mscSwAvListToTidyTable=mscSwAvListToTidyTable, mscSwTidyStatus=mscSwTidyStatus, mscSwRowStatusTable=mscSwRowStatusTable, mscSwAvListTidiedTable=mscSwAvListTidiedTable, mscSwAvRowStatusEntry=mscSwAvRowStatusEntry, mscSwDldIndex=mscSwDldIndex, mscSwLptLogicalProcessorsValue=mscSwLptLogicalProcessorsValue, mscSwLptLogicalProcessorsTable=mscSwLptLogicalProcessorsTable, softwareCapabilitiesCA=softwareCapabilitiesCA, mscSwComponentName=mscSwComponentName, mscSwLptCommentText=mscSwLptCommentText, softwareCapabilities=softwareCapabilities, mscSwAvPatchRowStatus=mscSwAvPatchRowStatus, mscSwAvFeatStorageType=mscSwAvFeatStorageType, mscSwLptSystemConfig=mscSwLptSystemConfig)
