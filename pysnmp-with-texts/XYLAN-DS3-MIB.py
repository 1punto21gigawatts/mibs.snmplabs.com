#
# PySNMP MIB module XYLAN-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-DS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, IpAddress, TimeTicks, Integer32, NotificationType, ObjectIdentity, Bits, iso, MibIdentifier, Counter32, ModuleIdentity, transmission, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "IpAddress", "TimeTicks", "Integer32", "NotificationType", "ObjectIdentity", "Bits", "iso", "MibIdentifier", "Counter32", "ModuleIdentity", "transmission", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanPportArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanPportArch")
dsx3Port = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 11, 2))
dsx3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1), )
if mibBuilder.loadTexts: dsx3PortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigTable.setDescription('A table of DS3/E3 physical layer status and parameter information.')
dsx3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1), ).setIndexNames((0, "XYLAN-DS3-MIB", "dsx3PortConfigSlotIndex"), (0, "XYLAN-DS3-MIB", "dsx3PortConfigPortIndex"))
if mibBuilder.loadTexts: dsx3PortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigEntry.setDescription('An entry in the table, containing information about the physical layer of a DS3/E3 interface.')
dsx3PortConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
dsx3PortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigPortIndex.setDescription('A unique value which identifies this port.')
dsx3PortConfigIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigIfType.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigIfType.setDescription('This objects indicates type of interface.')
dsx3PortConfigTcSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plcp", 2), ("adm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigTcSubLayer.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigTcSubLayer.setDescription('The type of specific Transmission Convergence sublayer used on this port. Each option is described as follows: none - specific sublayer is not present. plcp - Physical Layer Convergence Protocol. adm - ATM Direct Mapping.')
dsx3PortConfigPlcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigPlcpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigPlcpStatus.setDescription('This object indicates current status of PLCP. This object only applies to port which sublayer is configured to PLCP. A value of 1 is returned for other cases. The dsx3PortStatsPlcpStatus is a bit map represented as a sum, therfore it can represent multiple alarms. 1 - plcpNoAlarm No alarm present 2 - plcpOof Out of frame 4 - plcpLof Loss of frame 8 - plcpYellow Receive yellow alarm from far-end')
dsx3PortConfigFEAC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("dsx3NoFEAC", 1), ("dsx3DS3EquipmentFailure", 2), ("dsx3DS3LOS", 3), ("dsx3DS3OutofFrame", 4), ("dsx3DS3AISreceived", 5), ("dsx3DS3IDLEreceived", 6), ("dsx3DS3NonServiceAffectingEquipFailure", 7), ("dsx3CommonEquipmentFailure", 8), ("dsx3DS3LoopbackReceived", 9), ("dsx3DS1ServiceAffectingEquipmentFailure", 10), ("dsx3DS1NonServiceAffectingEquipFailure", 11), ("dsx3SingleDS1LOS", 12), ("dsx3MultipleDS1sLOS", 13), ("dsx3UnknownCode", 14), ("dsx3UnsupportedCode", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigFEAC.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigFEAC.setDescription('This object indicates the presence FEAC being received by this port. This object only applies to DS3 interface with framing format configured to C-bit parity. A value of dsx3NoFEAC(1) is returned for other cases.')
dsx3PortConfigNatUse = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("zero", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigNatUse.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigNatUse.setDescription('The object indicates current state of National Use Bit which is bit 12 of G.751 frame. This object only applies to E3 port which line framimg is configured to G.751. A value of one(1) is returned for other sublayers or DS3 port.')
dsx3PortConfigRxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown-or-not-applicable", 1), ("unequipped", 2), ("atm", 3), ("equipped-non-specific", 4), ("sdh-tu-12s", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigRxPayloadType.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigRxPayloadType.setDescription('The object indicates current state of payload type bits (bit 3,4,5 of Maintenance and Adaptation byte) of an E3 G.832 frame. This objects only applies to E3 port which framing is configured to G.832. A value of 1 is returned for all other cases.')
dsx3PortConfigTimeMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("zero", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigTimeMarker.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigTimeMarker.setDescription('The object indicates current state of Timing Marker bit (bit 8 of Maintenanc and Adaptation byte) of an E3 G.832 frame. This objects only applies to E3 port which framing is configured to G.832. A value of one(1) is returned for other cases.')
dsx3PortConfigTxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unequipped", 1), ("atm", 2), ("equipped-non-specific", 3), ("sdh-tu-12s", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigTxPayloadType.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigTxPayloadType.setDescription('The object reflects the value to be inserted in the payload type bits (bit 3,4,5 of Maintenance and Adaptation byte) of an E3 G.832 frame. This objects only applies to E3 port whose framing is configured as G.832. Additionally if this object is not applicable, i.e. not E3 G.832, writing to this object will be silently ignored.')
dsx3PortConfigExpectedPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unequipped", 1), ("atm", 2), ("equipped-non-specific", 3), ("sdh-tu-12s", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigExpectedPayloadType.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigExpectedPayloadType.setDescription('The object indicates the current expected payload type bits (bit 3,4,5 of Maintenance and Adaptation byte) of an E3 G.832 frame. This objects only applies to E3 port whose framing is configured as G.832. Additionally if this object is not applicable, i.e. not E3 G.832, writing to this object will be silently ignored.')
dsx3PortConfigTxTrailTraceID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigTxTrailTraceID.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigTxTrailTraceID.setDescription('The object indicates the characters to be inserted as Trail Trace Identifier of an E3 G.832 frame. This object only applies to E3 port whose framing is configured as G.832. A binary 0 in the first octet indicates all zeros insertion, or this port is not configured as E3 G.832 framing. Additionally if this object is not applicable, i.e. not E3 G.832, writing to this object will be silently ignored.')
dsx3PortConfigRxTrailTraceID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigRxTrailTraceID.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigRxTrailTraceID.setDescription('The object indicates the current characters received as Trail Trace Identifier of an E3 G.832 frame. This object only applies to E3 port whose framing is configured as G.832. A binary 0 in the first octet indicates all zeros insertion received or this port is not configured as E3 G.832 framing.')
dsx3PortConfigExpectedTrailTraceID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigExpectedTrailTraceID.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigExpectedTrailTraceID.setDescription('The object indicates the expected characters received as Trail Trace Identifier of an E3 G.832 frame. This object only applies to E3 port whose framing is configured as G.832. A binary 0 in the first octet indicates all zeros insertion, or this port is not configured as E3 G.832 framing. Additionally if this object is not applicable, i.e. not E3 G.832, writing to this object will be silently ignored.')
dsx3PortConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2097151))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigLineStatus.setDescription('This object indicates the line status of a ds3/e3 interface. Each bit position (bit-0 to bit-18) represents one failure condition of the interface. Bit-19 and bit-20 are used to represent Timing Marker bit and National Use bit. Note that the SYNTAX type of Counter instead of INTEGER is used here as there are more than 16 different conditions to represent. The followings define the various bit position and their meanings: Bit Description 0: No alarm present 1: Out of Frame Alarm received 2: Loss Of Signal Alarm received 3: Alarm Indication Signal Alarm received 4: Red Alarm received 5: Far End Receive Failure Alarm received (Non E3 G.751 only) Remote Alarm Indication Alarm received (E3 G.751 only) 6: Change Of Frame Alignment Alarm received 7: PLCP Out Of Frame Alarm received 8: PLCP Yellow Alarm received 9: PLCP Framing Bit Error Alarm received 10: PLCP Bit Interleaved Parity Error Alarm received 11: PLCP Loss Of Frames Alarm received 12: PLCP Far End Block Error Alarm received 13: Cell Loss Alarm received 14: Far End Block Error Alarm received 15: Parity Error Alarm received 16: Trail Trace ID Mismatch Alarm received (E3 G.832 only) 17: Rx Payload Type Mismatch Alarm received (E3 G.832 only) 18: Unequipped Payload Type received (E3 G.832 only) 19: Timing Marker Bit (bit 8 of the E3 G.832 Maintenance and Adaptation bye) received. 20: National Use bit (bit 12 of the frame in a E3 G.751 frame) received.')
dsx3PortConfigPlScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigPlScramble.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortConfigPlScramble.setDescription('Payload Scrambling Enable.')
dsx3PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2), )
if mibBuilder.loadTexts: dsx3PortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsTable.setDescription('A table of DS3/E3 physical port statistics.')
dsx3PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1), ).setIndexNames((0, "XYLAN-DS3-MIB", "dsx3PortStatsSlotIndex"), (0, "XYLAN-DS3-MIB", "dsx3PortStatsPortIndex"))
if mibBuilder.loadTexts: dsx3PortStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsEntry.setDescription('An entry in the table, containing information about the physical port statistics of a DS3/E3 interface.')
dsx3PortStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
dsx3PortStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPortIndex.setDescription('A unique value which identifies this port.')
dsx3PortStatsLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsLossOfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsLossOfSignal.setDescription('Total number of Loss of Signals that have been detected on this port.')
dsx3PortStatsOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsOutOfFrame.setDescription('Total number of Out of Frames that have been detected on this port.')
dsx3PortStatsAISEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsAISEvent.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsAISEvent.setDescription('Total number of AIS events that have been detected on this port.')
dsx3PortStatsRedAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsRedAlarmEvent.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsRedAlarmEvent.setDescription('Total number of Red Alarm events that have been detected on this port. This object only applies to DS3 interface.')
dsx3PortStatsFarEndReceiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsFarEndReceiveError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsFarEndReceiveError.setDescription('Total number of Far-end Receive Error events that have been received on this port.')
dsx3PortStatsFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsFarEndBlkError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsFarEndBlkError.setDescription('Total number of Far-end Block Error events that have been received on this port.')
dsx3PortStatsLineCodeVioEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsLineCodeVioEvent.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsLineCodeVioEvent.setDescription('Total number of Line Code Violation events that have been received on this port. This is a count of both Bipolar Violation (BPV) and Excessive zeros (EXZs).')
dsx3PortStatsFramingBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsFramingBitError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsFramingBitError.setDescription('Total number of Framing Bit Error events that have been detected on this port.')
dsx3PortStatsChangeOfFrameAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsChangeOfFrameAlign.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsChangeOfFrameAlign.setDescription('Total number of Change of Frame Alignment events that have been detected on this port.')
dsx3PortStatsParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsParityBitError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsParityBitError.setDescription('Total number of parity bit errors that have been detected on this port.')
dsx3PortStatsPathParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPathParityBitError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPathParityBitError.setDescription('Total number of path parity bit errors that have been detected on this port.')
dsx3PortStatsPlcpLossOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpLossOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPlcpLossOfFrame.setDescription('Total number of PLCP loss of frame events that have been detected on this port. A value of zero is returned if port sublayer is not PLCP.')
dsx3PortStatsPlcpOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPlcpOutOfFrame.setDescription('Total number of PLCP out of frame events that have been detected on this port. A value of zero is returned if port sublayer is not PLCP.')
dsx3PortStatsPlcpYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPlcpYellowAlarm.setDescription('Total number of PLCP Yellow Alarms that have been detected on this port. A value of zero is returned if port sublayer is not PLCP.')
dsx3PortStatsPlcpFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpFarEndBlkError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPlcpFarEndBlkError.setDescription('Total number of PLCP Far-end Block Errors that have been detected on this port. A value of zero is returned if port sublayer is not PLCP.')
dsx3PortStatsPlcpFramingError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpFramingError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPlcpFramingError.setDescription('Total number of PLCP Framing Octet Errors that have been detected on this port. A value of zero is returned if port sublayer is not PLCP.')
dsx3PortStatsPlcpBIPError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpBIPError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPlcpBIPError.setDescription('Total number of PLCP Bit Interleaved Parity Errors that have been detected on this port. A value of zero is returned if port sublayer is not PLCP.')
dsx3PortStatsPayloadTypeMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPayloadTypeMismatchError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsPayloadTypeMismatchError.setDescription('Total number of payload type mismatch failure that have been detected on this port. This object is applicable to E3 G.832 only. A value of zero is returned if the port is not configured as E3 and G.832.')
dsx3PortStatsUnequippedError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsUnequippedError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsUnequippedError.setDescription('Total number of unequipped failure that have been detected on this port. This object is applicable to E3 G.832 only. A value of zero is returned if the port is not configured as E3 and G.832.')
dsx3PortStatsTrailTraceIDMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsTrailTraceIDMismatchError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortStatsTrailTraceIDMismatchError.setDescription('Total number of trail trace identification mismatch failure that have been detected on this port. This object is applicable to E3 G.832 only. A value of zero is returned if the port is not configured as E3 and G.832.')
dsx3PortIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3), )
if mibBuilder.loadTexts: dsx3PortIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalTable.setDescription('A table of DS3/E3 physical port statistics.')
dsx3PortIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1), ).setIndexNames((0, "XYLAN-DS3-MIB", "dsx3PortIntervalSlotIndex"), (0, "XYLAN-DS3-MIB", "dsx3PortIntervalPortIndex"))
if mibBuilder.loadTexts: dsx3PortIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalEntry.setDescription('An entry in the table, containing information about the physical port statistics of a DS3/E3 interface.')
dsx3PortIntervalSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
dsx3PortIntervalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPortIndex.setDescription('A unique value which identifies this port.')
dsx3PortIntervalClear = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearRequest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortIntervalClear.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalClear.setDescription('This object allows clearing all interval statistics of this port to value of zero. Setting this object to clearRequest will initiate managed entity to clear the statistics of this table.')
dsx3PortIntervalLastClear = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalLastClear.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalLastClear.setDescription("The value of MIB II's sysUpTime object at the time this table statistics is cleared.")
dsx3PortIntervalLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalLossOfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalLossOfSignal.setDescription("Total number of Loss of Signals that have been detected on this port since it's cleared by the managing station.")
dsx3PortIntervalOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalOutOfFrame.setDescription("Total number of Out of Frames that have been detected on this port since it's cleared by the managing station.")
dsx3PortIntervalAISEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalAISEvent.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalAISEvent.setDescription("Total number of AIS events that have been detected on this port since it's cleared by the managing station.")
dsx3PortIntervalRedAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalRedAlarmEvent.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalRedAlarmEvent.setDescription("Total number of Red Alarm events that have been detected on this port since it's cleared by the managing station. This object only applies to DS3 interface.")
dsx3PortIntervalFarEndReceiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalFarEndReceiveError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalFarEndReceiveError.setDescription("Total number of far-end receive error events that have been received on this port since it's cleared by the managing station.")
dsx3PortIntervalFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalFarEndBlkError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalFarEndBlkError.setDescription("Total number of far-end block error events that have been received on this port since it's cleared by the managing station.")
dsx3PortIntervalLineCodeVioEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalLineCodeVioEvent.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalLineCodeVioEvent.setDescription("Total number of line code violation events that have been received on this port. This is a count of both Bipolar Violation (BPV) and Excessive zeros (EXZs) since it's cleared by the managing station.")
dsx3PortIntervalFramingBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalFramingBitError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalFramingBitError.setDescription("Total number of Framing Bit Error events that have been detected on this port since it's cleared by the managing station.")
dsx3PortIntervalChangeOfFrameAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalChangeOfFrameAlign.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalChangeOfFrameAlign.setDescription("Total number of change of frame alignment events that have been detected on this port since it's cleared by the managing station.")
dsx3PortIntervalParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalParityBitError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalParityBitError.setDescription("Total number of parity bit errors that have been detected on this port since it's cleared by the managing station.")
dsx3PortIntervalPathParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPathParityBitError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPathParityBitError.setDescription("Total number of path parity bit errors that have been detected on this port since it's cleared by the managing station.")
dsx3PortIntervalPlcpLossOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpLossOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPlcpLossOfFrame.setDescription("Total number of PLCP loss of frame events that have been detected on this port since it's cleared by the managing station. A value of zero is returned if port sublayer is not PLCP. ")
dsx3PortIntervalPlcpOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPlcpOutOfFrame.setDescription("Total number of PLCP out of frame events that have been detected on this port since it's cleared by the managing station. A value of zero is returned if port sublayer is not PLCP. ")
dsx3PortIntervalPlcpYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPlcpYellowAlarm.setDescription("Total number of PLCP Yellow Alarms that have been detected detected on this port since it's cleared by the managing station. A value of zero is returned if port sublayer is not PLCP. ")
dsx3PortIntervalPlcpFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpFarEndBlkError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPlcpFarEndBlkError.setDescription("Total number of PLCP Far-end Block Errors that have been detected on this port since it's cleared by the managing station. A value of zero is returned if port sublayer is not PLCP. ")
dsx3PortIntervalPlcpFramingError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpFramingError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPlcpFramingError.setDescription("Total number of PLCP Framing Octet Errors that have been detected on this port since it's cleared by the managing station. A value of zero is returned if port sublayer is not PLCP. ")
dsx3PortIntervalPlcpBIPError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpBIPError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPlcpBIPError.setDescription("Total number of PLCP Bit Interleaved Parity Errors that have detected on this port since it's cleared by the managing station. A value of zero is returned if port sublayer is not PLCP. ")
dsx3PortIntervalPayloadTypeMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPayloadTypeMismatchError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalPayloadTypeMismatchError.setDescription("Total number of payload type mismatch failure that have been detected on this port since it's cleared by the managing station. This object is applicable to E3 G.832 only. A value of zero is returned if the port is not configured as E3 and G.832.")
dsx3PortIntervalUnequippedError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalUnequippedError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalUnequippedError.setDescription("Total number of unequipped failure that have been detected on this port sinece it's cleared by the managing station. This object is applicable to E3 G.832 only. A value of zero is returned if the port is not configured as E3 and G.832.")
dsx3PortIntervalTrailTraceIDMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalTrailTraceIDMismatchError.setStatus('mandatory')
if mibBuilder.loadTexts: dsx3PortIntervalTrailTraceIDMismatchError.setDescription("Total number of trail trace identification mismatch failure that have been detected on this port since it's cleared by the managing station. This object is applicable to E3 G.832 only. A value of zero is returned if the port is not configured as E3 and G.832.")
mibBuilder.exportSymbols("XYLAN-DS3-MIB", dsx3PortIntervalPlcpFarEndBlkError=dsx3PortIntervalPlcpFarEndBlkError, dsx3PortConfigTimeMarker=dsx3PortConfigTimeMarker, dsx3PortIntervalFarEndBlkError=dsx3PortIntervalFarEndBlkError, dsx3PortStatsPayloadTypeMismatchError=dsx3PortStatsPayloadTypeMismatchError, dsx3PortIntervalParityBitError=dsx3PortIntervalParityBitError, dsx3PortStatsLossOfSignal=dsx3PortStatsLossOfSignal, dsx3PortStatsPlcpYellowAlarm=dsx3PortStatsPlcpYellowAlarm, dsx3PortIntervalPortIndex=dsx3PortIntervalPortIndex, dsx3PortIntervalLossOfSignal=dsx3PortIntervalLossOfSignal, dsx3PortConfigPortIndex=dsx3PortConfigPortIndex, dsx3PortConfigPlcpStatus=dsx3PortConfigPlcpStatus, dsx3PortStatsSlotIndex=dsx3PortStatsSlotIndex, dsx3PortIntervalRedAlarmEvent=dsx3PortIntervalRedAlarmEvent, dsx3PortStatsRedAlarmEvent=dsx3PortStatsRedAlarmEvent, dsx3PortStatsFramingBitError=dsx3PortStatsFramingBitError, dsx3PortIntervalTable=dsx3PortIntervalTable, dsx3PortIntervalOutOfFrame=dsx3PortIntervalOutOfFrame, dsx3PortIntervalPlcpOutOfFrame=dsx3PortIntervalPlcpOutOfFrame, dsx3PortStatsFarEndReceiveError=dsx3PortStatsFarEndReceiveError, dsx3PortStatsPlcpLossOfFrame=dsx3PortStatsPlcpLossOfFrame, dsx3PortStatsTrailTraceIDMismatchError=dsx3PortStatsTrailTraceIDMismatchError, dsx3PortConfigNatUse=dsx3PortConfigNatUse, dsx3Port=dsx3Port, dsx3PortIntervalChangeOfFrameAlign=dsx3PortIntervalChangeOfFrameAlign, dsx3PortConfigIfType=dsx3PortConfigIfType, dsx3PortIntervalPlcpYellowAlarm=dsx3PortIntervalPlcpYellowAlarm, dsx3PortStatsPlcpFramingError=dsx3PortStatsPlcpFramingError, dsx3PortStatsOutOfFrame=dsx3PortStatsOutOfFrame, dsx3PortIntervalFramingBitError=dsx3PortIntervalFramingBitError, dsx3PortConfigTable=dsx3PortConfigTable, dsx3PortConfigTcSubLayer=dsx3PortConfigTcSubLayer, dsx3PortConfigEntry=dsx3PortConfigEntry, dsx3PortConfigRxTrailTraceID=dsx3PortConfigRxTrailTraceID, dsx3PortConfigFEAC=dsx3PortConfigFEAC, dsx3PortStatsEntry=dsx3PortStatsEntry, dsx3PortConfigSlotIndex=dsx3PortConfigSlotIndex, dsx3PortConfigTxTrailTraceID=dsx3PortConfigTxTrailTraceID, dsx3PortConfigPlScramble=dsx3PortConfigPlScramble, dsx3PortStatsAISEvent=dsx3PortStatsAISEvent, dsx3PortIntervalPayloadTypeMismatchError=dsx3PortIntervalPayloadTypeMismatchError, dsx3PortConfigRxPayloadType=dsx3PortConfigRxPayloadType, dsx3PortIntervalEntry=dsx3PortIntervalEntry, dsx3PortIntervalUnequippedError=dsx3PortIntervalUnequippedError, dsx3PortStatsParityBitError=dsx3PortStatsParityBitError, dsx3PortIntervalPlcpBIPError=dsx3PortIntervalPlcpBIPError, dsx3PortStatsPathParityBitError=dsx3PortStatsPathParityBitError, dsx3PortStatsPortIndex=dsx3PortStatsPortIndex, dsx3PortStatsUnequippedError=dsx3PortStatsUnequippedError, dsx3PortIntervalPathParityBitError=dsx3PortIntervalPathParityBitError, dsx3PortConfigExpectedTrailTraceID=dsx3PortConfigExpectedTrailTraceID, dsx3PortIntervalPlcpLossOfFrame=dsx3PortIntervalPlcpLossOfFrame, dsx3PortConfigTxPayloadType=dsx3PortConfigTxPayloadType, dsx3PortStatsTable=dsx3PortStatsTable, dsx3PortStatsPlcpOutOfFrame=dsx3PortStatsPlcpOutOfFrame, dsx3PortIntervalPlcpFramingError=dsx3PortIntervalPlcpFramingError, dsx3PortIntervalFarEndReceiveError=dsx3PortIntervalFarEndReceiveError, dsx3PortConfigExpectedPayloadType=dsx3PortConfigExpectedPayloadType, dsx3PortStatsFarEndBlkError=dsx3PortStatsFarEndBlkError, dsx3PortIntervalSlotIndex=dsx3PortIntervalSlotIndex, dsx3PortConfigLineStatus=dsx3PortConfigLineStatus, dsx3PortIntervalClear=dsx3PortIntervalClear, dsx3PortStatsLineCodeVioEvent=dsx3PortStatsLineCodeVioEvent, dsx3PortIntervalAISEvent=dsx3PortIntervalAISEvent, dsx3PortIntervalTrailTraceIDMismatchError=dsx3PortIntervalTrailTraceIDMismatchError, dsx3PortStatsChangeOfFrameAlign=dsx3PortStatsChangeOfFrameAlign, dsx3PortStatsPlcpBIPError=dsx3PortStatsPlcpBIPError, dsx3PortIntervalLastClear=dsx3PortIntervalLastClear, dsx3PortStatsPlcpFarEndBlkError=dsx3PortStatsPlcpFarEndBlkError, dsx3PortIntervalLineCodeVioEvent=dsx3PortIntervalLineCodeVioEvent)
