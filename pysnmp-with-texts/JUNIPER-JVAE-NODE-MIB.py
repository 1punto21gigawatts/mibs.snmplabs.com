#
# PySNMP MIB module JUNIPER-JVAE-NODE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JVAE-NODE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
jnxJVAEMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxJVAEMibRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Unsigned32, Integer32, Counter32, Gauge32, ModuleIdentity, TimeTicks, MibIdentifier, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Integer32", "Counter32", "Gauge32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "NotificationType")
TruthValue, PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "PhysAddress", "DisplayString", "TextualConvention")
jnxJVAENodeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2))
jnxJVAENodeMIB.setRevisions(('2012-08-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxJVAENodeMIB.setRevisionsDescriptions(('Initial version of JVAE Node MIB.',))
if mibBuilder.loadTexts: jnxJVAENodeMIB.setLastUpdated('201208010000Z')
if mibBuilder.loadTexts: jnxJVAENodeMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJVAENodeMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxJVAENodeMIB.setDescription('The MIB modules for JunosV App Engine Compute Nodes.')
jnxJVAENodeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0))
jnxJVAENodeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1))
jnxJVAENodeTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1))
jnxJVAECNSysInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1), )
if mibBuilder.loadTexts: jnxJVAECNSysInfoTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysInfoTable.setDescription('A table for further information on Compute Nodes.')
jnxJVAECNSysInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"))
if mibBuilder.loadTexts: jnxJVAECNSysInfoEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysInfoEntry.setDescription('System information for a Compute Node.')
jnxJVAECNSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: jnxJVAECNSysId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysId.setDescription('Id of the Compute Node.')
jnxJVAECNSysCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysCpus.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysCpus.setDescription('The number of CPUs or cores on the Compute Node.')
jnxJVAECNSysProcessingLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysProcessingLoad.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysProcessingLoad.setDescription('Total processing load on the Compute Node, in percentage.')
jnxJVAECNSysMemCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 4), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemCapacity.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysMemCapacity.setDescription('The amount of RAM on the Compute Node, in kilo bytes. Zero if information is unavailable.')
jnxJVAECNSysMemUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 5), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemUsed.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysMemUsed.setDescription('The amount of RAM used on the Compute Node, in kilo bytes. Zero if information in unavailable.')
jnxJVAECNSysMemFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 6), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemFree.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysMemFree.setDescription('The amount of RAM free on the Compute Node, in kilo bytes. Zero if information in unavailable.')
jnxJVAECNSysMemUsedPr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysMemUsedPr.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysMemUsedPr.setDescription('The amount of RAM used on the Compute Node, in percentage. Zero if information in unavailable.')
jnxJVAECNSysSwapCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 8), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysSwapCapacity.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysSwapCapacity.setDescription('Total swap space on the Compute Node, in kilo bytes. Zero if information is unavailable.')
jnxJVAECNSysSwapFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 9), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysSwapFree.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysSwapFree.setDescription('The amout of swap space free on the Compute Node, in kilo bytes. Zero if information is unavailable.')
jnxJVAECNSysBootMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("network", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysBootMethod.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysBootMethod.setDescription('Boot method used by the Compute Node, in the last reboot.')
jnxJVAECNSysLastReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setUnits('Secs').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSysLastReboot.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSysLastReboot.setDescription('Seconds passed since the last reboot or restart of the Compute Node.')
jnxJVAECNProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2), )
if mibBuilder.loadTexts: jnxJVAECNProcessorTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessorTable.setDescription('A table of Processors contained in the Compute Nodes.')
jnxJVAECNProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorId"))
if mibBuilder.loadTexts: jnxJVAECNProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessorEntry.setDescription('A Processor.')
jnxJVAECNProcessorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: jnxJVAECNProcessorId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessorId.setDescription('An unique identifier for the processor with this Compute Node.')
jnxJVAECNProcessorLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNProcessorLoad.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessorLoad.setDescription('Load on the processor, expressed in percentage. Zero if information is unavailable.')
jnxJVAECNifTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3), )
if mibBuilder.loadTexts: jnxJVAECNifTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifTable.setDescription('A table of network interfaces contained in the Compute Nodes.')
jnxJVAECNifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifId"))
if mibBuilder.loadTexts: jnxJVAECNifEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifEntry.setDescription('A network interface.')
jnxJVAECNifId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxJVAECNifId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifId.setDescription('An unique identifier for the network interface.')
jnxJVAECNifName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifName.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifName.setDescription('Description of the interface.')
jnxJVAECNifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifOperStatus.setDescription('Operational state of the interface.')
jnxJVAECNifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifAdminStatus.setDescription('Administrative state of the interface.')
jnxJVAECNifLinkDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifLinkDetect.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifLinkDetect.setDescription('Link presence, True if present else False. This field is meaningless when the interface is administered down.')
jnxJVAECNifAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifAddress.setDescription('Physcial address (MAC) of the interface.')
jnxJVAECNifInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifInPkts.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifInPkts.setDescription('Number of packets received on the interface.')
jnxJVAECNifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifInDiscards.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifInDiscards.setDescription('Number of received packets discarded, on the interface.')
jnxJVAECNifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifInErrors.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifInErrors.setDescription('Number of received packets with errors, on the interface.')
jnxJVAECNifOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOutPkts.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifOutPkts.setDescription('Number of packets sent on the interface.')
jnxJVAECNifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOutDiscards.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifOutDiscards.setDescription('Number of sent packets discarded, on the interface.')
jnxJVAECNifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNifOutErrors.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifOutErrors.setDescription('Number of sent packets with errors, on the interface.')
jnxJVAECNFileSysTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4), )
if mibBuilder.loadTexts: jnxJVAECNFileSysTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysTable.setDescription('A table of mounted file systems in the Compute Nodes.')
jnxJVAECNFileSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysId"))
if mibBuilder.loadTexts: jnxJVAECNFileSysEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysEntry.setDescription('A File System.')
jnxJVAECNFileSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)))
if mibBuilder.loadTexts: jnxJVAECNFileSysId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysId.setDescription('An unique identifier for the file system.')
jnxJVAECNFileSysMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysMountPoint.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysMountPoint.setDescription('The Filesystem path where the file system is mounted.')
jnxJVAECNFileSysSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 3), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysSize.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysSize.setDescription('Total storage capacity of the file system, in kilo bytes.')
jnxJVAECNFileSysUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 4), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysUsed.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysUsed.setDescription('Used Storage capacity of the file system, in kilo bytes.')
jnxJVAECNFileSysFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 5), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysFree.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysFree.setDescription('Unused Storage capacity of the file system, in kilo bytes.')
jnxJVAECNFileSysUsedPr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNFileSysUsedPr.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNFileSysUsedPr.setDescription('Used Storage capacity of the file system, in percentage.')
jnxJVAECNDiskTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5), )
if mibBuilder.loadTexts: jnxJVAECNDiskTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskTable.setDescription('A table of Physical Disks connected to the Compute Nodes.')
jnxJVAECNDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1), ).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNDiskId"))
if mibBuilder.loadTexts: jnxJVAECNDiskEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskEntry.setDescription('A disk.')
jnxJVAECNDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: jnxJVAECNDiskId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskId.setDescription('The unique identifier for this disk.')
jnxJVAECNDiskSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskSlot.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskSlot.setDescription('The slot at which disk is connected.')
jnxJVAECNDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskModel.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskModel.setDescription('The Disk product model.')
jnxJVAECNDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskRevision.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskRevision.setDescription('The Disk product revision.')
jnxJVAECNDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskVendor.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskVendor.setDescription('The Disk product vendor.')
jnxJVAECNDiskOSPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNDiskOSPath.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNDiskOSPath.setDescription('The Disk device path.')
jnxJVAECNRaidTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6), )
if mibBuilder.loadTexts: jnxJVAECNRaidTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidTable.setDescription('A table of Raid Arrays on the Compute Nodes.')
jnxJVAECNRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1), ).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidId"))
if mibBuilder.loadTexts: jnxJVAECNRaidEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidEntry.setDescription('A Raid array.')
jnxJVAECNRaidId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: jnxJVAECNRaidId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidId.setDescription('The unique identifier for this raid array.')
jnxJVAECNRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidName.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidName.setDescription('Name of the raid array.')
jnxJVAECNRaidState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidState.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidState.setDescription('State of the raid array.')
jnxJVAECNRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidLevel.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidLevel.setDescription('Raid level of the raid array.')
jnxJVAECNRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 5), Gauge32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidSize.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidSize.setDescription('Size of the raid array.')
jnxJVAECNRaidMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidMembers.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidMembers.setDescription('Number of members of the raid array.')
jnxJVAECNRaidMemberDiskPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidMemberDiskPartitions.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidMemberDiskPartitions.setDescription('List of device path of the partitions, that are members of the raid array.')
jnxJVAECNRaidMemberDiskAtSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidMemberDiskAtSlots.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidMemberDiskAtSlots.setDescription('List of slot numbers identifying the disks, that are members of the raid array.')
jnxJVAECNRaidOSPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRaidOSPath.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidOSPath.setDescription('The raid device disk path.')
jnxJVAECNSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7), )
if mibBuilder.loadTexts: jnxJVAECNSensorTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorTable.setDescription('A table of Sensors on the Compute Nodes.')
jnxJVAECNSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1), ).setIndexNames((0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), (0, "JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorId"))
if mibBuilder.loadTexts: jnxJVAECNSensorEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorEntry.setDescription('A Sensor.')
jnxJVAECNSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxJVAECNSensorId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorId.setDescription('The unique identifier for this sensor.')
jnxJVAECNSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voltage", 0), ("temperature", 1), ("fan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorType.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorType.setDescription('Type of the sensor.')
jnxJVAECNSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorValue.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorValue.setDescription('Sensor reading.')
jnxJVAECNSensorRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorRange.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorRange.setDescription('Normal operating range for the sensor, traps are raised the reading is no within this range.')
jnxJVAECNSensorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 1, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSensorDesc.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorDesc.setDescription('Description of the sensor.')
jnxJVAECNMemoryLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 1)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsedPr"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapFree"))
if mibBuilder.loadTexts: jnxJVAECNMemoryLow.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNMemoryLow.setDescription('This notification is generated whenever the free (unused) RAM goes below threshold for this compute node.')
jnxJVAECNMemoryOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 2)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysMemUsedPr"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapCapacity"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysSwapFree"))
if mibBuilder.loadTexts: jnxJVAECNMemoryOk.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNMemoryOk.setDescription('This notification is generated whenever the free (unused) RAM recovers above threshold for this compute node and previously a jnxJVAECNMemoryLow was reported.')
jnxJVAECNProcessingLoadHigh = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 3)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysProcessingLoad"))
if mibBuilder.loadTexts: jnxJVAECNProcessingLoadHigh.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessingLoadHigh.setDescription('This notification is generated whenever the overall system processing load exceeds threshold.')
jnxJVAECNProcessingLoadOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 4)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysProcessingLoad"))
if mibBuilder.loadTexts: jnxJVAECNProcessingLoadOk.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessingLoadOk.setDescription('This notification is generated whenever the overall system processing load is within threshold and previously a jnxJVAECNProcessingLoadHigh was reported.')
jnxJVAECNProcessorLoadHigh = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 5)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorLoad"))
if mibBuilder.loadTexts: jnxJVAECNProcessorLoadHigh.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessorLoadHigh.setDescription('This notification is generated whenever the load on a processor exceeds threshold.')
jnxJVAECNProcessorLoadOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 6)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNProcessorLoad"))
if mibBuilder.loadTexts: jnxJVAECNProcessorLoadOk.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNProcessorLoadOk.setDescription('This notification is generated whenever the load on a processor is within threshold and previously a jnxJVAECNProcessorLoadHigh was reported.')
jnxJVAECNifDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 7)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifName"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifOperStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifAdminStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifLinkDetect"))
if mibBuilder.loadTexts: jnxJVAECNifDown.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifDown.setDescription('This notification is generated whenever network interface is down.')
jnxJVAECNifUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 8)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifName"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifOperStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifAdminStatus"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNifLinkDetect"))
if mibBuilder.loadTexts: jnxJVAECNifUp.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNifUp.setDescription('This notification is generated whenever network interface is up and previously a jnxJVAECNifDown was reported.')
jnxJVAECNStorageLow = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 9)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysMountPoint"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysSize"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsedPr"))
if mibBuilder.loadTexts: jnxJVAECNStorageLow.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNStorageLow.setDescription('This notification is generated whenever storage space falls below threshold.')
jnxJVAECNStorageOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 10)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysMountPoint"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysSize"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsed"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysFree"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNFileSysUsedPr"))
if mibBuilder.loadTexts: jnxJVAECNStorageOk.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNStorageOk.setDescription('This notification is generated whenever storage space recovers and previously a jnxJVAECNStorageLow was reported.')
jnxJVAECNRaidError = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 11)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidName"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidState"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidOSPath"))
if mibBuilder.loadTexts: jnxJVAECNRaidError.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidError.setDescription('This notification is generated whenever raid array degradation or failure is detected.')
jnxJVAECNRaidOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 12)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidName"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidState"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNRaidOSPath"))
if mibBuilder.loadTexts: jnxJVAECNRaidOk.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRaidOk.setDescription('This notification is generated whenever raid array recovers and previously a jnxJVAECNRaidError was reported.')
jnxJVAECNSensorAlert = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 13)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorValue"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorType"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorRange"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorDesc"))
if mibBuilder.loadTexts: jnxJVAECNSensorAlert.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorAlert.setDescription('This notification is generated whenever sensor reading is not within the normal operating range.')
jnxJVAECNSensorOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 2, 0, 14)).setObjects(("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSysId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorId"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorValue"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorType"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorRange"), ("JUNIPER-JVAE-NODE-MIB", "jnxJVAECNSensorDesc"))
if mibBuilder.loadTexts: jnxJVAECNSensorOk.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSensorOk.setDescription('This notification is generated whenever sensor reading recovers and previously a jnxJVAECNSensorAlert was reported.')
mibBuilder.exportSymbols("JUNIPER-JVAE-NODE-MIB", jnxJVAECNSysLastReboot=jnxJVAECNSysLastReboot, jnxJVAECNifOperStatus=jnxJVAECNifOperStatus, jnxJVAECNSysId=jnxJVAECNSysId, jnxJVAECNifName=jnxJVAECNifName, jnxJVAECNRaidMemberDiskPartitions=jnxJVAECNRaidMemberDiskPartitions, jnxJVAECNSysProcessingLoad=jnxJVAECNSysProcessingLoad, jnxJVAECNRaidSize=jnxJVAECNRaidSize, jnxJVAECNRaidName=jnxJVAECNRaidName, jnxJVAECNSysInfoEntry=jnxJVAECNSysInfoEntry, jnxJVAECNifId=jnxJVAECNifId, jnxJVAECNifLinkDetect=jnxJVAECNifLinkDetect, jnxJVAECNSensorOk=jnxJVAECNSensorOk, jnxJVAECNRaidLevel=jnxJVAECNRaidLevel, jnxJVAECNProcessorLoadHigh=jnxJVAECNProcessorLoadHigh, jnxJVAECNifOutDiscards=jnxJVAECNifOutDiscards, jnxJVAECNSensorTable=jnxJVAECNSensorTable, jnxJVAECNFileSysEntry=jnxJVAECNFileSysEntry, jnxJVAECNifUp=jnxJVAECNifUp, jnxJVAECNRaidMemberDiskAtSlots=jnxJVAECNRaidMemberDiskAtSlots, jnxJVAECNProcessingLoadOk=jnxJVAECNProcessingLoadOk, jnxJVAECNifTable=jnxJVAECNifTable, jnxJVAECNifInPkts=jnxJVAECNifInPkts, jnxJVAECNSensorType=jnxJVAECNSensorType, jnxJVAENodeMIB=jnxJVAENodeMIB, jnxJVAECNFileSysUsedPr=jnxJVAECNFileSysUsedPr, jnxJVAECNifEntry=jnxJVAECNifEntry, jnxJVAECNSysMemFree=jnxJVAECNSysMemFree, jnxJVAECNMemoryLow=jnxJVAECNMemoryLow, jnxJVAECNSysSwapFree=jnxJVAECNSysSwapFree, jnxJVAECNifAdminStatus=jnxJVAECNifAdminStatus, jnxJVAECNRaidId=jnxJVAECNRaidId, jnxJVAECNSysMemUsedPr=jnxJVAECNSysMemUsedPr, jnxJVAECNSysMemUsed=jnxJVAECNSysMemUsed, jnxJVAECNSensorValue=jnxJVAECNSensorValue, jnxJVAECNRaidError=jnxJVAECNRaidError, PYSNMP_MODULE_ID=jnxJVAENodeMIB, jnxJVAENodeObjects=jnxJVAENodeObjects, jnxJVAECNProcessorLoad=jnxJVAECNProcessorLoad, jnxJVAECNifOutPkts=jnxJVAECNifOutPkts, jnxJVAECNFileSysId=jnxJVAECNFileSysId, jnxJVAECNDiskTable=jnxJVAECNDiskTable, jnxJVAECNifInDiscards=jnxJVAECNifInDiscards, jnxJVAECNDiskOSPath=jnxJVAECNDiskOSPath, jnxJVAECNRaidOk=jnxJVAECNRaidOk, jnxJVAECNFileSysSize=jnxJVAECNFileSysSize, jnxJVAECNDiskModel=jnxJVAECNDiskModel, jnxJVAECNSysMemCapacity=jnxJVAECNSysMemCapacity, jnxJVAENodeTables=jnxJVAENodeTables, jnxJVAENodeNotifications=jnxJVAENodeNotifications, jnxJVAECNRaidTable=jnxJVAECNRaidTable, jnxJVAECNifOutErrors=jnxJVAECNifOutErrors, jnxJVAECNSensorEntry=jnxJVAECNSensorEntry, jnxJVAECNSensorAlert=jnxJVAECNSensorAlert, jnxJVAECNMemoryOk=jnxJVAECNMemoryOk, jnxJVAECNifAddress=jnxJVAECNifAddress, jnxJVAECNSysSwapCapacity=jnxJVAECNSysSwapCapacity, jnxJVAECNifDown=jnxJVAECNifDown, jnxJVAECNStorageOk=jnxJVAECNStorageOk, jnxJVAECNSysInfoTable=jnxJVAECNSysInfoTable, jnxJVAECNSysBootMethod=jnxJVAECNSysBootMethod, jnxJVAECNRaidOSPath=jnxJVAECNRaidOSPath, jnxJVAECNSensorId=jnxJVAECNSensorId, jnxJVAECNProcessorEntry=jnxJVAECNProcessorEntry, jnxJVAECNRaidEntry=jnxJVAECNRaidEntry, jnxJVAECNProcessorLoadOk=jnxJVAECNProcessorLoadOk, jnxJVAECNSysCpus=jnxJVAECNSysCpus, jnxJVAECNProcessorTable=jnxJVAECNProcessorTable, jnxJVAECNFileSysFree=jnxJVAECNFileSysFree, jnxJVAECNDiskVendor=jnxJVAECNDiskVendor, jnxJVAECNifInErrors=jnxJVAECNifInErrors, jnxJVAECNStorageLow=jnxJVAECNStorageLow, jnxJVAECNRaidState=jnxJVAECNRaidState, jnxJVAECNFileSysUsed=jnxJVAECNFileSysUsed, jnxJVAECNSensorDesc=jnxJVAECNSensorDesc, jnxJVAECNDiskRevision=jnxJVAECNDiskRevision, jnxJVAECNDiskId=jnxJVAECNDiskId, jnxJVAECNFileSysTable=jnxJVAECNFileSysTable, jnxJVAECNProcessingLoadHigh=jnxJVAECNProcessingLoadHigh, jnxJVAECNFileSysMountPoint=jnxJVAECNFileSysMountPoint, jnxJVAECNProcessorId=jnxJVAECNProcessorId, jnxJVAECNDiskEntry=jnxJVAECNDiskEntry, jnxJVAECNDiskSlot=jnxJVAECNDiskSlot, jnxJVAECNRaidMembers=jnxJVAECNRaidMembers, jnxJVAECNSensorRange=jnxJVAECNSensorRange)
