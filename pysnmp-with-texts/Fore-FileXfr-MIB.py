#
# PySNMP MIB module Fore-FileXfr-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-FileXfr-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
EntryStatus, fileXfr = mibBuilder.importSymbols("Fore-Common-MIB", "EntryStatus", "fileXfr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Integer32, Bits, Counter32, NotificationType, iso, Counter64, Gauge32, MibIdentifier, Unsigned32, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Integer32", "Bits", "Counter32", "NotificationType", "iso", "Counter64", "Gauge32", "MibIdentifier", "Unsigned32", "ObjectIdentity", "IpAddress")
DisplayString, TextualConvention, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TestAndIncr")
foreFileXfrModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 6, 1))
if mibBuilder.loadTexts: foreFileXfrModule.setLastUpdated('9512071530-0500')
if mibBuilder.loadTexts: foreFileXfrModule.setOrganization('FORE')
if mibBuilder.loadTexts: foreFileXfrModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreFileXfrModule.setDescription('This MIB module defines the FORE Systems generic file transfer information. It provides for a file transfer table. Each table entry contains the information necessary for a device to complete a file transfer. Each table entry also contains information as to the status of the file transfer.')
fXfrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 1, 6, 2))
fXfrNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fXfrNextIndex.setStatus('current')
if mibBuilder.loadTexts: fXfrNextIndex.setDescription('The index of the next free row in the fXfrTable.')
fXfrTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2), )
if mibBuilder.loadTexts: fXfrTable.setStatus('current')
if mibBuilder.loadTexts: fXfrTable.setDescription('A table of pending and completed file transfers.')
fXfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1), ).setIndexNames((0, "Fore-FileXfr-MIB", "fXfrIndex"))
if mibBuilder.loadTexts: fXfrEntry.setStatus('current')
if mibBuilder.loadTexts: fXfrEntry.setDescription('A table entry containing information on a pending or completed file transfer.')
fXfrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fXfrIndex.setStatus('current')
if mibBuilder.loadTexts: fXfrIndex.setDescription('The index of the file transfer.')
fXfrRemoteFileUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrRemoteFileUrl.setStatus('current')
if mibBuilder.loadTexts: fXfrRemoteFileUrl.setDescription('This is the URL of the file to operate on. The URL is taken from the snmp agents point of view. The URL is in the form: <service>://<ip-address>[:port]/<filename> This includes the service (such as tftp), the server to contact, the port on that server to use, and the file on that server that is to be operated on. This definition does not specify the local filename. That name is specified in fXfrKnownFiles and fXfrLocalFilename.')
fXfrLocalFile = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrLocalFile.setStatus('current')
if mibBuilder.loadTexts: fXfrLocalFile.setDescription('The name of the local file to use in the GET/PUT operations. This can either be a full pathname or a device specific description of the local file. Some examples of descriptions specific to an ASX are switchCDB, lecsConfig, and switchUpgrade. As of FT5.2 additionally supported are netmodUpgradeA, netmodUpgradeB,netmodUpgradeC,netmodUpgradeD')
fXfrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("put", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrDirection.setStatus('current')
if mibBuilder.loadTexts: fXfrDirection.setDescription("Indication of the file transfer operation. A 'get' will retrieve the file from the machine specified in fXfrRemoteFileUrl. A 'put' will send the file to the machine specified in fXfrRemoteFileUrl.")
fXfrEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrEntryStatus.setStatus('current')
if mibBuilder.loadTexts: fXfrEntryStatus.setDescription('The status of this table entry.')
fXfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("go", 2), ("inQueue", 3), ("inProgress", 4), ("succeeded", 5), ("failed", 6), ("busy", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrStatus.setStatus('current')
if mibBuilder.loadTexts: fXfrStatus.setDescription('The current status of this file transfer. Is idle when the row becomes valid. To start the file transfer set this to go. InQueue signifies that the file transfer is waiting for resources before it begins but it will begin automatically. Busy signifies that the file transfer could not begin due to a resource allocation problem. The manager must try to restart the file transfer by setting this entry to go.')
fXfrStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fXfrStatusText.setStatus('current')
if mibBuilder.loadTexts: fXfrStatusText.setDescription('A message describing the status of this file transfer. This must exists when the status is succeeded or failed. This can optionally exists when the status is inQueue, inProgress, or busy.')
fXfrOwnerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fXfrOwnerIpAddress.setStatus('current')
if mibBuilder.loadTexts: fXfrOwnerIpAddress.setDescription('Ip address of the entity that requested this file transfer.')
fXfrOwnerSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrOwnerSignature.setStatus('current')
if mibBuilder.loadTexts: fXfrOwnerSignature.setDescription('Signature of the owner of this file transfer. This is supplied by the management station.')
fXfrTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("binary", 1), ("ascii", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrTransferType.setStatus('current')
if mibBuilder.loadTexts: fXfrTransferType.setDescription('The type of transfer requested. A binary transfer will perform no translations while an ascii transfer will set the representation type to network ASCII.')
fXfrUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrUserId.setStatus('current')
if mibBuilder.loadTexts: fXfrUserId.setDescription('The login name on the remote host for FTP.')
fXfrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 6, 2, 2, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fXfrPassword.setStatus('current')
if mibBuilder.loadTexts: fXfrPassword.setDescription('The password associated with the login name on the remote host for FTP. Note this object is write-only and reading it will result in implementation-specific results.')
mibBuilder.exportSymbols("Fore-FileXfr-MIB", fXfrStatusText=fXfrStatusText, fXfrTransferType=fXfrTransferType, fXfrGroup=fXfrGroup, fXfrIndex=fXfrIndex, foreFileXfrModule=foreFileXfrModule, fXfrUserId=fXfrUserId, fXfrTable=fXfrTable, fXfrRemoteFileUrl=fXfrRemoteFileUrl, fXfrStatus=fXfrStatus, fXfrEntryStatus=fXfrEntryStatus, PYSNMP_MODULE_ID=foreFileXfrModule, fXfrLocalFile=fXfrLocalFile, fXfrEntry=fXfrEntry, fXfrNextIndex=fXfrNextIndex, fXfrOwnerIpAddress=fXfrOwnerIpAddress, fXfrPassword=fXfrPassword, fXfrDirection=fXfrDirection, fXfrOwnerSignature=fXfrOwnerSignature)
