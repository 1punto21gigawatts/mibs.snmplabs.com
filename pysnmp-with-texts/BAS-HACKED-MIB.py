#
# PySNMP MIB module BAS-HACKED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-HACKED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
BasChassisId, BasInterfaceId, BasSlotId, BasLogicalPortId, BasCardClass, basHackedInfo = mibBuilder.importSymbols("BAS-MIB", "BasChassisId", "BasInterfaceId", "BasSlotId", "BasLogicalPortId", "BasCardClass", "basHackedInfo")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Gauge32, Counter64, iso, NotificationType, Integer32, Unsigned32, IpAddress, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Gauge32", "Counter64", "iso", "NotificationType", "Integer32", "Unsigned32", "IpAddress", "Bits", "TimeTicks")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
basHackedInfoMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1))
if mibBuilder.loadTexts: basHackedInfoMib.setLastUpdated('9901180900Z')
if mibBuilder.loadTexts: basHackedInfoMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basHackedInfoMib.setContactInfo(' Tech Support Broadband Access Systems 201 Forest Street Marlboro, MA 01752 U.S.A. 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basHackedInfoMib.setDescription('This MIB module defines the configuration MIB objects for a Broadband Access System Chassis cards.')
basHackedObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1))
basHackedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1), )
if mibBuilder.loadTexts: basHackedInfoTable.setStatus('current')
if mibBuilder.loadTexts: basHackedInfoTable.setDescription('Info about this slot.')
basHackedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1), ).setIndexNames((0, "BAS-HACKED-MIB", "basHackedCardInfoChassis"), (0, "BAS-HACKED-MIB", "basHackedCardInfoSlot"), (0, "BAS-HACKED-MIB", "basHackedCardInfoIf"), (0, "BAS-HACKED-MIB", "basHackedCardInfoLPort"))
if mibBuilder.loadTexts: basHackedInfoEntry.setStatus('current')
if mibBuilder.loadTexts: basHackedInfoEntry.setDescription('Chassis and slot and Agent information.')
basHackedCardInfoChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basHackedCardInfoChassis.setStatus('current')
if mibBuilder.loadTexts: basHackedCardInfoChassis.setDescription('The BAS Chassis ID of this card.')
basHackedCardInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basHackedCardInfoSlot.setStatus('current')
if mibBuilder.loadTexts: basHackedCardInfoSlot.setDescription('The BAS Slot ID of this card.')
basHackedCardInfoIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basHackedCardInfoIf.setStatus('current')
if mibBuilder.loadTexts: basHackedCardInfoIf.setDescription('The BAS interface ID of this card.')
basHackedCardInfoLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basHackedCardInfoLPort.setStatus('current')
if mibBuilder.loadTexts: basHackedCardInfoLPort.setDescription('The BAS logical port ID of this card.')
basHackedCardInfoChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basHackedCardInfoChassisNumber.setStatus('current')
if mibBuilder.loadTexts: basHackedCardInfoChassisNumber.setDescription('The BAS Chassis serial number of this card.')
basHackedCardInfoClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 6), BasCardClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basHackedCardInfoClass.setStatus('current')
if mibBuilder.loadTexts: basHackedCardInfoClass.setDescription('The BAS card class of this card.')
basHackedAgentConfigSave = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("save", 2), ("saving", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentConfigSave.setStatus('current')
if mibBuilder.loadTexts: basHackedAgentConfigSave.setDescription('The BAS save configuration Object')
basHackedAgentConfigSaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("passed", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basHackedAgentConfigSaveStatus.setStatus('current')
if mibBuilder.loadTexts: basHackedAgentConfigSaveStatus.setDescription('The BAS save configuration status Object')
basHackedBcmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedBcmIpAddress.setStatus('current')
if mibBuilder.loadTexts: basHackedBcmIpAddress.setDescription('The BCM IP Address Object')
basHackedCardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedCardReset.setStatus('current')
if mibBuilder.loadTexts: basHackedCardReset.setDescription('The BAS Card Reset Object. In order to set this object to reset(2), the object basHackedCardResetState must first be set to unlocked(2).')
basHackedAgentSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentSharedKey.setStatus('current')
if mibBuilder.loadTexts: basHackedAgentSharedKey.setDescription('The Agent Shared Key Object')
basHackedAgentUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentUdpPort.setStatus('current')
if mibBuilder.loadTexts: basHackedAgentUdpPort.setDescription('The BAS Agent SNMP UDP Port Object')
basHackedAgentTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentTcpPort.setStatus('current')
if mibBuilder.loadTexts: basHackedAgentTcpPort.setDescription('The BAS Agentx Tcp Port Object')
basHackedCardResetState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedCardResetState.setStatus('current')
if mibBuilder.loadTexts: basHackedCardResetState.setDescription('The state of the basHackedCardReset object. If this object is set to locked(1), then the card cannot be reset without first setting this object to unlocked(2).')
mibBuilder.exportSymbols("BAS-HACKED-MIB", basHackedInfoMib=basHackedInfoMib, basHackedInfoEntry=basHackedInfoEntry, basHackedCardInfoIf=basHackedCardInfoIf, basHackedCardInfoChassis=basHackedCardInfoChassis, PYSNMP_MODULE_ID=basHackedInfoMib, basHackedCardInfoClass=basHackedCardInfoClass, basHackedInfoTable=basHackedInfoTable, basHackedCardInfoChassisNumber=basHackedCardInfoChassisNumber, basHackedBcmIpAddress=basHackedBcmIpAddress, basHackedAgentSharedKey=basHackedAgentSharedKey, basHackedCardResetState=basHackedCardResetState, basHackedCardReset=basHackedCardReset, basHackedCardInfoSlot=basHackedCardInfoSlot, basHackedAgentTcpPort=basHackedAgentTcpPort, basHackedAgentConfigSave=basHackedAgentConfigSave, basHackedObjects=basHackedObjects, basHackedCardInfoLPort=basHackedCardInfoLPort, basHackedAgentConfigSaveStatus=basHackedAgentConfigSaveStatus, basHackedAgentUdpPort=basHackedAgentUdpPort)
