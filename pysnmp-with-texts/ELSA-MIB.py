#
# PySNMP MIB module ELSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Gauge32, Unsigned32, ObjectIdentity, Integer32, enterprises, Counter32, Bits, iso, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Gauge32", "Unsigned32", "ObjectIdentity", "Integer32", "enterprises", "Counter32", "Bits", "iso", "NotificationType", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
elsa = MibIdentifier((1, 3, 6, 1, 4, 1, 2356))
isdn_Systems = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400)).setLabel("isdn-Systems")
isdn_Router = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1)).setLabel("isdn-Router")
lancom_2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000)).setLabel("lancom-2000")
sta = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1))
set = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2))
fir = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3))
oth = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4))
staConne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConne.setStatus('mandatory')
if mibBuilder.loadTexts: staConne.setDescription('Connection-state')
staCurre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCurre.setStatus('mandatory')
if mibBuilder.loadTexts: staCurre.setDescription('Current-time')
staOpera = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staOpera.setStatus('mandatory')
if mibBuilder.loadTexts: staOpera.setDescription('Operating-time')
staWanst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4))
staWanstBytetrans = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1), )
if mibBuilder.loadTexts: staWanstBytetrans.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstBytetrans.setDescription('Byte-transport-statistics')
staWanstBytetransCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstBytetransIfc"))
if mibBuilder.loadTexts: staWanstBytetransCols.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstBytetransCols.setDescription('entry in table')
staWanstBytetransIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstBytetransIfc.setDescription('Ifc')
staWanstBytetransCrx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransCrx.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstBytetransCrx.setDescription('CRx-bytes')
staWanstBytetransRxb = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransRxb.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstBytetransRxb.setDescription('Rx-bytes')
staWanstBytetransTxb = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransTxb.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstBytetransTxb.setDescription('Tx-bytes')
staWanstBytetransCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstBytetransCtx.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstBytetransCtx.setDescription('CTx-bytes')
staWanstPackettra = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2), )
if mibBuilder.loadTexts: staWanstPackettra.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettra.setDescription('Packet-transport-statistics')
staWanstPackettraCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstPackettraIfc"))
if mibBuilder.loadTexts: staWanstPackettraCols.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettraCols.setDescription('entry in table')
staWanstPackettraIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettraIfc.setDescription('Ifc')
staWanstPackettraRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraRx.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettraRx.setDescription('Rx')
staWanstPackettraTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxt.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettraTxt.setDescription('Tx-total')
staWanstPackettraTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxn.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettraTxn.setDescription('Tx-normal')
staWanstPackettraTxr = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxr.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettraTxr.setDescription('Tx-reliable')
staWanstPackettraTxu = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstPackettraTxu.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstPackettraTxu.setDescription('Tx-urgent')
staWanstErrorstat = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3), )
if mibBuilder.loadTexts: staWanstErrorstat.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstat.setDescription('Error-statistics')
staWanstErrorstatCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstErrorstatIfc"))
if mibBuilder.loadTexts: staWanstErrorstatCols.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstatCols.setDescription('entry in table')
staWanstErrorstatIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstatIfc.setDescription('Ifc')
staWanstErrorstatRxl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatRxl1.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstatRxl1.setDescription('Rx-l1-error')
staWanstErrorstatRxl2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatRxl2.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstatRxl2.setDescription('Rx-l2-error')
staWanstErrorstatRxl3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatRxl3.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstatRxl3.setDescription('Rx-l3-error')
staWanstErrorstatStac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatStac.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstatStac.setDescription('Stack-error')
staWanstErrorstatTxer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstErrorstatTxer.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstErrorstatTxer.setDescription('Tx-error')
staWanstWantxdisc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWantxdisc.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstWantxdisc.setDescription('WAN-tx-discarded')
staWanstWanheappa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWanheappa.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstWanheappa.setDescription('WAN-heap-packets')
staWanstWanqueuep = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWanqueuep.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstWanqueuep.setDescription('WAN-queue-packets')
staWanstWanqueuee = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstWanqueuee.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstWanqueuee.setDescription('WAN-queue-errors')
staWanstThroughpu = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8), )
if mibBuilder.loadTexts: staWanstThroughpu.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstThroughpu.setDescription('Throughput-statistics')
staWanstThroughpuCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1), ).setIndexNames((0, "ELSA-MIB", "staWanstThroughpuIfc"))
if mibBuilder.loadTexts: staWanstThroughpuCols.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstThroughpuCols.setDescription('entry in table')
staWanstThroughpuIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstThroughpuIfc.setDescription('Ifc')
staWanstThroughpuRxsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuRxsc.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstThroughpuRxsc.setDescription('Rx/s current')
staWanstThroughpuTxsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuTxsc.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstThroughpuTxsc.setDescription('Tx/s current')
staWanstThroughpuRxsa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuRxsa.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstThroughpuRxsa.setDescription('Rx/s average')
staWanstThroughpuTxsa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staWanstThroughpuTxsa.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstThroughpuTxsa.setDescription('Tx/s average')
staWanstDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 4, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staWanstDeleteval.setStatus('mandatory')
if mibBuilder.loadTexts: staWanstDeleteval.setDescription('Delete-values')
staLanst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5))
staLanstLanrxpack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxpack.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxpack.setDescription('LAN-rx-packets')
staLanstLantxpack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxpack.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLantxpack.setDescription('LAN-tx-packets')
staLanstLanrxerro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxerro.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxerro.setDescription('LAN-rx-errors')
staLanstLanrxcrce = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxcrce.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxcrce.setDescription('LAN-rx-crc-errors')
staLanstLanrxalig = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxalig.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxalig.setDescription('LAN-rx-align-errors')
staLanstLantxerro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxerro.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLantxerro.setDescription('LAN-tx-errors')
staLanstLanstacke = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanstacke.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanstacke.setDescription('LAN-stack-errors')
staLanstLannicerr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLannicerr.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLannicerr.setDescription('LAN-NIC-errors')
staLanstLanheappa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanheappa.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanheappa.setDescription('LAN-heap-packets')
staLanstLanqueuep = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanqueuep.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanqueuep.setDescription('LAN-queue-packets')
staLanstLanqueuee = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanqueuee.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanqueuee.setDescription('LAN-queue-errors')
staLanstLancollis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLancollis.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLancollis.setDescription('LAN-collisions')
staLanstLanrxbyte = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxbyte.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxbyte.setDescription('LAN-rx-bytes')
staLanstLantxbyte = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxbyte.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLantxbyte.setDescription('LAN-tx-bytes')
staLanstLanrxbroa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxbroa.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxbroa.setDescription('LAN-rx-broadcasts')
staLanstLanrxmult = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxmult.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxmult.setDescription('LAN-rx-multicasts')
staLanstLanrxunic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLanrxunic.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLanrxunic.setDescription('LAN-rx-unicasts')
staLanstLantxbroa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxbroa.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLantxbroa.setDescription('LAN-tx-broadcasts')
staLanstLantxmult = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxmult.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLantxmult.setDescription('LAN-tx-multicasts')
staLanstLantxunic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLanstLantxunic.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstLantxunic.setDescription('LAN-tx-unicasts')
staLanstDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 5, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staLanstDeleteval.setStatus('mandatory')
if mibBuilder.loadTexts: staLanstDeleteval.setDescription('Delete-values')
staPppst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6))
staPppstPpp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1), )
if mibBuilder.loadTexts: staPppstPpp.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPpp.setDescription('PPP-phases')
staPppstPppCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstPppIfc"))
if mibBuilder.loadTexts: staPppstPppCols.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppCols.setDescription('entry in table')
staPppstPppIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppIfc.setDescription('Ifc')
staPppstPppPha = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dead", 1), ("establish", 2), ("terminate", 3), ("authenticate", 4), ("callback", 5), ("network", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppPha.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppPha.setDescription('Phase to')
staPppstPppLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppLcp.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppLcp.setDescription('LCP')
staPppstPppIpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppIpc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppIpc.setDescription('IPCP')
staPppstPppIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppIpx.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppIpx.setDescription('IPXCP')
staPppstPppCcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppCcp.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppCcp.setDescription('CCP')
staPppstPppBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("startng", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stoppng", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPppBac.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPppBac.setDescription('BACP')
staPppstLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2))
staPppstLcpRxerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxerrors.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxerrors.setDescription('Rx-errors')
staPppstLcpRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxdiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxdiscarded.setDescription('Rx-discarded')
staPppstLcpRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxconfigrequ.setDescription('Rx-config-request')
staPppstLcpRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxconfigack.setDescription('Rx-config-ack.')
staPppstLcpRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxconfignak.setDescription('Rx-config-nak.')
staPppstLcpRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxconfigreje.setDescription('Rx-config-reject')
staPppstLcpRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxterminater.setDescription('Rx-terminate-request')
staPppstLcpRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxterminatea.setDescription('Rx-terminate-ack.')
staPppstLcpRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxcodereject.setDescription('Rx-code-reject')
staPppstLcpRxprotocolre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxprotocolre.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxprotocolre.setDescription('Rx-protocol-reject')
staPppstLcpRxechoreques = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxechoreques.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxechoreques.setDescription('Rx-echo-request')
staPppstLcpRxechoreply = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxechoreply.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxechoreply.setDescription('Rx-echo-reply')
staPppstLcpRxdiscardreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpRxdiscardreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpRxdiscardreq.setDescription('Rx-discard-request')
staPppstLcpTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxconfigrequ.setDescription('Tx-config-request')
staPppstLcpTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxconfigack.setDescription('Tx-config-ack.')
staPppstLcpTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxconfignak.setDescription('Tx-config-nak.')
staPppstLcpTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxconfigreje.setDescription('Tx-config-reject')
staPppstLcpTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxterminater.setDescription('Tx-terminate-request')
staPppstLcpTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxterminatea.setDescription('Tx-terminate-ack.')
staPppstLcpTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxcodereject.setDescription('Tx-code-reject')
staPppstLcpTxprotocolre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxprotocolre.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxprotocolre.setDescription('Tx-protocol-reject')
staPppstLcpTxechoreques = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxechoreques.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxechoreques.setDescription('Tx-echo-request')
staPppstLcpTxechoreply = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxechoreply.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxechoreply.setDescription('Tx-echo-reply')
staPppstLcpTxdiscardreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstLcpTxdiscardreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpTxdiscardreq.setDescription('Tx-discard-request')
staPppstLcpDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 2, 25), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstLcpDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstLcpDeletevalues.setDescription('Delete-values')
staPppstPap = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3))
staPppstPapRxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxdis.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapRxdis.setDescription('Rx-discarded')
staPppstPapRxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapRxreq.setDescription('Rx-request')
staPppstPapRxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxsuc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapRxsuc.setDescription('Rx-success')
staPppstPapRxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapRxfai.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapRxfai.setDescription('Rx-failure')
staPppstPapTxret = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxret.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapTxret.setDescription('Tx-retry')
staPppstPapTxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapTxreq.setDescription('Tx-request')
staPppstPapTxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxsuc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapTxsuc.setDescription('Tx-success')
staPppstPapTxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstPapTxfai.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapTxfai.setDescription('Tx-failure')
staPppstPapDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstPapDelet.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstPapDelet.setDescription('Delete-values')
staPppstCha = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4))
staPppstChaRxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxdis.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaRxdis.setDescription('Rx-discarded')
staPppstChaRxcha = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxcha.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaRxcha.setDescription('Rx-challenge')
staPppstChaRxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaRxres.setDescription('Rx-response')
staPppstChaRxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxsuc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaRxsuc.setDescription('Rx-success')
staPppstChaRxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaRxfai.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaRxfai.setDescription('Rx-failure')
staPppstChaTxret = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxret.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaTxret.setDescription('Tx-retry')
staPppstChaTxcha = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxcha.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaTxcha.setDescription('Tx-challenge')
staPppstChaTxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaTxres.setDescription('Tx-response')
staPppstChaTxsuc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxsuc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaTxsuc.setDescription('Tx-success')
staPppstChaTxfai = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstChaTxfai.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaTxfai.setDescription('Tx-failure')
staPppstChaDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 4, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstChaDelet.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstChaDelet.setDescription('Delete-values')
staPppstCbc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7))
staPppstCbcRxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxdis.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcRxdis.setDescription('Rx-discarded')
staPppstCbcRxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcRxreq.setDescription('Rx-request')
staPppstCbcRxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcRxres.setDescription('Rx-response')
staPppstCbcRxack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcRxack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcRxack.setDescription('Rx-acknowledge')
staPppstCbcTxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcTxreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcTxreq.setDescription('Tx-request')
staPppstCbcTxres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcTxres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcTxres.setDescription('Tx-response')
staPppstCbcTxack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCbcTxack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcTxack.setDescription('Tx-acknowledge')
staPppstCbcDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 7, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstCbcDelet.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCbcDelet.setDescription('Delete-values')
staPppstIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5))
staPppstIpxRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxdiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxdiscarded.setDescription('Rx-discarded')
staPppstIpxRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxconfigrequ.setDescription('Rx-config-request')
staPppstIpxRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxconfigack.setDescription('Rx-config-ack.')
staPppstIpxRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxconfignak.setDescription('Rx-config-nak.')
staPppstIpxRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxconfigreje.setDescription('Rx-config-reject')
staPppstIpxRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxterminater.setDescription('Rx-terminate-request')
staPppstIpxRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxterminatea.setDescription('Rx-terminate-ack.')
staPppstIpxRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxRxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxRxcodereject.setDescription('Rx-code-reject')
staPppstIpxTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxTxconfigrequ.setDescription('Tx-config-request')
staPppstIpxTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxTxconfigack.setDescription('Tx-config-ack.')
staPppstIpxTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxTxconfignak.setDescription('Tx-config-nak.')
staPppstIpxTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxTxconfigreje.setDescription('Tx-config-reject')
staPppstIpxTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxTxterminater.setDescription('Tx-terminate-request')
staPppstIpxTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxTxterminatea.setDescription('Tx-terminate-ack.')
staPppstIpxTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpxTxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxTxcodereject.setDescription('Tx-code-reject')
staPppstIpxDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 5, 16), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstIpxDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpxDeletevalues.setDescription('Delete-values')
staPppstIpc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6))
staPppstIpcRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxdiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxdiscarded.setDescription('Rx-discarded')
staPppstIpcRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxconfigrequ.setDescription('Rx-config-request')
staPppstIpcRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxconfigack.setDescription('Rx-config-ack.')
staPppstIpcRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxconfignak.setDescription('Rx-config-nak.')
staPppstIpcRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxconfigreje.setDescription('Rx-config-reject')
staPppstIpcRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxterminater.setDescription('Rx-terminate-request')
staPppstIpcRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxterminatea.setDescription('Rx-terminate-ack.')
staPppstIpcRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcRxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcRxcodereject.setDescription('Rx-code-reject')
staPppstIpcTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcTxconfigrequ.setDescription('Tx-config-request')
staPppstIpcTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcTxconfigack.setDescription('Tx-config-ack.')
staPppstIpcTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcTxconfignak.setDescription('Tx-config-nak.')
staPppstIpcTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcTxconfigreje.setDescription('Tx-config-reject')
staPppstIpcTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcTxterminater.setDescription('Tx-terminate-request')
staPppstIpcTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcTxterminatea.setDescription('Tx-terminate-ack.')
staPppstIpcTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstIpcTxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcTxcodereject.setDescription('Tx-code-reject')
staPppstIpcDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 6, 16), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstIpcDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstIpcDeletevalues.setDescription('Delete-values')
staPppstCcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10))
staPppstCcpRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxdiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxdiscarded.setDescription('Rx-discarded')
staPppstCcpRxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxconfigrequ.setDescription('Rx-config-request')
staPppstCcpRxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxconfigack.setDescription('Rx-config-ack.')
staPppstCcpRxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxconfignak.setDescription('Rx-config-nak.')
staPppstCcpRxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxconfigreje.setDescription('Rx-config-reject')
staPppstCcpRxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxterminater.setDescription('Rx-terminate-request')
staPppstCcpRxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxterminatea.setDescription('Rx-terminate-ack.')
staPppstCcpRxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxcodereject.setDescription('Rx-code-reject')
staPppstCcpRxresetreque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxresetreque.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxresetreque.setDescription('Rx-reset-request')
staPppstCcpRxresetack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpRxresetack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpRxresetack.setDescription('Rx-reset-ack')
staPppstCcpTxconfigrequ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfigrequ.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxconfigrequ.setDescription('Tx-config-request')
staPppstCcpTxconfigack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfigack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxconfigack.setDescription('Tx-config-ack.')
staPppstCcpTxconfignak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfignak.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxconfignak.setDescription('Tx-config-nak.')
staPppstCcpTxconfigreje = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxconfigreje.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxconfigreje.setDescription('Tx-config-reject')
staPppstCcpTxterminater = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxterminater.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxterminater.setDescription('Tx-terminate-request')
staPppstCcpTxterminatea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxterminatea.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxterminatea.setDescription('Tx-terminate-ack.')
staPppstCcpTxcodereject = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxcodereject.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxcodereject.setDescription('Tx-code-reject')
staPppstCcpTxresetreque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxresetreque.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxresetreque.setDescription('Tx-reset-request')
staPppstCcpTxresetack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpTxresetack.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpTxresetack.setDescription('Tx-reset-ack')
staPppstCcpCompressione = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstCcpCompressione.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpCompressione.setDescription('Compression-errors')
staPppstCcpDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 10, 21), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstCcpDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstCcpDeletevalues.setDescription('Delete-values')
staPppstMls = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11))
staPppstMlsBundlec = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsBundlec.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsBundlec.setDescription('Bundle-connections')
staPppstMlsRxseqlo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxseqlo.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxseqlo.setDescription('Rx-Seq-lost')
staPppstMlsRxseqre = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxseqre.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxseqre.setDescription('Rx-Seq-repeat')
staPppstMlsRxmrrue = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxmrrue.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxmrrue.setDescription('Rx-Mrru-exceeded')
staPppstMlsRxheade = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxheade.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxheade.setDescription('Rx-Header-error')
staPppstMlsRxdisca = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxdisca.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxdisca.setDescription('Rx-discarded')
staPppstMlsRxfrags = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxfrags.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxfrags.setDescription('Rx-Frag-start')
staPppstMlsRxfragm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxfragm.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxfragm.setDescription('Rx-Frag-mid')
staPppstMlsRxfrage = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxfrage.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxfrage.setDescription('Rx-Frag-end')
staPppstMlsRxnotfr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstMlsRxnotfr.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsRxnotfr.setDescription('Rx-not-fragmented')
staPppstMlsDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 11, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstMlsDeletev.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstMlsDeletev.setDescription('Delete-values')
staPppstBac = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12))
staPppstBacRxerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxerrors.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxerrors.setDescription('Rx-errors')
staPppstBacRxdiscarded = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxdiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxdiscarded.setDescription('Rx-discarded')
staPppstBacRxcallrequest = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallrequest.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxcallrequest.setDescription('Rx-call-request')
staPppstBacRxcallrespons = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallrespons.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxcallrespons.setDescription('Rx-call-response')
staPppstBacRxcallbackreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallbackreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxcallbackreq.setDescription('Rx-callback-request')
staPppstBacRxcallbackres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxcallbackres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxcallbackres.setDescription('Rx-callback-response')
staPppstBacRxlinkdropreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxlinkdropreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxlinkdropreq.setDescription('Rx-link-Drop-request')
staPppstBacRxlinkdropres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxlinkdropres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxlinkdropres.setDescription('Rx-link-Drop-response')
staPppstBacRxstatusindic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxstatusindic.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxstatusindic.setDescription('Rx-status-indicaion')
staPppstBacRxstatusreson = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacRxstatusreson.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacRxstatusreson.setDescription('Rx-status-resonse')
staPppstBacTxcallrequest = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallrequest.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxcallrequest.setDescription('Tx-call-request')
staPppstBacTxcallrespons = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallrespons.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxcallrespons.setDescription('Tx-call-response')
staPppstBacTxcallbackreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallbackreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxcallbackreq.setDescription('Tx-callback-request')
staPppstBacTxcallbackres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxcallbackres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxcallbackres.setDescription('Tx-callback-response')
staPppstBacTxlinkdropreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxlinkdropreq.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxlinkdropreq.setDescription('Tx-link-Drop-request')
staPppstBacTxlinkdropres = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxlinkdropres.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxlinkdropres.setDescription('Tx-link-Drop-response')
staPppstBacTxstatusindic = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxstatusindic.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxstatusindic.setDescription('Tx-status-indicaion')
staPppstBacTxstatusreson = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstBacTxstatusreson.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacTxstatusreson.setDescription('Tx-status-resonse')
staPppstBacDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 12, 19), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstBacDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstBacDeletevalues.setDescription('Delete-values')
staPppstRxo = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8))
staPppstRxoLcp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1), )
if mibBuilder.loadTexts: staPppstRxoLcp.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcp.setDescription('LCP')
staPppstRxoLcpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstRxoLcpIfc"))
if mibBuilder.loadTexts: staPppstRxoLcpCols.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpCols.setDescription('entry in table')
staPppstRxoLcpIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpIfc.setDescription('Ifc')
staPppstRxoLcpMru = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpMru.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpMru.setDescription('MRU')
staPppstRxoLcpAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpAcc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpAcc.setDescription('ACCM')
staPppstRxoLcpAut = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 4))).clone(namedValues=NamedValues(("none", 0), ("chap", 8), ("pap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpAut.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpAut.setDescription('Authent.')
staPppstRxoLcpMag = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpMag.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpMag.setDescription('Magic-Num')
staPppstRxoLcpPfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpPfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpPfc.setDescription('PFC')
staPppstRxoLcpAcf = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpAcf.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpAcf.setDescription('ACFC')
staPppstRxoLcpCal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("none", 255), ("lcp", 1), ("lcp", 2), ("lcp", 3), ("lcp", 4), ("lcp", 5), ("cbcp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoLcpCal.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoLcpCal.setDescription('Call-back')
staPppstRxoIpx = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2), )
if mibBuilder.loadTexts: staPppstRxoIpx.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpx.setDescription('IPXCP')
staPppstRxoIpxCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstRxoIpxIfc"))
if mibBuilder.loadTexts: staPppstRxoIpxCols.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpxCols.setDescription('entry in table')
staPppstRxoIpxIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpxIfc.setDescription('Ifc')
staPppstRxoIpxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxNet.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpxNet.setDescription('Network')
staPppstRxoIpxNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxNod.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpxNod.setDescription('Node-ID')
staPppstRxoIpxRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("rip-sap", 2), ("nlsp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpxRou.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpxRou.setDescription('Routing-method')
staPppstRxoIpc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3), )
if mibBuilder.loadTexts: staPppstRxoIpc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpc.setDescription('IPCP')
staPppstRxoIpcCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstRxoIpcIfc"))
if mibBuilder.loadTexts: staPppstRxoIpcCols.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpcCols.setDescription('entry in table')
staPppstRxoIpcIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpcIfc.setDescription('Ifc')
staPppstRxoIpcIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpcIpa.setDescription('IP-address')
staPppstRxoIpcDns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcDns.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpcDns.setDescription('DNS-default')
staPppstRxoIpcNbn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 8, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstRxoIpcNbn.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstRxoIpcNbn.setDescription('NBNS-default')
staPppstTxo = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9))
staPppstTxoLcp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1), )
if mibBuilder.loadTexts: staPppstTxoLcp.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcp.setDescription('LCP')
staPppstTxoLcpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstTxoLcpIfc"))
if mibBuilder.loadTexts: staPppstTxoLcpCols.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpCols.setDescription('entry in table')
staPppstTxoLcpIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpIfc.setDescription('Ifc')
staPppstTxoLcpMru = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpMru.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpMru.setDescription('MRU')
staPppstTxoLcpAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpAcc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpAcc.setDescription('ACCM')
staPppstTxoLcpAut = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 4))).clone(namedValues=NamedValues(("none", 0), ("chap", 8), ("pap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpAut.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpAut.setDescription('Authent.')
staPppstTxoLcpMag = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpMag.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpMag.setDescription('Magic-Num')
staPppstTxoLcpPfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpPfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpPfc.setDescription('PFC')
staPppstTxoLcpAcf = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpAcf.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpAcf.setDescription('ACFC')
staPppstTxoLcpCal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("none", 255), ("lcp", 1), ("lcp", 2), ("lcp", 3), ("lcp", 4), ("lcp", 5), ("cbcp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoLcpCal.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoLcpCal.setDescription('Call-back')
staPppstTxoIpx = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2), )
if mibBuilder.loadTexts: staPppstTxoIpx.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpx.setDescription('IPXCP')
staPppstTxoIpxCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstTxoIpxIfc"))
if mibBuilder.loadTexts: staPppstTxoIpxCols.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpxCols.setDescription('entry in table')
staPppstTxoIpxIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpxIfc.setDescription('Ifc')
staPppstTxoIpxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxNet.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpxNet.setDescription('Network')
staPppstTxoIpxNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxNod.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpxNod.setDescription('Node-ID')
staPppstTxoIpxRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("rip-sap", 2), ("nlsp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpxRou.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpxRou.setDescription('Routing-method')
staPppstTxoIpc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3), )
if mibBuilder.loadTexts: staPppstTxoIpc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpc.setDescription('IPCP')
staPppstTxoIpcCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staPppstTxoIpcIfc"))
if mibBuilder.loadTexts: staPppstTxoIpcCols.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpcCols.setDescription('entry in table')
staPppstTxoIpcIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpcIfc.setDescription('Ifc')
staPppstTxoIpcIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpcIpa.setDescription('IP-address')
staPppstTxoIpcDns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcDns.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpcDns.setDescription('DNS-default')
staPppstTxoIpcNbn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 9, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPppstTxoIpcNbn.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstTxoIpcNbn.setDescription('NBNS-default')
staPppstDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 6, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staPppstDel.setStatus('mandatory')
if mibBuilder.loadTexts: staPppstDel.setDescription('Delete-values')
staBridg = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7))
staBridgBrglanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanr.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrglanr.setDescription('Brg-LAN-rx')
staBridgBrglant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglant.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrglant.setDescription('Brg-LAN-tx')
staBridgBrglanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanf.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrglanf.setDescription('Brg-LAN-filters')
staBridgBrglanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanb.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrglanb.setDescription('Brg-LAN-broadcasts')
staBridgBrglanm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrglanm.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrglanm.setDescription('Brg-LAN-multicasts')
staBridgBrgwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrgwanr.setDescription('Brg-WAN-rx')
staBridgBrgwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwant.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrgwant.setDescription('Brg-WAN-tx')
staBridgBrgwanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanf.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrgwanf.setDescription('Brg-WAN-filters')
staBridgBrgwanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanb.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrgwanb.setDescription('Brg-WAN-broadcasts')
staBridgBrgwanm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgwanm.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrgwanm.setDescription('Brg-WAN-multicasts')
staBridgBrgaddr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgBrgaddr.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgBrgaddr.setDescription('Brg-addresses')
staBridgTablebr = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12), )
if mibBuilder.loadTexts: staBridgTablebr.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgTablebr.setDescription('Table-bridge')
staBridgTablebrCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1), ).setIndexNames((0, "ELSA-MIB", "staBridgTablebrNod"))
if mibBuilder.loadTexts: staBridgTablebrCols.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgTablebrCols.setDescription('entry in table')
staBridgTablebrNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgTablebrNod.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgTablebrNod.setDescription('Node-ID')
staBridgTablebrLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgTablebrLas.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgTablebrLas.setDescription('Last-access')
staBridgTablebrFor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgTablebrFor.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgTablebrFor.setDescription('Forward-Flag')
staBridgEstabli = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13), )
if mibBuilder.loadTexts: staBridgEstabli.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgEstabli.setDescription('Establish-table')
staBridgEstabliCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1), ).setIndexNames((0, "ELSA-MIB", "staBridgEstabliTim"))
if mibBuilder.loadTexts: staBridgEstabliCols.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgEstabliCols.setDescription('entry in table')
staBridgEstabliTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgEstabliTim.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgEstabliTim.setDescription('Time')
staBridgEstabliDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgEstabliDes.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgEstabliDes.setDescription('Dest')
staBridgEstabliSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBridgEstabliSou.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgEstabliSou.setDescription('Source')
staBridgDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 7, 14), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staBridgDeletev.setStatus('mandatory')
if mibBuilder.loadTexts: staBridgDeletev.setDescription('Delete-values')
staIpxst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8))
staIpxstMac = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1))
staIpxstMacIpxlanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxlanrx.setDescription('IPX-LAN-rx')
staIpxstMacIpxlanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrxb.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxlanrxb.setDescription('IPX-LAN-rx-broadcasts')
staIpxstMacIpxlanrxm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrxm.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxlanrxm.setDescription('IPX-LAN-rx-multicasts')
staIpxstMacIpxlanrxu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlanrxu.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxlanrxu.setDescription('IPX-LAN-rx-unicasts')
staIpxstMacIpxlantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxlantx.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxlantx.setDescription('IPX-LAN-tx')
staIpxstMacIpxwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxwanrx.setDescription('IPX-WAN-rx')
staIpxstMacIpxwanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrxb.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxwanrxb.setDescription('IPX-WAN-rx-broadcasts')
staIpxstMacIpxwanrxm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrxm.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxwanrxm.setDescription('IPX-WAN-rx-multicasts')
staIpxstMacIpxwanrxu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwanrxu.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxwanrxu.setDescription('IPX-WAN-rx-unicasts')
staIpxstMacIpxwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstMacIpxwantx.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacIpxwantx.setDescription('IPX-WAN-tx')
staIpxstMacDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 1, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstMacDeleteval.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstMacDeleteval.setDescription('Delete-values')
staIpxstWat = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2))
staIpxstWatIpxwatchdoglanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdoglanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatIpxwatchdoglanr.setDescription('IPX-watchdog-LAN-rx')
staIpxstWatIpxwatchdoglant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdoglant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatIpxwatchdoglant.setDescription('IPX-watchdog-LAN-tx')
staIpxstWatIpxwatchdogwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdogwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatIpxwatchdogwanr.setDescription('IPX-watchdog-WAN-rx')
staIpxstWatIpxwatchdogwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatIpxwatchdogwant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatIpxwatchdogwant.setDescription('IPX-watchdog-WAN-tx')
staIpxstWatSpxwatchdoglanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdoglanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatSpxwatchdoglanr.setDescription('SPX-watchdog-LAN-rx')
staIpxstWatSpxwatchdoglant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdoglant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatSpxwatchdoglant.setDescription('SPX-watchdog-LAN-tx')
staIpxstWatSpxwatchdogwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdogwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatSpxwatchdogwanr.setDescription('SPX-watchdog-WAN-rx')
staIpxstWatSpxwatchdogwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstWatSpxwatchdogwant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatSpxwatchdogwant.setDescription('SPX-watchdog-WAN-tx')
staIpxstWatDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 2, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstWatDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstWatDeletevalues.setDescription('Delete-values')
staIpxstPro = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3))
staIpxstProPropagatelanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatelanr.setDescription('Propagate-LAN-rx')
staIpxstProPropagatelanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanf.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatelanf.setDescription('Propagate-LAN-filters')
staIpxstProPropagatelant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatelant.setDescription('Propagate-LAN-tx')
staIpxstProPropagatelans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelans.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatelans.setDescription('Propagate-LAN-socket-errors')
staIpxstProPropagatelanh = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanh.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatelanh.setDescription('Propagate-LAN-hop-errors')
staIpxstProPropagatelanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanb.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatelanb.setDescription('Propagate-LAN-backroute-errors')
staIpxstProPropagatelanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatelanc.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatelanc.setDescription('Propagate-LAN-contention')
staIpxstProPropagatewanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatewanr.setDescription('Propagate-WAN-rx')
staIpxstProPropagatewanf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewanf.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatewanf.setDescription('Propagate-WAN-filters')
staIpxstProPropagatewant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatewant.setDescription('Propagate-WAN-tx')
staIpxstProPropagatewans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstProPropagatewans.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProPropagatewans.setDescription('Propagate-WAN-socket-errors')
staIpxstProDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 3, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstProDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstProDeletevalues.setDescription('Delete-values')
staIpxstRip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4))
staIpxstRipRiplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRiplanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipRiplanr.setDescription('RIP-LAN-rx')
staIpxstRipRiplane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRiplane.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipRiplane.setDescription('RIP-LAN-errors')
staIpxstRipRiplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRiplant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipRiplant.setDescription('RIP-LAN-tx')
staIpxstRipRipwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRipwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipRipwanr.setDescription('RIP-WAN-rx')
staIpxstRipRipwane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRipwane.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipRipwane.setDescription('RIP-WAN-errors')
staIpxstRipRipwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipRipwant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipRipwant.setDescription('RIP-WAN-tx')
staIpxstRipTableri = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7), )
if mibBuilder.loadTexts: staIpxstRipTableri.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableri.setDescription('Table-RIP')
staIpxstRipTableriCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstRipTableriNet"))
if mibBuilder.loadTexts: staIpxstRipTableriCols.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableriCols.setDescription('entry in table')
staIpxstRipTableriNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriNet.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableriNet.setDescription('Network')
staIpxstRipTableriHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriHop.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableriHop.setDescription('Hops')
staIpxstRipTableriTic = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriTic.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableriTic.setDescription('Tics')
staIpxstRipTableriNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriNod.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableriNod.setDescription('Node-ID')
staIpxstRipTableriTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriTim.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableriTim.setDescription('Time')
staIpxstRipTableriFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstRipTableriFla.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipTableriFla.setDescription('Flags')
staIpxstRipDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 4, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstRipDeletev.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstRipDeletev.setDescription('Delete-values')
staIpxstSap = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5))
staIpxstSapSaplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSaplanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapSaplanr.setDescription('SAP-LAN-rx')
staIpxstSapSaplane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSaplane.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapSaplane.setDescription('SAP-LAN-errors')
staIpxstSapSaplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSaplant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapSaplant.setDescription('SAP-LAN-tx')
staIpxstSapSapwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSapwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapSapwanr.setDescription('SAP-WAN-rx')
staIpxstSapSapwane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSapwane.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapSapwane.setDescription('SAP-WAN-errors')
staIpxstSapSapwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapSapwant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapSapwant.setDescription('SAP-WAN-tx')
staIpxstSapTablesa = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7), )
if mibBuilder.loadTexts: staIpxstSapTablesa.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesa.setDescription('Table-SAP')
staIpxstSapTablesaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstSapTablesaTyp"))
if mibBuilder.loadTexts: staIpxstSapTablesaCols.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaCols.setDescription('entry in table')
staIpxstSapTablesaTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaTyp.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaTyp.setDescription('Type')
staIpxstSapTablesaSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaSer.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaSer.setDescription('Server-name')
staIpxstSapTablesaNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaNet.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaNet.setDescription('Network')
staIpxstSapTablesaNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaNod.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaNod.setDescription('Node-ID')
staIpxstSapTablesaSoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaSoc.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaSoc.setDescription('Socket')
staIpxstSapTablesaHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaHop.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaHop.setDescription('Hops')
staIpxstSapTablesaTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaTim.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaTim.setDescription('Time')
staIpxstSapTablesaFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstSapTablesaFla.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapTablesaFla.setDescription('Flags')
staIpxstSapDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 5, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstSapDeletev.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstSapDeletev.setDescription('Delete-values')
staIpxstIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6))
staIpxstIpxIpxrlanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrlanr.setDescription('IPXr-LAN-rx')
staIpxstIpxIpxrlant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrlant.setDescription('IPXr-LAN-tx')
staIpxstIpxIpxrlanh = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanh.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrlanh.setDescription('IPXr-LAN-hop-errors')
staIpxstIpxIpxrlans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlans.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrlans.setDescription('IPXr-LAN-socket-errors')
staIpxstIpxIpxrlann = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlann.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrlann.setDescription('IPXr-LAN-net-errors')
staIpxstIpxIpxrlanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanb.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrlanb.setDescription('IPXr-LAN-backroute-errors')
staIpxstIpxIpxrlanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrlanc.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrlanc.setDescription('IPXr-LAN-contention')
staIpxstIpxIpxrland = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrland.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrland.setDescription('IPXr-LAN-down-errors')
staIpxstIpxIpxrwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrwanr.setDescription('IPXr-WAN-rx')
staIpxstIpxIpxrwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwant.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrwant.setDescription('IPXr-WAN-tx')
staIpxstIpxIpxrwanh = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwanh.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrwanh.setDescription('IPXr-WAN-hop-errors')
staIpxstIpxIpxrwans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwans.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrwans.setDescription('IPXr-WAN-socket-errors')
staIpxstIpxIpxrwann = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwann.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrwann.setDescription('IPXr-WAN-net-errors')
staIpxstIpxIpxrwanb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwanb.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrwanb.setDescription('IPXr-WAN-backroute-errors')
staIpxstIpxIpxrwand = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrwand.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrwand.setDescription('IPXr-WAN-down-errors')
staIpxstIpxIpxrinte = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxIpxrinte.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxIpxrinte.setDescription('IPXr-intern-rx')
staIpxstIpxNetworks = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17), )
if mibBuilder.loadTexts: staIpxstIpxNetworks.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworks.setDescription('Networks')
staIpxstIpxNetworksCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstIpxNetworksRem"))
if mibBuilder.loadTexts: staIpxstIpxNetworksCols.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksCols.setDescription('entry in table')
staIpxstIpxNetworksRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksRem.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksRem.setDescription('Remote-ID')
staIpxstIpxNetworksNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksNet.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksNet.setDescription('Network')
staIpxstIpxNetworksBin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("auto", 15), ("auto", 0), ("ii", 1), ("dot802-3", 2), ("dot802-2", 4), ("snap", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksBin.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksBin.setDescription('Binding')
staIpxstIpxNetworksPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("filter", 0), ("route", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksPro.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksPro.setDescription('Propagate')
staIpxstIpxNetworksBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksBac.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksBac.setDescription('Backoff')
staIpxstIpxNetworksTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksTim.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksTim.setDescription('Time')
staIpxstIpxNetworksNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 17, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxNetworksNod.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxNetworksNod.setDescription('Node-ID')
staIpxstIpxEstablis = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18), )
if mibBuilder.loadTexts: staIpxstIpxEstablis.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablis.setDescription('Establish-table')
staIpxstIpxEstablisCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1), ).setIndexNames((0, "ELSA-MIB", "staIpxstIpxEstablisTime"))
if mibBuilder.loadTexts: staIpxstIpxEstablisCols.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisCols.setDescription('entry in table')
staIpxstIpxEstablisTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisTime.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisTime.setDescription('Time')
staIpxstIpxEstablisDestnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisDestnet.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisDestnet.setDescription('Dest.-net')
staIpxstIpxEstablisDestnode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisDestnode.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisDestnode.setDescription('Dest.-node')
staIpxstIpxEstablisDestsock = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisDestsock.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisDestsock.setDescription('Dest.-socket')
staIpxstIpxEstablisSourcene = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisSourcene.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisSourcene.setDescription('Source-net')
staIpxstIpxEstablisSourceno = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisSourceno.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisSourceno.setDescription('Source-node')
staIpxstIpxEstablisSourceso = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 18, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIpxstIpxEstablisSourceso.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxEstablisSourceso.setDescription('Source-socket')
staIpxstIpxDeleteva = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 6, 19), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstIpxDeleteva.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstIpxDeleteva.setDescription('Delete-values')
staIpxstDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 8, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staIpxstDel.setStatus('mandatory')
if mibBuilder.loadTexts: staIpxstDel.setDescription('Delete-values')
staTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9))
staTcpipArp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1))
staTcpipArpArplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArplanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpArplanr.setDescription('ARP-LAN-rx')
staTcpipArpArplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArplant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpArplant.setDescription('ARP-LAN-tx')
staTcpipArpArplane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArplane.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpArplane.setDescription('ARP-LAN-errors')
staTcpipArpArpwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArpwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpArpwanr.setDescription('ARP-WAN-rx')
staTcpipArpArpwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArpwant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpArpwant.setDescription('ARP-WAN-tx')
staTcpipArpArpwane = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpArpwane.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpArpwane.setDescription('ARP-WAN-errors')
staTcpipArpTablear = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7), )
if mibBuilder.loadTexts: staTcpipArpTablear.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpTablear.setDescription('Table-ARP')
staTcpipArpTablearCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipArpTablearIpa"))
if mibBuilder.loadTexts: staTcpipArpTablearCols.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpTablearCols.setDescription('entry in table')
staTcpipArpTablearIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpTablearIpa.setDescription('IP-address')
staTcpipArpTablearNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearNod.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpTablearNod.setDescription('Node-ID')
staTcpipArpTablearLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearLas.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpTablearLas.setDescription('Last-access')
staTcpipArpTablearCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("local", 2), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipArpTablearCon.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpTablearCon.setDescription('Connect')
staTcpipArpDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 1, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipArpDeletev.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipArpDeletev.setDescription('Delete-values')
staTcpipIps = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2))
staTcpipIpsIplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIplanrx.setDescription('IP-LAN-rx')
staTcpipIpsIplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplantx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIplantx.setDescription('IP-LAN-tx')
staTcpipIpsIplanchecksumerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanchecksumerrors.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIplanchecksumerrors.setDescription('IP-LAN-checksum-errors')
staTcpipIpsIplanserviceerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanserviceerrors.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIplanserviceerrors.setDescription('IP-LAN-service-errors')
staTcpipIpsIplanfragmentationer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentationer.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentationer.setDescription('IP-LAN-fragmentation-error')
staTcpipIpsIplanfragmentations = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentations.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentations.setDescription('IP-LAN-fragmentations')
staTcpipIpsIplanfragmentationsf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentationsf.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIplanfragmentationsf.setDescription('IP-LAN-fragmentations-forced')
staTcpipIpsIpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwanrx.setDescription('IP-WAN-rx')
staTcpipIpsIpwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwantx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwantx.setDescription('IP-WAN-tx')
staTcpipIpsIpwanchecksumerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanchecksumerrors.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwanchecksumerrors.setDescription('IP-WAN-checksum-errors')
staTcpipIpsIpwanserviceerrors = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanserviceerrors.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwanserviceerrors.setDescription('IP-WAN-service-errors')
staTcpipIpsIpwanfragmentationer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentationer.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentationer.setDescription('IP-WAN-fragmentation-error')
staTcpipIpsIpwanfragmentations = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentations.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentations.setDescription('IP-WAN-fragmentations')
staTcpipIpsIpwanfragmentationsf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentationsf.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwanfragmentationsf.setDescription('IP-WAN-fragmentations-forced')
staTcpipIpsIpwanrxdisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIpsIpwanrxdisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsIpwanrxdisconnect.setDescription('IP-WAN-rx-disconnect')
staTcpipIpsDeletevalues = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 2, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipIpsDeletevalues.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIpsDeletevalues.setDescription('Delete-values')
staTcpipIcm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3))
staTcpipIcmIcmplanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmplanr.setDescription('ICMP-LAN-rx')
staTcpipIcmIcmplant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmplant.setDescription('ICMP-LAN-tx')
staTcpipIcmIcmplanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplanc.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmplanc.setDescription('ICMP-LAN-checksum-errors')
staTcpipIcmIcmplans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmplans.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmplans.setDescription('ICMP-LAN-service-errors')
staTcpipIcmIcmpwanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmpwanr.setDescription('ICMP-WAN-rx')
staTcpipIcmIcmpwant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmpwant.setDescription('ICMP-WAN-tx')
staTcpipIcmIcmpwanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwanc.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmpwanc.setDescription('ICMP-WAN-checksum-errors')
staTcpipIcmIcmpwans = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipIcmIcmpwans.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmIcmpwans.setDescription('ICMP-WAN-service-errors')
staTcpipIcmDeleteva = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipIcmDeleteva.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipIcmDeleteva.setDescription('Delete-values')
staTcpipTft = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4))
staTcpipTftTftplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrx.setDescription('TFTP-LAN-rx')
staTcpipTftTftplanrxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrxr.setDescription('TFTP-LAN-rx-read-request')
staTcpipTftTftplanrxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxw.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrxw.setDescription('TFTP-LAN-rx-write-request')
staTcpipTftTftplanrxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxd.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrxd.setDescription('TFTP-LAN-rx-data')
staTcpipTftTftplanrxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrxa.setDescription('TFTP-LAN-rx-ack.')
staTcpipTftTftplanrxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxo.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrxo.setDescription('TFTP-LAN-rx-option-ack.')
staTcpipTftTftplanrxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxe.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrxe.setDescription('TFTP-LAN-rx-errors')
staTcpipTftTftplanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplanrxb.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplanrxb.setDescription('TFTP-LAN-rx-bad-packets')
staTcpipTftTftplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplantx.setDescription('TFTP-LAN-tx')
staTcpipTftTftplantxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxd.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplantxd.setDescription('TFTP-LAN-tx-data')
staTcpipTftTftplantxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplantxa.setDescription('TFTP-LAN-tx-ack.')
staTcpipTftTftplantxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxo.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplantxo.setDescription('TFTP-LAN-tx-option-ack.')
staTcpipTftTftplantxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxe.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplantxe.setDescription('TFTP-LAN-tx-errors')
staTcpipTftTftplantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplantxr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplantxr.setDescription('TFTP-LAN-tx-repeats')
staTcpipTftTftplancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftplancon.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftplancon.setDescription('TFTP-LAN-connections')
staTcpipTftTftpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrx.setDescription('TFTP-WAN-rx')
staTcpipTftTftpwanrxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrxr.setDescription('TFTP-WAN-rx-read-request')
staTcpipTftTftpwanrxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxw.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrxw.setDescription('TFTP-WAN-rx-write-request')
staTcpipTftTftpwanrxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxd.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrxd.setDescription('TFTP-WAN-rx-data')
staTcpipTftTftpwanrxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrxa.setDescription('TFTP-WAN-rx-ack.')
staTcpipTftTftpwanrxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxo.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrxo.setDescription('TFTP-WAN-rx-option-ack.')
staTcpipTftTftpwanrxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxe.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrxe.setDescription('TFTP-WAN-rx-errors')
staTcpipTftTftpwanrxb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwanrxb.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwanrxb.setDescription('TFTP-WAN-rx-bad-packets')
staTcpipTftTftpwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwantx.setDescription('TFTP-WAN-tx')
staTcpipTftTftpwantxd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxd.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwantxd.setDescription('TFTP-WAN-tx-data')
staTcpipTftTftpwantxa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwantxa.setDescription('TFTP-WAN-tx-ack.')
staTcpipTftTftpwantxo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxo.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwantxo.setDescription('TFTP-WAN-tx-option-ack.')
staTcpipTftTftpwantxe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxe.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwantxe.setDescription('TFTP-WAN-tx-errors')
staTcpipTftTftpwantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwantxr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwantxr.setDescription('TFTP-WAN-tx-repeats')
staTcpipTftTftpwancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTftTftpwancon.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftTftpwancon.setDescription('TFTP-WAN-connections')
staTcpipTftDeletevalu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 4, 31), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipTftDeletevalu.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTftDeletevalu.setDescription('Delete-values')
staTcpipTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5))
staTcpipTcpTcplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcplanrx.setDescription('TCP-LAN-rx')
staTcpipTcpTcplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplantx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcplantx.setDescription('TCP-LAN-tx')
staTcpipTcpTcplantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplantxr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcplantxr.setDescription('TCP-LAN-tx-repeats')
staTcpipTcpTcplanche = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplanche.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcplanche.setDescription('TCP-LAN-checksum-errors')
staTcpipTcpTcplanser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplanser.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcplanser.setDescription('TCP-LAN-service-errors')
staTcpipTcpTcplancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcplancon.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcplancon.setDescription('TCP-LAN-connections')
staTcpipTcpTcpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcpwanrx.setDescription('TCP-WAN-rx')
staTcpipTcpTcpwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwantx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcpwantx.setDescription('TCP-WAN-tx')
staTcpipTcpTcpwantxr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwantxr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcpwantxr.setDescription('TCP-WAN-tx-repeats')
staTcpipTcpTcpwanche = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwanche.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcpwanche.setDescription('TCP-WAN-checksum-errors')
staTcpipTcpTcpwanser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwanser.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcpwanser.setDescription('TCP-WAN-service-errors')
staTcpipTcpTcpwancon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipTcpTcpwancon.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpTcpwancon.setDescription('TCP-WAN-connections')
staTcpipTcpDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 5, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipTcpDeleteval.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipTcpDeleteval.setDescription('Delete-values')
staTcpipDhc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6))
staTcpipDhcDhcplanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcplanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcplanrx.setDescription('DHCP-LAN-rx')
staTcpipDhcDhcplantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcplantx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcplantx.setDescription('DHCP-LAN-tx')
staTcpipDhcDhcpwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpwanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcpwanrx.setDescription('DHCP-WAN-rx')
staTcpipDhcDhcpdisca = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpdisca.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcpdisca.setDescription('DHCP-discard')
staTcpipDhcDhcprxdis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxdis.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcprxdis.setDescription('DHCP-rx-discover')
staTcpipDhcDhcprxreq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxreq.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcprxreq.setDescription('DHCP-rx-request')
staTcpipDhcDhcprxdec = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxdec.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcprxdec.setDescription('DHCP-rx-decline')
staTcpipDhcDhcprxinf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxinf.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcprxinf.setDescription('DHCP-rx-inform')
staTcpipDhcDhcprxrel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcprxrel.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcprxrel.setDescription('DHCP-rx-release')
staTcpipDhcDhcptxoff = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcptxoff.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcptxoff.setDescription('DHCP-tx-offer')
staTcpipDhcDhcptxack = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcptxack.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcptxack.setDescription('DHCP-tx-ack.')
staTcpipDhcDhcptxnak = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcptxnak.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcptxnak.setDescription('DHCP-tx-nak.')
staTcpipDhcDchpserve = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDchpserve.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDchpserve.setDescription('DchP-server-err.')
staTcpipDhcDhcpassig = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpassig.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcpassig.setDescription('DHCP-assigned')
staTcpipDhcDhcpmacco = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcDhcpmacco.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDhcpmacco.setDescription('DHCP-MAC-conflicts')
staTcpipDhcTabledhcp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16), )
if mibBuilder.loadTexts: staTcpipDhcTabledhcp.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcTabledhcp.setDescription('Table-DHCP')
staTcpipDhcTabledhcpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipDhcTabledhcpIpa"))
if mibBuilder.loadTexts: staTcpipDhcTabledhcpCols.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcTabledhcpCols.setDescription('entry in table')
staTcpipDhcTabledhcpIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcTabledhcpIpa.setDescription('IP-Address')
staTcpipDhcTabledhcpNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpNod.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcTabledhcpNod.setDescription('Node-ID')
staTcpipDhcTabledhcpTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpTim.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcTabledhcpTim.setDescription('Timeout')
staTcpipDhcTabledhcpHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpHos.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcTabledhcpHos.setDescription('Hostname')
staTcpipDhcTabledhcpTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 4, 8, 32, 2048))).clone(namedValues=NamedValues(("new", 1), ("new", 2), ("dyn", 16), ("unkn", 4), ("stat", 8), ("bootp", 32), ("relay", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcTabledhcpTyp.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcTabledhcpTyp.setDescription('Type')
staTcpipDhcServerfla = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDhcServerfla.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcServerfla.setDescription('Server-flags')
staTcpipDhcDeleteval = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 6, 18), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipDhcDeleteval.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDhcDeleteval.setDescription('Delete-values')
staTcpipDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipDel.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDel.setDescription('Delete-values')
staTcpipNet = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8))
staTcpipNetLanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetLanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetLanr.setDescription('LAN-Rx')
staTcpipNetLant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetLant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetLant.setDescription('LAN-Tx')
staTcpipNetWanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetWanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetWanr.setDescription('WAN-Rx')
staTcpipNetWant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetWant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetWant.setDescription('WAN-Tx')
staTcpipNetRegi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRegi.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRegi.setDescription('Registers')
staTcpipNetConf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetConf.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetConf.setDescription('Conflicts')
staTcpipNetRele = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRele.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRele.setDescription('Releases')
staTcpipNetRefr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRefr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRefr.setDescription('Refreshs')
staTcpipNetTime = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetTime.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetTime.setDescription('Timeouts')
staTcpipNetHost = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetHost.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetHost.setDescription('Hosts')
staTcpipNetGrou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetGrou.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetGrou.setDescription('Groups')
staTcpipNetBnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetBnod.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetBnod.setDescription('B-Nodes')
staTcpipNetPnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetPnod.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetPnod.setDescription('P-Nodes')
staTcpipNetMnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetMnod.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetMnod.setDescription('M-Nodes')
staTcpipNetWnod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetWnod.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetWnod.setDescription('W-Nodes')
staTcpipNetRemo = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16), )
if mibBuilder.loadTexts: staTcpipNetRemo.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRemo.setDescription('Remote-table')
staTcpipNetRemoCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipNetRemoNam"))
if mibBuilder.loadTexts: staTcpipNetRemoCols.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRemoCols.setDescription('entry in table')
staTcpipNetRemoNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoNam.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRemoNam.setDescription('Name')
staTcpipNetRemoTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("workstation", 1), ("router", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoTyp.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRemoTyp.setDescription('Type')
staTcpipNetRemoBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoBac.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRemoBac.setDescription('Backoff')
staTcpipNetRemoTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipNetRemoTim.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetRemoTim.setDescription('Time')
staTcpipNetDele = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTcpipNetDele.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipNetDele.setDescription('Delete-values')
staTcpipDns = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9))
staTcpipDnsLanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsLanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsLanr.setDescription('LAN-Rx')
staTcpipDnsLant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsLant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsLant.setDescription('LAN-Tx')
staTcpipDnsWanr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsWanr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsWanr.setDescription('WAN-Rx')
staTcpipDnsWant = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsWant.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsWant.setDescription('WAN-Tx')
staTcpipDnsForw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsForw.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsForw.setDescription('Forwarded')
staTcpipDnsErro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsErro.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsErro.setDescription('Errors')
staTcpipDnsDnsa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsDnsa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsDnsa.setDescription('DNS-access')
staTcpipDnsDhcp = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsDhcp.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsDhcp.setDescription('DHCP-access')
staTcpipDnsNetb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsNetb.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsNetb.setDescription('NetBIOS-access')
staTcpipDnsFilt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsFilt.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsFilt.setDescription('Filter')
staTcpipDnsHitl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11), )
if mibBuilder.loadTexts: staTcpipDnsHitl.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsHitl.setDescription('Hit-list')
staTcpipDnsHitlCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1), ).setIndexNames((0, "ELSA-MIB", "staTcpipDnsHitlDom"))
if mibBuilder.loadTexts: staTcpipDnsHitlCols.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsHitlCols.setDescription('entry in table')
staTcpipDnsHitlDom = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlDom.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsHitlDom.setDescription('Domain')
staTcpipDnsHitlReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlReq.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsHitlReq.setDescription('Requests')
staTcpipDnsHitlTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlTim.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsHitlTim.setDescription('Time')
staTcpipDnsHitlIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipDnsHitlIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsHitlIpa.setDescription('IP-Address')
staTcpipDnsDele = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 9, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTcpipDnsDele.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipDnsDele.setDescription('Delete-values')
staTcpipHtt = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10))
staTcpipHttHttpac = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttpac.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipHttHttpac.setDescription('HTTP-accesses')
staTcpipHttHttpno = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttpno.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipHttHttpno.setDescription('HTTP-notfound-errors')
staTcpipHttHttpau = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttpau.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipHttHttpau.setDescription('HTTP-authentication-errors')
staTcpipHttHttppr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTcpipHttHttppr.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipHttHttppr.setDescription('HTTP-protocol-errors')
staTcpipHttDelete = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 9, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTcpipHttDelete.setStatus('mandatory')
if mibBuilder.loadTexts: staTcpipHttDelete.setDescription('Delete-values')
staIprou = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10))
staIprouIprlanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlanrx.setDescription('IPr-LAN-rx')
staIprouIprlantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlantx.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlantx.setDescription('IPr-LAN-tx')
staIprouIprlanlo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanlo.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlanlo.setDescription('IPr-LAN-local-routings')
staIprouIprlanne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanne.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlanne.setDescription('IPr-LAN-network-errors')
staIprouIprlanro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanro.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlanro.setDescription('IPr-LAN-routing-errors')
staIprouIprlantt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlantt.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlantt.setDescription('IPr-LAN-ttl-errors')
staIprouIprlanfi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlanfi.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlanfi.setDescription('IPr-LAN-filters')
staIprouIprlandi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprlandi.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprlandi.setDescription('IPr-LAN-discards')
staIprouIprwanrx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanrx.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprwanrx.setDescription('IPr-WAN-rx')
staIprouIprwantx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwantx.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprwantx.setDescription('IPr-WAN-tx')
staIprouIprwanne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanne.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprwanne.setDescription('IPr-WAN-network-errors')
staIprouIprwantt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwantt.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprwantt.setDescription('IPr-WAN-ttl-errors')
staIprouIprwanfi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanfi.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprwanfi.setDescription('IPr-WAN-filters')
staIprouIprwandi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwandi.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprwandi.setDescription('IPr-WAN-discards')
staIprouIprwanty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprwanty.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprwanty.setDescription('IPr-WAN-type-errors')
staIprouIprarper = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouIprarper.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouIprarper.setDescription('IPr-ARP-errors')
staIprouEstablis = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17), )
if mibBuilder.loadTexts: staIprouEstablis.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablis.setDescription('Establish-table')
staIprouEstablisCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1), ).setIndexNames((0, "ELSA-MIB", "staIprouEstablisTim"))
if mibBuilder.loadTexts: staIprouEstablisCols.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablisCols.setDescription('entry in table')
staIprouEstablisTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisTim.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablisTim.setDescription('Time')
staIprouEstablisDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisDes.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablisDes.setDescription('Dest.-address')
staIprouEstablisSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisSrc.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablisSrc.setDescription('Src.-address')
staIprouEstablisPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 2, 3, 8, 62))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("igmp", 2), ("ggt", 3), ("egp", 8), ("cftp", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisPro.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablisPro.setDescription('Prot.')
staIprouEstablisDpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisDpo.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablisDpo.setDescription('D-port')
staIprouEstablisSpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 10, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staIprouEstablisSpo.setStatus('mandatory')
if mibBuilder.loadTexts: staIprouEstablisSpo.setDescription('S-port')
staConfi = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11))
staConfiLanactiv = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLanactiv.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiLanactiv.setDescription('LAN-active-connections')
staConfiLantotal = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLantotal.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiLantotal.setDescription('LAN-total-connections')
staConfiWanactiv = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiWanactiv.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiWanactiv.setDescription('WAN-active-connections')
staConfiWantotal = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiWantotal.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiWantotal.setDescription('WAN-total-connections')
staConfiOutbanda = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiOutbanda.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiOutbanda.setDescription('Outband-active-connections')
staConfiOutbandt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiOutbandt.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiOutbandt.setDescription('Outband-total-connections')
staConfiOutbandb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiOutbandb.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiOutbandb.setDescription('Outband-bitrate')
staConfiLoginerr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLoginerr.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiLoginerr.setDescription('Login-errors')
staConfiLoginloc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLoginloc.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiLoginloc.setDescription('Login-locks')
staConfiLoginrej = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConfiLoginrej.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiLoginrej.setDescription('Login-rejects')
staConfiDeleteva = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 11, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staConfiDeleteva.setStatus('mandatory')
if mibBuilder.loadTexts: staConfiDeleteva.setDescription('Delete-values')
staQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12))
staQueueLanheap = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueLanheap.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueLanheap.setDescription('LAN-heap-packets')
staQueueLanqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueLanqueu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueLanqueu.setDescription('LAN-queue-packets')
staQueueWanheap = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueWanheap.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueWanheap.setDescription('WAN-heap-packets')
staQueueWanqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueWanqueu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueWanqueu.setDescription('WAN-queue-packets')
staQueueBridgei = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueBridgei.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueBridgei.setDescription('Bridge-internal-queue-packets')
staQueueBridgee = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueBridgee.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueBridgee.setDescription('Bridge-external-queue-packets')
staQueueArpquer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueArpquer.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueArpquer.setDescription('ARP-query-queue-packets')
staQueueArpqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueArpqueu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueArpqueu.setDescription('ARP-queue-packets')
staQueueIpqueue = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpqueue.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIpqueue.setDescription('IP-queue-packets')
staQueueIpurgen = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpurgen.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIpurgen.setDescription('IP-urgent-queue-packets')
staQueueIcmpque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIcmpque.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIcmpque.setDescription('ICMP-queue-packets')
staQueueTcpqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueTcpqueu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueTcpqueu.setDescription('TCP-queue-packets')
staQueueTftpser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueTftpser.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueTftpser.setDescription('TFTP-server-queue-packets')
staQueueSnmpque = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueSnmpque.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueSnmpque.setDescription('SNMP-queue-packets')
staQueueIpxqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpxqueu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIpxqueu.setDescription('IPX-queue-packets')
staQueueRipquer = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueRipquer.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueRipquer.setDescription('RIP-query-queue-packets')
staQueueSapqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueSapqueu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueSapqueu.setDescription('SAP-queue-packets')
staQueueIpxwatc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpxwatc.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIpxwatc.setDescription('IPX-watchdog-queue-packets')
staQueueSpxwatc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueSpxwatc.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueSpxwatc.setDescription('SPX-watchdog-queue-packets')
staQueueIpxrout = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpxrout.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIpxrout.setDescription('IPX-router-queue-packets')
staQueueProthea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueProthea.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueProthea.setDescription('PROT-heap-packets')
staQueueIprqueu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIprqueu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIprqueu.setDescription('IPR-queue-packets')
staQueueDhcpser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDhcpser.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueDhcpser.setDescription('DHCP-server-queue-packets')
staQueueDhcpcli = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDhcpcli.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueDhcpcli.setDescription('DHCP-client-queue-packets')
staQueueIprripq = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIprripq.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIprripq.setDescription('IPR-RIP-queue-packets')
staQueueDnstxqu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDnstxqu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueDnstxqu.setDescription('DNS-TX-queue-packets')
staQueueDnsrxqu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueDnsrxqu.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueDnsrxqu.setDescription('DNS-RX-queue-packets')
staQueueIpmasqt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpmasqt.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIpmasqt.setDescription('IP-Masq-TX-queue-packets')
staQueueIpmasqr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 12, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staQueueIpmasqr.setStatus('mandatory')
if mibBuilder.loadTexts: staQueueIpmasqr.setDescription('IP-Masq-RX-queue-packets')
staConns = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13), )
if mibBuilder.loadTexts: staConns.setStatus('mandatory')
if mibBuilder.loadTexts: staConns.setDescription('Conn.-statistics')
staConnsCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1), ).setIndexNames((0, "ELSA-MIB", "staConnsIfc"))
if mibBuilder.loadTexts: staConnsCols.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsCols.setDescription('entry in table')
staConnsIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsIfc.setDescription('Ifc')
staConnsConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsConn.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsConn.setDescription('Connections')
staConnsActi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsActi.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsActi.setDescription('active')
staConnsPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsPass.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsPass.setDescription('passive')
staConnsErro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsErro.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsErro.setDescription('Errors')
staConnsCont = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsCont.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsCont.setDescription('Con.-Time')
staConnsChar = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnsChar.setStatus('mandatory')
if mibBuilder.loadTexts: staConnsChar.setDescription('Charge')
staInfoc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14), )
if mibBuilder.loadTexts: staInfoc.setStatus('mandatory')
if mibBuilder.loadTexts: staInfoc.setDescription('Info-connection')
staInfocCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1), ).setIndexNames((0, "ELSA-MIB", "staInfocIfc"))
if mibBuilder.loadTexts: staInfocCols.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocCols.setDescription('entry in table')
staInfocIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocIfc.setDescription('Ifc')
staInfocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocSta.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocSta.setDescription('Status')
staInfocMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 9))).clone(namedValues=NamedValues(("unknown", 0), ("active", 4), ("passive", 5), ("callback", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocMod.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocMod.setDescription('Mode')
staInfocDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocDia.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocDia.setDescription('Dialup-remote')
staInfocDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocDev.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocDev.setDescription('Device-name')
staInfocB1d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocB1d.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocB1d.setDescription('B1-DT')
staInfocB2d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staInfocB2d.setStatus('mandatory')
if mibBuilder.loadTexts: staInfocB2d.setDescription('B2-DT')
staLayer = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15), )
if mibBuilder.loadTexts: staLayer.setStatus('mandatory')
if mibBuilder.loadTexts: staLayer.setDescription('Layer-connection')
staLayerCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1), ).setIndexNames((0, "ELSA-MIB", "staLayerIfc"))
if mibBuilder.loadTexts: staLayerCols.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerCols.setDescription('entry in table')
staLayerIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerIfc.setDescription('Ifc')
staLayerWanl = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerWanl.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerWanl.setDescription('WAN-layer')
staLayerEnca = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("ether", 0), ("trans", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerEnca.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerEnca.setDescription('Encaps.')
staLayerLay3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 0, 255))).clone(namedValues=NamedValues(("ppp", 4), ("appp", 5), ("scppp", 6), ("scappp", 7), ("sctrans", 8), ("elsa", 0), ("trans", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerLay3.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerLay3.setDescription('Lay-3')
staLayerLay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 5, 0, 1))).clone(namedValues=NamedValues(("sscop", 6), ("pppoe", 5), ("x75lapb", 0), ("trans", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerLay2.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerLay2.setDescription('Lay-2')
staLayerL2op = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2))).clone(namedValues=NamedValues(("none", 255), ("compr", 0), ("bundle", 1), ("bnd-and-cmpr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerL2op.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerL2op.setDescription('L2-Opt.')
staLayerLay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 0, 1, 3, 67, 131, 5))).clone(namedValues=NamedValues(("aal-5", 2), ("eth-10", 4), ("hdlc64k", 0), ("hdlc56k", 1), ("v110-9k6", 3), ("v110-19k2", 67), ("v110-38k4", 131), ("modem", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerLay1.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerLay1.setDescription('Lay-1')
staLayerL1pa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("none", 0), ("v21-300", 1), ("v23-600", 2), ("v23-1200", 3), ("v22-1200", 4), ("v22bis-2400", 5), ("v32qam-4800", 6), ("v32qam-9600", 7), ("v32bis-7200", 8), ("v32tcm-9600", 9), ("v32bis-12000", 10), ("v32bis-14400", 11), ("v34-2400", 12), ("v34-4800", 13), ("v34-7200", 14), ("v34-9600", 15), ("v34-12000", 16), ("v34-14400", 17), ("v34-16800", 18), ("v34-19200", 19), ("v34-21600", 20), ("v34-24000", 21), ("v34-26400", 22), ("v34-28800", 23), ("v34-31200", 24), ("v34-33600", 25), ("v90-28000", 26), ("v90-29333", 27), ("v90-30667", 28), ("v90-32000", 29), ("v90-33333", 30), ("v90-34667", 31), ("v90-36000", 32), ("v90-37333", 33), ("v90-38667", 34), ("v90-40000", 35), ("v90-41333", 36), ("v90-42667", 37), ("v90-44000", 38), ("v90-45333", 39), ("v90-46667", 40), ("v90-48000", 41), ("v90-49333", 42), ("v90-50667", 43), ("v90-52000", 44), ("v90-53333", 45), ("v90-54667", 46), ("v90-56000", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLayerL1pa.setStatus('mandatory')
if mibBuilder.loadTexts: staLayerL1pa.setDescription('L1-Parameter')
staCalli = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16), )
if mibBuilder.loadTexts: staCalli.setStatus('mandatory')
if mibBuilder.loadTexts: staCalli.setDescription('Call-info-table')
staCalliCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1), ).setIndexNames((0, "ELSA-MIB", "staCalliSys"))
if mibBuilder.loadTexts: staCalliCols.setStatus('mandatory')
if mibBuilder.loadTexts: staCalliCols.setDescription('entry in table')
staCalliSys = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliSys.setStatus('mandatory')
if mibBuilder.loadTexts: staCalliSys.setDescription('System-time')
staCalliIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staCalliIfc.setDescription('Ifc')
staCalliCli = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliCli.setStatus('mandatory')
if mibBuilder.loadTexts: staCalliCli.setDescription('CLIP-Caller')
staCalliDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliDia.setStatus('mandatory')
if mibBuilder.loadTexts: staCalliDia.setDescription('Dial-Caller')
staCalliCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 3, 67, 131, 5, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 255), ("hdlc64k", 0), ("hdlc56k", 1), ("v110-9k6", 3), ("v110-19k2", 67), ("v110-38k4", 131), ("modem", 5), ("a-3-1khz", 13), ("speech", 14), ("fax-g2-3", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliCap.setStatus('mandatory')
if mibBuilder.loadTexts: staCalliCap.setDescription('Capab.')
staCalliBch = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staCalliBch.setStatus('mandatory')
if mibBuilder.loadTexts: staCalliBch.setDescription('B-chan.')
staRemot = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17), )
if mibBuilder.loadTexts: staRemot.setStatus('mandatory')
if mibBuilder.loadTexts: staRemot.setDescription('Remote-stat.')
staRemotCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1), ).setIndexNames((0, "ELSA-MIB", "staRemotConns"))
if mibBuilder.loadTexts: staRemotCols.setStatus('mandatory')
if mibBuilder.loadTexts: staRemotCols.setDescription('entry in table')
staRemotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotConns.setStatus('mandatory')
if mibBuilder.loadTexts: staRemotConns.setDescription('Conn.-start')
staRemotRemot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotRemot.setStatus('mandatory')
if mibBuilder.loadTexts: staRemotRemot.setDescription('Remote-ID')
staRemotMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 9))).clone(namedValues=NamedValues(("unknown", 0), ("active", 4), ("passive", 5), ("callback", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotMode.setStatus('mandatory')
if mibBuilder.loadTexts: staRemotMode.setDescription('Mode')
staRemotIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ch01", 1), ("ch02", 2), ("ch03", 3), ("ch04", 4), ("ch05", 5), ("ch06", 6), ("ch07", 7), ("ch08", 8), ("ch09", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staRemotIfc.setDescription('Ifc')
staRemotConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotConnt.setStatus('mandatory')
if mibBuilder.loadTexts: staRemotConnt.setDescription('Conn.-time')
staRemotCharg = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRemotCharg.setStatus('mandatory')
if mibBuilder.loadTexts: staRemotCharg.setDescription('Charge')
staS0bus = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23))
staS0busDin = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1), )
if mibBuilder.loadTexts: staS0busDin.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busDin.setDescription('D-info')
staS0busDinCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1), ).setIndexNames((0, "ELSA-MIB", "staS0busDinCha"))
if mibBuilder.loadTexts: staS0busDinCols.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busDinCols.setDescription('entry in table')
staS0busDinCha = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinCha.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busDinCha.setDescription('Channel')
staS0busDinPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("dss1", 1), ("tr1-6", 2), ("p2p-dss1", 4), ("auto", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinPro.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busDinPro.setDescription('Protocol')
staS0busDinLay = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinLay.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busDinLay.setDescription('Layer-2')
staS0busDinTei = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinTei.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busDinTei.setDescription('TEI')
staS0busDinS0a = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busDinS0a.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busDinS0a.setDescription('S0-activation')
staS0busD2s = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3), )
if mibBuilder.loadTexts: staS0busD2s.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busD2s.setDescription('D2-statistics')
staS0busD2sCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1), ).setIndexNames((0, "ELSA-MIB", "staS0busD2sCha"))
if mibBuilder.loadTexts: staS0busD2sCols.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busD2sCols.setDescription('entry in table')
staS0busD2sCha = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-1", 2), ("s0-2", 3), ("s0-2", 4), ("s0-3", 5), ("s0-3", 6), ("s0-4", 7), ("s0-4", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sCha.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busD2sCha.setDescription('Channel')
staS0busD2sTei = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128))).clone(namedValues=NamedValues(("none", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sTei.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busD2sTei.setDescription('TEI')
staS0busD2sL2a = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sL2a.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busD2sL2a.setDescription('L2-activation')
staS0busD2sCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 23, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staS0busD2sCon.setStatus('mandatory')
if mibBuilder.loadTexts: staS0busD2sCon.setDescription('Connections')
staChann = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19), )
if mibBuilder.loadTexts: staChann.setStatus('mandatory')
if mibBuilder.loadTexts: staChann.setDescription('Channel-statistics')
staChannCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1), ).setIndexNames((0, "ELSA-MIB", "staChannChan"))
if mibBuilder.loadTexts: staChannCols.setStatus('mandatory')
if mibBuilder.loadTexts: staChannCols.setDescription('entry in table')
staChannChan = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("s0-1-err", 1), ("s0-1-b1", 2), ("s0-1-b2", 3), ("ab-err", 4), ("ab-1", 5), ("ab-2", 6), ("ab-3", 7), ("ab-4", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannChan.setStatus('mandatory')
if mibBuilder.loadTexts: staChannChan.setDescription('Chan.')
staChannPlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannPlci.setStatus('mandatory')
if mibBuilder.loadTexts: staChannPlci.setDescription('PLCI')
staChannBus = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannBus.setStatus('mandatory')
if mibBuilder.loadTexts: staChannBus.setDescription('Bus')
staChannState = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannState.setStatus('mandatory')
if mibBuilder.loadTexts: staChannState.setDescription('State')
staChannApp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("none", 0), ("router", 1), ("capi", 2), ("a-b", 3), ("time-module", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannApp.setStatus('mandatory')
if mibBuilder.loadTexts: staChannApp.setDescription('App')
staChannMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unk", 0), ("act", 1), ("pas", 2), ("perm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannMode.setStatus('mandatory')
if mibBuilder.loadTexts: staChannMode.setDescription('Mode')
staChannCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staChannCause.setStatus('mandatory')
if mibBuilder.loadTexts: staChannCause.setDescription('Cause')
staChannNumbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannNumbe.setStatus('mandatory')
if mibBuilder.loadTexts: staChannNumbe.setDescription('Number')
staChannSubad = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannSubad.setStatus('mandatory')
if mibBuilder.loadTexts: staChannSubad.setDescription('Subaddress')
staChannCharg = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannCharg.setStatus('mandatory')
if mibBuilder.loadTexts: staChannCharg.setDescription('Charge')
staChannConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannConns.setStatus('mandatory')
if mibBuilder.loadTexts: staChannConns.setDescription('Conn.-start')
staChannConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannConnt.setStatus('mandatory')
if mibBuilder.loadTexts: staChannConnt.setDescription('Conn.-time')
staChannExtra = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannExtra.setStatus('mandatory')
if mibBuilder.loadTexts: staChannExtra.setDescription('Extra')
staChannIsdnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 19, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChannIsdnd.setStatus('mandatory')
if mibBuilder.loadTexts: staChannIsdnd.setDescription('ISDN-display')
staTimes = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21))
staTimesCur = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesCur.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesCur.setDescription('Current-time')
staTimesSou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 0))).clone(namedValues=NamedValues(("manual", 1), ("isdn", 2), ("lan", 3), ("ram", 4), ("lanconfig", 8), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesSou.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesSou.setDescription('Source')
staTimesSet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesSet.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesSet.setDescription('Setup')
staTimesIsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4))
staTimesIsdConne = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdConne.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesIsdConne.setDescription('Connection')
staTimesIsdInfor = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdInfor.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesIsdInfor.setDescription('Information')
staTimesIsdInfoe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdInfoe.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesIsdInfoe.setDescription('Info-error')
staTimesIsdUnits = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTimesIsdUnits.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesIsdUnits.setDescription('Units')
staTimesIsdDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 21, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staTimesIsdDelet.setStatus('mandatory')
if mibBuilder.loadTexts: staTimesIsdDelet.setDescription('Delete-values')
staLcrst = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22))
staLcrstTot = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstTot.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstTot.setDescription('Total-calls')
staLcrstFou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstFou.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstFou.setDescription('Found-events')
staLcrstNot = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstNot.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstNot.setDescription('Notfound-errors')
staLcrstMis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstMis.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstMis.setDescription('Missingtime-errors')
staLcrstPro = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6), )
if mibBuilder.loadTexts: staLcrstPro.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstPro.setDescription('Provider-statistics')
staLcrstProCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1), ).setIndexNames((0, "ELSA-MIB", "staLcrstProPro"))
if mibBuilder.loadTexts: staLcrstProCols.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstProCols.setDescription('entry in table')
staLcrstProPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstProPro.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstProPro.setDescription('Provider')
staLcrstProFai = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstProFai.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstProFai.setDescription('Failures')
staLcrstProSuc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staLcrstProSuc.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstProSuc.setDescription('Successes')
staLcrstDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 22, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staLcrstDel.setStatus('mandatory')
if mibBuilder.loadTexts: staLcrstDel.setDescription('Delete-values')
staCharg = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24))
staChargSpareda = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargSpareda.setStatus('mandatory')
if mibBuilder.loadTexts: staChargSpareda.setDescription('Spare-days/per.')
staChargSpareun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargSpareun.setStatus('mandatory')
if mibBuilder.loadTexts: staChargSpareun.setDescription('Spare-units')
staChargRouteru = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargRouteru.setStatus('mandatory')
if mibBuilder.loadTexts: staChargRouteru.setDescription('Router-units')
staChargTotalun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTotalun.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTotalun.setDescription('Total-units')
staChargSparemi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargSparemi.setStatus('mandatory')
if mibBuilder.loadTexts: staChargSparemi.setDescription('Spare-minutes')
staChargRouterm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargRouterm.setStatus('mandatory')
if mibBuilder.loadTexts: staChargRouterm.setDescription('Router-minutes-active')
staChargTablebu = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5), )
if mibBuilder.loadTexts: staChargTablebu.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTablebu.setDescription('Table-budget')
staChargTablebuCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1), ).setIndexNames((0, "ELSA-MIB", "staChargTablebuIfc"))
if mibBuilder.loadTexts: staChargTablebuCols.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTablebuCols.setDescription('entry in table')
staChargTablebuIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTablebuIfc.setDescription('Ifc')
staChargTablebuBud = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuBud.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTablebuBud.setDescription('Budget-units')
staChargTablebuSpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuSpa.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTablebuSpa.setDescription('Spare-Budget')
staChargTablebuTot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTablebuTot.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTablebuTot.setDescription('Total-units')
staChargTimetab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2), )
if mibBuilder.loadTexts: staChargTimetab.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTimetab.setDescription('Time-table')
staChargTimetabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1), ).setIndexNames((0, "ELSA-MIB", "staChargTimetabIfc"))
if mibBuilder.loadTexts: staChargTimetabCols.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTimetabCols.setDescription('entry in table')
staChargTimetabIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-Modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabIfc.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTimetabIfc.setDescription('Ifc')
staChargTimetabBudgetmi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabBudgetmi.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTimetabBudgetmi.setDescription('Budget-minutes')
staChargTimetabSparemin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabSparemin.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTimetabSparemin.setDescription('Spare-minutes')
staChargTimetabMinutesa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabMinutesa.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTimetabMinutesa.setDescription('Minutes-active')
staChargTimetabMinutesp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staChargTimetabMinutesp.setStatus('mandatory')
if mibBuilder.loadTexts: staChargTimetabMinutesp.setDescription('Minutes-passive')
staChargDeletev = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 24, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staChargDeletev.setStatus('mandatory')
if mibBuilder.loadTexts: staChargDeletev.setDescription('Delete-values')
staDelet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 20), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: staDelet.setStatus('mandatory')
if mibBuilder.loadTexts: staDelet.setDescription('Delete-values')
staDhcpc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32))
staDhcpcState = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("idle", 0), ("init-reboot", 1), ("rebooting", 2), ("init", 3), ("selecting", 4), ("request", 5), ("wait-arp-request", 6), ("bound", 7), ("renewing", 8), ("rebinding", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcState.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcState.setDescription('State')
staDhcpcLeaseti = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcLeaseti.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcLeaseti.setDescription('Lease-time')
staDhcpcYouripa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcYouripa.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcYouripa.setDescription('Your-IP-address')
staDhcpcYouripn = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcYouripn.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcYouripn.setDescription('Your-IP-netmask')
staDhcpcGateway = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcGateway.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcGateway.setDescription('Gateway-IP-address')
staDhcpcServeri = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcServeri.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcServeri.setDescription('Server-IP-address')
staDhcpcSecurit = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcSecurit.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcSecurit.setDescription('Security-server')
staDhcpcTimeoff = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTimeoff.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTimeoff.setDescription('Time-offset')
staDhcpcTimeser = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTimeser.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTimeser.setDescription('Time-server')
staDhcpcTableti = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 10), )
if mibBuilder.loadTexts: staDhcpcTableti.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTableti.setDescription('Table-Time-server')
staDhcpcTabletiCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 10, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTabletiIpa"))
if mibBuilder.loadTexts: staDhcpcTabletiCols.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTabletiCols.setDescription('entry in table')
staDhcpcTabletiIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTabletiIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTabletiIpa.setDescription('IP-address')
staDhcpcTablero = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 11), )
if mibBuilder.loadTexts: staDhcpcTablero.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTablero.setDescription('Table-router')
staDhcpcTableroCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 11, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTableroIpa"))
if mibBuilder.loadTexts: staDhcpcTableroCols.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTableroCols.setDescription('entry in table')
staDhcpcTableroIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTableroIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTableroIpa.setDescription('IP-address')
staDhcpcTablena = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 12), )
if mibBuilder.loadTexts: staDhcpcTablena.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTablena.setDescription('Table-name-server')
staDhcpcTablenaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 12, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTablenaIpa"))
if mibBuilder.loadTexts: staDhcpcTablenaCols.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTablenaCols.setDescription('entry in table')
staDhcpcTablenaIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTablenaIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTablenaIpa.setDescription('IP-address')
staDhcpcTabledo = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 13), )
if mibBuilder.loadTexts: staDhcpcTabledo.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTabledo.setDescription('Table-domain-name-server')
staDhcpcTabledoCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 13, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTabledoIpa"))
if mibBuilder.loadTexts: staDhcpcTabledoCols.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTabledoCols.setDescription('entry in table')
staDhcpcTabledoIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTabledoIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTabledoIpa.setDescription('IP-address')
staDhcpcTablelo = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 14), )
if mibBuilder.loadTexts: staDhcpcTablelo.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTablelo.setDescription('Table-log-server')
staDhcpcTableloCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 14, 1), ).setIndexNames((0, "ELSA-MIB", "staDhcpcTableloIpa"))
if mibBuilder.loadTexts: staDhcpcTableloCols.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTableloCols.setDescription('entry in table')
staDhcpcTableloIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcTableloIpa.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcTableloIpa.setDescription('IP-address')
staDhcpcConfigu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 1, 32, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staDhcpcConfigu.setStatus('mandatory')
if mibBuilder.loadTexts: staDhcpcConfigu.setDescription('Configuration-file')
setName = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setName.setStatus('mandatory')
if mibBuilder.loadTexts: setName.setDescription('Name')
setWanm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2))
setWanmInte = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14), )
if mibBuilder.loadTexts: setWanmInte.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInte.setDescription('Interface-list')
setWanmInteCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmInteIfc"))
if mibBuilder.loadTexts: setWanmInteCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteCols.setDescription('entry in table')
setWanmInteIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setWanmInteIfc.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteIfc.setDescription('Ifc')
setWanmInteProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("dss1", 1), ("ltr6", 2), ("p2p-dss1", 4), ("auto", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteProt.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteProt.setDescription('Protocol')
setWanmInteLlmo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteLlmo.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteLlmo.setDescription('LL-mode')
setWanmInteLlbc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("b1", 1), ("b2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteLlbc.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteLlbc.setDescription('LL-B-chan.')
setWanmInteDial = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteDial.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteDial.setDescription('Dial-prefix')
setWanmInteMaxi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("zero", 2), ("one", 1), ("two", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteMaxi.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteMaxi.setDescription('Max-in-calls')
setWanmInteMaxo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("zero", 2), ("one", 1), ("two", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmInteMaxo.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmInteMaxo.setDescription('Max-out-calls')
setWanmRout = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11), )
if mibBuilder.loadTexts: setWanmRout.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRout.setDescription('Router-interface-list')
setWanmRoutCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmRoutIfc"))
if mibBuilder.loadTexts: setWanmRoutCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRoutCols.setDescription('entry in table')
setWanmRoutIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setWanmRoutIfc.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRoutIfc.setDescription('Ifc')
setWanmRoutMsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRoutMsn.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRoutMsn.setDescription('MSN/EAZ')
setWanmRoutYc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRoutYc.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRoutYc.setDescription('YC.')
setWanmRoutCli = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRoutCli.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRoutCli.setDescription('CLIP')
setWanmName = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2), )
if mibBuilder.loadTexts: setWanmName.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmName.setDescription('Name-list')
setWanmNameCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmNameDev"))
if mibBuilder.loadTexts: setWanmNameCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNameCols.setDescription('entry in table')
setWanmNameDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameDev.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNameDev.setDescription('Device-name')
setWanmNameDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameDia.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNameDia.setDescription('Dialup-remote')
setWanmNameB1d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameB1d.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNameB1d.setDescription('B1-DT')
setWanmNameB2d = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameB2d.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNameB2d.setDescription('B2-DT')
setWanmNameWan = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameWan.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNameWan.setDescription('WAN-layer')
setWanmNameCal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 5, 9, 2))).clone(namedValues=NamedValues(("off", 0), ("auto", 1), ("name", 5), ("elsa", 9), ("looser", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNameCal.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNameCal.setDescription('Callback')
setWanmRoun = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3), )
if mibBuilder.loadTexts: setWanmRoun.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRoun.setDescription('RoundRobin-list')
setWanmRounCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmRounDev"))
if mibBuilder.loadTexts: setWanmRounCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRounCols.setDescription('entry in table')
setWanmRounDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRounDev.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRounDev.setDescription('Device-name')
setWanmRounRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRounRou.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRounRou.setDescription('Round-Robin')
setWanmRounHea = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("last", 0), ("first", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmRounHea.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmRounHea.setDescription('Head')
setWanmLaye = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4), )
if mibBuilder.loadTexts: setWanmLaye.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLaye.setDescription('Layer-list')
setWanmLayeCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmLayeWanl"))
if mibBuilder.loadTexts: setWanmLayeCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLayeCols.setDescription('entry in table')
setWanmLayeWanl = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeWanl.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLayeWanl.setDescription('WAN-layer')
setWanmLayeEnca = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("ether", 0), ("trans", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeEnca.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLayeEnca.setDescription('Encaps.')
setWanmLayeLay3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 0, 255))).clone(namedValues=NamedValues(("ppp", 4), ("appp", 5), ("scppp", 6), ("scappp", 7), ("sctrans", 8), ("elsa", 0), ("trans", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeLay3.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLayeLay3.setDescription('Lay-3')
setWanmLayeLay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x75lapb", 0), ("trans", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeLay2.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLayeLay2.setDescription('Lay-2')
setWanmLayeL2op = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2))).clone(namedValues=NamedValues(("none", 255), ("compr", 0), ("bundle", 1), ("bnd-and-cmpr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeL2op.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLayeL2op.setDescription('L2-Opt.')
setWanmLayeLay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 67, 131))).clone(namedValues=NamedValues(("hdlc64k", 0), ("hdlc56k", 1), ("v110-9k6", 3), ("v110-19k2", 67), ("v110-38k4", 131)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmLayeLay1.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmLayeLay1.setDescription('Lay-1')
setWanmPppl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5), )
if mibBuilder.loadTexts: setWanmPppl.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPppl.setDescription('PPP-list')
setWanmPpplCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmPpplDev"))
if mibBuilder.loadTexts: setWanmPpplCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplCols.setDescription('entry in table')
setWanmPpplDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplDev.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplDev.setDescription('Device-name')
setWanmPpplAut = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 4))).clone(namedValues=NamedValues(("none", 0), ("chap", 8), ("pap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplAut.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplAut.setDescription('Authent.')
setWanmPpplKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplKey.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplKey.setDescription('Key')
setWanmPpplTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplTim.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplTim.setDescription('Time')
setWanmPpplTry = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplTry.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplTry.setDescription('Try')
setWanmPpplCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplCon.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplCon.setDescription('Conf')
setWanmPpplFai = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplFai.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplFai.setDescription('Fail')
setWanmPpplTer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplTer.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplTer.setDescription('Term')
setWanmPpplUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmPpplUse.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmPpplUse.setDescription('Username')
setWanmNumb = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6), )
if mibBuilder.loadTexts: setWanmNumb.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNumb.setDescription('Number-list')
setWanmNumbCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmNumbDia"))
if mibBuilder.loadTexts: setWanmNumbCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNumbCols.setDescription('entry in table')
setWanmNumbDia = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNumbDia.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNumbDia.setDescription('Dialup-remote')
setWanmNumbDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmNumbDev.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmNumbDev.setDescription('Device-name')
setWanmScri = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8), )
if mibBuilder.loadTexts: setWanmScri.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmScri.setDescription('Script-list')
setWanmScriCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setWanmScriDev"))
if mibBuilder.loadTexts: setWanmScriCols.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmScriCols.setDescription('entry in table')
setWanmScriDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmScriDev.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmScriDev.setDescription('Device-name')
setWanmScriScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmScriScr.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmScriScr.setDescription('Script')
setWanmProt = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("name", 1), ("number", 2), ("noname", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmProt.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmProt.setDescription('Protect')
setWanmCbat = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setWanmCbat.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmCbat.setDescription('CB-attempts')
setWanmManu = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 13))
setWanmManuCon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 13, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setWanmManuCon.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmManuCon.setDescription('Connect')
setWanmManuDis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 13, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setWanmManuDis.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmManuDis.setDescription('Disconnect')
setWanmDial = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: setWanmDial.setStatus('mandatory')
if mibBuilder.loadTexts: setWanmDial.setDescription('Dial-prefix')
setAcco = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18))
setAccoOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAccoOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoOpe.setDescription('Operating')
setAccoSav = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAccoSav.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoSav.setDescription('Save-to-flashrom')
setAccoSor = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("time", 0), ("data", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAccoSor.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoSor.setDescription('Sort-by')
setAccoCur = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4), )
if mibBuilder.loadTexts: setAccoCur.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCur.setDescription('Current-user')
setAccoCurCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setAccoCurUsern"))
if mibBuilder.loadTexts: setAccoCurCols.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurCols.setDescription('entry in table')
setAccoCurUsern = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurUsern.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurUsern.setDescription('Username')
setAccoCurMacad = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurMacad.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurMacad.setDescription('MAC-Adr.')
setAccoCurRemot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurRemot.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurRemot.setDescription('Remote-station')
setAccoCurConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("dial-up", 1), ("leased-line", 2), ("dsl-line", 4), ("lancapi", 5), ("ab-ports", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurConnt.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurConnt.setDescription('Conn.-type')
setAccoCurRxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurRxkby.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurRxkby.setDescription('Rx-KBytes')
setAccoCurTxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurTxkby.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurTxkby.setDescription('Tx-KBytes')
setAccoCurTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurTotal.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurTotal.setDescription('Total-time')
setAccoCurConne = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoCurConne.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoCurConne.setDescription('Connections')
setAccoAcc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5), )
if mibBuilder.loadTexts: setAccoAcc.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAcc.setDescription('Accounting-list')
setAccoAccCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setAccoAccUsern"))
if mibBuilder.loadTexts: setAccoAccCols.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccCols.setDescription('entry in table')
setAccoAccUsern = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccUsern.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccUsern.setDescription('Username')
setAccoAccMacad = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccMacad.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccMacad.setDescription('MAC-Adr.')
setAccoAccRemot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccRemot.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccRemot.setDescription('Remote-station')
setAccoAccConnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("dial-up", 1), ("leased-line", 2), ("dsl-line", 4), ("lancapi", 5), ("ab-ports", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccConnt.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccConnt.setDescription('Conn.-type')
setAccoAccRxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccRxkby.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccRxkby.setDescription('Rx-KBytes')
setAccoAccTxkby = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccTxkby.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccTxkby.setDescription('Tx-KBytes')
setAccoAccTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccTotal.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccTotal.setDescription('Total-time')
setAccoAccConne = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAccoAccConne.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoAccConne.setDescription('Connections')
setAccoDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 18, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setAccoDel.setStatus('mandatory')
if mibBuilder.loadTexts: setAccoDel.setDescription('Delete-Accounting-list')
setChar = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3))
setCharDaysper = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCharDaysper.setStatus('mandatory')
if mibBuilder.loadTexts: setCharDaysper.setDescription('Day(s)/period')
setCharBudgetu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCharBudgetu.setStatus('mandatory')
if mibBuilder.loadTexts: setCharBudgetu.setDescription('Budget-units')
setCharSpareun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharSpareun.setStatus('mandatory')
if mibBuilder.loadTexts: setCharSpareun.setDescription('Spare-units')
setCharRouteru = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharRouteru.setStatus('mandatory')
if mibBuilder.loadTexts: setCharRouteru.setDescription('Router-units')
setCharTotalun = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTotalun.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTotalun.setDescription('Total-units')
setCharTablebu = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5), )
if mibBuilder.loadTexts: setCharTablebu.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTablebu.setDescription('Table-budget')
setCharTablebuCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setCharTablebuIfc"))
if mibBuilder.loadTexts: setCharTablebuCols.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTablebuCols.setDescription('entry in table')
setCharTablebuIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-Modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuIfc.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTablebuIfc.setDescription('Ifc')
setCharTablebuBud = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuBud.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTablebuBud.setDescription('Budget-units')
setCharTablebuSpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuSpa.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTablebuSpa.setDescription('Spare-Budget')
setCharTablebuTot = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTablebuTot.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTablebuTot.setDescription('Total-units')
setCharTimetab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7), )
if mibBuilder.loadTexts: setCharTimetab.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTimetab.setDescription('Time-table')
setCharTimetabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setCharTimetabIfc"))
if mibBuilder.loadTexts: setCharTimetabCols.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTimetabCols.setDescription('entry in table')
setCharTimetabIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("router", 1), ("lancapi", 2), ("ab-1", 3), ("ab-2", 4), ("ab-3", 5), ("ab-4", 6), ("time-Modul", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabIfc.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTimetabIfc.setDescription('Ifc')
setCharTimetabBudgetmi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabBudgetmi.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTimetabBudgetmi.setDescription('Budget-minutes')
setCharTimetabSparemin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabSparemin.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTimetabSparemin.setDescription('Spare-minutes')
setCharTimetabMinutesa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabMinutesa.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTimetabMinutesa.setDescription('Minutes-active')
setCharTimetabMinutesp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharTimetabMinutesp.setStatus('mandatory')
if mibBuilder.loadTexts: setCharTimetabMinutesp.setDescription('Minutes-passive')
setCharMinutes = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCharMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: setCharMinutes.setDescription('Minutes-budget')
setCharSparemi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharSparemi.setStatus('mandatory')
if mibBuilder.loadTexts: setCharSparemi.setDescription('Spare-minutes')
setCharRouterm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setCharRouterm.setStatus('mandatory')
if mibBuilder.loadTexts: setCharRouterm.setDescription('Router-minutes-active')
setLanm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4))
setLanmCon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 33, 35))).clone(namedValues=NamedValues(("ten-bt", 32), ("ten-b2", 33), ("auto", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLanmCon.setStatus('mandatory')
if mibBuilder.loadTexts: setLanmCon.setDescription('Connector')
setLanmNod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLanmNod.setStatus('mandatory')
if mibBuilder.loadTexts: setLanmNod.setDescription('Node-ID')
setLanmSpa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLanmSpa.setStatus('mandatory')
if mibBuilder.loadTexts: setLanmSpa.setDescription('Spare-heap')
setBrid = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5))
setBridOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setBridOpe.setDescription('Operating')
setBridRem = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridRem.setStatus('mandatory')
if mibBuilder.loadTexts: setBridRem.setDescription('Remote-ID')
setBridTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3), )
if mibBuilder.loadTexts: setBridTab.setStatus('mandatory')
if mibBuilder.loadTexts: setBridTab.setDescription('Table-bridge')
setBridTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setBridTabNod"))
if mibBuilder.loadTexts: setBridTabCols.setStatus('mandatory')
if mibBuilder.loadTexts: setBridTabCols.setDescription('entry in table')
setBridTabNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setBridTabNod.setStatus('mandatory')
if mibBuilder.loadTexts: setBridTabNod.setDescription('Node-ID')
setBridTabLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setBridTabLas.setStatus('mandatory')
if mibBuilder.loadTexts: setBridTabLas.setDescription('Last-access')
setBridTabFor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setBridTabFor.setStatus('mandatory')
if mibBuilder.loadTexts: setBridTabFor.setDescription('Forward-Flag')
setBridAgi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridAgi.setStatus('mandatory')
if mibBuilder.loadTexts: setBridAgi.setDescription('Aging-minute(s)')
setBridLan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5))
setBridLanBro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanBro.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanBro.setDescription('Broadcast')
setBridLanMul = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanMul.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanMul.setDescription('Multicast')
setBridLanDes = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3))
setBridLanDesFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 0))).clone(namedValues=NamedValues(("positive", 4), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanDesFilterty.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanDesFilterty.setDescription('Filter-type')
setBridLanDesFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 2), )
if mibBuilder.loadTexts: setBridLanDesFilterta.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanDesFilterta.setDescription('Filter-table')
setBridLanDesFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridLanDesFiltertaDes"))
if mibBuilder.loadTexts: setBridLanDesFiltertaCols.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanDesFiltertaCols.setDescription('entry in table')
setBridLanDesFiltertaDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 3, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanDesFiltertaDes.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanDesFiltertaDes.setDescription('Dest.-address')
setBridLanSrc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4))
setBridLanSrcFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 0))).clone(namedValues=NamedValues(("positive", 8), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanSrcFilterty.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanSrcFilterty.setDescription('Filter-type')
setBridLanSrcFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 2), )
if mibBuilder.loadTexts: setBridLanSrcFilterta.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanSrcFilterta.setDescription('Filter-table')
setBridLanSrcFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridLanSrcFiltertaSrc"))
if mibBuilder.loadTexts: setBridLanSrcFiltertaCols.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanSrcFiltertaCols.setDescription('entry in table')
setBridLanSrcFiltertaSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 5, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridLanSrcFiltertaSrc.setStatus('mandatory')
if mibBuilder.loadTexts: setBridLanSrcFiltertaSrc.setDescription('Src.-address')
setBridWan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6))
setBridWanBro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanBro.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanBro.setDescription('Broadcast')
setBridWanMul = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("semi", 2), ("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanMul.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanMul.setDescription('Multicast')
setBridWanDes = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3))
setBridWanDesFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("positive", 1), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanDesFilterty.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanDesFilterty.setDescription('Filter-type')
setBridWanDesFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 2), )
if mibBuilder.loadTexts: setBridWanDesFilterta.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanDesFilterta.setDescription('Filter-table')
setBridWanDesFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridWanDesFiltertaDes"))
if mibBuilder.loadTexts: setBridWanDesFiltertaCols.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanDesFiltertaCols.setDescription('entry in table')
setBridWanDesFiltertaDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 3, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanDesFiltertaDes.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanDesFiltertaDes.setDescription('Dest.-address')
setBridWanSrc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4))
setBridWanSrcFilterty = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 0))).clone(namedValues=NamedValues(("positive", 2), ("negative", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanSrcFilterty.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanSrcFilterty.setDescription('Filter-type')
setBridWanSrcFilterta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 2), )
if mibBuilder.loadTexts: setBridWanSrcFilterta.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanSrcFilterta.setDescription('Filter-table')
setBridWanSrcFiltertaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setBridWanSrcFiltertaDes"))
if mibBuilder.loadTexts: setBridWanSrcFiltertaCols.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanSrcFiltertaCols.setDescription('entry in table')
setBridWanSrcFiltertaDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 5, 6, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setBridWanSrcFiltertaDes.setStatus('mandatory')
if mibBuilder.loadTexts: setBridWanSrcFiltertaDes.setDescription('Dest.-address')
setIpxm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6))
setIpxmOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmOpe.setDescription('Operating')
setIpxmIpx = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmIpx.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmIpx.setDescription('IPX-router')
setIpxmLan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3))
setIpxmLanNetw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanNetw.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanNetw.setDescription('Network')
setIpxmLanBind = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("auto", 0), ("ii", 1), ("dot802-3", 2), ("dot802-2", 4), ("snap", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanBind.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanBind.setDescription('Binding')
setIpxmLanSpxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 0, 1))).clone(namedValues=NamedValues(("filter", 3), ("spoof", 0), ("route", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanSpxw.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanSpxw.setDescription('SPX-watch')
setIpxmLanIpxw = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("spoof", 0), ("route", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanIpxw.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanIpxw.setDescription('IPX-watch')
setIpxmLanNetb = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 1))).clone(namedValues=NamedValues(("spoof", 0), ("route", 3), ("filter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanNetb.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanNetb.setDescription('NetBIOS-watch')
setIpxmLanSock = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6), )
if mibBuilder.loadTexts: setIpxmLanSock.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanSock.setDescription('Socket-filter')
setIpxmLanSockCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmLanSockSta"))
if mibBuilder.loadTexts: setIpxmLanSockCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanSockCols.setDescription('entry in table')
setIpxmLanSockSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanSockSta.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanSockSta.setDescription('Start-socket')
setIpxmLanSockEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanSockEnd.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanSockEnd.setDescription('End-socket')
setIpxmLanLocr = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanLocr.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanLocr.setDescription('Loc.-routing')
setIpxmLanRips = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanRips.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanRips.setDescription('RIP-SAP-scal.')
setIpxmLanLoop = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmLanLoop.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmLanLoop.setDescription('LOOP-prop.')
setIpxmWan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4))
setIpxmWanRou = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1), )
if mibBuilder.loadTexts: setIpxmWanRou.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanRou.setDescription('Routing-table')
setIpxmWanRouCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmWanRouRem"))
if mibBuilder.loadTexts: setIpxmWanRouCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanRouCols.setDescription('entry in table')
setIpxmWanRouRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouRem.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanRouRem.setDescription('Remote-ID')
setIpxmWanRouNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouNet.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanRouNet.setDescription('Network')
setIpxmWanRouBin = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("ii", 1), ("dot802-3", 2), ("dot802-2", 4), ("snap", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouBin.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanRouBin.setDescription('Binding')
setIpxmWanRouPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("filter", 0), ("route", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouPro.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanRouPro.setDescription('Propagate')
setIpxmWanRouBac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanRouBac.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanRouBac.setDescription('Backoff')
setIpxmWanSoc = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2), )
if mibBuilder.loadTexts: setIpxmWanSoc.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanSoc.setDescription('Socket-filter')
setIpxmWanSocCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmWanSocSta"))
if mibBuilder.loadTexts: setIpxmWanSocCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanSocCols.setDescription('entry in table')
setIpxmWanSocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanSocSta.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanSocSta.setDescription('Start-socket')
setIpxmWanSocEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmWanSocEnd.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmWanSocEnd.setDescription('End-socket')
setIpxmRip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5))
setIpxmRipTabl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1), )
if mibBuilder.loadTexts: setIpxmRipTabl.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTabl.setDescription('Table-RIP')
setIpxmRipTablCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmRipTablNet"))
if mibBuilder.loadTexts: setIpxmRipTablCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTablCols.setDescription('entry in table')
setIpxmRipTablNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablNet.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTablNet.setDescription('Network')
setIpxmRipTablHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablHop.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTablHop.setDescription('Hops')
setIpxmRipTablTic = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablTic.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTablTic.setDescription('Tics')
setIpxmRipTablNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablNod.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTablNod.setDescription('Node-ID')
setIpxmRipTablTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablTim.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTablTim.setDescription('Time')
setIpxmRipTablFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmRipTablFla.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipTablFla.setDescription('Flags')
setIpxmRipLanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2), )
if mibBuilder.loadTexts: setIpxmRipLanf.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipLanf.setDescription('LAN-filter-table')
setIpxmRipLanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmRipLanfSta"))
if mibBuilder.loadTexts: setIpxmRipLanfCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipLanfCols.setDescription('entry in table')
setIpxmRipLanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipLanfSta.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipLanfSta.setDescription('Start-net')
setIpxmRipLanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipLanfEnd.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipLanfEnd.setDescription('End-net')
setIpxmRipWanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3), )
if mibBuilder.loadTexts: setIpxmRipWanf.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipWanf.setDescription('WAN-filter-table')
setIpxmRipWanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmRipWanfSta"))
if mibBuilder.loadTexts: setIpxmRipWanfCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipWanfCols.setDescription('entry in table')
setIpxmRipWanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipWanfSta.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipWanfSta.setDescription('Start-net')
setIpxmRipWanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipWanfEnd.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipWanfEnd.setDescription('End-net')
setIpxmRipRout = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipRout.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipRout.setDescription('Routes/Frm')
setIpxmRipAgin = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipAgin.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipAgin.setDescription('Aging-minute(s)')
setIpxmRipSpoo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("trig", 1), ("time", 2), ("pback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipSpoo.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipSpoo.setDescription('Spoofing')
setIpxmRipWanu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmRipWanu.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmRipWanu.setDescription('WAN-update-min.')
setIpxmSap = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6))
setIpxmSapTabl = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1), )
if mibBuilder.loadTexts: setIpxmSapTabl.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTabl.setDescription('Table-SAP')
setIpxmSapTablCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmSapTablTyp"))
if mibBuilder.loadTexts: setIpxmSapTablCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablCols.setDescription('entry in table')
setIpxmSapTablTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablTyp.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablTyp.setDescription('Type')
setIpxmSapTablSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablSer.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablSer.setDescription('Server-name')
setIpxmSapTablNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablNet.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablNet.setDescription('Network')
setIpxmSapTablNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablNod.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablNod.setDescription('Node-ID')
setIpxmSapTablSoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablSoc.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablSoc.setDescription('Socket')
setIpxmSapTablHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablHop.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablHop.setDescription('Hops')
setIpxmSapTablTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablTim.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablTim.setDescription('Time')
setIpxmSapTablFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 128, 64, 32, 16, 8))).clone(namedValues=NamedValues(("local", 2), ("remote", 1), ("direct", 128), ("new", 64), ("down", 32), ("loop", 16), ("spare", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpxmSapTablFla.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapTablFla.setDescription('Flags')
setIpxmSapLanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2), )
if mibBuilder.loadTexts: setIpxmSapLanf.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapLanf.setDescription('LAN-filter-table')
setIpxmSapLanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmSapLanfSta"))
if mibBuilder.loadTexts: setIpxmSapLanfCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapLanfCols.setDescription('entry in table')
setIpxmSapLanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapLanfSta.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapLanfSta.setDescription('Start-service')
setIpxmSapLanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapLanfEnd.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapLanfEnd.setDescription('End-service')
setIpxmSapWanf = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3), )
if mibBuilder.loadTexts: setIpxmSapWanf.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapWanf.setDescription('WAN-filter-table')
setIpxmSapWanfCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIpxmSapWanfSta"))
if mibBuilder.loadTexts: setIpxmSapWanfCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapWanfCols.setDescription('entry in table')
setIpxmSapWanfSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapWanfSta.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapWanfSta.setDescription('Start-service')
setIpxmSapWanfEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapWanfEnd.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapWanfEnd.setDescription('End-service')
setIpxmSapServ = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapServ.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapServ.setDescription('Server/Frm')
setIpxmSapAgin = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapAgin.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapAgin.setDescription('Aging-minute(s)')
setIpxmSapSpoo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("trig", 1), ("time", 2), ("pback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapSpoo.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapSpoo.setDescription('Spoofing')
setIpxmSapWanu = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 6, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpxmSapWanu.setStatus('mandatory')
if mibBuilder.loadTexts: setIpxmSapWanu.setDescription('WAN-update-min.')
setTcpi = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7))
setTcpiOperating = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiOperating.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiOperating.setDescription('Operating')
setTcpiIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIpaddress.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiIpaddress.setDescription('IP-address')
setTcpiIpnetmask = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIpnetmask.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiIpnetmask.setDescription('IP-netmask')
setTcpiIntraneta = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIntraneta.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiIntraneta.setDescription('Intranet-addr.')
setTcpiIntranetm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiIntranetm.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiIntranetm.setDescription('Intranetmask')
setTcpiAccesslis = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6), )
if mibBuilder.loadTexts: setTcpiAccesslis.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiAccesslis.setDescription('Access-list')
setTcpiAccesslisCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setTcpiAccesslisIpa"))
if mibBuilder.loadTexts: setTcpiAccesslisCols.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiAccesslisCols.setDescription('entry in table')
setTcpiAccesslisIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiAccesslisIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiAccesslisIpa.setDescription('IP-address')
setTcpiAccesslisIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiAccesslisIpn.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiAccesslisIpn.setDescription('IP-netmask')
setTcpiDnsdefaul = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiDnsdefaul.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiDnsdefaul.setDescription('DNS-default')
setTcpiDnsbackup = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiDnsbackup.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiDnsbackup.setDescription('DNS-backup')
setTcpiNbnsdefau = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiNbnsdefau.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiNbnsdefau.setDescription('NBNS-default')
setTcpiNbnsbacku = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiNbnsbacku.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiNbnsbacku.setDescription('NBNS-backup')
setTcpiTablearp = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16), )
if mibBuilder.loadTexts: setTcpiTablearp.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTablearp.setDescription('Table-ARP')
setTcpiTablearpCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1), ).setIndexNames((0, "ELSA-MIB", "setTcpiTablearpIpa"))
if mibBuilder.loadTexts: setTcpiTablearpCols.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTablearpCols.setDescription('entry in table')
setTcpiTablearpIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTablearpIpa.setDescription('IP-address')
setTcpiTablearpNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpNod.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTablearpNod.setDescription('Node-ID')
setTcpiTablearpLas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpLas.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTablearpLas.setDescription('Last-access')
setTcpiTablearpCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("local", 2), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTcpiTablearpCon.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTablearpCon.setDescription('Connect')
setTcpiArpagingm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiArpagingm.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiArpagingm.setDescription('ARP-aging-min.')
setTcpiTcpagingm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiTcpagingm.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTcpagingm.setDescription('TCP-aging-min.')
setTcpiTcpmaxcon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 7, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTcpiTcpmaxcon.setStatus('mandatory')
if mibBuilder.loadTexts: setTcpiTcpmaxcon.setDescription('TCP-max.-conn.')
setIpro = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8))
setIproOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setIproOpe.setDescription('Operating')
setIproIpr = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2), )
if mibBuilder.loadTexts: setIproIpr.setStatus('mandatory')
if mibBuilder.loadTexts: setIproIpr.setDescription('IP-routing-table')
setIproIprCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIproIprIpa"))
if mibBuilder.loadTexts: setIproIprCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproIprCols.setDescription('entry in table')
setIproIprIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setIproIprIpa.setDescription('IP-address')
setIproIprIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprIpn.setStatus('mandatory')
if mibBuilder.loadTexts: setIproIprIpn.setDescription('IP-netmask')
setIproIprRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprRou.setStatus('mandatory')
if mibBuilder.loadTexts: setIproIprRou.setDescription('Router-name')
setIproIprDis = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprDis.setStatus('mandatory')
if mibBuilder.loadTexts: setIproIprDis.setDescription('Distance')
setIproIprMas = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproIprMas.setStatus('mandatory')
if mibBuilder.loadTexts: setIproIprMas.setDescription('masquerade')
setIproDef = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13), )
if mibBuilder.loadTexts: setIproDef.setStatus('mandatory')
if mibBuilder.loadTexts: setIproDef.setDescription('Default-timetable')
setIproDefCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1), ).setIndexNames((0, "ELSA-MIB", "setIproDefInd"))
if mibBuilder.loadTexts: setIproDefCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproDefCols.setDescription('entry in table')
setIproDefInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefInd.setStatus('mandatory')
if mibBuilder.loadTexts: setIproDefInd.setDescription('Index')
setIproDefDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefDay.setStatus('mandatory')
if mibBuilder.loadTexts: setIproDefDay.setDescription('Days')
setIproDefSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefSta.setStatus('mandatory')
if mibBuilder.loadTexts: setIproDefSta.setDescription('Start')
setIproDefSto = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefSto.setStatus('mandatory')
if mibBuilder.loadTexts: setIproDefSto.setDescription('Stop')
setIproDefDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 13, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproDefDev.setStatus('mandatory')
if mibBuilder.loadTexts: setIproDefDev.setDescription('Device-name')
setIproUsa = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproUsa.setStatus('mandatory')
if mibBuilder.loadTexts: setIproUsa.setDescription('Usage-default-timetable')
setIproPro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproPro.setStatus('mandatory')
if mibBuilder.loadTexts: setIproPro.setDescription('Proxy-ARP')
setIproLoc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproLoc.setStatus('mandatory')
if mibBuilder.loadTexts: setIproLoc.setDescription('Loc.-routing')
setIproRou = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 7))
setIproRouRou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("type-of-service", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRouRou.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRouRou.setDescription('Routing-method')
setIproRouIcm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("reliable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRouIcm.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRouIcm.setDescription('ICMP-routing-method')
setIproRip = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8))
setIproRipRip = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("rip-1", 1), ("r1-comp", 2), ("rip-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRipRip.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipRip.setDescription('RIP-type')
setIproRipR1m = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("class", 0), ("address", 1), ("cl-and-addr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproRipR1m.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipR1m.setDescription('R1-mask')
setIproRipTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3), )
if mibBuilder.loadTexts: setIproRipTab.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipTab.setDescription('Table-IP-RIP')
setIproRipTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIproRipTabIpa"))
if mibBuilder.loadTexts: setIproRipTabCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipTabCols.setDescription('entry in table')
setIproRipTabIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipTabIpa.setDescription('IP-address')
setIproRipTabIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabIpn.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipTabIpn.setDescription('IP-netmask')
setIproRipTabTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabTim.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipTabTim.setDescription('Time')
setIproRipTabDis = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabDis.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipTabDis.setDescription('distance')
setIproRipTabRou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 8, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproRipTabRou.setStatus('mandatory')
if mibBuilder.loadTexts: setIproRipTabRou.setDescription('Router')
setIproMas = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9))
setIproMasTcpagings = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasTcpagings.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasTcpagings.setDescription('TCP-aging-second(s)')
setIproMasUdpagings = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasUdpagings.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasUdpagings.setDescription('UDP-aging-second(s)')
setIproMasIcmpaging = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasIcmpaging.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasIcmpaging.setDescription('ICMP-aging-second(s)')
setIproMasServiceta = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4), )
if mibBuilder.loadTexts: setIproMasServiceta.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasServiceta.setDescription('Service-table')
setIproMasServicetaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setIproMasServicetaDpo"))
if mibBuilder.loadTexts: setIproMasServicetaCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasServicetaCols.setDescription('entry in table')
setIproMasServicetaDpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasServicetaDpo.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasServicetaDpo.setDescription('D-port')
setIproMasServicetaInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasServicetaInt.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasServicetaInt.setDescription('Intranet-addr.')
setIproMasTablemasq = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5), )
if mibBuilder.loadTexts: setIproMasTablemasq.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasTablemasq.setDescription('Table-masquerading')
setIproMasTablemasqCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setIproMasTablemasqInt"))
if mibBuilder.loadTexts: setIproMasTablemasqCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasTablemasqCols.setDescription('entry in table')
setIproMasTablemasqInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqInt.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasTablemasqInt.setDescription('Intranet-addr.')
setIproMasTablemasqSpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqSpo.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasTablemasqSpo.setDescription('S-port')
setIproMasTablemasqPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqPro.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasTablemasqPro.setDescription('Protocol')
setIproMasTablemasqTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproMasTablemasqTim.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasTablemasqTim.setDescription('Timeout')
setIproMasFragments = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("filter", 0), ("route", 1), ("reassemble", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasFragments.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasFragments.setDescription('Fragments')
setIproMasFragmenta = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproMasFragmenta.setStatus('mandatory')
if mibBuilder.loadTexts: setIproMasFragmenta.setDescription('Fragment-aging-second(s)')
setIproFir = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10))
setIproFirObj = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1), )
if mibBuilder.loadTexts: setIproFirObj.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirObj.setDescription('Object-table')
setIproFirObjCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setIproFirObjNam"))
if mibBuilder.loadTexts: setIproFirObjCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirObjCols.setDescription('entry in table')
setIproFirObjNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirObjNam.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirObjNam.setDescription('Name')
setIproFirObjDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirObjDes.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirObjDes.setDescription('Description')
setIproFirRul = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2), )
if mibBuilder.loadTexts: setIproFirRul.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirRul.setDescription('Rule-table')
setIproFirRulCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setIproFirRulNam"))
if mibBuilder.loadTexts: setIproFirRulCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirRulCols.setDescription('entry in table')
setIproFirRulNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulNam.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirRulNam.setDescription('Name')
setIproFirRulPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulPro.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirRulPro.setDescription('Prot.')
setIproFirRulSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulSou.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirRulSou.setDescription('Source')
setIproFirRulDes = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulDes.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirRulDes.setDescription('Destination')
setIproFirRulAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1))).clone(namedValues=NamedValues(("always-filt", 256), ("connect-filt", 512), ("internet-filt", 1024), ("accept", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIproFirRulAct.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirRulAct.setDescription('Action')
setIproFirFil = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3), )
if mibBuilder.loadTexts: setIproFirFil.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFil.setDescription('Filter-list')
setIproFirFilCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setIproFirFilIdx"))
if mibBuilder.loadTexts: setIproFirFilCols.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilCols.setDescription('entry in table')
setIproFirFilIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilIdx.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilIdx.setDescription('Idx.')
setIproFirFilProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilProt.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilProt.setDescription('Prot.')
setIproFirFilSrca = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSrca.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilSrca.setDescription('Src-address')
setIproFirFilSrcn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSrcn.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilSrcn.setDescription('Src-netmask')
setIproFirFilSst = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSst.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilSst.setDescription('S-st.')
setIproFirFilSend = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilSend.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilSend.setDescription('S-end')
setIproFirFilDsta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDsta.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilDsta.setDescription('Dst-address')
setIproFirFilDstn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDstn.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilDstn.setDescription('Dst-netmask')
setIproFirFilDst = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDst.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilDst.setDescription('D-st.')
setIproFirFilDend = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilDend.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilDend.setDescription('D-end')
setIproFirFilActi = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 8, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1))).clone(namedValues=NamedValues(("always-filt", 256), ("connect-filt", 512), ("internet-filt", 1024), ("accept", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIproFirFilActi.setStatus('mandatory')
if mibBuilder.loadTexts: setIproFirFilActi.setDescription('Action')
setSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9))
setSnmpSen = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpSen.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpSen.setDescription('Send-Traps')
setSnmpIpt = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 2), )
if mibBuilder.loadTexts: setSnmpIpt.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpIpt.setDescription('IP-Trap-Table')
setSnmpIptCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setSnmpIptTra"))
if mibBuilder.loadTexts: setSnmpIptCols.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpIptCols.setDescription('entry in table')
setSnmpIptTra = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpIptTra.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpIptTra.setDescription('Trap-IP')
setSnmpAdm = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpAdm.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpAdm.setDescription('Administrator')
setSnmpLoc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpLoc.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpLoc.setDescription('Location')
setSnmpPas = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSnmpPas.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpPas.setDescription('Password-required-for-SNMP-read-access')
setSnmpReg = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setSnmpReg.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpReg.setDescription('Register-monitor')
setSnmpDel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: setSnmpDel.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpDel.setDescription('Delete-Monitor')
setSnmpMon = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7), )
if mibBuilder.loadTexts: setSnmpMon.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpMon.setDescription('Monitor-table')
setSnmpMonCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setSnmpMonIpa"))
if mibBuilder.loadTexts: setSnmpMonCols.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpMonCols.setDescription('entry in table')
setSnmpMonIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpMonIpa.setDescription('IP-Address')
setSnmpMonPor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonPor.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpMonPor.setDescription('Port')
setSnmpMonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonMac.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpMonMac.setDescription('MAC-Address')
setSnmpMonTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonTim.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpMonTim.setDescription('Timeout')
setSnmpMonDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 9, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSnmpMonDev.setStatus('mandatory')
if mibBuilder.loadTexts: setSnmpMonDev.setDescription('Device-name')
setDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10))
setDhcpOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("auto", 2), ("relay", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpOpe.setDescription('Operating')
setDhcpSta = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpSta.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpSta.setDescription('Start-address-pool')
setDhcpEnd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpEnd.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpEnd.setDescription('End-address-pool')
setDhcpNet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpNet.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpNet.setDescription('Netmask')
setDhcpBro = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpBro.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpBro.setDescription('Broadcast-address')
setDhcpGat = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpGat.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpGat.setDescription('Gateway-address')
setDhcpMax = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpMax.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpMax.setDescription('Max.-lease-time-minute(s)')
setDhcpDef = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpDef.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpDef.setDescription('Default-lease-time-minute(s)')
setDhcpTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8), )
if mibBuilder.loadTexts: setDhcpTab.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpTab.setDescription('Table-DHCP')
setDhcpTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setDhcpTabIpa"))
if mibBuilder.loadTexts: setDhcpTabCols.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpTabCols.setDescription('entry in table')
setDhcpTabIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpTabIpa.setDescription('IP-Address')
setDhcpTabNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabNod.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpTabNod.setDescription('Node-ID')
setDhcpTabTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabTim.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpTabTim.setDescription('Timeout')
setDhcpTabHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabHos.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpTabHos.setDescription('Hostname')
setDhcpTabTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 4, 8, 32, 2048))).clone(namedValues=NamedValues(("new", 1), ("new", 2), ("dyn", 16), ("unkn", 4), ("stat", 8), ("bootp", 32), ("relay", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDhcpTabTyp.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpTabTyp.setDescription('Type')
setDhcpHos = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9), )
if mibBuilder.loadTexts: setDhcpHos.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpHos.setDescription('Host-table')
setDhcpHosCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1), ).setIndexNames((0, "ELSA-MIB", "setDhcpHosNod"))
if mibBuilder.loadTexts: setDhcpHosCols.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpHosCols.setDescription('entry in table')
setDhcpHosNod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosNod.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpHosNod.setDescription('Node-ID')
setDhcpHosIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpHosIpa.setDescription('IP-Address')
setDhcpHosHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosHos.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpHosHos.setDescription('Hostname')
setDhcpHosIma = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpHosIma.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpHosIma.setDescription('Image-alias')
setDhcpAli = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10), )
if mibBuilder.loadTexts: setDhcpAli.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpAli.setDescription('Alias-table')
setDhcpAliCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1), ).setIndexNames((0, "ELSA-MIB", "setDhcpAliImagea"))
if mibBuilder.loadTexts: setDhcpAliCols.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpAliCols.setDescription('entry in table')
setDhcpAliImagea = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpAliImagea.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpAliImagea.setDescription('Image-alias')
setDhcpAliImages = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpAliImages.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpAliImages.setDescription('Image-server')
setDhcpAliImagef = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpAliImagef.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpAliImagef.setDescription('Image-file')
setDhcpMas = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpMas.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpMas.setDescription('Master-server')
setDhcpRep = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpRep.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpRep.setDescription('Reply-adaption')
setDhcpRel = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDhcpRel.setStatus('mandatory')
if mibBuilder.loadTexts: setDhcpRel.setDescription('Relay-cache')
setDnsm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17))
setDnsmOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmOpe.setDescription('Operating')
setDnsmDom = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDom.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDom.setDescription('Domain')
setDnsmDhc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDhc.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDhc.setDescription('DHCP-usage')
setDnsmNet = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmNet.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmNet.setDescription('NetBIOS-usage')
setDnsmDns = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5), )
if mibBuilder.loadTexts: setDnsmDns.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDns.setDescription('DNS-table')
setDnsmDnsCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setDnsmDnsHos"))
if mibBuilder.loadTexts: setDnsmDnsCols.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDnsCols.setDescription('entry in table')
setDnsmDnsHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDnsHos.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDnsHos.setDescription('Host-name')
setDnsmDnsIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmDnsIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDnsIpa.setDescription('IP-Address')
setDnsmFil = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6), )
if mibBuilder.loadTexts: setDnsmFil.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmFil.setDescription('Filter-list')
setDnsmFilCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setDnsmFilIdx"))
if mibBuilder.loadTexts: setDnsmFilCols.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmFilCols.setDescription('entry in table')
setDnsmFilIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilIdx.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmFilIdx.setDescription('Idx.')
setDnsmFilDom = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilDom.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmFilDom.setDescription('Domain')
setDnsmFilIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmFilIpa.setDescription('IP-Address')
setDnsmFilNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmFilNet.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmFilNet.setDescription('Netmask')
setDnsmDyn = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8), )
if mibBuilder.loadTexts: setDnsmDyn.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDyn.setDescription('Dyn.-DNS-table')
setDnsmDynCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setDnsmDynHos"))
if mibBuilder.loadTexts: setDnsmDynCols.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDynCols.setDescription('entry in table')
setDnsmDynHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDnsmDynHos.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDynHos.setDescription('Host-name')
setDnsmDynIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDnsmDynIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDynIpa.setDescription('IP-Address')
setDnsmDynTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDnsmDynTim.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmDynTim.setDescription('Timeout')
setDnsmLea = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 17, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDnsmLea.setStatus('mandatory')
if mibBuilder.loadTexts: setDnsmLea.setDescription('Leasetime')
setHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 21))
setHttpDoc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setHttpDoc.setStatus('mandatory')
if mibBuilder.loadTexts: setHttpDoc.setDescription('document-root')
setSysl = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22))
setSyslOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslOpe.setDescription('Operating')
setSyslTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2), )
if mibBuilder.loadTexts: setSyslTab.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslTab.setDescription('Table-SYSLOG')
setSyslTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1), ).setIndexNames((0, "ELSA-MIB", "setSyslTabIdx"))
if mibBuilder.loadTexts: setSyslTabCols.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslTabCols.setDescription('entry in table')
setSyslTabIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabIdx.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslTabIdx.setDescription('Idx.')
setSyslTabIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslTabIpa.setDescription('IP-Address')
setSyslTabSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabSou.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslTabSou.setDescription('Source')
setSyslTabLev = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslTabLev.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslTabLev.setDescription('Level')
setSyslFac = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3), )
if mibBuilder.loadTexts: setSyslFac.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslFac.setDescription('Facility-mapper')
setSyslFacCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3, 1), ).setIndexNames((0, "ELSA-MIB", "setSyslFacSou"))
if mibBuilder.loadTexts: setSyslFacCols.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslFacCols.setDescription('entry in table')
setSyslFacSou = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("system", 1), ("login", 2), ("systemtime", 4), ("console-login", 8), ("connections", 16), ("accounting", 32), ("administration", 64), ("router", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setSyslFacSou.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslFacSou.setDescription('Source')
setSyslFacFac = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("kern", 0), ("user", 1), ("mail", 2), ("daemon", 3), ("auth", 4), ("syslog", 5), ("lpr", 6), ("news", 7), ("uucp", 8), ("cron", 9), ("authpriv", 10), ("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslFacFac.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslFacFac.setDescription('Facility')
setSyslPor = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 22, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSyslPor.setStatus('mandatory')
if mibBuilder.loadTexts: setSyslPor.setDescription('Port')
setNetb = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16))
setNetbOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbOpe.setDescription('Operating')
setNetbSco = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbSco.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSco.setDescription('Scope-ID')
setNetbNtd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbNtd.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbNtd.setDescription('NT-Domain')
setNetbRem = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4), )
if mibBuilder.loadTexts: setNetbRem.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbRem.setDescription('Remote-table')
setNetbRemCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbRemNam"))
if mibBuilder.loadTexts: setNetbRemCols.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbRemCols.setDescription('entry in table')
setNetbRemNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbRemNam.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbRemNam.setDescription('Name')
setNetbRemTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("workstation", 1), ("router", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbRemTyp.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbRemTyp.setDescription('Type')
setNetbGro = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5), )
if mibBuilder.loadTexts: setNetbGro.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGro.setDescription('Group-list')
setNetbGroCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbGroGro"))
if mibBuilder.loadTexts: setNetbGroCols.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGroCols.setDescription('entry in table')
setNetbGroGro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroGro.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGroGro.setDescription('Group/Domain')
setNetbGroTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroTyp.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGroTyp.setDescription('Type')
setNetbGroIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGroIpa.setDescription('IP-address')
setNetbGroRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroRem.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGroRem.setDescription('Remote-station')
setNetbGroTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroTim.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGroTim.setDescription('Timeout')
setNetbGroFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbGroFla.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbGroFla.setDescription('Flags')
setNetbHos = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6), )
if mibBuilder.loadTexts: setNetbHos.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHos.setDescription('Host-list')
setNetbHosCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbHosNam"))
if mibBuilder.loadTexts: setNetbHosCols.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHosCols.setDescription('entry in table')
setNetbHosNam = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosNam.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHosNam.setDescription('Name')
setNetbHosTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosTyp.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHosTyp.setDescription('Type')
setNetbHosIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHosIpa.setDescription('IP-address')
setNetbHosRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosRem.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHosRem.setDescription('Remote-station')
setNetbHosTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosTim.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHosTim.setDescription('Timeout')
setNetbHosFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbHosFla.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbHosFla.setDescription('Flags')
setNetbSer = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7), )
if mibBuilder.loadTexts: setNetbSer.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSer.setDescription('Server-list')
setNetbSerCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setNetbSerHos"))
if mibBuilder.loadTexts: setNetbSerCols.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerCols.setDescription('entry in table')
setNetbSerHos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerHos.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerHos.setDescription('Host')
setNetbSerGro = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerGro.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerGro.setDescription('Group/Domain')
setNetbSerUpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerUpd.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerUpd.setDescription('UPD')
setNetbSerIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerIpa.setDescription('IP-address')
setNetbSerOsv = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerOsv.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerOsv.setDescription('OS-Ver.')
setNetbSerSmb = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerSmb.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerSmb.setDescription('SMB-Ver.')
setNetbSerSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerSer.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerSer.setDescription('Server-Typ')
setNetbSerRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerRem.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerRem.setDescription('Remote-station')
setNetbSerTim = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerTim.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerTim.setDescription('Timeout')
setNetbSerFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setNetbSerFla.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbSerFla.setDescription('Flags')
setNetbWat = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("spoof", 1), ("route", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbWat.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbWat.setDescription('Watchdogs')
setNetbUpd = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pback", 0), ("trig", 1), ("time", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbUpd.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbUpd.setDescription('Update')
setNetbWan = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 16, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setNetbWan.setStatus('mandatory')
if mibBuilder.loadTexts: setNetbWan.setDescription('WAN-Update-Min.')
setConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11))
setConfLanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 0))).clone(namedValues=NamedValues(("on", 1), ("read", 4), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLanc.setStatus('mandatory')
if mibBuilder.loadTexts: setConfLanc.setDescription('LAN-config')
setConfWanc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8, 0))).clone(namedValues=NamedValues(("on", 2), ("read", 8), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfWanc.setStatus('mandatory')
if mibBuilder.loadTexts: setConfWanc.setDescription('WAN-config')
setConfPass = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfPass.setStatus('mandatory')
if mibBuilder.loadTexts: setConfPass.setDescription('Password-required-for-SNMP-read-access')
setConfMaxi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfMaxi.setStatus('mandatory')
if mibBuilder.loadTexts: setConfMaxi.setDescription('Maximum-connections')
setConfConf = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfConf.setStatus('mandatory')
if mibBuilder.loadTexts: setConfConf.setDescription('Config-aging-minute(s)')
setConfLogi = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLogi.setStatus('mandatory')
if mibBuilder.loadTexts: setConfLogi.setDescription('Login-errors')
setConfLock = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLock.setStatus('mandatory')
if mibBuilder.loadTexts: setConfLock.setDescription('Lock-minutes')
setConfFarc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfFarc.setStatus('mandatory')
if mibBuilder.loadTexts: setConfFarc.setDescription('Farconfig-(EAZ-MSN)')
setConfLang = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("english", 1), ("deutsch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setConfLang.setStatus('mandatory')
if mibBuilder.loadTexts: setConfLang.setDescription('Language')
setAbmo = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12))
setAbmoPor = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1), )
if mibBuilder.loadTexts: setAbmoPor.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPor.setDescription('Port-list')
setAbmoPorCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoPorPort"))
if mibBuilder.loadTexts: setAbmoPorCols.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorCols.setDescription('entry in table')
setAbmoPorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoPorPort.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorPort.setDescription('Port')
setAbmoPorDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("phone", 1), ("fax", 2), ("modem", 3), ("answ-mach", 4), ("combi", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorDevice.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorDevice.setDescription('Device')
setAbmoPorEazmsns = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorEazmsns.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorEazmsns.setDescription('EAZ/MSN(s)')
setAbmoPorCapab = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 2, 4))).clone(namedValues=NamedValues(("speech", 1), ("a-3-1khz", 8), ("modem", 2), ("fax-g2-3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorCapab.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorCapab.setDescription('Capab.')
setAbmoPorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorMode.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorMode.setDescription('Mode')
setAbmoPorClip = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorClip.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorClip.setDescription('CLIP')
setAbmoPorAutodialf = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorAutodialf.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorAutodialf.setDescription('Auto-dial-flag')
setAbmoPorAutodialn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPorAutodialn.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPorAutodialn.setDescription('Auto-dial-number')
setAbmoPub = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6), )
if mibBuilder.loadTexts: setAbmoPub.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPub.setDescription('Public-exchange-list')
setAbmoPubCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoPubPor"))
if mibBuilder.loadTexts: setAbmoPubCols.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPubCols.setDescription('entry in table')
setAbmoPubPor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoPubPor.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPubPor.setDescription('Port')
setAbmoPubOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("private", 1), ("public", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPubOff.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPubOff.setDescription('Offhook-line')
setAbmoPubFla = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("private", 1), ("public", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPubFla.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPubFla.setDescription('Flash-line')
setAbmoPubExc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 6, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPubExc.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPubExc.setDescription('exchange-code')
setAbmoCla = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7), )
if mibBuilder.loadTexts: setAbmoCla.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoCla.setDescription('Class-of-service-list')
setAbmoClaCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoClaPort"))
if mibBuilder.loadTexts: setAbmoClaCols.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoClaCols.setDescription('entry in table')
setAbmoClaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoClaPort.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoClaPort.setDescription('Port')
setAbmoClaClassofservice = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoClaClassofservice.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoClaClassofservice.setDescription('Class-of-service')
setAbmoClaBlockednumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoClaBlockednumber1.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoClaBlockednumber1.setDescription('Blocked-number-1')
setAbmoClaBlockednumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoClaBlockednumber2.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoClaBlockednumber2.setDescription('Blocked-number-2')
setAbmoPri = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8), )
if mibBuilder.loadTexts: setAbmoPri.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPri.setDescription('Priority-list')
setAbmoPriCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8, 1), ).setIndexNames((0, "ELSA-MIB", "setAbmoPriPor"))
if mibBuilder.loadTexts: setAbmoPriCols.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPriCols.setDescription('entry in table')
setAbmoPriPor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ab-1", 1), ("ab-2", 2), ("ab-3", 3), ("ab-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAbmoPriPor.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPriPor.setDescription('Port')
setAbmoPriPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("p1", 0), ("p2", 1), ("p3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoPriPri.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoPriPri.setDescription('Prio-out')
setAbmoRin = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("single", 1), ("paired", 2), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoRin.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoRin.setDescription('Ringinq-sequence')
setAbmoCou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(43, 32, 41, 357, 49, 45, 34, 33, 44, 30, 39, 353, 81, 352, 47, 31, 351, 46, 358, 90, 1))).clone(namedValues=NamedValues(("austria", 43), ("belgium", 32), ("switzerland", 41), ("cyprus", 357), ("germany", 49), ("denmark", 45), ("spain", 34), ("france", 33), ("great-britain", 44), ("greece", 30), ("italy", 39), ("ireland", 353), ("japan", 81), ("luxembourg", 352), ("norway", 47), ("netherlands", 31), ("portugal", 351), ("sweden", 46), ("finland", 358), ("turkey", 90), ("united-states-of-america", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setAbmoCou.setStatus('mandatory')
if mibBuilder.loadTexts: setAbmoCou.setDescription('Country')
setLanc = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13))
setLancAcces = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1), )
if mibBuilder.loadTexts: setLancAcces.setStatus('mandatory')
if mibBuilder.loadTexts: setLancAcces.setDescription('Access-list')
setLancAccesCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1, 1), ).setIndexNames((0, "ELSA-MIB", "setLancAccesIpa"))
if mibBuilder.loadTexts: setLancAccesCols.setStatus('mandatory')
if mibBuilder.loadTexts: setLancAccesCols.setDescription('entry in table')
setLancAccesIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancAccesIpa.setStatus('mandatory')
if mibBuilder.loadTexts: setLancAccesIpa.setDescription('IP-address')
setLancAccesIpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancAccesIpn.setStatus('mandatory')
if mibBuilder.loadTexts: setLancAccesIpn.setDescription('IP-netmask')
setLancUdppo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancUdppo.setStatus('mandatory')
if mibBuilder.loadTexts: setLancUdppo.setDescription('UDP-port')
setLancInter = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6), )
if mibBuilder.loadTexts: setLancInter.setStatus('mandatory')
if mibBuilder.loadTexts: setLancInter.setDescription('Interface-list')
setLancInterCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1), ).setIndexNames((0, "ELSA-MIB", "setLancInterIfc"))
if mibBuilder.loadTexts: setLancInterCols.setStatus('mandatory')
if mibBuilder.loadTexts: setLancInterCols.setDescription('entry in table')
setLancInterIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLancInterIfc.setStatus('mandatory')
if mibBuilder.loadTexts: setLancInterIfc.setDescription('Ifc')
setLancInterOpe = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("dial-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancInterOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setLancInterOpe.setDescription('Operating')
setLancInterEaz = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancInterEaz.setStatus('mandatory')
if mibBuilder.loadTexts: setLancInterEaz.setDescription('EAZ-MSN(s)')
setLancInterFor = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancInterFor.setStatus('mandatory')
if mibBuilder.loadTexts: setLancInterFor.setDescription('Force-out-MSN')
setLancPrior = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7), )
if mibBuilder.loadTexts: setLancPrior.setStatus('mandatory')
if mibBuilder.loadTexts: setLancPrior.setDescription('Priority-list')
setLancPriorCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7, 1), ).setIndexNames((0, "ELSA-MIB", "setLancPriorIfc"))
if mibBuilder.loadTexts: setLancPriorCols.setStatus('mandatory')
if mibBuilder.loadTexts: setLancPriorCols.setDescription('entry in table')
setLancPriorIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s0-1", 1), ("s0-2", 2), ("s0-3", 3), ("s0-4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLancPriorIfc.setStatus('mandatory')
if mibBuilder.loadTexts: setLancPriorIfc.setDescription('Ifc')
setLancPriorPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("p1", 0), ("p2", 1), ("p3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancPriorPri.setStatus('mandatory')
if mibBuilder.loadTexts: setLancPriorPri.setDescription('Prio-out')
setLancOpera = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("dial-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancOpera.setStatus('mandatory')
if mibBuilder.loadTexts: setLancOpera.setDescription('Operating')
setLancEazms = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancEazms.setStatus('mandatory')
if mibBuilder.loadTexts: setLancEazms.setDescription('EAZ-MSN(s)')
setLancPrioo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("p1", 0), ("p2", 1), ("p3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLancPrioo.setStatus('mandatory')
if mibBuilder.loadTexts: setLancPrioo.setDescription('Prio-out')
setLcrm = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15))
setLcrmRou = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmRou.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmRou.setDescription('Router-usage')
setLcrmLan = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmLan.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmLan.setDescription('Lancapi-usage')
setLcrmAbp = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmAbp.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmAbp.setDescription('ab-port-usage')
setLcrmTim = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4), )
if mibBuilder.loadTexts: setLcrmTim.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTim.setDescription('Timetable')
setLcrmTimCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1), ).setIndexNames((0, "ELSA-MIB", "setLcrmTimInd"))
if mibBuilder.loadTexts: setLcrmTimCols.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimCols.setDescription('entry in table')
setLcrmTimInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimInd.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimInd.setDescription('Index')
setLcrmTimPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimPre.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimPre.setDescription('Prefix')
setLcrmTimDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimDay.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimDay.setDescription('Days')
setLcrmTimSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimSta.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimSta.setDescription('Start')
setLcrmTimSto = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimSto.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimSto.setDescription('Stop')
setLcrmTimNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimNum.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimNum.setDescription('number-list')
setLcrmTimFal = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmTimFal.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmTimFal.setDescription('Fallback')
setLcrmCel = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5), )
if mibBuilder.loadTexts: setLcrmCel.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmCel.setDescription('Celebration-day-table')
setLcrmCelCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5, 1), ).setIndexNames((0, "ELSA-MIB", "setLcrmCelInd"))
if mibBuilder.loadTexts: setLcrmCelCols.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmCelCols.setDescription('entry in table')
setLcrmCelInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setLcrmCelInd.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmCelInd.setDescription('Index')
setLcrmCelDat = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 15, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setLcrmCelDat.setStatus('mandatory')
if mibBuilder.loadTexts: setLcrmCelDat.setDescription('Date')
setTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14))
setTimeOpe = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTimeOpe.setStatus('mandatory')
if mibBuilder.loadTexts: setTimeOpe.setDescription('Operating')
setTimeCur = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTimeCur.setStatus('mandatory')
if mibBuilder.loadTexts: setTimeCur.setDescription('Current-time')
setTimeTim = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTimeTim.setStatus('mandatory')
if mibBuilder.loadTexts: setTimeTim.setDescription('Time-call-number')
setTimeCal = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTimeCal.setStatus('mandatory')
if mibBuilder.loadTexts: setTimeCal.setDescription('Call-attempts')
setTimeUtc = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 2, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setTimeUtc.setStatus('mandatory')
if mibBuilder.loadTexts: setTimeUtc.setDescription('UTC-in-secs')
firVer = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1), )
if mibBuilder.loadTexts: firVer.setStatus('mandatory')
if mibBuilder.loadTexts: firVer.setDescription('Version-table')
firVerCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1), ).setIndexNames((0, "ELSA-MIB", "firVerIfc"))
if mibBuilder.loadTexts: firVerCols.setStatus('mandatory')
if mibBuilder.loadTexts: firVerCols.setDescription('entry in table')
firVerIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ifc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerIfc.setStatus('mandatory')
if mibBuilder.loadTexts: firVerIfc.setDescription('Ifc')
firVerMod = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerMod.setStatus('mandatory')
if mibBuilder.loadTexts: firVerMod.setDescription('Module')
firVerVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerVer.setStatus('mandatory')
if mibBuilder.loadTexts: firVerVer.setDescription('Version')
firVerSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firVerSer.setStatus('mandatory')
if mibBuilder.loadTexts: firVerSer.setDescription('Serial-number')
firTab = MibTable((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2), )
if mibBuilder.loadTexts: firTab.setStatus('mandatory')
if mibBuilder.loadTexts: firTab.setDescription('Table-firmsafe')
firTabCols = MibTableRow((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1), ).setIndexNames((0, "ELSA-MIB", "firTabPos"))
if mibBuilder.loadTexts: firTabCols.setStatus('mandatory')
if mibBuilder.loadTexts: firTabCols.setDescription('entry in table')
firTabPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabPos.setStatus('mandatory')
if mibBuilder.loadTexts: firTabPos.setDescription('Position')
firTabSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 5, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 0), ("minimal-active", 5), ("minimal-inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firTabSta.setStatus('mandatory')
if mibBuilder.loadTexts: firTabSta.setDescription('Status')
firTabVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabVer.setStatus('mandatory')
if mibBuilder.loadTexts: firTabVer.setDescription('Version')
firTabDat = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabDat.setStatus('mandatory')
if mibBuilder.loadTexts: firTabDat.setDescription('Date')
firTabSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabSiz.setStatus('mandatory')
if mibBuilder.loadTexts: firTabSiz.setDescription('Size')
firTabInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firTabInd.setStatus('mandatory')
if mibBuilder.loadTexts: firTabInd.setDescription('Index')
firMod = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("immediate", 0), ("login", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firMod.setStatus('mandatory')
if mibBuilder.loadTexts: firMod.setDescription('Mode-firmsafe')
firTim = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firTim.setStatus('mandatory')
if mibBuilder.loadTexts: firTim.setDescription('Timeout-firmsafe')
othMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 1))
othManCon = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 1, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: othManCon.setStatus('mandatory')
if mibBuilder.loadTexts: othManCon.setDescription('Connect')
othManDis = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: othManDis.setStatus('mandatory')
if mibBuilder.loadTexts: othManDis.setDescription('Disconnect')
othBoo = MibScalar((1, 3, 6, 1, 4, 1, 2356, 400, 1, 2000, 4, 2), Integer32())
if mibBuilder.loadTexts: othBoo.setStatus('mandatory')
if mibBuilder.loadTexts: othBoo.setDescription('Boot-system')
mibBuilder.exportSymbols("ELSA-MIB", firTim=firTim, staPppstTxoIpcDns=staPppstTxoIpcDns, staBridgBrgwanr=staBridgBrgwanr, setHttp=setHttp, staCalliCols=staCalliCols, staPppstIpcDeletevalues=staPppstIpcDeletevalues, staIprouIprlantt=staIprouIprlantt, setDnsmDnsIpa=setDnsmDnsIpa, staWanstErrorstatTxer=staWanstErrorstatTxer, setSysl=setSysl, staPppstTxoIpxNod=staPppstTxoIpxNod, setDnsmFilDom=setDnsmFilDom, setTcpiNbnsdefau=setTcpiNbnsdefau, setLcrmCelCols=setLcrmCelCols, setNetbSerOsv=setNetbSerOsv, staTcpipHttHttppr=staTcpipHttHttppr, setIproMasTablemasqInt=setIproMasTablemasqInt, staQueueProthea=staQueueProthea, setTimeCur=setTimeCur, staLcrstFou=staLcrstFou, setDnsmDynCols=setDnsmDynCols, staChannCharg=staChannCharg, setDhcpTabCols=setDhcpTabCols, setWanmPpplUse=setWanmPpplUse, staIpxstProPropagatewanf=staIpxstProPropagatewanf, staPppstPapDelet=staPppstPapDelet, staIpxstIpxNetworksPro=staIpxstIpxNetworksPro, setBridWanMul=setBridWanMul, staPppstLcpRxechoreques=staPppstLcpRxechoreques, setIproIprRou=setIproIprRou, staPppstIpxRxconfigreje=staPppstIpxRxconfigreje, staPppstMlsBundlec=staPppstMlsBundlec, staTcpipTftTftplanrxa=staTcpipTftTftplanrxa, staTcpipDhcDhcprxdec=staTcpipDhcDhcprxdec, staIpxstRipRiplanr=staIpxstRipRiplanr, setNetbRemTyp=setNetbRemTyp, staIpxstWatSpxwatchdogwanr=staIpxstWatSpxwatchdogwanr, staBridgEstabliSou=staBridgEstabliSou, staIpxstSapSaplant=staIpxstSapSaplant, setIpxmWanRouPro=setIpxmWanRouPro, staS0busDin=staS0busDin, setAbmoPriPri=setAbmoPriPri, staPppstTxoLcpAcc=staPppstTxoLcpAcc, staPppstMlsRxseqre=staPppstMlsRxseqre, staIprouIprarper=staIprouIprarper, setNetbSerFla=setNetbSerFla, setNetbRem=setNetbRem, setLancAccesIpn=setLancAccesIpn, staPppstCbcRxdis=staPppstCbcRxdis, staLanstLantxerro=staLanstLantxerro, sta=sta, setSnmpIptCols=setSnmpIptCols, firTabPos=firTabPos, staPppstCcpRxresetreque=staPppstCcpRxresetreque, staTcpipTftTftplantxa=staTcpipTftTftplantxa, staConfiWantotal=staConfiWantotal, setWanmPpplCols=setWanmPpplCols, setNetbHosCols=setNetbHosCols, staTcpipTftTftplanrxd=staTcpipTftTftplanrxd, staLanstLanqueuep=staLanstLanqueuep, setDhcpHosIpa=setDhcpHosIpa, setWanmRounCols=setWanmRounCols, setIproRipRip=setIproRipRip, setIpxmRipTabl=setIpxmRipTabl, staPppstRxoLcp=staPppstRxoLcp, setWanmPpplCon=setWanmPpplCon, setWanmLayeLay2=setWanmLayeLay2, setIpxmRipAgin=setIpxmRipAgin, staTcpipNetRemo=staTcpipNetRemo, setIproUsa=setIproUsa, setTcpiAccesslisIpn=setTcpiAccesslisIpn, setSyslFac=setSyslFac, setDhcpHosNod=setDhcpHosNod, staPppstLcpRxterminatea=staPppstLcpRxterminatea, staTcpipIpsIplanserviceerrors=staTcpipIpsIplanserviceerrors, staPppstPapRxfai=staPppstPapRxfai, setIpxmSapWanfSta=setIpxmSapWanfSta, staPppstPppIpc=staPppstPppIpc, setNetbSerIpa=setNetbSerIpa, staConnsActi=staConnsActi, staPppstIpc=staPppstIpc, staRemotConns=staRemotConns, staDhcpcTablena=staDhcpcTablena, setIproMas=setIproMas, setBridLanBro=setBridLanBro, staLcrstPro=staLcrstPro, setWanmInteLlmo=setWanmInteLlmo, setIproRipR1m=setIproRipR1m, staTcpipIpsIpwantx=staTcpipIpsIpwantx, staQueueIpxrout=staQueueIpxrout, setTcpiTablearpCon=setTcpiTablearpCon, setDhcpAliCols=setDhcpAliCols, staDhcpcTabledo=staDhcpcTabledo, setCharTimetabBudgetmi=setCharTimetabBudgetmi, staTcpipDhcDhcpassig=staTcpipDhcDhcpassig, setAbmoPriPor=setAbmoPriPor, staIpxstRipRipwanr=staIpxstRipRipwanr, staPppstCcpRxterminater=staPppstCcpRxterminater, staTcpipTftTftplanrx=staTcpipTftTftplanrx, staTcpipTftTftplantx=staTcpipTftTftplantx, staTcpipDhcTabledhcpHos=staTcpipDhcTabledhcpHos, staIprouIprwanty=staIprouIprwanty, setAccoCurCols=setAccoCurCols, staWanstWanqueuee=staWanstWanqueuee, staPppstLcpRxconfigreje=staPppstLcpRxconfigreje, staIpxstSapTablesaFla=staIpxstSapTablesaFla, staLayerCols=staLayerCols, staS0busD2sCols=staS0busD2sCols, staWanstErrorstat=staWanstErrorstat, staPppstLcpTxechoreques=staPppstLcpTxechoreques, setAbmoCla=setAbmoCla, staQueueDnstxqu=staQueueDnstxqu, staIpxstProPropagatelanr=staIpxstProPropagatelanr, setIproFirRulCols=setIproFirRulCols, staTcpipTcpDeleteval=staTcpipTcpDeleteval, staIpxstPro=staIpxstPro, staPppstChaTxfai=staPppstChaTxfai, staTcpipTftTftplanrxo=staTcpipTftTftplanrxo, staTcpipIcmIcmplanc=staTcpipIcmIcmplanc, staIpxstSapTablesa=staIpxstSapTablesa, setSyslFacFac=setSyslFacFac, staInfocIfc=staInfocIfc, firVerSer=firVerSer, staS0busDinLay=staS0busDinLay, staBridgEstabli=staBridgEstabli, lancom_2000=lancom_2000, setBridLanSrcFiltertaCols=setBridLanSrcFiltertaCols, setBridWanSrc=setBridWanSrc, setNetbUpd=setNetbUpd, staTcpipDnsForw=staTcpipDnsForw, setIpxmLanSockCols=setIpxmLanSockCols, staPppstPppLcp=staPppstPppLcp, setAccoAccConne=setAccoAccConne, staTcpipTftTftpwantxd=staTcpipTftTftpwantxd, setIproFirFilProt=setIproFirFilProt, staLcrstTot=staLcrstTot, staTcpipTcpTcpwantxr=staTcpipTcpTcpwantxr, setCharBudgetu=setCharBudgetu, staDhcpcTableroIpa=staDhcpcTableroIpa, setIpxmWanSocSta=setIpxmWanSocSta, setIpxmSapTablSoc=setIpxmSapTablSoc, setAbmo=setAbmo, staIprouEstablisTim=staIprouEstablisTim, staTcpipIpsIpwanserviceerrors=staTcpipIpsIpwanserviceerrors, elsa=elsa, staPppstBacTxlinkdropreq=staPppstBacTxlinkdropreq, staTcpipDhcTabledhcpIpa=staTcpipDhcTabledhcpIpa, setCharTimetabMinutesp=setCharTimetabMinutesp, staIpxstRipTableriCols=staIpxstRipTableriCols, staPppstMlsRxfrags=staPppstMlsRxfrags, staLanstLanrxcrce=staLanstLanrxcrce, setAbmoPor=setAbmoPor, staPppstTxoLcpMru=staPppstTxoLcpMru, staTcpipTftTftpwanrxr=staTcpipTftTftpwanrxr, setNetbSerUpd=setNetbSerUpd, staIprouIprlandi=staIprouIprlandi, staPppstTxoIpxRou=staPppstTxoIpxRou, setTcpiTablearpIpa=setTcpiTablearpIpa, staPppstChaRxsuc=staPppstChaRxsuc, staWanstWanqueuep=staWanstWanqueuep, staPppstLcpRxerrors=staPppstLcpRxerrors, staPppstTxoIpc=staPppstTxoIpc, staIpxstIpxDeleteva=staIpxstIpxDeleteva, staRemotConnt=staRemotConnt, setWanmInteMaxo=setWanmInteMaxo, setNetbHosTyp=setNetbHosTyp, setCharMinutes=setCharMinutes, setWanmNameDev=setWanmNameDev, setIproRipTabCols=setIproRipTabCols, staPppstLcpTxconfigack=staPppstLcpTxconfigack, setNetbHosIpa=setNetbHosIpa, staIpxstIpxEstablisSourceno=staIpxstIpxEstablisSourceno, othMan=othMan, staTcpipNetConf=staTcpipNetConf, setIproDefSto=setIproDefSto, staPppstBacTxstatusindic=staPppstBacTxstatusindic, setNetbSer=setNetbSer, setIproRou=setIproRou, staLayerLay2=staLayerLay2, staPppstRxoIpxCols=staPppstRxoIpxCols, setIpxmSapTablFla=setIpxmSapTablFla, setNetbGroIpa=setNetbGroIpa, setWanmPpplTer=setWanmPpplTer, setWanmNameB2d=setWanmNameB2d, setIproFirRulNam=setIproFirRulNam, setWanmNumbDia=setWanmNumbDia, staTimesIsdInfor=staTimesIsdInfor, staTcpipNetBnod=staTcpipNetBnod, staOpera=staOpera, staWanstBytetransCols=staWanstBytetransCols, setWanmInteLlbc=setWanmInteLlbc, set=set, setDnsmFil=setDnsmFil, staLanstLanheappa=staLanstLanheappa, staTimesIsdConne=staTimesIsdConne, setCharTimetab=setCharTimetab, staTcpipTftDeletevalu=staTcpipTftDeletevalu, staLayerIfc=staLayerIfc, setNetbGroTim=setNetbGroTim, staTcpipTftTftpwantxe=staTcpipTftTftpwantxe, setSnmpIptTra=setSnmpIptTra, staLayerLay3=staLayerLay3, setConfConf=setConfConf, staLayerWanl=staLayerWanl, setConfLang=setConfLang, setNetbOpe=setNetbOpe, setAbmoPorClip=setAbmoPorClip, setConfLogi=setConfLogi, staInfocDia=staInfocDia, setIproFirObjNam=setIproFirObjNam, staWanstWanheappa=staWanstWanheappa, setWanmLayeLay3=setWanmLayeLay3, setIpxmRipWanfCols=setIpxmRipWanfCols, setLcrmLan=setLcrmLan, staDhcpcYouripn=staDhcpcYouripn, staWanstBytetransIfc=staWanstBytetransIfc, staDhcpcTimeser=staDhcpcTimeser, staIpxstSapTablesaTim=staIpxstSapTablesaTim, setIpxmSapWanu=setIpxmSapWanu, setNetbSerHos=setNetbSerHos, staPppstLcpRxechoreply=staPppstLcpRxechoreply, staTcpipArpTablearCols=staTcpipArpTablearCols, staBridgBrgwanf=staBridgBrgwanf, setWanmLayeWanl=setWanmLayeWanl, setDhcpRel=setDhcpRel, setIproPro=setIproPro, setBridLanSrc=setBridLanSrc, staIpxstWatDeletevalues=staIpxstWatDeletevalues, setWanmInteIfc=setWanmInteIfc, setTcpiDnsbackup=setTcpiDnsbackup, staQueueIcmpque=staQueueIcmpque, staLanstLanrxmult=staLanstLanrxmult, setWanmInteCols=setWanmInteCols, setAbmoPriCols=setAbmoPriCols, staCalliCap=staCalliCap, staTcpipDhcTabledhcp=staTcpipDhcTabledhcp, staTcpipTftTftpwanrxw=staTcpipTftTftpwanrxw, staInfocMod=staInfocMod, setDhcpDef=setDhcpDef, setTimeOpe=setTimeOpe, staIpxstProDeletevalues=staIpxstProDeletevalues, setLancInterEaz=setLancInterEaz, staLcrstNot=staLcrstNot, staPppstCha=staPppstCha, staPppstMlsRxfragm=staPppstMlsRxfragm, staPppstRxoIpcIpa=staPppstRxoIpcIpa, staTcpipNetTime=staTcpipNetTime, staPppstTxoIpcCols=staPppstTxoIpcCols, staLanstLanrxpack=staLanstLanrxpack, staIpxstIpxEstablisDestnode=staIpxstIpxEstablisDestnode, staTcpipArpTablearLas=staTcpipArpTablearLas, staTcpipDhcDhcpwanrx=staTcpipDhcDhcpwanrx, setWanmRout=setWanmRout, staPppstBacDeletevalues=staPppstBacDeletevalues)
mibBuilder.exportSymbols("ELSA-MIB", setIpxmWanRouRem=setIpxmWanRouRem, staIpxstIpxIpxrwann=staIpxstIpxIpxrwann, setBridWanDesFilterty=setBridWanDesFilterty, staTcpipDhcTabledhcpTyp=staTcpipDhcTabledhcpTyp, staIpxstWatIpxwatchdoglant=staIpxstWatIpxwatchdoglant, setWanmNumbDev=setWanmNumbDev, fir=fir, setNetbGroGro=setNetbGroGro, setAbmoPubPor=setAbmoPubPor, setDhcpAliImages=setDhcpAliImages, staPppstCcpRxcodereject=staPppstCcpRxcodereject, setDhcpTabNod=setDhcpTabNod, staIpxstIpxIpxrlanh=staIpxstIpxIpxrlanh, setBridLanSrcFiltertaSrc=setBridLanSrcFiltertaSrc, staTcpipDhcDeleteval=staTcpipDhcDeleteval, setDnsm=setDnsm, staIpxstRipTableriTim=staIpxstRipTableriTim, staIpxstIpxIpxrlanb=staIpxstIpxIpxrlanb, staChannConns=staChannConns, setWanmScriCols=setWanmScriCols, staPppstCcpTxconfigrequ=staPppstCcpTxconfigrequ, staTimesIsdDelet=staTimesIsdDelet, setIproFirFilDend=setIproFirFilDend, staQueueRipquer=staQueueRipquer, firMod=firMod, staLanstLantxpack=staLanstLantxpack, setConfLock=setConfLock, staIpxstIpxNetworksNet=staIpxstIpxNetworksNet, staTcpipNetWant=staTcpipNetWant, staS0busD2sCha=staS0busD2sCha, staIpxstIpxIpxrwant=staIpxstIpxIpxrwant, setIproIprDis=setIproIprDis, staChannIsdnd=staChannIsdnd, staPppstCcpTxconfignak=staPppstCcpTxconfignak, staIpxstSap=staIpxstSap, staTcpipDhcDchpserve=staTcpipDhcDchpserve, setIpxmRipSpoo=setIpxmRipSpoo, setIpxmLanSock=setIpxmLanSock, setBridWanSrcFiltertaCols=setBridWanSrcFiltertaCols, staWanstPackettraTxu=staWanstPackettraTxu, staPppstTxoLcpAcf=staPppstTxoLcpAcf, setDnsmDynHos=setDnsmDynHos, setBridWanDesFiltertaDes=setBridWanDesFiltertaDes, setTcpiAccesslisCols=setTcpiAccesslisCols, setTcpiTablearp=setTcpiTablearp, staDhcpcTablenaIpa=staDhcpcTablenaIpa, staIpxstRipRipwane=staIpxstRipRipwane, staChannChan=staChannChan, staIprouIprwantt=staIprouIprwantt, staPppstCcpTxconfigreje=staPppstCcpTxconfigreje, setLanmNod=setLanmNod, staS0busD2sL2a=staS0busD2sL2a, staConnsCols=staConnsCols, staTcpipDnsHitlReq=staTcpipDnsHitlReq, setSnmpSen=setSnmpSen, staTcpipTftTftpwantxo=staTcpipTftTftpwantxo, firTab=firTab, setIproRipTabRou=setIproRipTabRou, setCharTablebuTot=setCharTablebuTot, setIproFirFilDstn=setIproFirFilDstn, setAbmoCou=setAbmoCou, staS0bus=staS0bus, staTcpipArpArpwanr=staTcpipArpArpwanr, setIpxmSapWanf=setIpxmSapWanf, firVer=firVer, staTimes=staTimes, staTcpipTcpTcpwanche=staTcpipTcpTcpwanche, staConfiOutbandb=staConfiOutbandb, staPppstIpxTxconfignak=staPppstIpxTxconfignak, setSyslPor=setSyslPor, staPppstIpcTxconfigack=staPppstIpcTxconfigack, staPppstIpxRxcodereject=staPppstIpxRxcodereject, staPppstRxoLcpIfc=staPppstRxoLcpIfc, setSnmpMon=setSnmpMon, setLcrmRou=setLcrmRou, staChargSpareun=staChargSpareun, staTcpipDnsDhcp=staTcpipDnsDhcp, staTcpipDnsHitl=staTcpipDnsHitl, staS0busD2sTei=staS0busD2sTei, setWanmManu=setWanmManu, staPppstBacRxlinkdropres=staPppstBacRxlinkdropres, staTcpipIpsDeletevalues=staTcpipIpsDeletevalues, setSyslTabIdx=setSyslTabIdx, staPppstIpxTxconfigack=staPppstIpxTxconfigack, staPppstRxoLcpPfc=staPppstRxoLcpPfc, staTcpipTftTftpwanrxb=staTcpipTftTftpwanrxb, staPppstIpxTxconfigreje=staPppstIpxTxconfigreje, staPppstLcpRxdiscardreq=staPppstLcpRxdiscardreq, setIproFirFilSrcn=setIproFirFilSrcn, staLcrstProPro=staLcrstProPro, setNetbGro=setNetbGro, staLcrstDel=staLcrstDel, setSnmpDel=setSnmpDel, staIpxstMacDeleteval=staIpxstMacDeleteval, setLancOpera=setLancOpera, setIpxm=setIpxm, staTcpipArpArplane=staTcpipArpArplane, staTcpipNetRemoTim=staTcpipNetRemoTim, staBridgEstabliDes=staBridgEstabliDes, setWanmNameDia=setWanmNameDia, staConnsChar=staConnsChar, setLancInter=setLancInter, staPppstPapTxreq=staPppstPapTxreq, staTcpipDnsHitlDom=staTcpipDnsHitlDom, setCharTablebuIfc=setCharTablebuIfc, setDhcpAli=setDhcpAli, setDhcpGat=setDhcpGat, staTcpipDnsHitlTim=staTcpipDnsHitlTim, setNetbHos=setNetbHos, staTcpipNetRefr=staTcpipNetRefr, staBridgTablebrFor=staBridgTablebrFor, staChargTablebuTot=staChargTablebuTot, staIprouEstablis=staIprouEstablis, staQueueDhcpser=staQueueDhcpser, staPppstCbcTxres=staPppstCbcTxres, setLancInterFor=setLancInterFor, staPppstPpp=staPppstPpp, setTcpiArpagingm=setTcpiArpagingm, setIproMasTablemasq=setIproMasTablemasq, staPppstChaDelet=staPppstChaDelet, staIpxstProPropagatelant=staIpxstProPropagatelant, staTcpipTftTftplanrxe=staTcpipTftTftplanrxe, setSnmpIpt=setSnmpIpt, setAccoCurConnt=setAccoCurConnt, staConfiDeleteva=staConfiDeleteva, staLayerL2op=staLayerL2op, staPppstIpxRxconfigack=staPppstIpxRxconfigack, staLanstLanrxerro=staLanstLanrxerro, staTcpipHttHttpac=staTcpipHttHttpac, staPppstCcpRxresetack=staPppstCcpRxresetack, staPppstBacRxlinkdropreq=staPppstBacRxlinkdropreq, staPppstPapTxsuc=staPppstPapTxsuc, staTcpipDhcDhcptxack=staTcpipDhcDhcptxack, staIpxstIpxNetworksBac=staIpxstIpxNetworksBac, firTabSiz=firTabSiz, setSnmpMonDev=setSnmpMonDev, firTabDat=firTabDat, staChargSpareda=staChargSpareda, staTcpipNetRemoTyp=staTcpipNetRemoTyp, staDhcpcTableroCols=staDhcpcTableroCols, isdn_Router=isdn_Router, setIpxmWanRouCols=setIpxmWanRouCols, setAccoAccUsern=setAccoAccUsern, firTabSta=firTabSta, setIpxmRipLanfCols=setIpxmRipLanfCols, setAccoAccRemot=setAccoAccRemot, staPppstIpcRxterminater=staPppstIpcRxterminater, staIpxstMacIpxlanrxm=staIpxstMacIpxlanrxm, staPppstLcpTxterminater=staPppstLcpTxterminater, setAbmoClaPort=setAbmoClaPort, staPppstIpcTxcodereject=staPppstIpcTxcodereject, setIpxmIpx=setIpxmIpx, staWanstBytetransCrx=staWanstBytetransCrx, setIpxmLanNetb=setIpxmLanNetb, setTcpiTablearpCols=setTcpiTablearpCols, setAbmoPorAutodialf=setAbmoPorAutodialf, staLanstLanrxunic=staLanstLanrxunic, staChannExtra=staChannExtra, setIproDefDev=setIproDefDev, staPppstChaRxcha=staPppstChaRxcha, staIpxstRip=staIpxstRip, staQueueSapqueu=staQueueSapqueu, staPppstBacTxstatusreson=staPppstBacTxstatusreson, firVerVer=firVerVer, staIprouIprwanfi=staIprouIprwanfi, staBridgBrgwant=staBridgBrgwant, staPppstBacRxcallbackres=staPppstBacRxcallbackres, staPppstRxoIpcIfc=staPppstRxoIpcIfc, staChargTablebu=staChargTablebu, setIpxmSapServ=setIpxmSapServ, staPppstLcpTxconfigreje=staPppstLcpTxconfigreje, staRemot=staRemot, staTcpipIpsIpwanrx=staTcpipIpsIpwanrx, staIpxstDel=staIpxstDel, staDhcpcTablelo=staDhcpcTablelo, staQueueBridgei=staQueueBridgei, staTcpipIpsIpwanfragmentations=staTcpipIpsIpwanfragmentations, setLancAcces=setLancAcces, setIproRipTabIpa=setIproRipTabIpa, staPppstRxoIpxIfc=staPppstRxoIpxIfc, staIpxstIpxIpxrinte=staIpxstIpxIpxrinte, staIpxstProPropagatewans=staIpxstProPropagatewans, staPppstMlsRxfrage=staPppstMlsRxfrage, staPppstIpcRxdiscarded=staPppstIpcRxdiscarded, staLanstLantxbroa=staLanstLantxbroa, setSnmpMonTim=setSnmpMonTim, staBridgBrgaddr=staBridgBrgaddr, staTcpipIpsIpwanchecksumerrors=staTcpipIpsIpwanchecksumerrors, staDhcpc=staDhcpc, setBridWanSrcFilterta=setBridWanSrcFilterta, staTcpipIcmIcmplanr=staTcpipIcmIcmplanr, staIpxstMacIpxlantx=staIpxstMacIpxlantx, setTcpiAccesslisIpa=setTcpiAccesslisIpa, staTcpipTcpTcplantx=staTcpipTcpTcplantx, setIpxmWanSocEnd=setIpxmWanSocEnd, setIproLoc=setIproLoc, staTcpipIpsIplanrx=staTcpipIpsIplanrx, setTcpiAccesslis=setTcpiAccesslis, setIproMasTcpagings=setIproMasTcpagings, staPppstLcpRxconfigack=staPppstLcpRxconfigack, staTcpipTcpTcpwanrx=staTcpipTcpTcpwanrx, staLanstDeleteval=staLanstDeleteval, staIprouEstablisCols=staIprouEstablisCols, setBridLan=setBridLan, staPppstPapRxreq=staPppstPapRxreq, staConfiWanactiv=staConfiWanactiv, staTcpipTcpTcplantxr=staTcpipTcpTcplantxr, staPppstTxoIpxNet=staPppstTxoIpxNet, staChannPlci=staChannPlci, setIproFirFilSend=setIproFirFilSend, staS0busD2sCon=staS0busD2sCon, staPppstIpcTxconfigrequ=staPppstIpcTxconfigrequ, staTcpipDhcDhcpmacco=staTcpipDhcDhcpmacco, setChar=setChar, setIpxmLanLoop=setIpxmLanLoop, setNetbWan=setNetbWan, staIpxstIpxEstablisCols=staIpxstIpxEstablisCols, setIpxmLanSockEnd=setIpxmLanSockEnd, staTcpipDnsNetb=staTcpipDnsNetb, setWanmScri=setWanmScri, staInfocDev=staInfocDev, staBridgTablebrLas=staBridgTablebrLas, staWanstPackettraIfc=staWanstPackettraIfc, staTcpipTcpTcplanrx=staTcpipTcpTcplanrx, setIpxmLanBind=setIpxmLanBind, staPppstChaRxres=staPppstChaRxres, staIpxstIpxEstablisSourceso=staIpxstIpxEstablisSourceso, setAccoAccConnt=setAccoAccConnt, staLanstLantxmult=staLanstLantxmult, staTcpipTftTftpwanrxe=staTcpipTftTftpwanrxe, setIproIpr=setIproIpr, staPppstCcpRxconfigack=staPppstCcpRxconfigack, setWanmInteProt=setWanmInteProt, setDnsmNet=setDnsmNet, setAbmoPorPort=setAbmoPorPort, staTcpipDhcDhcplantx=staTcpipDhcDhcplantx, setAbmoPorCapab=setAbmoPorCapab, staPppstMlsRxnotfr=staPppstMlsRxnotfr, staPppstRxoLcpAut=staPppstRxoLcpAut, staLayerLay1=staLayerLay1, setNetbGroTyp=setNetbGroTyp, setIpxmRipWanfEnd=setIpxmRipWanfEnd, staDhcpcTablenaCols=staDhcpcTablenaCols, staPppstTxoIpcNbn=staPppstTxoIpcNbn, staPppstIpxRxconfigrequ=staPppstIpxRxconfigrequ, staIpxstSapSapwanr=staIpxstSapSapwanr, staIpxstIpxEstablisDestnet=staIpxstIpxEstablisDestnet, staTcpipArpDeletev=staTcpipArpDeletev, setBridWanDes=setBridWanDes, setAcco=setAcco, staPppstTxoLcpCal=staPppstTxoLcpCal, staPppstMlsRxheade=staPppstMlsRxheade, staPppstBac=staPppstBac, setIproFirFil=setIproFirFil)
mibBuilder.exportSymbols("ELSA-MIB", staChannNumbe=staChannNumbe, staCalliIfc=staCalliIfc, staPppstCbcRxreq=staPppstCbcRxreq, staChargRouteru=staChargRouteru, staWanstWantxdisc=staWanstWantxdisc, firTabInd=firTabInd, staTcpipTcpTcpwantx=staTcpipTcpTcpwantx, staIpxstRipRipwant=staIpxstRipRipwant, staTcpipNetHost=staTcpipNetHost, setNetbNtd=setNetbNtd, staLcrstMis=staLcrstMis, staChargTablebuBud=staChargTablebuBud, setWanmRoun=setWanmRoun, setAccoCurRxkby=setAccoCurRxkby, staPppstIpcRxconfigreje=staPppstIpcRxconfigreje, staPppstRxoLcpMru=staPppstRxoLcpMru, staDelet=staDelet, staTcpipNetWanr=staTcpipNetWanr, staPppstTxoIpxCols=staPppstTxoIpxCols, setAbmoClaCols=setAbmoClaCols, staPppstTxoLcpAut=staPppstTxoLcpAut, staTcpipDhcDhcprxrel=staTcpipDhcDhcprxrel, setWanmRounDev=setWanmRounDev, staPppstTxoIpcIpa=staPppstTxoIpcIpa, staCalliBch=staCalliBch, staIpxstMacIpxwanrxb=staIpxstMacIpxwanrxb, setDhcpTabTim=setDhcpTabTim, setIproRouRou=setIproRouRou, staIpxstRipTableriHop=staIpxstRipTableriHop, staChargRouterm=staChargRouterm, setCharTimetabIfc=setCharTimetabIfc, staDhcpcServeri=staDhcpcServeri, staIpxstSapSapwant=staIpxstSapSapwant, staPppstLcpTxterminatea=staPppstLcpTxterminatea, staTcpipDhcDhcprxinf=staTcpipDhcDhcprxinf, staRemotIfc=staRemotIfc, staIprouIprlanlo=staIprouIprlanlo, setWanmPpplFai=setWanmPpplFai, setNetbRemCols=setNetbRemCols, staTcpipDnsLanr=staTcpipDnsLanr, setLancInterCols=setLancInterCols, setCharSpareun=setCharSpareun, staChannBus=staChannBus, staWanstThroughpuTxsa=staWanstThroughpuTxsa, setAbmoPubFla=setAbmoPubFla, staChannSubad=staChannSubad, setSnmpMonPor=setSnmpMonPor, staPppstIpxRxterminatea=staPppstIpxRxterminatea, setCharTimetabCols=setCharTimetabCols, staIpxstSapDeletev=staIpxstSapDeletev, staConfiLoginrej=staConfiLoginrej, staQueueIpxwatc=staQueueIpxwatc, staRemotRemot=staRemotRemot, staDhcpcState=staDhcpcState, setAbmoClaBlockednumber2=setAbmoClaBlockednumber2, setLcrmAbp=setLcrmAbp, setIpxmWanRouBin=setIpxmWanRouBin, staIpxstMacIpxwanrx=staIpxstMacIpxwanrx, staPppstCcpTxresetack=staPppstCcpTxresetack, setTimeTim=setTimeTim, staDhcpcTableloIpa=staDhcpcTableloIpa, staPppstCcpRxconfigrequ=staPppstCcpRxconfigrequ, staTimesCur=staTimesCur, setBridLanDes=setBridLanDes, staWanstErrorstatIfc=staWanstErrorstatIfc, staPppstTxoIpx=staPppstTxoIpx, setBridWanSrcFiltertaDes=setBridWanSrcFiltertaDes, setNetbSco=setNetbSco, staPppstLcpRxdiscarded=staPppstLcpRxdiscarded, staTcpipTftTftpwanrx=staTcpipTftTftpwanrx, staQueueTftpser=staQueueTftpser, staPppstBacTxcallrespons=staPppstBacTxcallrespons, setSnmpMonCols=setSnmpMonCols, staPppstChaTxret=staPppstChaTxret, firVerIfc=firVerIfc, setLancInterIfc=setLancInterIfc, setDhcpHosIma=setDhcpHosIma, staWanstThroughpuRxsa=staWanstThroughpuRxsa, staIpxstWatSpxwatchdoglanr=staIpxstWatSpxwatchdoglanr, staTcpipDnsDele=staTcpipDnsDele, staTcpipDnsHitlCols=staTcpipDnsHitlCols, staIprouIprwantx=staIprouIprwantx, setIproFirObjCols=setIproFirObjCols, staDhcpcGateway=staDhcpcGateway, staRemotCols=staRemotCols, setIproMasUdpagings=setIproMasUdpagings, setIpxmWanSoc=setIpxmWanSoc, setIproMasTablemasqTim=setIproMasTablemasqTim, staTcpipDhcTabledhcpCols=staTcpipDhcTabledhcpCols, staPppstLcpTxechoreply=staPppstLcpTxechoreply, staLanstLanrxbroa=staLanstLanrxbroa, staIprouIprwanne=staIprouIprwanne, staPppstCcpCompressione=staPppstCcpCompressione, setTcpiIntraneta=setTcpiIntraneta, setIproFirFilCols=setIproFirFilCols, setIpxmSapTablCols=setIpxmSapTablCols, staPppstPapTxret=staPppstPapTxret, staPppstRxo=staPppstRxo, staTcpipIcmIcmpwanc=staTcpipIcmIcmpwanc, setWanmRounHea=setWanmRounHea, setWanmLayeEnca=setWanmLayeEnca, staInfocSta=staInfocSta, staIpxstWatIpxwatchdogwant=staIpxstWatIpxwatchdogwant, setWanmScriDev=setWanmScriDev, staPppstIpcRxconfignak=staPppstIpcRxconfignak, staPppstRxoIpcNbn=staPppstRxoIpcNbn, setCharTablebuBud=setCharTablebuBud, staPppstChaTxres=staPppstChaTxres, setAccoCurTotal=setAccoCurTotal, setIpxmLan=setIpxmLan, staIpxstWatSpxwatchdoglant=staIpxstWatSpxwatchdoglant, setAbmoPri=setAbmoPri, staPppstLcpTxprotocolre=staPppstLcpTxprotocolre, staRemotCharg=staRemotCharg, staBridgBrglanm=staBridgBrglanm, setSyslTabIpa=setSyslTabIpa, setHttpDoc=setHttpDoc, setAccoAccTxkby=setAccoAccTxkby, staIpxstIpxIpxrlanr=staIpxstIpxIpxrlanr, staConnsErro=staConnsErro, staTcpipArpTablear=staTcpipArpTablear, setAbmoPorAutodialn=setAbmoPorAutodialn, staChargTablebuIfc=staChargTablebuIfc, staBridgBrglanb=staBridgBrglanb, staChargTimetabMinutesa=staChargTimetabMinutesa, setSyslTab=setSyslTab, setIpxmSapTablHop=setIpxmSapTablHop, staWanstPackettraTxn=staWanstPackettraTxn, setIpxmRip=setIpxmRip, staQueueLanheap=staQueueLanheap, staIpxstIpxIpxrlans=staIpxstIpxIpxrlans, staIprouIprwanrx=staIprouIprwanrx, setDnsmDyn=setDnsmDyn, setAbmoPorMode=setAbmoPorMode, setWanmInte=setWanmInte, staPppstBacRxstatusreson=staPppstBacRxstatusreson, setIproMasServicetaInt=setIproMasServicetaInt, staPppstTxoLcpIfc=staPppstTxoLcpIfc, setIproMasTablemasqPro=setIproMasTablemasqPro, setWanmLaye=setWanmLaye, staQueueIpmasqr=staQueueIpmasqr, staTcpipIpsIplanfragmentationsf=staTcpipIpsIplanfragmentationsf, staPppstIpcTxconfigreje=staPppstIpcTxconfigreje, staIprouIprlanro=staIprouIprlanro, setIpxmRipRout=setIpxmRipRout, staChannCause=staChannCause, staTimesIsdInfoe=staTimesIsdInfoe, staPppstTxoLcpCols=staPppstTxoLcpCols, setLcrmTim=setLcrmTim, staPppstRxoIpxNod=staPppstRxoIpxNod, staIpxstMacIpxwanrxu=staIpxstMacIpxwanrxu, staWanstPackettraTxt=staWanstPackettraTxt, staLcrstProFai=staLcrstProFai, setWanmDial=setWanmDial, setAccoAccTotal=setAccoAccTotal, setLancPrior=setLancPrior, staTcpipIcmIcmplant=staTcpipIcmIcmplant, setIpxmSapAgin=setIpxmSapAgin, staPppstCcpRxterminatea=staPppstCcpRxterminatea, staTcpipNetRele=staTcpipNetRele, setSyslTabCols=setSyslTabCols, staWanstErrorstatRxl1=staWanstErrorstatRxl1, setBridLanDesFilterta=setBridLanDesFilterta, staWanstErrorstatCols=staWanstErrorstatCols, staTcpipNetGrou=staTcpipNetGrou, setTcpiIntranetm=setTcpiIntranetm, staTcpipDhc=staTcpipDhc, staPppstBacRxcallbackreq=staPppstBacRxcallbackreq, staPppstRxoLcpAcf=staPppstRxoLcpAcf, staPppstCcpDeletevalues=staPppstCcpDeletevalues, setIpxmWanSocCols=setIpxmWanSocCols, staWanstErrorstatStac=staWanstErrorstatStac, staTcpipTftTftplantxr=staTcpipTftTftplantxr, othManDis=othManDis, setAccoCur=setAccoCur, setSnmpPas=setSnmpPas, staIprou=staIprou, setIpxmRipLanf=setIpxmRipLanf, staTimesIsd=staTimesIsd, setLcrmTimFal=setLcrmTimFal, staPppstPppBac=staPppstPppBac, setWanmPppl=setWanmPppl, staPppstCcpTxterminatea=staPppstCcpTxterminatea, setIproDef=setIproDef, staConfi=staConfi, setNetbHosTim=setNetbHosTim, staInfoc=staInfoc, staTcpipTft=staTcpipTft, setAbmoPubOff=setAbmoPubOff, setIproIprMas=setIproIprMas, setIproRipTabDis=setIproRipTabDis, staIprouIprlantx=staIprouIprlantx, staTcpipDel=staTcpipDel, setBrid=setBrid, setIproIprIpn=setIproIprIpn, staPppstLcpRxprotocolre=staPppstLcpRxprotocolre, setSyslFacSou=setSyslFacSou, staIpxstWat=staIpxstWat, staConfiLoginloc=staConfiLoginloc, setDnsmFilCols=setDnsmFilCols, setBridLanSrcFilterta=setBridLanSrcFilterta, setDhcpTabIpa=setDhcpTabIpa, staDhcpcTabletiIpa=staDhcpcTabletiIpa, staIprouEstablisPro=staIprouEstablisPro, setWanmLayeCols=setWanmLayeCols, staTcpipHtt=staTcpipHtt, setNetbSerGro=setNetbSerGro, staPppstLcpRxconfigrequ=staPppstLcpRxconfigrequ, setWanmName=setWanmName, staPppstIpcRxterminatea=staPppstIpcRxterminatea, staPppstIpcTxconfignak=staPppstIpcTxconfignak, setBridWanSrcFilterty=setBridWanSrcFilterty, staConnsIfc=staConnsIfc, staChargTimetabIfc=staChargTimetabIfc, staDhcpcTabletiCols=staDhcpcTabletiCols, staIpxstIpxIpxrlann=staIpxstIpxIpxrlann, setDhcpBro=setDhcpBro, staTcpipDhcTabledhcpNod=staTcpipDhcTabledhcpNod, staChargTimetabCols=staChargTimetabCols, setIpxmSapLanf=setIpxmSapLanf, setDhcpAliImagea=setDhcpAliImagea, setIpxmOpe=setIpxmOpe, setIpxmRipTablNet=setIpxmRipTablNet, staPppstPap=staPppstPap, othManCon=othManCon, setIpxmSapTablSer=setIpxmSapTablSer, staLanstLanqueuee=staLanstLanqueuee, setLanmCon=setLanmCon, setAccoCurTxkby=setAccoCurTxkby, setNetbSerTim=setNetbSerTim, staTcpipNetLant=staTcpipNetLant, staPppstPapTxfai=staPppstPapTxfai, setLcrmTimCols=setLcrmTimCols, setIpxmRipTablTic=setIpxmRipTablTic, staDhcpcConfigu=staDhcpcConfigu, staIpxstIpxIpxrwanb=staIpxstIpxIpxrwanb, staDhcpcSecurit=staDhcpcSecurit, setNetb=setNetb, setIpro=setIpro, setDnsmDns=setDnsmDns, setWanmLayeLay1=setWanmLayeLay1, staTcpipNetRegi=staTcpipNetRegi, setAbmoPub=setAbmoPub, setAbmoPorDevice=setAbmoPorDevice, staIpxstWatSpxwatchdogwant=staIpxstWatSpxwatchdogwant, staTcpipDnsHitlIpa=staTcpipDnsHitlIpa, setIpxmWanRouBac=setIpxmWanRouBac, staS0busDinCha=staS0busDinCha, staIpxstIpxEstablis=staIpxstIpxEstablis, firVerCols=firVerCols, staLanstLanrxbyte=staLanstLanrxbyte, staIpxst=staIpxst, staIpxstMac=staIpxstMac, setLancPrioo=setLancPrioo)
mibBuilder.exportSymbols("ELSA-MIB", staTcpip=staTcpip, firTabCols=firTabCols, staIpxstMacIpxwantx=staIpxstMacIpxwantx, setDhcpRep=setDhcpRep, staPppstRxoLcpCal=staPppstRxoLcpCal, staTcpipIcmIcmpwanr=staTcpipIcmIcmpwanr, staChargSparemi=staChargSparemi, setLanc=setLanc, staDhcpcTabledoIpa=staDhcpcTabledoIpa, staTcpipHttHttpno=staTcpipHttHttpno, setNetbHosRem=setNetbHosRem, staTcpipArpArplanr=staTcpipArpArplanr, setCharSparemi=setCharSparemi, staIpxstIpxIpxrwanr=staIpxstIpxIpxrwanr, setDhcpOpe=setDhcpOpe, staIprouEstablisDpo=staIprouEstablisDpo, setAccoAccMacad=setAccoAccMacad, staPppstTxoLcpMag=staPppstTxoLcpMag, staTcpipTcpTcplancon=staTcpipTcpTcplancon, setDhcpHosHos=setDhcpHosHos, staIpxstIpxIpxrwanh=staIpxstIpxIpxrwanh, setIpxmRipTablNod=setIpxmRipTablNod, setConfFarc=setConfFarc, staPppstLcpRxcodereject=staPppstLcpRxcodereject, setTcpi=setTcpi, staTcpipDhcDhcplanrx=staTcpipDhcDhcplanrx, setIpxmSapLanfCols=setIpxmSapLanfCols, othBoo=othBoo, staTcpipTftTftplanrxb=staTcpipTftTftplanrxb, setLancPriorPri=setLancPriorPri, staPppstCcpTxterminater=staPppstCcpTxterminater, staIpxstMacIpxlanrxu=staIpxstMacIpxlanrxu, staQueueDnsrxqu=staQueueDnsrxqu, setSyslFacCols=setSyslFacCols, setIproFir=setIproFir, staIpxstRipTableriTic=staIpxstRipTableriTic, staTcpipTftTftpwanrxo=staTcpipTftTftpwanrxo, setIproFirObjDes=setIproFirObjDes, staTcpipArpTablearIpa=staTcpipArpTablearIpa, setLcrmTimSta=setLcrmTimSta, staPppstMlsDeletev=staPppstMlsDeletev, staCurre=staCurre, staIpxstMacIpxlanrxb=staIpxstMacIpxlanrxb, staIpxstProPropagatelanh=staIpxstProPropagatelanh, setIpxmLanSockSta=setIpxmLanSockSta, setAccoCurConne=setAccoCurConne, setTcpiNbnsbacku=setTcpiNbnsbacku, staPppstLcpTxcodereject=staPppstLcpTxcodereject, staPppstIpxTxconfigrequ=staPppstIpxTxconfigrequ, setConfLanc=setConfLanc, setNetbSerCols=setNetbSerCols, setCharRouterm=setCharRouterm, staPppstBacTxlinkdropres=staPppstBacTxlinkdropres, staIpxstIpxNetworksNod=staIpxstIpxNetworksNod, staPppstChaTxsuc=staPppstChaTxsuc, setIpxmLanSpxw=setIpxmLanSpxw, staTcpipIpsIplantx=staTcpipIpsIplantx, setIpxmRipWanfSta=setIpxmRipWanfSta, staInfocB1d=staInfocB1d, staIpxstSapTablesaSer=staIpxstSapTablesaSer, staQueueWanheap=staQueueWanheap, staLanstLanstacke=staLanstLanstacke, setDhcpHos=setDhcpHos, staPppstPapRxdis=staPppstPapRxdis, staPppstBacTxcallrequest=staPppstBacTxcallrequest, staPppstTxoLcp=staPppstTxoLcp, setBridLanMul=setBridLanMul, staTcpipArpTablearNod=staTcpipArpTablearNod, setWanmProt=setWanmProt, setIpxmSapWanfEnd=setIpxmSapWanfEnd, staCharg=staCharg, staPppstIpcRxconfigack=staPppstIpcRxconfigack, staTcpipTcpTcplanche=staTcpipTcpTcplanche, staIpxstSapSapwane=staIpxstSapSapwane, staIprouIprlanrx=staIprouIprlanrx, setTcpiTablearpNod=setTcpiTablearpNod, setDnsmDhc=setDnsmDhc, staTcpipArp=staTcpipArp, setConfMaxi=setConfMaxi, staPppstCcpRxconfignak=staPppstCcpRxconfignak, staTcpipIpsIpwanrxdisconnect=staTcpipIpsIpwanrxdisconnect, setDhcp=setDhcp, setDhcpMas=setDhcpMas, staPppstIpxRxterminater=staPppstIpxRxterminater, staIpxstRipTableri=staIpxstRipTableri, staQueueSpxwatc=staQueueSpxwatc, staPppstIpxTxterminater=staPppstIpxTxterminater, staIpxstRipTableriNod=staIpxstRipTableriNod, setLancPriorCols=setLancPriorCols, setIproDefDay=setIproDefDay, staPppstPppIpx=staPppstPppIpx, setDnsmFilNet=setDnsmFilNet, setIproMasFragmenta=setIproMasFragmenta, staLcrstProSuc=staLcrstProSuc, setDnsmDnsCols=setDnsmDnsCols, setWanmManuCon=setWanmManuCon, setIproDefInd=setIproDefInd, staLanst=staLanst, staPppstIpx=staPppstIpx, setDhcpTab=setDhcpTab, staPppstBacRxdiscarded=staPppstBacRxdiscarded, setSnmpAdm=setSnmpAdm, setBridLanDesFiltertaCols=setBridLanDesFiltertaCols, staIpxstMacIpxlanrx=staIpxstMacIpxlanrx, setDhcpHosCols=setDhcpHosCols, staPppstCbcRxres=staPppstCbcRxres, staPppstLcpTxconfignak=staPppstLcpTxconfignak, setWanmPpplTim=setWanmPpplTim, staIpxstSapTablesaNet=staIpxstSapTablesaNet, staChannState=staChannState, staDhcpcTimeoff=staDhcpcTimeoff, staIpxstRipRiplane=staIpxstRipRiplane, setIproFirRulDes=setIproFirRulDes, setLcrmTimPre=setLcrmTimPre, setBridLanDesFiltertaDes=setBridLanDesFiltertaDes, staS0busDinCols=staS0busDinCols, staCalliSys=staCalliSys, staWanstPackettra=staWanstPackettra, staTcpipDhcDhcpdisca=staTcpipDhcDhcpdisca, setAccoCurRemot=setAccoCurRemot, staIpxstSapSaplane=staIpxstSapSaplane, staWanstThroughpuCols=staWanstThroughpuCols, setTimeUtc=setTimeUtc, staIpxstMacIpxwanrxm=staIpxstMacIpxwanrxm, staLanstLanrxalig=staLanstLanrxalig, staBridgTablebrCols=staBridgTablebrCols, staRemotMode=staRemotMode, setIproFirFilIdx=setIproFirFilIdx, staBridgBrgwanb=staBridgBrgwanb, staIpxstRipRiplant=staIpxstRipRiplant, setTcpiOperating=setTcpiOperating, setAbmoPubCols=setAbmoPubCols, setWanmRoutMsn=setWanmRoutMsn, setLcrmTimNum=setLcrmTimNum, staPppstCbc=staPppstCbc, staPppstRxoIpxNet=staPppstRxoIpxNet, staTcpipIcmIcmpwans=staTcpipIcmIcmpwans, staIpxstWatIpxwatchdoglanr=staIpxstWatIpxwatchdoglanr, staTcpipIcmDeleteva=staTcpipIcmDeleteva, staDhcpcTablero=staDhcpcTablero, setIproRipTabIpn=setIproRipTabIpn, staChargTablebuSpa=staChargTablebuSpa, staChannApp=staChannApp, staLayerL1pa=staLayerL1pa, setIproFirRulSou=setIproFirRulSou, staIpxstIpxIpxrlant=staIpxstIpxIpxrlant, staLanstLantxunic=staLanstLantxunic, setLancAccesCols=setLancAccesCols, setLancInterOpe=setLancInterOpe, staChargTablebuCols=staChargTablebuCols, staDhcpcLeaseti=staDhcpcLeaseti, staPppstCcp=staPppstCcp, staWanstPackettraTxr=staWanstPackettraTxr, setAccoDel=setAccoDel, staTcpipNetLanr=staTcpipNetLanr, staQueueIprqueu=staQueueIprqueu, setIproFirFilSrca=setIproFirFilSrca, staCalliCli=staCalliCli, staPppstBacRxerrors=staPppstBacRxerrors, staChannMode=staChannMode, setIproRipTabTim=setIproRipTabTim, staIpxstIpxEstablisDestsock=staIpxstIpxEstablisDestsock, setAbmoPorCols=setAbmoPorCols, staPppstChaRxdis=staPppstChaRxdis, staTcpipTftTftplancon=staTcpipTftTftplancon, staTcpipTftTftpwantx=staTcpipTftTftpwantx, staIpxstWatIpxwatchdogwanr=staIpxstWatIpxwatchdogwanr, staTcpipIcmIcmplans=staTcpipIcmIcmplans, staQueueBridgee=staQueueBridgee, setTcpiTcpmaxcon=setTcpiTcpmaxcon, setBridRem=setBridRem, setTcpiTcpagingm=setTcpiTcpagingm, staLanstLancollis=staLanstLancollis, setAccoAccCols=setAccoAccCols, staPppstLcp=staPppstLcp, staIpxstIpxNetworks=staIpxstIpxNetworks, setIproMasFragments=setIproMasFragments, setCharDaysper=setCharDaysper, staLcrstProCols=staLcrstProCols, setBridTabFor=setBridTabFor, staPppstIpxDeletevalues=staPppstIpxDeletevalues, staPppstRxoIpc=staPppstRxoIpc, staIpxstIpxIpxrlanc=staIpxstIpxIpxrlanc, staTcpipTftTftpwanrxd=staTcpipTftTftpwanrxd, setWanmPpplAut=setWanmPpplAut, setBridWanDesFilterta=setBridWanDesFilterta, setAccoCurMacad=setAccoCurMacad, setCharTimetabSparemin=setCharTimetabSparemin, staTcpipTftTftpwantxr=staTcpipTftTftpwantxr, setBridWanBro=setBridWanBro, staWanst=staWanst, setBridTabCols=setBridTabCols, staInfocCols=staInfocCols, staTcpipTftTftpwancon=staTcpipTftTftpwancon, setIproFirRulAct=setIproFirRulAct, setWanmScriScr=setWanmScriScr, staPppstIpxTxterminatea=staPppstIpxTxterminatea, staTcpipArpArpwant=staTcpipArpArpwant, staTcpipDnsWanr=staTcpipDnsWanr, staDhcpcTableti=staDhcpcTableti, setIpxmLanIpxw=setIpxmLanIpxw, staTcpipTcpTcplanser=staTcpipTcpTcplanser, staIpxstSapSaplanr=staIpxstSapSaplanr, setWanmNameCal=setWanmNameCal, staPppstTxoIpcIfc=staPppstTxoIpcIfc, setIpxmLanRips=setIpxmLanRips, staTcpipIpsIplanchecksumerrors=staTcpipIpsIplanchecksumerrors, setIproDefSta=setIproDefSta, staBridgDeletev=staBridgDeletev, setLancEazms=setLancEazms, staPppstRxoLcpCols=staPppstRxoLcpCols, setDhcpAliImagef=setDhcpAliImagef, staQueue=staQueue, setIpxmSapLanfEnd=setIpxmSapLanfEnd, setDhcpNet=setDhcpNet, staLcrst=staLcrst, setNetbSerRem=setNetbSerRem, setSnmpMonMac=setSnmpMonMac, setWanm=setWanm, staIpxstIpxNetworksBin=staIpxstIpxNetworksBin, setWanmCbat=setWanmCbat, setAccoOpe=setAccoOpe, staPppstBacTxcallbackreq=staPppstBacTxcallbackreq, setIproMasTablemasqSpo=setIproMasTablemasqSpo, staPppstCbcTxack=staPppstCbcTxack, staPppstTxo=staPppstTxo, setTimeCal=setTimeCal, setConf=setConf, setNetbGroRem=setNetbGroRem, staBridgEstabliCols=staBridgEstabliCols, staS0busD2s=staS0busD2s, staTimesSou=staTimesSou, staCalli=staCalli, staPppstCcpTxconfigack=staPppstCcpTxconfigack, setWanmManuDis=setWanmManuDis, staPppstDel=staPppstDel, setBridTabLas=setBridTabLas, setCharTotalun=setCharTotalun, staIpxstIpxEstablisTime=staIpxstIpxEstablisTime, setLcrm=setLcrm, staWanstBytetrans=staWanstBytetrans, setWanmRoutCols=setWanmRoutCols, staTcpipDhcDhcprxreq=staTcpipDhcDhcprxreq, setBridWan=setBridWan, staS0busDinS0a=staS0busDinS0a, staPppstIpcTxterminatea=staPppstIpcTxterminatea, staPppstChaTxcha=staPppstChaTxcha, staTcpipDns=staTcpipDns, setIpxmRipTablFla=setIpxmRipTablFla, staTcpipDnsLant=staTcpipDnsLant, setNetbSerSmb=setNetbSerSmb, setBridAgi=setBridAgi, staTcpipDnsErro=staTcpipDnsErro, setTcpiDnsdefaul=setTcpiDnsdefaul)
mibBuilder.exportSymbols("ELSA-MIB", setDhcpTabHos=setDhcpTabHos, setDnsmFilIdx=setDnsmFilIdx, staIprouEstablisSrc=staIprouEstablisSrc, staTcpipIcm=staTcpipIcm, setIproFirFilActi=setIproFirFilActi, staTcpipTftTftplantxe=staTcpipTftTftplantxe, setWanmRounRou=setWanmRounRou, setDnsmDynIpa=setDnsmDynIpa, staTcpipNetDele=staTcpipNetDele, staTcpipNetPnod=staTcpipNetPnod, setIpxmSapTabl=setIpxmSapTabl, setTcpiTablearpLas=setTcpiTablearpLas, staQueueIpqueue=staQueueIpqueue, setWanmPpplDev=setWanmPpplDev, staPppstIpxRxconfignak=staPppstIpxRxconfignak, staPppstCbcTxreq=staPppstCbcTxreq, staIprouIprwandi=staIprouIprwandi, setIpxmLanNetw=setIpxmLanNetw, staIpxstIpxNetworksTim=staIpxstIpxNetworksTim, setDnsmLea=setDnsmLea, staTcpipTftTftplantxd=staTcpipTftTftplantxd, staWanstBytetransCtx=staWanstBytetransCtx, setLcrmTimDay=setLcrmTimDay, staPppstLcpTxdiscardreq=staPppstLcpTxdiscardreq, staPppstMls=staPppstMls, setIpxmWanRouNet=setIpxmWanRouNet, staTcpipTftTftpwanrxa=staTcpipTftTftpwanrxa, staPppst=staPppst, staLanstLannicerr=staLanstLannicerr, setBridWanDesFiltertaCols=setBridWanDesFiltertaCols, staTcpipIpsIpwanfragmentationer=staTcpipIpsIpwanfragmentationer, setWanmNumb=setWanmNumb, staQueueIpxqueu=staQueueIpxqueu, setSnmpMonIpa=setSnmpMonIpa, staBridgTablebrNod=staBridgTablebrNod, staIpxstIpxIpxrwans=staIpxstIpxIpxrwans, staWanstThroughpu=staWanstThroughpu, staPppstIpcRxconfigrequ=staPppstIpcRxconfigrequ, staTcpipTcpTcpwanser=staTcpipTcpTcpwanser, staConfiOutbanda=staConfiOutbanda, staPppstIpcTxterminater=staPppstIpcTxterminater, staTcpipIps=staTcpipIps, staDhcpcTabledoCols=staDhcpcTabledoCols, setWanmRoutCli=setWanmRoutCli, staIpxstSapTablesaCols=staIpxstSapTablesaCols, staIpxstIpxNetworksRem=staIpxstIpxNetworksRem, setLcrmCelDat=setLcrmCelDat, staIpxstProPropagatelanf=staIpxstProPropagatelanf, setWanmInteMaxi=setWanmInteMaxi, staPppstCcpTxresetreque=staPppstCcpTxresetreque, staLayerEnca=staLayerEnca, staIpxstSapTablesaSoc=staIpxstSapTablesaSoc, staTcpipDhcTabledhcpTim=staTcpipDhcTabledhcpTim, setLancUdppo=setLancUdppo, staTimesIsdUnits=staTimesIsdUnits, staIprouEstablisSpo=staIprouEstablisSpo, setWanmNameB1d=setWanmNameB1d, setSnmpLoc=setSnmpLoc, staIpxstRipDeletev=staIpxstRipDeletev, staPppstBacTxcallbackres=staPppstBacTxcallbackres, staIpxstRipTableriFla=staIpxstRipTableriFla, setDnsmDom=setDnsmDom, staBridgBrgwanm=staBridgBrgwanm, setDhcpSta=setDhcpSta, staTcpipIcmIcmpwant=staTcpipIcmIcmpwant, setTcpiIpaddress=setTcpiIpaddress, setIproDefCols=setIproDefCols, staTcpipTftTftplanrxr=staTcpipTftTftplanrxr, staTcpipIpsIplanfragmentationer=staTcpipIpsIplanfragmentationer, staConns=staConns, staTcpipNetWnod=staTcpipNetWnod, setBridTab=setBridTab, staTcpipNetRemoNam=staTcpipNetRemoNam, staPppstRxoIpcCols=staPppstRxoIpcCols, setIproRipTab=setIproRipTab, staTcpipHttDelete=staTcpipHttDelete, staChargTimetabSparemin=staChargTimetabSparemin, staLayer=staLayer, staTcpipNetRemoCols=staTcpipNetRemoCols, setSyslOpe=setSyslOpe, staS0busDinTei=staS0busDinTei, setBridLanSrcFilterty=setBridLanSrcFilterty, setIpxmRipWanf=setIpxmRipWanf, staS0busDinPro=staS0busDinPro, staIpxstIpxIpxrland=staIpxstIpxIpxrland, staPppstIpcRxcodereject=staPppstIpcRxcodereject, isdn_Systems=isdn_Systems, staIpxstProPropagatewanr=staIpxstProPropagatewanr, firVerMod=firVerMod, staPppstTxoLcpPfc=staPppstTxoLcpPfc, staTcpipHttHttpau=staTcpipHttHttpau, setIpxmSapLanfSta=setIpxmSapLanfSta, staPppstPppIfc=staPppstPppIfc, staQueueSnmpque=staQueueSnmpque, staIpxstSapTablesaNod=staIpxstSapTablesaNod, setLanmSpa=setLanmSpa, staBridgTablebr=staBridgTablebr, staQueueWanqueu=staQueueWanqueu, staTcpipArpArplant=staTcpipArpArplant, staTcpipTcpTcpwancon=staTcpipTcpTcpwancon, staBridgBrglanf=staBridgBrglanf, staConnsConn=staConnsConn, staPppstCbcRxack=staPppstCbcRxack, setIpxmSapTablTyp=setIpxmSapTablTyp, setIpxmRipTablHop=setIpxmRipTablHop, staTcpipDhcServerfla=staTcpipDhcServerfla, setLcrmCel=setLcrmCel, setSnmpReg=setSnmpReg, setIpxmSapWanfCols=setIpxmSapWanfCols, staTcpipTcp=staTcpipTcp, staPppstLcpDeletevalues=staPppstLcpDeletevalues, setWanmNameCols=setWanmNameCols, staChargDeletev=staChargDeletev, staQueueArpquer=staQueueArpquer, staPppstLcpTxconfigrequ=staPppstLcpTxconfigrequ, setAbmoClaBlockednumber1=setAbmoClaBlockednumber1, setCharTimetabMinutesa=setCharTimetabMinutesa, staTcpipNetRemoBac=staTcpipNetRemoBac, staConfiLoginerr=staConfiLoginerr, setNetbGroCols=setNetbGroCols, staLanstLantxbyte=staLanstLantxbyte, setIproOpe=setIproOpe, setBridLanDesFilterty=setBridLanDesFilterty, staCalliDia=staCalliDia, setNetbRemNam=setNetbRemNam, setCharTablebuCols=setCharTablebuCols, setNetbSerSer=setNetbSerSer, setIpxmSapSpoo=setIpxmSapSpoo, staBridgBrglant=staBridgBrglant, setWanmRoutIfc=setWanmRoutIfc, setDhcpTabTyp=setDhcpTabTyp, setDnsmDynTim=setDnsmDynTim, setTime=setTime, staTcpipTftTftplanrxw=staTcpipTftTftplanrxw, staWanstErrorstatRxl3=staWanstErrorstatRxl3, setAccoAccRxkby=setAccoAccRxkby, setConfPass=setConfPass, setIpxmRipLanfSta=setIpxmRipLanfSta, staIpxstSapTablesaTyp=staIpxstSapTablesaTyp, staPppstIpxTxcodereject=staPppstIpxTxcodereject, setBridTabNod=setBridTabNod, setNetbGroFla=setNetbGroFla, staIprouEstablisDes=staIprouEstablisDes, staDhcpcYouripa=staDhcpcYouripa, staPppstMlsRxmrrue=staPppstMlsRxmrrue, setAbmoClaClassofservice=setAbmoClaClassofservice, setAccoSor=setAccoSor, setIpxmRipWanu=setIpxmRipWanu, staPppstPppCols=staPppstPppCols, setName=setName, setIproFirFilSst=setIproFirFilSst, staWanstErrorstatRxl2=staWanstErrorstatRxl2, setSyslTabSou=setSyslTabSou, staChargTimetabMinutesp=staChargTimetabMinutesp, staQueueLanqueu=staQueueLanqueu, staTcpipTftTftplantxo=staTcpipTftTftplantxo, setIproMasServicetaDpo=setIproMasServicetaDpo, setDnsmOpe=setDnsmOpe, setTcpiIpnetmask=setTcpiIpnetmask, staPppstBacRxstatusindic=staPppstBacRxstatusindic, setDnsmDnsHos=setDnsmDnsHos, setLcrmTimSto=setLcrmTimSto, setAbmoRin=setAbmoRin, staPppstIpxRxdiscarded=staPppstIpxRxdiscarded, staPppstMlsRxseqlo=staPppstMlsRxseqlo, setConfWanc=setConfWanc, setLcrmCelInd=setLcrmCelInd, setWanmInteDial=setWanmInteDial, setIproFirFilDst=setIproFirFilDst, staTcpipIpsIplanfragmentations=staTcpipIpsIplanfragmentations, staConfiOutbandt=staConfiOutbandt, staQueueTcpqueu=staQueueTcpqueu, setAccoSav=setAccoSav, setNetbHosNam=setNetbHosNam, staQueueDhcpcli=staQueueDhcpcli, staPppstPapRxsuc=staPppstPapRxsuc, setCharTablebu=setCharTablebu, staTcpipNetMnod=staTcpipNetMnod, staPppstBacRxcallrespons=staPppstBacRxcallrespons, staTcpipTftTftpwantxa=staTcpipTftTftpwantxa, staTcpipDnsDnsa=staTcpipDnsDnsa, staTcpipDhcDhcprxdis=staTcpipDhcDhcprxdis, staIpxstSapTablesaHop=staIpxstSapTablesaHop, staChargTotalun=staChargTotalun, setIproRouIcm=setIproRouIcm, staChannConnt=staChannConnt, setWanmLayeL2op=setWanmLayeL2op, staWanstThroughpuIfc=staWanstThroughpuIfc, staPppstRxoIpcDns=staPppstRxoIpcDns, staIpxstIpxNetworksCols=staIpxstIpxNetworksCols, setIpxmSapTablTim=setIpxmSapTablTim, staTcpipDnsFilt=staTcpipDnsFilt, setCharRouteru=setCharRouteru, staConfiLantotal=staConfiLantotal, staTcpipIpsIpwanfragmentationsf=staTcpipIpsIpwanfragmentationsf, setAccoAcc=setAccoAcc, setIproMasIcmpaging=setIproMasIcmpaging, staIpxstProPropagatelanc=staIpxstProPropagatelanc, staIpxstIpxIpxrwand=staIpxstIpxIpxrwand, staIpxstProPropagatewant=staIpxstProPropagatewant, staConfiLanactiv=staConfiLanactiv, setBridOpe=setBridOpe, staPppstRxoIpxRou=staPppstRxoIpxRou, staWanstThroughpuTxsc=staWanstThroughpuTxsc, staWanstBytetransRxb=staWanstBytetransRxb, setDhcpEnd=setDhcpEnd, staTcpipDnsWant=staTcpipDnsWant, staPppstRxoIpx=staPppstRxoIpx, staWanstBytetransTxb=staWanstBytetransTxb, setIpxmRipTablCols=setIpxmRipTablCols, staIpxstIpxEstablisSourcene=staIpxstIpxEstablisSourcene, setWanmNumbCols=setWanmNumbCols, staConnsCont=staConnsCont, setIproFirRul=setIproFirRul, setIpxmWanRou=setIpxmWanRou, setDnsmFilIpa=setDnsmFilIpa, staWanstPackettraRx=staWanstPackettraRx, staPppstLcpRxconfignak=staPppstLcpRxconfignak, staTcpipNet=staTcpipNet, setIproIprCols=setIproIprCols, staBridgEstabliTim=staBridgEstabliTim, setIproFirRulPro=setIproFirRulPro, setIproFirObj=setIproFirObj, staQueueIpmasqt=staQueueIpmasqt, setWanmRoutYc=setWanmRoutYc, staChann=staChann, staIprouIprlanne=staIprouIprlanne, setIpxmWan=setIpxmWan, setWanmNameWan=setWanmNameWan, staWanstDeleteval=staWanstDeleteval, firTabVer=firTabVer, setWanmPpplKey=setWanmPpplKey, staPppstCcpTxcodereject=staPppstCcpTxcodereject, staPppstCbcDelet=staPppstCbcDelet, setDhcpMax=setDhcpMax, staIprouIprlanfi=staIprouIprlanfi, staPppstTxoIpxIfc=staPppstTxoIpxIfc, setSyslTabLev=setSyslTabLev, staChargTimetab=staChargTimetab, staTcpipArpArpwane=staTcpipArpArpwane, setLancPriorIfc=setLancPriorIfc, setIproMasServiceta=setIproMasServiceta, staQueueArpqueu=staQueueArpqueu, setIpxmLanLocr=setIpxmLanLocr, staPppstChaRxfai=staPppstChaRxfai, staTimesSet=staTimesSet, staPppstCcpRxconfigreje=staPppstCcpRxconfigreje, staPppstLcpRxterminater=staPppstLcpRxterminater, staIpxstIpx=staIpxstIpx, staChannCols=staChannCols, staPppstCcpRxdiscarded=staPppstCcpRxdiscarded, setIproMasServicetaCols=setIproMasServicetaCols, setLancAccesIpa=setLancAccesIpa, staChargTimetabBudgetmi=staChargTimetabBudgetmi)
mibBuilder.exportSymbols("ELSA-MIB", setIpxmSapTablNet=setIpxmSapTablNet, staQueueIprripq=staQueueIprripq, setNetbHosFla=setNetbHosFla, staConne=staConne, setIpxmSap=setIpxmSap, setIproMasTablemasqCols=setIproMasTablemasqCols, oth=oth, staTcpipDhcDhcptxnak=staTcpipDhcDhcptxnak, setAbmoPubExc=setAbmoPubExc, setIproIprIpa=setIproIprIpa, staConnsPass=staConnsPass, staIpxstProPropagatelanb=staIpxstProPropagatelanb, staInfocB2d=staInfocB2d, staPppstRxoLcpAcc=staPppstRxoLcpAcc, staBridg=staBridg, staIpxstProPropagatelans=staIpxstProPropagatelans, staPppstPppCcp=staPppstPppCcp, setLcrmTimInd=setLcrmTimInd, setIproFirFilDsta=setIproFirFilDsta, setWanmPpplTry=setWanmPpplTry, setIproRip=setIproRip, staDhcpcTableloCols=staDhcpcTableloCols, staWanstPackettraCols=staWanstPackettraCols, staPppstMlsRxdisca=staPppstMlsRxdisca, setCharTablebuSpa=setCharTablebuSpa, staPppstPppPha=staPppstPppPha, setAccoCurUsern=setAccoCurUsern, staIpxstRipTableriNet=staIpxstRipTableriNet, setNetbWat=setNetbWat, staPppstBacRxcallrequest=staPppstBacRxcallrequest, setIpxmRipLanfEnd=setIpxmRipLanfEnd, staTcpipArpTablearCon=staTcpipArpTablearCon, staTcpipDhcDhcptxoff=staTcpipDhcDhcptxoff, staWanstThroughpuRxsc=staWanstThroughpuRxsc, setLanm=setLanm, staBridgBrglanr=staBridgBrglanr, setAbmoPorEazmsns=setAbmoPorEazmsns, staQueueIpurgen=staQueueIpurgen, setIpxmSapTablNod=setIpxmSapTablNod, setSnmp=setSnmp, setIpxmRipTablTim=setIpxmRipTablTim, staPppstRxoLcpMag=staPppstRxoLcpMag)
