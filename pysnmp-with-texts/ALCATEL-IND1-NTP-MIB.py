#
# PySNMP MIB module ALCATEL-IND1-NTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-NTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Ntp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Ntp")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, NotificationType, ModuleIdentity, TimeTicks, Integer32, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Bits, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "NotificationType", "ModuleIdentity", "TimeTicks", "Integer32", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Bits", "ObjectIdentity", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
alcatelIND1NTPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1))
alcatelIND1NTPMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1NTPMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1NTPMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1NTPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1NTPMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent,Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1NTPMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): Propietary NTP MIB definitions The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1NTPMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 0))
if mibBuilder.loadTexts: alcatelIND1NTPMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1NTPMIBNotifications.setDescription('Branch For NTP MIB Subsystem Notifications.')
alcatelIND1NTPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1))
if mibBuilder.loadTexts: alcatelIND1NTPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1NTPMIBObjects.setDescription('Branch For NTP Subsystem Managed Objects.')
alaNtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1))
alaNtpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2))
alaNtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3))
alaNtpStatsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4))
alaNtpStatsLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 5))
alaNtpStatsIo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6))
alaNtpAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7))
alaNtpLocalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8))
alaIND1NtpMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2))
if mibBuilder.loadTexts: alaIND1NtpMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alaIND1NtpMIBConformance.setDescription('Branch For Ntp Subsystem Managed Objects.')
alaIND1NtpMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1))
if mibBuilder.loadTexts: alaIND1NtpMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alaIND1NtpMIBGroups.setDescription('Branch For Ntp Subsystem Managed Objects.')
alaIND1NtpMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 2))
if mibBuilder.loadTexts: alaIND1NtpMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alaIND1NtpMIBCompliances.setDescription('Branch For Ntp Subsystem Managed Objects.')
alaNtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpEnable.setStatus('current')
if mibBuilder.loadTexts: alaNtpEnable.setDescription('Enables/disables NTP clock discipline.')
alaNtpMonitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpMonitorEnable.setStatus('current')
if mibBuilder.loadTexts: alaNtpMonitorEnable.setDescription('Enables/disables NTP monitor.')
alaNtpBroadcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpBroadcastEnable.setStatus('current')
if mibBuilder.loadTexts: alaNtpBroadcastEnable.setDescription('Enables/disables NTP broadcast client.')
alaNtpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alaNtpPeerTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerTable.setDescription('Table containing the synchronization host this switch will be associated with.')
alaNtpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpPeerAddressType"), (0, "ALCATEL-IND1-NTP-MIB", "alaNtpPeerAddress"))
if mibBuilder.loadTexts: alaNtpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerEntry.setDescription('Each entry corresponds to a synchronization host.')
alaNtpPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaNtpPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerAddressType.setDescription('The InetAddress type of the synchronization host. Only types InetAddressIPv4 (1) and InetAddressDNS (16) are supported.')
alaNtpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaNtpPeerAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerAddress.setDescription('The InetAddress of the synchronization host.')
alaNtpPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerIpAddress.setDescription('The IP address of the synchronization host derrived from the InetAddress.')
alaNtpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("client", 3), ("server", 4), ("broadcast", 5), ("bclient", 8))).clone('client')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpPeerType.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerType.setDescription('Type of synchronization host that will communicate with this switch. ')
alaNtpPeerAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpPeerAuth.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerAuth.setDescription('The authorization keyid for the remote host.')
alaNtpPeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpPeerVersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerVersion.setDescription('The NTP version to communicate with the remote host.')
alaNtpPeerMinpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 10)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpPeerMinpoll.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerMinpoll.setDescription('The minimum poll duration to the remote host. This value is a power of 2 seconds when the poll will occur. For example, 4 (2 to the power 4) is 16 seconds. The maximum poll value is 10.')
alaNtpPeerPrefer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prefer", 1), ("noPrefer", 2))).clone('noPrefer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpPeerPrefer.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerPrefer.setDescription('Marks the host as a preferred connection.')
alaNtpPeerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpPeerAdmin.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerAdmin.setDescription('Used in accordance to installation and removal conventions for conceptual rows. The RowStatus values that are supported are the following: active(1) - The row is active and valid. createAndGo(4) - The row will be created and activated. destroy(6) - The row will be destroyed.')
alaNtpPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerName.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerName.setDescription('The DNS name for the peer association derrived from the InetAddress.')
alaNtpPeerStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpPeerStratum.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerStratum.setDescription('The stratum level of the remote peer. If this number is 16, the remote peer has not been synchronized. This parameter can only be set with a LOCALCLOCK server.')
alaNtpAuthDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpAuthDelay.setStatus('current')
if mibBuilder.loadTexts: alaNtpAuthDelay.setDescription('This field sets a specified time interval that is added to timestamps included in requests to the server that required authentication. Typically this delay is needed in cases of long delay paths, or servers whose clocks are unsynchronized. Value is in milli-seconds')
alaNtpBroadcastDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpBroadcastDelay.setStatus('current')
if mibBuilder.loadTexts: alaNtpBroadcastDelay.setDescription('This field sets a specified time interval that is added to timestamps included in messages from broadcast servers. Value is in milli-seconds')
alaNtpKeysFile = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpKeysFile.setStatus('current')
if mibBuilder.loadTexts: alaNtpKeysFile.setDescription('Name of the file which has the authorization keys.')
alaNtpConfigReqKeyId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpConfigReqKeyId.setStatus('current')
if mibBuilder.loadTexts: alaNtpConfigReqKeyId.setDescription('Request messages ask for information from the NTP entity such as timestamp information, statistics, etc. This changes the authentication key identifier for request messages sent from the switch to another NTP entity.')
alaNtpConfigCtlKeyId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpConfigCtlKeyId.setStatus('current')
if mibBuilder.loadTexts: alaNtpConfigCtlKeyId.setDescription('Control messages attempt to change the configuration of the NTP entity in some fashion. This changes the authentication key identifier for control messages sent from the switch to another NTP entity.')
alaNtpConfigCfgKeyId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpConfigCfgKeyId.setStatus('current')
if mibBuilder.loadTexts: alaNtpConfigCfgKeyId.setDescription('Configuration messages changes information on the NTP entity.')
alaNtpPrecision = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -1)).clone(-6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpPrecision.setStatus('current')
if mibBuilder.loadTexts: alaNtpPrecision.setDescription("This sets the server's advertised precision.")
alaNtpPeerTests = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpPeerTests.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerTests.setDescription('Enables/disable NTP peer synchronization tests. Disabling peer tests allows the NTP client to synchonize with servers that are themselves unsynchronized or would otherwise be eliminated by other time source tests.')
alaNtpSysStratum = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpSysStratum.setStatus('current')
if mibBuilder.loadTexts: alaNtpSysStratum.setDescription('The stratum level of the local server. If this number is 16 it indicates that the switch is not synchronized. This helps the clients to select clocks with lower stratum number')
alaNtpMaxAssociation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpMaxAssociation.setStatus('current')
if mibBuilder.loadTexts: alaNtpMaxAssociation.setDescription("The maximum number of peer and client associations that the switch will serve. This helps ensure that the switch isn't overwhelmed by huge numbers of NTP synchronization requests")
alaNtpAuthenticate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpAuthenticate.setStatus('current')
if mibBuilder.loadTexts: alaNtpAuthenticate.setDescription('Enable/Disable authentication of the NTP requests on the switch')
alaNtpPeerListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaNtpPeerListTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListTable.setDescription('Used to display a brief list of all NTP associations related to this switch (servers, peers, etc.).')
alaNtpPeerListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpPeerListAddressType"), (0, "ALCATEL-IND1-NTP-MIB", "alaNtpPeerListAddress"))
if mibBuilder.loadTexts: alaNtpPeerListEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListEntry.setDescription('Each entry corresponds to one association.')
alaNtpPeerListAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaNtpPeerListAddressType.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListAddressType.setDescription('The InetAddress type of the synchronization host. InetAddressIPv4 (1) is the only type currently supported.')
alaNtpPeerListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaNtpPeerListAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListAddress.setDescription('The InetAddress of the association.')
alaNtpPeerListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListIpAddress.setDescription('The IP address of the association.')
alaNtpPeerListLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListLocal.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListLocal.setDescription('The local interface address assigned by NTP to the remote association. If this address is 0.0.0.0, then the local address has yet to be determined.')
alaNtpPeerListStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListStratum.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListStratum.setDescription('The stratum level of the remote peer. If this number is 16, the remote peer has not been synchronized.')
alaNtpPeerListPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListPoll.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListPoll.setDescription('The polling interval, in seconds.')
alaNtpPeerListReach = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListReach.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListReach.setDescription('The reachability register of the remote association, in octal format. This number is determined by the NTP algorithm.')
alaNtpPeerListDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListDelay.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListDelay.setDescription('The currently estimated delay of this remote association, in seconds. This time is determined by the NTP algorithm.')
alaNtpPeerListOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListOffset.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListOffset.setDescription('The currently estimated offset of this remote association, in seconds. This time is determined by the NTP algorithm.')
alaNtpPeerListDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListDispersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListDispersion.setDescription('The currently estimated dispersion of this remote association, in seconds. This time is determined by the NTP algorithm.')
alaNtpPeerListSynced = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronized", 1), ("notSynchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListSynced.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListSynced.setDescription('Indicates that NTP is synchronized with this entity.')
alaNtpPeerListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerListName.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerListName.setDescription('The DNS name for the peer association,')
alaNtpInfoPeer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoPeer.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoPeer.setDescription('The IP address of the remote association.')
alaNtpInfoMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoMode.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoMode.setDescription('The peer mode of this remote association.')
alaNtpInfoLeapIndicator = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noLeapWarning", 0), ("leapAddSecond", 1), ("leapDeleteSecond", 2), ("leapNotInSync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoLeapIndicator.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoLeapIndicator.setDescription('The status of leap second insertion for this association.')
alaNtpInfoStratum = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoStratum.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoStratum.setDescription('The stratum level of the remote peer. If this number is 16, the remote peer has not been synchronized.')
alaNtpInfoPrecision = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoPrecision.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoPrecision.setDescription('The advertised precision of the switch. It will be a number between -4 and -20.')
alaNtpInfoDistance = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoDistance.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoDistance.setDescription('This is a signed fixed-point number indicating the total roundtrip delay to the primary reference source at the root of the synchronization subnet, in seconds.')
alaNtpInfoDispersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoDispersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoDispersion.setDescription('This is a signed fixed-point number indicating the maximum error relative to the primary reference source at the root of the synchronization subnet, in seconds.')
alaNtpInfoReferenceId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoReferenceId.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoReferenceId.setDescription('This is a 32-bit code identifying the particular reference clock. Can be an IP address.')
alaNtpInfoReferenceTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoReferenceTime.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoReferenceTime.setDescription('This is the local time at which the local clock was last set or corrected.')
alaNtpInfoFrequency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoFrequency.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoFrequency.setDescription("A number determining the local clocks frequency in relation to a reference clock's Pulse per Second (PPS). If the clock is running in perfect synchronization, this number should be 1. Otherwise, it will be slightly lower or higher in order to compensate for the time difference.")
alaNtpInfoStability = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoStability.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoStability.setDescription("The stability of the clock in relation to a reference clock's Pulse per Second (PPS).")
alaNtpInfoBroadcastDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoBroadcastDelay.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoBroadcastDelay.setDescription('The broadcast delay, in seconds, of this association.')
alaNtpInfoAuthDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 8, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpInfoAuthDelay.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoAuthDelay.setDescription('The authentication delay, in seconds, of this association.')
alaNtpPeerShowTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3), )
if mibBuilder.loadTexts: alaNtpPeerShowTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowTable.setDescription('Used to display a brief list of all NTP associations related to this switch (servers, peers, etc.).')
alaNtpPeerShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowRemoteAddressType"), (0, "ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowRemoteAddress"))
if mibBuilder.loadTexts: alaNtpPeerShowEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowEntry.setDescription('Each entry corresponds to one association.')
alaNtpPeerShowRemoteAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaNtpPeerShowRemoteAddressType.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowRemoteAddressType.setDescription('The InetAddress type of the synchronization host. InetAddressIPv4 (1) is the only type currently supported.')
alaNtpPeerShowRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaNtpPeerShowRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowRemoteAddress.setDescription('The InetAddress of the remote association.')
alaNtpPeerShowRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowRemoteIpAddress.setDescription('The IP address of the remote association.')
alaNtpPeerShowLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowLocal.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowLocal.setDescription('The local interface address assigned by NTP to the remote associations.')
alaNtpPeerShowHmode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowHmode.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowHmode.setDescription('The host mode of this remote association.')
alaNtpPeerShowPmode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowPmode.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowPmode.setDescription('The peer mode of this remote association.')
alaNtpPeerShowStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowStratum.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowStratum.setDescription('The stratum level of the remote peer.')
alaNtpPeerShowPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowPrecision.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowPrecision.setDescription('The advertised precision of this association, which is a number from -4 to -20.')
alaNtpPeerShowLeapIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noLeapWarning", 0), ("leapAddSecond", 1), ("leapDeleteSecond", 2), ("leapNotInSync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowLeapIndicator.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowLeapIndicator.setDescription('The status of leap second insertion for this association.')
alaNtpPeerShowReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowReferenceId.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowReferenceId.setDescription('This is a 32-bit code identifying the peers primary reference source. Normally an IP address.')
alaNtpPeerShowRootDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowRootDistance.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowRootDistance.setDescription('This is a signed fixed-point number indicating the total roundtrip delay to the primary reference source at the root of the synchronization subnet, in seconds.')
alaNtpPeerShowRootDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowRootDispersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowRootDispersion.setDescription('This is a signed fixed-point number indicating the maximum error relative to the primary reference source at the root of the synchronization subnet, in seconds.')
alaNtpPeerShowPpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowPpoll.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowPpoll.setDescription('The poll time for this association when it is a peer.')
alaNtpPeerShowHpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowHpoll.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowHpoll.setDescription('The poll time for this association when it is a host.')
alaNtpPeerShowKeyid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowKeyid.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowKeyid.setDescription('This is an integer identifying the cryptographic key used to generate the message authentication code.')
alaNtpPeerShowVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowVersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowVersion.setDescription('What version of NTP this association is using.')
alaNtpPeerShowAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowAssociation.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowAssociation.setDescription('The number of seconds since this NTP entity was associated with the switch.')
alaNtpPeerShowValid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowValid.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowValid.setDescription('This is an integer indicating the validity of current NTP system variables. The validity is made false if system variable are changed and a new peer sample under the changed configuration has not been received.')
alaNtpPeerShowReach = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowReach.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowReach.setDescription('This is a shift register used to determine the reachability status of this peer.')
alaNtpPeerShowUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowUnreach.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowUnreach.setDescription('The number of times this NTP entity was unreachable.')
alaNtpPeerShowFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowFlash.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowFlash.setDescription('This bitmap reveals the state at the last grumble from the peer and are most handy for diagnosing problems. Duplicate packet: 0x0001 Bogus packet: 0x0002 Protocol unsynchronized: 0x0004 Access denied: 0x0008 Authentication failure: 0x0010 Peer clock unsynchronized: 0x0020 Peer stratum out: 0x0040 Root delay/dispersion bounds check: 0x0080 Peer delay dispersion bounds check: 0x0100 Autokey failed: 0x0200 Proventic not confirmed: 0x0400')
alaNtpPeerShowBroadcastOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowBroadcastOffset.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowBroadcastOffset.setDescription('The broadcast delay.')
alaNtpPeerShowTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowTTL.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowTTL.setDescription('This field displays the Time-to-Live (TTL) time in seconds and the mode (unicast, multicast, or broadcast) of NTP messages sent to a broadcast address.')
alaNtpPeerShowTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowTimer.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowTimer.setDescription('The time to next poll in seconds.')
alaNtpPeerShowFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowFlags.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowFlags.setDescription('This details which flags have been configured for this peer. Association configured: 0x01 System peer: 0x02 Enabled for burst mode synchronization: 0x04 Reference clock: 0x08 Preferred server: 0x10 Authentable: 0x20 Synchronization candidate: 0x40 Synchronization candidates short-list: 0x80')
alaNtpPeerShowReferenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 26), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowReferenceTime.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowReferenceTime.setDescription('This is the local time, in timestamp format, when the peer clock was last updated.')
alaNtpPeerShowOriginateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 27), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowOriginateTime.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowOriginateTime.setDescription('This is the local time, in timestamp format, of the peer when its latest NTP message was sent.')
alaNtpPeerShowReceiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowReceiveTime.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowReceiveTime.setDescription('This is the local time, in timestamp format, when the latest NTP message from the peer arrived.')
alaNtpPeerShowTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 29), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowTransmitTime.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowTransmitTime.setDescription('This is the local time, in timestamp format, at which the last NTP message was sent from this association.')
alaNtpPeerShowOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 30), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowOffset.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowOffset.setDescription('The currently estimated offset of this remote association, in seconds.')
alaNtpPeerShowDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 31), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowDelay.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowDelay.setDescription('The currently estimated delay of this remote association, in seconds.')
alaNtpPeerShowDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 32), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowDispersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowDispersion.setDescription('The currently estimated dispersion of this remote association, in seconds.')
alaNtpPeerShowName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 33), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowName.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowName.setDescription('The DNS name for the peer association,')
alaNtpPeerShowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 3, 1, 34), Bits().clone(namedValues=NamedValues(("rejected", 0), ("falsticker", 1), ("excess", 2), ("outlyer", 3), ("candidate", 4), ("exceedsMaxDistance", 5), ("selected", 6), ("selectedPPS", 7), ("reachable", 8), ("authenticated", 9), ("authenticationRequired", 10), ("configured", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpPeerShowStatus.setStatus('current')
if mibBuilder.loadTexts: alaNtpPeerShowStatus.setDescription('Peer selection status: Bits 0 - 7 - Rejected due to high stratum and/or failed sanity checks: 1 - Designated falsticker by the intersection algorithm: 2 - Excess, culled from the end of the candidate list: 3 - Outlyer, discarded by the clustering algorithm: 4 - Candidate, included in the final selection set: 5 - Selected for synchronization; but distance exceeds maximum: 6 - Selected for synchronization: 7 - Selected for synchronization, PPS signal in use: 8 Peer association status: Bits 9 - 12 - Peer association configured: 9 - Peer authentication required: 10 - Last peer message authenticated: 11 - Peer reachable: 12')
alaNtpStatsStatUptime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatUptime.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatUptime.setDescription('The number of seconds the local NTP server has been associated with the switch.')
alaNtpStatsStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatReset.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatReset.setDescription('The number of seconds since the last time the local NTP server has been restarted.')
alaNtpStatsStatBadStratum = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatBadStratum.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatBadStratum.setDescription('The number of NTP packets received that had a corrupted stratum bit in the data of the packet.')
alaNtpStatsStatOldVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatOldVersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatOldVersion.setDescription('The number of NTP packets received that were of an older version of NTP (either version 1 or 2).')
alaNtpStatsStatNewVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatNewVersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatNewVersion.setDescription('The number of NTP packets received that were version 3 of NTP.')
alaNtpStatsStatUnknownVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatUnknownVersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatUnknownVersion.setDescription('The number of NTP packets received that the version was unknown (most likely due to packet corruption).')
alaNtpStatsStatBadLength = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatBadLength.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatBadLength.setDescription('The number of NTP packets received that did not fit the NTP packet structure (most likely due to packet corruption).')
alaNtpStatsStatProcessed = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatProcessed.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatProcessed.setDescription('The total number of NTP packets processed.')
alaNtpStatsStatBadAuth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatBadAuth.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatBadAuth.setDescription('The number of NTP packets rejected because they did not meet authentication standards.')
alaNtpStatsStatLimitRejects = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsStatLimitRejects.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatLimitRejects.setDescription('The number of NTP packets rejected because they did not meet authentication standards.')
alaNtpStatsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2), )
if mibBuilder.loadTexts: alaNtpStatsPeerTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerTable.setDescription('Table containing the synchronization host statistics.')
alaNtpStatsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerAddressType"), (0, "ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerAddress"))
if mibBuilder.loadTexts: alaNtpStatsPeerEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerEntry.setDescription('Each entry corresponds to a synchronization host.')
alaNtpStatsPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaNtpStatsPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerAddressType.setDescription('The InetAddress type of the synchronization host. InetAddressIPv4 (1) is the only type currently supported.')
alaNtpStatsPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaNtpStatsPeerAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerAddress.setDescription('The InetAddress of the synchronization host.')
alaNtpStatsPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerIpAddress.setDescription('The IP address of the synchronization host.')
alaNtpStatsPeerLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerLocal.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerLocal.setDescription('The local interface address assigned by NTP to the remote association.')
alaNtpStatsPeerLastRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerLastRcv.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerLastRcv.setDescription('The time since the last packet was received.')
alaNtpStatsPeerNextSend = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerNextSend.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerNextSend.setDescription('The time until the next packet is to be sent.')
alaNtpStatsPeerReachChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerReachChange.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerReachChange.setDescription('The time that the peer has been reachable.')
alaNtpStatsPeerPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerPacketsSent.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerPacketsSent.setDescription('The number of packets that have been sent.')
alaNtpStatsPeerPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerPacketsRcvd.setDescription('The number of packets that have been received.')
alaNtpStatsPeerBadAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerBadAuth.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerBadAuth.setDescription('The number of packets received with bad authentication.')
alaNtpStatsPeerBogusOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerBogusOrigin.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerBogusOrigin.setDescription('The number of bogus packets.')
alaNtpStatsPeerDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerDuplicate.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerDuplicate.setDescription('The number of duplicated packets received.')
alaNtpStatsPeerBadDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerBadDispersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerBadDispersion.setDescription('The number bad dispersions.')
alaNtpStatsPeerBadRefTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerBadRefTime.setStatus('deprecated')
if mibBuilder.loadTexts: alaNtpStatsPeerBadRefTime.setDescription('The number of bad reference times received.')
alaNtpStatsPeerCandidateOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerCandidateOrder.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerCandidateOrder.setDescription('The order of synchronization candidates.')
alaNtpStatsPeerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpStatsPeerReset.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerReset.setDescription('The number of seconds since the statistics for this peer were last reset. Writing any value will reset the peer statistics. ')
alaNtpStatsPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 2, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsPeerName.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsPeerName.setDescription('The DNS name for the peer association,')
alaNtpStatsLoopOffset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 5, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsLoopOffset.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsLoopOffset.setDescription('The currently estimated offset of this remote association, in seconds. This counter indicates the offset of the peer clock relative to the local clock.')
alaNtpStatsLoopFrequency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 5, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsLoopFrequency.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsLoopFrequency.setDescription('A number determining the local clocks frequency in relation to a reference clocks Pulse per Second (PPS). If the clock is running in perfect synchronization, this number should be 1. Otherwise, it will be slightly lower or higher in order to compensate for the time discrepancy between the reference clock and the local clock.')
alaNtpStatsLoopPollAdjust = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsLoopPollAdjust.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsLoopPollAdjust.setDescription('Determines the peer polling time.')
alaNtpStatsLoopWatchdog = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsLoopWatchdog.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsLoopWatchdog.setDescription('Makes sure that NTP timer continues to run.')
alaNtpStatsIoReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoReset.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoReset.setDescription('The number of seconds since the last restart of NTP.')
alaNtpStatsIoRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoRcvBuffers.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoRcvBuffers.setDescription('The number of switch receive buffers currently being used by this NTP entity.')
alaNtpStatsIoFreeRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoFreeRcvBuffers.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoFreeRcvBuffers.setDescription('The number of free receive buffers.')
alaNtpStatsIoUsedRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoUsedRcvBuffers.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoUsedRcvBuffers.setDescription('The number of receive buffers currently being used.')
alaNtpStatsIoRefills = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoRefills.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoRefills.setDescription('The number of times we added packets.')
alaNtpStatsIoDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoDroppedPackets.setDescription('The number of packets dropped.')
alaNtpStatsIoIgnoredPackets = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoIgnoredPackets.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoIgnoredPackets.setDescription('The number of packets ignored.')
alaNtpStatsIoRcvPackets = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoRcvPackets.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoRcvPackets.setDescription('The total number of NTP packets received by the switch.')
alaNtpStatsIoSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoSentPackets.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoSentPackets.setDescription('The total number of NTP packets sent by the switch.')
alaNtpStatsIoNotSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoNotSentPackets.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoNotSentPackets.setDescription('The number of NTP packets generated but not sent due to restrictions.')
alaNtpStatsIoInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoInterrupts.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoInterrupts.setDescription('The number of times NTP information was interrupted in the process of transmitting or receiving.')
alaNtpStatsIoInterruptsRcv = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsIoInterruptsRcv.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoInterruptsRcv.setDescription('The number of packets received by the interrupt handler.')
alaNtpStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpStatsReset.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsReset.setDescription('Resets the statistics counters for the following subsystems: 0x01 - all peers 0x02 - i/o 0x04 - system 0x08 - memory 0x10 - timer 0x20 - authentication 0x40 - control')
alaNtpStatsMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6), )
if mibBuilder.loadTexts: alaNtpStatsMonitorTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorTable.setDescription('Table containing the association monitoring list.')
alaNtpStatsMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorIndex"))
if mibBuilder.loadTexts: alaNtpStatsMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorEntry.setDescription('Each entry corresponds to a synchronization host.')
alaNtpStatsMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaNtpStatsMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorIndex.setDescription('Table index.')
alaNtpStatsMonitorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorAddress.setDescription('The IP address of the remote association.')
alaNtpStatsMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorPort.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorPort.setDescription('The IP port number of the association.')
alaNtpStatsMonitorLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorLocalAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorLocalAddress.setDescription('The local IP address of the association.')
alaNtpStatsMonitorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorCount.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorCount.setDescription('The number of NTP packets received from this association.')
alaNtpStatsMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorMode.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorMode.setDescription('The mode the NTP association uses in relation to the switch.')
alaNtpStatsMonitorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorVersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorVersion.setDescription('The version of NTP the association is using.')
alaNtpStatsMonitorDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorDrop.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorDrop.setDescription('The number of NTP packets received from this association that were dropped.')
alaNtpStatsMonitorLast = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorLast.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorLast.setDescription('The number of seconds since the last NTP message has been received from this association.')
alaNtpStatsMonitorFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorFirst.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorFirst.setDescription('The number of seconds since the first NTP message has been received from this association.')
alaNtpStatsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 3, 6, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpStatsMonitorName.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorName.setDescription('The DNS name for the peer association,')
alaNtpAccessKeyIdTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaNtpAccessKeyIdTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessKeyIdTable.setDescription('Table containing the trusted keys.')
alaNtpAccessKeyIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpAccessKeyIdKeyId"))
if mibBuilder.loadTexts: alaNtpAccessKeyIdEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessKeyIdEntry.setDescription('Entry of a trusted key.')
alaNtpAccessKeyIdKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: alaNtpAccessKeyIdKeyId.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessKeyIdKeyId.setDescription('Keyid of the key in the key file.')
alaNtpAccessKeyIdTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpAccessKeyIdTrust.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessKeyIdTrust.setDescription('The current state of trust of the table entry.')
alaNtpAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 2), )
if mibBuilder.loadTexts: alaNtpAccessRestrictedTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRestrictedTable.setDescription('Table containing the restricted addresses.')
alaNtpAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpAccessRestrictedIpAddress"), (0, "ALCATEL-IND1-NTP-MIB", "alaNtpAccessRestrictedMask"))
if mibBuilder.loadTexts: alaNtpAccessRestrictedEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRestrictedEntry.setDescription('Entry of a restricted address.')
alaNtpAccessRestrictedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaNtpAccessRestrictedIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRestrictedIpAddress.setDescription('IP address to restrict.')
alaNtpAccessRestrictedMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaNtpAccessRestrictedMask.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRestrictedMask.setDescription('IP mask to restrict.')
alaNtpAccessRestrictedRestrictions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpAccessRestrictedRestrictions.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRestrictedRestrictions.setDescription("A mask indicating the restrictions to apply to the entry. 0x0001 - ignore, Ignore all packets from hosts. Can't use this on default (0.0.0.0). 0x0002 - noserve, Ignore NTP packets other than information queries and config-uration requests. 0x0004 - notrust, Treat these hosts normally in other respects, but never use them as synchronization sources. 0x0008 - noquery, Ignore all NTP information queries and configuration requests from the source. 0x0010 - nomodify, Ignore all NTP information queries and configuration requests that attempt to modify the state of the server. 0x0020 - nopeer, Provide stateless time service to polling hosts, but do not allocate peer memory resources to these hosts even if they otherwise might be considered useful as future synchronization partners. 0x0040 - notrap, Decline to provide control message trap service to matching hosts. 0x0080 - lowpriotrap, Declare traps set by matching hosts to be low priority. 0x0100 - limited, These hosts are subject to a limitation of the number of clients from the same net. 0x0200 - version. Serves only current version. 0x0400 - demobilize. A demobilization packet (kod) packet is sent.")
alaNtpAccessRestrictedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpAccessRestrictedCount.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRestrictedCount.setDescription('Number of packets matched.')
alaNtpAccessRestrictedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNtpAccessRestrictedRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRestrictedRowStatus.setDescription('Used in accordance to installation and removal conventions for conceptual rows. The RowStatus values that are supported are the following: active(1) - The row is active and valid. createAndGo(4) - The row will be created and activated. destroy(6) - The row will be destroyed.')
alaNtpAccessRereadKeyFile = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reload", 1), ("inProgress", 2), ("successful", 3), ("error", 4))).clone('successful')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpAccessRereadKeyFile.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessRereadKeyFile.setDescription("Reloads the keyfile containing all currently existing keys into the alaNtpAccessKeyIdTable in the switch's memory. Reading this object will yield one of the three following values: inProgress(2), successful(3), failed(4) A value of inProgress means that table reload procedure is inProgress and not yet complete. A sucessful reply means the last attempted keyfile load completed successfully. A failed response indicates the last attempt to reload failed. Writing a value of 1 to this object initiates a reload of the table.")
ntpClientConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("nonLoopback0", 2), ("userIp", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientConfig.setStatus('deprecated')
if mibBuilder.loadTexts: ntpClientConfig.setDescription('The Agent Config Information 1 -- Default(Loopback0 or closest IP) 2 -- Non Loopback0 3 -- Interface IP Specified by User')
ntpClientIP = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientIP.setStatus('deprecated')
if mibBuilder.loadTexts: ntpClientIP.setDescription('The interface IP Address to be used in NTP Packets for Source IP field.')
alaNtpSrcIpConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("nonLoopback0", 2), ("userIp", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpSrcIpConfig.setStatus('current')
if mibBuilder.loadTexts: alaNtpSrcIpConfig.setDescription('The Agent Config Information 1 -- Default(Loopback0 or closest IP) 2 -- Non Loopback0 3 -- Interface IP Specified by User')
alaNtpSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaNtpSrcIp.setStatus('current')
if mibBuilder.loadTexts: alaNtpSrcIp.setDescription('The interface IP Address to be used in NTP Packets for Source IP field.')
alaIND1NtpMonitorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpConfigGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsLoopGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpAccessGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpLocalInfoGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpEventsGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpSrcIpGroup"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1NtpMonitorMIBCompliance = alaIND1NtpMonitorMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIND1NtpMonitorMIBCompliance.setDescription('Compliance statement for Health Monitoring.')
alaNtpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpEnable"), ("ALCATEL-IND1-NTP-MIB", "alaNtpMonitorEnable"), ("ALCATEL-IND1-NTP-MIB", "alaNtpBroadcastEnable"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerIpAddress"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerType"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerAuth"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerVersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerMinpoll"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerPrefer"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerAdmin"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerName"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerStratum"), ("ALCATEL-IND1-NTP-MIB", "alaNtpAuthDelay"), ("ALCATEL-IND1-NTP-MIB", "alaNtpBroadcastDelay"), ("ALCATEL-IND1-NTP-MIB", "alaNtpKeysFile"), ("ALCATEL-IND1-NTP-MIB", "alaNtpConfigReqKeyId"), ("ALCATEL-IND1-NTP-MIB", "alaNtpConfigCtlKeyId"), ("ALCATEL-IND1-NTP-MIB", "alaNtpConfigCfgKeyId"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPrecision"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerTests"), ("ALCATEL-IND1-NTP-MIB", "alaNtpSysStratum"), ("ALCATEL-IND1-NTP-MIB", "alaNtpMaxAssociation"), ("ALCATEL-IND1-NTP-MIB", "alaNtpAuthenticate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpConfigGroup = alaNtpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpConfigGroup.setDescription('Collection of NTP configuration objects.')
alaNtpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListIpAddress"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListLocal"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListStratum"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListPoll"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListReach"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListDelay"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListOffset"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListDispersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListSynced"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerListName"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowRemoteIpAddress"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowLocal"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowHmode"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowPmode"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowStratum"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowPrecision"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowLeapIndicator"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowReferenceId"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowRootDistance"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowRootDispersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowPpoll"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowHpoll"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowKeyid"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowVersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowAssociation"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowValid"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowReach"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowUnreach"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowFlash"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowBroadcastOffset"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowTTL"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowTimer"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowFlags"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowReferenceTime"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowOriginateTime"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowReceiveTime"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowTransmitTime"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowOffset"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowDelay"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowDispersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowName"), ("ALCATEL-IND1-NTP-MIB", "alaNtpPeerShowStatus"), ("ALCATEL-IND1-NTP-MIB", "alaNtpClientListVersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpClientKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpInfoGroup = alaNtpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpInfoGroup.setDescription('Collection of NTP peer information objects.')
alaNtpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerIpAddress"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerLocal"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerLastRcv"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerNextSend"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerReachChange"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerPacketsSent"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerPacketsRcvd"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerBadAuth"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerBogusOrigin"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerDuplicate"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerBadDispersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerBadRefTime"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerCandidateOrder"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerReset"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsPeerName"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpStatsGroup = alaNtpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsGroup.setDescription('Collection of NTP peer information objects.')
alaNtpStatsStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatUptime"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatReset"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatBadStratum"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatOldVersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatNewVersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatUnknownVersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatBadLength"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatProcessed"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatBadAuth"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsStatLimitRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpStatsStatGroup = alaNtpStatsStatGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsStatGroup.setDescription('Collection of NTP statistic objects.')
alaNtpStatsLoopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpStatsLoopOffset"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsLoopFrequency"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsLoopPollAdjust"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsLoopWatchdog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpStatsLoopGroup = alaNtpStatsLoopGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsLoopGroup.setDescription('Collection of NTP clocking objects.')
alaNtpStatsIoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoReset"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoRcvBuffers"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoFreeRcvBuffers"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoUsedRcvBuffers"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoRefills"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoDroppedPackets"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoIgnoredPackets"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoRcvPackets"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoSentPackets"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoNotSentPackets"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoInterrupts"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsIoInterruptsRcv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpStatsIoGroup = alaNtpStatsIoGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsIoGroup.setDescription('Collection of NTP send and receive statistics objects.')
alaNtpAccessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpAccessKeyIdTrust"), ("ALCATEL-IND1-NTP-MIB", "alaNtpAccessRestrictedRestrictions"), ("ALCATEL-IND1-NTP-MIB", "alaNtpAccessRestrictedCount"), ("ALCATEL-IND1-NTP-MIB", "alaNtpAccessRestrictedRowStatus"), ("ALCATEL-IND1-NTP-MIB", "alaNtpAccessRereadKeyFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpAccessGroup = alaNtpAccessGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpAccessGroup.setDescription('Collection of NTP authentication control objects.')
alaNtpLocalInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpInfoPeer"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoMode"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoLeapIndicator"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoStratum"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoPrecision"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoDistance"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoDispersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoReferenceId"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoReferenceTime"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoFrequency"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoStability"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoBroadcastDelay"), ("ALCATEL-IND1-NTP-MIB", "alaNtpInfoAuthDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpLocalInfoGroup = alaNtpLocalInfoGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpLocalInfoGroup.setDescription('Collection of NTP local clock information objects.')
alaNtpEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpMaxAssocTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpEventsGroup = alaNtpEventsGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpEventsGroup.setDescription('Notify the management entity on reaching the maximum allowable NTP client and peer associations.')
alaNtpSrcIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpSrcIpConfig"), ("ALCATEL-IND1-NTP-MIB", "alaNtpSrcIp"), ("ALCATEL-IND1-NTP-MIB", "ntpClientConfig"), ("ALCATEL-IND1-NTP-MIB", "ntpClientIP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpSrcIpGroup = alaNtpSrcIpGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpSrcIpGroup.setDescription('Collection of NTP source IP information objects.')
alaNtpStatsMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorAddress"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorPort"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorLocalAddress"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorCount"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorMode"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorVersion"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorDrop"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorLast"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorFirst"), ("ALCATEL-IND1-NTP-MIB", "alaNtpStatsMonitorName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNtpStatsMonitorGroup = alaNtpStatsMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: alaNtpStatsMonitorGroup.setDescription('Each entry corresponds to a synchronization host.')
alaNtpClientListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 4), )
if mibBuilder.loadTexts: alaNtpClientListTable.setStatus('current')
if mibBuilder.loadTexts: alaNtpClientListTable.setDescription('Used to display a brief list of all incoming NTP client associations related to this switch.')
alaNtpClientListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-NTP-MIB", "alaNtpClientListAddressType"), (0, "ALCATEL-IND1-NTP-MIB", "alaNtpClientListAddress"))
if mibBuilder.loadTexts: alaNtpClientListEntry.setStatus('current')
if mibBuilder.loadTexts: alaNtpClientListEntry.setDescription('Each entry corresponds to one association.')
alaNtpClientListAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 4, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaNtpClientListAddressType.setStatus('current')
if mibBuilder.loadTexts: alaNtpClientListAddressType.setDescription('The InetAddress type of the incoming client association. InetAddressIPv4 (1) is the only type currently supported.')
alaNtpClientListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaNtpClientListAddress.setStatus('current')
if mibBuilder.loadTexts: alaNtpClientListAddress.setDescription('The InetAddress of the client.')
alaNtpClientListVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpClientListVersion.setStatus('current')
if mibBuilder.loadTexts: alaNtpClientListVersion.setDescription('The NTP version used by the remote host for communication.')
alaNtpClientKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNtpClientKey.setStatus('current')
if mibBuilder.loadTexts: alaNtpClientKey.setDescription('The authorization keyid for the remote host.')
alaNtpMaxAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 26, 1, 0, 1)).setObjects(("ALCATEL-IND1-NTP-MIB", "alaNtpMaxAssociation"))
if mibBuilder.loadTexts: alaNtpMaxAssocTrap.setStatus('current')
if mibBuilder.loadTexts: alaNtpMaxAssocTrap.setDescription('Notify the management entity on reaching the maximum allowable NTP client and peer associations.')
mibBuilder.exportSymbols("ALCATEL-IND1-NTP-MIB", alaNtpPeerShowTimer=alaNtpPeerShowTimer, alaNtpStatsMonitorIndex=alaNtpStatsMonitorIndex, alaNtpPeerShowReceiveTime=alaNtpPeerShowReceiveTime, alaNtpPeerListLocal=alaNtpPeerListLocal, alaNtpInfoAuthDelay=alaNtpInfoAuthDelay, alaNtpMaxAssociation=alaNtpMaxAssociation, alaNtpStatsIoUsedRcvBuffers=alaNtpStatsIoUsedRcvBuffers, alaNtpPeerShowPpoll=alaNtpPeerShowPpoll, alaNtpInfoDispersion=alaNtpInfoDispersion, alaNtpStatsLoopOffset=alaNtpStatsLoopOffset, alaNtpStatsLoopWatchdog=alaNtpStatsLoopWatchdog, alaNtpAccessGroup=alaNtpAccessGroup, alaNtpStatsPeerLastRcv=alaNtpStatsPeerLastRcv, alaNtpStatsLoopFrequency=alaNtpStatsLoopFrequency, alaNtpBroadcastEnable=alaNtpBroadcastEnable, alaNtpPeerShowReferenceTime=alaNtpPeerShowReferenceTime, ntpClientConfig=ntpClientConfig, alaNtpInfoStability=alaNtpInfoStability, alaNtpPeerShowRemoteIpAddress=alaNtpPeerShowRemoteIpAddress, alaNtpStatsLoopGroup=alaNtpStatsLoopGroup, alaNtpInfoGroup=alaNtpInfoGroup, alaNtpAccess=alaNtpAccess, alaNtpStatsPeerEntry=alaNtpStatsPeerEntry, alaNtpAccessRestrictedIpAddress=alaNtpAccessRestrictedIpAddress, alaNtpPeerAuth=alaNtpPeerAuth, alaNtpAccessRestrictedRowStatus=alaNtpAccessRestrictedRowStatus, alaIND1NtpMonitorMIBCompliance=alaIND1NtpMonitorMIBCompliance, alaNtpPeerVersion=alaNtpPeerVersion, alaNtpInfoFrequency=alaNtpInfoFrequency, alaNtpPeerListTable=alaNtpPeerListTable, alaNtpPeerShowEntry=alaNtpPeerShowEntry, alaNtpConfigGroup=alaNtpConfigGroup, alaNtpClientKey=alaNtpClientKey, alaNtpPeerShowBroadcastOffset=alaNtpPeerShowBroadcastOffset, PYSNMP_MODULE_ID=alcatelIND1NTPMIB, alaNtpPeerShowReferenceId=alaNtpPeerShowReferenceId, alaNtpEnable=alaNtpEnable, alaNtpLocalInfoGroup=alaNtpLocalInfoGroup, alaNtpInfoDistance=alaNtpInfoDistance, alaNtpStatsMonitorName=alaNtpStatsMonitorName, alaNtpMaxAssocTrap=alaNtpMaxAssocTrap, alaNtpClientListVersion=alaNtpClientListVersion, alaNtpInfoStratum=alaNtpInfoStratum, alaNtpStats=alaNtpStats, alaNtpPeerMinpoll=alaNtpPeerMinpoll, alaNtpStatsMonitorMode=alaNtpStatsMonitorMode, alaNtpPeerShowUnreach=alaNtpPeerShowUnreach, alaNtpStatsMonitorAddress=alaNtpStatsMonitorAddress, alaNtpStatsPeerTable=alaNtpStatsPeerTable, alaNtpStatsPeerPacketsRcvd=alaNtpStatsPeerPacketsRcvd, alaNtpPeerAdmin=alaNtpPeerAdmin, alaNtpStatsPeerBadDispersion=alaNtpStatsPeerBadDispersion, alaNtpStatsPeerNextSend=alaNtpStatsPeerNextSend, alaNtpPeerShowStatus=alaNtpPeerShowStatus, alaNtpAccessRestrictedEntry=alaNtpAccessRestrictedEntry, alaNtpStatsMonitorLocalAddress=alaNtpStatsMonitorLocalAddress, alaNtpStatsMonitorFirst=alaNtpStatsMonitorFirst, alaNtpStatsIoRefills=alaNtpStatsIoRefills, alaNtpPeerShowRootDispersion=alaNtpPeerShowRootDispersion, alaNtpInfoBroadcastDelay=alaNtpInfoBroadcastDelay, alaNtpSrcIpGroup=alaNtpSrcIpGroup, alaNtpEventsGroup=alaNtpEventsGroup, alaNtpStatsPeerName=alaNtpStatsPeerName, alaNtpStatsStatGroup=alaNtpStatsStatGroup, alaNtpStatsStatBadLength=alaNtpStatsStatBadLength, alaNtpStatsIoInterruptsRcv=alaNtpStatsIoInterruptsRcv, alaNtpStatsPeerBogusOrigin=alaNtpStatsPeerBogusOrigin, alaNtpInfo=alaNtpInfo, alaNtpSrcIpConfig=alaNtpSrcIpConfig, alaNtpPeerAddressType=alaNtpPeerAddressType, alaNtpPeerListPoll=alaNtpPeerListPoll, alaNtpStatsPeerAddress=alaNtpStatsPeerAddress, alaNtpInfoReferenceTime=alaNtpInfoReferenceTime, alcatelIND1NTPMIBObjects=alcatelIND1NTPMIBObjects, alaNtpStatsIoReset=alaNtpStatsIoReset, alaNtpPeerShowLeapIndicator=alaNtpPeerShowLeapIndicator, alaNtpAccessRestrictedRestrictions=alaNtpAccessRestrictedRestrictions, alaNtpStatsMonitorGroup=alaNtpStatsMonitorGroup, alaNtpStatsStat=alaNtpStatsStat, alaNtpInfoPeer=alaNtpInfoPeer, alaNtpPeerAddress=alaNtpPeerAddress, alaNtpPeerShowPmode=alaNtpPeerShowPmode, alaIND1NtpMIBConformance=alaIND1NtpMIBConformance, alaNtpPeerShowDelay=alaNtpPeerShowDelay, alaNtpStatsIoIgnoredPackets=alaNtpStatsIoIgnoredPackets, alaNtpStatsPeerCandidateOrder=alaNtpStatsPeerCandidateOrder, alaNtpStatsIoInterrupts=alaNtpStatsIoInterrupts, alaNtpStatsIoRcvPackets=alaNtpStatsIoRcvPackets, alaNtpClientListAddressType=alaNtpClientListAddressType, alaNtpInfoLeapIndicator=alaNtpInfoLeapIndicator, alaNtpPeerShowKeyid=alaNtpPeerShowKeyid, alaNtpPeerListEntry=alaNtpPeerListEntry, alaNtpStatsStatProcessed=alaNtpStatsStatProcessed, alaIND1NtpMIBGroups=alaIND1NtpMIBGroups, alaNtpSysStratum=alaNtpSysStratum, alaNtpPeerShowStratum=alaNtpPeerShowStratum, alaNtpStatsIo=alaNtpStatsIo, alaNtpStatsPeerBadRefTime=alaNtpStatsPeerBadRefTime, alaNtpStatsReset=alaNtpStatsReset, alaNtpAccessRestrictedCount=alaNtpAccessRestrictedCount, alaNtpPeerListOffset=alaNtpPeerListOffset, alaNtpStatsIoRcvBuffers=alaNtpStatsIoRcvBuffers, alaNtpPeerShowValid=alaNtpPeerShowValid, alaNtpStatsPeerDuplicate=alaNtpStatsPeerDuplicate, alaNtpAccessKeyIdTrust=alaNtpAccessKeyIdTrust, alaNtpStatsStatBadAuth=alaNtpStatsStatBadAuth, alaNtpPeerTable=alaNtpPeerTable, alcatelIND1NTPMIBNotifications=alcatelIND1NTPMIBNotifications, alaNtpPeerShowRemoteAddress=alaNtpPeerShowRemoteAddress, alaNtpPeerShowLocal=alaNtpPeerShowLocal, alaNtpPeerShowHmode=alaNtpPeerShowHmode, alaNtpPeerListName=alaNtpPeerListName, alaNtpStatsMonitorTable=alaNtpStatsMonitorTable, alaNtpStatsPeerPacketsSent=alaNtpStatsPeerPacketsSent, alaNtpStatsStatUnknownVersion=alaNtpStatsStatUnknownVersion, alaNtpPeerShowFlags=alaNtpPeerShowFlags, alaNtpClientListEntry=alaNtpClientListEntry, ntpClientIP=ntpClientIP, alaNtpPeerShowAssociation=alaNtpPeerShowAssociation, alaNtpPeerShowOffset=alaNtpPeerShowOffset, alaNtpPeerListStratum=alaNtpPeerListStratum, alaNtpConfig=alaNtpConfig, alaNtpLocalInfo=alaNtpLocalInfo, alaNtpAccessRestrictedMask=alaNtpAccessRestrictedMask, alaNtpPeerShowHpoll=alaNtpPeerShowHpoll, alaNtpAuthenticate=alaNtpAuthenticate, alaNtpAccessKeyIdKeyId=alaNtpAccessKeyIdKeyId, alaNtpPeerListAddress=alaNtpPeerListAddress, alaNtpInfoPrecision=alaNtpInfoPrecision, alaNtpStatsStatReset=alaNtpStatsStatReset, alaNtpStatsPeerLocal=alaNtpStatsPeerLocal, alaNtpStatsMonitorPort=alaNtpStatsMonitorPort, alaNtpPeerName=alaNtpPeerName, alaNtpBroadcastDelay=alaNtpBroadcastDelay, alaNtpPeerShowTable=alaNtpPeerShowTable, alaNtpStatsMonitorDrop=alaNtpStatsMonitorDrop, alaNtpPeerShowReach=alaNtpPeerShowReach, alaNtpPeerShowTransmitTime=alaNtpPeerShowTransmitTime, alaNtpPeerShowRootDistance=alaNtpPeerShowRootDistance, alaNtpStatsGroup=alaNtpStatsGroup, alaNtpPeerEntry=alaNtpPeerEntry, alaNtpKeysFile=alaNtpKeysFile, alaNtpConfigReqKeyId=alaNtpConfigReqKeyId, alaNtpPeerShowName=alaNtpPeerShowName, alaNtpPeerShowPrecision=alaNtpPeerShowPrecision, alaNtpStatsLoop=alaNtpStatsLoop, alaNtpAccessRestrictedTable=alaNtpAccessRestrictedTable, alaNtpStatsStatNewVersion=alaNtpStatsStatNewVersion, alaNtpPeerShowTTL=alaNtpPeerShowTTL, alaNtpPeerType=alaNtpPeerType, alaNtpPeerListDelay=alaNtpPeerListDelay, alaNtpStatsPeerAddressType=alaNtpStatsPeerAddressType, alaNtpStatsPeerReset=alaNtpStatsPeerReset, alaNtpPeerShowVersion=alaNtpPeerShowVersion, alaNtpStatsMonitorCount=alaNtpStatsMonitorCount, alaNtpClientListTable=alaNtpClientListTable, alaNtpAccessKeyIdEntry=alaNtpAccessKeyIdEntry, alaNtpPeerShowOriginateTime=alaNtpPeerShowOriginateTime, alaIND1NtpMIBCompliances=alaIND1NtpMIBCompliances, alaNtpStatsPeerIpAddress=alaNtpStatsPeerIpAddress, alaNtpStatsStatUptime=alaNtpStatsStatUptime, alaNtpConfigCtlKeyId=alaNtpConfigCtlKeyId, alaNtpMonitorEnable=alaNtpMonitorEnable, alaNtpStatsMonitorLast=alaNtpStatsMonitorLast, alaNtpInfoMode=alaNtpInfoMode, alaNtpStatsMonitorVersion=alaNtpStatsMonitorVersion, alaNtpPeerListAddressType=alaNtpPeerListAddressType, alaNtpPeerListDispersion=alaNtpPeerListDispersion, alaNtpStatsPeerBadAuth=alaNtpStatsPeerBadAuth, alaNtpSrcIp=alaNtpSrcIp, alaNtpStatsStatOldVersion=alaNtpStatsStatOldVersion, alaNtpPeerListReach=alaNtpPeerListReach, alaNtpStatsPeerReachChange=alaNtpStatsPeerReachChange, alaNtpPeerShowDispersion=alaNtpPeerShowDispersion, alaNtpStatsIoNotSentPackets=alaNtpStatsIoNotSentPackets, alaNtpPeerStratum=alaNtpPeerStratum, alaNtpClientListAddress=alaNtpClientListAddress, alaNtpAuthDelay=alaNtpAuthDelay, alaNtpAccessKeyIdTable=alaNtpAccessKeyIdTable, alaNtpStatsIoGroup=alaNtpStatsIoGroup, alaNtpPrecision=alaNtpPrecision, alaNtpStatsMonitorEntry=alaNtpStatsMonitorEntry, alaNtpPeerIpAddress=alaNtpPeerIpAddress, alaNtpPeerShowFlash=alaNtpPeerShowFlash, alaNtpConfigCfgKeyId=alaNtpConfigCfgKeyId, alaNtpPeerTests=alaNtpPeerTests, alaNtpStatsLoopPollAdjust=alaNtpStatsLoopPollAdjust, alcatelIND1NTPMIB=alcatelIND1NTPMIB, alaNtpPeerPrefer=alaNtpPeerPrefer, alaNtpStatsIoSentPackets=alaNtpStatsIoSentPackets, alaNtpAccessRereadKeyFile=alaNtpAccessRereadKeyFile, alaNtpInfoReferenceId=alaNtpInfoReferenceId, alaNtpStatsIoFreeRcvBuffers=alaNtpStatsIoFreeRcvBuffers, alaNtpStatsStatBadStratum=alaNtpStatsStatBadStratum, alaNtpStatsIoDroppedPackets=alaNtpStatsIoDroppedPackets, alaNtpPeerListSynced=alaNtpPeerListSynced, alaNtpStatsStatLimitRejects=alaNtpStatsStatLimitRejects, alaNtpPeerListIpAddress=alaNtpPeerListIpAddress, alaNtpPeerShowRemoteAddressType=alaNtpPeerShowRemoteAddressType)
