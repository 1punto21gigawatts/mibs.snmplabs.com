#
# PySNMP MIB module FASTPATH-LOGGING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-LOGGING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:12:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
fastPath, = mibBuilder.importSymbols("BROADCOM-REF-MIB", "fastPath")
agentInventoryComponentIndex, = mibBuilder.importSymbols("FASTPATH-INVENTORY-MIB", "agentInventoryComponentIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, TimeTicks, ModuleIdentity, NotificationType, ObjectIdentity, Gauge32, Counter32, Unsigned32, iso, Counter64, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "TimeTicks", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Gauge32", "Counter32", "Unsigned32", "iso", "Counter64", "MibIdentifier", "Bits")
DisplayString, RowStatus, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "DateAndTime", "TextualConvention")
class AgentLogFacility(TextualConvention, Integer32):
    reference = 'RFC3164 - 4.1.1: Table 1'
    description = 'Facility code used in determining the SysLog Priority value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("kernel", 0), ("user", 1), ("mail", 2), ("system", 3), ("security", 4), ("syslog", 5), ("lpr", 6), ("nntp", 7), ("uucp", 8), ("cron", 9), ("auth", 10), ("ftp", 11), ("ntp", 12), ("audit", 13), ("alert", 14), ("clock", 15), ("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23))

class AgentLogSeverity(TextualConvention, Integer32):
    reference = 'RFC3164 - 4.1.1: Table 2'
    description = 'Severity code used in determining the SysLog Priority value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7))

fastPathLogging = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14))
fastPathLogging.setRevisions(('2007-05-23 00:00', '2004-10-26 13:03',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathLogging.setRevisionsDescriptions(('Broadcom branding related changes.', 'Initial version.',))
if mibBuilder.loadTexts: fastPathLogging.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: fastPathLogging.setOrganization('Broadcom Corporation')
if mibBuilder.loadTexts: fastPathLogging.setContactInfo(' Customer Support Postal: Broadcom Corporation 100 Perimeter Park Dr., Suite H Morrisville, NC 27560 Tel: +1 919 865 2700')
if mibBuilder.loadTexts: fastPathLogging.setDescription('This MIB provides objects to configure and display events logged on this system.')
agentLogConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1))
agentLogInMemoryConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 1))
agentLogInMemoryAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogInMemoryAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentLogInMemoryAdminStatus.setDescription('Administratively enable/disable the In Memory log.')
agentLogInMemoryBehavior = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrap", 1), ("stop-on-full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogInMemoryBehavior.setStatus('current')
if mibBuilder.loadTexts: agentLogInMemoryBehavior.setDescription('Configures the behavior of the In Memory Log when it becomes full. A value of wrap(1) will cause the oldest log message to be removed, making room for the new message. A value of stop-on-full(2) will prevent any further logging.')
agentLogConsoleConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 2))
agentLogConsoleAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogConsoleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentLogConsoleAdminStatus.setDescription('Admin mode for console logs')
agentLogConsoleSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 2, 2), AgentLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogConsoleSeverityFilter.setStatus('current')
if mibBuilder.loadTexts: agentLogConsoleSeverityFilter.setDescription('Severity filter for console logs')
agentLogPersistentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 3))
agentLogPersistentAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogPersistentAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentLogPersistentAdminStatus.setDescription('This control disables/enables logging for the persistent startup log. Setting this value to disable does not clear the current contents of the log.')
agentLogPersistentSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 3, 2), AgentLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogPersistentSeverityFilter.setStatus('current')
if mibBuilder.loadTexts: agentLogPersistentSeverityFilter.setDescription('This control specifies the minimum severity to log to the startup and operation log. Messages with an equal or lower numerical severity are logged.')
agentLogSysLogConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4))
agentLogSyslogAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogSyslogAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentLogSyslogAdminStatus.setDescription('For Enabling and Disabling logging to configured syslog hosts. Setting this to disable stops logging to all syslog hosts.')
agentLogSyslogLocalPort = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogSyslogLocalPort.setStatus('current')
if mibBuilder.loadTexts: agentLogSyslogLocalPort.setDescription('This is the port on the local host from which syslog messages are sent.')
agentLogSyslogMaxHosts = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogSyslogMaxHosts.setStatus('current')
if mibBuilder.loadTexts: agentLogSyslogMaxHosts.setDescription('Maximum number of hosts that can be configured for logging syslog messages.')
agentLogCliCommandsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 5))
agentLogCliCommandsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogCliCommandsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentLogCliCommandsAdminStatus.setDescription('Administratively enable/disable the logging of the CLI Commands ')
agentLogSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5), )
if mibBuilder.loadTexts: agentLogSyslogHostTable.setStatus('current')
if mibBuilder.loadTexts: agentLogSyslogHostTable.setDescription('Syslog host table containing syslog host entries.')
agentLogSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5, 1), ).setIndexNames((0, "FASTPATH-LOGGING-MIB", "agentLogHostTableIndex"))
if mibBuilder.loadTexts: agentLogSyslogHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentLogSyslogHostEntry.setDescription('Syslog Host entry attributes.')
agentLogHostTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentLogHostTableIndex.setStatus('current')
if mibBuilder.loadTexts: agentLogHostTableIndex.setDescription('Index to syslog host entry in syslog host table.')
agentLogHostTableIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLogHostTableIpAddressType.setStatus('current')
if mibBuilder.loadTexts: agentLogHostTableIpAddressType.setDescription('Syslog Host table IP Address Type.')
agentLogHostTableIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLogHostTableIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentLogHostTableIpAddress.setDescription('Syslog Host table IP Address.')
agentLogHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLogHostTablePort.setStatus('current')
if mibBuilder.loadTexts: agentLogHostTablePort.setDescription('Syslog Host table port number.')
agentLogHostTableSeverityFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5, 1, 5), AgentLogSeverity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLogHostTableSeverityFilter.setStatus('current')
if mibBuilder.loadTexts: agentLogHostTableSeverityFilter.setDescription('Configures the minimum severity that will be stored in the In Memory log.')
agentLogHostTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 1, 4, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLogHostTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentLogHostTableRowStatus.setDescription('Syslog Host table row status')
agentLogStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 2))
agentLogMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentLogMessagesReceived.setDescription('The number of messages received by the log process. This includes messages that are dropped or ignored.')
agentLogMessagesDropped = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: agentLogMessagesDropped.setDescription('The number of messages that could not be processed due to error or lack of resources.')
agentLogSyslogMessagesRelayed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogSyslogMessagesRelayed.setStatus('current')
if mibBuilder.loadTexts: agentLogSyslogMessagesRelayed.setDescription('The number of messages forwarded by the syslog function to a syslog host. Messages forwarded to multiple hosts are counted once for each host.')
agentLogSyslogMessagesIgnored = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogSyslogMessagesIgnored.setStatus('deprecated')
if mibBuilder.loadTexts: agentLogSyslogMessagesIgnored.setDescription('The number of messages that were not processed by the syslog process because the component name or the priority level did not match any specification.')
agentLogMessageReceivedTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 2, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogMessageReceivedTime.setStatus('current')
if mibBuilder.loadTexts: agentLogMessageReceivedTime.setDescription('The local time when a message was last received by the log subsystem specified as the number of non-leap seconds since 00:00:00 UTC on January 1 1970.')
agentLogSyslogMessageDeliveredTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 2, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogSyslogMessageDeliveredTime.setStatus('current')
if mibBuilder.loadTexts: agentLogSyslogMessageDeliveredTime.setDescription('The local time when a message was last delivered to a syslog host specified as the number of non-leap seconds since 00:00:00 UTC on January 1 1970.')
agentLogInMemoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 3))
agentLogInMemoryLogCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogInMemoryLogCount.setStatus('current')
if mibBuilder.loadTexts: agentLogInMemoryLogCount.setDescription('The count of valid entries in the in-memory log.')
agentLogInMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 3, 2), )
if mibBuilder.loadTexts: agentLogInMemoryTable.setStatus('current')
if mibBuilder.loadTexts: agentLogInMemoryTable.setDescription('The in-memory log table containing sequence of in-memory log entries.')
agentLogInMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 3, 2, 1), ).setIndexNames((0, "FASTPATH-LOGGING-MIB", "agentLogInMemoryMsgIndex"))
if mibBuilder.loadTexts: agentLogInMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: agentLogInMemoryEntry.setDescription('An individual message entry in in-memory log table.')
agentLogInMemoryMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentLogInMemoryMsgIndex.setStatus('current')
if mibBuilder.loadTexts: agentLogInMemoryMsgIndex.setDescription('The index to message entry in the in-memory log table.')
agentLogInMemoryMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogInMemoryMsgText.setStatus('current')
if mibBuilder.loadTexts: agentLogInMemoryMsgText.setDescription('Message text info for inmemory logged messages.')
agentLogPersistentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 4))
agentLogPersistentLogCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogPersistentLogCount.setStatus('current')
if mibBuilder.loadTexts: agentLogPersistentLogCount.setDescription('The count of valid entries in the persistent log.')
agentLogPersistentTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 4, 4), )
if mibBuilder.loadTexts: agentLogPersistentTable.setStatus('current')
if mibBuilder.loadTexts: agentLogPersistentTable.setDescription('Table for storing persistent log messages.')
agentLogPersistentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 4, 4, 1), ).setIndexNames((0, "FASTPATH-LOGGING-MIB", "agentLogMsgPersistentMsgIndex"))
if mibBuilder.loadTexts: agentLogPersistentEntry.setStatus('current')
if mibBuilder.loadTexts: agentLogPersistentEntry.setDescription('Log entry details for logging message in persistent log table.')
agentLogMsgPersistentMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentLogMsgPersistentMsgIndex.setStatus('current')
if mibBuilder.loadTexts: agentLogMsgPersistentMsgIndex.setDescription('Table index for logging message in persistent log table.')
agentLogMsgPersistentMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 14, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogMsgPersistentMsgText.setStatus('current')
if mibBuilder.loadTexts: agentLogMsgPersistentMsgText.setDescription('The text corresponding to persistent log message.')
mibBuilder.exportSymbols("FASTPATH-LOGGING-MIB", agentLogSyslogMessagesIgnored=agentLogSyslogMessagesIgnored, agentLogMessageReceivedTime=agentLogMessageReceivedTime, agentLogSyslogHostEntry=agentLogSyslogHostEntry, agentLogInMemoryMsgText=agentLogInMemoryMsgText, agentLogInMemoryConfigGroup=agentLogInMemoryConfigGroup, agentLogHostTablePort=agentLogHostTablePort, agentLogStatisticsGroup=agentLogStatisticsGroup, AgentLogSeverity=AgentLogSeverity, agentLogInMemoryEntry=agentLogInMemoryEntry, agentLogMsgPersistentMsgIndex=agentLogMsgPersistentMsgIndex, agentLogMessagesDropped=agentLogMessagesDropped, agentLogPersistentConfigGroup=agentLogPersistentConfigGroup, agentLogMsgPersistentMsgText=agentLogMsgPersistentMsgText, agentLogInMemoryBehavior=agentLogInMemoryBehavior, agentLogConsoleAdminStatus=agentLogConsoleAdminStatus, agentLogPersistentSeverityFilter=agentLogPersistentSeverityFilter, agentLogHostTableIndex=agentLogHostTableIndex, agentLogCliCommandsConfigGroup=agentLogCliCommandsConfigGroup, agentLogSyslogMessageDeliveredTime=agentLogSyslogMessageDeliveredTime, agentLogInMemoryLogCount=agentLogInMemoryLogCount, agentLogCliCommandsAdminStatus=agentLogCliCommandsAdminStatus, agentLogConfigGroup=agentLogConfigGroup, agentLogSyslogMessagesRelayed=agentLogSyslogMessagesRelayed, agentLogPersistentTable=agentLogPersistentTable, agentLogSysLogConfigGroup=agentLogSysLogConfigGroup, agentLogInMemoryAdminStatus=agentLogInMemoryAdminStatus, PYSNMP_MODULE_ID=fastPathLogging, fastPathLogging=fastPathLogging, agentLogSyslogAdminStatus=agentLogSyslogAdminStatus, agentLogConsoleSeverityFilter=agentLogConsoleSeverityFilter, agentLogHostTableIpAddress=agentLogHostTableIpAddress, agentLogPersistentGroup=agentLogPersistentGroup, AgentLogFacility=AgentLogFacility, agentLogHostTableSeverityFilter=agentLogHostTableSeverityFilter, agentLogPersistentLogCount=agentLogPersistentLogCount, agentLogMessagesReceived=agentLogMessagesReceived, agentLogSyslogLocalPort=agentLogSyslogLocalPort, agentLogInMemoryGroup=agentLogInMemoryGroup, agentLogSyslogHostTable=agentLogSyslogHostTable, agentLogPersistentEntry=agentLogPersistentEntry, agentLogInMemoryMsgIndex=agentLogInMemoryMsgIndex, agentLogPersistentAdminStatus=agentLogPersistentAdminStatus, agentLogConsoleConfigGroup=agentLogConsoleConfigGroup, agentLogHostTableIpAddressType=agentLogHostTableIpAddressType, agentLogHostTableRowStatus=agentLogHostTableRowStatus, agentLogInMemoryTable=agentLogInMemoryTable, agentLogSyslogMaxHosts=agentLogSyslogMaxHosts)
