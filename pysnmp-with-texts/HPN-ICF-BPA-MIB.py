#
# PySNMP MIB module HPN-ICF-BPA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-BPA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Gauge32, ModuleIdentity, NotificationType, iso, ObjectIdentity, Counter32, Bits, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Gauge32", "ModuleIdentity", "NotificationType", "iso", "ObjectIdentity", "Counter32", "Bits", "TimeTicks", "Integer32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hpnicfBpa = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144))
hpnicfBpa.setRevisions(('2013-11-13 11:28',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfBpa.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: hpnicfBpa.setLastUpdated('201311131128Z')
if mibBuilder.loadTexts: hpnicfBpa.setOrganization('')
if mibBuilder.loadTexts: hpnicfBpa.setContactInfo('')
if mibBuilder.loadTexts: hpnicfBpa.setDescription('This MIB contains objects that manage the configuration and information of BGP policy accounting. It accounts IP packets by user defined BGP policy. ')
hpnicfBpaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1))
hpnicfBpaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 1), )
if mibBuilder.loadTexts: hpnicfBpaCfgTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaCfgTable.setDescription('A table for BGP policy accounting configuration.')
hpnicfBpaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-BPA-MIB", "hpnicfBpaDirection"))
if mibBuilder.loadTexts: hpnicfBpaCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaCfgEntry.setDescription('An entry for BGP policy accounting configuration.')
hpnicfBpaDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2))))
if mibBuilder.loadTexts: hpnicfBpaDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaDirection.setDescription('Identify the direction of IP packets on which BGP policy accounting takes effect. input :input direction output :output direction')
hpnicfBpaSrcOrDest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("both", 3))).clone('destination')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBpaSrcOrDest.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaSrcOrDest.setDescription("Identify IP packet's Destination or Source IP address that BGP policy accounting relies on. source :source IP address of the IP packet destination :destination IP address of the IP packet both :both source and destination IP addresses")
hpnicfBpaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfBpaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaRowStatus.setDescription('This object manages the creation, deletion, and modification of rows in the hpnicfBpaCfgTable, which supports the active status, createAndGo operation, and destroy operation.')
hpnicfBpaStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2), )
if mibBuilder.loadTexts: hpnicfBpaStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaStatTable.setDescription('A table for BGP policy accounting statistics.')
hpnicfBpaStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-BPA-MIB", "hpnicfBpaTrafficType"), (0, "HPN-ICF-BPA-MIB", "hpnicfBpaTrafficIndex"))
if mibBuilder.loadTexts: hpnicfBpaStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaStatEntry.setDescription('An entry for BGP policy accounting statistics.')
hpnicfBpaTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfBpaTrafficType.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaTrafficType.setDescription('Type of IP packets, IPv4 or IPv6.')
hpnicfBpaTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpnicfBpaTrafficIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaTrafficIndex.setDescription('Traffic index generated by a BGP policy.')
hpnicfBpaInPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfBpaInPacketCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaInPacketCount.setDescription('The total number of received packets with the specified traffic type and traffic index.')
hpnicfBpaInOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfBpaInOctetCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaInOctetCount.setDescription('The total number of received bytes with the specified traffic type and traffic index.')
hpnicfBpaOutPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfBpaOutPacketCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaOutPacketCount.setDescription('The total number of output packets with the specified traffic type and traffic index.')
hpnicfBpaOutOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 144, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfBpaOutOctetCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfBpaOutOctetCount.setDescription('The total number of output bytes with the specified traffic type and traffic index.')
mibBuilder.exportSymbols("HPN-ICF-BPA-MIB", hpnicfBpaRowStatus=hpnicfBpaRowStatus, hpnicfBpaObjects=hpnicfBpaObjects, PYSNMP_MODULE_ID=hpnicfBpa, hpnicfBpaCfgEntry=hpnicfBpaCfgEntry, hpnicfBpaTrafficIndex=hpnicfBpaTrafficIndex, hpnicfBpaCfgTable=hpnicfBpaCfgTable, hpnicfBpaInPacketCount=hpnicfBpaInPacketCount, hpnicfBpaDirection=hpnicfBpaDirection, hpnicfBpaStatTable=hpnicfBpaStatTable, hpnicfBpaStatEntry=hpnicfBpaStatEntry, hpnicfBpaInOctetCount=hpnicfBpaInOctetCount, hpnicfBpaOutPacketCount=hpnicfBpaOutPacketCount, hpnicfBpaOutOctetCount=hpnicfBpaOutOctetCount, hpnicfBpa=hpnicfBpa, hpnicfBpaSrcOrDest=hpnicfBpaSrcOrDest, hpnicfBpaTrafficType=hpnicfBpaTrafficType)
