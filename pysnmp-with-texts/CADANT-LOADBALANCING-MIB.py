#
# PySNMP MIB module CADANT-LOADBALANCING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-LOADBALANCING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
cadIfCmtsCmStatusMacAddress, = mibBuilder.importSymbols("CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress")
cadSchema, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadSchema")
OUIAddress, CardId = mibBuilder.importSymbols("CADANT-TC", "OUIAddress", "CardId")
IfDirection, = mibBuilder.importSymbols("DOCS-IF3-MIB", "IfDirection")
docsLoadbal3BasicRuleEntry, docsLoadbal3ResGrpCfgId = mibBuilder.importSymbols("DOCS-LOADBAL3-MIB", "docsLoadbal3BasicRuleEntry", "docsLoadbal3ResGrpCfgId")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, iso, Counter32, Integer32, Gauge32, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "iso", "Counter32", "Integer32", "Gauge32", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
cadLoadBalMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1))
cadLoadBalMib.setRevisions(('2014-05-08 00:00', '2014-02-21 00:00', '2014-01-16 00:00', '2010-04-07 00:00', '2009-09-28 00:00', '2009-09-21 00:00', '2009-07-28 00:00', '2009-04-17 00:00', '2008-01-22 00:00', '2007-11-21 00:00', '2007-04-11 00:00', '2006-05-15 00:00', '2006-03-31 00:00', '2006-03-08 00:00', '2005-08-20 00:00', '2004-06-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadLoadBalMib.setRevisionsDescriptions(('Add cadLoadBalTCSMoveUsPrimaryControl and cadLoadBalDbcMoveUsPrimaryControl.', 'Change cadLoadBalRCSControl and cadLoadBalTCSControl, Add cadLoadBalChannelDbcTransfersIn, and cadLoadBalChannelDbcTransfersOut, Remove cadLoadBalTcsDbcDisallowPrimaryUpstream, cadLoadbal3ResGrpChCfgTable', 'Change Syntax of cadLoadBalRuleType to BITS Add cadLoadBalRCSControl, cadLoadBalTCSControl, and cadLoadBalTcsDbcDisallowPrimaryUpstream', 'Add cadLoadBalRuleChannelWeight.', 'Change default value of cadLoadBalFailedListExcludeCount from 0 to 1', 'Add the following objects. cadLoadBalFailedListAgeOutTime, cadLoadBalFailedListExcludeCount, cadLoadBalNumberModemsToCheckPerInterval, cadLoadBalRuleRegistrationSteeringD2, cadLoadBalRuleRegistrationSteeringD3, cadLoadBalRulePeriodicSteeringD2, and cadLoadBalRulePeriodicSteeringD3 ', 'Change rule-flexpath to rule-bonded.', 'Add cadLoadBalStartDsUtilizationThreshold and cadLoadBalStartUsUtilizationThreshold.', 'Add cadLoadbal3ResGrpChCfgTable.', 'Major change - references DOCS-LOADBAL3-MIB instead of DOCS-LOADBALANCING-MIB. 1. cadLoadBalCmtsCmStatusTable references docsLoadbal3CmtsCmParamsTable. replace the tabular objects in cadLoadBalCmtsCmStatusEntry with cadLoadbal3CmtsCmParamsProvGrpId, cadLoadbal3CmtsCmParamsCurrentGrpId, cadLoadbal3CmtsCmParamsProvServiceTypeID, cadLoadbal3CmtsCmParamsCurrentServiceTypeID, cadLoadbal3CmtsCmParamsPolicyId and cadLoadbal3CmtsCmParamsPriority. 2. remove cadLoadBalGrpTable. 3. cadLoadBalRuleTable references docsLoadbal3BasicRuleTable 4. remove cadBalUpChannelDynamicLoadBalanceInterval, cadLoadBalDownChannelDynamicLoadBalanceInterval. 5. cadLoadBalMacDomainLoadBalanceInterval replaces cadLoadBalUpChannelDynamicLoadBalanceIntervalInSecond. 6. cadLoadBalAcrossMacDomainLoadBalanceInterval replaces cadLoadBalDownChannelDynamicLoadBalanceIntervalInSecond. 7. add enumeration dbcTimeout(11) to cadLoadBalChgOverStatusValue. 8. cadLoadBalChannelTable is indexed by channel ifIndex.', 'Obsolete cadLoadBalDownChannelDynamicLoadBalanceInterval and cadLoadBalUpChannelDynamicLoadBalanceInterval Add cadLoadBalDownChannelDynamicLoadBalanceIntervalInSecond and cadLoadBalUpChannelDynamicLoadBalanceIntervalInSecond.', 'Remove unused counts of failed transfers.', 'Change cadLoadBalChannelDynamicLoadBalanceInterval to cadLoadBalUpChannelDynamicLoadBalanceInterval Change cadLoadBalInterCardDynamicLoadBalanceInterval to cadLoadBalDownChannelDynamicLoadBalanceInterval', 'Add support for counts and deprecate pre-DOCSIS 3.0 static loadbalancing.', 'Add support for new load balancing rules and intervals.', 'Add cadLoadBalChgOverStatusEntry, cadLoadBalCmtsCmStatusEntry, cadLoadBalGrpEntry to mirror the tables defined in DOCS-LOADBALANCING-MIB',))
if mibBuilder.loadTexts: cadLoadBalMib.setLastUpdated('201405080000Z')
if mibBuilder.loadTexts: cadLoadBalMib.setOrganization('Arris International')
if mibBuilder.loadTexts: cadLoadBalMib.setContactInfo(' Arris Support Postal: ARRIS Phone: +1 770 622 8530 E-mail: support@arrisi.com')
if mibBuilder.loadTexts: cadLoadBalMib.setDescription('This MIB module contains Cadant internal data schema for CAM Load Balancing')
cadLoadBalChgOverStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 1), )
if mibBuilder.loadTexts: cadLoadBalChgOverStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChgOverStatusTable.setDescription('A table of CMTS operation entries to reports the status of cable modems instructed to move to a new downstream and/or upstream channel.')
cadLoadBalChgOverStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 1, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"))
if mibBuilder.loadTexts: cadLoadBalChgOverStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChgOverStatusEntry.setDescription('The status of the specified DCC/UCC operation')
cadLoadBalChgOverStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("messageSent", 1), ("noOpNeeded", 2), ("modemDeparting", 3), ("waitToSendMessage", 4), ("cmOperationRejected", 5), ("cmtsOperationRejected", 6), ("timeOutT13", 7), ("timeOutT15", 8), ("rejectinit", 9), ("success", 10), ("dbcTimeout", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChgOverStatusValue.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChgOverStatusValue.setDescription('The status of the specified DCC/UCC operation.')
cadLoadBalCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2), )
if mibBuilder.loadTexts: cadLoadBalCmtsCmStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalCmtsCmStatusTable.setDescription('The list contains the load balancing attributes associated with the cable modem. ')
cadLoadBalCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"))
if mibBuilder.loadTexts: cadLoadBalCmtsCmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalCmtsCmStatusEntry.setDescription('Additional objects for docsIfCmtsCmStatusTable entry that relate to load balancing ')
cadLoadbal3CmtsCmParamsProvGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsProvGrpId.setStatus('current')
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsProvGrpId.setDescription('This attribute indicates the provisioned Load Balancing Group ID TLV the CM signaled to the CMTS during registration, or zero if not provisioned in the CM.')
cadLoadbal3CmtsCmParamsCurrentGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsCurrentGrpId.setStatus('current')
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsCurrentGrpId.setDescription('This attribute references the Load Balancing Group Identifier (Id attribute from the GrpStatus object) associated with the cable modem after the CMTS validates the CM Load Balancing Group ID TLV, Service Type ID TLV and Restricted CM list. The value zero indicates that the Load Balancing Group is invalid, or the General Load Balancing Group is invalid due ambiguous topology resolution.')
cadLoadbal3CmtsCmParamsProvServiceTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsProvServiceTypeID.setStatus('current')
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsProvServiceTypeID.setDescription('This attribute indicates the provisioned Service Type ID TLV the CM signaled to the CMTS during registration, or the zero-length string if not provisioned in the CM.')
cadLoadbal3CmtsCmParamsCurrentServiceTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsCurrentServiceTypeID.setStatus('current')
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsCurrentServiceTypeID.setDescription('This attribute represents the Service Type ID the CMTS picked from the Restricted Group of Restricted CM list, or the Service Type Id TLV the CM signaled to the CMTS during registration, or the zero-length string if none was used.')
cadLoadbal3CmtsCmParamsPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsPolicyId.setStatus('current')
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsPolicyId.setDescription('This attribute references the Load Balancing Policy ID associated to the cable modem either from the configuration file or from the General or Restricted Load Balancing Groups CMTS configuration.')
cadLoadbal3CmtsCmParamsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsPriority.setStatus('current')
if mibBuilder.loadTexts: cadLoadbal3CmtsCmParamsPriority.setDescription('This attribute references the Load Balancing Priority associated to the cable modem either from the configuration file or from the General or Restricted Load Balancing Groups CMTS configuration.')
cadLoadBalBasicRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4), )
if mibBuilder.loadTexts: cadLoadBalBasicRuleTable.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalBasicRuleTable.setDescription('This table extends the docsLoadBalBasicRule table with additional methods and thresolds.')
cadLoadBalBasicRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1), )
docsLoadbal3BasicRuleEntry.registerAugmentions(("CADANT-LOADBALANCING-MIB", "cadLoadBalBasicRuleEntry"))
cadLoadBalBasicRuleEntry.setIndexNames(*docsLoadbal3BasicRuleEntry.getIndexNames())
if mibBuilder.loadTexts: cadLoadBalBasicRuleEntry.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalBasicRuleEntry.setDescription('Load balancing count for Change Over within a load balancing group')
cadLoadBalRuleMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cm-count", 1), ("channel-utilization", 2))).clone('cm-count')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRuleMethod.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRuleMethod.setDescription('cm-count uses dynamic load balancing of upstream receivers in the same load balancing group to balance the number of CMs per upstream channel. channel-utilization uses dynamic load balancing of the upstream receivers in the same load balancing group to balance the channel utilization of the channels in the group.')
cadLoadBalRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 2), Bits().clone(namedValues=NamedValues(("rule-static", 0), ("rule-non-bonded-dcc", 1), ("rule-bonded-us-dbc", 2), ("rule-bonded-ds-dbc", 3), ("rule-bonded-dcc", 4))).clone(namedValues=NamedValues(("rule-static", 0), ("rule-non-bonded-dcc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRuleType.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRuleType.setDescription('rule-static enables load balancing at modem initial maintenance ranging time. rule-non-bonded-dcc enables dynamic load balancing by moving non- bonded CMs with DCC just after modem registration time and at regular intervals according to the load balance interval settings. rule-bonded-dcc enables dynamic load balancing by moving bonded CMs with DCC just after modem registration time and at regular intervals according to the load balance interval settings. rule-bonded-us-dbc enables dynamic load balancing by moving upstream bonded CMs with DBC just after modem registration time and at regular intervals according to the load balance interval settings. rule-bonded-ds-dbc enables dynamic load balancing by moving downstream bonded CMs with DBC just after modem registration time and at regular intervals according to the load balance interval settings. Multiple rule types can be set, enabling a combination of load balancing mechanisms to be selected.')
cadLoadBalRuleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRuleThreshold.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRuleThreshold.setDescription('This is the size of load difference between channels that is tolerated before load balancing will be started.')
cadLoadBalRuleRegistrationSteeringD2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRuleRegistrationSteeringD2.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRuleRegistrationSteeringD2.setDescription('If this object is set to true the C4 is directed to move any D2.0 CMs registering on a TDMA channel to an ATDMA channel in the load balance group. This occurs immediately after the C4 receives a registration-acknowledge from the CM.')
cadLoadBalRuleRegistrationSteeringD3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRuleRegistrationSteeringD3.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRuleRegistrationSteeringD3.setDescription('If this object is set to true the C4 is directed to move any D3.0 CMs registering on a TDMA channel to an ATDMA channel in the load balance group. This occurs immediately after the C4 receives a registration-acknowledge from the CM.')
cadLoadBalRulePeriodicSteeringD2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRulePeriodicSteeringD2.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRulePeriodicSteeringD2.setDescription('If this object is set to true the C4 is directed to audit all TDMA channels in an active load balance group and move D2.0 CMs to an ATDMA channel in the load balance group. One CM is moved per TDMA channel per macdomain-check-interval. ')
cadLoadBalRulePeriodicSteeringD3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRulePeriodicSteeringD3.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRulePeriodicSteeringD3.setDescription('If this object is set to true the C4 is directed to audit all TDMA channels in an active load balance group and move D3.0 CMs to an ATDMA channel in the load balance group. One CM is moved per TDMA channel per macdomain-check-interval.')
cadLoadBalRuleChannelWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("equal", 1), ("usOnly", 2), ("dsOnly", 3), ("usPlus", 4), ("dsPlus", 5))).clone('equal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRuleChannelWeight.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRuleChannelWeight.setDescription("'equal' directs the load balancer to use DS and US channel load equally to determine load balancing decisions. 'usOnly' directs the load balancer to only use US channel load to determine load balancing decisions. 'dsOnly' directs the load balancer to only use DS channel load to determine load balancing decisions. 'usPlus' directs the load balancer to double US channel load over DS channel load to determine load balancing decisions. 'dsPlus' directs the load balancer to double DS channel load over US channel load to determine load balancing decisions.")
cadLoadBalExcludedOUITable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 5), )
if mibBuilder.loadTexts: cadLoadBalExcludedOUITable.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalExcludedOUITable.setDescription('This table contains a list of OUIs that should not be moved through dynamic load balancing.')
cadLoadBalExcludedOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 5, 1), ).setIndexNames((0, "CADANT-LOADBALANCING-MIB", "cadLoadBalExclOUIAddress"))
if mibBuilder.loadTexts: cadLoadBalExcludedOUIEntry.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalExcludedOUIEntry.setDescription('An OUI that describes a set of modems not to be moved by load balancing.')
cadLoadBalExclOUIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 5, 1, 1), OUIAddress())
if mibBuilder.loadTexts: cadLoadBalExclOUIAddress.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalExclOUIAddress.setDescription('The OUI of the modem set to exclude from load balancing.')
cadLoadBalExclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadLoadBalExclRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalExclRowStatus.setDescription('The status object for adding and removing rows from this table. The only valid values are createAndGo and destroy.')
cadLoadBalSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6))
cadLoadBalMacDomainLoadBalanceInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalMacDomainLoadBalanceInterval.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalMacDomainLoadBalanceInterval.setDescription('Interval between checking the loading of the MAC domain to determine if any modems need to be moved to different channels within a MAC domain. A value of 0 disables checking.')
cadLoadBalAcrossMacDomainLoadBalanceInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalAcrossMacDomainLoadBalanceInterval.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalAcrossMacDomainLoadBalanceInterval.setDescription('Interval between checking the loading of multiple MAC domains to determine if any modems need to be moved to the channels across different MAC domains. A value of 0 disables checking.')
cadLoadBalStartDsUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalStartDsUtilizationThreshold.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalStartDsUtilizationThreshold.setDescription('Interval to start downstream channel utilization threshold.')
cadLoadBalStartUsUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalStartUsUtilizationThreshold.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalStartUsUtilizationThreshold.setDescription('Interval to start upstream channel utilization threshold.')
cadLoadBalFailedListAgeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6, 9), Unsigned32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalFailedListAgeOutTime.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalFailedListAgeOutTime.setDescription('Remove an entry from the Load-Balance failed list after it has been on the list for the specified number of hours.')
cadLoadBalFailedListExcludeCount = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6, 10), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalFailedListExcludeCount.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalFailedListExcludeCount.setDescription('When attempting to move from one pair of DS/US channels to a target pair of DS/US channels, a CM will be excluded from attempting to move between this set of channels after the number of failures reaches this object.')
cadLoadBalNumberModemsToCheckPerInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 6, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalNumberModemsToCheckPerInterval.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalNumberModemsToCheckPerInterval.setDescription('The objects indicates the number of CMs to check for high utilization at each macdomain-check-interval. A higher number will evaluate more CMs on the overloaded DS/US channels to find the heaviest user to move to less loaded channels. Therefore, a higher number will cause heavy users to be load balanced more frequently.')
cadLoadBalChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7), )
if mibBuilder.loadTexts: cadLoadBalChannelTable.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelTable.setDescription('This table contains the count information of the load balancing group channels present in the C4.')
cadLoadBalChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadLoadBalChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelEntry.setDescription('Load balancing counts for a downstream or upstream channel.')
cadLoadBalChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelUtilization.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelUtilization.setDescription('The downstream channel utilization snapshot captured by the CAM during the last dynamic balancing interval. This value is valid for both downstream and upstream channels.')
cadLoadBalChannelCmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelCmCount.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelCmCount.setDescription('The count of cable modems associated with the channel. This value is valid for both downstream and upstream channels.')
cadLoadBalChannelDynamicTransfersIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelDynamicTransfersIn.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelDynamicTransfersIn.setDescription('The number of successful modem transfers from other channels initiated by the dynamic load balancer. This value is valid for both downstream and upstream channels.')
cadLoadBalChannelDynamicTransfersOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelDynamicTransfersOut.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelDynamicTransfersOut.setDescription('The number of successful modem transfers to other channels initiated by the dynamic load balancer. This value is valid for both downstream and upstream channels.')
cadLoadBalChannelStaticTransfersIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelStaticTransfersIn.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelStaticTransfersIn.setDescription('The number of successful modem transfers from other channels initiated by the static load balancer. This value is valid for upstream channels only.')
cadLoadBalChannelStaticTransfersOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelStaticTransfersOut.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelStaticTransfersOut.setDescription('The number of successful modem transfers to other channels initiated by the static load balancer. This value is valid for upstream channels only.')
cadLoadBalChannelDbcTransfersIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelDbcTransfersIn.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelDbcTransfersIn.setDescription("The number of times the particular channel has been moved into a modem's channel-set via DBC load balancing. This value is valid for both downstream and upstream channels.")
cadLoadBalChannelDbcTransfersOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLoadBalChannelDbcTransfersOut.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalChannelDbcTransfersOut.setDescription("The number of times the particular channel has been moved out of a modem's channel-set via DBC load balancing. This value is valid for both downstream and upstream channels.")
cadLoadBalControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 8))
cadLoadBalClearCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 8, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalClearCounts.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalClearCounts.setDescription('Setting this value to true will reset the counts associated with load balancing. Reading this value will always return false.')
cadLoadBalRCSControl = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalRCSControl.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalRCSControl.setDescription('If set to enable(1), RCS load balancing will always be permitted. If set to disable(2), RCS load balancing is never permitted')
cadLoadBalTCSControl = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalTCSControl.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalTCSControl.setDescription('If set to enable(1), TCS load balancing will always be permitted. If set to disable(2), TCS load balancing is never permitted')
cadLoadBalTCSMoveUsPrimaryControl = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalTCSMoveUsPrimaryControl.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalTCSMoveUsPrimaryControl.setDescription("If set to enable(1), an upstream bonded CM's primary upstream channel will be allowed to be moved as part of registration Transmit Channel Set (TCS) load balancing. If set to disable(2), an upstream bonded CM's primary upstream channel will NOT be allowed to be moved as part of registration Transmit Channel Set (TCS) load balancing.")
cadLoadBalDbcMoveUsPrimaryControl = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 50, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLoadBalDbcMoveUsPrimaryControl.setStatus('current')
if mibBuilder.loadTexts: cadLoadBalDbcMoveUsPrimaryControl.setDescription("If set to enable(1), an upstream bonded CM's primary upstream channel will be allowed to be moved via DBC load balancing. If set to disable(2), an upstream bonded CM's primary upstream channel will NOT be allowed to be moved via DBC load balancing.")
mibBuilder.exportSymbols("CADANT-LOADBALANCING-MIB", cadLoadBalChannelDynamicTransfersIn=cadLoadBalChannelDynamicTransfersIn, cadLoadBalRulePeriodicSteeringD2=cadLoadBalRulePeriodicSteeringD2, cadLoadBalControlGroup=cadLoadBalControlGroup, cadLoadBalMib=cadLoadBalMib, cadLoadBalStartDsUtilizationThreshold=cadLoadBalStartDsUtilizationThreshold, cadLoadBalChannelStaticTransfersOut=cadLoadBalChannelStaticTransfersOut, cadLoadBalExclRowStatus=cadLoadBalExclRowStatus, cadLoadBalChannelUtilization=cadLoadBalChannelUtilization, cadLoadBalTCSMoveUsPrimaryControl=cadLoadBalTCSMoveUsPrimaryControl, cadLoadBalRuleChannelWeight=cadLoadBalRuleChannelWeight, cadLoadBalExcludedOUIEntry=cadLoadBalExcludedOUIEntry, cadLoadBalRulePeriodicSteeringD3=cadLoadBalRulePeriodicSteeringD3, cadLoadBalChannelEntry=cadLoadBalChannelEntry, cadLoadBalChgOverStatusValue=cadLoadBalChgOverStatusValue, cadLoadBalChannelDynamicTransfersOut=cadLoadBalChannelDynamicTransfersOut, cadLoadBalChannelCmCount=cadLoadBalChannelCmCount, PYSNMP_MODULE_ID=cadLoadBalMib, cadLoadbal3CmtsCmParamsPolicyId=cadLoadbal3CmtsCmParamsPolicyId, cadLoadBalMacDomainLoadBalanceInterval=cadLoadBalMacDomainLoadBalanceInterval, cadLoadBalNumberModemsToCheckPerInterval=cadLoadBalNumberModemsToCheckPerInterval, cadLoadBalChannelDbcTransfersOut=cadLoadBalChannelDbcTransfersOut, cadLoadBalTCSControl=cadLoadBalTCSControl, cadLoadBalRuleThreshold=cadLoadBalRuleThreshold, cadLoadBalChgOverStatusEntry=cadLoadBalChgOverStatusEntry, cadLoadBalDbcMoveUsPrimaryControl=cadLoadBalDbcMoveUsPrimaryControl, cadLoadBalChannelStaticTransfersIn=cadLoadBalChannelStaticTransfersIn, cadLoadBalAcrossMacDomainLoadBalanceInterval=cadLoadBalAcrossMacDomainLoadBalanceInterval, cadLoadBalRCSControl=cadLoadBalRCSControl, cadLoadBalRuleMethod=cadLoadBalRuleMethod, cadLoadBalChannelDbcTransfersIn=cadLoadBalChannelDbcTransfersIn, cadLoadBalRuleRegistrationSteeringD3=cadLoadBalRuleRegistrationSteeringD3, cadLoadBalCmtsCmStatusTable=cadLoadBalCmtsCmStatusTable, cadLoadBalExclOUIAddress=cadLoadBalExclOUIAddress, cadLoadbal3CmtsCmParamsProvServiceTypeID=cadLoadbal3CmtsCmParamsProvServiceTypeID, cadLoadbal3CmtsCmParamsPriority=cadLoadbal3CmtsCmParamsPriority, cadLoadBalChannelTable=cadLoadBalChannelTable, cadLoadBalBasicRuleTable=cadLoadBalBasicRuleTable, cadLoadBalRuleType=cadLoadBalRuleType, cadLoadbal3CmtsCmParamsProvGrpId=cadLoadbal3CmtsCmParamsProvGrpId, cadLoadBalClearCounts=cadLoadBalClearCounts, cadLoadBalChgOverStatusTable=cadLoadBalChgOverStatusTable, cadLoadBalExcludedOUITable=cadLoadBalExcludedOUITable, cadLoadBalFailedListAgeOutTime=cadLoadBalFailedListAgeOutTime, cadLoadBalRuleRegistrationSteeringD2=cadLoadBalRuleRegistrationSteeringD2, cadLoadBalCmtsCmStatusEntry=cadLoadBalCmtsCmStatusEntry, cadLoadBalStartUsUtilizationThreshold=cadLoadBalStartUsUtilizationThreshold, cadLoadBalSystemGroup=cadLoadBalSystemGroup, cadLoadBalBasicRuleEntry=cadLoadBalBasicRuleEntry, cadLoadBalFailedListExcludeCount=cadLoadBalFailedListExcludeCount, cadLoadbal3CmtsCmParamsCurrentGrpId=cadLoadbal3CmtsCmParamsCurrentGrpId, cadLoadbal3CmtsCmParamsCurrentServiceTypeID=cadLoadbal3CmtsCmParamsCurrentServiceTypeID)
