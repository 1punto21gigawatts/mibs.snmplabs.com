#
# PySNMP MIB module ALCATEL-IND1-IPMCAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-IPMCAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:17:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1Ipmrm, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Ipmrm")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
IANAipMRouteProtocol, IANAipRouteProtocol = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipMRouteProtocol", "IANAipRouteProtocol")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Unsigned32, Bits, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Unsigned32", "Bits", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter64", "Gauge32")
TimeStamp, RowStatus, TextualConvention, StorageType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "TextualConvention", "StorageType", "DisplayString")
alaIpMcastMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2))
alaIpMcastMIB.setRevisions(('2007-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alaIpMcastMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alaIpMcastMIB.setLastUpdated('200707020000Z')
if mibBuilder.loadTexts: alaIpMcastMIB.setOrganization('Alcatel - Architects of an Internet World')
if mibBuilder.loadTexts: alaIpMcastMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alaIpMcastMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): This proprietary MIB contains management information for the IP Multicast function. This MIB module contains information about IP Multicast routing, data forwarding, and data reception. This MIB module is independent of the multicast protocol(s) and address type(s) that are in use. This MIB is based on the Internet Draft <draft-ietf-mboned-ip-mcast-mib-02.txt> developed by the IETF MBONED Working Group. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alaIpMcastMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1))
alaIpMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1))
alaIpMcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpMcastEnable.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastEnable.setDescription('The enabled status of IP Multicast function on this system.')
alaIpMcastRouteEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteEntryCount.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteEntryCount.setDescription('The number of rows in the alaIpMcastRouteTable. This can be used to check for multicast routing activity, and to monitor the multicast routing table size.')
alaIpMcastInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4), )
if mibBuilder.loadTexts: alaIpMcastInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceTable.setDescription('The (conceptual) table used to manage the multicast protocol active on an interface.')
alaIpMcastInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceIfIndex"))
if mibBuilder.loadTexts: alaIpMcastInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceEntry.setDescription('An entry (conceptual row) containing the multicast protocol information for a particular interface.')
alaIpMcastInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaIpMcastInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceIfIndex.setDescription('The ifIndex value of the interface for which this entry contains information.')
alaIpMcastInterfaceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpMcastInterfaceTtl.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceTtl.setDescription('The datagram TTL threshold for the interface. Any IP multicast datagrams with a TTL (IPv4) or Hop Limit (IPv6) less than this threshold will not be forwarded out the interface. The default value of 0 means all multicast packets are forwarded out the interface.')
alaIpMcastInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 3), IANAipMRouteProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpMcastInterfaceProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: alaIpMcastInterfaceProtocol.setDescription('The multicast protocol running on this interface. More than one multicast protocol can be used on an interface, so this object is ambiguous. Use of this object is deprecated.')
alaIpMcastInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpMcastInterfaceRateLimit.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceRateLimit.setDescription('The rate-limit, in kilobits per second, of forwarded multicast traffic on the interface. A rate-limit of 0 indicates that no rate limiting is done.')
alaIpMcastInterfaceInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceInMcastOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceInMcastOctets.setDescription('The number of octets of multicast packets that have arrived on the interface, including framing characters. This object is similar to ifInOctets in the Interfaces MIB, except that only multicast packets are counted.')
alaIpMcastInterfaceOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceOutMcastOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceOutMcastOctets.setDescription('The number of octets of multicast packets that have been sent on the interface.')
alaIpMcastInterfaceInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceInMcastPkts.setReference('RFC 2863 ifInMulticastPkts')
if mibBuilder.loadTexts: alaIpMcastInterfaceInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceInMcastPkts.setDescription('The number of multicast packets that have arrived on the interface. In many cases, this object is identical to ifInMulticastPkts in the Interfaces MIB. However, some implementations use ifXTable for Layer 2 traffic statistics and alaIpMcastInterfaceTable at Layer 3. In this case a difference between these objects probably indicates that some Layer 3 multicast packets are being transmitted as unicast at Layer 2.')
alaIpMcastInterfaceOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceOutMcastPkts.setReference('RFC 2863 ifOutMulticastPkts')
if mibBuilder.loadTexts: alaIpMcastInterfaceOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceOutMcastPkts.setDescription('The number of multicast packets that have been sent on the interface. In many cases, this object is identical to ifOutMulticastPkts in the Interfaces MIB. However, some implementations use ifXTable for Layer 2 traffic statistics and alaIpMcastInterfaceTable at Layer 3. In this case a difference between these objects probably indicates that some Layer 3 multicast packets are being transmitted as unicast at Layer 2.')
alaIpMcastInterfaceHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceHCInMcastOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceHCInMcastOctets.setDescription('The number of octets of multicast packets that have arrived on the interface, including framing characters. This object is a 64-bit version of alaIpMcastRouteInterfaceInMcastOctets. It is similar to ifHCInOctets in the Interfaces MIB, except that only multicast packets are counted.')
alaIpMcastInterfaceHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceHCOutMcastOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceHCOutMcastOctets.setDescription('The number of octets of multicast packets that have been sent on the interface. This object is a 64-bit version of alaIpMcastRouteInterfaceOutMcastOctets.')
alaIpMcastInterfaceHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceHCInMcastPkts.setReference('RFC 2863 ifHCInMulticastPkts')
if mibBuilder.loadTexts: alaIpMcastInterfaceHCInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceHCInMcastPkts.setDescription('The number of multicast packets that have arrived on the interface. In many cases, this object is identical to ifHCInMulticastPkts in the Interfaces MIB. However, some implementations use ifXTable for Layer 2 traffic statistics and alaIpMcastInterfaceTable at Layer 3. In this case a difference between these objects probably indicates that some Layer 3 multicast packets are being transmitted as unicast at Layer 2.')
alaIpMcastInterfaceHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastInterfaceHCOutMcastPkts.setReference('RFC 2863 ifHCOutMulticastPkts')
if mibBuilder.loadTexts: alaIpMcastInterfaceHCOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastInterfaceHCOutMcastPkts.setDescription('The number of multicast packets that have been sent on the interface. In many cases, this object is identical to ifHCOutMulticastPkts in the Interfaces MIB. However, some implementations use ifXTable for Layer 2 traffic statistics and alaIpMcastInterfaceTable at Layer 3. In this case a difference between these objects probably indicates that some Layer 3 multicast packets are being transmitted as unicast at Layer 2.')
alaIpMcastRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2), )
if mibBuilder.loadTexts: alaIpMcastRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteTable.setDescription('The (conceptual) table containing multicast routing information for IP datagrams sent by particular sources to to the IP multicast groups known to this router.')
alaIpMcastRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteGroupAddressType"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteGroup"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteGroupPrefixLength"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteSourceAddressType"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteSource"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteSourcePrefixLength"))
if mibBuilder.loadTexts: alaIpMcastRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteEntry.setDescription('An entry (conceptual row) containing the multicast routing information for IP datagrams from a particular source and addressed to a particular IP multicast group address.')
alaIpMcastRouteGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaIpMcastRouteGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteGroupAddressType.setDescription('A value indicating the address family of the address contained in alaIpMcastRouteGroup. Legal values correspond to the subset of address families for which multicast forwarding is supported.')
alaIpMcastRouteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaIpMcastRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteGroup.setDescription('The IP multicast group address which, when combined with the corresponding value specified in alaIpMcastRouteGroupPrefixLength, identifies the groups for which this entry contains multicast routing information. This address object is only significant up to alaIpMcastRouteGroupPrefixLength bits. The remainder of the address bits are zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry.')
alaIpMcastRouteGroupPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128)))
if mibBuilder.loadTexts: alaIpMcastRouteGroupPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteGroupPrefixLength.setDescription('The length in bits of the mask which, when combined with the corresponding value of alaIpMcastRouteGroup, identifies the groups for which this entry contains multicast routing information.')
alaIpMcastRouteSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 4), InetAddressType())
if mibBuilder.loadTexts: alaIpMcastRouteSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteSourceAddressType.setDescription('A value indicating the address family of the address contained in alaIpMcastRouteSource. The value MUST be the same as the value of alaIpMcastRouteGroupType.')
alaIpMcastRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaIpMcastRouteSource.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteSource.setDescription('The network address which, when combined with the corresponding value of alaIpMcastRouteSourcePrefixLength, identifies the sources for which this entry contains multicast routing information. This address object is only significant up to alaIpMcastRouteGroupPrefixLength bits. The remainder of the address bits are zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry.')
alaIpMcastRouteSourcePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 6), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128)))
if mibBuilder.loadTexts: alaIpMcastRouteSourcePrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteSourcePrefixLength.setDescription('The length in bits of the mask which, when combined with the corresponding value of alaIpMcastRouteSource, identifies the sources for which this entry contains multicast routing information.')
alaIpMcastRouteUpstreamNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteUpstreamNeighborType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteUpstreamNeighborType.setDescription('A value indicating the address family of the address contained in alaIpMcastRouteUpstreamNeighbor. The value MUST be the same as the value of alaIpMcastRouteGroupType.')
alaIpMcastRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteUpstreamNeighbor.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteUpstreamNeighbor.setDescription('The address of the upstream neighbor (for example, RPF neighbor) from which IP datagrams from these sources to this multicast address are received. If the upstream neighbor is unknown, then alaIpMcastRouteUpstreamNeighbor will be 0.0.0.0 in the case of an IPv4 entry, and 0:0:0:0:0:0:0:0 in the case of an IPv6 entry (for example, in BIDIR-PIM).')
alaIpMcastRouteInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 9), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteInIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteInIfIndex.setDescription('The value of ifIndex for the interface on which IP datagrams sent by these sources to this multicast address are received. A value of 0 indicates that datagrams are not subject to an incoming interface check, but may be accepted on multiple interfaces (for example, in BIDIR-PIM).')
alaIpMcastRouteTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteTimeStamp.setDescription('The value of sysUpTime at which the multicast routing information represented by this entry was learned by the router.')
alaIpMcastRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteExpiryTime.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out. The value 0 indicates that the entry is not subject to aging. If alaIpMcastRouteNextHopState is pruned(1), this object represents the remaining time until the prune expires. If this timer expires, state reverts to forwarding(2). Otherwise, this object represents the time until this entry is removed from the table.')
alaIpMcastRoutePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRoutePkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRoutePkts.setDescription('The number of packets routed using this multicast route entry. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteTimeStamp.')
alaIpMcastRouteDifferentInIfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteDifferentInIfPackets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteDifferentInIfPackets.setDescription("The number of packets which this router has received from these sources and addressed to this multicast group address, which were dropped because they were received on an unexpected interface. For RPF checking protocols (such as PIM-SM), these packets arrived on interfaces other than alaIpMcastRouteInIfIndex, and were dropped because of this failed RPF check. (RPF paths are 'Reverse Path Forwarding' path; the unicast routes to the expected origin of multicast data flows). Other protocols may drop packets on an incoming interface check for different reasons (for example, BIDIR-PIM performs a DF check on receipt of packets). All packets dropped as a result of an incoming interface check are counted here. If this counter increases rapidly, this indicates a problem. A significant quantity of multicast data is arriving at this router on unexpected interfaces, and is not being forwarded. For guidance, if the rate of increase of this counter exceeds 1% of the rate of increase of alaIpMcastRoutePkts, then there are multicast routing problems that require investigation. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteTimeStamp.")
alaIpMcastRouteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteOctets.setDescription('The number of octets contained in IP datagrams which were received from these sources and addressed to this multicast group address, and which were forwarded by this router. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteTimeStamp.')
alaIpMcastRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 15), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteProtocol.setDescription('The multicast routing protocol via which this multicast forwarding entry was learned.')
alaIpMcastRouteRtProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 16), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteRtProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteRtProtocol.setDescription('The routing mechanism via which the route used to find the upstream or parent interface for this multicast forwarding entry was learned. Inclusion of values for routing protocols is not intended to imply that those protocols need be supported.')
alaIpMcastRouteRtAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteRtAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteRtAddressType.setDescription('A value indicating the address family of the address contained in alaIpMcastRouteRtAddress. The value MUST be the same as the value of alaIpMcastRouteGroupType.')
alaIpMcastRouteRtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteRtAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteRtAddress.setDescription('The address portion of the route used to find the upstream or parent interface for this multicast forwarding entry. This address object is only significant up to alaIpMcastRouteGroupPrefixLength bits. The remainder of the address bits are zero.')
alaIpMcastRouteRtPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 19), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteRtPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteRtPrefixLength.setDescription('The length in bits of the mask associated with the route used to find the upstream or parent interface for this multicast forwarding entry.')
alaIpMcastRouteRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteRtType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteRtType.setDescription('The reason the given route was placed in the (logical) multicast Routing Information Base (RIB). A value of unicast means that the route would normally be placed only in the unicast RIB, but was placed in the multicast RIB (instead or in addition) due to local configuration, such as when running PIM over RIP. A value of multicast means that the route was explicitly added to the multicast RIB by the routing protocol, such as DVMRP or Multiprotocol BGP.')
alaIpMcastRouteHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteHCOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteHCOctets.setDescription('The number of octets contained in IP datagrams which were received from these sources and addressed to this multicast group address, and which were forwarded by this router. This object is a 64-bit version of alaIpMcastRouteOctets. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteTimeStamp.')
alaIpMcastRouteDifferentInIfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteDifferentInIfOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteDifferentInIfOctets.setDescription("The number of octets contained in IP datagrams which this router has received from these sources and addressed to this multicast group address, which were dropped because they were received on an unexpected interface. For RPF checking protocols (such as PIM-SM), these packets arrived on interfaces other than alaIpMcastRouteInIfIndex, and were dropped because of this failed RPF check. (RPF paths are 'Reverse Path Forwarding' path; the unicast routes to the expected origin of multicast data flows). Other protocols may drop packets on an incoming interface check for different reasons (for example, BIDIR-PIM performs a DF check on receipt of packets). All packets dropped as a result of an incoming interface check are counted here. If this counter increases rapidly, this indicates a problem. A significant quantity of multicast data is arriving at this router on unexpected interfaces, and is not being forwarded. For guidance, if the rate of increase of this counter exceeds 1% of the rate of increase of alaIpMcastRouteOctets, then there are multicast routing problems that require investigation. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteTimeStamp.")
alaIpMcastRouteTtlDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteTtlDropPackets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteTtlDropPackets.setDescription('The number of packets which this router has received from these sources and addressed to this multicast group address, which were dropped because the TTL (IPv4) or Hop Limit (IPv6) was decremented to zero, or to a value less than alaIpMcastInterfaceTtl for all next hops. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteTimeStamp.')
alaIpMcastRouteTtlDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteTtlDropOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteTtlDropOctets.setDescription('The number of octets contained in IP datagrams which this router has received from these sources and addressed to this multicast group address, which were dropped because the TTL (IPv4) or Hop Limit (IPv6) was decremented to zero, or to a value less than alaIpMcastInterfaceTtl for all next hops. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteTimeStamp.')
alaIpMcastRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3), )
if mibBuilder.loadTexts: alaIpMcastRouteNextHopTable.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopTable.setDescription('The (conceptual) table containing information on the next-hops on outgoing interfaces for routing IP multicast datagrams. Each entry is one of a list of next-hops on outgoing interfaces for particular sources sending to a particular multicast group address.')
alaIpMcastRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopGroupAddressType"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopGroup"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopSourceAddressType"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopSource"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopSourcePrefixLength"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopIfIndex"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopAddressType"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopAddress"))
if mibBuilder.loadTexts: alaIpMcastRouteNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopEntry.setDescription('An entry (conceptual row) in the list of next-hops on outgoing interfaces to which IP multicast datagrams from particular sources to an IP multicast group address are routed.')
alaIpMcastRouteNextHopGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaIpMcastRouteNextHopGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopGroupAddressType.setDescription('A value indicating the address family of the address contained in alaIpMcastRouteNextHopGroup. Legal values correspond to the subset of address families for which multicast forwarding is supported.')
alaIpMcastRouteNextHopGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaIpMcastRouteNextHopGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopGroup.setDescription('The IP multicast group for which this entry specifies a next-hop on an outgoing interface.')
alaIpMcastRouteNextHopSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 3), InetAddressType())
if mibBuilder.loadTexts: alaIpMcastRouteNextHopSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopSourceAddressType.setDescription('A value indicating the address family of the address contained in alaIpMcastRouteNextHopSource. The value MUST be the same as the value of alaIpMcastRouteNextHopGroupType.')
alaIpMcastRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaIpMcastRouteNextHopSource.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopSource.setDescription('The network address which, when combined with the corresponding value of the mask specified in alaIpMcastRouteNextHopSourcePrefixLength, identifies the sources for which this entry specifies a next-hop on an outgoing interface. This address object is only significant up to alaIpMcastRouteNextHopSourcePrefixLength bits. The remainder of the address bits are zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry.')
alaIpMcastRouteNextHopSourcePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 5), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128)))
if mibBuilder.loadTexts: alaIpMcastRouteNextHopSourcePrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopSourcePrefixLength.setDescription('The length in bits of the mask which, when combined with the corresponding value specified in alaIpMcastRouteNextHopSource, identifies the sources for which this entry specifies a next-hop on an outgoing interface.')
alaIpMcastRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 6), InterfaceIndex())
if mibBuilder.loadTexts: alaIpMcastRouteNextHopIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopIfIndex.setDescription('The ifIndex value of the interface for the outgoing interface for this next-hop.')
alaIpMcastRouteNextHopAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 7), InetAddressType())
if mibBuilder.loadTexts: alaIpMcastRouteNextHopAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopAddressType.setDescription('A value indicating the address family of the address contained in alaIpMcastRouteNextHopAddress. The value MUST be the same as the value of alaIpMcastRouteNextHopGroupType.')
alaIpMcastRouteNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaIpMcastRouteNextHopAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopAddress.setDescription('The address of the next-hop specific to this entry. For most interfaces, this is identical to alaIpMcastRouteNextHopGroup. NBMA interfaces, however, may have multiple next-hop addresses out a single outgoing interface.')
alaIpMcastRouteNextHopState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pruned", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteNextHopState.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopState.setDescription("An indication of whether the outgoing interface and next- hop represented by this entry is currently being used to forward IP datagrams. The value 'forwarding' indicates it is currently being used; the value 'pruned' indicates it is not.")
alaIpMcastRouteNextHopTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteNextHopTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopTimeStamp.setDescription('The value of sysUpTime at which the multicast routing information represented by this entry was learned by the router.')
alaIpMcastRouteNextHopExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteNextHopExpiryTime.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out. If alaIpMcastRouteNextHopState is pruned(1), the remaining time until the prune expires and the state reverts to forwarding(2). Otherwise, the remaining time until this entry is removed from the table. The time remaining may be copied from alaIpMcastRouteExpiryTime if the protocol in use for this entry does not specify next-hop timers. The value 0 indicates that the entry is not subject to aging.')
alaIpMcastRouteNextHopClosestMemberHops = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteNextHopClosestMemberHops.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopClosestMemberHops.setDescription('The minimum number of hops between this router and any member of this IP multicast group reached via this next-hop on this outgoing interface. Any IP multicast datagrams for the group which have a TTL (IPv4) or Hop Count (IPv6) less than this number of hops will not be forwarded to this next-hop. This is an optimization applied by multicast routing protocols that explicitly track hop counts to downstream listeners. Multicast protocols that are not aware of hop counts to downstream listeners set this object to zero.')
alaIpMcastRouteNextHopProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 13), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteNextHopProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopProtocol.setDescription('The routing mechanism via which this next-hop was learned.')
alaIpMcastRouteNextHopPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteNextHopPkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopPkts.setDescription('The number of packets which have been forwarded using this route. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteNextHopTimeStamp.')
alaIpMcastRouteNextHopOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastRouteNextHopOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastRouteNextHopOctets.setDescription('The number of octets of multicast packets that have been forwarded using this route. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of alaIpMcastRouteNextHopTimeStamp.')
alaIpMcastBoundaryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5), )
if mibBuilder.loadTexts: alaIpMcastBoundaryTable.setReference('RFC 4007 section 5')
if mibBuilder.loadTexts: alaIpMcastBoundaryTable.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryTable.setDescription("The (conceptual) table listing the system's multicast scope zone boundaries.")
alaIpMcastBoundaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryIfIndex"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryAddressType"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryAddress"), (0, "ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryAddressPrefixLength"))
if mibBuilder.loadTexts: alaIpMcastBoundaryEntry.setReference('RFC 2365 section 5, RFC 4007 section 5')
if mibBuilder.loadTexts: alaIpMcastBoundaryEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryEntry.setDescription("An entry (conceptual row) describing one of this device's multicast scope zone boundaries.")
alaIpMcastBoundaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaIpMcastBoundaryIfIndex.setReference('RFC 2365 section 5, RFC 4007 section 5')
if mibBuilder.loadTexts: alaIpMcastBoundaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryIfIndex.setDescription('The IfIndex value for the interface to which this boundary applies. Packets with a destination address in the associated address/mask range will not be forwarded over this interface. For IPv4, zone boundaries cut through links. Therefore this is an external interface. This may be either a physical or virtual interface (tunnel, encapsulation, and so forth.) For IPv6, zone boundaries cut through nodes. Therefore this is a virtual interface within the node. This is not an external interface, either real or virtual. Packets crossing this interface neither arrive at nor leave the node, but only move between zones within the node.')
alaIpMcastBoundaryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaIpMcastBoundaryAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryAddressType.setDescription('A value indicating the address family of the address contained in alaIpMcastBoundaryAddress. Legal values correspond to the subset of address families for which multicast forwarding is supported.')
alaIpMcastBoundaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaIpMcastBoundaryAddress.setReference('RFC 2365, RFC 3306 section 4, RFC 4291 section 2.7')
if mibBuilder.loadTexts: alaIpMcastBoundaryAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryAddress.setDescription('The group address which, when combined with the corresponding value of alaIpMcastBoundaryAddressPrefixLength, identifies the group range for which the scoped boundary exists. Scoped IPv4 multicast address ranges must be prefixed by 239.0.0.0/4. Scoped IPv6 multicast address ranges are FF0x::/16, where x is a valid RFC 4291 multicast scope. An IPv6 address prefixed by FF1x::/16 is a non-permanently- assigned address. An IPv6 address prefixed by FF3x::/16 is a unicast-prefix based multicast addresses. A zone boundary for FF0x::/16 implies an identical boundary for these other prefixes. No separate FF1x::/16 or FF3x::/16 entries exist in this table. This address object is only significant up to alaIpMcastBoundaryAddressPrefixLength bits. The remainder of the address bits are zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry.')
alaIpMcastBoundaryAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 4), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 32)))
if mibBuilder.loadTexts: alaIpMcastBoundaryAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryAddressPrefixLength.setDescription("The length in bits of the mask which when, combined with the corresponding value of alaIpMcastBoundaryAddress, identifies the group range for which the scoped boundary exists. The InetAddressType is given by alaIpMcastBoundaryAddressType. For 'ipv4' this object must be in the range 4..32. For 'ipv6', this object must be 32.")
alaIpMcastBoundaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpMcastBoundaryStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryStatus.setDescription('The status of this row, by which rows in this table can be created and destroyed. This status object can be set to active(1) without setting any other columnar objects in this entry. All writeable objects in this entry can be modified when the status of this entry is active(1).')
alaIpMcastBoundaryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpMcastBoundaryStorageType.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryStorageType.setDescription("The storage type for this row. Rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
alaIpMcastBoundaryDroppedMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastBoundaryDroppedMcastOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryDroppedMcastOctets.setDescription('The number of octets of multicast packets that have been dropped as a result of this zone boundary configuration.')
alaIpMcastBoundaryDroppedMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastBoundaryDroppedMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryDroppedMcastPkts.setDescription('The number of multicast packets that have been dropped as a result of this zone boundary configuration.')
alaIpMcastBoundaryHCDroppedMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastBoundaryHCDroppedMcastOctets.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryHCDroppedMcastOctets.setDescription('The number of octets of multicast packets that have been dropped as a result of this zone boundary configuration. This object is a 64-bit version of alaIpMcastBoundaryDroppedMcastOctets.')
alaIpMcastBoundaryHCDroppedMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 1, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpMcastBoundaryHCDroppedMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastBoundaryHCDroppedMcastPkts.setDescription('The number of multicast packets that have been dropped as a result of this zone boundary configuration. This object is a 64-bit version of alaIpMcastBoundaryDroppedMcastPkts.')
alaIpMcastMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2))
alaIpMcastMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 1))
alaIpMcastMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2))
alaIpMcastMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastMIBBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBCompliance = alaIpMcastMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBCompliance.setDescription('Implementations of all the mandatory MIB groups listed below can claim full compliance. This MIB contains several InetAddressType and InetAddress objects, but not all IP address types are supported by all protocol implementations. A MIB implementation can claim full compliance if all IP address types supported by the protocol implementation are supported by the MIB implementation.')
alaIpMcastMIBMRouteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 1, 2)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastMIBMRouteBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBMRouteCompliance = alaIpMcastMIBMRouteCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: alaIpMcastMIBMRouteCompliance.setDescription('Implementations of this compliance statement are equivalent to compliance with the deprecated IPMROUTE-MIB module.')
alaIpMcastMIBMRouteBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastEnable"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteEntryCount"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteUpstreamNeighborType"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteUpstreamNeighbor"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteInIfIndex"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteTimeStamp"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteExpiryTime"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopState"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopTimeStamp"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopExpiryTime"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopProtocol"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopPkts"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceTtl"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceProtocol"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceRateLimit"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceInMcastOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceOutMcastOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBMRouteBasicGroup = alaIpMcastMIBMRouteBasicGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaIpMcastMIBMRouteBasicGroup.setDescription('A collection of objects to support basic management of IP Multicast routing. This conformance group is deprecated. It is replaced by alaIpMcastMIBBasicGroup and alaIpMcastMIBRouteGroup')
alaIpMcastMIBHopCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 2)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopClosestMemberHops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBHopCountGroup = alaIpMcastMIBHopCountGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBHopCountGroup.setDescription('A collection of objects to support management of the use of hop counts in IP Multicast routing.')
alaIpMcastMIBPktsOutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 3)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBPktsOutGroup = alaIpMcastMIBPktsOutGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBPktsOutGroup.setDescription('A collection of objects to support management of packet counters for each outgoing interface entry of a route.')
alaIpMcastMIBHCInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 4)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceHCInMcastOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceHCOutMcastOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceHCInMcastPkts"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceHCOutMcastPkts"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteHCOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryHCDroppedMcastOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryHCDroppedMcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBHCInterfaceGroup = alaIpMcastMIBHCInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBHCInterfaceGroup.setDescription('A collection of objects providing information specific to high speed (greater than 20,000,000 bits/second) network interfaces.')
alaIpMcastMIBRouteProtoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 5)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteProtocol"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteRtProtocol"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteRtAddressType"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteRtAddress"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteRtPrefixLength"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteRtType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBRouteProtoGroup = alaIpMcastMIBRouteProtoGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBRouteProtoGroup.setDescription('A collection of objects providing information on the relationship between multicast routing information and the IP Forwarding Table.')
alaIpMcastMIBBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 6)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastEnable"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteEntryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBBasicGroup = alaIpMcastMIBBasicGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBBasicGroup.setDescription('A collection of objects to support basic management of IP Multicast protocols.')
alaIpMcastMIBRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 7)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteUpstreamNeighborType"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteUpstreamNeighbor"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteInIfIndex"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteTimeStamp"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteExpiryTime"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRoutePkts"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteDifferentInIfPackets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopState"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopTimeStamp"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopExpiryTime"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopProtocol"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopPkts"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceTtl"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceRateLimit"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceInMcastOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceOutMcastOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteTtlDropPackets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteTtlDropOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBRouteGroup = alaIpMcastMIBRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBRouteGroup.setDescription('A collection of objects to support basic management of IP Multicast routing.')
alaIpMcastMIBBoundaryIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 10)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryStatus"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryStorageType"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryDroppedMcastOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastBoundaryDroppedMcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBBoundaryIfGroup = alaIpMcastMIBBoundaryIfGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBBoundaryIfGroup.setDescription('A collection of objects to support management of scoped multicast address boundaries.')
alaIpMcastMIBIfPktsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 12)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceInMcastPkts"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastInterfaceOutMcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBIfPktsGroup = alaIpMcastMIBIfPktsGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBIfPktsGroup.setDescription('A collection of objects to support management of packet counters for each interface entry.')
alaIpMcastMIBRouteOctetsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 10, 2, 2, 2, 13)).setObjects(("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteNextHopOctets"), ("ALCATEL-IND1-IPMCAST-MIB", "alaIpMcastRouteDifferentInIfOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpMcastMIBRouteOctetsGroup = alaIpMcastMIBRouteOctetsGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpMcastMIBRouteOctetsGroup.setDescription('A collection of objects to support management of octet counters for each forwarding entry.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPMCAST-MIB", alaIpMcastRouteProtocol=alaIpMcastRouteProtocol, alaIpMcastRouteRtAddress=alaIpMcastRouteRtAddress, alaIpMcastBoundaryStatus=alaIpMcastBoundaryStatus, alaIpMcastRouteNextHopTimeStamp=alaIpMcastRouteNextHopTimeStamp, alaIpMcastRouteExpiryTime=alaIpMcastRouteExpiryTime, alaIpMcastRouteGroupPrefixLength=alaIpMcastRouteGroupPrefixLength, alaIpMcastMIBGroups=alaIpMcastMIBGroups, alaIpMcastRouteTtlDropPackets=alaIpMcastRouteTtlDropPackets, alaIpMcastRouteUpstreamNeighbor=alaIpMcastRouteUpstreamNeighbor, alaIpMcastInterfaceTtl=alaIpMcastInterfaceTtl, alaIpMcast=alaIpMcast, alaIpMcastMIBMRouteBasicGroup=alaIpMcastMIBMRouteBasicGroup, alaIpMcastRouteTtlDropOctets=alaIpMcastRouteTtlDropOctets, alaIpMcastInterfaceHCOutMcastPkts=alaIpMcastInterfaceHCOutMcastPkts, alaIpMcastMIB=alaIpMcastMIB, alaIpMcastBoundaryHCDroppedMcastPkts=alaIpMcastBoundaryHCDroppedMcastPkts, alaIpMcastMIBRouteProtoGroup=alaIpMcastMIBRouteProtoGroup, alaIpMcastRouteEntryCount=alaIpMcastRouteEntryCount, alaIpMcastRouteHCOctets=alaIpMcastRouteHCOctets, alaIpMcastRouteNextHopOctets=alaIpMcastRouteNextHopOctets, alaIpMcastMIBRouteGroup=alaIpMcastMIBRouteGroup, alaIpMcastInterfaceTable=alaIpMcastInterfaceTable, alaIpMcastRouteEntry=alaIpMcastRouteEntry, alaIpMcastMIBMRouteCompliance=alaIpMcastMIBMRouteCompliance, alaIpMcastInterfaceRateLimit=alaIpMcastInterfaceRateLimit, alaIpMcastRouteNextHopClosestMemberHops=alaIpMcastRouteNextHopClosestMemberHops, alaIpMcastRouteTable=alaIpMcastRouteTable, alaIpMcastRouteInIfIndex=alaIpMcastRouteInIfIndex, alaIpMcastMIBHopCountGroup=alaIpMcastMIBHopCountGroup, alaIpMcastRouteNextHopState=alaIpMcastRouteNextHopState, alaIpMcastRouteNextHopPkts=alaIpMcastRouteNextHopPkts, alaIpMcastBoundaryTable=alaIpMcastBoundaryTable, alaIpMcastMIBPktsOutGroup=alaIpMcastMIBPktsOutGroup, alaIpMcastRouteRtPrefixLength=alaIpMcastRouteRtPrefixLength, alaIpMcastRouteNextHopAddressType=alaIpMcastRouteNextHopAddressType, alaIpMcastRouteNextHopSource=alaIpMcastRouteNextHopSource, alaIpMcastMIBObjects=alaIpMcastMIBObjects, alaIpMcastMIBBasicGroup=alaIpMcastMIBBasicGroup, alaIpMcastInterfaceHCOutMcastOctets=alaIpMcastInterfaceHCOutMcastOctets, alaIpMcastInterfaceOutMcastPkts=alaIpMcastInterfaceOutMcastPkts, alaIpMcastInterfaceInMcastOctets=alaIpMcastInterfaceInMcastOctets, alaIpMcastRouteNextHopAddress=alaIpMcastRouteNextHopAddress, alaIpMcastBoundaryDroppedMcastPkts=alaIpMcastBoundaryDroppedMcastPkts, alaIpMcastRouteNextHopIfIndex=alaIpMcastRouteNextHopIfIndex, alaIpMcastMIBCompliance=alaIpMcastMIBCompliance, alaIpMcastInterfaceProtocol=alaIpMcastInterfaceProtocol, alaIpMcastRouteGroupAddressType=alaIpMcastRouteGroupAddressType, alaIpMcastInterfaceInMcastPkts=alaIpMcastInterfaceInMcastPkts, alaIpMcastBoundaryIfIndex=alaIpMcastBoundaryIfIndex, alaIpMcastRouteSourcePrefixLength=alaIpMcastRouteSourcePrefixLength, alaIpMcastRouteNextHopEntry=alaIpMcastRouteNextHopEntry, alaIpMcastBoundaryAddressType=alaIpMcastBoundaryAddressType, alaIpMcastBoundaryAddress=alaIpMcastBoundaryAddress, alaIpMcastMIBConformance=alaIpMcastMIBConformance, alaIpMcastMIBRouteOctetsGroup=alaIpMcastMIBRouteOctetsGroup, alaIpMcastRouteNextHopGroupAddressType=alaIpMcastRouteNextHopGroupAddressType, alaIpMcastRouteNextHopTable=alaIpMcastRouteNextHopTable, alaIpMcastInterfaceEntry=alaIpMcastInterfaceEntry, alaIpMcastRouteSourceAddressType=alaIpMcastRouteSourceAddressType, alaIpMcastInterfaceHCInMcastOctets=alaIpMcastInterfaceHCInMcastOctets, alaIpMcastRouteNextHopProtocol=alaIpMcastRouteNextHopProtocol, alaIpMcastBoundaryAddressPrefixLength=alaIpMcastBoundaryAddressPrefixLength, alaIpMcastRouteRtType=alaIpMcastRouteRtType, alaIpMcastBoundaryStorageType=alaIpMcastBoundaryStorageType, alaIpMcastBoundaryHCDroppedMcastOctets=alaIpMcastBoundaryHCDroppedMcastOctets, alaIpMcastRouteDifferentInIfOctets=alaIpMcastRouteDifferentInIfOctets, alaIpMcastRouteRtAddressType=alaIpMcastRouteRtAddressType, alaIpMcastRouteNextHopSourceAddressType=alaIpMcastRouteNextHopSourceAddressType, alaIpMcastInterfaceHCInMcastPkts=alaIpMcastInterfaceHCInMcastPkts, alaIpMcastRouteSource=alaIpMcastRouteSource, alaIpMcastRouteNextHopSourcePrefixLength=alaIpMcastRouteNextHopSourcePrefixLength, alaIpMcastBoundaryDroppedMcastOctets=alaIpMcastBoundaryDroppedMcastOctets, alaIpMcastMIBCompliances=alaIpMcastMIBCompliances, alaIpMcastRouteOctets=alaIpMcastRouteOctets, alaIpMcastInterfaceIfIndex=alaIpMcastInterfaceIfIndex, alaIpMcastRouteNextHopGroup=alaIpMcastRouteNextHopGroup, PYSNMP_MODULE_ID=alaIpMcastMIB, alaIpMcastRouteTimeStamp=alaIpMcastRouteTimeStamp, alaIpMcastInterfaceOutMcastOctets=alaIpMcastInterfaceOutMcastOctets, alaIpMcastRouteGroup=alaIpMcastRouteGroup, alaIpMcastBoundaryEntry=alaIpMcastBoundaryEntry, alaIpMcastMIBIfPktsGroup=alaIpMcastMIBIfPktsGroup, alaIpMcastRouteNextHopExpiryTime=alaIpMcastRouteNextHopExpiryTime, alaIpMcastRouteUpstreamNeighborType=alaIpMcastRouteUpstreamNeighborType, alaIpMcastRouteRtProtocol=alaIpMcastRouteRtProtocol, alaIpMcastRoutePkts=alaIpMcastRoutePkts, alaIpMcastMIBBoundaryIfGroup=alaIpMcastMIBBoundaryIfGroup, alaIpMcastRouteDifferentInIfPackets=alaIpMcastRouteDifferentInIfPackets, alaIpMcastEnable=alaIpMcastEnable, alaIpMcastMIBHCInterfaceGroup=alaIpMcastMIBHCInterfaceGroup)
