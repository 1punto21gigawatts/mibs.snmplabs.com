#
# PySNMP MIB module STARNE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STARNE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, Integer32, Bits, enterprises, ModuleIdentity, TimeTicks, ObjectIdentity, MibIdentifier, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Integer32", "Bits", "enterprises", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
samsung = MibIdentifier((1, 3, 6, 1, 4, 1, 236))
starNeMib = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5))
starSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1))
starSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2))
starPort = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 3))
starConn = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 4))
starBackbone = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 5))
starTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 6))
starSysGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 1))
starNeId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starNeId.setDescription('Star Node Identifier')
starNeDescr = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeDescr.setStatus('mandatory')
if mibBuilder.loadTexts: starNeDescr.setDescription('Star Node Description')
starNeMipAddress = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeMipAddress.setStatus('mandatory')
if mibBuilder.loadTexts: starNeMipAddress.setDescription('IP address that is used for inter-slot communication')
starNeTimeofDay = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starNeTimeofDay.setStatus('mandatory')
if mibBuilder.loadTexts: starNeTimeofDay.setDescription('Time of day in seconds since the epoch')
starNeOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starNeOperStatus.setDescription('Operational status of this Node')
starNeReset = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notreset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starNeReset.setStatus('mandatory')
if mibBuilder.loadTexts: starNeReset.setDescription('This object can be used to reset this Node')
starNeSlotReset = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starNeSlotReset.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSlotReset.setDescription('This object can be used to reset a slot')
starNeSwDownload = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starNeSwDownload.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwDownload.setDescription('This object can be used to initiate a software download')
starNeHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starNeHwVersion.setDescription('Specifies the hardware version for this Node')
starNeBootSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeBootSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starNeBootSwVersion.setDescription('Specifies the boot software version for this Node')
starNeSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwVersion.setDescription('Specifies the running software version for this Node')
starNeXCoordinate = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starNeXCoordinate.setStatus('mandatory')
if mibBuilder.loadTexts: starNeXCoordinate.setDescription('Specifies the geographic latitudinal coordinate for this Node. Must be initially set by the NMS operator')
starNeYCoordinate = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starNeYCoordinate.setStatus('mandatory')
if mibBuilder.loadTexts: starNeYCoordinate.setDescription('Specifies the geographic longitudinal coordinate for this Node. Must be initially set by the NMS operator')
starNeNodeManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeNodeManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: starNeNodeManagerIP.setDescription('Specifies the IP address for the Node Manager')
starNeMasterManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeMasterManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: starNeMasterManagerIP.setDescription('Specifies the IP address for the Master Manager')
starNeStandbyMasterManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeStandbyMasterManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: starNeStandbyMasterManagerIP.setDescription('Specifies the IP address for the standby Master Manager')
starNeAlive = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onespu", 1), ("twospu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeAlive.setStatus('mandatory')
if mibBuilder.loadTexts: starNeAlive.setDescription('Star Node Alive Value')
starMibRegister = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 18), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starMibRegister.setStatus('mandatory')
if mibBuilder.loadTexts: starMibRegister.setDescription('The set value will be SLOT #. If a slot # is set, his MIB will be registered.')
starNeCurrentAlarmTftp = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 19), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starNeCurrentAlarmTftp.setStatus('mandatory')
if mibBuilder.loadTexts: starNeCurrentAlarmTftp.setDescription('')
starNeCurrentTimeDescr = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starNeCurrentTimeDescr.setStatus('mandatory')
if mibBuilder.loadTexts: starNeCurrentTimeDescr.setDescription('Time & date in string for NMS easy-looking 19980601151000 when set 1998.06.01 15:10:00 when get')
starNeSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSoftwareVersion.setDescription('The Version of STAR Software')
starNeSoftwareType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("star1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeSoftwareType.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSoftwareType.setDescription('This value means the type of STAR Software')
starNeSwUpgradeDownload = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 24), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starNeSwUpgradeDownload.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwUpgradeDownload.setDescription('If set, start download files to be upgraded')
starNeSwUpgradeCancel = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 25), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starNeSwUpgradeCancel.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwUpgradeCancel.setDescription('If set, cancel downloading files to be upgraded')
starNeSwUpgradeActionTrigger = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 26), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starNeSwUpgradeActionTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwUpgradeActionTrigger.setDescription('If set, trigger the renaming of *.NEW to *.Z or *.CFG and reset')
starNeSwUpgradedFiles = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeSwUpgradedFiles.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwUpgradedFiles.setDescription('The value of the downloaded files by this time for upgrading')
starNeSwUpgradeCurrentFile = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeSwUpgradeCurrentFile.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwUpgradeCurrentFile.setDescription('The value of the currently downloading file for upgrading')
starNeSwUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starNeSwUpgradeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starNeSwUpgradeStatus.setDescription('The value of the status for upgrading')
starSysSlotRedundencyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 2))
starActiveSPUSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starActiveSPUSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: starActiveSPUSlotNo.setDescription('Slot # of active SPU')
starStandbySPUSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starStandbySPUSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: starStandbySPUSlotNo.setDescription('Slot # of standby SPU')
starActiveSCUSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starActiveSCUSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: starActiveSCUSlotNo.setDescription('Slot # of active SCU')
starStandbySCUSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starStandbySCUSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: starStandbySCUSlotNo.setDescription('Slot # of standby SSU')
starActiveSSUSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starActiveSSUSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: starActiveSSUSlotNo.setDescription('Slot # of active SSU')
starStandbySSUSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starStandbySSUSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: starStandbySSUSlotNo.setDescription('Slot # of standby SSU')
starConfigManager = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 3))
starCfAllChanged = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notchanged", 1), ("changed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCfAllChanged.setStatus('mandatory')
if mibBuilder.loadTexts: starCfAllChanged.setDescription('This object can be used to inform the Configuration Manager that all configuration files have changed and they should be re-loaded')
starCfFileChanged = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCfFileChanged.setStatus('mandatory')
if mibBuilder.loadTexts: starCfFileChanged.setDescription('This object can be used to inform the Configuration Manager that one particular configuration file has been changed and should be re-loaded Flag + FileId + IP address')
starCfBootFileName = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfBootFileName.setStatus('mandatory')
if mibBuilder.loadTexts: starCfBootFileName.setDescription('Specifies the filename of the Star Node boot image')
starCfShelf = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCfShelf.setStatus('mandatory')
if mibBuilder.loadTexts: starCfShelf.setDescription('Specifies the Star shelf location within the rack. This object must be set initially by the NMS operator')
starCfMaxSlots = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfMaxSlots.setStatus('mandatory')
if mibBuilder.loadTexts: starCfMaxSlots.setDescription('Specifies the maximum number of slots in the Star chassis')
starCfBootSwitch = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flash", 1), ("nodemgr", 2), ("mastermgr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCfBootSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: starCfBootSwitch.setDescription('This object is used to specify the download source at bootup time')
starCfInvalidateFlash = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCfInvalidateFlash.setStatus('mandatory')
if mibBuilder.loadTexts: starCfInvalidateFlash.setDescription('This object is used to inform the Star software at bootup time to boot using the NMS, flash memory does not contain valid information anymore')
starCfActivePSUNo = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfActivePSUNo.setStatus('mandatory')
if mibBuilder.loadTexts: starCfActivePSUNo.setDescription('Number of current active power supply units')
starCfPSUOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("psu1on", 1), ("psu1installed", 2), ("psu2on", 4), ("psu2installed", 8), ("psu3on", 16), ("psu3installed", 32), ("psu4on", 64), ("psu4installed", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfPSUOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starCfPSUOperStatus.setDescription('Operational and installed status of power supply units')
starCfFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("fan1on", 1), ("fan2on", 2), ("fan3on", 4), ("fan4on", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starCfFanStatus.setDescription('Operational status of Fan units')
starCfAluLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 4), ("history", 8), ("aco", 16), ("fanfail", 32), ("buzzer", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfAluLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starCfAluLedStatus.setDescription('Alarm unit LED display status')
starCfAluCharacterDisplay = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfAluCharacterDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: starCfAluCharacterDisplay.setDescription('Alarm unit character display')
starCfAluBrightness = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCfAluBrightness.setStatus('mandatory')
if mibBuilder.loadTexts: starCfAluBrightness.setDescription('Alarm unit LED brightness indicator, 1=0%, 2=25%, 3=50% and 4=70%')
starCfSlotInstalled = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384))).clone(namedValues=NamedValues(("slot1installed", 1), ("slot2installed", 2), ("slot3installed", 4), ("slot4installed", 8), ("slot5installed", 16), ("slot6installed", 32), ("slot7installed", 64), ("slot8installed", 128), ("slot9installed", 256), ("slot10installed", 512), ("slot11installed", 1024), ("slot12installed", 2048), ("slot13installed", 4096), ("slot14installed", 8192), ("slot15installed", 16384)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfSlotInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: starCfSlotInstalled.setDescription('Slot installed status for each board in the Star Node')
starAccountManager = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 4))
starAmCDRFileGetCompleted = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starAmCDRFileGetCompleted.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCDRFileGetCompleted.setDescription('This object can be used to indicate that NMS has gotton AM file')
starAmCDRThresholdCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starAmCDRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCDRThresholdCount.setDescription('This object is the maximum count of AM file')
starAmCDRThresholdTime = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starAmCDRThresholdTime.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCDRThresholdTime.setDescription('This object is the maximum time of AM file')
starAmCDRFileGetRequest = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starAmCDRFileGetRequest.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCDRFileGetRequest.setDescription('CDR request from NMS')
starAmCDRFileCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAmCDRFileCount.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCDRFileCount.setDescription('CDR split file number')
starAmCDRMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starAmCDRMaxCount.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCDRMaxCount.setDescription('File Split count')
starAmCacheTimer = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starAmCacheTimer.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCacheTimer.setDescription('CDR cache timer default is 5 sec')
starAmCacheCounter = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starAmCacheCounter.setStatus('mandatory')
if mibBuilder.loadTexts: starAmCacheCounter.setDescription('CDR cache counter default is 12')
starFaultManager = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 5))
starFmSendTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("cleared", 4), ("all", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starFmSendTrapThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starFmSendTrapThreshold.setDescription('Threshold level of alarms to be sent as traps to the NMS Manager')
starFmLogNotify = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 5, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starFmLogNotify.setStatus('mandatory')
if mibBuilder.loadTexts: starFmLogNotify.setDescription('A notification for log file received from NMS to STAR NE')
starFmLogFileInterval = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starFmLogFileInterval.setStatus('mandatory')
if mibBuilder.loadTexts: starFmLogFileInterval.setDescription('A log file upload interval time to NMS from STAR NE')
starSysSlotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 1, 6), )
if mibBuilder.loadTexts: starSysSlotStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSysSlotStatusTable.setDescription('This table contains status information for all boards in the STAR NE.')
starSysSlotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1), ).setIndexNames((0, "STARNE-MIB", "starSSDIndex"))
if mibBuilder.loadTexts: starSysSlotStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSysSlotStatusEntry.setDescription('')
starSSDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDIndex.setDescription('This object value will be slot #. This object will be used as index of current table.')
starSSDBdEquipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEquip", 1), ("equip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDBdEquipStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDBdEquipStatus.setDescription('Specifies whether a board is equiped or not in current slot.')
starSSDModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDModuleType.setDescription('Specifies type of board in this slot, AIU, PIU, etc')
starSSDInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDInterfaceType.setDescription('Specifies interface of board in this slot, T1, E3, etc')
starSSDOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("install", 2), ("active", 3), ("deactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDOperStatus.setDescription('This object contains operation status information of the board in indexed slot.')
starSSDCpuFailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDCpuFailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDCpuFailStatus.setDescription('contains CPU fail status of the board in the indexed module')
starSSDPwrFailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDPwrFailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDPwrFailStatus.setDescription('contains power supply fail status of the board in the indexed module')
starSSDRealStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSDRealStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSSDRealStatus.setDescription("SSD Real Status information from SPU's ssd structure")
starSiuRednConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 0), ("primary", 1), ("secondary", 2), ("undefined", 3), ("maxRedund", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSiuRednConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSiuRednConfigStatus.setDescription('SIU Redundency config information from IRCM')
starSiuRednOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standalone", 0), ("active", 1), ("standby", 2), ("unknown", 3), ("failedRole", 4), ("maxRedund", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSiuRednOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSiuRednOperStatus.setDescription('SIU Redundency current operational infomation from IRCM')
starSiuRednSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 6, 1, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: starSiuRednSwitchOver.setStatus('mandatory')
if mibBuilder.loadTexts: starSiuRednSwitchOver.setDescription('SIU Redundency Switchover request from NMS')
starFaultControlTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 1, 7), )
if mibBuilder.loadTexts: starFaultControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultControlTable.setDescription('This table includes the objects for controlling the threshold value of a fault.')
starFaultControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1), ).setIndexNames((0, "STARNE-MIB", "starFaultSlotId"), (0, "STARNE-MIB", "starFaultGroupId"), (0, "STARNE-MIB", "starFaultSubId"))
if mibBuilder.loadTexts: starFaultControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultControlEntry.setDescription('')
starFaultSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFaultSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultSlotId.setDescription('The 1st index of current table')
starFaultGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFaultGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultGroupId.setDescription('The 2nd index of current table')
starFaultSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFaultSubId.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultSubId.setDescription('The 3rd index of current table')
starSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: starSeverity.setDescription('')
starFaultThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starFaultThresholdType.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultThresholdType.setDescription('')
starFaultHappenValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starFaultHappenValue.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultHappenValue.setDescription('')
starFaultClearValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starFaultClearValue.setStatus('mandatory')
if mibBuilder.loadTexts: starFaultClearValue.setDescription('')
starTrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 1, 8), )
if mibBuilder.loadTexts: starTrapControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: starTrapControlTable.setDescription('This table includes the trap send condition values.')
starTrapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 1, 8, 1), ).setIndexNames((0, "STARNE-MIB", "starTrapGroupId"), (0, "STARNE-MIB", "starTrapSubId"))
if mibBuilder.loadTexts: starTrapControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starTrapControlEntry.setDescription('')
starTrapGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTrapGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: starTrapGroupId.setDescription('')
starTrapSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTrapSubId.setStatus('mandatory')
if mibBuilder.loadTexts: starTrapSubId.setDescription('')
starTrapSendCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starTrapSendCondition.setStatus('mandatory')
if mibBuilder.loadTexts: starTrapSendCondition.setDescription('')
starMipRouteTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 1, 9), )
if mibBuilder.loadTexts: starMipRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: starMipRouteTable.setDescription('The M-IP route table contains the next hop that an IP packet should route to this node in the network')
starMipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 1, 9, 1), ).setIndexNames((0, "STARNE-MIB", "starMipDestNeId"))
if mibBuilder.loadTexts: starMipRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starMipRouteEntry.setDescription('')
starMipDestNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMipDestNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starMipDestNeId.setDescription(' NeId of Next Hop connected to')
starMipSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMipSourceSlot.setStatus('mandatory')
if mibBuilder.loadTexts: starMipSourceSlot.setDescription('Source Slot number in this NE')
starMipSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMipSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: starMipSourcePort.setDescription('Source port number in this NE ')
starSvcAts = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 10))
starSvcAtsValue = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 1))
starSvcAtsRxReqCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcAtsRxReqCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsRxReqCount.setDescription('This variable is received Request count from SVCM')
starSvcAtsRxValidResponseCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcAtsRxValidResponseCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsRxValidResponseCount.setDescription('This variable is Valid Response count from ATS')
starSvcAtsRxInvalidResponseCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcAtsRxInvalidResponseCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsRxInvalidResponseCount.setDescription('This variable is Invalid Response count from ATS')
starSvcAtsNotCacheCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcAtsNotCacheCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsNotCacheCount.setDescription('This variable is Response count which is not cached')
starSvcAtsCachedReqCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcAtsCachedReqCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsCachedReqCount.setDescription('This variable is Request count found from cache')
starSvcAtsTCPConnTrialCount = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcAtsTCPConnTrialCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsTCPConnTrialCount.setDescription('This variable is count trying to TCP connection')
starSvcAtsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 2), )
if mibBuilder.loadTexts: starSvcAtsStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsStatusTable.setDescription('This table contains information about ATS Servers')
starSvcAtsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starSvcAtsIndex"))
if mibBuilder.loadTexts: starSvcAtsStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsStatusEntry.setDescription('')
starSvcAtsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcAtsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsIndex.setDescription('ATS Index : 1 for ATS1, 2 for ATS2 But The Server can be added !')
starSvcAtsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSvcAtsServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcAtsServerStatus.setDescription('This Variable is status of each ATS Server')
starPerformanceManager = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 1, 11))
starPmReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmReportInterval.setStatus('mandatory')
if mibBuilder.loadTexts: starPmReportInterval.setDescription('This object is to set the time interval of PM statistics report to NMS')
starPmCollectInterval = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 1, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCollectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCollectInterval.setDescription('This object is to set the time interval of PM statistics collect in SPU')
starPmStatsChangeTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 1, 11, 3), )
if mibBuilder.loadTexts: starPmStatsChangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPmStatsChangeTable.setDescription('This tabble is to change the statistics status of PM in SIUs. But the functions of SPU send the change message to each Board.')
starPmStatsChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 1, 11, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starPmIndex"))
if mibBuilder.loadTexts: starPmStatsChangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPmStatsChangeEntry.setDescription('')
starPmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPmIndex.setDescription('PM Status Index')
starPmPortStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 11, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmPortStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: starPmPortStatusChange.setDescription('PM Statistic status change on each port 1: ON, 2: OFF, 3: RESET ')
starPmConnStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 1, 11, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmConnStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: starPmConnStatusChange.setDescription('PM Statistic status change on each connection 1: ON, 2: OFF, 3: RESET ')
starSlotTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 1), )
if mibBuilder.loadTexts: starSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotTable.setDescription('This table contains information on each Star board in a specific Node')
starSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"))
if mibBuilder.loadTexts: starSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotEntry.setDescription('')
starSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIndex.setDescription('Index into this table')
starSlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotModuleType.setDescription('Specifies type of board in this slot, AIU, PIU, etc')
starSlotInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotInterfaceType.setDescription('Specifies interface of board in this slot, T1, E3, etc')
starSlotModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotModuleDescr.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotModuleDescr.setDescription('Character description of the board in this slot')
starSlotMaxPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotMaxPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotMaxPortNo.setDescription('Maximum number of I/O ports in this slot')
starSlotModuleCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotModuleCpuUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotModuleCpuUtilization.setDescription('Module CPU utilization in percentage * 100 units')
starSlotModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotModuleHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotModuleHwVersion.setDescription('Hardware version number of the hardware installed on the board in this slot')
starSlotModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotModuleSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotModuleSwVersion.setDescription('Display version of the software running on the board in this slot')
starSlotLastInstalledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotLastInstalledTime.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotLastInstalledTime.setDescription('Recently installed sysUpTime of module in this slot')
starSlotSSBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotSSBStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotSSBStatus.setDescription('Status of the IPC hardware for this slot')
starSlotCellPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotCellPathStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotCellPathStatus.setDescription('Future entry for status of the Cell Path of this slot')
starSlotLineClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotLineClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotLineClkSource.setDescription('')
starSlotVpiVciRange = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSlotVpiVciRange.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotVpiVciRange.setDescription('')
starSlotSSUInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 4))
starSSULoadInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1), )
if mibBuilder.loadTexts: starSSULoadInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadInfoTbl.setDescription('Load information about the calls going through the ssu.')
starSSULoadInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starSSULoadInfoSlotId"))
if mibBuilder.loadTexts: starSSULoadInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadInfoEntry.setDescription('An entry in the ssuLoadInfoTbl.')
starSSULoadInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadInfoSlotId.setDescription('This object indicates the slot id.')
starSSULoadTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadTotalConnections.setDescription('This object indicates the total total number of connections handled by the SSU.')
starSSULoadNumMcConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadNumMcConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadNumMcConnections.setDescription('This object indicates the number of multicast connections presently in the SSU.')
starSSULoadHighMarkVbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadHighMarkVbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadHighMarkVbrIn.setDescription('This object indicates the highest incoming variable bit rate reached since the time of operation.')
starSSULoadTotalVbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadTotalVbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadTotalVbrIn.setDescription('This object indicates the total input variable bit rate that the card is currently handling.')
starSSULoadLowMarkVbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadLowMarkVbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadLowMarkVbrIn.setDescription('This object indicates the lowest incoming variable bit rate reached since the time of operation.')
starSSULoadHighMarkVbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadHighMarkVbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadHighMarkVbrOut.setDescription('This object indicates the highest outgoing variable bit rate reached since the time of operation.')
starSSULoadTotalVbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadTotalVbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadTotalVbrOut.setDescription('This object indicates the total output variable bit rate that the card is currently handling.')
starSSULoadLowMarkVbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadLowMarkVbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadLowMarkVbrOut.setDescription('This object indicates the lowest outgoing variable bit rate reached since the time of operation.')
starSSULoadHighMarkFbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadHighMarkFbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadHighMarkFbrIn.setDescription('This object indicates the highest incoming fixed bit rate reached since the time of operation.')
starSSULoadTotalFbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadTotalFbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadTotalFbrIn.setDescription('This object indicates the total input fixed bit rate that the card is currently handling.')
starSSULoadLowMarkFbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadLowMarkFbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadLowMarkFbrIn.setDescription('This object indicates the lowest incoming fixed bit rate reached since the time of operation.')
starSSULoadHighMarkFbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadHighMarkFbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadHighMarkFbrOut.setDescription('This object indicates the highest outgoing fixed bit rate reached since the time of operation.')
starSSULoadTotalFbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadTotalFbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadTotalFbrOut.setDescription('This object indicates the total output fixed bit rate that the card is currently handling.')
starSSULoadLowMarkFbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULoadLowMarkFbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULoadLowMarkFbrOut.setDescription('This object indicates the lowest outgoing fixed bit rate reached since the time of operation.')
starSSUSiuLoadInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2), )
if mibBuilder.loadTexts: starSSUSiuLoadInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuLoadInfoTbl.setDescription('Load information about the SSU per SIU basis.')
starSSUSiuLoadInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIdSiuLoadInfo"), (0, "STARNE-MIB", "starSiuIdSiuLoadInfo"))
if mibBuilder.loadTexts: starSSUSiuLoadInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuLoadInfoEntry.setDescription('An entry in the starSSUSiuLoadInfoTbl.')
starSlotIdSiuLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIdSiuLoadInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIdSiuLoadInfo.setDescription('This object indicates the slot id.')
starSiuIdSiuLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSiuIdSiuLoadInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSiuIdSiuLoadInfo.setDescription('This object indicates the ID of the SIU about whom the information is to be retrived.')
starSSUSiuTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuTotalConnections.setDescription('This object indicates the total number of connections that the SSU handles for that SIU.')
starSSUSiuNumMcConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuNumMcConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuNumMcConnections.setDescription('This object indicates the number of multicast connections originating from the corresponding SIU.')
starSSUSiuTotalVbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuTotalVbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuTotalVbrIn.setDescription('This object indicates the total input variable bit rate that the card is currently handling per SIU.')
starSSUSiuTotalVbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuTotalVbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuTotalVbrOut.setDescription('This object indicates the total output variable bit rate that the card is currently handling per SIU.')
starSSUSiuTotalFbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuTotalFbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuTotalFbrIn.setDescription('This object indicates the total input fixed bit rate that the card is currently handling per SIU.')
starSSUSiuTotalFbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuTotalFbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuTotalFbrOut.setDescription('This object indicates the total output fixed bit rate that the card is currently handling per SIU.')
starSSUSiuPortLoadInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3), )
if mibBuilder.loadTexts: starSSUSiuPortLoadInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortLoadInfoTbl.setDescription('Load information about the SSU per port per SIU basis.')
starSSUSiuPortLoadInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIdPortLoadInfo"), (0, "STARNE-MIB", "starSiuIdPortLoadInfo"), (0, "STARNE-MIB", "starSiuPortIdPortLoadInfo"))
if mibBuilder.loadTexts: starSSUSiuPortLoadInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortLoadInfoEntry.setDescription('An entry in the starSSUSiuLoadInfoTbl.')
starSlotIdPortLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIdPortLoadInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIdPortLoadInfo.setDescription('This object indicates the slot id.')
starSiuIdPortLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSiuIdPortLoadInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSiuIdPortLoadInfo.setDescription('This object indicates the ID of the SIU about whom the information is to be retrived.')
starSiuPortIdPortLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSiuPortIdPortLoadInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSiuPortIdPortLoadInfo.setDescription('This object indicates the ID of the port on the SIU about whom the information is to be retrived.')
starSSUSiuPortTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuPortTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortTotalConnections.setDescription('This object indicates the total number of connections that the SSU handles for that port on that SIU.')
starSSUSiuPortNumMcConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuPortNumMcConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortNumMcConnections.setDescription('This object indicates the number of multicast connections that the SSU handles for the port on that SIU.')
starSSUSiuPortTotalVbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuPortTotalVbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortTotalVbrIn.setDescription('This object indicates the total input variable bit rate that the card is currently handling per port per SIU.')
starSSUSiuPortTotalVbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuPortTotalVbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortTotalVbrOut.setDescription('This object indicates the total output variable bit rate that the card is currently handling per port per SIU.')
starSSUSiuPortTotalFbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuPortTotalFbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortTotalFbrIn.setDescription('This object indicates the total input fixed bit rate that the card is currently handling per port per SIU.')
starSSUSiuPortTotalFbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuPortTotalFbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuPortTotalFbrOut.setDescription('This object indicates the total output fixed bit rate that the card is currently handling per port per SIU.')
starSSUConfigInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 4), )
if mibBuilder.loadTexts: starSSUConfigInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUConfigInfoTbl.setDescription('Config Info pertaining to SSU block.')
starSSUConfigInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 4, 1), ).setIndexNames((0, "STARNE-MIB", "starSSUConfigInfoSlotId"))
if mibBuilder.loadTexts: starSSUConfigInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUConfigInfoEntry.setDescription('An entry in the ssuLoadInfoTbl.')
starSSUConfigInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUConfigInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUConfigInfoSlotId.setDescription('This object indicates the slot id.')
starSSUSwitchLinkMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSwitchLinkMaxCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSwitchLinkMaxCapacity.setDescription('This object indicates the maximum capacity for each link between switches in Gbps.')
starSSUSwitchLinkMaxVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSwitchLinkMaxVbr.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSwitchLinkMaxVbr.setDescription('This object indicates the maximum VBR for each link between switches in Gbps.')
starSSUPercentVbrToLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUPercentVbrToLoad.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUPercentVbrToLoad.setDescription('This object indicates the percentage of VBR to deduct to calculate load.')
starSSUSiuInvalidationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUSiuInvalidationTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuInvalidationTimeout.setDescription('This object indicates the time to wait for reconciliation message in minutes.')
starSSUMulticastInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5), )
if mibBuilder.loadTexts: starSSUMulticastInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMulticastInfoTbl.setDescription('Load information about the SSU Multipoint connections.')
starSSUMulticastInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1), ).setIndexNames((0, "STARNE-MIB", "starSSUMulticastSlotId"), (0, "STARNE-MIB", "starSSUMulticastGroup"))
if mibBuilder.loadTexts: starSSUMulticastInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMulticastInfoEntry.setDescription('An entry in the ssuMulticastInfoTbl.')
starSSUMulticastSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMulticastSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMulticastSlotId.setDescription('This object specifies the Slot id of the SSU.')
starSSUMulticastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMulticastGroup.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMulticastGroup.setDescription('This object specifies Multicast Group indicating a particular pt to multi pt conn.')
starSSUNumberMcLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUNumberMcLeaves.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUNumberMcLeaves.setDescription("Indicates the number of pt's to which this connection is estabilished.")
starSSUMcSourceSiu = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMcSourceSiu.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMcSourceSiu.setDescription('This object specifies source Siu for this multicast connection.')
starSSUMcSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMcSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMcSourcePort.setDescription('This object specifies the source port for this multicast connection.')
starSSUMcInputFbr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMcInputFbr.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMcInputFbr.setDescription('This object specifies the Input Fixed Bit rate for this connection.')
starSSUMcInputVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMcInputVbr.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMcInputVbr.setDescription('This object specifies the Input Variable Bit rate for this connection.')
starSSUMcOutputFbr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMcOutputFbr.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMcOutputFbr.setDescription('This object specifies the Output Fixed Bit rate for this connection.')
starSSUMcOutputVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUMcOutputVbr.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUMcOutputVbr.setDescription('This object specifies the Output Variable Bit rate for this connection.')
starSSULinkConfigInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 6), )
if mibBuilder.loadTexts: starSSULinkConfigInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULinkConfigInfoTbl.setDescription('Load information about the SSU Link Configuration.')
starSSULinkConfigInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 6, 1), ).setIndexNames((0, "STARNE-MIB", "starSSULinkConfigSlotId"), (0, "STARNE-MIB", "starSSULinkConfigSwitchLevel"), (0, "STARNE-MIB", "starSSUConfigSwitchLink"))
if mibBuilder.loadTexts: starSSULinkConfigInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULinkConfigInfoEntry.setDescription('An entry in the ssuLinkConfigInfoTbl.')
starSSULinkConfigSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULinkConfigSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULinkConfigSlotId.setDescription('This object specifies the Slot id of the SSU.')
starSSULinkConfigSwitchLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSULinkConfigSwitchLevel.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULinkConfigSwitchLevel.setDescription('This object specifies the Switch level of the SSU switch fabric.')
starSSUConfigSwitchLink = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUConfigSwitchLink.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUConfigSwitchLink.setDescription('This object specifies the switch link(1..8).')
starSSULinkMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSULinkMaxCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULinkMaxCapacity.setDescription('This object specifies max capacity of the switch on that link.')
starSSULinkMaxVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSULinkMaxVbr.setStatus('mandatory')
if mibBuilder.loadTexts: starSSULinkMaxVbr.setDescription('This object specifies the max Variable bit rate of the switch link.')
starSSUPmThresholdInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7), )
if mibBuilder.loadTexts: starSSUPmThresholdInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUPmThresholdInfoTbl.setDescription('Load information about the SSU Performance manager Thresholds .')
starSSUPmThresholdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1), ).setIndexNames((0, "STARNE-MIB", "starSSUPmThresholdSlotId"))
if mibBuilder.loadTexts: starSSUPmThresholdInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUPmThresholdInfoEntry.setDescription('An entry in the ssuPmThresholdInfoTbl.')
starSSUPmThresholdSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSSUPmThresholdSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUPmThresholdSlotId.setDescription('This object specifies the Slot id of the SSU.')
starSSUSwitchMcGroupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUSwitchMcGroupThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSwitchMcGroupThreshold.setDescription('This object specifies threshold for the number of multicast groups.')
starSSUSwitchMcBitsPerMcgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUSwitchMcBitsPerMcgThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSwitchMcBitsPerMcgThreshold.setDescription('The threshold for multicast bits in a single multicast group')
starSSUSwitchTotalMcBitsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUSwitchTotalMcBitsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSwitchTotalMcBitsThreshold.setDescription('This object specifies the threshold for the total num of multicast bits.')
starSSUCrsrReqFailedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUCrsrReqFailedThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUCrsrReqFailedThreshold.setDescription('This object specifies the threshold to flag a CRSR failure.')
starSSUCrsrReqNumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUCrsrReqNumThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUCrsrReqNumThreshold.setDescription('This object specifies the threshold for CRSR requests beyon which FM is notified.')
starSSUCrsrReqFailedMcgExceededThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUCrsrReqFailedMcgExceededThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUCrsrReqFailedMcgExceededThreshold.setDescription('This object specifies the threshold at which the Multicast group inputs are unavailable and the CRSR has failed to perform its duty.')
starSSUCrsrReconcileFailThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUCrsrReconcileFailThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUCrsrReconcileFailThreshold.setDescription('This object specifies the threshold beyond which the CRSR reconcile fail is raised.')
starSSUSiuLoadCapacityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 4, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSSUSiuLoadCapacityThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSSUSiuLoadCapacityThreshold.setDescription('This object specifies the threshold till which the SSU accepts the load.')
starSysClockInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 5))
starSysClockTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1), )
if mibBuilder.loadTexts: starSysClockTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSysClockTbl.setDescription('the table maintains the clock source of the SCU module indexed by Slot #.')
starSysClockInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starScuInfoSlotId"))
if mibBuilder.loadTexts: starSysClockInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSysClockInfoEntry.setDescription('')
starScuInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starScuInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starScuInfoSlotId.setDescription('This object indicates the slot id.')
starClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("bits", 1), ("extline", 2), ("holdover", 3), ("freerun", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: starClkSource.setDescription('This object indicates the source of the clock.')
starClkPrevSource = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("bits", 1), ("extline", 2), ("holdover", 3), ("freerun", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkPrevSource.setStatus('mandatory')
if mibBuilder.loadTexts: starClkPrevSource.setDescription('This object indicates the previous source of the clock.')
starClkSourceLine = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starClkSourceLine.setStatus('mandatory')
if mibBuilder.loadTexts: starClkSourceLine.setDescription('This object indicates the SIU number 1..9 of the current external clock source.')
starClkPrevSourceLine = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkPrevSourceLine.setStatus('mandatory')
if mibBuilder.loadTexts: starClkPrevSourceLine.setDescription('This object indicates the SIU number 1..9 of the previous external clock source.')
starClkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starClkStatus.setDescription('This object indicates the status of the current clock source. The clock source number must be 1-9: SIU#1-#9 for line clock source, or 10: for BITS')
starClkPLLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fast", 1), ("mid", 2), ("normal", 3), ("holdover", 4), ("freerun", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkPLLMode.setStatus('mandatory')
if mibBuilder.loadTexts: starClkPLLMode.setDescription('This object indicates the port number of the current clock source.')
starClkMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starClkMasterStatus.setDescription('This object indicates the master/slave status of the current clock source.')
starClkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkPriority.setStatus('mandatory')
if mibBuilder.loadTexts: starClkPriority.setDescription('This object indicates the external line priority of the current clock source')
starClkCurStatusLineTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2), )
if mibBuilder.loadTexts: starClkCurStatusLineTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusLineTbl.setDescription('the table maintains the clock source of the SCU module indexed by Slot #.')
starClkCurStatusLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starClkStatusSlotId"))
if mibBuilder.loadTexts: starClkCurStatusLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusLineEntry.setDescription('')
starClkStatusSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkStatusSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starClkStatusSlotId.setDescription('This object indicates the slot id.')
starClkCurStatusSiu1 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu1.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu1.setDescription('It indicates the current status of clock line on slot 5')
starClkCurStatusSiu2 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu2.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu2.setDescription('It indicates the current status of clock line')
starClkCurStatusSiu3 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu3.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu3.setDescription('It indicates the current status of clock line')
starClkCurStatusSiu4 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu4.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu4.setDescription('It indicates the current status of clock line')
starClkCurStatusSiu5 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu5.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu5.setDescription('It indicates the current status of clock line')
starClkCurStatusSiu6 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu6.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu6.setDescription('It indicates the current status of clock line')
starClkCurStatusSiu7 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu7.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu7.setDescription('It indicates the current status of clock line')
starClkCurStatusSiu8 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu8.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu8.setDescription('It indicates the current status of clock line slot14')
starClkCurStatusSiu9 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("notready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkCurStatusSiu9.setStatus('mandatory')
if mibBuilder.loadTexts: starClkCurStatusSiu9.setDescription('It indicates the current status of clock line on slot 15')
starClkDistribStatusTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3), )
if mibBuilder.loadTexts: starClkDistribStatusTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusTbl.setDescription('the table maintains the clock source of the SCU module indexed by Slot #.')
starClkDistribStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starClkDistribSlotId"))
if mibBuilder.loadTexts: starClkDistribStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusEntry.setDescription('')
starClkDistribSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribSlotId.setDescription('This object indicates the slot id.')
starClkDistribStatusSiu1 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu1.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu1.setDescription('It indicates the distribute status of clock on slot 5')
starClkDistribStatusSiu2 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu2.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu2.setDescription('It indicates the distribute status of clock on slot 6')
starClkDistribStatusSiu3 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu3.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu3.setDescription('It indicates the distribute status of clock on slot 7')
starClkDistribStatusSiu4 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu4.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu4.setDescription('It indicates the distribute status of clock on slot 8')
starClkDistribStatusSiu5 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu5.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu5.setDescription('It indicates the distribute status of clock on slot 11')
starClkDistribStatusSiu6 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu6.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu6.setDescription('It indicates the distribute status of clock on slot12')
starClkDistribStatusSiu7 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu7.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu7.setDescription('It indicates the distribute status of clock on slot13')
starClkDistribStatusSiu8 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu8.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu8.setDescription('It indicates the distribute status of clock on slot14')
starClkDistribStatusSiu9 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightKHZ", 1), ("nintennMHZ", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starClkDistribStatusSiu9.setStatus('mandatory')
if mibBuilder.loadTexts: starClkDistribStatusSiu9.setDescription('It indicates the distribute status of clock on slot 15')
starSwitch88Info = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 6))
starSwitchInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1), )
if mibBuilder.loadTexts: starSwitchInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchInfoTbl.setDescription('The table gives register values of the chips found on the SSU board.')
starSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starSwitchInfoSlotId"), (0, "STARNE-MIB", "starSwitchFabricRow"), (0, "STARNE-MIB", "starSwitchFabricColumn"))
if mibBuilder.loadTexts: starSwitchInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchInfoEntry.setDescription('An entry in switchInfoTbl.')
starSwitchInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchInfoSlotId.setDescription('This object indicates the slot id.')
starSwitchFabricRow = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchFabricRow.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchFabricRow.setDescription('This object indicates the switch chip in the corresponding row.')
starSwitchFabricColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchFabricColumn.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchFabricColumn.setDescription('This object indicates the switch chip in the corresponding column.')
starSwitchCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("init", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchCurrentState.setDescription('This object describes the operational state of switch chip.')
starSwitchChipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchChipVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchChipVersion.setDescription('This object indicates the version of the switch chip.')
starSwitchFabricLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchFabricLevel.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchFabricLevel.setDescription('The stage in which the particular cell is placed in the switch fabric. Value is between 1 and 9.')
starSwitchBckPressureDly = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noDelay", 1), ("clk2Delay", 2), ("clk4Delay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchBckPressureDly.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchBckPressureDly.setDescription('This object indicates that back pressure delay that is to be introduced.')
starSwitchAggrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchAggrIp.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchAggrIp.setDescription('This object indicates whether inputs are grouped into 4(620 Mbps) or separately(155 Mbps).')
starSwitchAggrOp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchAggrOp.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchAggrOp.setDescription('This object indicates whether outputs are grouped into 4(620 Mbps) or separately(155 Mbps).')
starSwitchStrictPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchStrictPriority.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchStrictPriority.setDescription('This var indicates whether back-pressure is inserted on high priority traffic when count of empty cells is 0/8 ')
starSwitchInMarkedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchInMarkedCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchInMarkedCellCnt.setDescription('This object indicates the number of cells modulo 16 on an input which had Tag(9,1) set to 1.')
starSwitchOutMarkedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchOutMarkedCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchOutMarkedCellCnt.setDescription('This object indicates the number of cells modulo 16 on an output which had Tag(9,1) set to 1.')
starSwitchRatioAOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchRatioAOrder1.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchRatioAOrder1.setDescription('This object indicates the number of times queue A is serviced first.')
starSwitchRatioAOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchRatioAOrder2.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchRatioAOrder2.setDescription('This object indicates the number of times queue A is serviced second.')
starSwitchRatioBOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchRatioBOrder1.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchRatioBOrder1.setDescription('This object indicates the number of times queue B is serviced first.')
starSwitchRatioBOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchRatioBOrder2.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchRatioBOrder2.setDescription('This object indicates the number of times queue B is serviced second.')
starSwitchMulticastInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 2), )
if mibBuilder.loadTexts: starSwitchMulticastInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchMulticastInfoTbl.setDescription('Multicast Information about the Switch Chip on the ssu board.')
starSwitchMulticastInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIdSwitchMcInfo"), (0, "STARNE-MIB", "starMcSwitchFabricRow"), (0, "STARNE-MIB", "starMcSwitchFabricColumn"), (0, "STARNE-MIB", "starSwitchMulticastNo"))
if mibBuilder.loadTexts: starSwitchMulticastInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchMulticastInfoEntry.setDescription('An entry in Switch multicast info table.')
starSlotIdSwitchMcInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIdSwitchMcInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIdSwitchMcInfo.setDescription('This object indicates the slot id.')
starMcSwitchFabricRow = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMcSwitchFabricRow.setStatus('mandatory')
if mibBuilder.loadTexts: starMcSwitchFabricRow.setDescription('This object indicates the switch chip in the corresponding row.')
starMcSwitchFabricColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMcSwitchFabricColumn.setStatus('mandatory')
if mibBuilder.loadTexts: starMcSwitchFabricColumn.setDescription('This object indicates the switch chip in the corresponding column.')
starSwitchMulticastNo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchMulticastNo.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchMulticastNo.setDescription('This object indicates the multicast number for which the value is being requested.')
starSwitchMulticastPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchMulticastPorts.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchMulticastPorts.setDescription('This object indicates links on the switch on which the multicast cells are replicated.')
starSwitchLinkLoadTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3), )
if mibBuilder.loadTexts: starSwitchLinkLoadTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchLinkLoadTbl.setDescription('Information about the Load on the links between the switches in the switch fabric.')
starSwitchLinkLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIdSwitchLoadInfo"), (0, "STARNE-MIB", "starLinkLoadSwitchFabricRow"), (0, "STARNE-MIB", "starLinkLoadSwitchFabricColumn"), (0, "STARNE-MIB", "starSwitchLinkId"))
if mibBuilder.loadTexts: starSwitchLinkLoadEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchLinkLoadEntry.setDescription('An entry in Switch channel load table.')
starSlotIdSwitchLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIdSwitchLoadInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIdSwitchLoadInfo.setDescription('This object indicates the slot id.')
starLinkLoadSwitchFabricRow = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLinkLoadSwitchFabricRow.setStatus('mandatory')
if mibBuilder.loadTexts: starLinkLoadSwitchFabricRow.setDescription('This object indicates the switch chip in the corresponding row.')
starLinkLoadSwitchFabricColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLinkLoadSwitchFabricColumn.setStatus('mandatory')
if mibBuilder.loadTexts: starLinkLoadSwitchFabricColumn.setDescription('This object indicates the switch chip in the corresponding column.')
starSwitchLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchLinkId.setDescription('This object indicates the channel number whose load information is needed.')
starSwitchLinkVbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchLinkVbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchLinkVbrIn.setDescription('This object indicates the total input variable bit rate that the channel handles.')
starSwitchLinkVbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchLinkVbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchLinkVbrOut.setDescription('This object indicates the total output variable bit rate that the channel handles.')
starSwitchLinkFbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchLinkFbrIn.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchLinkFbrIn.setDescription('This object indicates the total input fixed bit rate that the channel handles.')
starSwitchLinkFbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchLinkFbrOut.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchLinkFbrOut.setDescription('This object indicates the total output fixed bit rate that the channel handles.')
starCellMuxInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 7), )
if mibBuilder.loadTexts: starCellMuxInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxInfoTbl.setDescription('Gives information about the CellMux(Wac185) chip')
starCellMuxInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIdCellMuxInfo"), (0, "STARNE-MIB", "starCellMuxChipId"))
if mibBuilder.loadTexts: starCellMuxInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxInfoEntry.setDescription('An entry in the CellMuxInfoTbl.')
starSlotIdCellMuxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIdCellMuxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIdCellMuxInfo.setDescription('This object indicates the slot id.')
starCellMuxChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxChipId.setDescription('This object indicates the cell mux chip whose info is needed.')
starCellMuxCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("init", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxCurrentState.setDescription('This object describes the operational state of multiplexer.')
starCellMuxChipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxChipVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxChipVersion.setDescription('This object describes the version of the multiplexer chip.')
starCellMuxWatchDogTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCellMuxWatchDogTimer.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxWatchDogTimer.setDescription('This object describes the time to wait before the o/p port is checked again for not accepting calls.')
starCellMuxUsedHighBufCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxUsedHighBufCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxUsedHighBufCnt.setDescription('This object contains the number of high priority buffers allocated.')
starCellMuxUsedMedBufCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxUsedMedBufCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxUsedMedBufCnt.setDescription('This object contains the number of medium priority buffers allocated.')
starCellMuxUsedLowBufCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxUsedLowBufCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxUsedLowBufCnt.setDescription('This object contains the number of low priority buffers allocated.')
starCellMuxFreeHighBufCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxFreeHighBufCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxFreeHighBufCnt.setDescription('This object contains the number of high priority buffers which are free in the mux sram.')
starCellMuxFreeMedBufCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxFreeMedBufCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxFreeMedBufCnt.setDescription('This object contains the number of medium priority buffers which are free in the mux sram.')
starCellMuxFreeLowBufCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCellMuxFreeLowBufCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starCellMuxFreeLowBufCnt.setDescription('This object contains the number of low priority buffers which are free in the mux sram.')
starSlotRoute88Table = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 8), )
if mibBuilder.loadTexts: starSlotRoute88Table.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88Table.setDescription('')
starSlotRoute88Entry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starSlotRoute88Index"))
if mibBuilder.loadTexts: starSlotRoute88Entry.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88Entry.setDescription('')
starSlotRoute88Index = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88Index.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88Index.setDescription('')
starSlotRoute88Revision = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88Revision.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88Revision.setDescription('')
starSlotRoute88TxParityFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88TxParityFailCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88TxParityFailCount.setDescription('')
starSlotRoute88BPIgnoredCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88BPIgnoredCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88BPIgnoredCount.setDescription('')
starSlotRoute88BPLiveFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88BPLiveFailCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88BPLiveFailCount.setDescription('')
starSlotRoute88WDFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88WDFailCount.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88WDFailCount.setDescription('')
starSlotRoute88TxMarkedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88TxMarkedCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88TxMarkedCells.setDescription('')
starSlotRoute88RxMarkedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotRoute88RxMarkedCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRoute88RxMarkedCells.setDescription('')
starSlotAal1SarTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 9), )
if mibBuilder.loadTexts: starSlotAal1SarTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotAal1SarTable.setDescription('Gives information about the aal1 sar igt WAC-021 chip')
starAal1SarInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1), ).setIndexNames((0, "STARNE-MIB", "starAal1SarSlotId"), (0, "STARNE-MIB", "starAal1SarPortId"), (0, "STARNE-MIB", "starAal1SarChannelId"))
if mibBuilder.loadTexts: starAal1SarInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarInfoEntry.setDescription('The Aal1 related parameter table.')
starAal1SarSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarSlotId.setDescription('This object indicates the slot id.')
starAal1SarPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarPortId.setDescription('This object indicates the port number whose info is needed.')
starAal1SarChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarChannelId.setDescription('This object indicates the PCM channel number whose info is needed.')
starAal1SarInvalidSnCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarInvalidSnCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarInvalidSnCnt.setDescription('This specifies the number of Invalid sequence numbered cells .')
starAal1SarIncorrectSnpCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarIncorrectSnpCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarIncorrectSnpCnt.setDescription('This specifies the number of cells for which SNP are uncorrected .')
starAal1SarRxOAMCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarRxOAMCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarRxOAMCellCnt.setDescription(' This object has a count of the number of OAM Cells Handled.')
starAal1SarRxCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarRxCellLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarRxCellLossStatus.setDescription('This specifies the stataus for Rx cell loss .')
starAal1SarLostCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarLostCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarLostCellCnt.setDescription('This specifies the number of cells with an invalid CRC .')
starAal1SarTxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarTxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarTxCellCnt.setDescription(' This object has a count of the number of Cells transmitted.')
starAal1SarRxCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarRxCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarRxCellCnt.setDescription('This object has a count of the number of Cells received.')
starAal1SarRxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarRxUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarRxUnderrun.setDescription('This object has a count of the number of the receiver underran.')
starAal1SarRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarRxOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarRxOverrun.setDescription('This object has a count of the number of times the receiver overran.')
starAal1SarPtrMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal1SarPtrMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: starAal1SarPtrMismatch.setDescription('This object has a count of the number of Aal1 pointer Mismatches .')
starSlotLsgnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 10), )
if mibBuilder.loadTexts: starSlotLsgnStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotLsgnStatusTable.setDescription('')
starLsgnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 10, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starLsgnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starLsgnEntry.setDescription('')
starLsgnDownCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLsgnDownCt.setStatus('mandatory')
if mibBuilder.loadTexts: starLsgnDownCt.setDescription('Number of times a Link Down Message was sent for the link')
starLsgnUpCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLsgnUpCt.setStatus('mandatory')
if mibBuilder.loadTexts: starLsgnUpCt.setDescription('Number of times a Link Up Message was sent for the link')
starLsgnTrafficLoadChangedCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLsgnTrafficLoadChangedCt.setStatus('mandatory')
if mibBuilder.loadTexts: starLsgnTrafficLoadChangedCt.setDescription("Number of times the link's traffic load changed")
starLsgnPeriodMsgCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLsgnPeriodMsgCt.setStatus('mandatory')
if mibBuilder.loadTexts: starLsgnPeriodMsgCt.setDescription('Number of times a Periodic Link Message was sent')
starLsgnLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLsgnLinkOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starLsgnLinkOperStatus.setDescription('Current status of the link')
starSlotRlspStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 11), )
if mibBuilder.loadTexts: starSlotRlspStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotRlspStatusTable.setDescription('')
starRlspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 11, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"))
if mibBuilder.loadTexts: starRlspEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starRlspEntry.setDescription('')
starRlspForwardedCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRlspForwardedCt.setStatus('mandatory')
if mibBuilder.loadTexts: starRlspForwardedCt.setDescription("Number of received LSU's (Link Status Updates) that are forwarded")
starRlspDiscardedCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRlspDiscardedCt.setStatus('mandatory')
if mibBuilder.loadTexts: starRlspDiscardedCt.setDescription("Number of received LSU's (Link Status Updates) that are discarded")
starRlspInvalidCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRlspInvalidCt.setStatus('mandatory')
if mibBuilder.loadTexts: starRlspInvalidCt.setDescription('Number of messages received that indicate that a route specified by the routing software is incorrect')
starRlspMismatchCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRlspMismatchCt.setStatus('mandatory')
if mibBuilder.loadTexts: starRlspMismatchCt.setDescription('Number of received LSU (Link Status Update) messages that did not match locally stored Link State Table Entries')
starRlspNoRoutesCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRlspNoRoutesCt.setStatus('mandatory')
if mibBuilder.loadTexts: starRlspNoRoutesCt.setDescription('Number of route requests or route validates for which no route with a valid cost was found')
starSlotBbcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 12), )
if mibBuilder.loadTexts: starSlotBbcpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotBbcpStatusTable.setDescription('')
starBbcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starBbcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpEntry.setDescription('')
starBbcpPtoPInConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpPtoPInConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpPtoPInConnections.setDescription('Number of active incoming point to point connections')
starBbcpPtoPOutConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpPtoPOutConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpPtoPOutConnections.setDescription('Number of active outgoing point to point connections')
starBbcpPtoMInConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpPtoMInConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpPtoMInConnections.setDescription('Number of active incoming point to multi-point connections')
starBbcpPtoMOutConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpPtoMOutConnections.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpPtoMOutConnections.setDescription('Number of active outgoing point to multi-point connections')
starBbcpInConnectionLinkFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionLinkFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionLinkFailCt.setDescription('Number of incoming connection requests that were rejected because a backbone link on the module was down')
starBbcpInConnectionVcciFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionVcciFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionVcciFailCt.setDescription('Number of incoming connection requests that were rejected because Vpi, Vci in the connection is invalid')
starBbcpInConnectionNoSwitchCapacityCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionNoSwitchCapacityCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionNoSwitchCapacityCt.setDescription('Number of incoming connection requests that were rejected because the switch did not have the capacity to support the call')
starBbcpInConnectionNoBBCapacityCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionNoBBCapacityCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionNoBBCapacityCt.setDescription('Number of incoming connection requests that were rejected because the backbone link did not have the capacity to support the call')
starBbcpInConnectionTimeoutCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionTimeoutCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionTimeoutCt.setDescription('Number of incoming connection requests that were rejected because the BBCP did not receive a connection proceeding message within the specified time')
starBbcpInConnectionChipErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionChipErrorCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionChipErrorCt.setDescription('Number of incoming connection requests that were rejected because a chip could not be programmed')
starBbcpInConnectionPreemptFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionPreemptFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionPreemptFailCt.setDescription('Number of incoming connection requests that were rejected because the BBCP did not preempt another connection')
starBbcpInConnectionModuleFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionModuleFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionModuleFailCt.setDescription('Number of incoming connection requests that were rejected because the adjacent module has failed')
starBbcpInConnectionVcciCollisionFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionVcciCollisionFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionVcciCollisionFailCt.setDescription('Number of incoming connection requests that were rejected because the Vpi/Vci in the connection request has collided with the Vpi/Vci in another connection')
starBbcpOutConnectionLinkFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionLinkFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionLinkFailCt.setDescription('Number of outgoing connection requests that were rejected because a backbone link on the module was down')
starBbcpOutConnectionVcciInvalidCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionVcciInvalidCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionVcciInvalidCt.setDescription('Number of outgoing connection requests that were rejected because the Vpi, Vci in the connection is invalid')
starBbcpOutConnectionNoSwitchCapacityCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionNoSwitchCapacityCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionNoSwitchCapacityCt.setDescription('Number of outgoing connection requests that were rejected because the switch did not have the capacity to support the call')
starBbcpOutConnectionNoBBCapacityCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionNoBBCapacityCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionNoBBCapacityCt.setDescription('Number of outgoing connection requests that were rejected because the backbone link did not have the capacity to support the call')
starBbcpOutConnectionTimeoutCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionTimeoutCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionTimeoutCt.setDescription('Number of outgoing connection requests that were rejected because the BBCP did not receive a connection proceeding message within the specified time')
starBbcpOutConnectionChipErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionChipErrorCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionChipErrorCt.setDescription('Number of outgoing connection requests that were rejected because a chip could not be programmed')
starBbcpOutConnectionPreemptFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionPreemptFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionPreemptFailCt.setDescription('Number of outgoing connection requests that were rejected because the BBCP did not preempt another connection')
starBbcpOutConnectionModuleFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionModuleFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionModuleFailCt.setDescription('Number of outgoing connection requests that were rejected because the adjacent module has failed')
starBbcpOutConnectionVcciCollisionFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionVcciCollisionFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionVcciCollisionFailCt.setDescription('Number of outgoing connection requests that were rejected because the Vpi/Vci in the connection request has collided with the Vpi/Vci in another connection')
starBbcpInConnectionClearLinkFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionClearLinkFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionClearLinkFailCt.setDescription('Number of incoming connections that were cleared due to failure of a backbone link on the module')
starBbcpInConnectionClearPreemptionCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionClearPreemptionCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionClearPreemptionCt.setDescription('Number of incoming connections that were cleared due to preemption at the module')
starBbcpInConnectionClearModuleFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionClearModuleFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionClearModuleFailCt.setDescription('Number of incoming connections that were cleared due to failure of an adjacent module')
starBbcpInConnectionClearNormalCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInConnectionClearNormalCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInConnectionClearNormalCt.setDescription('Number of incoming connections that were cleared due to a normal clear request')
starBbcpOutConnectionClearLinkFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionClearLinkFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionClearLinkFailCt.setDescription('Number of outgoing connections that were cleared due to failure of a backbone link on the module')
starBbcpOutConnectionClearPreemptionCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionClearPreemptionCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionClearPreemptionCt.setDescription('Number of outgoing connections that were cleared due to preemption at the module')
starBbcpOutConnectionClearModuleFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionClearModuleFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionClearModuleFailCt.setDescription('Number of outgoing connections that were cleared due to failure of an adjacent module')
starBbcpOutConnectionClearNormalCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpOutConnectionClearNormalCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpOutConnectionClearNormalCt.setDescription('Number of outgoing connections that were cleared due to a noraml clear request')
starBbcpInvalidMsgCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInvalidMsgCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInvalidMsgCt.setDescription('Number of invalid messages received from a peer BBCP')
starBbcpTimerExpiredCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpTimerExpiredCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpTimerExpiredCt.setDescription('Number of timer expired at signalling')
starBbcpInvalidEventCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpInvalidEventCt.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpInvalidEventCt.setDescription('Number of times an invalid event occurred in a state')
starBbcpAvailableFixedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpAvailableFixedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpAvailableFixedCapacity.setDescription('Fixed capacity available on a link')
starBbcpAvailableVariableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 12, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpAvailableVariableCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpAvailableVariableCapacity.setDescription('Variable capacity available on a link')
starSlotBbcpXConnectTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 13), )
if mibBuilder.loadTexts: starSlotBbcpXConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotBbcpXConnectTable.setDescription('')
starBbcpXConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1), ).setIndexNames((0, "STARNE-MIB", "starBbcpSlotIndex"), (0, "STARNE-MIB", "starBbcpPortIndex"), (0, "STARNE-MIB", "starBbcpGCIDNeId"), (0, "STARNE-MIB", "starBbcpGCIDSlotId"), (0, "STARNE-MIB", "starBbcpGCIDPortId"), (0, "STARNE-MIB", "starBbcpGCIDIfType"), (0, "STARNE-MIB", "starBbcpGCIDConnId"), (0, "STARNE-MIB", "starBbcpGCIDLeafId"))
if mibBuilder.loadTexts: starBbcpXConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpXConnectEntry.setDescription('')
starBbcpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpSlotIndex.setDescription('')
starBbcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpPortIndex.setDescription('')
starBbcpGCIDNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpGCIDNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpGCIDNeId.setDescription('')
starBbcpGCIDSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpGCIDSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpGCIDSlotId.setDescription('')
starBbcpGCIDPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpGCIDPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpGCIDPortId.setDescription('')
starBbcpGCIDIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpGCIDIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpGCIDIfType.setDescription('')
starBbcpGCIDConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpGCIDConnId.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpGCIDConnId.setDescription('')
starBbcpGCIDLeafId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpGCIDLeafId.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpGCIDLeafId.setDescription('')
starBbcpXConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpXConnOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpXConnOperStatus.setDescription('Operational status of specified cross connection in NE')
starBbcpXConnAdjacentSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpXConnAdjacentSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpXConnAdjacentSlotId.setDescription('Adjacent SlotId of specified cross connection')
starBbcpXConnAdjacentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpXConnAdjacentPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpXConnAdjacentPortId.setDescription('Adjacent PortId of specified cross connection')
starBbcpXConnAdjacentVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpXConnAdjacentVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpXConnAdjacentVpi.setDescription('Adjacent Vpi of specified cross connection')
starBbcpXConnAdjacentVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBbcpXConnAdjacentVci.setStatus('mandatory')
if mibBuilder.loadTexts: starBbcpXConnAdjacentVci.setDescription('Adjacent Vci of specified cross connection')
starPvcmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 14), )
if mibBuilder.loadTexts: starPvcmStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmStatusTable.setDescription('')
starPvcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPvcmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmEntry.setDescription('')
starPvcmPtoPOrgConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmPtoPOrgConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmPtoPOrgConnectionNumber.setDescription('Number of point to point connections that originate on this port')
starPvcmPtoPTermConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmPtoPTermConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmPtoPTermConnectionNumber.setDescription('Number of point to point connections that terminate on this port')
starPvcmPtoMOrgConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmPtoMOrgConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmPtoMOrgConnectionNumber.setDescription('Number of point to multi-point connections that originate on this port')
starPvcmPtoMTermConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmPtoMTermConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmPtoMTermConnectionNumber.setDescription('Number of point to multi-point connections that terminate on this port')
starPvcmOutOfServiceConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmOutOfServiceConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmOutOfServiceConnectionNumber.setDescription('Number of connections that have been set out of service by the NMS')
starPvcmOptimizedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmOptimizedConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmOptimizedConnectionNumber.setDescription('Number of connections that have had their route optimized')
starPvcmRouteFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmRouteFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmRouteFailCt.setDescription('Number of connections that failed because a route could not be found')
starPvcmConnectReqFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmConnectReqFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmConnectReqFailCt.setDescription('Number of connections that failed during setup')
starPvcmOrgConnectedFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmOrgConnectedFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmOrgConnectedFailCt.setDescription('Number of connections that failed after being completely setup')
starPvcmTermConnectedFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmTermConnectedFailCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmTermConnectedFailCt.setDescription('Number of connections that failed after being setup on the terminating module')
starPvcmActiveConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmActiveConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmActiveConnectionNumber.setDescription('Number of connections currently being processed')
starPvcmDeletedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmDeletedConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmDeletedConnectionNumber.setDescription('Number of connections currently being queued for deletion')
starPvcmAddedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmAddedConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmAddedConnectionNumber.setDescription('Number of connections currently being queued for addition')
starPvcmFailedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmFailedConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmFailedConnectionNumber.setDescription('Number of connections that have failed, currently queued for processing')
starPvcmChangedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmChangedConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmChangedConnectionNumber.setDescription('Number of connections that have changed, currently queued for processing')
starPvcmOrgHoldingConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmOrgHoldingConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmOrgHoldingConnectionNumber.setDescription('Number of connections that have failed repeatedly, now in the holding queue')
starPvcmTermHoldingConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmTermHoldingConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmTermHoldingConnectionNumber.setDescription('Number of terminating connections that are being held, awaiting re-connection, or deletion if re-connection is not forthcoming')
starPvcmInvalidMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmInvalidMsgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmInvalidMsgNumber.setDescription('Number of invalid messages received by PVCM.')
starPvcmTimerExpiredCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 14, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmTimerExpiredCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmTimerExpiredCnt.setDescription('Number of times the timer expired .')
starPvcConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 15), )
if mibBuilder.loadTexts: starPvcConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionTable.setDescription('')
starPvcConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1), ).setIndexNames((0, "STARNE-MIB", "starPvcSrcSlotId"), (0, "STARNE-MIB", "starPvcSrcPortId"), (0, "STARNE-MIB", "starPvcSrcIfType"), (0, "STARNE-MIB", "starPvcSrcVpi"), (0, "STARNE-MIB", "starPvcSrcVci"), (0, "STARNE-MIB", "starPvcSrcLeaf"), (0, "STARNE-MIB", "starPvcSrcDlci"), (0, "STARNE-MIB", "starPvcSrcTimeslot"))
if mibBuilder.loadTexts: starPvcConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionEntry.setDescription('')
starPvcSrcSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcSlotId.setDescription('')
starPvcSrcPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcPortId.setDescription('')
starPvcSrcIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcIfType.setDescription('')
starPvcSrcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcVpi.setDescription('')
starPvcSrcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcVci.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcVci.setDescription('')
starPvcSrcLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcLeaf.setDescription('')
starPvcSrcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcDlci.setDescription('')
starPvcSrcTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcSrcTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcSrcTimeslot.setDescription('')
starPvcDestNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestNodeId.setDescription('')
starPvcDestSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestSlotId.setDescription('')
starPvcDestPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestPortId.setDescription('')
starPvcDestIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestIfType.setDescription('')
starPvcDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestVpi.setDescription('')
starPvcDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestVci.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestVci.setDescription('')
starPvcDestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestDlci.setDescription('')
starPvcDestTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcDestTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcDestTimeslot.setDescription('')
starPvcConnectionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcConnectionOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionOperStatus.setDescription('The current state of the connection')
starPvcConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionType.setDescription('')
starPvcConnectionCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcConnectionCOS.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionCOS.setDescription('')
starPvcConnectionStatusLastChangedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcConnectionStatusLastChangedDate.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionStatusLastChangedDate.setDescription('The time of day the connection last changed')
starPvcConnectionStatusLastChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcConnectionStatusLastChangedTime.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionStatusLastChangedTime.setDescription('The time of day the connection last changed')
starPvcConnectionCauseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 15, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcConnectionCauseValue.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcConnectionCauseValue.setDescription('')
starCesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 23))
starDS1E1CESConfTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1), )
if mibBuilder.loadTexts: starDS1E1CESConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESConfTable.setDescription('The CES configuration table. This includes mapping channels from ATM Port to CBR interfaces. There is one AtmfDS1E1CESConfEntry per CES Entity')
starDS1E1CESConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starDS1E1CESSlotId"), (0, "STARNE-MIB", "starDS1E1CESPortId"), (0, "STARNE-MIB", "starDS1E1CESChannelId"))
if mibBuilder.loadTexts: starDS1E1CESConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESConfEntry.setDescription('An entry in the CES table. For each entry there is a corresponding entry in the stack table')
starDS1E1CESSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESSlotId.setDescription('This object indicates the slot id.')
starDS1E1CESPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESPortId.setDescription('This object indicates the port number whose info is needed.')
starDS1E1CESChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESChannelId.setDescription('This object indicates the channel number whose info is needed.')
starDS1E1CESMapATMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESMapATMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESMapATMIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM Port interface mapped through this CES to a CBR interface.")
starDS1E1CESMapVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESMapVPI.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESMapVPI.setDescription('The value of this object is equal to the VPI used for the emulated circuit represented by this entry in the ifTable. If there is no connection, this object is meaningless and will have the value zero.')
starDS1E1CESMapVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESMapVCI.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESMapVCI.setDescription('The value of this object is equal to the VCI used for the emulated circuit represented by this entry in the ifTable. If there is no connection, this object is meaningless and will have the value zero.')
starDS1E1CESCBRService = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starDS1E1CESCBRService.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESCBRService.setDescription('Define if DS1/E1 service as structured or not. A structured (2) interface is some n * 64kbps. An unstrucutred (1) interface is 1.544Mbps or 2.048Mbps. Unstructured(1) passes all bits through the ATM network. Structured(2) passes data bits through the ATM network, an may also pass signalling bits.')
starDS1E1CESCBRClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starDS1E1CESCBRClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESCBRClockMode.setDescription('Define if DS1/E1 service clocking mode. This maps into transmit clock source of CBR interface.')
starDS1E1CESCas = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("basic", 1), ("e1Cas", 2), ("ds1SfCas", 3), ("ds1EsfCas", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starDS1E1CESCas.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESCas.setDescription('This parameter selects which AAL1 format should be used :- Basic does not carry CAS bits, and uses a single 125 usec frame. e1Cas,ds1SfCas and ds1EsfCas carry CAS bits in a multi frame structure for E1,DS1 SF and DS1 ESF respectively. This applies to structured interfaces only.Default is basic (1).')
starDS1E1CESPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starDS1E1CESPartialFill.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESPartialFill.setDescription('')
starDS1E1CESBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starDS1E1CESBufMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESBufMaxSize.setDescription('')
starDS1E1CESCDVRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starDS1E1CESCDVRxT.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESCDVRxT.setDescription('')
starDS1E1CESCellLossIntegPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starDS1E1CESCellLossIntegPrd.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESCellLossIntegPrd.setDescription('')
starDS1E1CESStatsTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2), )
if mibBuilder.loadTexts: starDS1E1CESStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESStatsTable.setDescription('The CES AAL1 statistical data table.')
starDS1E1CESStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starDS1E1CESStatSlotId"), (0, "STARNE-MIB", "starDS1E1CESStatDeviceId"), (0, "STARNE-MIB", "starDS1E1CESStatPortId"), (0, "STARNE-MIB", "starDS1E1CESStatChannelId"))
if mibBuilder.loadTexts: starDS1E1CESStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESStatsEntry.setDescription('An entry in the CES AAL1 Stats table. ')
starDS1E1CESStatSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESStatSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESStatSlotId.setDescription('This object indicates the slot id.')
starDS1E1CESStatDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESStatDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESStatDeviceId.setDescription('This object indicates the device number whose info is needed.')
starDS1E1CESStatPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESStatPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESStatPortId.setDescription('This object indicates the port number whose info is needed.')
starDS1E1CESStatChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESStatChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESStatChannelId.setDescription('This object indicates the channel number whose info is needed.')
starDS1E1CESReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESReassCells.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESReassCells.setDescription('')
starDS1E1CESHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESHdrErrors.setDescription('')
starDS1E1CESPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESPointerReframes.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESPointerReframes.setDescription('')
starDS1E1CESLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESLostCells.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESLostCells.setDescription('')
starDS1E1CESBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESBufUnderflows.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESBufUnderflows.setDescription('')
starDS1E1CESBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESBufOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESBufOverflows.setDescription('')
starDS1E1CESCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 23, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1E1CESCellLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1E1CESCellLossStatus.setDescription('')
starPortTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 1), )
if mibBuilder.loadTexts: starPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortTable.setDescription('This table contains port information for all ports in the Star Node and is indexed by Slot number and Port number')
starPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortEntry.setDescription('')
starPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortIndex.setDescription('Port number')
starPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortIfIndex.setDescription('This object contains the ifIndex value related to this port. The formula used to compute is SlotNumber * 100 + PortNumber')
starPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortType.setStatus('mandatory')
if mibBuilder.loadTexts: starPortType.setDescription('Contains the same value as ifType for this port')
starPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: starPortConfig.setDescription('Contains the configuration for this port')
starPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDescr.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDescr.setDescription('Character description for this port')
starPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPortAdminStatus.setDescription('Administrative status for this port, can only be set by operator doing a configuration file download with a new value for port status')
starPortAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: starPortAtmAddress.setDescription("Atm address used for SVC's only")
starPortLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortLastChanged.setStatus('mandatory')
if mibBuilder.loadTexts: starPortLastChanged.setDescription('Time this port was last changed or came into service')
starPortAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPortAlarmStatus.setDescription('Last alarm on this port')
starPortRemoteAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortRemoteAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRemoteAtmAddress.setDescription("Remote Atm address used for SVC's only")
starPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPortOperStatus.setDescription('Operational status of this port')
starPortIFType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortIFType.setStatus('mandatory')
if mibBuilder.loadTexts: starPortIFType.setDescription('Contains same value as Board type')
starPortMaxVPINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortMaxVPINumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPortMaxVPINumber.setDescription('Maximum VPI values for this port')
starPortUsedVPINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUsedVPINumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUsedVPINumber.setDescription('Currently assigned VPI number')
starPortMaxVCINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortMaxVCINumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPortMaxVCINumber.setDescription('Maximum VCI values for this port')
starPortUsedVCINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUsedVCINumber.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUsedVCINumber.setDescription('Currently assigned VCI number')
starPortMaxFixedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortMaxFixedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starPortMaxFixedCapacity.setDescription('')
starPortMaxVariableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortMaxVariableCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starPortMaxVariableCapacity.setDescription('')
starPortUsedFwdFixedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUsedFwdFixedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUsedFwdFixedCapacity.setDescription('')
starPortUsedFwdVariableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUsedFwdVariableCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUsedFwdVariableCapacity.setDescription('')
starPortUsedBwdFixedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUsedBwdFixedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUsedBwdFixedCapacity.setDescription('')
starPortUsedBwdVariableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUsedBwdVariableCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUsedBwdVariableCapacity.setDescription('')
starPortAvailableVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortAvailableVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starPortAvailableVpi.setDescription('check available VPI value check')
starPortDS1FramerTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 2), )
if mibBuilder.loadTexts: starPortDS1FramerTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerTable.setDescription('This table contains information read from the Brooktree T1 Framer chip and is indexed by Slot number and Device Index')
starPortDS1FramerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortDS1FramerIndex"))
if mibBuilder.loadTexts: starPortDS1FramerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerEntry.setDescription('')
starPortDS1FramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerIndex.setDescription('Device index of DS1 Framer chip')
starPortDS1FramerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerRevision.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerRevision.setDescription('Device revision number')
starPortDS1FramerFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sfnormal", 1), ("sft1dm", 2), ("esfnormal", 3), ("esfzbtis", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerFrameMode.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerFrameMode.setDescription('DS1 Framer frame mode')
starPortDS1FramerLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("mbzs", 2), ("b8zstxrx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerLineCoding.setDescription('DS1 Framer line coding type')
starPortDS1FramerBPVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerBPVCounter.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerBPVCounter.setDescription('Number of bipolar violations')
starPortDS1FramerFBErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerFBErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerFBErrorCounter.setDescription('Number of frame bit errors')
starPortDS1FramerCRCErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerCRCErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerCRCErrorCounter.setDescription('Number of CRC errors')
starPortDS1FramerCOFACounter = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1FramerCOFACounter.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1FramerCOFACounter.setDescription('Number of change-of-frame-alignments')
starPortE1FramerTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 3), )
if mibBuilder.loadTexts: starPortE1FramerTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerTable.setDescription('This table contains information read from the E1 Framer chip and is indexed by Slot number and Device Index')
starPortE1FramerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortE1FramerIndex"))
if mibBuilder.loadTexts: starPortE1FramerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerEntry.setDescription('')
starPortE1FramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortE1FramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerIndex.setDescription('Device index of E1 Framer chip')
starPortE1FramerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortE1FramerRevision.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerRevision.setDescription('Device revision number')
starPortE1FramerLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("hdb3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortE1FramerLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerLineCoding.setDescription('E1 Framer line coding mode')
starPortE1FramerSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ccs", 1), ("cas", 2), ("lapd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortE1FramerSignalMode.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerSignalMode.setDescription('E1 Framer signalling mode')
starPortE1FramerCRCErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortE1FramerCRCErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerCRCErrorCounter.setDescription('Number of CRC errors')
starPortE1FramerLCVErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortE1FramerLCVErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerLCVErrorCounter.setDescription('Number of frame bit errors')
starPortE1FramerFASErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortE1FramerFASErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: starPortE1FramerFASErrorCounter.setDescription('Number of change-of-frame-alignments')
starPortDS3FramerTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 4), )
if mibBuilder.loadTexts: starPortDS3FramerTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS3FramerTable.setDescription('This table contains information read from the DS3 Framer chip and is indexed by Slot number and Device Index')
starPortDS3FramerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 4, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortDS3FramerIndex"))
if mibBuilder.loadTexts: starPortDS3FramerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS3FramerEntry.setDescription('')
starPortDS3FramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS3FramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS3FramerIndex.setDescription('Device index of DS3 Framer chip')
starPortDS3FramerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS3FramerRevision.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS3FramerRevision.setDescription('Device revision number')
starPortDS3FramerFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("m13", 1), ("c-bit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS3FramerFramingMode.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS3FramerFramingMode.setDescription('DS3 Framer framing mode')
starPortSonetUniTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 5), )
if mibBuilder.loadTexts: starPortSonetUniTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortSonetUniTable.setDescription('This table contains information read from the Sonet Uni Device and is indexed by Slot number and Device Index')
starPortSonetUniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 5, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortSonetUniIndex"))
if mibBuilder.loadTexts: starPortSonetUniEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortSonetUniEntry.setDescription('')
starPortSonetUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortSonetUniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortSonetUniIndex.setDescription('Device index of Sonet Uni chip')
starPortSonetUniMsgTxCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortSonetUniMsgTxCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortSonetUniMsgTxCt.setDescription('Transmitted message counter')
starPortSonetUniMsgRxCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortSonetUniMsgRxCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortSonetUniMsgRxCt.setDescription('Received message counter')
starPortSonetUniHECErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortSonetUniHECErrorCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortSonetUniHECErrorCt.setDescription('HEC error counter')
starPortDs3UniTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 6), )
if mibBuilder.loadTexts: starPortDs3UniTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDs3UniTable.setDescription('This Table contains information read from the DS3 Uni Device and is indexed by dsx3CurrentIndex ans is referenced RFC 1407 & 1695')
starPortDs3UniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1), ).setIndexNames((0, "STARNE-MIB", "starDsx3CurrentIndex"))
if mibBuilder.loadTexts: starPortDs3UniEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDs3UniEntry.setDescription('')
starDsx3CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDsx3CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starDsx3CurrentIndex.setDescription('The index value which uniquely identifies the DS3/E3 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an dsx3LineIndex object instance.')
starPortDs3TxFEBEcount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDs3TxFEBEcount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDs3TxFEBEcount.setDescription('The counter associated with the number of non-111 FEBE code when F,M,Cp bit error occur in transfer mode. Ref: RFC1407')
starPortDs3RxFEBEcount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDs3RxFEBEcount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDs3RxFEBEcount.setDescription('The counter associated with the number of non-111 FEBE code when F,M,Cp bit error occur in receive mode. Ref: RFC1407')
starPortPlcpTxFEBEcount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpTxFEBEcount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpTxFEBEcount.setDescription('The counter associated with the number of BI/BIP-8 error when transfer mode. Ref: RFC1407')
starPortPlcpRxFEBEcount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpRxFEBEcount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpRxFEBEcount.setDescription('The counter associated with the number of FEBE count when receive mode. Ref: RFC1407')
starPortRAIstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRAIstatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRAIstatus.setDescription('The status of RAI bit in GI byte. Ref: RFC1407')
starPortPlcpCVcount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpCVcount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpCVcount.setDescription('The counter associated with the number of BI/BIP-8 error. Ref: RFC1407')
starPortPlcpEScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpEScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpEScount.setDescription('The counter associated with the count second of more than single CV. Ref: RFC1407')
starPortPlcpSEScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpSEScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpSEScount.setDescription('The counter associated with the count second of more than 15 CVs. Ref: RFC1407')
starPortPlcpEFScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpEFScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpEFScount.setDescription('The counter associated with the count second of more than single PLCP FERR. Ref: RFC1407')
starPortPlcpSEFScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpSEFScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpSEFScount.setDescription('The counter associated with the count second of more than single SEF. Ref: RFC1407')
starPortPlcpUAScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPlcpUAScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPlcpUAScount.setDescription('The counter associated with the count second of DS3 LOS, AIS, LOF or PLCP LOF. Ref: RFC1407')
starPortDs3LSEScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDs3LSEScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDs3LSEScount.setDescription('The counter associated with the count second of at least 45 LCVs. Ref: RFC1407')
starPortDs3AISScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDs3AISScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDs3AISScount.setDescription('The counter associated with the count second of AIS detection. Ref: RFC1407')
starPortDs3EFScount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 6, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDs3EFScount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDs3EFScount.setDescription('The counter associated with the count second of any errored frame bit. Ref: RFC1407')
starPortPdhUniTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 7), )
if mibBuilder.loadTexts: starPortPdhUniTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPdhUniTable.setDescription('This table contains information read from the Pdh Uni Device and is indexed by Slot number and Device Index')
starPortPdhUniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 7, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortPdhUniIndex"))
if mibBuilder.loadTexts: starPortPdhUniEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPdhUniEntry.setDescription('')
starPortPdhUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPdhUniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPdhUniIndex.setDescription('Device index of Pdh Uni chip')
starPortPdhUniMsgTxCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPdhUniMsgTxCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPdhUniMsgTxCt.setDescription('Transmitted message counter')
starPortPdhUniMsgRxCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPdhUniMsgRxCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPdhUniMsgRxCt.setDescription('Received message counter')
starPortPdhUniHECErrCt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortPdhUniHECErrCt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPdhUniHECErrCt.setDescription('HEC error counter')
starPortDS1ATMTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 9), )
if mibBuilder.loadTexts: starPortDS1ATMTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMTable.setDescription('This table contains DS1 ATM chip peformance data read from ATM chip of AIU T1, AIU E1 interface')
starPortDS1ATMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 9, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortDS1ATMIndex"))
if mibBuilder.loadTexts: starPortDS1ATMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMEntry.setDescription(' ')
starPortDS1ATMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1ATMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMIndex.setDescription('The chip number for CDB chips. Each interface has one CDB chip.')
starPortDS1ATMHecCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1ATMHecCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMHecCnt.setDescription('Header Error Check(HEC) counter is incremented when thereis an error in the HEC value indicate either single or multiple errors in ATM cell heaer')
starPortDS1ATMDiscardCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1ATMDiscardCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMDiscardCellCnt.setDescription(' This counter is incremented when the 3-cell output FIFO of the CDB is forced to overflow.')
starPortDS1ATMErrCorrectCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1ATMErrCorrectCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMErrCorrectCellCnt.setDescription('This counter is incremented for every ATM cell header this is corrected for a singel bit error')
starPortDS1ATMRxBusyCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1ATMRxBusyCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMRxBusyCellCnt.setDescription('The counter is increment for each complete received busy cell.')
starPortDS1ATMTxBusyCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortDS1ATMTxBusyCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortDS1ATMTxBusyCellCnt.setDescription('The counter is inceremented for each complete tranmitted busy cell.')
starPortM32Table = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 10), )
if mibBuilder.loadTexts: starPortM32Table.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32Table.setDescription('This table contains the performance monitoring data for Siemens Munich32 chip (Multichannel Network Interface Controlloer for HDLC) for channelized FIU board.')
starPortM32Entry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1), ).setIndexNames((0, "STARNE-MIB", "starPortM32SlotId"), (0, "STARNE-MIB", "starPortM32ChipId"))
if mibBuilder.loadTexts: starPortM32Entry.setStatus('mandatory')
starPortM32SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32SlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32SlotId.setDescription('This object indicates the slot number on the FIU module')
starPortM32ChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32ChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32ChipId.setDescription('This is the device Munich32 number (port no.) on the FIU module')
starPortM32RxCrcErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxCrcErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxCrcErrorCount.setDescription('Receive CRC Error counter')
starPortM32RxNobErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxNobErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxNobErrorCount.setDescription('Receive NOB bit Error counter')
starPortM32RxLfdErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxLfdErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxLfdErrorCount.setDescription('Receive LFD bit Error counter')
starPortM32RxIntBufOverFlwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxIntBufOverFlwCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxIntBufOverFlwCount.setDescription('Receive buffer overvlow counter')
starPortM32RxAbortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxAbortCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxAbortCount.setDescription('Receive abort frame counter')
starPortM32RxShortFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxShortFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxShortFrameCount.setDescription('Receive short frame counter')
starPortM32RxDiscardFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxDiscardFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxDiscardFrameCount.setDescription('Receive discarded frame counter')
starPortM32RxPduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxPduCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxPduCount.setDescription('Receive PDU counter')
starPortM32RxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32RxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32RxByteCount.setDescription('Receive byte counter')
starPortM32TxErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32TxErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32TxErrorCount.setDescription('Transmit Error counter')
starPortM32TxPduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32TxPduCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32TxPduCount.setDescription('Transmit PDU counter')
starPortM32TxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortM32TxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortM32TxByteCount.setDescription('Transmit byte counter')
starPortHdlcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 11), )
if mibBuilder.loadTexts: starPortHdlcConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcConfigTable.setDescription('This table contains information read from the Hdlc Device and is indexed by Slot number and Device Index')
starPortHdlcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 11, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortHdlcIndex"))
if mibBuilder.loadTexts: starPortHdlcConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcConfigEntry.setDescription('')
starPortHdlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortHdlcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcIndex.setDescription('Device index of Hdlc chip')
starPortHdlcLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("t1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortHdlcLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcLineSpeed.setDescription('Hdlc chip line speed')
starPortHdlcLineEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortHdlcLineEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcLineEncoding.setDescription('Hdlc line encoding mode')
starPortHdlcCrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crcccitt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortHdlcCrcMode.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcCrcMode.setDescription('Hdlc CRC mode')
starPortHdlcDteDce = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortHdlcDteDce.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcDteDce.setDescription('Hdlc Dte/Dce type')
starPortHdlcClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortHdlcClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: starPortHdlcClockMode.setDescription('Clock mode')
starSvcmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 12), )
if mibBuilder.loadTexts: starSvcmStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmStatusTable.setDescription('')
starSvcmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starSvcmStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmStatusEntry.setDescription('')
starSvcmActiveCallCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmActiveCallCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmActiveCallCnt.setDescription('')
starSvcmLastTxCause = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmLastTxCause.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmLastTxCause.setDescription('')
starSvcmPtoPOrgActiveConnectionCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmPtoPOrgActiveConnectionCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmPtoPOrgActiveConnectionCnt.setDescription('')
starSvcmPtoPTermActiveConnectionCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmPtoPTermActiveConnectionCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmPtoPTermActiveConnectionCnt.setDescription('')
starSvcmPtoMPOrgActiveConnectionCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmPtoMPOrgActiveConnectionCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmPtoMPOrgActiveConnectionCnt.setDescription('')
starSvcmPtoMPTermActiveConnectionCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmPtoMPTermActiveConnectionCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmPtoMPTermActiveConnectionCnt.setDescription('')
starSvcmConnectionSetupFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmConnectionSetupFailCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmConnectionSetupFailCnt.setDescription('')
starSvcmTxCallProceedingMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxCallProceedingMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxCallProceedingMsgCnt.setDescription('')
starSvcmRxCallProceedingMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxCallProceedingMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxCallProceedingMsgCnt.setDescription('')
starSvcmTxConnectMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxConnectMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxConnectMsgCnt.setDescription('')
starSvcmRxConnectMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxConnectMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxConnectMsgCnt.setDescription('')
starSvcmTxSetupMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxSetupMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxSetupMsgCnt.setDescription('')
starSvcmRxSetupMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxSetupMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxSetupMsgCnt.setDescription('')
starSvcmTxReleaseMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxReleaseMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxReleaseMsgCnt.setDescription('')
starSvcmRxReleaseMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxReleaseMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxReleaseMsgCnt.setDescription('')
starSvcmTxReleaseCompleteMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxReleaseCompleteMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxReleaseCompleteMsgCnt.setDescription('')
starSvcmRxReleaseCompleteMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxReleaseCompleteMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxReleaseCompleteMsgCnt.setDescription('')
starSvcmTxRestartMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxRestartMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxRestartMsgCnt.setDescription('')
starSvcmRxRestartMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxRestartMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxRestartMsgCnt.setDescription('')
starSvcmTxRestartAckMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxRestartAckMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxRestartAckMsgCnt.setDescription('')
starSvcmRxRestartAckMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxRestartAckMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxRestartAckMsgCnt.setDescription('')
starSvcmTxStatusMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxStatusMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxStatusMsgCnt.setDescription('')
starSvcmRxStatusMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxStatusMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxStatusMsgCnt.setDescription('')
starSvcmTxStatusEnquiryMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmTxStatusEnquiryMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmTxStatusEnquiryMsgCnt.setDescription('')
starSvcmRxStatusEnquiryMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 12, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmRxStatusEnquiryMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmRxStatusEnquiryMsgCnt.setDescription('')
starSvcmAiuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 13), )
if mibBuilder.loadTexts: starSvcmAiuStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuStatsTable.setDescription('')
starSvcmAiuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starSvcmAiuStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuStatsEntry.setDescription('')
starSvcmAiuTxSSCOPDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuTxSSCOPDiscardedCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuTxSSCOPDiscardedCells.setDescription('')
starSvcmAiuRxBGNCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxBGNCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxBGNCells.setDescription('')
starSvcmAiuRxBGAKCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxBGAKCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxBGAKCells.setDescription('')
starSvcmAiuRxENDCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxENDCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxENDCells.setDescription('')
starSvcmAiuRxRSCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxRSCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxRSCells.setDescription('')
starSvcmAiuRxRSAKCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxRSAKCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxRSAKCells.setDescription('')
starSvcmAiuRxSDCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxSDCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxSDCells.setDescription('')
starSvcmAiuRxSDPCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxSDPCCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxSDPCCells.setDescription('')
starSvcmAiuRxPOLLCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxPOLLCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxPOLLCells.setDescription('')
starSvcmAiuRxSTATCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxSTATCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxSTATCells.setDescription('')
starSvcmAiuRxUSTATCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxUSTATCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxUSTATCells.setDescription('')
starSvcmAiuRxUDCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxUDCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxUDCells.setDescription('')
starSvcmAiuRxMDCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxMDCells.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxMDCells.setDescription('')
starSvcmAiuTxAddPartyMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuTxAddPartyMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuTxAddPartyMsgCnt.setDescription('')
starSvcmAiuRxAddPartyMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxAddPartyMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxAddPartyMsgCnt.setDescription('')
starSvcmAiuTxAddPartyRejMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuTxAddPartyRejMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuTxAddPartyRejMsgCnt.setDescription('')
starSvcmAiuRxAddPartyRejMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxAddPartyRejMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxAddPartyRejMsgCnt.setDescription('')
starSvcmAiuTxAddPartyAckMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuTxAddPartyAckMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuTxAddPartyAckMsgCnt.setDescription('')
starSvcmAiuRxAddPartyAckMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxAddPartyAckMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxAddPartyAckMsgCnt.setDescription('')
starSvcmAiuTxDropPartyMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuTxDropPartyMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuTxDropPartyMsgCnt.setDescription('')
starSvcmAiuRxDropPartyMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxDropPartyMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxDropPartyMsgCnt.setDescription('')
starSvcmAiuTxDropPartyAckMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuTxDropPartyAckMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuTxDropPartyAckMsgCnt.setDescription('')
starSvcmAiuRxDropPartyAckMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 13, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmAiuRxDropPartyAckMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmAiuRxDropPartyAckMsgCnt.setDescription('')
starSvcmFiuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 14), )
if mibBuilder.loadTexts: starSvcmFiuStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmFiuStatsTable.setDescription('')
starSvcmFiuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 14, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starSvcmFiuStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmFiuStatsEntry.setDescription('')
starSvcmFiuQ933TimerExpiryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmFiuQ933TimerExpiryCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmFiuQ933TimerExpiryCnt.setDescription('')
starSvcmFiuQ933IllegalMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmFiuQ933IllegalMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmFiuQ933IllegalMsgCnt.setDescription('')
starSvcmFiuQ922TimerExpiryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmFiuQ922TimerExpiryCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmFiuQ922TimerExpiryCnt.setDescription('')
starSvcmFiuQ922LinkFailIndicationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmFiuQ922LinkFailIndicationCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmFiuQ922LinkFailIndicationCnt.setDescription('')
starSvcmFiuQ922UnackedMsgCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmFiuQ922UnackedMsgCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmFiuQ922UnackedMsgCnt.setDescription('')
starPortTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 15), )
if mibBuilder.loadTexts: starPortTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortTrunkTable.setDescription('')
starPortTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPortTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortTrunkEntry.setDescription('')
starTotalInFixedCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTotalInFixedCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starTotalInFixedCapa.setDescription('')
starTotalOutFixedCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTotalOutFixedCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starTotalOutFixedCapa.setDescription('')
starTotalInVariableCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTotalInVariableCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starTotalInVariableCapa.setDescription('')
starTotalOutVariableCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTotalOutVariableCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starTotalOutVariableCapa.setDescription('')
starPvcInFixedCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcInFixedCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcInFixedCapa.setDescription('')
starPvcOutFixedCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcOutFixedCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcOutFixedCapa.setDescription('')
starPvcInVariableCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcInVariableCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcInVariableCapa.setDescription('')
starPvcOutVariableCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcOutVariableCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcOutVariableCapa.setDescription('')
starSvcInFixedCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcInFixedCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcInFixedCapa.setDescription('')
starSvcOutFixedCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcOutFixedCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcOutFixedCapa.setDescription('')
starSvcInVariableCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcInVariableCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcInVariableCapa.setDescription('')
starSvcOutVariableCapa = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcOutVariableCapa.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcOutVariableCapa.setDescription('')
starPortRealStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 16), )
if mibBuilder.loadTexts: starPortRealStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRealStatusTable.setDescription('')
starPortRealStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 16, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"))
if mibBuilder.loadTexts: starPortRealStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRealStatusEntry.setDescription('')
starPortConfigRealStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortConfigRealStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPortConfigRealStatus.setDescription('')
starPortAlarmRealStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortAlarmRealStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPortAlarmRealStatus.setDescription('')
starPortOperRealStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortOperRealStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPortOperRealStatus.setDescription('')
starPortRealStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 16, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRealStatusDescr.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRealStatusDescr.setDescription('')
starPortPmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 17), )
if mibBuilder.loadTexts: starPortPmThresholdTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmThresholdTable.setDescription('PM threshold information for history monitoring')
starPortPmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"), (0, "STARNE-MIB", "starPortPmThreshIdx"))
if mibBuilder.loadTexts: starPortPmThresholdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmThresholdEntry.setDescription('')
starPortPmThreshIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmThreshIdx.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmThreshIdx.setDescription('')
starPortPmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmTrigger.setDescription('')
starPortPmFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmFlag.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmFlag.setDescription('')
starPortPmThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmThreshValue.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmThreshValue.setDescription('')
starPortPmRearmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmRearmValue.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmRearmValue.setDescription('')
starPortPmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmPriority.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmPriority.setDescription('')
starPortPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmInterval.setDescription('')
starPortPmCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPortPmCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starPortPmCnt.setDescription('')
starPortLMIStatsTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 18), )
if mibBuilder.loadTexts: starPortLMIStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortLMIStatsTable.setDescription('Frame Relay LMI link information')
starPortLMIStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 18, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPortLMIStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortLMIStatsEntry.setDescription('')
starPortLMILinkStats = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortLMILinkStats.setStatus('mandatory')
if mibBuilder.loadTexts: starPortLMILinkStats.setDescription('')
starPortFiu12Ds1Table = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 19), )
if mibBuilder.loadTexts: starPortFiu12Ds1Table.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds1Table.setDescription('')
starPortFiu12Ds1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1), ).setIndexNames((0, "STARNE-MIB", "starPortFiu12Index"))
if mibBuilder.loadTexts: starPortFiu12Ds1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds1Entry.setDescription('')
starPortFiu12Index = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Index.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Index.setDescription('')
starPortFiu12Ds1LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds1LCV.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds1LCV.setDescription('')
starPortFiu12Ds1BEE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds1BEE.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds1BEE.setDescription('')
starPortFiu12Ds1FER = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds1FER.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds1FER.setDescription('')
starPortFiu12Ds1OOF = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds1OOF.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds1OOF.setDescription('')
starPortFiu12E1FER = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12E1FER.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12E1FER.setDescription('')
starPortFiu12E1FEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12E1FEBE.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12E1FEBE.setDescription('')
starPortFiu12E1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12E1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12E1CRC.setDescription('')
starPortFiu12E1LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12E1LCV.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12E1LCV.setDescription('')
starPortFiu12Ds3FramerTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 20), )
if mibBuilder.loadTexts: starPortFiu12Ds3FramerTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerTable.setDescription('')
starPortFiu12Ds3FramerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortFiu12Ds3FramerIndex"))
if mibBuilder.loadTexts: starPortFiu12Ds3FramerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerEntry.setDescription('')
starPortFiu12Ds3FramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds3FramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerIndex.setDescription('')
starPortFiu12Ds3FramerLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds3FramerLCV.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerLCV.setDescription('')
starPortFiu12Ds3FramerFERR = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds3FramerFERR.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerFERR.setDescription('')
starPortFiu12Ds3FramerDXZS = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds3FramerDXZS.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerDXZS.setDescription('')
starPortFiu12Ds3FramerPERR = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds3FramerPERR.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerPERR.setDescription('')
starPortFiu12Ds3FramerCPERR = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds3FramerCPERR.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerCPERR.setDescription('')
starPortFiu12Ds3FramerFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortFiu12Ds3FramerFEBE.setStatus('mandatory')
if mibBuilder.loadTexts: starPortFiu12Ds3FramerFEBE.setDescription('')
starPhysicalLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 21), )
if mibBuilder.loadTexts: starPhysicalLoopbackTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPhysicalLoopbackTable.setDescription(' Set and Get Physical Loopback for FIU_T3(DS1)')
starPhysicalLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 21, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"), (0, "STARNE-MIB", "starPhysicalLoopbackDs1Port"), (0, "STARNE-MIB", "starPhysicalLoopbackMethod"), (0, "STARNE-MIB", "starPhysicalLoopbackCtrl"))
if mibBuilder.loadTexts: starPhysicalLoopbackEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPhysicalLoopbackEntry.setDescription('')
starPhysicalLoopbackDs1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPhysicalLoopbackDs1Port.setStatus('mandatory')
if mibBuilder.loadTexts: starPhysicalLoopbackDs1Port.setDescription('FIU_T3(Ds1) Port ')
starPhysicalLoopbackMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPhysicalLoopbackMethod.setStatus('mandatory')
if mibBuilder.loadTexts: starPhysicalLoopbackMethod.setDescription('19 : External Loopback 20 : Internal Loopback')
starPhysicalLoopbackCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("release", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPhysicalLoopbackCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: starPhysicalLoopbackCtrl.setDescription('1 : Set Loopback 2 : Release Loopback')
starPhysicalLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPhysicalLoopbackStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPhysicalLoopbackStatus.setDescription(' Get or Set a physical Loopback for each port')
starPhysicalLoopbackDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 21, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPhysicalLoopbackDescr.setStatus('mandatory')
if mibBuilder.loadTexts: starPhysicalLoopbackDescr.setDescription(' Get a physical Loopback status for all ports ')
starPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 3, 22))
starPPPLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1), )
if mibBuilder.loadTexts: starPPPLinkStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusTable.setDescription('A table containing PPP-link specific variables for this PPP implementation.')
starPPPLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPPPLinkStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusEntry.setDescription('Management information about a particular PPP Link.')
starPPPLinkStatusPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusPhysicalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusPhysicalIndex.setDescription("The value of ifIndex that identifies the lower-level interface over which this PPP Link is operating. This interface would usually be an HDLC or RS-232 type of interface. If there is no lower-layer interface element, or there is no ifEntry for the element, or the element can not be identified, then the value of this object is 0. For example, suppose that PPP is operating over a serial port. This would use two entries in the ifTable. The PPP could be running over `interface' number 123 and the serial port could be running over `interface' number 987. Therefore, ifSpecific.123 would contain the OBJECT IDENTIFIER ppp starPPPLinkStatusPhysicalIndex.123 would contain 987, and ifSpecific.987 would contain the OBJECT IDENTIFIER for the serial-port's media- specific MIB.")
starPPPLinkStatusBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusBadAddresses.setReference('Section 3.1, Address Field, of RFC1331.')
if mibBuilder.loadTexts: starPPPLinkStatusBadAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusBadAddresses.setDescription('The number of packets received with an incorrect Address Field. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
starPPPLinkStatusBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusBadControls.setReference('Section 3.1, Control Field, of RFC1331.')
if mibBuilder.loadTexts: starPPPLinkStatusBadControls.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusBadControls.setDescription('The number of packets received on this link with an incorrect Control Field. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
starPPPLinkStatusPacketTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusPacketTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusPacketTooLongs.setDescription('The number of received packets that have been discarded because their length exceeded the MRU. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link. NOTE, packets which are longer than the MRU but which are successfully received and processed are NOT included in this count.')
starPPPLinkStatusBadFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusBadFCSs.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusBadFCSs.setDescription('The number of received packets that have been discarded due to having an incorrect FCS. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
starPPPLinkStatusLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusLocalMRU.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusLocalMRU.setDescription('The current value of the MRU for the local PPP Entity. This value is the MRU that the remote entity is using when sending packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusRemoteMRU.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusRemoteMRU.setDescription('The current value of the MRU for the remote PPP Entity. This value is the MRU that the local entity is using when sending packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusLocalToPeerACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusLocalToPeerACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusLocalToPeerACCMap.setDescription('The current value of the ACC Map used for sending packets from the local PPP entity to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusPeerToLocalACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusPeerToLocalACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusPeerToLocalACCMap.setDescription('The ACC Map used by the remote PPP entity when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusLocalToRemotePC = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusLocalToRemotePC.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusLocalToRemotePC.setDescription('Indicates whether the local PPP entity will use Protocol Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusRemoteToLocalPC = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusRemoteToLocalPC.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusRemoteToLocalPC.setDescription('Indicates whether the remote PPP entity will use Protocol Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusLocalToRemoteACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusLocalToRemoteACFC.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusLocalToRemoteACFC.setDescription('Indicates whether the local PPP entity will use Address and Control Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusRemoteToLocalACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusRemoteToLocalACFC.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusRemoteToLocalACFC.setDescription('Indicates whether the remote PPP entity will use Address and Control Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusTransmitFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusTransmitFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusTransmitFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the local node will generate when sending packets to the remote node. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLinkStatusReceiveFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLinkStatusReceiveFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLinkStatusReceiveFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the remote node will generate when sending packets to the local node. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
starPPPLqrTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2), )
if mibBuilder.loadTexts: starPPPLqrTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrTable.setDescription('Table containing the LQR parameters and statistics for the local PPP entity.')
starPPPLqrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPPPLqrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrEntry.setDescription('LQR information for a particular PPP link. A PPP link will have an entry in this table if and only if LQR Quality Monitoring has been successfully negotiated for said link.')
starPPPLqrQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("not-determined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLqrQuality.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrQuality.setDescription("The current quality of the link as declared by the local PPP entity's Link-Quality Management modules. No effort is made to define good or bad, nor the policy used to determine it. The not-determined value indicates that the entity does not actually evaluate the link's quality. This value is used to disambiguate the `determined to be good' case from the `no determination made and presumed to be good' case.")
starPPPLqrInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLqrInGoodOctets.setReference('Section 2.2, Counters, of RFC1333.')
if mibBuilder.loadTexts: starPPPLqrInGoodOctets.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrInGoodOctets.setDescription('The LQR InGoodOctets counter for this link.')
starPPPLqrLocalPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLqrLocalPeriod.setReference('Section 2.5, Configuration Option Format, of RFC1333.')
if mibBuilder.loadTexts: starPPPLqrLocalPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrLocalPeriod.setDescription('The LQR reporting period, in hundredths of a second that is in effect for the local PPP entity.')
starPPPLqrRemotePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLqrRemotePeriod.setReference('Section 2.5, Configuration Option Format, of RFC1333.')
if mibBuilder.loadTexts: starPPPLqrRemotePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrRemotePeriod.setDescription('The LQR reporting period, in hundredths of a second, that is in effect for the remote PPP entity.')
starPPPLqrOutLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLqrOutLQRs.setReference('Section 2.2, Counters, of RFC1333.')
if mibBuilder.loadTexts: starPPPLqrOutLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrOutLQRs.setDescription('The value of the OutLQRs counter on the local node for the link identified by ifIndex.')
starPPPLqrInLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPLqrInLQRs.setReference('Section 2.2, Counters, of RFC1333.')
if mibBuilder.loadTexts: starPPPLqrInLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPLqrInLQRs.setDescription('The value of the InLQRs counter on the local node for the link identified by ifIndex.')
starPPPIpTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 3), )
if mibBuilder.loadTexts: starPPPIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPIpTable.setDescription('Table containing the IP parameters and statistics for the local PPP entity.')
starPPPIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPPPIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPIpEntry.setDescription('IPCP status information for a particular PPP link.')
starPPPIpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPIpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPIpOperStatus.setDescription('The operational status of the IP network protocol. If the value of this object is up then the finite state machine for the IP network protocol has reached the Opened state.')
starPPPIpLocalToRemoteCP = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPIpLocalToRemoteCP.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPIpLocalToRemoteCP.setDescription('The IP compression protocol that the local PPP-IP entity uses when sending packets to the remote PPP-IP entity. The value of this object is meaningful only when the link has reached the open state (starPPPIpOperStatus is opened).')
starPPPIpRemoteToLocalCP = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPIpRemoteToLocalCP.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPIpRemoteToLocalCP.setDescription('The IP compression protocol that the remote PPP-IP entity uses when sending packets to the local PPP-IP entity. The value of this object is meaningful only when the link has reached the open state (starPPPIpOperStatus is opened).')
starPPPIpRemoteMaxSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPIpRemoteMaxSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPIpRemoteMaxSlotId.setDescription('The Max-Slot-Id parameter that the remote node has advertised and that is in use on the link. If vj-tcp header compression is not in use on the link then the value of this object shall be 0. The value of this object is meaningful only when the link has reached the open state (starPPPIpOperStatus is opened).')
starPPPIpLocalMaxSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 3, 22, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPIpLocalMaxSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPPPIpLocalMaxSlotId.setDescription('The Max-Slot-Id parameter that the local node has advertised and that is in use on the link. If vj-tcp header compression is not in use on the link then the value of this object shall be 0. The value of this object is meaningful only when the link has reached the open state (starPPPIpOperStatus is opened).')
starVplStatsTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 1), )
if mibBuilder.loadTexts: starVplStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: starVplStatsTable.setDescription('This table contains statistics gathered on a specific port and is indexed by Slot number, Port number and VPI')
starVplStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starVplSlotIndex"), (0, "STARNE-MIB", "starVplPortIndex"), (0, "STARNE-MIB", "starVplConnRole"), (0, "STARNE-MIB", "starVplSourceNode"), (0, "STARNE-MIB", "starVplSourceSlot"), (0, "STARNE-MIB", "starVplSourcePort"), (0, "STARNE-MIB", "starVplSourceVpi"), (0, "STARNE-MIB", "starVplSourceVci"))
if mibBuilder.loadTexts: starVplStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starVplStatsEntry.setDescription('')
starVplSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starVplSlotIndex.setDescription('')
starVplPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starVplPortIndex.setDescription('')
starVplSourceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplSourceNode.setStatus('mandatory')
if mibBuilder.loadTexts: starVplSourceNode.setDescription('')
starVplSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplSourceSlot.setStatus('mandatory')
if mibBuilder.loadTexts: starVplSourceSlot.setDescription('')
starVplSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: starVplSourcePort.setDescription('')
starVplSourceVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplSourceVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starVplSourceVpi.setDescription('')
starVplSourceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplSourceVci.setStatus('mandatory')
if mibBuilder.loadTexts: starVplSourceVci.setDescription('')
starVplConnRole = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplConnRole.setStatus('mandatory')
if mibBuilder.loadTexts: starVplConnRole.setDescription('')
starVplStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplStatsTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: starVplStatsTimeStamp.setDescription('')
starVplNumOAMInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplNumOAMInvalidCRC.setStatus('mandatory')
if mibBuilder.loadTexts: starVplNumOAMInvalidCRC.setDescription('Invalid CRC OAM cell count')
starVplRtCongestedState = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("congested", 1), ("notcongested", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplRtCongestedState.setStatus('mandatory')
if mibBuilder.loadTexts: starVplRtCongestedState.setDescription('Congested state for this VP')
starVplRtNewVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplRtNewVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starVplRtNewVpi.setDescription('VPI value to be used when translation is enabled')
starVplRtCellsRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplRtCellsRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVplRtCellsRxCount.setDescription('Number of cells received in RT level for this VP')
starVplRtCellsDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplRtCellsDroppedCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVplRtCellsDroppedCount.setDescription('Number of cells dropped in RT level for this VP')
starVplRtCellsCongCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplRtCellsCongCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVplRtCellsCongCount.setDescription('Number of cells congested in RT level for this VP')
starVplUpcGcra0ViolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplUpcGcra0ViolCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVplUpcGcra0ViolCount.setDescription('Number of cells tagged or dropped by Gcra0 algorithm')
starVplUpcGcra1ViolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplUpcGcra1ViolCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVplUpcGcra1ViolCount.setDescription('Number of cells tagged or dropped by Gcra1 algorithm')
starVplUpcCellsCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplUpcCellsCLP0.setStatus('mandatory')
if mibBuilder.loadTexts: starVplUpcCellsCLP0.setDescription('Number of cells received with CLP0 in UPC level for this VP')
starVplUpcTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplUpcTotalCells.setStatus('mandatory')
if mibBuilder.loadTexts: starVplUpcTotalCells.setDescription('Total cells received by this VP')
starVplUpcTotalOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVplUpcTotalOAMCells.setStatus('mandatory')
if mibBuilder.loadTexts: starVplUpcTotalOAMCells.setDescription('Total OAM cells passed through by this VP')
starVclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 2), )
if mibBuilder.loadTexts: starVclStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: starVclStatsTable.setDescription('This table contains statistics gathered on a specific port and is indexed by Slot number, Port number, VPI and VCI,DLCI,Timeslot,Leafno')
starVclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starVclSlotIndex"), (0, "STARNE-MIB", "starVclPortIndex"), (0, "STARNE-MIB", "starVclConnRole"), (0, "STARNE-MIB", "starVclSourceNode"), (0, "STARNE-MIB", "starVclSourceSlot"), (0, "STARNE-MIB", "starVclSourcePort"), (0, "STARNE-MIB", "starVclSourceVpi"), (0, "STARNE-MIB", "starVclSourceVci"), (0, "STARNE-MIB", "starVclSourceDlci"), (0, "STARNE-MIB", "starVclSourceTimeslot"), (0, "STARNE-MIB", "starVclSourceIftype"), (0, "STARNE-MIB", "starVclSourceLeafno"))
if mibBuilder.loadTexts: starVclStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starVclStatsEntry.setDescription('')
starVclSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSlotIndex.setDescription('')
starVclPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starVclPortIndex.setDescription('')
starVclSourceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceNode.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceNode.setDescription('')
starVclSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceSlot.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceSlot.setDescription('')
starVclSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourcePort.setDescription('')
starVclSourceVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceVpi.setDescription('')
starVclSourceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceVci.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceVci.setDescription('')
starVclConnRole = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclConnRole.setStatus('mandatory')
if mibBuilder.loadTexts: starVclConnRole.setDescription('')
starVclStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclStatsTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: starVclStatsTimeStamp.setDescription('This object indicates the time stamp')
starVclNumOAMInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclNumOAMInvalidCRC.setStatus('mandatory')
if mibBuilder.loadTexts: starVclNumOAMInvalidCRC.setDescription('Invalid CRC OAM cell count')
starVclRtCongestedState = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notcongested", 1), ("congested", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclRtCongestedState.setStatus('mandatory')
if mibBuilder.loadTexts: starVclRtCongestedState.setDescription('Congested state for this VP')
starVclRtLastAal5State = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclRtLastAal5State.setStatus('mandatory')
if mibBuilder.loadTexts: starVclRtLastAal5State.setDescription('Current Aal5 state for last cell')
starVclRtNewVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclRtNewVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starVclRtNewVpi.setDescription('VPI value to be used when translation is enabled')
starVclRtNewVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclRtNewVci.setStatus('mandatory')
if mibBuilder.loadTexts: starVclRtNewVci.setDescription('VCI value to be used when translation is enabled')
starVclRtCellsRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclRtCellsRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVclRtCellsRxCount.setDescription('Number of cells received in RT level for this VP/VC')
starVclRtCellsDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclRtCellsDroppedCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVclRtCellsDroppedCount.setDescription('Number of cells dropped in RT level for this VP/VC')
starVclRtCellsCongCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclRtCellsCongCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVclRtCellsCongCount.setDescription('Number of cells congested in RT level for this VP/VC')
starVclUpcGcra0ViolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclUpcGcra0ViolCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVclUpcGcra0ViolCount.setDescription('Number of cells tagged or dropped by Gcra0 algorithm')
starVclUpcGcra1ViolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclUpcGcra1ViolCount.setStatus('mandatory')
if mibBuilder.loadTexts: starVclUpcGcra1ViolCount.setDescription('Number of cells tagged or dropped by Gcra1 algorithm')
starVclUpcCellsCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclUpcCellsCLP0.setStatus('mandatory')
if mibBuilder.loadTexts: starVclUpcCellsCLP0.setDescription('Number of cells received with CLP0 in UPC level for this VP/VC')
starVclUpcTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclUpcTotalCells.setStatus('mandatory')
if mibBuilder.loadTexts: starVclUpcTotalCells.setDescription('Total cells received by this VP/VC')
starVclUpcTotalOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclUpcTotalOAMCells.setStatus('mandatory')
if mibBuilder.loadTexts: starVclUpcTotalOAMCells.setDescription('Total OAM cells passed through by this VP/VC')
starVclSourceDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceDlci.setDescription('')
starVclSourceTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceTimeslot.setDescription('')
starVclSourceIftype = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceIftype.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceIftype.setDescription('')
starVclSourceLeafno = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVclSourceLeafno.setStatus('mandatory')
if mibBuilder.loadTexts: starVclSourceLeafno.setDescription('')
starVpiRangeTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 3), )
if mibBuilder.loadTexts: starVpiRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: starVpiRangeTable.setDescription('')
starVpiRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"), (0, "STARNE-MIB", "starVpiIndex"))
if mibBuilder.loadTexts: starVpiRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starVpiRangeEntry.setDescription('')
starVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVpiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starVpiIndex.setDescription('')
starVpiVciBitRangeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starVpiVciBitRangeClass.setStatus('mandatory')
if mibBuilder.loadTexts: starVpiVciBitRangeClass.setDescription('')
starVpiBitRangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVpiBitRangeValue.setStatus('mandatory')
if mibBuilder.loadTexts: starVpiBitRangeValue.setDescription('')
starVciBitRangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVciBitRangeValue.setStatus('mandatory')
if mibBuilder.loadTexts: starVciBitRangeValue.setDescription('')
starAvailableVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAvailableVpiValue.setStatus('mandatory')
if mibBuilder.loadTexts: starAvailableVpiValue.setDescription('')
starLoopbackCtrTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 5), )
if mibBuilder.loadTexts: starLoopbackCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrTable.setDescription('This table contains objects that allow an NMS operator to setup and start a loopback test')
starLoopbackCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"))
if mibBuilder.loadTexts: starLoopbackCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrEntry.setDescription('')
starLoopbackCtrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrPortIndex.setDescription('Port number for this loopback request')
starLoopbackCtrVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrVpi.setDescription('VPI for this loopback request')
starLoopbackCtrVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrVci.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrVci.setDescription('VCI for this loopback request')
starLoopbackCtrDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrDeviceId.setDescription('Device Id for the specified chip type')
starLoopbackCtrType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oam-f4", 1), ("oam-f5", 2), ("phyline", 3), ("physsu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrType.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrType.setDescription('Type of loopback, OAM loopback F4, F5 or physical level loopback')
starLoopbackCtrEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment", 1), ("connection-end", 2), ("intermediate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrEndType.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrEndType.setDescription('Loopback end type')
starLoopbackCtrTxCellNo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrTxCellNo.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrTxCellNo.setDescription('Cell numbers to send request for loopback test')
starLoopbackCtrTimetoWait = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrTimetoWait.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrTimetoWait.setDescription('Interval in seconds to wait for the loopbacked cell to arrive after sending')
starLoopbackCtrSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initrcvphy", 1), ("initrcvatm", 2), ("initsender", 3), ("finishreceiver", 4), ("finishsender", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrSetup.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrSetup.setDescription('Setup request for specified command. All parameters related to each command should be preset before initiating this action')
starLoopbackCtrMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrMethod.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrMethod.setDescription('Defines how cell is to be loopbacked. This field is only used for the receiver of the loopback')
starLoopbackCtrGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGeneration.setDescription('Defines how loopback cell is generated. This field is only used by the sender of the loopback')
starLoopbackCtrInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gcid", 1), ("vcci", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrInputType.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrInputType.setDescription('Describes what information will be used to setup the loopback, either all of GCID or Vpi/Vci values')
starLoopbackCtrPdhNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrPdhNum.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrPdhNum.setDescription('Channel # used for PDH loopbacks')
starLoopbackCtrCellSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrCellSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrCellSpeed.setDescription('Future entry for how many cells to be generated per second')
starLoopbackCtrGCIDNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDNeId.setDescription('Node Id from GCID when GCID Input type is selected')
starLoopbackCtrGCIDSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDSlotIndex.setDescription('Slot Id from GCID when GCID Input type is selected')
starLoopbackCtrGCIDPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDPortIndex.setDescription('Port Id from GCID when GCID Input type is selected')
starLoopbackCtrGCIDModuleIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDModuleIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDModuleIfType.setDescription('Module Interface type from GCID when GCID Input type is selected')
starLoopbackCtrGCIDVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDVpi.setDescription('VPI from GCID when GCID Input type is selected')
starLoopbackCtrGCIDVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDVci.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDVci.setDescription('VCI from GCID when GCID Input type is selected')
starLoopbackCtrGCIDDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDDlci.setDescription('DLCI from GCID when GCID Input type is selected and board is Frame Relay type')
starLoopbackCtrGCIDTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDTimeSlot.setDescription('Timeslot from GCID when GCID Input type is selected')
starLoopbackCtrGCIDLeafNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGCIDLeafNum.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGCIDLeafNum.setDescription('Lear number from GCID when GCID Input type is selected')
starLoopbackCtrAssignedSessionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrAssignedSessionNo.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrAssignedSessionNo.setDescription('NMS Assigned session number for this loopback request')
starLoopbackCtrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("intraloop", 1), ("interloop", 2), ("remoteloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrArea.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrArea.setDescription('Method for loopback test')
starLoopbackCtrChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userchan", 1), ("looptestchan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrChannelType.setDescription('Defines the channel to be used for loopback test, either a User channel or a predefined test channel')
starLoopbackCtrLastSetupResult = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLoopbackCtrLastSetupResult.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrLastSetupResult.setDescription('Success or failure of last setup request')
starLoopbackCtrPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrPortNum.setDescription('port number of loopback test')
starLoopbackCtrGenCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("connection-end", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starLoopbackCtrGenCellType.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackCtrGenCellType.setDescription('type of cell to be generated')
starLoopbackResultTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 6), )
if mibBuilder.loadTexts: starLoopbackResultTable.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackResultTable.setDescription('This table contains loopback result information and is indexed by Slot number, Device Index and Session number')
starLoopbackResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 6, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"))
if mibBuilder.loadTexts: starLoopbackResultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackResultEntry.setDescription('')
starLoopbackResultGeneratedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLoopbackResultGeneratedCells.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackResultGeneratedCells.setDescription('Number of generated cells for loopback test at this session')
starLoopbackResultReturnedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLoopbackResultReturnedCells.setStatus('mandatory')
if mibBuilder.loadTexts: starLoopbackResultReturnedCells.setDescription('Number of returned cells for loopback test at this session')
starPmCtrTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 7), )
if mibBuilder.loadTexts: starPmCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrTable.setDescription('This table allows an NMS operator to setup a Performance Monitoring session for a specific device and is indexed by Slot number')
starPmCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"))
if mibBuilder.loadTexts: starPmCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrEntry.setDescription('')
starPmCtrUpcId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrUpcId.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrUpcId.setDescription('UPC Device id for Performance Monitor control')
starPmCtrVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrVpi.setDescription('VPI for Performance Monitor control')
starPmCtrVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrVci.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrVci.setDescription('VCI for Performance Monitor control')
starPmCtrSegmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("segmentvpc", 1), ("end-to-endvpc", 2), ("segmentvcc", 3), ("end-to-endvcc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrSegmentType.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrSegmentType.setDescription('Segment type for Performance Monitor control')
starPmCtrNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("orignode", 1), ("termnode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrNodeType.setDescription('Node type (Origin or Termination) for Performance Monitor control')
starPmCtrBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrBlockSize.setDescription('Block size of Performance Monitoring')
starPmCtrPmCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clp0", 0), ("clp1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrPmCellClp.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrPmCellClp.setDescription('value of Clp in Performance Monitoring')
starPmCtrBackRptGen = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nobwgr", 0), ("bwgrGen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrBackRptGen.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrBackRptGen.setDescription('')
starPmCtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrActivate.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrActivate.setDescription('Status of activate Performance Monitor. Used by NMS operator to activate/deactivate a Performance Monitoring session')
starPmCtrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starPmCtrStart.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrStart.setDescription('Starts/Stops a Performance Monitoring session')
starPmCtrLastAssignedSession = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmCtrLastAssignedSession.setStatus('mandatory')
if mibBuilder.loadTexts: starPmCtrLastAssignedSession.setDescription('Performance Monitoring session number assigned by the last PM activate request')
starPmTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 8), )
if mibBuilder.loadTexts: starPmTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPmTable.setDescription('This table contains Performance Monitoring result information and is indexed by Slot number, Device index and Session number')
starPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPmCtrUpcId"), (0, "STARNE-MIB", "starPmCtrLastAssignedSession"))
if mibBuilder.loadTexts: starPmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPmEntry.setDescription('')
starPmTotalCellClp0Count = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmTotalCellClp0Count.setStatus('mandatory')
if mibBuilder.loadTexts: starPmTotalCellClp0Count.setDescription('Total number of CLPO cell count for this PM Session')
starPmTotalCellClp01Count = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmTotalCellClp01Count.setStatus('mandatory')
if mibBuilder.loadTexts: starPmTotalCellClp01Count.setDescription('Total number of CLPO1 cell count for this PM Session')
starPmLostCellClp0Count = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmLostCellClp0Count.setStatus('mandatory')
if mibBuilder.loadTexts: starPmLostCellClp0Count.setDescription('Number of CLP0 lost cells for this PM session')
starPmLostCellClp01Count = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmLostCellClp01Count.setStatus('mandatory')
if mibBuilder.loadTexts: starPmLostCellClp01Count.setDescription('Number of CLP1 lost cells for this PM session')
starPmErroredCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmErroredCellCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPmErroredCellCount.setDescription('Number of errored cells for this PM session')
starPmMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmMisinsertedCellCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPmMisinsertedCellCount.setDescription('Number of misinserted cells for this PM session')
starPmSeverelyErroredBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPmSeverelyErroredBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPmSeverelyErroredBlockCount.setDescription('Number of severely errored blocks for this PM session')
starPvcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 9), )
if mibBuilder.loadTexts: starPvcRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteTable.setDescription('')
starPvcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1), ).setIndexNames((0, "STARNE-MIB", "starPvcRouteGCIDSlotId"), (0, "STARNE-MIB", "starPvcRouteGCIDPortId"), (0, "STARNE-MIB", "starPvcRouteGCIDIfType"), (0, "STARNE-MIB", "starPvcRouteGCIDConnId"), (0, "STARNE-MIB", "starPvcRouteGCIDLeafId"), (0, "STARNE-MIB", "starPvcRouteHopIndex"))
if mibBuilder.loadTexts: starPvcRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteEntry.setDescription('')
starPvcRouteGCIDSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteGCIDSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteGCIDSlotId.setDescription('Slot # of GCID for pvcm')
starPvcRouteGCIDPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteGCIDPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteGCIDPortId.setDescription('Port # of GCID for pvcm')
starPvcRouteGCIDIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteGCIDIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteGCIDIfType.setDescription('Interface type of GCID for pvcm')
starPvcRouteGCIDConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteGCIDConnId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteGCIDConnId.setDescription('connection # of GCID for pvcm VPI = 16bits & VCI = 16bits for ATM, DLCI = 32bits for FRAME RELAY or, TIMESLOT = 32bits for PDH')
starPvcRouteGCIDLeafId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteGCIDLeafId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteGCIDLeafId.setDescription('')
starPvcRouteHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteHopIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteHopIndex.setDescription('Sequential index into this table, 0=First Hop, 1=Next Hop, etc.')
starPvcRouteOutgoingNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteOutgoingNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteOutgoingNeId.setDescription('Current Star Node Id')
starPvcRouteOutgoingNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("transit", 2), ("dest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteOutgoingNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteOutgoingNodeType.setDescription('Identifier of Star Node in route path')
starPvcRouteOutgoingModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteOutgoingModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteOutgoingModuleId.setDescription('Slot number of outgoing board for this route')
starPvcRouteOutgoingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteOutgoingPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteOutgoingPortId.setDescription('Port number of outgoing port for this route')
starCcCtrTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 10), )
if mibBuilder.loadTexts: starCcCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrTable.setDescription('This table contains objects that allow an NMS operator to setup and start a Continuity Check test')
starCcCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"))
if mibBuilder.loadTexts: starCcCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrEntry.setDescription('')
starCcCtrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrPortIndex.setDescription('Port number for this continuity check request')
starCcCtrVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrVpi.setDescription('VPI for this continuity check request')
starCcCtrVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrVci.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrVci.setDescription('VCI for this continuity check request')
starCcCtrType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oam-f4", 1), ("oam-f5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrType.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrType.setDescription('Type of continuity check, OAM F4, F5 or physical level continuity check, currently only F5')
starCcCtrEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("connection-end", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrEndType.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrEndType.setDescription('Continuity check end type')
starCcCtrSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initccsender", 1), ("initccreceiver", 2), ("finishccreceiver", 3), ("finishccsender", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrSetup.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrSetup.setDescription('Setup request for specified command. All parameters related to each command should be preset before initiating this action')
starCcCtrInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gcid", 1), ("vcci", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrInputType.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrInputType.setDescription('Describes what information will be used to setup the continuity check, either all of GCID or Vpi/Vci values')
starCcCtrGCIDNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDNeId.setDescription('Node Id from GCID when GCID Input type is selected')
starCcCtrGCIDSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDSlotIndex.setDescription('Slot Id from GCID when GCID Input type is selected')
starCcCtrGCIDPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDPortIndex.setDescription('Port Id from GCID when GCID Input type is selected')
starCcCtrGCIDModuleIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDModuleIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDModuleIfType.setDescription('Module Interface type from GCID when GCID Input type is selected')
starCcCtrGCIDVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDVpi.setDescription('VPI from GCID when GCID Input type is selected')
starCcCtrGCIDVci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDVci.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDVci.setDescription('VCI from GCID when GCID Input type is selected')
starCcCtrGCIDDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDDlci.setDescription('DLCI from GCID when GCID Input type is selected and board is Frame Relay type')
starCcCtrGCIDTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDTimeSlot.setDescription('TimeSlot from GCID when board is PIU')
starCcCtrGCIDLeafNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 10, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starCcCtrGCIDLeafNum.setStatus('mandatory')
if mibBuilder.loadTexts: starCcCtrGCIDLeafNum.setDescription('Lear number from GCID when GCID Input type is selected')
starPortCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 11), )
if mibBuilder.loadTexts: starPortCellStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPortCellStatsTable.setDescription('This table contains statistics gathered on a specific port and is indexed by Slot number, Port number ')
starPortCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starPortCellStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPortCellStatsEntry.setDescription('')
starPortTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: starPortTimeStamp.setDescription('Time Stamp in Seconds')
starPortRtCellsRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRtCellsRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRtCellsRxCount.setDescription('Number of cells received in RT level for this port')
starPortRtCellsDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRtCellsDroppedCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRtCellsDroppedCount.setDescription('Number of cells dropped in RT level for this VP/VC')
starPortRtCellsCongCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRtCellsCongCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortRtCellsCongCount.setDescription('Number of cells congestion in RT level for this VP/VC')
starPortUpcCellsCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUpcCellsCLP0.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUpcCellsCLP0.setDescription('Number of cells with CLP0 in UPC level for this VP/VC')
starPortUpcTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUpcTotalCells.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUpcTotalCells.setDescription('Number of total cells in UPC level for this VP/VC')
starPortUpcGcra0ViolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUpcGcra0ViolCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUpcGcra0ViolCount.setDescription('Number of total GCRA0 violation cells in UPC level for this VP/VC')
starPortUpcGcra1ViolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUpcGcra1ViolCount.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUpcGcra1ViolCount.setDescription('Number of total GCRA0 violation cells in UPC level for this VP/VC')
starPortUpcTotalOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortUpcTotalOAMCells.setStatus('mandatory')
if mibBuilder.loadTexts: starPortUpcTotalOAMCells.setDescription('Number of total OAM cells in UPC level for this VP/VC')
starAtmPointTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 13), )
if mibBuilder.loadTexts: starAtmPointTable.setStatus('mandatory')
if mibBuilder.loadTexts: starAtmPointTable.setDescription('')
starAtmPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 13, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"), (0, "STARNE-MIB", "starLoopbackCtrGCIDNeId"), (0, "STARNE-MIB", "starLoopbackCtrGCIDSlotIndex"), (0, "STARNE-MIB", "starLoopbackCtrGCIDPortIndex"), (0, "STARNE-MIB", "starLoopbackCtrGCIDModuleIfType"), (0, "STARNE-MIB", "starLoopbackCtrGCIDVpi"), (0, "STARNE-MIB", "starLoopbackCtrGCIDVci"), (0, "STARNE-MIB", "starLoopbackCtrGCIDDlci"), (0, "STARNE-MIB", "starLoopbackCtrGCIDTimeSlot"), (0, "STARNE-MIB", "starLoopbackCtrGCIDLeafNum"))
if mibBuilder.loadTexts: starAtmPointEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starAtmPointEntry.setDescription('')
starAtmPointPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segmentend", 1), ("connectionend", 2), ("intermediate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starAtmPointPointType.setStatus('mandatory')
if mibBuilder.loadTexts: starAtmPointPointType.setDescription('')
starSvcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 14), )
if mibBuilder.loadTexts: starSvcRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteTable.setDescription('')
starSvcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1), ).setIndexNames((0, "STARNE-MIB", "starSvcRouteGCIDSlotId"), (0, "STARNE-MIB", "starSvcRouteGCIDPortId"), (0, "STARNE-MIB", "starSvcRouteGCIDIfType"), (0, "STARNE-MIB", "starSvcRouteGCIDConnId"), (0, "STARNE-MIB", "starSvcRouteGCIDLeafId"), (0, "STARNE-MIB", "starSvcRouteHopIndex"))
if mibBuilder.loadTexts: starSvcRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteEntry.setDescription('')
starSvcRouteGCIDSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteGCIDSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteGCIDSlotId.setDescription('slot # of GCID for svcm')
starSvcRouteGCIDPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteGCIDPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteGCIDPortId.setDescription('port # of GCID for svcm')
starSvcRouteGCIDIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteGCIDIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteGCIDIfType.setDescription('interface type of GCID for svcm')
starSvcRouteGCIDConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteGCIDConnId.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteGCIDConnId.setDescription('connection # of GCID for svcm VPI = 16bits & VCI = 16bits for ATM, DLCI = 32bits for FRAME RELAY or, TIMESLOT = 32bits for PDH')
starSvcRouteGCIDLeafId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteGCIDLeafId.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteGCIDLeafId.setDescription('')
starSvcRouteHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteHopIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteHopIndex.setDescription('Sequential index into this table, 0=First Hop, 1=Next Hop, etc.')
starSvcRouteOutgoingNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteOutgoingNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteOutgoingNeId.setDescription('Current Star Node Id')
starSvcRouteOutgoingNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("transit", 2), ("dest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteOutgoingNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteOutgoingNodeType.setDescription('Identifier of Star Node in route path')
starSvcRouteOutgoingModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteOutgoingModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteOutgoingModuleId.setDescription('Slot number of outgoing board for this route')
starSvcRouteOutgoingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcRouteOutgoingPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcRouteOutgoingPortId.setDescription('Port number of outgoing port for this route')
starPVCRouteTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 4, 15), )
if mibBuilder.loadTexts: starPVCRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: starPVCRouteTable.setDescription('Route table for route query by BBCP')
starPVCRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"), (0, "STARNE-MIB", "starPvcRouteAdjacentNodeType"), (0, "STARNE-MIB", "starPvcRouteSrcGCIDNeId"), (0, "STARNE-MIB", "starPvcRouteSrcGCIDSlotId"), (0, "STARNE-MIB", "starPvcRouteSrcGCIDPortId"), (0, "STARNE-MIB", "starPvcRouteSrcGCIDIfType"), (0, "STARNE-MIB", "starPvcRouteSrcGCIDConnId"), (0, "STARNE-MIB", "starPvcRouteSrcGCIDLeafId"))
if mibBuilder.loadTexts: starPVCRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starPVCRouteEntry.setDescription('')
starPvcRouteSrcGCIDNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteSrcGCIDNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteSrcGCIDNeId.setDescription('NE # of GCID for route query (BBCP)')
starPvcRouteSrcGCIDSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteSrcGCIDSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteSrcGCIDSlotId.setDescription('slot # of GCID for route query (BBCP)')
starPvcRouteSrcGCIDPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteSrcGCIDPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteSrcGCIDPortId.setDescription('port # of GCID for route query (BBCP)')
starPvcRouteSrcGCIDIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteSrcGCIDIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteSrcGCIDIfType.setDescription('interface type of GCID for route query (BBCP)')
starPvcRouteSrcGCIDConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteSrcGCIDConnId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteSrcGCIDConnId.setDescription('connection # of GCID for route query (BBCP) VPI = 16bits & VCI = 16bits for ATM, DLCI = 32bits for FRAME RELAY or, TIMESLOT = 32bits for PDH')
starPvcRouteSrcGCIDLeafId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteSrcGCIDLeafId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteSrcGCIDLeafId.setDescription('')
starPvcRouteAdjacentNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteAdjacentNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteAdjacentNeId.setDescription('Current Star Node Id')
starPvcRouteAdjacentSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteAdjacentSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteAdjacentSlotId.setDescription('Slot number of outgoing board for this route')
starPvcRouteAdjacentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteAdjacentPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteAdjacentPortId.setDescription('Slot number of outgoing board for this route')
starPvcRouteAdjacentNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("source", 1), ("incoming", 2), ("outgoing", 3), ("dest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteAdjacentNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteAdjacentNodeType.setDescription('Identifier of Star Node in adjacent route path (role)')
starPvcRouteLocalNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("source", 1), ("incoming", 2), ("outgoing", 3), ("dest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteLocalNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteLocalNodeType.setDescription('Identifier of Star Node in local route path (role)')
starPvcRouteLocalIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteLocalIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteLocalIfType.setDescription('Slot number of outgoing board for this route')
starPvcRouteLocalConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteLocalConnId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteLocalConnId.setDescription('Slot number of outgoing board for this route')
starPvcRouteLocalLeafId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteLocalLeafId.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteLocalLeafId.setDescription('Slot number of outgoing board for this route')
starPvcRouteQueryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 4, 15, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcRouteQueryDescr.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcRouteQueryDescr.setDescription('Slot number of outgoing board for this route')
starBackboneLinkTable = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 5, 1), )
if mibBuilder.loadTexts: starBackboneLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkTable.setDescription('This table contains information for BackBone links and is indexed by a Backbone Link Id')
starBackboneLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 5, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIndex"), (0, "STARNE-MIB", "starPortIndex"))
if mibBuilder.loadTexts: starBackboneLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkEntry.setDescription('')
starBackboneLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBackboneLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkStatus.setDescription('Status of this Backbone Link')
starBackboneLinkDestNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBackboneLinkDestNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkDestNodeId.setDescription('Destination Node for this Backbone Link')
starBackboneLinkDestSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBackboneLinkDestSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkDestSlotId.setDescription('Destination Slot number of this Backbone Link Link')
starBackboneLinkDestPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBackboneLinkDestPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkDestPortId.setDescription('Destination Port number of this Backbone Link Link')
starBackboneLinkIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBackboneLinkIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkIfType.setDescription('Interface port type of this Backbone Link Link')
starBackboneLinkConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBackboneLinkConnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starBackboneLinkConnStatus.setDescription('Status of this Backbone Link Connection for Warning')
starFiuModuleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 16))
starFrlExtnModuleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1))
frlPortInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 1), )
if mibBuilder.loadTexts: frlPortInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: frlPortInfoTbl.setDescription('This table is an extension to the Port table in RFC1604, viz the frame relay mib.')
frlPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 1, 1), ).setIndexNames((0, "STARNE-MIB", "frlPortInfoSlotId"), (0, "STARNE-MIB", "frlPortInfoPortId"))
if mibBuilder.loadTexts: frlPortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frlPortInfoEntry.setDescription('An entry into FrlPortInfoTbl.')
frlPortInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frlPortInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: frlPortInfoSlotId.setDescription('This object indicates the slot id.')
frlPortInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frlPortInfoPortId.setStatus('mandatory')
if mibBuilder.loadTexts: frlPortInfoPortId.setDescription('This object indicates the port id.')
frlPortSigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frlPortSigMode.setStatus('mandatory')
if mibBuilder.loadTexts: frlPortSigMode.setDescription('This object indicates if the port is emulating user,network,bi-directional,bidir with sync.')
frlPortActiveDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frlPortActiveDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frlPortActiveDlci.setDescription("This object indicates the num of active DLCi's on the port.")
frlPvcEndptInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2), )
if mibBuilder.loadTexts: frlPvcEndptInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: frlPvcEndptInfoTbl.setDescription('This table ia an extension for the Frame relay PVC endpt table of Rfc1604, viz the Frame relay mib.')
frlPvcEndptInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1), ).setIndexNames((0, "STARNE-MIB", "frlPvcEndptInfoSlotId"), (0, "STARNE-MIB", "frlPvcEndptInfoPortId"), (0, "STARNE-MIB", "frlPvcEndptInfoDlci"))
if mibBuilder.loadTexts: frlPvcEndptInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frlPvcEndptInfoEntry.setDescription('An entry into FrlPvcEndptTbl.')
frlPvcEndptInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frlPvcEndptInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: frlPvcEndptInfoSlotId.setDescription('This object indicates the slot id.')
frlPvcEndptInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frlPvcEndptInfoPortId.setStatus('mandatory')
if mibBuilder.loadTexts: frlPvcEndptInfoPortId.setDescription('This object indicates the port id.')
frlPvcEndptInfoDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frlPvcEndptInfoDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frlPvcEndptInfoDlci.setDescription('This object indicates the Dlci .')
frPvcEndptInfoTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptInfoTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptInfoTimeStamp.setDescription('This object indicates time slot .')
frPvcMarkedDe = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcMarkedDe.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcMarkedDe.setDescription('This object indicates the num of frames received with the DE bit set .')
frPvcEndptOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptOperStatus.setDescription('This object indicates if the PVC is active or not.')
frPvcEndptNoRecvFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptNoRecvFECN.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptNoRecvFECN.setDescription('This object indicates number of received frames with FECN bit set for this dlci.')
frPvcEndptNoTxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptNoTxFECN.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptNoTxFECN.setDescription('This object indicates number of transmitted frames with FECN bit set for this dlci.')
frPvcEndptNoRecvBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptNoRecvBECN.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptNoRecvBECN.setDescription('This object indicates number of received frames with BECN bit set for this dlci.')
frPvcEndptNoTxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptNoTxBECN.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptNoTxBECN.setDescription('This object indicates number of transmitted frames with BECN bit set for this dlci.')
frPvcEndptNoTxDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptNoTxDE.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptNoTxDE.setDescription('This object indicates number of transmitted frames with DE bit set for this dlci.')
frPvcEndptNoDiscardWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptNoDiscardWithDE.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptNoDiscardWithDE.setDescription('This object indicates number of frames discarded with DE bit set for this dlci.')
frPvcEndptNoDiscardWoutDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptNoDiscardWoutDE.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptNoDiscardWoutDE.setDescription('This object indicates number of frames discarded with out DE bit set for this dlci.')
frPvcEndptInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcEndptInDEFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frPvcEndptInDEFrames.setDescription('From RFC1604')
starFiuSscsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2))
starFiuSscsIfInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1), )
if mibBuilder.loadTexts: starFiuSscsIfInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfInfoTbl.setDescription('This table provides information pertaining to the Interface of frame relay service specific convergence subfunction.')
starFiuSscsIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starFiuIfInfoSlotId"), (0, "STARNE-MIB", "starFiuIfInfoPortId"))
if mibBuilder.loadTexts: starFiuSscsIfInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfInfoEntry.setDescription('An entry into FiuSscsIfInfoTbl.')
starFiuIfInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuIfInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuIfInfoSlotId.setDescription('This object indicates the slot id.')
starFiuIfInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuIfInfoPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuIfInfoPortId.setDescription('This object indicates the port id.')
starFiuFrcsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("defined", 1), ("undefined", 2), ("out-of-service", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfAdminStatus.setDescription('This object describes the administrative status of Fiu card.')
starFiuFrcsIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfOperStatus.setDescription('Indicates the operational status of the active Fiu card.')
starFiuFrcsIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfLastChange.setDescription('Indicates the elapsed time since last oper_status change in timeticks .')
starFiuFrcsIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfInOctets.setDescription('Indicates the number of received octets.')
starFiuFrcsIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfInUcastPkts.setDescription('Indicates the number of successfully received frames.')
starFiuFrcsIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfInDiscards.setDescription(' Indicates the number of discarded frames due to congestion or policing.')
starFiuFrcsIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfInErrors.setDescription('Indicates the number of received frames discarded due to the following errors - invalid DLCI.')
starFiuFrcsIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfOutOctets.setDescription('Indicates the number of transmitted octets.')
starFiuFrcsIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfOutUcastPkts.setDescription('Indicates the number of successfully transmitted frames.')
starFiuFrcsIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfOutDiscards.setDescription('Indicates the number of discarded frames due to congestion.')
starFiuFrcsIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsIfOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsIfOutErrors.setDescription('Indicates the number of transmit frames discarded due to the following errors-invalid DLCI,incorrect ATM header.')
starFiuSscsPvcInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2), )
if mibBuilder.loadTexts: starFiuSscsPvcInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsPvcInfoTbl.setDescription('This table provides the information about the Fr-SSCS pvc, ie., on a per DLCI basis.')
starFiuSscsPvcInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starFiuPvcInfoSlotId"), (0, "STARNE-MIB", "starFiuPvcInfoPortId"), (0, "STARNE-MIB", "starFiuPvcInfoDlci"))
if mibBuilder.loadTexts: starFiuSscsPvcInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsPvcInfoEntry.setDescription('An entry into Fiu PVC table for SSCS.')
starFiuPvcInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuPvcInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuPvcInfoSlotId.setDescription('This object indicates the slot id.')
starFiuPvcInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuPvcInfoPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuPvcInfoPortId.setDescription('This object indicates the port id.')
starFiuPvcInfoDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuPvcInfoDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuPvcInfoDlci.setDescription('This object indicates the Dlci value.')
starFiuFrcsPvcEndptInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInFrames.setDescription(' Indicates the number of received frames.')
starFiuFrcsPvcEndptOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutFrames.setDescription('Indicates the number of frames successfully sent out.')
starFiuFrcsPvcEndptInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInOctets.setDescription('Indicates the number of received octets.')
starFiuFrcsPvcEndptOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutOctets.setDescription('Indicates the number of octets successfully sent out.')
starFiuFrcsPvcConnectAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("defined", 1), ("undefined", 2), ("out-of-service", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcConnectAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcConnectAdminStatus.setDescription('Indicates the number of octets successfully sent out .')
starFiuFrcsPvcEndptOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOperStatus.setDescription(' Indicates the operational status of this port.')
starFiuFrcsPvcEndptLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptLastChange.setDescription('Indicates the elapsed time since last oper_status change in timeticks.')
starFiuFrcsPvcTxVp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcTxVp.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcTxVp.setDescription('Indicates the VPI that the Dlci is mapped for Tx.')
starFiuFrcsPvcTxVc = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcTxVc.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcTxVc.setDescription('Indicates the VCI that the Dlci is mapped for Tx.')
starFiuFrcsPvcRxVp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcRxVp.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcRxVp.setDescription('Indicates the VPI that the Dlci is mapped for Rx.')
starFiuFrcsPvcRxVc = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcRxVc.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcRxVc.setDescription('Indicates the VCI that the Dlci is mapped for Rx.')
starFiuFrcsPvcEndptOutOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutOamCells.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutOamCells.setDescription('Indicates the number of oam cells transmitted.')
starFiuFrcsPvcEndptInOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInOamCells.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInOamCells.setDescription('Indicates the number of oam cells received.')
starFiuFrcsPvcEndptOutRawCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutRawCells.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptOutRawCells.setDescription('Indicates the number of raw cells transmitted.')
starFiuFrcsPvcEndptInRawCells = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInRawCells.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuFrcsPvcEndptInRawCells.setDescription('Indicates the number of raw cells received.')
starFrMgmtStatisticInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3), )
if mibBuilder.loadTexts: starFrMgmtStatisticInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starFrMgmtStatisticInfoTbl.setDescription('An entry into Frame relay management table- it provides statistics info.')
starFrMgmtStatisticInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starFrMgmtStatisticSlotId"), (0, "STARNE-MIB", "starFrMgmtStatisticPortId"))
if mibBuilder.loadTexts: starFrMgmtStatisticInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFrMgmtStatisticInfoEntry.setDescription("An entry into Fiu's Frame relay management table.")
starFrMgmtStatisticSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrMgmtStatisticSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFrMgmtStatisticSlotId.setDescription('This object indicates the slot id.')
starFrMgmtStatisticPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrMgmtStatisticPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starFrMgmtStatisticPortId.setDescription('This object indicates the Port id.')
starFrlMgtInKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtInKeepalive.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtInKeepalive.setDescription('Incoming keep alives.')
starFrlMgtOutKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtOutKeepalive.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtOutKeepalive.setDescription('Outgoing keep alives.')
starFrlMgtInStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtInStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtInStatus.setDescription('Incoming Status messages.')
starFrlMgtOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtOutStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtOutStatus.setDescription('Outgoing Status Messages.')
starFrlMgtInStatusReply = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtInStatusReply.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtInStatusReply.setDescription('Status of the reply for an incoming status message.')
starFrlMgtOutStatusReply = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtOutStatusReply.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtOutStatusReply.setDescription('Status of the reply for an outgoing status message.')
starFrlMgtInAsyncUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtInAsyncUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtInAsyncUpdates.setDescription('Info about the incoming asynchronous updates.')
starFrlMgtOutAsyncUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtOutAsyncUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtOutAsyncUpdates.setDescription('Info about the outgoing asynchronous updates.')
starFrlMgtNoMismatchSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtNoMismatchSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtNoMismatchSeqNo.setDescription('Info about number of mismatched sequence number in the LMI message.')
starFrlMgtNoT392TimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtNoT392TimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtNoT392TimeOut.setDescription('Info about number of T392 time-out.')
starFrlMgtNoRecvErDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtNoRecvErDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtNoRecvErDlci.setDescription('Info about number of received error DLCI.')
starFrlMgtLastRecvErDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrlMgtLastRecvErDlci.setStatus('mandatory')
if mibBuilder.loadTexts: starFrlMgtLastRecvErDlci.setDescription('Info about last received errored DLCI value.')
starFiuPmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 4))
starFrHdlcPmInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 4, 1), )
if mibBuilder.loadTexts: starFrHdlcPmInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starFrHdlcPmInfoTbl.setDescription('An entry into Frame relay Performance management table- Hdlc Tx & RX on a port basis.')
starFrHdlcPmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 4, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starFrHdlcPmSlotId"), (0, "STARNE-MIB", "starFrHdlcPmPortId"))
if mibBuilder.loadTexts: starFrHdlcPmInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFrHdlcPmInfoEntry.setDescription("An entry into Fiu's Frame relay performance management table.")
starFrHdlcPmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrHdlcPmSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFrHdlcPmSlotId.setDescription('This object indicates the slot id.')
starFrHdlcPmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrHdlcPmPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starFrHdlcPmPortId.setDescription('This object indicates the Port id.')
starFrHdlcRxOverrunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrHdlcRxOverrunCount.setStatus('mandatory')
if mibBuilder.loadTexts: starFrHdlcRxOverrunCount.setDescription('This object indicates the number of times the Rx overran - Performance Manager specific.')
starFrHdlcTxUnderrunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrHdlcTxUnderrunCount.setStatus('mandatory')
if mibBuilder.loadTexts: starFrHdlcTxUnderrunCount.setDescription('This object indicates the number of times the Tx underran - Performance Manager specific.')
starFrCongStatInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5), )
if mibBuilder.loadTexts: starFrCongStatInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongStatInfoTbl.setDescription('An entry into Frame relay Congestion Control Statistics Table based on slot, port, DLCI and Time Stamp')
starFrCongStatInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1), ).setIndexNames((0, "STARNE-MIB", "starFrCongStatSlotId"), (0, "STARNE-MIB", "starFrCongStatPortId"))
if mibBuilder.loadTexts: starFrCongStatInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongStatInfoEntry.setDescription("An entry into Fiu's Frame relay Congestion Control Statistics table.")
starFrCongStatSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongStatSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongStatSlotId.setDescription('This object indicates the slot id.')
starFrCongStatPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongStatPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongStatPortId.setDescription('This object indicates the Port id.')
starFrCongStatTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongStatTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongStatTimeStamp.setDescription('This object indicates Time Stamp. ')
starFrCongNoRecvFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoRecvFECN.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoRecvFECN.setDescription('Number of received frames with FECN bit set. ')
starFrCongNoTxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoTxFECN.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoTxFECN.setDescription('Number of transmitted frames with FECN bit set. ')
starFrCongNoRecvBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoRecvBECN.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoRecvBECN.setDescription('Number of received frames with BECN bit set. ')
starFrCongNoTxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoTxBECN.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoTxBECN.setDescription('Number of transmitted frames with BECN bit set. ')
starFrCongNoRecvDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoRecvDE.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoRecvDE.setDescription('Number of frames received with DE bit set.')
starFrCongNoTxDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoTxDE.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoTxDE.setDescription('Number of frames transmitted with DE bit set. ')
starFrCongNoMarkDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoMarkDE.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoMarkDE.setDescription('Number of frames marked with DE bit in the Network.')
starFrCongNoDiscardWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoDiscardWithDE.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoDiscardWithDE.setDescription('Number of frames discarded with DE bit set. ')
starFrCongNoDiscardWoutDE = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrCongNoDiscardWoutDE.setStatus('mandatory')
if mibBuilder.loadTexts: starFrCongNoDiscardWoutDE.setDescription('Number of frames discarded without DE bit set.')
starFiuSscsIfPerfTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3), )
if mibBuilder.loadTexts: starFiuSscsIfPerfTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfTbl.setDescription('An entry into Frame relay transmit receive traffic statistics table based on portId.')
starFiuSscsIfPerfTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starFiuSscsIfPerfSlotId"), (0, "STARNE-MIB", "starFiuSscsIfPerfPortId"))
if mibBuilder.loadTexts: starFiuSscsIfPerfTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfTblEntry.setDescription("An entry into Fiu's Frame relay Tx/Rx permormance table.")
starFiuSscsIfPerfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfSlotId.setDescription('This object indicates the slot id.')
starFiuSscsIfPerfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfPortId.setDescription('This object indicates the Port id.')
starFiuSscsIfPerfTmStp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfTmStp.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfTmStp.setDescription('This object indicates the time stamp')
starFiuSscsIfPerfRxPktSz = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfRxPktSz.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfRxPktSz.setDescription('Average receive frame size.')
starFiuSscsIfPerfTxpktSz = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfTxpktSz.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfTxpktSz.setDescription('Average transmitted frame size.')
starFiuSscsIfPerfRxFrPs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfRxFrPs.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfRxFrPs.setDescription('Average received number of frames per second.')
starFiuSscsIfPerfTxFrPs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfTxFrPs.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfTxFrPs.setDescription('Average transmitted number of frames per second.')
starFiuSscsIfPerfRxKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfRxKbps.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfRxKbps.setDescription('Average received number of Kbps .')
starFiuSscsIfPerfTxKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfTxKbps.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfTxKbps.setDescription('Average transmitted number of Kbps.')
starFiuSscsIfPerfRxUt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfRxUt.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfRxUt.setDescription('Received line utilization.')
starFiuSscsIfPerfTxUt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuSscsIfPerfTxUt.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuSscsIfPerfTxUt.setDescription('Transmitted line utilization .')
starfrPVCEndptPerfTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3), )
if mibBuilder.loadTexts: starfrPVCEndptPerfTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfTbl.setDescription('An entry into Frame relay transmit receive traffic statistics table based on portId and DLCI.')
starfrPVCEndptPerfTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starfrPVCEndptPerfSlotId"), (0, "STARNE-MIB", "starfrPVCEndptPerfPortId"), (0, "STARNE-MIB", "starfrPVCEndptPerfDLCIIndex"))
if mibBuilder.loadTexts: starfrPVCEndptPerfTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfTblEntry.setDescription("An entry into Fiu's Frame relay Tx/Rx permormance table.")
starfrPVCEndptPerfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfSlotId.setDescription('This object indicates the slot id.')
starfrPVCEndptPerfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfPortId.setDescription('This object indicates the Port id.')
starfrPVCEndptPerfDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfDLCIIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfDLCIIndex.setDescription('This object indicates the Dlci value.')
starfrPVCEndptPerfTmStp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfTmStp.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfTmStp.setDescription('This object indicates the time stamp')
starfrPVCEndptPerfRxPktSz = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfRxPktSz.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfRxPktSz.setDescription('Average receive frame size.')
starfrPVCEndptPerfTxpktSz = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfTxpktSz.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfTxpktSz.setDescription('Average transmitted frame size.')
starfrPVCEndptPerfRxFrPs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfRxFrPs.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfRxFrPs.setDescription('Average received number of frames per second.')
starfrPVCEndptPerfTxFrPs = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfTxFrPs.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfTxFrPs.setDescription('Average transmitted number of frames per second.')
starfrPVCEndptPerfRxKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfRxKbps.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfRxKbps.setDescription('Average received number of Kbps .')
starfrPVCEndptPerfTxKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfTxKbps.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfTxKbps.setDescription('Average transmitted number of Kbps.')
starfrPVCEndptPerfRxUt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfRxUt.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfRxUt.setDescription('Received line utilization.')
starfrPVCEndptPerfTxUt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 16, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starfrPVCEndptPerfTxUt.setStatus('mandatory')
if mibBuilder.loadTexts: starfrPVCEndptPerfTxUt.setDescription('Transmitted line utilization .')
starAal5Info = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 17))
starAal5ChannelStatisticsTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1), )
if mibBuilder.loadTexts: starAal5ChannelStatisticsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ChannelStatisticsTbl.setDescription('This table specifies info about the Aal5 channel statistics on VCC basis.')
starAal5ChannelStatisticsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starAal5ChannelStatisticsSlotIdInfo"), (0, "STARNE-MIB", "starAal5ChannelStatisticsChipId"))
if mibBuilder.loadTexts: starAal5ChannelStatisticsInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ChannelStatisticsInfoEntry.setDescription('Gives information about the statistics pertaining to Aal5.')
starAal5ChannelStatisticsSlotIdInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ChannelStatisticsSlotIdInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ChannelStatisticsSlotIdInfo.setDescription('This object indicates the slot id.')
starAal5ChannelStatisticsChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ChannelStatisticsChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ChannelStatisticsChipId.setDescription('This object indicates the chip id.')
starAal5NumPktsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumPktsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumPktsTransmitted.setDescription('This object indicates the num pkts transmitted.')
starAal5NumPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumPktsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumPktsReceived.setDescription('This object indicates the num of pkts received.')
starAal5NumTimesTxQueUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesTxQueUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesTxQueUnderrun.setDescription('This object indicates the num of times the transmit queue underran.')
starAal5NumTimesRxQueUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesRxQueUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesRxQueUnderrun.setDescription('This object indicates the num of times the receive queue underran.')
starAal5NumTimesPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesPktDropped.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesPktDropped.setDescription('This object indicates the num of Packets the receive queue dropped.')
starAal5NumTimesInvalidCPI = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesInvalidCPI.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesInvalidCPI.setDescription('This object indicates Invalid CPI field.')
starAal5NumTimesLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesLengthViolation.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesLengthViolation.setDescription('This object indicates the Length Violation.')
starAal5NumTimesOverRxDataUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesOverRxDataUnit.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesOverRxDataUnit.setDescription('This object indicates the num of Oversized received Data unit.')
starAal5NumTimesCRCViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesCRCViolation.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesCRCViolation.setDescription('This object indicates the CRC Violation.')
starAal5NumTimesTimerExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTimesTimerExpire.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTimesTimerExpire.setDescription('This object indicates the Timer expiration.')
starAal5StatusTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 2), )
if mibBuilder.loadTexts: starAal5StatusTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5StatusTbl.setDescription('Gives information about the Aal5 channel status.')
starAal5StatusInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starAal5ChannelStatusSlotIdInfo"), (0, "STARNE-MIB", "starAal5ChannelStatusChipId"))
if mibBuilder.loadTexts: starAal5StatusInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5StatusInfoEntry.setDescription('An entry in the Aal5InfoTbl.')
starAal5ChannelStatusSlotIdInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ChannelStatusSlotIdInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ChannelStatusSlotIdInfo.setDescription('This object indicates the slot id.')
starAal5ChannelStatusChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ChannelStatusChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ChannelStatusChipId.setDescription('This object indicates the chip id.')
starAal5NumPktsQuedToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumPktsQuedToTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumPktsQuedToTransmit.setDescription('This object indicates the num of packets that have been queued for transmission.')
starAal5NumTxChannelsOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumTxChannelsOpened.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumTxChannelsOpened.setDescription('This object indicates the num of Transmit channels that have been opened.')
starAal5NumRxChannelsOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumRxChannelsOpened.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumRxChannelsOpened.setDescription('This object indicates the num of Receive channels that have been opened.')
starAal5ConfigTxVCTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3), )
if mibBuilder.loadTexts: starAal5ConfigTxVCTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigTxVCTbl.setDescription('Gives information about the Aal5 transmit VC table configuration.')
starAal5ConfigTxVCInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starAal5ConfigTxVCSlotIdInfo"), (0, "STARNE-MIB", "starAal5ConfigTxVCChipId"), (0, "STARNE-MIB", "starAal5ConfigTxVPIndex"), (0, "STARNE-MIB", "starAal5ConfigTxVCIndex"))
if mibBuilder.loadTexts: starAal5ConfigTxVCInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigTxVCInfoEntry.setDescription('An entry in the Aal5ConfigTxVCTbl.')
starAal5ConfigTxVCSlotIdInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigTxVCSlotIdInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigTxVCSlotIdInfo.setDescription('This object indicates the slot id.')
starAal5ConfigTxVCChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigTxVCChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigTxVCChipId.setDescription('This object indicates the chip id.')
starAal5ConfigTxVPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigTxVPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigTxVPIndex.setDescription('This object indicates the Vp index.')
starAal5ConfigTxVCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigTxVCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigTxVCIndex.setDescription('This object indicates the Vc index.')
starAal5TxVCChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5TxVCChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5TxVCChannelType.setDescription('This object indicates the channel type.')
starAal5CpcsUU = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5CpcsUU.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5CpcsUU.setDescription('This object indicates the CPCS-UU type.')
starAal5AvgI = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5AvgI.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5AvgI.setDescription('This object is a traffic shaper parameter.')
starAal5AvgM = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5AvgM.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5AvgM.setDescription('This object is a traffic shaper parameter.')
starAal5PeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5PeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5PeakRate.setDescription('This object indicates the peak data transfer rate.')
starAal5MaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5MaxBurst.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5MaxBurst.setDescription('This object indicates the max burst data transfer rate.')
starAal5Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5Priority.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5Priority.setDescription('This object indicates the priority.')
starAal5ConfigRxVCTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4), )
if mibBuilder.loadTexts: starAal5ConfigRxVCTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigRxVCTbl.setDescription('Gives information about the Receive VC table.')
starAal5ConfigRxVCInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1), ).setIndexNames((0, "STARNE-MIB", "starAal5ConfigRxVCSlotIdInfo"), (0, "STARNE-MIB", "starAal5ConfigRxVCChipId"), (0, "STARNE-MIB", "starAal5ConfigRxVPIndex"), (0, "STARNE-MIB", "starAal5ConfigRxVCIndex"))
if mibBuilder.loadTexts: starAal5ConfigRxVCInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigRxVCInfoEntry.setDescription('This table provides info about the Aal5 Rx an a VCC.')
starAal5ConfigRxVCSlotIdInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigRxVCSlotIdInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigRxVCSlotIdInfo.setDescription('This object indicates the slot id.')
starAal5ConfigRxVCChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigRxVCChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigRxVCChipId.setDescription('This object indicates the chip id.')
starAal5ConfigRxVPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigRxVPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigRxVPIndex.setDescription('This object indicates the Vp index.')
starAal5ConfigRxVCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5ConfigRxVCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5ConfigRxVCIndex.setDescription('This object indicates the Vc index.')
starAal5PoolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5PoolNum.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5PoolNum.setDescription('This object indicates the Pool number.')
starAal5NumOAMDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5NumOAMDrops.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5NumOAMDrops.setDescription('This object indicates the num of cell drops by OAM.')
starAal5RxVCChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5RxVCChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5RxVCChannelType.setDescription('This object indicates the VC channel type.')
starAal5MaxNumSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 17, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAal5MaxNumSegments.setStatus('mandatory')
if mibBuilder.loadTexts: starAal5MaxNumSegments.setDescription('This object indicates the max num of segments.')
starRout88Info = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 18))
starRoutInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1), )
if mibBuilder.loadTexts: starRoutInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutInfoTbl.setDescription('Gives information about the registers in the rout chip.')
starRoutInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIdRoutInfo"), (0, "STARNE-MIB", "starRoutChipId"))
if mibBuilder.loadTexts: starRoutInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutInfoEntry.setDescription('An entry in the RoutInfoTbl.')
starSlotIdRoutInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIdRoutInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIdRoutInfo.setDescription('This object indicates the slot id.')
starRoutChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutChipId.setDescription('This object indicates the rout chip whose info is needed.')
starRoutCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("init", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCurrentState.setDescription('This object describes the operational state of rout chip.')
starRoutChipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutChipVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutChipVersion.setDescription('This object indicates the version number of the rout chip.')
starRoutSramConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ram2x32x8", 1), ("ram2x128x8", 2), ("ram4x128x8", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutSramConfig.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutSramConfig.setDescription('Indicates how the SRAM is configured for the rout chip: it can be two 32K * 8 SRAM, two 128K * 8 SRAM or four 128 * 8 SRAM.')
starRoutBckPressureDly = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noDelay", 1), ("clk2Delay", 2), ("clk4Delay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutBckPressureDly.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutBckPressureDly.setDescription('This object indicates whether there is no back pressure delay, two SE_CLK back pressure delay or four SE_CLK back pressure delay.')
starRoutNumVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutNumVpi.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutNumVpi.setDescription('This object indicates the no of VPI, VCI bits that will be used in the index to the channel control block.')
starRoutConnectToSar = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connectPHY", 1), ("connectSAR", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutConnectToSar.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutConnectToSar.setDescription('This object indicates whether the connection is to the PHY layer or SAR layer.')
starRoutWatchDogConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutWatchDogConfig.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutWatchDogConfig.setDescription('This object indicates the number of cells times into(*) 32 which the UTOPIA TX_FULL must be deasserted at least once.')
starRoutEmptyQstate = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inCongestion", 1), ("notInCongestion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutEmptyQstate.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutEmptyQstate.setDescription('This object indicates whether the empty queue in the rout device is congested or not.')
starRoutTxMarkedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutTxMarkedCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutTxMarkedCellCnt.setDescription('This object indicates the number of cells modulo 16 from the switch fabric which had Tag(9,1) set to 1.')
starRoutRxMarkedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutRxMarkedCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutRxMarkedCellCnt.setDescription('This object indicates the number of cells modulo 16 to the switch fabric which had Tag(9,1) set to 1.')
starRoutTxParityFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutTxParityFailCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutTxParityFailCnt.setDescription('This object indicates the number of times the transmit parity was bad.')
starRoutBpIgnoredCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutBpIgnoredCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutBpIgnoredCnt.setDescription('This object indicates the number of times the back pressure was ignored.')
starRoutLiveFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutLiveFailCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutLiveFailCnt.setDescription('This object indicates the back pressure live fail count.')
starRoutWdFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutWdFailCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutWdFailCnt.setDescription('This object indicates the number of times the output watchdog timer expired.')
starRoutEmptyQCongQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutEmptyQCongQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutEmptyQCongQd.setDescription('This object indicates the number of cell buffers below which the device will enter the empty congestion state.')
starRoutEmptyQCurQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutEmptyQCurQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutEmptyQCurQd.setDescription('This object indicates the current empty queue depth in the rout.')
starRoutRatioAOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutRatioAOrder1.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutRatioAOrder1.setDescription(' This object specifies the num of eighths of the priority Queue in which Queue A is served first.')
starRoutRatioBOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutRatioBOrder1.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutRatioBOrder1.setDescription(' This object specifies the num of eighths of the priority Queue in which Queue B is served first.')
starRoutRatioAOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutRatioAOrder2.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutRatioAOrder2.setDescription(' This object specifies the num of eighths of the priority Queue in which Queue A is served second.')
starRoutRatioBOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutRatioBOrder2.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutRatioBOrder2.setDescription(' This object specifies the num of eighths of the priority Queue in which Queue B is served second.')
starRoutPrioQInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2), )
if mibBuilder.loadTexts: starRoutPrioQInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPrioQInfoTbl.setDescription('Gives information about the seven priority queues.')
starRoutPrioQInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starSlotIdPrioQInfo"), (0, "STARNE-MIB", "starPrioQRoutChipId"), (0, "STARNE-MIB", "starRoutPrioQType"))
if mibBuilder.loadTexts: starRoutPrioQInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPrioQInfoEntry.setDescription('An entry in the RoutPrioQInfoTbl.')
starSlotIdPrioQInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotIdPrioQInfo.setStatus('mandatory')
if mibBuilder.loadTexts: starSlotIdPrioQInfo.setDescription('This object indicates the slot id.')
starPrioQRoutChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPrioQRoutChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starPrioQRoutChipId.setDescription('This object indicates the rout chip whose info is needed.')
starRoutPrioQType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highPriorityA", 1), ("multicastQueue", 2), ("pba", 3), ("pbb", 4), ("pbc", 5), ("highPriorityB", 6), ("oamReceiveQ", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutPrioQType.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPrioQType.setDescription('The value indicates the queue type whose info is to be retrived.')
starRoutPerPrioMaximumQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutPerPrioMaximumQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPerPrioMaximumQd.setDescription('Maximum per priority queue depth.')
starRoutPerPrioCongestionQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutPerPrioCongestionQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPerPrioCongestionQd.setDescription('Congestion per priority queue depth.')
starRoutPerPrioCurrentQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutPerPrioCurrentQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPerPrioCurrentQd.setDescription('Current per priority queue depth.')
starRoutIsQCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qCongested", 1), ("qNotCongested", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutIsQCongested.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutIsQCongested.setDescription('Maximum per priority queue depth.')
starRoutIsCellInQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cellPresent", 1), ("cellNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutIsCellInQueue.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutIsCellInQueue.setDescription('Maximum per priority queue depth.')
starRoutCcbInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3), )
if mibBuilder.loadTexts: starRoutCcbInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCcbInfoTbl.setDescription('Gives information about Channel control block maintained for each VP, VC.')
starRoutCcbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1), ).setIndexNames((0, "STARNE-MIB", "starCcbInfoSlotId"), (0, "STARNE-MIB", "starCcbRoutChipId"), (0, "STARNE-MIB", "starRoutVp"), (0, "STARNE-MIB", "starRoutVc"))
if mibBuilder.loadTexts: starRoutCcbInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCcbInfoEntry.setDescription('An entry in the routCcbInfoTbl.')
starCcbInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCcbInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starCcbInfoSlotId.setDescription('This object indicates the slot id.')
starCcbRoutChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCcbRoutChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starCcbRoutChipId.setDescription('This object indicates the rout chip whose info is needed.')
starRoutVp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutVp.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutVp.setDescription(' The virtual path of the call.')
starRoutVc = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutVc.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutVc.setDescription(' The virtual channel of the call.')
starRoutEnClpDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enablesClpDrop", 1), ("disablesClpDrop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutEnClpDrop.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutEnClpDrop.setDescription('Indicates wheter CLP dropping when either the VC, the priority, or the device is in the congested state is Enable or Disabled.')
starRoutEnAal5Epd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enablesAal5Discard", 1), ("disablesAal5Discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutEnAal5Epd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutEnAal5Epd.setDescription('Indicates whether the device Enables/Disables AAL5 early packed discard when either VC, the priority, or the device is in the congested state.')
starRoutEnEfciMark = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enablesEfciMarking", 1), ("disablesEfciMarking", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutEnEfciMark.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutEnEfciMark.setDescription('Indicates whether the device Enables/Disables EFCI cell marking when either VC, the priority, or the device is in the congested state as the cells are dequeued.')
starRoutEnExtDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enablesExtDrop", 1), ("disablesExtDrop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutEnExtDrop.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutEnExtDrop.setDescription('Indicates whether the device enables/disables dropping of cells if EXT_DROP pin is asserted.')
starRoutPti7 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("putPti", 1), ("passPti", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutPti7.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPti7.setDescription('Indicates whether the device puts/passes received cells of PTI7 into OAM receive queue.')
starRoutPti6 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("putPti", 1), ("passPti", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutPti6.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPti6.setDescription('Indicates whether the device puts/passes received cells of PTI6 into OAM receive queue.')
starRoutPti5 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("putPti", 1), ("passPti", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutPti5.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPti5.setDescription('Indicates whether the device puts/passes received cells of PTI5 into OAM receive queue.')
starRoutPti4 = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("putPti", 1), ("passPti", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRoutPti4.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutPti4.setDescription('Indicates whether the device puts/passes received cells of PTI4 into OAM receive queue.')
starRoutCcbQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highPriorityA", 1), ("multicastQueue", 2), ("pbA", 3), ("pbB", 4), ("pbC", 5), ("highPriorityB", 6), ("oamReceiveQ", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutCcbQueue.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCcbQueue.setDescription('Indicates the queue type in which the cells of the given VP, VC will be placed.')
starRoutMaxPerVcQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutMaxPerVcQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutMaxPerVcQd.setDescription('This object gives the per VC upper limit to the depth of the queue.')
starRoutCongPerVcQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutCongPerVcQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCongPerVcQd.setDescription('This object indicates the per VC queue depth above which the enabled congestion management actions are taken.')
starRoutCurPerVcQd = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutCurPerVcQd.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCurPerVcQd.setDescription('current per VC queue depth.')
starRoutTags = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutTags.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutTags.setDescription('Tag information inserted into SE_D_OUT immediately after the QUEUE field.')
starRoutIsVpTranslated = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("translateVP", 1), ("doNotTranslateVP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutIsVpTranslated.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutIsVpTranslated.setDescription('Indicates whether VP will be translated 1 implies VP-is-translated 2 implies VP-is-not-translated.')
starRoutIsVcTranslated = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("translateVC", 1), ("doNotTranslateVC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutIsVcTranslated.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutIsVcTranslated.setDescription('Indicates whether VC will be translated 1 implies VC-is-translated 2 implies VC-is-not-translated.')
starRoutNewVp = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutNewVp.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutNewVp.setDescription('The New VPI value to which the cells are translated.')
starRoutNewVc = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutNewVc.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutNewVc.setDescription('The New VCI value to which the cells are translated.')
starRoutCellRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutCellRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCellRxCnt.setDescription('Count of the cells received.')
starRoutCellsDrpdCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutCellsDrpdCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCellsDrpdCnt.setDescription('The count of the cells dropped.')
starRoutCongCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 18, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRoutCongCellCnt.setStatus('mandatory')
if mibBuilder.loadTexts: starRoutCongCellCnt.setDescription('Count of the EFCI bits newly marked.')
starHdlcControllerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 19))
starFiuHdlcStatusTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1), )
if mibBuilder.loadTexts: starFiuHdlcStatusTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcStatusTbl.setDescription('Gives information about HDLC driver parameters.')
starFiuHdlcStatusInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starFiuHdlcStatusSlotId"), (0, "STARNE-MIB", "starFiuHdlcStatusChipId"))
if mibBuilder.loadTexts: starFiuHdlcStatusInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcStatusInfoEntry.setDescription('An entry in the Hdlc status table.')
starFiuHdlcStatusSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcStatusSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcStatusSlotId.setDescription('This object indicates the slot id.')
starFiuHdlcStatusChipId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcStatusChipId.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcStatusChipId.setDescription('This object indicates the Hdlc chip whose info is needed.')
starFiuHdlcRxBuffOverFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxBuffOverFlow.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxBuffOverFlow.setDescription('This object indicates the receive buffer overflow.')
starFiuHdlcRxCountOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxCountOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxCountOverflow.setDescription('This object indicates the receive count overflow.')
starFiuHdlcRxShort = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxShort.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxShort.setDescription('This object indicates the receive buffer is short of what is required.')
starFiuHdlcRxAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxAbort.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxAbort.setDescription('This object indicates a receive abort .')
starFiuHdlcRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxOverrun.setDescription('This object indicates that the receive buffer data was overwritten by new incoming data.')
starFiuHdlcRxCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxCrc.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxCrc.setDescription('This object indicates the receive crc.')
starFiuHdlcRxPduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxPduCount.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxPduCount.setDescription("This object indicates the num of PDU's received.")
starFiuHdlcRxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcRxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcRxByteCount.setDescription('This object indicates the received byte count.')
starFiuHdlcTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcTxUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcTxUnderrun.setDescription('This object indicates that the transmitter has run out of data to transmit.')
starFiuHdlcTxPduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcTxPduCount.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcTxPduCount.setDescription("This object indicates the num of PDU's in the transmit buffer .")
starFiuHdlcTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcTxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcTxByteCount.setDescription('This object indicates the num of bytes in the transmit buffer.')
starFiuHdlcLinkstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcLinkstatus.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcLinkstatus.setDescription('This object indicates the Link Status.')
starFiuHdlcTxBuffOverFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcTxBuffOverFlow.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcTxBuffOverFlow.setDescription('This object indicates the transmit buffer overflow.')
starFiuHdlcTxCountOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 19, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFiuHdlcTxCountOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: starFiuHdlcTxCountOverflow.setDescription('This object indicates the transmit count overflow.')
starRclInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 20))
starRclInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1), )
if mibBuilder.loadTexts: starRclInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starRclInfoTbl.setDescription('This table contains duplication related objects.')
starRclInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starRclInfoSlotId"))
if mibBuilder.loadTexts: starRclInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starRclInfoEntry.setDescription('An entry into RclInfoTbl.')
starRclInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starRclInfoSlotId.setDescription('This object indicates the slot id.')
starRclNumRegAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclNumRegAppl.setStatus('mandatory')
if mibBuilder.loadTexts: starRclNumRegAppl.setDescription('This object indicates the number of applications registered with the RCL for data shadowing.')
starRclNumSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclNumSwitchovers.setStatus('mandatory')
if mibBuilder.loadTexts: starRclNumSwitchovers.setDescription('Indicates the number of times switchover has occurred since the time the system had come up.')
starRclSwitchoverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRclSwitchoverThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starRclSwitchoverThreshold.setDescription('Indicates the threshold of the number of times switchover can occur within the specified time.')
starRclSwitchoverTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRclSwitchoverTimeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: starRclSwitchoverTimeLimit.setDescription('Indicates the time within which number of switchovers should not exceed the maximum.')
starRclSwitchoverResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRclSwitchoverResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: starRclSwitchoverResetTime.setDescription('Indicates the time for which there should be no switchover before the module can come out of lockout state.')
starRclLockoutFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRclLockoutFlag.setStatus('mandatory')
if mibBuilder.loadTexts: starRclLockoutFlag.setDescription('If this object is set(lock) then a switchover of active to standby or standby to active cannot take place.')
starRclHmcTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("testInProgress", 2), ("testInitiatedByOtherModule", 3), ("initiateTest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRclHmcTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starRclHmcTestStatus.setDescription("Indicates the status of the HMC test. A set(write) to 'initiatetest' is performed to initiate the diagnostic.")
starRclHmcTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testSuccess", 1), ("testCancelDueToStateChange", 2), ("testCancelDueToTimeout", 3), ("testFail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclHmcTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: starRclHmcTestResult.setDescription('Indicates the result of the last HMC test carried out.')
starRclModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("active", 2), ("standby", 3), ("standalone", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starRclModuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starRclModuleStatus.setDescription("Indicates the status of the board . A set(write) to 'standby' is done to make the module to switch to standby mode.")
starRclSwitchoverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("eject", 1), ("powerFail", 2), ("cpuFail", 3), ("reset", 4), ("redundantModuleUp", 5), ("requestFromRednModule", 6), ("requestFromNms", 7), ("rcldHealthCheckFail", 8), ("hmcdTestFail", 9), ("hmcRegisterFail", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclSwitchoverReason.setStatus('mandatory')
if mibBuilder.loadTexts: starRclSwitchoverReason.setDescription('Indicates the reason for the last switchover')
starRclSwitchoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclSwitchoverTime.setStatus('mandatory')
if mibBuilder.loadTexts: starRclSwitchoverTime.setDescription('Indicates the time when the last switchover occurred')
starRclRegInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 2), )
if mibBuilder.loadTexts: starRclRegInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starRclRegInfoTbl.setDescription('This table contains duplication related variables.')
starRclRegInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starRclRegInfoSlotId"), (0, "STARNE-MIB", "starRclRegKey"))
if mibBuilder.loadTexts: starRclRegInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starRclRegInfoEntry.setDescription('An entry into spuRclRegInfoTbl.')
starRclRegInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclRegInfoSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starRclRegInfoSlotId.setDescription('This object indicates the slot id.')
starRclRegKey = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclRegKey.setStatus('mandatory')
if mibBuilder.loadTexts: starRclRegKey.setDescription('This object indicates the key name with which the application was registered.')
starRclRegTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclRegTaskName.setStatus('mandatory')
if mibBuilder.loadTexts: starRclRegTaskName.setDescription('This object indicates the task name for the corresponding key.')
starRclRegQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 20, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRclRegQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: starRclRegQueueName.setDescription('This object indicates the queue name for the corresponding key.')
starCasInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 5, 2, 21))
starCasStatusInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1), )
if mibBuilder.loadTexts: starCasStatusInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusInfoTbl.setDescription('This Table has info about the CAS status.')
starCasStatusInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1), ).setIndexNames((0, "STARNE-MIB", "starCasStatusSlotId"), (0, "STARNE-MIB", "starCasStatusPortId"), (0, "STARNE-MIB", "starCasStatusChannelId"))
if mibBuilder.loadTexts: starCasStatusInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusInfoEntry.setDescription('Specifies the Cas status .')
starCasStatusSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusSlotId.setDescription('This object indicates the slot id.')
starCasStatusPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortId.setDescription('This object indicates the port id.')
starCasStatusChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusChannelId.setDescription('This object indicates the channel id.')
starCasStatusConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusConfigured.setDescription('This object indicates if the channel is configured.')
starCasStatusCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusCurrentStatus.setDescription('This object indicates the ON-Hook or OFF-Hook status.')
starCasStatusStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusStatusChange.setDescription('This object indicates the state change of a channel.')
starCasStatusNewStatusSampleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusNewStatusSampleNum.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusNewStatusSampleNum.setDescription('This object indicates the number of times the the CAS polling routine should see this channel in a certain state to flag a change in state.')
starCasStatusPortInfoTbl = MibTable((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 2), )
if mibBuilder.loadTexts: starCasStatusPortInfoTbl.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortInfoTbl.setDescription('This Table has info about the CAS status.')
starCasStatusPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 2, 1), ).setIndexNames((0, "STARNE-MIB", "starCasStatusPortSlotId"), (0, "STARNE-MIB", "starCasStatusPortPortId"))
if mibBuilder.loadTexts: starCasStatusPortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortInfoEntry.setDescription('Specifies the Cas status .')
starCasStatusPortSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusPortSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortSlotId.setDescription('This object indicates the slot id.')
starCasStatusPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusPortPortId.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortPortId.setDescription('This object indicates the port id.')
starCasStatusPortConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusPortConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortConfigured.setDescription('This object indicates if the port is configured.')
starCasStatusPortCasSamplePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusPortCasSamplePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortCasSamplePeriod.setDescription('This object indicates the Cas Sample Period.')
starCasStatusPortCasSampleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 5, 2, 21, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCasStatusPortCasSampleNum.setStatus('mandatory')
if mibBuilder.loadTexts: starCasStatusPortCasSampleNum.setDescription('This object indicates the num of 10 millisec samples to be done within the sample period.')
starTrapPriority = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTrapPriority.setStatus('mandatory')
if mibBuilder.loadTexts: starTrapPriority.setDescription('Trap severity, associated with all traps')
starReturnedErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starReturnedErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: starReturnedErrorCode.setDescription('Error status value used by various traps')
starCfPSUNum = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfPSUNum.setStatus('mandatory')
if mibBuilder.loadTexts: starCfPSUNum.setDescription('Power Supply failure indicator of which PSU # failed')
starCfFANNum = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfFANNum.setStatus('mandatory')
if mibBuilder.loadTexts: starCfFANNum.setDescription('Fan failure indicator of which Fan # failed')
starCfSlotActualBoardType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfSlotActualBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: starCfSlotActualBoardType.setDescription('Slot mismatch failure trap indicator of which slot has a configured board type that does not match the actual board type')
starCfConfiguredBoardType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfConfiguredBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: starCfConfiguredBoardType.setDescription('Board type from configuration data')
starCfActualFileVersion = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfActualFileVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starCfActualFileVersion.setDescription('Current file version number')
starCfConfiguredFileVersion = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCfConfiguredFileVersion.setStatus('mandatory')
if mibBuilder.loadTexts: starCfConfiguredFileVersion.setDescription('Configured file version number')
starTaskName = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTaskName.setStatus('mandatory')
if mibBuilder.loadTexts: starTaskName.setDescription('Task name of task that caused trap')
starQueueName = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: starQueueName.setDescription('Queue name of destination messgae queue')
starMsgSize = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMsgSize.setStatus('mandatory')
if mibBuilder.loadTexts: starMsgSize.setDescription('Message size requested that was unavailable')
starFileName = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFileName.setStatus('mandatory')
if mibBuilder.loadTexts: starFileName.setDescription('Filename that was in error')
starDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: starDeviceType.setDescription('Device type that has an alarm')
starModuleIfType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starModuleIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starModuleIfType.setDescription('Module Interface type that has an alarm')
starRefClkIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRefClkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starRefClkIndex.setDescription('Clock reference number for clock alarm')
starEthernetType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nms", 1), ("ipc1", 2), ("ipc2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starEthernetType.setStatus('mandatory')
if mibBuilder.loadTexts: starEthernetType.setDescription('Ethernet alarm')
starDS1ChanIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS1ChanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starDS1ChanIndex.setDescription('DS1 Channel alarm')
starDS2ChanIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDS2ChanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starDS2ChanIndex.setDescription('DS2 Channel alarm')
starDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: starDeviceId.setDescription('Device Id of device that has an alarm')
starRcvdMsgType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRcvdMsgType.setStatus('mandatory')
if mibBuilder.loadTexts: starRcvdMsgType.setDescription('Received Message type that was in error')
starReturnedSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starReturnedSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starReturnedSlotIndex.setDescription('Slot Id of board in error')
starRcvdSrcSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRcvdSrcSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starRcvdSrcSlotIndex.setDescription('Slot Id of msg from unknown slot #')
starRcvdModuleIfType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRcvdModuleIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starRcvdModuleIfType.setDescription('')
starFileId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFileId.setStatus('mandatory')
if mibBuilder.loadTexts: starFileId.setDescription('Configuration File Id of file in error')
starCOSId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCOSId.setStatus('mandatory')
if mibBuilder.loadTexts: starCOSId.setDescription('Class of Service that is out of bounds')
starRcvdModuleType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRcvdModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: starRcvdModuleType.setDescription('Module type received that is in error')
starRcvdGroupId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRcvdGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: starRcvdGroupId.setDescription('Unknown fault group Id')
starRcvdSubId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRcvdSubId.setStatus('mandatory')
if mibBuilder.loadTexts: starRcvdSubId.setDescription('Unknown fault sub Id')
starGcidNeId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGcidNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starGcidNeId.setDescription('GCID Node Id')
starGcidSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGcidSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starGcidSlotIndex.setDescription('GCID Slot Index')
starGcidPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGcidPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starGcidPortIndex.setDescription('GCID Port Index')
starGcidModuleIfType = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGcidModuleIfType.setStatus('mandatory')
if mibBuilder.loadTexts: starGcidModuleIfType.setDescription('GCID Module Interface type')
starGcidLeafNum = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGcidLeafNum.setStatus('mandatory')
if mibBuilder.loadTexts: starGcidLeafNum.setDescription('GCID Leaf number')
starGcidConnectionNum = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGcidConnectionNum.setStatus('mandatory')
if mibBuilder.loadTexts: starGcidConnectionNum.setDescription('GCID Connection number')
starCRSRResultedErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCRSRResultedErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: starCRSRResultedErrorCode.setDescription('CRSR error code')
starCRSRFailedSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCRSRFailedSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starCRSRFailedSlotIndex.setDescription('CRSR slot index of failed slot')
starCRSRFailedPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCRSRFailedPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starCRSRFailedPortIndex.setDescription('CRSR port index of failed port')
starCRSRDescriptionCode = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCRSRDescriptionCode.setStatus('mandatory')
if mibBuilder.loadTexts: starCRSRDescriptionCode.setDescription('CRSR description code')
starSwitchReason = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSwitchReason.setStatus('mandatory')
if mibBuilder.loadTexts: starSwitchReason.setDescription('Reason for a redundancy switchover')
starBoardFailReason = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starBoardFailReason.setStatus('mandatory')
if mibBuilder.loadTexts: starBoardFailReason.setDescription('Board Failure reason for redundant board')
starCDRGetReason = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCDRGetReason.setStatus('mandatory')
if mibBuilder.loadTexts: starCDRGetReason.setDescription('CDR file get reasone')
starCDRFileSplitNum = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCDRFileSplitNum.setStatus('mandatory')
if mibBuilder.loadTexts: starCDRFileSplitNum.setDescription('number of CDR file split')
starPvcmConfFaultCause = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPvcmConfFaultCause.setStatus('mandatory')
if mibBuilder.loadTexts: starPvcmConfFaultCause.setDescription('')
starConnClearCause = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starConnClearCause.setStatus('mandatory')
if mibBuilder.loadTexts: starConnClearCause.setDescription('')
starRemoteNeId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRemoteNeId.setStatus('mandatory')
if mibBuilder.loadTexts: starRemoteNeId.setDescription('')
starRemoteModuleNum = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRemoteModuleNum.setStatus('mandatory')
if mibBuilder.loadTexts: starRemoteModuleNum.setDescription('')
starRemotePortIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRemotePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starRemotePortIndex.setDescription('')
starFrLmiPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFrLmiPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: starFrLmiPortIndex.setDescription('')
starQueuePoolId = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starQueuePoolId.setStatus('mandatory')
if mibBuilder.loadTexts: starQueuePoolId.setDescription('')
starRipAddress0 = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRipAddress0.setStatus('mandatory')
if mibBuilder.loadTexts: starRipAddress0.setDescription('')
starRipAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRipAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: starRipAddress1.setDescription('')
starRipAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRipAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: starRipAddress2.setDescription('')
starRipAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRipAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: starRipAddress3.setDescription('')
starRipAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRipAddress4.setStatus('mandatory')
if mibBuilder.loadTexts: starRipAddress4.setDescription('')
starFatalErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFatalErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: starFatalErrorCode.setDescription('')
starSvcmCacThreshold = MibScalar((1, 3, 6, 1, 4, 1, 236, 5, 6, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSvcmCacThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: starSvcmCacThreshold.setDescription('')
mibBuilder.exportSymbols("STARNE-MIB", starPortPmFlag=starPortPmFlag, starFiuFrcsPvcRxVp=starFiuFrcsPvcRxVp, starFiuSscsIfPerfTbl=starFiuSscsIfPerfTbl, starPortDs3EFScount=starPortDs3EFScount, starBbcpPtoMOutConnections=starBbcpPtoMOutConnections, starPortE1FramerCRCErrorCounter=starPortE1FramerCRCErrorCounter, starLoopbackCtrGeneration=starLoopbackCtrGeneration, starAal5ChannelStatisticsSlotIdInfo=starAal5ChannelStatisticsSlotIdInfo, starClkDistribStatusSiu4=starClkDistribStatusSiu4, starRoutRatioBOrder2=starRoutRatioBOrder2, starDS1E1CESStatDeviceId=starDS1E1CESStatDeviceId, starFiuFrcsPvcEndptOutRawCells=starFiuFrcsPvcEndptOutRawCells, starVclRtCellsCongCount=starVclRtCellsCongCount, starFiuFrcsPvcEndptInOctets=starFiuFrcsPvcEndptInOctets, starFrCongNoDiscardWoutDE=starFrCongNoDiscardWoutDE, starSSUCrsrReqNumThreshold=starSSUCrsrReqNumThreshold, starPPPLinkStatusTransmitFcsSize=starPPPLinkStatusTransmitFcsSize, starNeSwUpgradeActionTrigger=starNeSwUpgradeActionTrigger, starSlot=starSlot, starRlspEntry=starRlspEntry, starDS1E1CESPointerReframes=starDS1E1CESPointerReframes, starCasStatusSlotId=starCasStatusSlotId, starVclRtLastAal5State=starVclRtLastAal5State, starRoutNumVpi=starRoutNumVpi, starRoutEnExtDrop=starRoutEnExtDrop, starCfPSUOperStatus=starCfPSUOperStatus, starSSUSwitchLinkMaxVbr=starSSUSwitchLinkMaxVbr, starCellMuxInfoEntry=starCellMuxInfoEntry, starSwitchInfoEntry=starSwitchInfoEntry, starSSUConfigInfoSlotId=starSSUConfigInfoSlotId, starSwitchLinkFbrIn=starSwitchLinkFbrIn, starSSULoadLowMarkVbrIn=starSSULoadLowMarkVbrIn, starPvcmConfFaultCause=starPvcmConfFaultCause, starAal5AvgM=starAal5AvgM, starPvcRouteOutgoingPortId=starPvcRouteOutgoingPortId, starFrlMgtInAsyncUpdates=starFrlMgtInAsyncUpdates, starFiuHdlcRxCrc=starFiuHdlcRxCrc, starSvcAtsRxInvalidResponseCount=starSvcAtsRxInvalidResponseCount, starTaskName=starTaskName, starSvcmAiuRxSDPCCells=starSvcmAiuRxSDPCCells, starPortUpcTotalCells=starPortUpcTotalCells, starSwitchChipVersion=starSwitchChipVersion, starRclRegQueueName=starRclRegQueueName, starSvcmTxSetupMsgCnt=starSvcmTxSetupMsgCnt, starPortPdhUniMsgTxCt=starPortPdhUniMsgTxCt, starAal1SarChannelId=starAal1SarChannelId, starPvcSrcTimeslot=starPvcSrcTimeslot, starVclSlotIndex=starVclSlotIndex, starDS1E1CESMapVCI=starDS1E1CESMapVCI, starModuleIfType=starModuleIfType, starAal1SarInvalidSnCnt=starAal1SarInvalidSnCnt, starFmLogNotify=starFmLogNotify, starClkPriority=starClkPriority, starRoutTxMarkedCellCnt=starRoutTxMarkedCellCnt, starSvcmAiuRxSDCells=starSvcmAiuRxSDCells, starCellMuxFreeLowBufCnt=starCellMuxFreeLowBufCnt, starPVCRouteTable=starPVCRouteTable, starVplConnRole=starVplConnRole, starDS1E1CESCBRClockMode=starDS1E1CESCBRClockMode, starLoopbackCtrVpi=starLoopbackCtrVpi, frPvcMarkedDe=frPvcMarkedDe, starCellMuxWatchDogTimer=starCellMuxWatchDogTimer, starPortPlcpRxFEBEcount=starPortPlcpRxFEBEcount, starRclSwitchoverThreshold=starRclSwitchoverThreshold, starSvcmAiuRxPOLLCells=starSvcmAiuRxPOLLCells, starAmCDRFileGetRequest=starAmCDRFileGetRequest, starSSUSiuTotalFbrIn=starSSUSiuTotalFbrIn, starFiuHdlcStatusTbl=starFiuHdlcStatusTbl, starPortDS1FramerIndex=starPortDS1FramerIndex, starSvcmTxStatusEnquiryMsgCnt=starSvcmTxStatusEnquiryMsgCnt, starAal5ConfigRxVCChipId=starAal5ConfigRxVCChipId, starSysGeneric=starSysGeneric, starAal5NumTimesOverRxDataUnit=starAal5NumTimesOverRxDataUnit, starDS1E1CESMapATMIndex=starDS1E1CESMapATMIndex, starPortPmRearmValue=starPortPmRearmValue, starPortDS1ATMErrCorrectCellCnt=starPortDS1ATMErrCorrectCellCnt, starSlotAal1SarTable=starSlotAal1SarTable, starRcvdSrcSlotIndex=starRcvdSrcSlotIndex, starTotalOutVariableCapa=starTotalOutVariableCapa, starAal5MaxNumSegments=starAal5MaxNumSegments, starRclSwitchoverTimeLimit=starRclSwitchoverTimeLimit, starDS1E1CESHdrErrors=starDS1E1CESHdrErrors, starAal5ChannelStatusChipId=starAal5ChannelStatusChipId, starSSUConfigInfoEntry=starSSUConfigInfoEntry, starNeMasterManagerIP=starNeMasterManagerIP, starSwitchMulticastNo=starSwitchMulticastNo, starNeId=starNeId, starClkDistribStatusSiu9=starClkDistribStatusSiu9, starPvcmFailedConnectionNumber=starPvcmFailedConnectionNumber, starPortE1FramerLineCoding=starPortE1FramerLineCoding, starDS1E1CESStatChannelId=starDS1E1CESStatChannelId, starBbcpInConnectionClearLinkFailCt=starBbcpInConnectionClearLinkFailCt, starSlotIdRoutInfo=starSlotIdRoutInfo, starBbcpGCIDIfType=starBbcpGCIDIfType, starPvcRouteOutgoingNeId=starPvcRouteOutgoingNeId, starDS1E1CESLostCells=starDS1E1CESLostCells, starSSUMcSourcePort=starSSUMcSourcePort, starAal5AvgI=starAal5AvgI, starFaultSubId=starFaultSubId, starFiuPvcInfoPortId=starFiuPvcInfoPortId, starFiuHdlcStatusSlotId=starFiuHdlcStatusSlotId, starPortPlcpCVcount=starPortPlcpCVcount, starPortPdhUniHECErrCt=starPortPdhUniHECErrCt, starSvcRouteOutgoingPortId=starSvcRouteOutgoingPortId, starCfPSUNum=starCfPSUNum, starSSULoadHighMarkFbrIn=starSSULoadHighMarkFbrIn, starSwitchLinkLoadEntry=starSwitchLinkLoadEntry, starPPPLqrLocalPeriod=starPPPLqrLocalPeriod, starPortDS3FramerFramingMode=starPortDS3FramerFramingMode, starSvcmTxReleaseMsgCnt=starSvcmTxReleaseMsgCnt, starAal1SarPtrMismatch=starAal1SarPtrMismatch, starPvcmDeletedConnectionNumber=starPvcmDeletedConnectionNumber, starPvcConnectionStatusLastChangedDate=starPvcConnectionStatusLastChangedDate, starPvcRouteOutgoingModuleId=starPvcRouteOutgoingModuleId, starPortPdhUniEntry=starPortPdhUniEntry, starRoutCcbQueue=starRoutCcbQueue, starRoutCurPerVcQd=starRoutCurPerVcQd, starSSUCrsrReqFailedThreshold=starSSUCrsrReqFailedThreshold, starSvcmRxRestartMsgCnt=starSvcmRxRestartMsgCnt, starClkDistribStatusSiu3=starClkDistribStatusSiu3, starPVCRouteEntry=starPVCRouteEntry, starPvcConnectionTable=starPvcConnectionTable, starSvcAtsStatusEntry=starSvcAtsStatusEntry, starGcidPortIndex=starGcidPortIndex, starPmCtrPmCellClp=starPmCtrPmCellClp, starRcvdModuleType=starRcvdModuleType, starfrPVCEndptPerfRxUt=starfrPVCEndptPerfRxUt, starSSUSiuNumMcConnections=starSSUSiuNumMcConnections, starSvcmAiuRxBGAKCells=starSvcmAiuRxBGAKCells, starCasStatusInfoTbl=starCasStatusInfoTbl, starSvcmAiuTxAddPartyAckMsgCnt=starSvcmAiuTxAddPartyAckMsgCnt, starPortFiu12Index=starPortFiu12Index, starBbcpGCIDLeafId=starBbcpGCIDLeafId, starPvcConnectionStatusLastChangedTime=starPvcConnectionStatusLastChangedTime, starLoopbackResultReturnedCells=starLoopbackResultReturnedCells, starLoopbackCtrEntry=starLoopbackCtrEntry, starPortHdlcIndex=starPortHdlcIndex, starPortDS3FramerTable=starPortDS3FramerTable, starSvcmRxReleaseMsgCnt=starSvcmRxReleaseMsgCnt, starSSUMcOutputVbr=starSSUMcOutputVbr, starPvcmTermConnectedFailCt=starPvcmTermConnectedFailCt, starCcCtrTable=starCcCtrTable, starTotalInVariableCapa=starTotalInVariableCapa, starAtmPointPointType=starAtmPointPointType, starDS1E1CESSlotId=starDS1E1CESSlotId, starBbcpInConnectionLinkFailCt=starBbcpInConnectionLinkFailCt, starRefClkIndex=starRefClkIndex, starPortSonetUniIndex=starPortSonetUniIndex, frlPvcEndptInfoPortId=frlPvcEndptInfoPortId, starSwitchLinkVbrOut=starSwitchLinkVbrOut, starSvcmRxCallProceedingMsgCnt=starSvcmRxCallProceedingMsgCnt, starSwitchRatioAOrder1=starSwitchRatioAOrder1, starSvcAtsTCPConnTrialCount=starSvcAtsTCPConnTrialCount, starSvcRouteGCIDLeafId=starSvcRouteGCIDLeafId, starVclNumOAMInvalidCRC=starVclNumOAMInvalidCRC, starCfFanStatus=starCfFanStatus, starBbcpInConnectionPreemptFailCt=starBbcpInConnectionPreemptFailCt, starSwitchAggrIp=starSwitchAggrIp, frPvcEndptNoDiscardWithDE=frPvcEndptNoDiscardWithDE, starPortM32Entry=starPortM32Entry, starSSUSiuLoadCapacityThreshold=starSSUSiuLoadCapacityThreshold, starRclLockoutFlag=starRclLockoutFlag, starTrapGroupId=starTrapGroupId, starFiuFrcsIfAdminStatus=starFiuFrcsIfAdminStatus, starVclSourceSlot=starVclSourceSlot, starPortPmThresholdTable=starPortPmThresholdTable, starFiuFrcsPvcEndptLastChange=starFiuFrcsPvcEndptLastChange, starSvcmAiuRxRSAKCells=starSvcmAiuRxRSAKCells, starFiuSscsIfPerfTxpktSz=starFiuSscsIfPerfTxpktSz, starDS1E1CESStatSlotId=starDS1E1CESStatSlotId, starSvcmPtoMPOrgActiveConnectionCnt=starSvcmPtoMPOrgActiveConnectionCnt, starGcidConnectionNum=starGcidConnectionNum, starTotalInFixedCapa=starTotalInFixedCapa, starSSUNumberMcLeaves=starSSUNumberMcLeaves, starNeSwDownload=starNeSwDownload, starAal5ConfigRxVCTbl=starAal5ConfigRxVCTbl, starPvcRouteLocalNodeType=starPvcRouteLocalNodeType, starSwitchMulticastInfoTbl=starSwitchMulticastInfoTbl, starSlotModuleType=starSlotModuleType, starPortDS1ATMEntry=starPortDS1ATMEntry, starRoutIsVcTranslated=starRoutIsVcTranslated, starCRSRResultedErrorCode=starCRSRResultedErrorCode, starFrCongNoRecvDE=starFrCongNoRecvDE, starFiuSscsIfPerfRxKbps=starFiuSscsIfPerfRxKbps, starFiuSscsPvcInfoTbl=starFiuSscsPvcInfoTbl, starFaultControlTable=starFaultControlTable, starBbcpXConnectEntry=starBbcpXConnectEntry, frPvcEndptNoTxBECN=frPvcEndptNoTxBECN, starBbcpXConnAdjacentPortId=starBbcpXConnAdjacentPortId, frlPvcEndptInfoDlci=frlPvcEndptInfoDlci, starCasStatusCurrentStatus=starCasStatusCurrentStatus, starLoopbackCtrEndType=starLoopbackCtrEndType, starFaultClearValue=starFaultClearValue, starPPPIpLocalMaxSlotId=starPPPIpLocalMaxSlotId, starRipAddress4=starRipAddress4, starPortM32Table=starPortM32Table, starPortType=starPortType, starSwitchLinkVbrIn=starSwitchLinkVbrIn, starVplPortIndex=starVplPortIndex, starCasStatusPortInfoEntry=starCasStatusPortInfoEntry, starAal5ChannelStatusSlotIdInfo=starAal5ChannelStatusSlotIdInfo, starSSDCpuFailStatus=starSSDCpuFailStatus, starBbcpOutConnectionLinkFailCt=starBbcpOutConnectionLinkFailCt, starPortMaxVPINumber=starPortMaxVPINumber, starSSUSiuPortLoadInfoTbl=starSSUSiuPortLoadInfoTbl, starAal5ConfigTxVPIndex=starAal5ConfigTxVPIndex, starSSUMcInputVbr=starSSUMcInputVbr, starPortE1FramerRevision=starPortE1FramerRevision, starPvcDestVpi=starPvcDestVpi, frlPortInfoPortId=frlPortInfoPortId, starSysClockInfoEntry=starSysClockInfoEntry, starPortDS1FramerFBErrorCounter=starPortDS1FramerFBErrorCounter, starCasStatusConfigured=starCasStatusConfigured, starLsgnUpCt=starLsgnUpCt, starSwitchRatioBOrder1=starSwitchRatioBOrder1, starDS1E1CESChannelId=starDS1E1CESChannelId, starAal5NumOAMDrops=starAal5NumOAMDrops, starSSULoadLowMarkFbrOut=starSSULoadLowMarkFbrOut, starfrPVCEndptPerfTxpktSz=starfrPVCEndptPerfTxpktSz, starAal5NumTimesLengthViolation=starAal5NumTimesLengthViolation, starAal5NumTimesPktDropped=starAal5NumTimesPktDropped, starRoutInfoTbl=starRoutInfoTbl, starDsx3CurrentIndex=starDsx3CurrentIndex, starFrMgmtStatisticInfoEntry=starFrMgmtStatisticInfoEntry, starRoutEnEfciMark=starRoutEnEfciMark, starHdlcControllerInfo=starHdlcControllerInfo, starSvcmFiuStatsEntry=starSvcmFiuStatsEntry, starAal1SarPortId=starAal1SarPortId, frPvcEndptNoRecvFECN=frPvcEndptNoRecvFECN, starCcCtrType=starCcCtrType, starGcidNeId=starGcidNeId, starSlotCellPathStatus=starSlotCellPathStatus, starSSULoadTotalVbrIn=starSSULoadTotalVbrIn, starPortM32RxLfdErrorCount=starPortM32RxLfdErrorCount, starPvcRouteLocalLeafId=starPvcRouteLocalLeafId, starPortM32RxAbortCount=starPortM32RxAbortCount, starAal5NumTxChannelsOpened=starAal5NumTxChannelsOpened, starPortFiu12Ds3FramerFERR=starPortFiu12Ds3FramerFERR, starFrCongStatInfoTbl=starFrCongStatInfoTbl, starVclSourceLeafno=starVclSourceLeafno, starCfBootFileName=starCfBootFileName, starPortIndex=starPortIndex, starDS1E1CESBufMaxSize=starDS1E1CESBufMaxSize, starFrHdlcPmInfoTbl=starFrHdlcPmInfoTbl, starPmCtrUpcId=starPmCtrUpcId, starClkSource=starClkSource, starAal5MaxBurst=starAal5MaxBurst, starPortIFType=starPortIFType, starPPPLinkStatusLocalToPeerACCMap=starPPPLinkStatusLocalToPeerACCMap, starSvcmFiuQ922UnackedMsgCnt=starSvcmFiuQ922UnackedMsgCnt, starPvcSrcSlotId=starPvcSrcSlotId, starAal5ChannelStatisticsTbl=starAal5ChannelStatisticsTbl, starSlotSSBStatus=starSlotSSBStatus, starPvcOutVariableCapa=starPvcOutVariableCapa)
mibBuilder.exportSymbols("STARNE-MIB", starClkCurStatusSiu2=starClkCurStatusSiu2, starPortPmTrigger=starPortPmTrigger, starSSUSiuTotalConnections=starSSUSiuTotalConnections, starFiuIfInfoSlotId=starFiuIfInfoSlotId, starSSULoadNumMcConnections=starSSULoadNumMcConnections, starSvcmAiuRxDropPartyMsgCnt=starSvcmAiuRxDropPartyMsgCnt, starSSUSiuPortLoadInfoEntry=starSSUSiuPortLoadInfoEntry, starFmSendTrapThreshold=starFmSendTrapThreshold, starSwitchInfoTbl=starSwitchInfoTbl, starSSUSwitchTotalMcBitsThreshold=starSSUSwitchTotalMcBitsThreshold, starRout88Info=starRout88Info, starBbcpEntry=starBbcpEntry, starCfConfiguredBoardType=starCfConfiguredBoardType, starFiuPmInfo=starFiuPmInfo, starCellMuxInfoTbl=starCellMuxInfoTbl, starClkCurStatusSiu6=starClkCurStatusSiu6, starSSDOperStatus=starSSDOperStatus, starDS1ChanIndex=starDS1ChanIndex, starPPP=starPPP, starVplSourceVpi=starVplSourceVpi, starDS1E1CESStatPortId=starDS1E1CESStatPortId, starNeCurrentTimeDescr=starNeCurrentTimeDescr, starLoopbackCtrGCIDVci=starLoopbackCtrGCIDVci, starPPPLinkStatusRemoteToLocalPC=starPPPLinkStatusRemoteToLocalPC, starLoopbackCtrGCIDDlci=starLoopbackCtrGCIDDlci, starRoutPti4=starRoutPti4, starPmTotalCellClp0Count=starPmTotalCellClp0Count, starSSUMulticastSlotId=starSSUMulticastSlotId, starRoutChipVersion=starRoutChipVersion, starPvcDestIfType=starPvcDestIfType, starCasStatusInfoEntry=starCasStatusInfoEntry, starBbcpInConnectionClearNormalCt=starBbcpInConnectionClearNormalCt, starLoopbackCtrType=starLoopbackCtrType, starRoutSramConfig=starRoutSramConfig, starRoutPrioQType=starRoutPrioQType, starPortDs3UniEntry=starPortDs3UniEntry, starAal1SarRxUnderrun=starAal1SarRxUnderrun, starSlotRoute88Index=starSlotRoute88Index, starFiuFrcsIfLastChange=starFiuFrcsIfLastChange, starPortM32RxNobErrorCount=starPortM32RxNobErrorCount, starAal5NumPktsTransmitted=starAal5NumPktsTransmitted, starPPPLinkStatusPacketTooLongs=starPPPLinkStatusPacketTooLongs, starFiuFrcsPvcTxVc=starFiuFrcsPvcTxVc, starBbcpOutConnectionModuleFailCt=starBbcpOutConnectionModuleFailCt, starSSUSwitchLinkMaxCapacity=starSSUSwitchLinkMaxCapacity, starSSUMulticastInfoEntry=starSSUMulticastInfoEntry, starCasStatusPortInfoTbl=starCasStatusPortInfoTbl, starSlotLsgnStatusTable=starSlotLsgnStatusTable, starPPPLqrRemotePeriod=starPPPLqrRemotePeriod, starSwitchBckPressureDly=starSwitchBckPressureDly, starBbcpXConnOperStatus=starBbcpXConnOperStatus, starRclNumRegAppl=starRclNumRegAppl, starNeCurrentAlarmTftp=starNeCurrentAlarmTftp, starConn=starConn, starCellMuxChipId=starCellMuxChipId, starRclRegInfoSlotId=starRclRegInfoSlotId, starAal5Info=starAal5Info, starRclHmcTestStatus=starRclHmcTestStatus, starSvcOutVariableCapa=starSvcOutVariableCapa, starPortPdhUniMsgRxCt=starPortPdhUniMsgRxCt, starLoopbackCtrVci=starLoopbackCtrVci, starLoopbackCtrInputType=starLoopbackCtrInputType, starPvcConnectionCauseValue=starPvcConnectionCauseValue, starMibRegister=starMibRegister, starFiuHdlcTxByteCount=starFiuHdlcTxByteCount, starCfAllChanged=starCfAllChanged, starPortM32TxPduCount=starPortM32TxPduCount, starPortPlcpEScount=starPortPlcpEScount, starBbcpGCIDNeId=starBbcpGCIDNeId, starCellMuxUsedLowBufCnt=starCellMuxUsedLowBufCnt, starAmCacheCounter=starAmCacheCounter, starScuInfoSlotId=starScuInfoSlotId, starPortE1FramerLCVErrorCounter=starPortE1FramerLCVErrorCounter, starAal5NumTimesTxQueUnderrun=starAal5NumTimesTxQueUnderrun, starPPPLinkStatusBadControls=starPPPLinkStatusBadControls, starfrPVCEndptPerfDLCIIndex=starfrPVCEndptPerfDLCIIndex, starPortUsedBwdFixedCapacity=starPortUsedBwdFixedCapacity, starPvcRouteAdjacentNeId=starPvcRouteAdjacentNeId, starPvcmRouteFailCt=starPvcmRouteFailCt, starClkCurStatusSiu4=starClkCurStatusSiu4, starSSULoadLowMarkFbrIn=starSSULoadLowMarkFbrIn, starPortRtCellsDroppedCount=starPortRtCellsDroppedCount, starBbcpInConnectionClearPreemptionCt=starBbcpInConnectionClearPreemptionCt, starPortDS1ATMDiscardCellCnt=starPortDS1ATMDiscardCellCnt, starRclInfo=starRclInfo, starSvcmTxStatusMsgCnt=starSvcmTxStatusMsgCnt, starDeviceType=starDeviceType, starVclRtNewVpi=starVclRtNewVpi, frlPvcEndptInfoEntry=frlPvcEndptInfoEntry, starFiuFrcsPvcTxVp=starFiuFrcsPvcTxVp, starCcCtrGCIDNeId=starCcCtrGCIDNeId, starPPPLqrQuality=starPPPLqrQuality, starGcidLeafNum=starGcidLeafNum, starSSDInterfaceType=starSSDInterfaceType, starClkPrevSourceLine=starClkPrevSourceLine, starPortFiu12Ds1BEE=starPortFiu12Ds1BEE, starFiuHdlcLinkstatus=starFiuHdlcLinkstatus, starPmReportInterval=starPmReportInterval, starPvcDestPortId=starPvcDestPortId, starPvcRouteSrcGCIDPortId=starPvcRouteSrcGCIDPortId, starVclConnRole=starVclConnRole, starSSUConfigSwitchLink=starSSUConfigSwitchLink, starBackboneLinkConnStatus=starBackboneLinkConnStatus, starFiuFrcsPvcEndptInFrames=starFiuFrcsPvcEndptInFrames, starFiuHdlcStatusInfoEntry=starFiuHdlcStatusInfoEntry, starVplSlotIndex=starVplSlotIndex, starFileId=starFileId, starClkDistribStatusEntry=starClkDistribStatusEntry, starBbcpOutConnectionClearNormalCt=starBbcpOutConnectionClearNormalCt, frPvcEndptInDEFrames=frPvcEndptInDEFrames, starRoutIsVpTranslated=starRoutIsVpTranslated, starPvcRouteGCIDSlotId=starPvcRouteGCIDSlotId, starSvcInFixedCapa=starSvcInFixedCapa, starSlotRoute88Table=starSlotRoute88Table, starClkCurStatusSiu1=starClkCurStatusSiu1, starPortRealStatusTable=starPortRealStatusTable, starVplNumOAMInvalidCRC=starVplNumOAMInvalidCRC, starBoardFailReason=starBoardFailReason, starPortTrunkTable=starPortTrunkTable, starRoutTxParityFailCnt=starRoutTxParityFailCnt, starPortFiu12Ds3FramerIndex=starPortFiu12Ds3FramerIndex, starPortDs3AISScount=starPortDs3AISScount, starVclUpcGcra1ViolCount=starVclUpcGcra1ViolCount, starSiuRednSwitchOver=starSiuRednSwitchOver, starSSUPmThresholdInfoTbl=starSSUPmThresholdInfoTbl, starPortAtmAddress=starPortAtmAddress, starFiuPvcInfoDlci=starFiuPvcInfoDlci, starRoutConnectToSar=starRoutConnectToSar, starFiuFrcsIfOutErrors=starFiuFrcsIfOutErrors, starCOSId=starCOSId, starPortDS1ATMTable=starPortDS1ATMTable, starRoutEmptyQCurQd=starRoutEmptyQCurQd, starSlotMaxPortNo=starSlotMaxPortNo, starRemotePortIndex=starRemotePortIndex, starSSUSiuTotalVbrOut=starSSUSiuTotalVbrOut, starPvcSrcVpi=starPvcSrcVpi, starRoutInfoEntry=starRoutInfoEntry, starPortM32RxPduCount=starPortM32RxPduCount, starAal1SarInfoEntry=starAal1SarInfoEntry, starPortDS1ATMTxBusyCellCnt=starPortDS1ATMTxBusyCellCnt, starFaultThresholdType=starFaultThresholdType, starBbcpOutConnectionVcciCollisionFailCt=starBbcpOutConnectionVcciCollisionFailCt, starVplSourceVci=starVplSourceVci, starDS1E1CESPortId=starDS1E1CESPortId, starFiuSscsIfPerfTxUt=starFiuSscsIfPerfTxUt, starPortM32TxErrorCount=starPortM32TxErrorCount, starfrPVCEndptPerfRxKbps=starfrPVCEndptPerfRxKbps, starPPPLinkStatusEntry=starPPPLinkStatusEntry, starLoopbackCtrChannelType=starLoopbackCtrChannelType, starFmLogFileInterval=starFmLogFileInterval, starPPPLinkStatusBadFCSs=starPPPLinkStatusBadFCSs, starSSULoadInfoEntry=starSSULoadInfoEntry, starAmCDRThresholdTime=starAmCDRThresholdTime, starAal5NumRxChannelsOpened=starAal5NumRxChannelsOpened, starLoopbackCtrPdhNum=starLoopbackCtrPdhNum, starPortDS1FramerRevision=starPortDS1FramerRevision, starPortM32SlotId=starPortM32SlotId, starSlotRoute88BPLiveFailCount=starSlotRoute88BPLiveFailCount, starLsgnDownCt=starLsgnDownCt, starPortHdlcLineSpeed=starPortHdlcLineSpeed, starSSULinkMaxCapacity=starSSULinkMaxCapacity, starSvcAtsRxReqCount=starSvcAtsRxReqCount, starLoopbackCtrGCIDNeId=starLoopbackCtrGCIDNeId, starSvcmTxCallProceedingMsgCnt=starSvcmTxCallProceedingMsgCnt, starfrPVCEndptPerfTxFrPs=starfrPVCEndptPerfTxFrPs, starRoutPti6=starRoutPti6, starGcidModuleIfType=starGcidModuleIfType, starSlotRoute88TxMarkedCells=starSlotRoute88TxMarkedCells, starPortM32RxIntBufOverFlwCount=starPortM32RxIntBufOverFlwCount, starPmEntry=starPmEntry, starVpiIndex=starVpiIndex, starVplRtCellsRxCount=starVplRtCellsRxCount, frlPvcEndptInfoSlotId=frlPvcEndptInfoSlotId, starLoopbackCtrMethod=starLoopbackCtrMethod, starNeStandbyMasterManagerIP=starNeStandbyMasterManagerIP, starSSUSiuPortTotalFbrOut=starSSUSiuPortTotalFbrOut, starPvcSrcPortId=starPvcSrcPortId, starPvcSrcLeaf=starPvcSrcLeaf, starLinkLoadSwitchFabricRow=starLinkLoadSwitchFabricRow, starSvcmAiuTxAddPartyRejMsgCnt=starSvcmAiuTxAddPartyRejMsgCnt, starLsgnEntry=starLsgnEntry, starClkCurStatusSiu7=starClkCurStatusSiu7, starAmCDRFileGetCompleted=starAmCDRFileGetCompleted, starFrlMgtInStatusReply=starFrlMgtInStatusReply, starSSULoadTotalConnections=starSSULoadTotalConnections, starReturnedSlotIndex=starReturnedSlotIndex, starFiuSscsInfo=starFiuSscsInfo, starBbcpAvailableVariableCapacity=starBbcpAvailableVariableCapacity, starCfAluLedStatus=starCfAluLedStatus, starRoutRatioAOrder1=starRoutRatioAOrder1, starSvcAtsIndex=starSvcAtsIndex, starAal1SarSlotId=starAal1SarSlotId, starPortSonetUniEntry=starPortSonetUniEntry, starfrPVCEndptPerfSlotId=starfrPVCEndptPerfSlotId, starVclSourceTimeslot=starVclSourceTimeslot, starAal5CpcsUU=starAal5CpcsUU, starDS1E1CESReassCells=starDS1E1CESReassCells, starBbcpInConnectionNoBBCapacityCt=starBbcpInConnectionNoBBCapacityCt, starClkCurStatusSiu3=starClkCurStatusSiu3, starVpiBitRangeValue=starVpiBitRangeValue, frPvcEndptNoTxFECN=frPvcEndptNoTxFECN, starPmCtrStart=starPmCtrStart, starRoutCellRxCnt=starRoutCellRxCnt, starFrCongNoTxFECN=starFrCongNoTxFECN, starAmCDRFileCount=starAmCDRFileCount, starfrPVCEndptPerfRxPktSz=starfrPVCEndptPerfRxPktSz, starAal5NumPktsReceived=starAal5NumPktsReceived, starRcvdGroupId=starRcvdGroupId, starNeSlotReset=starNeSlotReset, starRlspNoRoutesCt=starRlspNoRoutesCt, starDS1E1CESBufUnderflows=starDS1E1CESBufUnderflows, starAvailableVpiValue=starAvailableVpiValue, starClkDistribSlotId=starClkDistribSlotId, starPortTimeStamp=starPortTimeStamp, starBbcpXConnAdjacentVpi=starBbcpXConnAdjacentVpi, starPmCtrSegmentType=starPmCtrSegmentType, starRipAddress1=starRipAddress1, starFrlMgtInKeepalive=starFrlMgtInKeepalive, starAal5NumTimesRxQueUnderrun=starAal5NumTimesRxQueUnderrun, starNeSoftwareVersion=starNeSoftwareVersion, starPortAdminStatus=starPortAdminStatus, starBbcpInConnectionChipErrorCt=starBbcpInConnectionChipErrorCt, starVclUpcTotalCells=starVclUpcTotalCells, frlPortSigMode=frlPortSigMode, starClkPLLMode=starClkPLLMode, starFiuFrcsIfOperStatus=starFiuFrcsIfOperStatus, starSSUSiuTotalVbrIn=starSSUSiuTotalVbrIn, starRoutCellsDrpdCnt=starRoutCellsDrpdCnt, starPvcDestDlci=starPvcDestDlci, starPvcmChangedConnectionNumber=starPvcmChangedConnectionNumber, starCfFANNum=starCfFANNum, starBbcpInvalidEventCt=starBbcpInvalidEventCt, starFileName=starFileName, starNeMib=starNeMib, starCasInfo=starCasInfo, starVplUpcCellsCLP0=starVplUpcCellsCLP0, starSSDRealStatus=starSSDRealStatus, starRcvdSubId=starRcvdSubId, starSwitchInfoSlotId=starSwitchInfoSlotId, starSvcmRxStatusMsgCnt=starSvcmRxStatusMsgCnt, starSlotRoute88Entry=starSlotRoute88Entry, starClkPrevSource=starClkPrevSource, starPPPIpRemoteToLocalCP=starPPPIpRemoteToLocalCP, starSvcmFiuQ933IllegalMsgCnt=starSvcmFiuQ933IllegalMsgCnt, starNeSwUpgradedFiles=starNeSwUpgradedFiles, starFrlMgtOutKeepalive=starFrlMgtOutKeepalive, starVplUpcGcra0ViolCount=starVplUpcGcra0ViolCount, starRclSwitchoverTime=starRclSwitchoverTime, starPortUsedFwdFixedCapacity=starPortUsedFwdFixedCapacity, starCasStatusPortSlotId=starCasStatusPortSlotId, frPvcEndptOperStatus=frPvcEndptOperStatus, starMipDestNeId=starMipDestNeId, starVclUpcCellsCLP0=starVclUpcCellsCLP0, starRoutPrioQInfoEntry=starRoutPrioQInfoEntry)
mibBuilder.exportSymbols("STARNE-MIB", starPvcSrcVci=starPvcSrcVci, starAal5ConfigTxVCChipId=starAal5ConfigTxVCChipId, starRoutNewVc=starRoutNewVc, starFrCongStatPortId=starFrCongStatPortId, starCellMuxUsedMedBufCnt=starCellMuxUsedMedBufCnt, starLoopbackCtrGCIDSlotIndex=starLoopbackCtrGCIDSlotIndex, starCcCtrGCIDSlotIndex=starCcCtrGCIDSlotIndex, starSvcAtsStatusTable=starSvcAtsStatusTable, starFiuFrcsIfInOctets=starFiuFrcsIfInOctets, starNeYCoordinate=starNeYCoordinate, starAal1SarRxOverrun=starAal1SarRxOverrun, starVplStatsTable=starVplStatsTable, starPmMisinsertedCellCount=starPmMisinsertedCellCount, starVclStatsEntry=starVclStatsEntry, starVclSourceVci=starVclSourceVci, starSlotRoute88WDFailCount=starSlotRoute88WDFailCount, starLoopbackCtrPortNum=starLoopbackCtrPortNum, samsung=samsung, starSwitchFabricColumn=starSwitchFabricColumn, starPmErroredCellCount=starPmErroredCellCount, starSvcAtsNotCacheCount=starSvcAtsNotCacheCount, starSvcmAiuTxAddPartyMsgCnt=starSvcmAiuTxAddPartyMsgCnt, starPvcInFixedCapa=starPvcInFixedCapa, starStandbySSUSlotNo=starStandbySSUSlotNo, starBbcpOutConnectionPreemptFailCt=starBbcpOutConnectionPreemptFailCt, starLoopbackCtrLastSetupResult=starLoopbackCtrLastSetupResult, starPortFiu12Ds3FramerEntry=starPortFiu12Ds3FramerEntry, starNeAlive=starNeAlive, starVplUpcTotalCells=starVplUpcTotalCells, starLoopbackCtrAssignedSessionNo=starLoopbackCtrAssignedSessionNo, starSvcInVariableCapa=starSvcInVariableCapa, starClkCurStatusLineEntry=starClkCurStatusLineEntry, starBbcpXConnAdjacentVci=starBbcpXConnAdjacentVci, starPPPLinkStatusBadAddresses=starPPPLinkStatusBadAddresses, starRoutEnAal5Epd=starRoutEnAal5Epd, starSwitchMulticastInfoEntry=starSwitchMulticastInfoEntry, starPortFiu12Ds1FER=starPortFiu12Ds1FER, starfrPVCEndptPerfPortId=starfrPVCEndptPerfPortId, starFiuSscsIfPerfRxUt=starFiuSscsIfPerfRxUt, starPPPLinkStatusRemoteMRU=starPPPLinkStatusRemoteMRU, starBbcpPtoPOutConnections=starBbcpPtoPOutConnections, starStandbySCUSlotNo=starStandbySCUSlotNo, starFiuHdlcTxBuffOverFlow=starFiuHdlcTxBuffOverFlow, starVplSourceNode=starVplSourceNode, starPvcmPtoMTermConnectionNumber=starPvcmPtoMTermConnectionNumber, starPortPdhUniIndex=starPortPdhUniIndex, starCasStatusPortCasSamplePeriod=starCasStatusPortCasSamplePeriod, starAal5StatusTbl=starAal5StatusTbl, starPortPlcpSEFScount=starPortPlcpSEFScount, starCcCtrSetup=starCcCtrSetup, starBbcpOutConnectionClearPreemptionCt=starBbcpOutConnectionClearPreemptionCt, starSvcRouteGCIDConnId=starSvcRouteGCIDConnId, starSSULoadHighMarkVbrOut=starSSULoadHighMarkVbrOut, starSSULinkConfigSlotId=starSSULinkConfigSlotId, starNeHwVersion=starNeHwVersion, starPortE1FramerIndex=starPortE1FramerIndex, starRlspForwardedCt=starRlspForwardedCt, starRoutCcbInfoEntry=starRoutCcbInfoEntry, starRoutVp=starRoutVp, starFiuFrcsPvcEndptOutFrames=starFiuFrcsPvcEndptOutFrames, starCcCtrPortIndex=starCcCtrPortIndex, starPhysicalLoopbackDescr=starPhysicalLoopbackDescr, starDS1E1CESCDVRxT=starDS1E1CESCDVRxT, frlPortActiveDlci=frlPortActiveDlci, starPvcRouteGCIDConnId=starPvcRouteGCIDConnId, starVplUpcTotalOAMCells=starVplUpcTotalOAMCells, starSvcmAiuStatsTable=starSvcmAiuStatsTable, starCcCtrGCIDLeafNum=starCcCtrGCIDLeafNum, starSSUSwitchMcGroupThreshold=starSSUSwitchMcGroupThreshold, starRclRegTaskName=starRclRegTaskName, starfrPVCEndptPerfTbl=starfrPVCEndptPerfTbl, starSvcmAiuTxDropPartyAckMsgCnt=starSvcmAiuTxDropPartyAckMsgCnt, starPortDS1ATMIndex=starPortDS1ATMIndex, starPvcConnectionEntry=starPvcConnectionEntry, starSSUSwitchMcBitsPerMcgThreshold=starSSUSwitchMcBitsPerMcgThreshold, starPortPmInterval=starPortPmInterval, starPortFiu12Ds1OOF=starPortFiu12Ds1OOF, starCRSRFailedSlotIndex=starCRSRFailedSlotIndex, starFrCongNoTxBECN=starFrCongNoTxBECN, starRoutRxMarkedCellCnt=starRoutRxMarkedCellCnt, starPortFiu12Ds3FramerPERR=starPortFiu12Ds3FramerPERR, starCfInvalidateFlash=starCfInvalidateFlash, starFrCongNoRecvFECN=starFrCongNoRecvFECN, starPPPIpRemoteMaxSlotId=starPPPIpRemoteMaxSlotId, starLoopbackCtrGCIDLeafNum=starLoopbackCtrGCIDLeafNum, starSwitchAggrOp=starSwitchAggrOp, starFrHdlcRxOverrunCount=starFrHdlcRxOverrunCount, starSvcmTxReleaseCompleteMsgCnt=starSvcmTxReleaseCompleteMsgCnt, starFrCongNoDiscardWithDE=starFrCongNoDiscardWithDE, starPortDs3RxFEBEcount=starPortDs3RxFEBEcount, starSlotLineClkSource=starSlotLineClkSource, starPortRemoteAtmAddress=starPortRemoteAtmAddress, starRclRegInfoTbl=starRclRegInfoTbl, starCfFileChanged=starCfFileChanged, starVplRtCellsDroppedCount=starVplRtCellsDroppedCount, starSSDBdEquipStatus=starSSDBdEquipStatus, starPvcInVariableCapa=starPvcInVariableCapa, starFiuPvcInfoSlotId=starFiuPvcInfoSlotId, starAal5PoolNum=starAal5PoolNum, starFrCongStatTimeStamp=starFrCongStatTimeStamp, starPvcmPtoPOrgConnectionNumber=starPvcmPtoPOrgConnectionNumber, starSlotBbcpXConnectTable=starSlotBbcpXConnectTable, starfrPVCEndptPerfTxKbps=starfrPVCEndptPerfTxKbps, starPortDS3FramerRevision=starPortDS3FramerRevision, starFiuFrcsPvcConnectAdminStatus=starFiuFrcsPvcConnectAdminStatus, starLsgnPeriodMsgCt=starLsgnPeriodMsgCt, starBbcpGCIDSlotId=starBbcpGCIDSlotId, starFiuHdlcRxShort=starFiuHdlcRxShort, starPPPIpTable=starPPPIpTable, starPortUpcGcra0ViolCount=starPortUpcGcra0ViolCount, starPortAlarmRealStatus=starPortAlarmRealStatus, starRoutIsQCongested=starRoutIsQCongested, starFrHdlcTxUnderrunCount=starFrHdlcTxUnderrunCount, starSSDIndex=starSSDIndex, starFiuSscsIfPerfTxFrPs=starFiuSscsIfPerfTxFrPs, starBbcpOutConnectionChipErrorCt=starBbcpOutConnectionChipErrorCt, starPortSonetUniMsgTxCt=starPortSonetUniMsgTxCt, starVclStatsTimeStamp=starVclStatsTimeStamp, starPortDS3FramerEntry=starPortDS3FramerEntry, starDS1E1CESBufOverflows=starDS1E1CESBufOverflows, starLoopbackResultEntry=starLoopbackResultEntry, starPPPLqrEntry=starPPPLqrEntry, starSSUMulticastGroup=starSSUMulticastGroup, starPPPLqrInGoodOctets=starPPPLqrInGoodOctets, starPvcRouteAdjacentNodeType=starPvcRouteAdjacentNodeType, starSSUMulticastInfoTbl=starSSUMulticastInfoTbl, starPortUpcCellsCLP0=starPortUpcCellsCLP0, starFiuHdlcRxOverrun=starFiuHdlcRxOverrun, starVplRtNewVpi=starVplRtNewVpi, starPortPlcpUAScount=starPortPlcpUAScount, starCDRGetReason=starCDRGetReason, starMipSourceSlot=starMipSourceSlot, starPortPmCnt=starPortPmCnt, starCcCtrGCIDDlci=starCcCtrGCIDDlci, starFiuHdlcRxByteCount=starFiuHdlcRxByteCount, starSSUPmThresholdInfoEntry=starSSUPmThresholdInfoEntry, starCcCtrGCIDVpi=starCcCtrGCIDVpi, starRoutPti5=starRoutPti5, starRoutMaxPerVcQd=starRoutMaxPerVcQd, starDS1E1CESStatsEntry=starDS1E1CESStatsEntry, starPvcRouteSrcGCIDLeafId=starPvcRouteSrcGCIDLeafId, starFrCongStatInfoEntry=starFrCongStatInfoEntry, starPortFiu12Ds3FramerTable=starPortFiu12Ds3FramerTable, starPortLMIStatsTable=starPortLMIStatsTable, starPPPLqrOutLQRs=starPPPLqrOutLQRs, starSlotTable=starSlotTable, starSSULinkMaxVbr=starSSULinkMaxVbr, starPortLastChanged=starPortLastChanged, starSwitchFabricLevel=starSwitchFabricLevel, starSvcRouteOutgoingNodeType=starSvcRouteOutgoingNodeType, starPortE1FramerEntry=starPortE1FramerEntry, starLoopbackCtrGCIDModuleIfType=starLoopbackCtrGCIDModuleIfType, starCRSRDescriptionCode=starCRSRDescriptionCode, starPortPmPriority=starPortPmPriority, starPortFiu12Ds3FramerDXZS=starPortFiu12Ds3FramerDXZS, starDS2ChanIndex=starDS2ChanIndex, starClkDistribStatusSiu6=starClkDistribStatusSiu6, starSlotIdPortLoadInfo=starSlotIdPortLoadInfo, starSysSlotStatusTable=starSysSlotStatusTable, starQueueName=starQueueName, starVclSourcePort=starVclSourcePort, starFiuFrcsIfOutUcastPkts=starFiuFrcsIfOutUcastPkts, starAal5TxVCChannelType=starAal5TxVCChannelType, starSSULinkConfigSwitchLevel=starSSULinkConfigSwitchLevel, starFiuSscsIfInfoEntry=starFiuSscsIfInfoEntry, starPortE1FramerFASErrorCounter=starPortE1FramerFASErrorCounter, starFrLmiPortIndex=starFrLmiPortIndex, starActiveSSUSlotNo=starActiveSSUSlotNo, starPortFiu12Ds1Table=starPortFiu12Ds1Table, frPvcEndptNoTxDE=frPvcEndptNoTxDE, starRclSwitchoverResetTime=starRclSwitchoverResetTime, starFrMgmtStatisticPortId=starFrMgmtStatisticPortId, starPvcConnectionOperStatus=starPvcConnectionOperStatus, starFrlMgtOutStatus=starFrlMgtOutStatus, starDS1E1CESCBRService=starDS1E1CESCBRService, starRoutEmptyQstate=starRoutEmptyQstate, starCasStatusPortConfigured=starCasStatusPortConfigured, starCellMuxFreeHighBufCnt=starCellMuxFreeHighBufCnt, starRoutIsCellInQueue=starRoutIsCellInQueue, starFiuHdlcTxCountOverflow=starFiuHdlcTxCountOverflow, starSiuIdSiuLoadInfo=starSiuIdSiuLoadInfo, starFiuFrcsPvcEndptInOamCells=starFiuFrcsPvcEndptInOamCells, starSiuIdPortLoadInfo=starSiuIdPortLoadInfo, starTotalOutFixedCapa=starTotalOutFixedCapa, starFrlMgtOutAsyncUpdates=starFrlMgtOutAsyncUpdates, starFrlMgtNoRecvErDlci=starFrlMgtNoRecvErDlci, starDS1E1CESCellLossIntegPrd=starDS1E1CESCellLossIntegPrd, starPvcRouteHopIndex=starPvcRouteHopIndex, starPmSeverelyErroredBlockCount=starPmSeverelyErroredBlockCount, starPortDS1FramerLineCoding=starPortDS1FramerLineCoding, starSvcmAiuRxDropPartyAckMsgCnt=starSvcmAiuRxDropPartyAckMsgCnt, starClkDistribStatusSiu1=starClkDistribStatusSiu1, starSvcRouteGCIDPortId=starSvcRouteGCIDPortId, starSvcmLastTxCause=starSvcmLastTxCause, starPvcConnectionType=starPvcConnectionType, starFiuHdlcTxPduCount=starFiuHdlcTxPduCount, starCcCtrVci=starCcCtrVci, starFiuFrcsIfInErrors=starFiuFrcsIfInErrors, starSvcmConnectionSetupFailCnt=starSvcmConnectionSetupFailCnt, starAtmPointTable=starAtmPointTable, starPortFiu12E1CRC=starPortFiu12E1CRC, starPvcmPtoPTermConnectionNumber=starPvcmPtoPTermConnectionNumber, starPvcRouteEntry=starPvcRouteEntry, starPmLostCellClp0Count=starPmLostCellClp0Count, starPvcOutFixedCapa=starPvcOutFixedCapa, starFaultHappenValue=starFaultHappenValue, starCfAluBrightness=starCfAluBrightness, starPortTable=starPortTable, starSvcmFiuQ922LinkFailIndicationCnt=starSvcmFiuQ922LinkFailIndicationCnt, starPortPdhUniTable=starPortPdhUniTable, starBbcpInConnectionVcciCollisionFailCt=starBbcpInConnectionVcciCollisionFailCt, starCfAluCharacterDisplay=starCfAluCharacterDisplay, starTrapControlEntry=starTrapControlEntry, starfrPVCEndptPerfTmStp=starfrPVCEndptPerfTmStp, starLoopbackCtrGenCellType=starLoopbackCtrGenCellType, starAccountManager=starAccountManager, starMcSwitchFabricColumn=starMcSwitchFabricColumn, starSvcmAiuStatsEntry=starSvcmAiuStatsEntry, starPmStatsChangeTable=starPmStatsChangeTable, starCcCtrEndType=starCcCtrEndType, starPPPLinkStatusPhysicalIndex=starPPPLinkStatusPhysicalIndex, starCellMuxFreeMedBufCnt=starCellMuxFreeMedBufCnt, starPortSonetUniHECErrorCt=starPortSonetUniHECErrorCt, starPvcRouteAdjacentSlotId=starPvcRouteAdjacentSlotId, starBbcpOutConnectionNoSwitchCapacityCt=starBbcpOutConnectionNoSwitchCapacityCt, frPvcEndptNoRecvBECN=frPvcEndptNoRecvBECN, starSvcmRxStatusEnquiryMsgCnt=starSvcmRxStatusEnquiryMsgCnt, starCRSRFailedPortIndex=starCRSRFailedPortIndex, starRclInfoEntry=starRclInfoEntry, starMcSwitchFabricRow=starMcSwitchFabricRow, starPvcRouteAdjacentPortId=starPvcRouteAdjacentPortId, starPortDS1FramerBPVCounter=starPortDS1FramerBPVCounter, starSvcmAiuRxBGNCells=starSvcmAiuRxBGNCells, starPortHdlcClockMode=starPortHdlcClockMode, starQueuePoolId=starQueuePoolId, starPortRtCellsCongCount=starPortRtCellsCongCount, starAal1SarLostCellCnt=starAal1SarLostCellCnt, starFrMgmtStatisticSlotId=starFrMgmtStatisticSlotId, starSvcmStatusTable=starSvcmStatusTable, starPortM32RxCrcErrorCount=starPortM32RxCrcErrorCount, starReturnedErrorCode=starReturnedErrorCode, starRipAddress2=starRipAddress2, starPortDs3LSEScount=starPortDs3LSEScount, starFaultManager=starFaultManager, starSvcRouteGCIDSlotId=starSvcRouteGCIDSlotId, starDS1E1CESConfEntry=starDS1E1CESConfEntry, starSvcmActiveCallCnt=starSvcmActiveCallCnt, starPhysicalLoopbackEntry=starPhysicalLoopbackEntry, starClkStatus=starClkStatus, starMipRouteEntry=starMipRouteEntry, starPhysicalLoopbackStatus=starPhysicalLoopbackStatus, starPortOperRealStatus=starPortOperRealStatus, starSwitchReason=starSwitchReason, starPvcmAddedConnectionNumber=starPvcmAddedConnectionNumber)
mibBuilder.exportSymbols("STARNE-MIB", starFrlMgtOutStatusReply=starFrlMgtOutStatusReply, starPortDS1FramerFrameMode=starPortDS1FramerFrameMode, starTrapSubId=starTrapSubId, starPvcRouteOutgoingNodeType=starPvcRouteOutgoingNodeType, starPmCtrNodeType=starPmCtrNodeType, starFrHdlcPmSlotId=starFrHdlcPmSlotId, starRipAddress3=starRipAddress3, starPmPortStatusChange=starPmPortStatusChange, starCDRFileSplitNum=starCDRFileSplitNum, starDS1E1CESConfTable=starDS1E1CESConfTable, starClkStatusSlotId=starClkStatusSlotId, starRoutPerPrioMaximumQd=starRoutPerPrioMaximumQd, starNeSwUpgradeCancel=starNeSwUpgradeCancel, starAal5ConfigTxVCTbl=starAal5ConfigTxVCTbl, starVpiRangeTable=starVpiRangeTable, starSiuPortIdPortLoadInfo=starSiuPortIdPortLoadInfo, starfrPVCEndptPerfTblEntry=starfrPVCEndptPerfTblEntry, starSSUSiuPortTotalConnections=starSSUSiuPortTotalConnections, starPmCtrTable=starPmCtrTable, starRoutTags=starRoutTags, starSSDPwrFailStatus=starSSDPwrFailStatus, starPPPLinkStatusLocalToRemotePC=starPPPLinkStatusLocalToRemotePC, starFiuFrcsPvcEndptOutOamCells=starFiuFrcsPvcEndptOutOamCells, starActiveSPUSlotNo=starActiveSPUSlotNo, starClkCurStatusSiu9=starClkCurStatusSiu9, starCfConfiguredFileVersion=starCfConfiguredFileVersion, starSlotRoute88BPIgnoredCount=starSlotRoute88BPIgnoredCount, starClkDistribStatusSiu8=starClkDistribStatusSiu8, starPPPLinkStatusLocalToRemoteACFC=starPPPLinkStatusLocalToRemoteACFC, starPortFiu12Ds3FramerCPERR=starPortFiu12Ds3FramerCPERR, starBbcpOutConnectionClearLinkFailCt=starBbcpOutConnectionClearLinkFailCt, starNeNodeManagerIP=starNeNodeManagerIP, starSvcRouteGCIDIfType=starSvcRouteGCIDIfType, starPPPLqrInLQRs=starPPPLqrInLQRs, starVclSourceDlci=starVclSourceDlci, starVpiVciBitRangeClass=starVpiVciBitRangeClass, starPortMaxVCINumber=starPortMaxVCINumber, starSSUSiuLoadInfoTbl=starSSUSiuLoadInfoTbl, starCfBootSwitch=starCfBootSwitch, starPvcRouteSrcGCIDConnId=starPvcRouteSrcGCIDConnId, starFrCongNoMarkDE=starFrCongNoMarkDE, starPmIndex=starPmIndex, starSysClockInfo=starSysClockInfo, starBbcpOutConnectionNoBBCapacityCt=starBbcpOutConnectionNoBBCapacityCt, starLoopbackCtrDeviceId=starLoopbackCtrDeviceId, starSSULoadInfoTbl=starSSULoadInfoTbl, starPortHdlcConfigTable=starPortHdlcConfigTable, starCasStatusPortPortId=starCasStatusPortPortId, starSvcAtsCachedReqCount=starSvcAtsCachedReqCount, starPortCellStatsTable=starPortCellStatsTable, starPortPmThresholdEntry=starPortPmThresholdEntry, starSwitchRatioBOrder2=starSwitchRatioBOrder2, starPmCtrVpi=starPmCtrVpi, starBackboneLinkIfType=starBackboneLinkIfType, starSSUCrsrReqFailedMcgExceededThreshold=starSSUCrsrReqFailedMcgExceededThreshold, starSvcmAiuRxAddPartyMsgCnt=starSvcmAiuRxAddPartyMsgCnt, starFatalErrorCode=starFatalErrorCode, starCcCtrInputType=starCcCtrInputType, starPvcmOrgHoldingConnectionNumber=starPvcmOrgHoldingConnectionNumber, starSwitchOutMarkedCellCnt=starSwitchOutMarkedCellCnt, starVclRtCellsDroppedCount=starVclRtCellsDroppedCount, starPmCollectInterval=starPmCollectInterval, starPmTable=starPmTable, starBbcpPortIndex=starBbcpPortIndex, starPortLMILinkStats=starPortLMILinkStats, starFiuHdlcRxAbort=starFiuHdlcRxAbort, starRclNumSwitchovers=starRclNumSwitchovers, starVclUpcGcra0ViolCount=starVclUpcGcra0ViolCount, starPhysicalLoopbackDs1Port=starPhysicalLoopbackDs1Port, starLoopbackResultTable=starLoopbackResultTable, starSvcAtsRxValidResponseCount=starSvcAtsRxValidResponseCount, starVclRtCongestedState=starVclRtCongestedState, starFrlMgtNoMismatchSeqNo=starFrlMgtNoMismatchSeqNo, starPortAlarmStatus=starPortAlarmStatus, starSSDModuleType=starSSDModuleType, starSSUSiuPortTotalVbrIn=starSSUSiuPortTotalVbrIn, starPortSonetUniMsgRxCt=starPortSonetUniMsgRxCt, starRemoteNeId=starRemoteNeId, starRclInfoSlotId=starRclInfoSlotId, starSSUSiuPortTotalFbrIn=starSSUSiuPortTotalFbrIn, starSlotIdSiuLoadInfo=starSlotIdSiuLoadInfo, starPhysicalLoopbackCtrl=starPhysicalLoopbackCtrl, starFiuSscsIfPerfRxPktSz=starFiuSscsIfPerfRxPktSz, starPortDs3TxFEBEcount=starPortDs3TxFEBEcount, starRoutBckPressureDly=starRoutBckPressureDly, starSvcmAiuTxDropPartyMsgCnt=starSvcmAiuTxDropPartyMsgCnt, starFrHdlcPmPortId=starFrHdlcPmPortId, starFiuFrcsIfOutOctets=starFiuFrcsIfOutOctets, starBbcpPtoPInConnections=starBbcpPtoPInConnections, starPortFiu12Ds1LCV=starPortFiu12Ds1LCV, starBbcpInConnectionTimeoutCt=starBbcpInConnectionTimeoutCt, starSlotModuleSwVersion=starSlotModuleSwVersion, starSSULoadInfoSlotId=starSSULoadInfoSlotId, starFiuSscsIfPerfTxKbps=starFiuSscsIfPerfTxKbps, starAal5StatusInfoEntry=starAal5StatusInfoEntry, starAal5ConfigRxVCSlotIdInfo=starAal5ConfigRxVCSlotIdInfo, starTrapControlTable=starTrapControlTable, starNeXCoordinate=starNeXCoordinate, starAal5NumTimesTimerExpire=starAal5NumTimesTimerExpire, starFrMgmtStatisticInfoTbl=starFrMgmtStatisticInfoTbl, starfrPVCEndptPerfRxFrPs=starfrPVCEndptPerfRxFrPs, starPvcmInvalidMsgNumber=starPvcmInvalidMsgNumber, starDeviceId=starDeviceId, starFiuFrcsPvcRxVc=starFiuFrcsPvcRxVc, starNeSwUpgradeDownload=starNeSwUpgradeDownload, starPerformanceManager=starPerformanceManager, starSvcAtsValue=starSvcAtsValue, starPortE1FramerSignalMode=starPortE1FramerSignalMode, starPortOperStatus=starPortOperStatus, starRoutWatchDogConfig=starRoutWatchDogConfig, starPortDS1ATMHecCnt=starPortDS1ATMHecCnt, starPortFiu12E1LCV=starPortFiu12E1LCV, starPortE1FramerTable=starPortE1FramerTable, starAal5PeakRate=starAal5PeakRate, starAal5RxVCChannelType=starAal5RxVCChannelType, starPmCtrLastAssignedSession=starPmCtrLastAssignedSession, starLoopbackCtrTimetoWait=starLoopbackCtrTimetoWait, starPvcRouteGCIDPortId=starPvcRouteGCIDPortId, starPortDS1FramerTable=starPortDS1FramerTable, starAal5ChannelStatisticsChipId=starAal5ChannelStatisticsChipId, starBbcpGCIDPortId=starBbcpGCIDPortId, starFrlMgtNoT392TimeOut=starFrlMgtNoT392TimeOut, starSSULinkConfigInfoEntry=starSSULinkConfigInfoEntry, starPortDs3UniTable=starPortDs3UniTable, starBbcpInConnectionClearModuleFailCt=starBbcpInConnectionClearModuleFailCt, starPvcRouteGCIDLeafId=starPvcRouteGCIDLeafId, starPortUsedBwdVariableCapacity=starPortUsedBwdVariableCapacity, starCellMuxCurrentState=starCellMuxCurrentState, starSvcmPtoPOrgActiveConnectionCnt=starSvcmPtoPOrgActiveConnectionCnt, starVplStatsTimeStamp=starVplStatsTimeStamp, starSSULoadHighMarkFbrOut=starSSULoadHighMarkFbrOut, starRipAddress0=starRipAddress0, starClkDistribStatusSiu7=starClkDistribStatusSiu7, starSvcRouteEntry=starSvcRouteEntry, starLoopbackCtrCellSpeed=starLoopbackCtrCellSpeed, starCcCtrGCIDVci=starCcCtrGCIDVci, starBbcpInConnectionNoSwitchCapacityCt=starBbcpInConnectionNoSwitchCapacityCt, starLoopbackCtrTxCellNo=starLoopbackCtrTxCellNo, starPortM32RxByteCount=starPortM32RxByteCount, starPPPIpOperStatus=starPPPIpOperStatus, starPortConfigRealStatus=starPortConfigRealStatus, starVciBitRangeValue=starVciBitRangeValue, starSSUSiuPortTotalVbrOut=starSSUSiuPortTotalVbrOut, starBbcpOutConnectionClearModuleFailCt=starBbcpOutConnectionClearModuleFailCt, starPvcmPtoMOrgConnectionNumber=starPvcmPtoMOrgConnectionNumber, starPortPmThreshIdx=starPortPmThreshIdx, starSvcRouteTable=starSvcRouteTable, starAal1SarRxCellLossStatus=starAal1SarRxCellLossStatus, starCcCtrGCIDModuleIfType=starCcCtrGCIDModuleIfType, starFiuHdlcStatusChipId=starFiuHdlcStatusChipId, starCfSlotInstalled=starCfSlotInstalled, starNeSwUpgradeStatus=starNeSwUpgradeStatus, starFrCongNoTxDE=starFrCongNoTxDE, starFiuModuleInfo=starFiuModuleInfo, starPortDescr=starPortDescr, starClkCurStatusSiu8=starClkCurStatusSiu8, starPPPLinkStatusRemoteToLocalACFC=starPPPLinkStatusRemoteToLocalACFC, starBbcpOutConnectionVcciInvalidCt=starBbcpOutConnectionVcciInvalidCt, starBbcpPtoMInConnections=starBbcpPtoMInConnections, starNeReset=starNeReset, starPortDS3FramerIndex=starPortDS3FramerIndex, starBackboneLinkDestSlotId=starBackboneLinkDestSlotId, starCcbInfoSlotId=starCcbInfoSlotId, starSlotLastInstalledTime=starSlotLastInstalledTime, starSlotVpiVciRange=starSlotVpiVciRange, starSSUPmThresholdSlotId=starSSUPmThresholdSlotId, starBbcpInConnectionModuleFailCt=starBbcpInConnectionModuleFailCt, starPortUpcTotalOAMCells=starPortUpcTotalOAMCells, starSystem=starSystem, starPortFiu12E1FER=starPortFiu12E1FER, starAal5ConfigTxVCInfoEntry=starAal5ConfigTxVCInfoEntry, starCcCtrGCIDPortIndex=starCcCtrGCIDPortIndex, starFiuFrcsIfInDiscards=starFiuFrcsIfInDiscards, starPmCtrVci=starPmCtrVci, starRoutEmptyQCongQd=starRoutEmptyQCongQd, starPvcmOptimizedConnectionNumber=starPvcmOptimizedConnectionNumber, starSvcmAiuRxUSTATCells=starSvcmAiuRxUSTATCells, starFiuHdlcTxUnderrun=starFiuHdlcTxUnderrun, starPortRtCellsRxCount=starPortRtCellsRxCount, starClkDistribStatusTbl=starClkDistribStatusTbl, starSlotIdPrioQInfo=starSlotIdPrioQInfo, starSvcmRxSetupMsgCnt=starSvcmRxSetupMsgCnt, starPvcDestTimeslot=starPvcDestTimeslot, starEthernetType=starEthernetType, starBackboneLinkStatus=starBackboneLinkStatus, starPPPLinkStatusTable=starPPPLinkStatusTable, starPvcRouteGCIDIfType=starPvcRouteGCIDIfType, starVplUpcGcra1ViolCount=starVplUpcGcra1ViolCount, starPortMaxFixedCapacity=starPortMaxFixedCapacity, starPortUsedVCINumber=starPortUsedVCINumber, starPortDS1ATMRxBusyCellCnt=starPortDS1ATMRxBusyCellCnt, starBackboneLinkDestPortId=starBackboneLinkDestPortId, starFiuFrcsIfInUcastPkts=starFiuFrcsIfInUcastPkts, starSeverity=starSeverity, starAal5NumPktsQuedToTransmit=starAal5NumPktsQuedToTransmit, starPmCtrActivate=starPmCtrActivate, starSwitchLinkFbrOut=starSwitchLinkFbrOut, starDS1E1CESCas=starDS1E1CESCas, starCfActualFileVersion=starCfActualFileVersion, starLinkLoadSwitchFabricColumn=starLinkLoadSwitchFabricColumn, starSwitch88Info=starSwitch88Info, frPvcEndptInfoTimeStamp=frPvcEndptInfoTimeStamp, starMipSourcePort=starMipSourcePort, starPvcSrcIfType=starPvcSrcIfType, starSlotRoute88Revision=starSlotRoute88Revision, starSvcmAiuRxAddPartyAckMsgCnt=starSvcmAiuRxAddPartyAckMsgCnt, starSvcmAiuRxMDCells=starSvcmAiuRxMDCells, starSwitchCurrentState=starSwitchCurrentState, starAal1SarIncorrectSnpCnt=starAal1SarIncorrectSnpCnt, starActiveSCUSlotNo=starActiveSCUSlotNo, starFiuFrcsPvcEndptOperStatus=starFiuFrcsPvcEndptOperStatus, starRoutLiveFailCnt=starRoutLiveFailCnt, starSvcmPtoMPTermActiveConnectionCnt=starSvcmPtoMPTermActiveConnectionCnt, starSlotRlspStatusTable=starSlotRlspStatusTable, starSvcmStatusEntry=starSvcmStatusEntry, starRcvdMsgType=starRcvdMsgType, starLoopbackCtrGCIDTimeSlot=starLoopbackCtrGCIDTimeSlot, starRoutCurrentState=starRoutCurrentState, starSSUConfigInfoTbl=starSSUConfigInfoTbl, starNeSwUpgradeCurrentFile=starNeSwUpgradeCurrentFile, starFiuSscsIfPerfRxFrPs=starFiuSscsIfPerfRxFrPs, starClkSourceLine=starClkSourceLine, starVclStatsTable=starVclStatsTable, starLoopbackCtrGCIDVpi=starLoopbackCtrGCIDVpi, starFrHdlcPmInfoEntry=starFrHdlcPmInfoEntry, starPrioQRoutChipId=starPrioQRoutChipId, starSlotSSUInfo=starSlotSSUInfo, starSvcAtsServerStatus=starSvcAtsServerStatus, starSwitchRatioAOrder2=starSwitchRatioAOrder2, starPortFiu12Ds3FramerFEBE=starPortFiu12Ds3FramerFEBE, starSvcmFiuQ933TimerExpiryCnt=starSvcmFiuQ933TimerExpiryCnt, starCfShelf=starCfShelf, starSSULoadTotalFbrIn=starSSULoadTotalFbrIn, starNeMipAddress=starNeMipAddress, starClkCurStatusSiu5=starClkCurStatusSiu5, starPortM32TxByteCount=starPortM32TxByteCount, starPortM32RxShortFrameCount=starPortM32RxShortFrameCount, starPortHdlcLineEncoding=starPortHdlcLineEncoding, starDS1E1CESPartialFill=starDS1E1CESPartialFill, starRoutCongCellCnt=starRoutCongCellCnt, starPortHdlcConfigEntry=starPortHdlcConfigEntry, starCasStatusStatusChange=starCasStatusStatusChange, starBbcpXConnAdjacentSlotId=starBbcpXConnAdjacentSlotId, starSSUSiuLoadInfoEntry=starSSUSiuLoadInfoEntry, starLoopbackCtrGCIDPortIndex=starLoopbackCtrGCIDPortIndex, starPortEntry=starPortEntry, starSlotIdCellMuxInfo=starSlotIdCellMuxInfo, starCellMuxUsedHighBufCnt=starCellMuxUsedHighBufCnt, starNeDescr=starNeDescr, starSysSlotStatusEntry=starSysSlotStatusEntry, starSysClockTbl=starSysClockTbl, starPPPIpEntry=starPPPIpEntry, starPortPlcpEFScount=starPortPlcpEFScount, starVclPortIndex=starVclPortIndex)
mibBuilder.exportSymbols("STARNE-MIB", starPortRealStatusEntry=starPortRealStatusEntry, starVclSourceVpi=starVclSourceVpi, starPmTotalCellClp01Count=starPmTotalCellClp01Count, starLsgnTrafficLoadChangedCt=starLsgnTrafficLoadChangedCt, starPortFiu12Ds3FramerLCV=starPortFiu12Ds3FramerLCV, starPvcmOrgConnectedFailCt=starPvcmOrgConnectedFailCt, starVplSourcePort=starVplSourcePort, starSSULoadLowMarkVbrOut=starSSULoadLowMarkVbrOut, starFiuSscsPvcInfoEntry=starFiuSscsPvcInfoEntry, starCfSlotActualBoardType=starCfSlotActualBoardType, starRoutPerPrioCurrentQd=starRoutPerPrioCurrentQd, starCcbRoutChipId=starCcbRoutChipId, frlPortInfoTbl=frlPortInfoTbl, starPortFiu12Ds1Entry=starPortFiu12Ds1Entry, starCfActivePSUNo=starCfActivePSUNo, starSlotModuleDescr=starSlotModuleDescr, starSSUCrsrReconcileFailThreshold=starSSUCrsrReconcileFailThreshold, starPortUsedVPINumber=starPortUsedVPINumber, starPortPlcpSEScount=starPortPlcpSEScount, starPvcRouteQueryDescr=starPvcRouteQueryDescr, starPortPlcpTxFEBEcount=starPortPlcpTxFEBEcount, starSiuRednOperStatus=starSiuRednOperStatus, starVplStatsEntry=starVplStatsEntry, starRclSwitchoverReason=starRclSwitchoverReason, starSvcmAiuRxSTATCells=starSvcmAiuRxSTATCells, starConfigManager=starConfigManager, starSlotIndex=starSlotIndex, starBbcpAvailableFixedCapacity=starBbcpAvailableFixedCapacity, starSlotRoute88TxParityFailCount=starSlotRoute88TxParityFailCount, starRoutWdFailCnt=starRoutWdFailCnt, starAal5NumTimesInvalidCPI=starAal5NumTimesInvalidCPI, starPortUpcGcra1ViolCount=starPortUpcGcra1ViolCount, starCasStatusPortId=starCasStatusPortId, starSwitchFabricRow=starSwitchFabricRow, starSvcmTxRestartAckMsgCnt=starSvcmTxRestartAckMsgCnt, starRoutCcbInfoTbl=starRoutCcbInfoTbl, starPvcRouteLocalIfType=starPvcRouteLocalIfType, starLoopbackCtrPortIndex=starLoopbackCtrPortIndex, starSvcmRxRestartAckMsgCnt=starSvcmRxRestartAckMsgCnt, starCcCtrGCIDTimeSlot=starCcCtrGCIDTimeSlot, starPvcRouteLocalConnId=starPvcRouteLocalConnId, frlPortInfoSlotId=frlPortInfoSlotId, starPortM32ChipId=starPortM32ChipId, starSvcmAiuRxENDCells=starSvcmAiuRxENDCells, starRlspInvalidCt=starRlspInvalidCt, starAmCacheTimer=starAmCacheTimer, starPvcDestVci=starPvcDestVci, starClkCurStatusLineTbl=starClkCurStatusLineTbl, starPortDS1FramerCRCErrorCounter=starPortDS1FramerCRCErrorCounter, starBbcpGCIDConnId=starBbcpGCIDConnId, starFiuSscsIfInfoTbl=starFiuSscsIfInfoTbl, starPPPLinkStatusReceiveFcsSize=starPPPLinkStatusReceiveFcsSize, starRoutNewVp=starRoutNewVp, starSSULoadTotalFbrOut=starSSULoadTotalFbrOut, starCasStatusNewStatusSampleNum=starCasStatusNewStatusSampleNum, starSvcmRxConnectMsgCnt=starSvcmRxConnectMsgCnt, starRemoteModuleNum=starRemoteModuleNum, starPmCtrBackRptGen=starPmCtrBackRptGen, starBackboneLinkEntry=starBackboneLinkEntry, starRoutCongPerVcQd=starRoutCongPerVcQd, starSwitchStrictPriority=starSwitchStrictPriority, starAal5ChannelStatisticsInfoEntry=starAal5ChannelStatisticsInfoEntry, starSSUMcOutputFbr=starSSUMcOutputFbr, starRclRegInfoEntry=starRclRegInfoEntry, starFaultGroupId=starFaultGroupId, starLsgnLinkOperStatus=starLsgnLinkOperStatus, starSvcAts=starSvcAts, starSlotIdSwitchMcInfo=starSlotIdSwitchMcInfo, starClkDistribStatusSiu2=starClkDistribStatusSiu2, frlPortInfoEntry=frlPortInfoEntry, starFiuHdlcRxBuffOverFlow=starFiuHdlcRxBuffOverFlow, starSvcmFiuStatsTable=starSvcmFiuStatsTable, starPPPLqrTable=starPPPLqrTable, starPmCtrBlockSize=starPmCtrBlockSize, starPortUsedFwdVariableCapacity=starPortUsedFwdVariableCapacity, starStandbySPUSlotNo=starStandbySPUSlotNo, starPvcRouteSrcGCIDSlotId=starPvcRouteSrcGCIDSlotId, starFrlExtnModuleInfo=starFrlExtnModuleInfo, starNeTimeofDay=starNeTimeofDay, starAtmPointEntry=starAtmPointEntry, starVplRtCongestedState=starVplRtCongestedState, starGcidSlotIndex=starGcidSlotIndex, starRclRegKey=starRclRegKey, starNeSwVersion=starNeSwVersion, starPortFiu12E1FEBE=starPortFiu12E1FEBE, starPvcRouteSrcGCIDIfType=starPvcRouteSrcGCIDIfType, starPmCtrEntry=starPmCtrEntry, starLoopbackCtrTable=starLoopbackCtrTable, starPortRAIstatus=starPortRAIstatus, starCasStatusPortCasSampleNum=starCasStatusPortCasSampleNum, starFiuSscsIfPerfTblEntry=starFiuSscsIfPerfTblEntry, starRoutVc=starRoutVc, starSvcmAiuRxRSCells=starSvcmAiuRxRSCells, starfrPVCEndptPerfTxUt=starfrPVCEndptPerfTxUt, starAmCDRMaxCount=starAmCDRMaxCount, starSlotIdSwitchLoadInfo=starSlotIdSwitchLoadInfo, starPmLostCellClp01Count=starPmLostCellClp01Count, starRoutEnClpDrop=starRoutEnClpDrop, starSvcmAiuTxSSCOPDiscardedCells=starSvcmAiuTxSSCOPDiscardedCells, starPvcmTimerExpiredCnt=starPvcmTimerExpiredCnt, starAal5NumTimesCRCViolation=starAal5NumTimesCRCViolation, starBbcpOutConnectionTimeoutCt=starBbcpOutConnectionTimeoutCt, starSiuRednConfigStatus=starSiuRednConfigStatus, starPortConfig=starPortConfig, starCesInfo=starCesInfo, starSSUPercentVbrToLoad=starSSUPercentVbrToLoad, starTrapPriority=starTrapPriority, starPortDS1FramerEntry=starPortDS1FramerEntry, starSSULoadTotalVbrOut=starSSULoadTotalVbrOut, starPhysicalLoopbackMethod=starPhysicalLoopbackMethod, starPortIfIndex=starPortIfIndex, starSlotEntry=starSlotEntry, starSvcmFiuQ922TimerExpiryCnt=starSvcmFiuQ922TimerExpiryCnt, starSSULinkConfigInfoTbl=starSSULinkConfigInfoTbl, starSSUMcSourceSiu=starSSUMcSourceSiu, starSysSlotRedundencyInfo=starSysSlotRedundencyInfo, starPvcDestNodeId=starPvcDestNodeId, starDS1E1CESCellLossStatus=starDS1E1CESCellLossStatus, starSlotModuleHwVersion=starSlotModuleHwVersion, starFrCongNoRecvBECN=starFrCongNoRecvBECN, starSvcmTxConnectMsgCnt=starSvcmTxConnectMsgCnt, starClkDistribStatusSiu5=starClkDistribStatusSiu5, starAal5ConfigTxVCSlotIdInfo=starAal5ConfigTxVCSlotIdInfo, starRlspDiscardedCt=starRlspDiscardedCt, starVclSourceIftype=starVclSourceIftype, starSlotRoute88RxMarkedCells=starSlotRoute88RxMarkedCells, starNeSoftwareType=starNeSoftwareType, starPvcmStatusTable=starPvcmStatusTable, starSvcmTxRestartMsgCnt=starSvcmTxRestartMsgCnt, starRclHmcTestResult=starRclHmcTestResult, starSSUSiuInvalidationTimeout=starSSUSiuInvalidationTimeout, starBbcpInvalidMsgCt=starBbcpInvalidMsgCt, starSvcmCacThreshold=starSvcmCacThreshold, starPortM32RxDiscardFrameCount=starPortM32RxDiscardFrameCount, starSlotBbcpStatusTable=starSlotBbcpStatusTable, starFiuSscsIfPerfPortId=starFiuSscsIfPerfPortId, starSwitchLinkLoadTbl=starSwitchLinkLoadTbl, starPortRealStatusDescr=starPortRealStatusDescr, starCasStatusChannelId=starCasStatusChannelId, starVclRtCellsRxCount=starVclRtCellsRxCount, starVplSourceSlot=starVplSourceSlot, starConnClearCause=starConnClearCause, starSwitchMulticastPorts=starSwitchMulticastPorts, starCellMuxChipVersion=starCellMuxChipVersion, starNeOperStatus=starNeOperStatus, starBbcpSlotIndex=starBbcpSlotIndex, starAal5Priority=starAal5Priority, starSvcmRxReleaseCompleteMsgCnt=starSvcmRxReleaseCompleteMsgCnt, starAal1SarRxCellCnt=starAal1SarRxCellCnt, starPvcmConnectReqFailCt=starPvcmConnectReqFailCt, starPPPIpLocalToRemoteCP=starPPPIpLocalToRemoteCP, starRoutPrioQInfoTbl=starRoutPrioQInfoTbl, starAal1SarRxOAMCellCnt=starAal1SarRxOAMCellCnt, starPmStatsChangeEntry=starPmStatsChangeEntry, starVclUpcTotalOAMCells=starVclUpcTotalOAMCells, starSvcOutFixedCapa=starSvcOutFixedCapa, starPortLMIStatsEntry=starPortLMIStatsEntry, starPvcDestSlotId=starPvcDestSlotId, starRoutChipId=starRoutChipId, starBbcpInConnectionVcciFailCt=starBbcpInConnectionVcciFailCt, starPhysicalLoopbackTable=starPhysicalLoopbackTable, starSlotModuleCpuUtilization=starSlotModuleCpuUtilization, starVplRtCellsCongCount=starVplRtCellsCongCount, starSwitchInMarkedCellCnt=starSwitchInMarkedCellCnt, starPortPmThreshValue=starPortPmThreshValue, starLoopbackCtrArea=starLoopbackCtrArea, starSvcRouteOutgoingModuleId=starSvcRouteOutgoingModuleId, starTrap=starTrap, starFiuFrcsIfOutDiscards=starFiuFrcsIfOutDiscards, starAal1SarTxCellCnt=starAal1SarTxCellCnt, starFaultControlEntry=starFaultControlEntry, starPPPLinkStatusLocalMRU=starPPPLinkStatusLocalMRU, starDS1E1CESMapVPI=starDS1E1CESMapVPI, starRclInfoTbl=starRclInfoTbl, starPvcmTermHoldingConnectionNumber=starPvcmTermHoldingConnectionNumber, starPPPLinkStatusPeerToLocalACCMap=starPPPLinkStatusPeerToLocalACCMap, starPvcRouteTable=starPvcRouteTable, starRcvdModuleIfType=starRcvdModuleIfType, starMsgSize=starMsgSize, starAal5ConfigTxVCIndex=starAal5ConfigTxVCIndex, starFiuHdlcRxCountOverflow=starFiuHdlcRxCountOverflow, starVclRtNewVci=starVclRtNewVci, starBackboneLinkTable=starBackboneLinkTable, starCcCtrEntry=starCcCtrEntry, starPortDS1FramerCOFACounter=starPortDS1FramerCOFACounter, starPortCellStatsEntry=starPortCellStatsEntry, starPortHdlcCrcMode=starPortHdlcCrcMode, starFiuFrcsPvcEndptOutOctets=starFiuFrcsPvcEndptOutOctets, frPvcEndptNoDiscardWoutDE=frPvcEndptNoDiscardWoutDE, starDS1E1CESStatsTable=starDS1E1CESStatsTable, starPortHdlcDteDce=starPortHdlcDteDce, starSvcmAiuRxUDCells=starSvcmAiuRxUDCells, starClkMasterStatus=starClkMasterStatus, starSSULoadHighMarkVbrIn=starSSULoadHighMarkVbrIn, starPvcmOutOfServiceConnectionNumber=starPvcmOutOfServiceConnectionNumber, starPvcRouteSrcGCIDNeId=starPvcRouteSrcGCIDNeId, starRoutRatioBOrder1=starRoutRatioBOrder1, starPvcmEntry=starPvcmEntry, starMipRouteTable=starMipRouteTable, starPmConnStatusChange=starPmConnStatusChange, starRlspMismatchCt=starRlspMismatchCt, starFrCongStatSlotId=starFrCongStatSlotId, starRclModuleStatus=starRclModuleStatus, starSvcRouteHopIndex=starSvcRouteHopIndex, starAal5ConfigRxVCIndex=starAal5ConfigRxVCIndex, starAal5ConfigRxVCInfoEntry=starAal5ConfigRxVCInfoEntry, starFiuIfInfoPortId=starFiuIfInfoPortId, starPvcConnectionCOS=starPvcConnectionCOS, starPvcmActiveConnectionNumber=starPvcmActiveConnectionNumber, starAmCDRThresholdCount=starAmCDRThresholdCount, starFiuSscsIfPerfSlotId=starFiuSscsIfPerfSlotId, starPortTrunkEntry=starPortTrunkEntry, starBbcpTimerExpiredCt=starBbcpTimerExpiredCt, starPortSonetUniTable=starPortSonetUniTable, starSSUSiuPortNumMcConnections=starSSUSiuPortNumMcConnections, starPort=starPort, starSlotInterfaceType=starSlotInterfaceType, starRoutRatioAOrder2=starRoutRatioAOrder2, starFiuHdlcRxPduCount=starFiuHdlcRxPduCount, starVclSourceNode=starVclSourceNode, starLoopbackResultGeneratedCells=starLoopbackResultGeneratedCells, starCcCtrVpi=starCcCtrVpi, starLoopbackCtrSetup=starLoopbackCtrSetup, starSvcmAiuRxAddPartyRejMsgCnt=starSvcmAiuRxAddPartyRejMsgCnt, starCfMaxSlots=starCfMaxSlots, starPvcSrcDlci=starPvcSrcDlci, starRoutPti7=starRoutPti7, starVpiRangeEntry=starVpiRangeEntry, starPortMaxVariableCapacity=starPortMaxVariableCapacity, starRoutBpIgnoredCnt=starRoutBpIgnoredCnt, starSvcRouteOutgoingNeId=starSvcRouteOutgoingNeId, frlPvcEndptInfoTbl=frlPvcEndptInfoTbl, starFrlMgtInStatus=starFrlMgtInStatus, starFiuFrcsPvcEndptInRawCells=starFiuFrcsPvcEndptInRawCells, starRoutPerPrioCongestionQd=starRoutPerPrioCongestionQd, starBackbone=starBackbone, starSvcmPtoPTermActiveConnectionCnt=starSvcmPtoPTermActiveConnectionCnt, starTrapSendCondition=starTrapSendCondition, starFrlMgtLastRecvErDlci=starFrlMgtLastRecvErDlci, starSSUMcInputFbr=starSSUMcInputFbr, starFiuSscsIfPerfTmStp=starFiuSscsIfPerfTmStp, starPortAvailableVpi=starPortAvailableVpi, starSwitchLinkId=starSwitchLinkId, starBackboneLinkDestNodeId=starBackboneLinkDestNodeId, starNeBootSwVersion=starNeBootSwVersion, starFaultSlotId=starFaultSlotId, starSSUSiuTotalFbrOut=starSSUSiuTotalFbrOut, starAal5ConfigRxVPIndex=starAal5ConfigRxVPIndex)
