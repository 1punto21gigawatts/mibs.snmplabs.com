#
# PySNMP MIB module CISCO-DMN-DSG-DL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DMN-DSG-DL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ciscoDSGUtilities, = mibBuilder.importSymbols("CISCO-DMN-DSG-ROOT-MIB", "ciscoDSGUtilities")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, TimeTicks, Bits, iso, Counter32, Counter64, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Unsigned32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Bits", "iso", "Counter32", "Counter64", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Unsigned32", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoDSGDl = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1))
ciscoDSGDl.setRevisions(('2010-10-13 08:00', '2010-08-30 11:00', '2010-05-25 08:00', '2010-02-12 15:00', '2009-12-20 15:00', '2009-11-22 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDSGDl.setRevisionsDescriptions(('V01.00.05 2010-10-13 The options for dlBank, dlType are changed for migrating D985X/D9865 to generic logic.', 'V01.00.04 2010-08-30 Updated for adherence to SNMPv2 format.', 'V01.00.03 2010-05-25 The options for dlAboutReboot is modified.', 'V01.00.02 2010-02-12 The Syntax of read-only objects in dlcfg group is updated to DisplayString.', 'V01.00.01 2009-12-20 Added dlCfg Group.', 'V01.00.00 2009-11-22 Initial Version.',))
if mibBuilder.loadTexts: ciscoDSGDl.setLastUpdated('201010130800Z')
if mibBuilder.loadTexts: ciscoDSGDl.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDSGDl.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoDSGDl.setDescription('Cisco Receiver Download Feature MIB.')
dlAbout = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1))
dlDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2))
dlCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3))
dlAboutCurrentVer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlAboutCurrentVer.setStatus('current')
if mibBuilder.loadTexts: dlAboutCurrentVer.setDescription('The version of the current application software in the format ##.##.##.X meaning <MajorSWVersion>.<MinorSWVersion>.<NanoSWVersion>.x.')
dlAboutSafeVer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlAboutSafeVer.setStatus('current')
if mibBuilder.loadTexts: dlAboutSafeVer.setDescription('The version of the safe application software in the format ##.##.##.X meaning <MajorSWVersion>.<MinorSWVersion>.<NanoSWVersion>.x.')
dlAboutBootVer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlAboutBootVer.setStatus('current')
if mibBuilder.loadTexts: dlAboutBootVer.setDescription('The version of the boot software in the format ##.##.##.X meaning <MajorSWVersion>.<MinorSWVersion>.<NanoSWVersion>.x.')
dlAboutProductId = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlAboutProductId.setStatus('current')
if mibBuilder.loadTexts: dlAboutProductId.setDescription('The product ID string. The D9854 will return: D9854 The D9858 will return: D9858 The D9865 will return: D9865 It is advisable that SNMP managers validate this ID string matches what was expected. If this parameter does not exist, SNMP managers must disregard the validation step and allow a more limited set of options to function.')
dlAboutTrackingId = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlAboutTrackingId.setStatus('current')
if mibBuilder.loadTexts: dlAboutTrackingId.setDescription('The product tracking ID.')
dlAboutChangeApp = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlAboutChangeApp.setStatus('current')
if mibBuilder.loadTexts: dlAboutChangeApp.setDescription('The application record index of the new version to run. Setting this reboots the system to use the new version.')
dlAboutEraseApp = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlAboutEraseApp.setStatus('current')
if mibBuilder.loadTexts: dlAboutEraseApp.setDescription("The application record index of the version to erase. The running version or the Safe App can't be erased.")
dlAboutReboot = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlAboutReboot.setStatus('current')
if mibBuilder.loadTexts: dlAboutReboot.setDescription('Setting to yes(2) reboots the system.')
dlAboutAppTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 9), )
if mibBuilder.loadTexts: dlAboutAppTable.setStatus('current')
if mibBuilder.loadTexts: dlAboutAppTable.setDescription('List of available application versions to reboot into.')
dlAboutAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-DMN-DSG-DL-MIB", "dlAboutAppIndex"))
if mibBuilder.loadTexts: dlAboutAppEntry.setStatus('current')
if mibBuilder.loadTexts: dlAboutAppEntry.setDescription('Version information for each stored application.')
dlAboutAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: dlAboutAppIndex.setStatus('current')
if mibBuilder.loadTexts: dlAboutAppIndex.setDescription('The index of the application. This value can be used with ciscoVersionChangeApp to boot into a different application.')
dlAboutAppString = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlAboutAppString.setStatus('current')
if mibBuilder.loadTexts: dlAboutAppString.setDescription('The version of the available application in the format ##.##.##.X meaning <MajorSWVersion>.<MinorSWVersion>.<NanoSWVersion>.x.')
dlDownloadTftpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadTftpServerIP.setStatus('current')
if mibBuilder.loadTexts: dlDownloadTftpServerIP.setDescription('The IP address of the TFTP server that can provide an MDR software application.')
dlDownloadMicroCode = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadMicroCode.setStatus('current')
if mibBuilder.loadTexts: dlDownloadMicroCode.setDescription("Microprocessor code type, must match the unit's type for download.")
dlDownloadCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadCodeVersion.setStatus('current')
if mibBuilder.loadTexts: dlDownloadCodeVersion.setDescription('Code version major and minor as two bytes.Down loaded code version has to be greater than the lesser of the Safe App and Production version or the download is rejected. If the production version limit is 99.99.00 then all downloads are accepted, if 0.00.00 then use the safe app as the limit version. For any other value use the smaller of the safe app or production limit version. ')
dlDownloadNanoVersion = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadNanoVersion.setStatus('current')
if mibBuilder.loadTexts: dlDownloadNanoVersion.setDescription('Nano code version, a third level code revision.')
dlDownloadBankSelect = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadBankSelect.setStatus('current')
if mibBuilder.loadTexts: dlDownloadBankSelect.setDescription('Bank select, for example 0 code, 128 database.')
dlDownloadForcedFlag = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadForcedFlag.setStatus('current')
if mibBuilder.loadTexts: dlDownloadForcedFlag.setDescription('Forced flag forces a code load. Should be set to yes. No is for future use.')
dlDownloadTransitionBlocked = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadTransitionBlocked.setStatus('current')
if mibBuilder.loadTexts: dlDownloadTransitionBlocked.setDescription('Transition blocked, allows certain upgrades to be blocked. For future use.')
dlDownloadTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadTftpFilename.setStatus('current')
if mibBuilder.loadTexts: dlDownloadTftpFilename.setDescription('The filename and path to download from the TFTP server. Setting this value initiates the download. IP address, micro code, code version, nano version and forced flag need to be set before setting the filename.')
dlDownloadAbort = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("abort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlDownloadAbort.setStatus('current')
if mibBuilder.loadTexts: dlDownloadAbort.setDescription('Selecting abort(1) aborts a download if it is in progress.')
dlDownloadState = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("busy", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlDownloadState.setStatus('current')
if mibBuilder.loadTexts: dlDownloadState.setDescription('Current download state, reports any download activity, over the air or rear panel.')
dlDownloadErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("reject", 1), ("fails", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlDownloadErrorStatus.setStatus('current')
if mibBuilder.loadTexts: dlDownloadErrorStatus.setDescription('Status of tftp download, valid following a download.')
dlStatus = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTrigger", 1), ("download", 2), ("trigger", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlStatus.setStatus('current')
if mibBuilder.loadTexts: dlStatus.setDescription('Gives the status of the download.')
dlMode = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("always", 1), ("once", 2), ("never", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlMode.setStatus('current')
if mibBuilder.loadTexts: dlMode.setDescription('Download Mode: Always - will load all downloads to flash and reboot. Once - will load next download to flash and reboot, then switch to Never. Never - will never load and it loads only if Forced.')
dlType = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rearPanel", 2), ("http", 3), ("overAir", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlType.setStatus('current')
if mibBuilder.loadTexts: dlType.setDescription('Download Type.')
dlBank = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("app5514", 1), ("app7109", 2), ("fpga7109", 3), ("sat7109", 4), ("screenLogo", 5), ("menuLogo", 6), ("ethLogo", 7), ("appPPC", 8), ("appVASA", 9), ("dbUpdate", 10), ("execBin", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlBank.setStatus('current')
if mibBuilder.loadTexts: dlBank.setDescription('Download bank in use.')
dlTotalCdt = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlTotalCdt.setStatus('current')
if mibBuilder.loadTexts: dlTotalCdt.setDescription('Total CDTs received.The range is from 0 to 65535.')
dlReceived = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlReceived.setStatus('current')
if mibBuilder.loadTexts: dlReceived.setDescription('Total download pkts received.The range is from 0 to 65535.')
dlRejected = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlRejected.setStatus('current')
if mibBuilder.loadTexts: dlRejected.setDescription('Total failed pkts.The range is from 0 to 65535.')
dlCommand = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restart", 1), ("abort", 2), ("writeOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlCommand.setStatus('current')
if mibBuilder.loadTexts: dlCommand.setDescription('Command to download. Setting abort(2) stops a download in progress. Setting restart(1) restarts the download.')
mibBuilder.exportSymbols("CISCO-DMN-DSG-DL-MIB", dlRejected=dlRejected, dlAboutBootVer=dlAboutBootVer, dlType=dlType, ciscoDSGDl=ciscoDSGDl, dlDownloadForcedFlag=dlDownloadForcedFlag, dlCommand=dlCommand, dlAboutAppIndex=dlAboutAppIndex, dlDownloadTransitionBlocked=dlDownloadTransitionBlocked, dlDownloadMicroCode=dlDownloadMicroCode, dlDownloadBankSelect=dlDownloadBankSelect, dlAboutEraseApp=dlAboutEraseApp, dlAboutReboot=dlAboutReboot, dlAboutTrackingId=dlAboutTrackingId, PYSNMP_MODULE_ID=ciscoDSGDl, dlDownloadErrorStatus=dlDownloadErrorStatus, dlDownloadAbort=dlDownloadAbort, dlDownload=dlDownload, dlAbout=dlAbout, dlTotalCdt=dlTotalCdt, dlCfg=dlCfg, dlReceived=dlReceived, dlAboutCurrentVer=dlAboutCurrentVer, dlAboutAppEntry=dlAboutAppEntry, dlDownloadNanoVersion=dlDownloadNanoVersion, dlAboutAppTable=dlAboutAppTable, dlAboutProductId=dlAboutProductId, dlDownloadCodeVersion=dlDownloadCodeVersion, dlDownloadTftpFilename=dlDownloadTftpFilename, dlAboutSafeVer=dlAboutSafeVer, dlDownloadState=dlDownloadState, dlAboutAppString=dlAboutAppString, dlAboutChangeApp=dlAboutChangeApp, dlBank=dlBank, dlStatus=dlStatus, dlDownloadTftpServerIP=dlDownloadTftpServerIP, dlMode=dlMode)
