#
# PySNMP MIB module CISCO-FCIP-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FCIP-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
DomainId, FcNameId, FcNameIdOrZero = mibBuilder.importSymbols("CISCO-ST-TC", "DomainId", "FcNameId", "FcNameIdOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, Counter32, ObjectIdentity, Gauge32, Bits, Counter64, iso, MibIdentifier, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Counter32", "ObjectIdentity", "Gauge32", "Bits", "Counter64", "iso", "MibIdentifier", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoFcipMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 96))
ciscoFcipMgmtMIB.setRevisions(('2003-05-19 00:00', '2002-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFcipMgmtMIB.setRevisionsDescriptions(('Changed the MAX-ACCESS of cfmFcipStaRtRemFcipEntWWN from read-create to read-write.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFcipMgmtMIB.setLastUpdated('200305190000Z')
if mibBuilder.loadTexts: ciscoFcipMgmtMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoFcipMgmtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFcipMgmtMIB.setDescription('The Fibre Channel Over TCP/IP management MIB module. This mib module is the Cisco version of the FCIP MIB draft , draft-ietf-ips-fcip-mib-02.txt, from the IETF. ')
ciscoFcipObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 96, 1))
cfmFcipConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 96, 2))
cfmFcipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1))
cfmFcipNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 2))
cfmFcipNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 2, 0))
class CfmFcEntityMode(TextualConvention, Integer32):
    description = 'The type of port mode provided by an FCIP Entity for a FCIP Link. An FCIP Entity can be an E-Port mode for one of its FCIP Link Endpoints, an B-Port mode for another of its FCIP Link Endpoints. ePortMode(1) - entity mode is e_port. bPortMode(2) - entity mode is b_port. other(3) - entity mode is some other port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ePortMode", 1), ("bPortMode", 2), ("other", 3))

cfmFcipDynIpConfType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slpv2", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmFcipDynIpConfType.setStatus('current')
if mibBuilder.loadTexts: cfmFcipDynIpConfType.setDescription('The type of discovery protocol used to discover remote FCIP entities. slpv2(1) - Service Location Protocol. none(2) - nothing is used. ')
cfmFcipFabricWWN = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipFabricWWN.setStatus('current')
if mibBuilder.loadTexts: cfmFcipFabricWWN.setDescription('The World Wide Name of this FCIP device. The zero-length string value is used in circumstances where the WWN is unassigned/unknown. ')
cfmFcipEntityInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3), )
if mibBuilder.loadTexts: cfmFcipEntityInstanceTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityInstanceTable.setDescription('A table containing FCIP entity specific information. ')
cfmFcipEntityInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-FCIP-MGMT-MIB", "cfmFcipEntityId"))
if mibBuilder.loadTexts: cfmFcipEntityInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityInstanceEntry.setDescription('A conceptual row of the FCIP entity table containing information about a particular FCIP entity. ')
cfmFcipEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfmFcipEntityId.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityId.setDescription('The FCIP entity identifier. ')
cfmFcipEntityAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityAddressType.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityAddressType.setDescription('The type of Internet address by which the entity is reachable. ')
cfmFcipEntityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityAddress.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityAddress.setDescription('The Internet address for this entity. ')
cfmFcipEntityTcpConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityTcpConnPort.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityTcpConnPort.setDescription('A TCP port other than the FCIP Well-Known port on which the FCIP entity listens for new TCP connection requests. It contains the value zero (0) if the FCIP Entity only listens on the Well-Known port. ')
cfmFcipEntitySACKOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntitySACKOption.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntitySACKOption.setDescription('An indication of whether the TCP Selective Acknowledgement Option is enabled to allow the receiver end to acknowledge multiple lost packets in a singel ACK, enabling faster recovery. enabled(1) - acknowledge option is enabled. disabled(2) - acknowledge option is disabled. ')
cfmFcipEntitySeqNumWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipEntitySeqNumWrap.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntitySeqNumWrap.setDescription('An indication of whether the FCIP Entity supports the protection against sequence number wrap. If true(1), the FCIP Entity supports protection against sequence number wrap. If false(2), the FCIP Entity does not support protection against sequence number wrap. ')
cfmFcipEntityPHBSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipEntityPHBSupport.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityPHBSupport.setDescription('An indication of whether the FCIP Entity supports PHB IP QoS. ')
cfmFcipEntityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityStatus.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityStatus.setDescription('The status of this conceptual row. ')
cfmFcipLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4), )
if mibBuilder.loadTexts: cfmFcipLinkTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkTable.setDescription('A table containing FCIP link specific information. ')
cfmFcipLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-FCIP-MGMT-MIB", "cfmFcipEntityId"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipLinkIndex"))
if mibBuilder.loadTexts: cfmFcipLinkEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkEntry.setDescription('A conceptual row of the FCIP link table containing information about a particular FCIP link. ')
cfmFcipLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfmFcipLinkIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkIndex.setDescription('An arbitrary integer which uniquely identifies one FCIP link within a FCIP entity. ')
cfmFcipLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkIfIndex.setDescription('A unique value that identifies the interface on this FCIP device to which this link pertains. The interface identified by a particular value of this object is the same interface as identified by the same value of the ifIndex object, defined in IF-MIB. ')
cfmFcipLinkCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkCost.setReference('FC-SW-2 REV 5.3 Section 8.5.5')
if mibBuilder.loadTexts: cfmFcipLinkCost.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkCost.setDescription('The cost associated with this FCIP Link. The link cost is used to select lowest cost route. ')
cfmFcipLinkLocalFcipEntityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 4), CfmFcEntityMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkLocalFcipEntityMode.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkLocalFcipEntityMode.setDescription('The mode of the local FCIP Entity to which this FCIP Link pertains. ')
cfmFcipLinkRemFcipEntityWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 5), FcNameIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityWWN.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityWWN.setDescription('The World Wide Name of the remote FC Fabric Entity. If this is a zero length string then this link would accept connections from any remote entity. If a WWN is specified then this link would accept connections from a remote entity with this WWN. ')
cfmFcipLinkRemFcipEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityId.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityId.setDescription("The remote FCIP entity's identifier. ")
cfmFcipLinkRemFcipEntityAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityAddrType.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityAddrType.setDescription('The type of Internet address by which the remote FCIP entity is reachable. ')
cfmFcipLinkRemFcipEntityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityAddress.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityAddress.setDescription('The Internet address for the remote FCIP entity. ')
cfmFcipLinkRemFcipEntityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 9), CfmFcEntityMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityMode.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkRemFcipEntityMode.setDescription('The mode of the remote FCIP Entity to which this FCIP Link pertains. ')
cfmFcipLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkStatus.setDescription('The status of this conceptual row. ')
cfmFcipTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5), )
if mibBuilder.loadTexts: cfmFcipTcpConnTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnTable.setDescription("A table containing FCIP specific information about this FCIP device's existing TCP connections. The FCIP TCP Connection table contains information about existing TCP connections. Each FCIP link within a FCIP entity manages one or more TCP connections. The FCIP entity employs a Data Engine for each TCP connection for handling FC frame encapsulation, de-encapsulation and transmission of FCIP frames on the connection. ")
cfmFcipTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-FCIP-MGMT-MIB", "cfmFcipEntityId"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipLinkIndex"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipTcpConnLocalPort"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipTcpConnRemPort"))
if mibBuilder.loadTexts: cfmFcipTcpConnEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnEntry.setDescription('A conceptual row of the FCIP TCP Connection table containing information about a particular TCP connection. ')
cfmFcipTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cfmFcipTcpConnLocalPort.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnLocalPort.setDescription('The local port number for this TCP connection. ')
cfmFcipTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cfmFcipTcpConnRemPort.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnRemPort.setDescription('The remote port number for this TCP connection. ')
cfmFcipTcpConnPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("control", 1), ("data", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipTcpConnPurpose.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnPurpose.setDescription('The nature of messages that get transmitted on this TCP connection. control(1) - TCP connection is for control purpose. data(2) - TCP connection is for data purpose. both(3) - TCP connection is for control and data purpose. ')
cfmFcipTcpConnRWSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipTcpConnRWSize.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnRWSize.setDescription('The default maximum TCP Receiver Window size for this TCP connection. ')
cfmFcipTcpConnMSS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipTcpConnMSS.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnMSS.setDescription('The TCP Maximum Segment Size (MSS) for this TCP connection. ')
cfmFcipTcpConnTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 5, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipTcpConnTimeOut.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnTimeOut.setDescription('The timeout value for this TCP connection. ')
cfmFcipDynamicRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 6), )
if mibBuilder.loadTexts: cfmFcipDynamicRouteTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipDynamicRouteTable.setDescription("A table containing FCIP Route specific information. The FCIP dynamic route table contains information about this FCIP device's routing information that is dynamically discovered. The FCIP device may use SLPv2 protocol in conjunction with other protocols, say FSPF, for dynamically discovering other FCIP entities, and populate this table for Destination Address Identifier to connecting FCIP link information. ")
cfmFcipDynamicRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-FCIP-MGMT-MIB", "cfmFcipEntityId"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipDynamicRouteDID"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipDynamicRouteIndex"))
if mibBuilder.loadTexts: cfmFcipDynamicRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipDynamicRouteEntry.setDescription('A conceptual row of the FCIP Dynamic Route Table containing information about a particular FCIP route. ')
cfmFcipDynamicRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfmFcipDynamicRouteIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipDynamicRouteIndex.setDescription('An index that uniquely identifies an entry in the FCIP dynamic Route table. ')
cfmFcipDynamicRouteDID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 6, 1, 2), DomainId())
if mibBuilder.loadTexts: cfmFcipDynamicRouteDID.setStatus('current')
if mibBuilder.loadTexts: cfmFcipDynamicRouteDID.setDescription('The 8 bit ID of a Fibre Channel Domain that is reachable from this FCIP device. ')
cfmFcipDynamicRouteLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipDynamicRouteLinkIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipDynamicRouteLinkIndex.setDescription("The FCIP Link that is represented by this value in the FCIP Link table used to reach this domain (specified by the previous object 'cfmFcipDynamicRouteDID') on the remote FCIP device. ")
cfmFcipStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7), )
if mibBuilder.loadTexts: cfmFcipStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaticRouteTable.setDescription("A table containing FCIP Route specific information. The FCIP static route table contains information about this FCIP device's routing information that is created by the Network Admin. In the absence of dynamic discovery of remote FCIP entities, the Network Manager will figure out all the remote FCIP devices that are reachable from this device, and populate this table with FCIP link information for each Domain Id. ")
cfmFcipStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-FCIP-MGMT-MIB", "cfmFcipEntityId"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipStaRtDID"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipStaRtIndex"))
if mibBuilder.loadTexts: cfmFcipStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaticRouteEntry.setDescription('A conceptual row of the FCIP Static Route Table containing information about a particular FCIP route. ')
cfmFcipStaRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfmFcipStaRtIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaRtIndex.setDescription('An index that uniquely identifies an entry in the FCIP static Route table. ')
cfmFcipStaRtDID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1, 2), DomainId())
if mibBuilder.loadTexts: cfmFcipStaRtDID.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaRtDID.setDescription('The 8 bit ID of a Fibre Channel Domain that is reachable from this FCIP device. ')
cfmFcipStaRtRemFcipEntWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1, 3), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntWWN.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntWWN.setDescription('The World Wide Name of the remote FC Entity to which this route applies. ')
cfmFcipStaRtRemFcipEntId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntId.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntId.setDescription('The identifier of the remote FCIP entity to which this route pertains. ')
cfmFcipStaRtRemFcipEntAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntAddrType.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntAddrType.setDescription('The type of Internet address used by the remote FCIP entity to which this route pertains. ')
cfmFcipStaRtRemFcipEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntAddr.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaRtRemFcipEntAddr.setDescription('The Internet address for the remote FCIP entity.')
cfmFcipStaRtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 7, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipStaRtStatus.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaRtStatus.setDescription('The status of this conceptual row. ')
cfmFcipLinkErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8), )
if mibBuilder.loadTexts: cfmFcipLinkErrorsTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkErrorsTable.setDescription('A table containing error counters for FCIP Links. The FCIP Link Errors Table contains counters that indicate the number of times each error case happened that caused closing down a TCP connection. ')
cfmFcipLinkErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-FCIP-MGMT-MIB", "cfmFcipEntityId"), (0, "CISCO-FCIP-MGMT-MIB", "cfmFcipLinkIndex"))
if mibBuilder.loadTexts: cfmFcipLinkErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkErrorsEntry.setDescription('A conceptual row of the FCIP Link Errors Table containing error counters for a FCIP Link. ')
cfmFcipLinkFcipLossofFcSynchs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipLossofFcSynchs.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipLossofFcSynchs.setDescription('The number of times FC synchronization lost on this FCIP Link. ')
cfmFcipLinkFcipSfNotRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipSfNotRcv.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipSfNotRcv.setDescription('The number of times FCIP Special Frame not received on this FCIP Link. ')
cfmFcipLinkFcipSfRespNotRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipSfRespNotRcv.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipSfRespNotRcv.setDescription('The number of times FCIP Special Frame Response not received on this FCIP Link. ')
cfmFcipLinkFcipSfRespMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipSfRespMismatch.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipSfRespMismatch.setDescription('The number of times FCIP Special Frame Bytes mismatch happened on this FCIP Link. ')
cfmFcipLinkFcipSfInvalidNonce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipSfInvalidNonce.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipSfInvalidNonce.setDescription('The number of times FCIP Special Frame Invalid connections once happened on this FCIP Link. ')
cfmFcipLinkFcipDuplicateSfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipDuplicateSfRcv.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipDuplicateSfRcv.setDescription('The number of times duplicate FCIP Special Frames received on this FCIP Link. ')
cfmFcipLinkFcipSfInvalidWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipSfInvalidWWN.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipSfInvalidWWN.setDescription('The number of times FCIP Special Frames with invalid destination FC Fabric Entity WWN received on this FCIP Link. ')
cfmFcipLinkFcipBB2LkaTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipBB2LkaTimeOut.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipBB2LkaTimeOut.setDescription('The number of times B_Access Link Keep Alive Time out happened on this FCIP Link. ')
cfmFcipLinkFcipSntpTimeStampExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkFcipSntpTimeStampExp.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkFcipSntpTimeStampExp.setDescription('The number of times SNTP Time Stamp expired on this FCIP Link. ')
cfmFcipLinkTcpTooManyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkTcpTooManyErrors.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkTcpTooManyErrors.setDescription('The number of times TCP connections with too many errors closed down on this FCIP Link. ')
cfmFcipLinkTcpKeepAliveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkTcpKeepAliveTimeOut.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkTcpKeepAliveTimeOut.setDescription('The number of times TCP connections that experienced TCP Keep Alive Time outs closed down on this FCIP Link. ')
cfmFcipLinkTcpExDatagramsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkTcpExDatagramsDropped.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkTcpExDatagramsDropped.setDescription('The number of times TCP connections that dropped excessive number of datagrams closed down on this FCIP Link. ')
cfmFcipLinkTcpSaParamMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 96, 1, 1, 8, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkTcpSaParamMismatch.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkTcpSaParamMismatch.setDescription('The number of times TCP connections with SA parameter mismatches closed down on this FCIP Link. ')
cfmFcipCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 1))
cfmFcipGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2))
cfmFcipCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 1, 1)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipEntityScalarGroup"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipEntityInstanceGroup"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkGroup"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipTcpConnGroup"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipDynamicRouteGroup"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipStaticRouteGroup"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkErrorsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipCompliance = cfmFcipCompliance.setStatus('current')
if mibBuilder.loadTexts: cfmFcipCompliance.setDescription('Compliance statement for FCIP MIB. ')
cfmFcipEntityScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2, 1)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipDynIpConfType"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipFabricWWN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipEntityScalarGroup = cfmFcipEntityScalarGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityScalarGroup.setDescription('A collection of scalar objects applicable to all FCIP instances. ')
cfmFcipEntityInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2, 2)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipEntityAddressType"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipEntityAddress"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipEntityTcpConnPort"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipEntitySACKOption"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipEntitySeqNumWrap"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipEntityPHBSupport"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipEntityStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipEntityInstanceGroup = cfmFcipEntityInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityInstanceGroup.setDescription('A collection of objects providing information about FCIP instances. ')
cfmFcipLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2, 3)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkIfIndex"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkCost"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkLocalFcipEntityMode"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkRemFcipEntityWWN"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkRemFcipEntityId"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkRemFcipEntityAddrType"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkRemFcipEntityAddress"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkRemFcipEntityMode"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkGroup = cfmFcipLinkGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkGroup.setDescription('A collection of objects providing information about FCIP Links. ')
cfmFcipTcpConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2, 4)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipTcpConnPurpose"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipTcpConnRWSize"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipTcpConnMSS"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipTcpConnTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipTcpConnGroup = cfmFcipTcpConnGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipTcpConnGroup.setDescription('A collection of objects providing information about FCIP TCP conections. ')
cfmFcipDynamicRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2, 5)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipDynamicRouteLinkIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipDynamicRouteGroup = cfmFcipDynamicRouteGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipDynamicRouteGroup.setDescription('A collection of objects providing information about FCIP dynamic routes. ')
cfmFcipStaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2, 6)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipStaRtRemFcipEntWWN"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipStaRtRemFcipEntId"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipStaRtRemFcipEntAddrType"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipStaRtRemFcipEntAddr"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipStaRtStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipStaticRouteGroup = cfmFcipStaticRouteGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipStaticRouteGroup.setDescription('A collection of objects providing information about FCIP static routes. ')
cfmFcipLinkErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 96, 2, 2, 7)).setObjects(("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipLossofFcSynchs"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipSfNotRcv"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipSfRespNotRcv"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipSfRespMismatch"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipSfInvalidNonce"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipDuplicateSfRcv"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipSfInvalidWWN"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipBB2LkaTimeOut"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkFcipSntpTimeStampExp"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkTcpTooManyErrors"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkTcpKeepAliveTimeOut"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkTcpExDatagramsDropped"), ("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkTcpSaParamMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkErrorsGroup = cfmFcipLinkErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkErrorsGroup.setDescription('A collection of objects providing information about FCIP link errors. ')
mibBuilder.exportSymbols("CISCO-FCIP-MGMT-MIB", cfmFcipDynamicRouteDID=cfmFcipDynamicRouteDID, cfmFcipStaticRouteTable=cfmFcipStaticRouteTable, cfmFcipLinkFcipLossofFcSynchs=cfmFcipLinkFcipLossofFcSynchs, cfmFcipLinkStatus=cfmFcipLinkStatus, cfmFcipGroups=cfmFcipGroups, cfmFcipStaRtRemFcipEntWWN=cfmFcipStaRtRemFcipEntWWN, cfmFcipTcpConnRemPort=cfmFcipTcpConnRemPort, cfmFcipNotifications=cfmFcipNotifications, cfmFcipCompliances=cfmFcipCompliances, cfmFcipLinkFcipSfRespNotRcv=cfmFcipLinkFcipSfRespNotRcv, cfmFcipEntityInstanceGroup=cfmFcipEntityInstanceGroup, cfmFcipFabricWWN=cfmFcipFabricWWN, cfmFcipTcpConnLocalPort=cfmFcipTcpConnLocalPort, cfmFcipTcpConnTimeOut=cfmFcipTcpConnTimeOut, cfmFcipTcpConnGroup=cfmFcipTcpConnGroup, cfmFcipTcpConnTable=cfmFcipTcpConnTable, cfmFcipNotification=cfmFcipNotification, cfmFcipStaRtDID=cfmFcipStaRtDID, cfmFcipLinkIndex=cfmFcipLinkIndex, cfmFcipLinkLocalFcipEntityMode=cfmFcipLinkLocalFcipEntityMode, cfmFcipLinkEntry=cfmFcipLinkEntry, cfmFcipLinkErrorsEntry=cfmFcipLinkErrorsEntry, cfmFcipDynamicRouteGroup=cfmFcipDynamicRouteGroup, cfmFcipLinkTcpKeepAliveTimeOut=cfmFcipLinkTcpKeepAliveTimeOut, cfmFcipLinkFcipSfRespMismatch=cfmFcipLinkFcipSfRespMismatch, cfmFcipDynamicRouteEntry=cfmFcipDynamicRouteEntry, cfmFcipConformance=cfmFcipConformance, cfmFcipLinkIfIndex=cfmFcipLinkIfIndex, cfmFcipEntityInstanceEntry=cfmFcipEntityInstanceEntry, cfmFcipStaRtIndex=cfmFcipStaRtIndex, ciscoFcipObjects=ciscoFcipObjects, cfmFcipTcpConnEntry=cfmFcipTcpConnEntry, cfmFcipLinkFcipSntpTimeStampExp=cfmFcipLinkFcipSntpTimeStampExp, cfmFcipDynIpConfType=cfmFcipDynIpConfType, cfmFcipStaRtRemFcipEntAddrType=cfmFcipStaRtRemFcipEntAddrType, cfmFcipEntityStatus=cfmFcipEntityStatus, cfmFcipTcpConnMSS=cfmFcipTcpConnMSS, cfmFcipLinkRemFcipEntityMode=cfmFcipLinkRemFcipEntityMode, cfmFcipLinkRemFcipEntityAddrType=cfmFcipLinkRemFcipEntityAddrType, cfmFcipLinkTcpExDatagramsDropped=cfmFcipLinkTcpExDatagramsDropped, cfmFcipCompliance=cfmFcipCompliance, cfmFcipLinkTable=cfmFcipLinkTable, cfmFcipTcpConnPurpose=cfmFcipTcpConnPurpose, cfmFcipEntityScalarGroup=cfmFcipEntityScalarGroup, cfmFcipLinkTcpSaParamMismatch=cfmFcipLinkTcpSaParamMismatch, cfmFcipDynamicRouteLinkIndex=cfmFcipDynamicRouteLinkIndex, cfmFcipLinkRemFcipEntityAddress=cfmFcipLinkRemFcipEntityAddress, cfmFcipLinkCost=cfmFcipLinkCost, cfmFcipEntitySACKOption=cfmFcipEntitySACKOption, cfmFcipStaticRouteEntry=cfmFcipStaticRouteEntry, cfmFcipStaRtRemFcipEntId=cfmFcipStaRtRemFcipEntId, cfmFcipLinkRemFcipEntityWWN=cfmFcipLinkRemFcipEntityWWN, cfmFcipDynamicRouteTable=cfmFcipDynamicRouteTable, cfmFcipStaRtRemFcipEntAddr=cfmFcipStaRtRemFcipEntAddr, cfmFcipLinkGroup=cfmFcipLinkGroup, cfmFcipStaticRouteGroup=cfmFcipStaticRouteGroup, cfmFcipEntityTcpConnPort=cfmFcipEntityTcpConnPort, cfmFcipEntityAddress=cfmFcipEntityAddress, cfmFcipLinkTcpTooManyErrors=cfmFcipLinkTcpTooManyErrors, cfmFcipDynamicRouteIndex=cfmFcipDynamicRouteIndex, PYSNMP_MODULE_ID=ciscoFcipMgmtMIB, cfmFcipLinkErrorsTable=cfmFcipLinkErrorsTable, cfmFcipLinkFcipSfInvalidNonce=cfmFcipLinkFcipSfInvalidNonce, cfmFcipEntityId=cfmFcipEntityId, ciscoFcipMgmtMIB=ciscoFcipMgmtMIB, cfmFcipLinkFcipBB2LkaTimeOut=cfmFcipLinkFcipBB2LkaTimeOut, cfmFcipLinkRemFcipEntityId=cfmFcipLinkRemFcipEntityId, CfmFcEntityMode=CfmFcEntityMode, cfmFcipConfig=cfmFcipConfig, cfmFcipEntityInstanceTable=cfmFcipEntityInstanceTable, cfmFcipLinkFcipSfNotRcv=cfmFcipLinkFcipSfNotRcv, cfmFcipEntitySeqNumWrap=cfmFcipEntitySeqNumWrap, cfmFcipLinkErrorsGroup=cfmFcipLinkErrorsGroup, cfmFcipLinkFcipDuplicateSfRcv=cfmFcipLinkFcipDuplicateSfRcv, cfmFcipStaRtStatus=cfmFcipStaRtStatus, cfmFcipTcpConnRWSize=cfmFcipTcpConnRWSize, cfmFcipEntityAddressType=cfmFcipEntityAddressType, cfmFcipEntityPHBSupport=cfmFcipEntityPHBSupport, cfmFcipLinkFcipSfInvalidWWN=cfmFcipLinkFcipSfInvalidWWN)
