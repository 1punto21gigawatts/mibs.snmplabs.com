#
# PySNMP MIB module DSLAM-UPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSLAM-UPC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
atmVplVpi, atmVclVci, atmVclVpi = mibBuilder.importSymbols("ATM-MIB", "atmVplVpi", "atmVclVci", "atmVclVpi")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, iso, Gauge32, Counter32, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, TimeTicks, ObjectIdentity, enterprises, Counter64, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "Counter32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "TimeTicks", "ObjectIdentity", "enterprises", "Counter64", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pgUpcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 11))
if mibBuilder.loadTexts: pgUpcMIB.setLastUpdated('9911081200Z')
if mibBuilder.loadTexts: pgUpcMIB.setOrganization('PairGain Technologies, Inc.')
if mibBuilder.loadTexts: pgUpcMIB.setContactInfo('')
if mibBuilder.loadTexts: pgUpcMIB.setDescription('The MIB Module for UPC.')
pgUpcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1))
pgAtmUpcPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 1), )
if mibBuilder.loadTexts: pgAtmUpcPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcPortTable.setDescription('A list of UPC entries for all interfaces.')
pgAtmUpcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgAtmUpcPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcPortEntry.setDescription('An entry containing the UPC information for the ifIndex.')
pgAtmUpcPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmUpcPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcPortAdminStatus.setDescription('The desired UPC state of the ifIndex.')
pgAtmUpcVplTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 2), )
if mibBuilder.loadTexts: pgAtmUpcVplTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcVplTable.setDescription('A list of UPC entries for all VPLs.')
pgAtmUpcVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: pgAtmUpcVplEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcVplEntry.setDescription('An entry containing UPC information.')
pgAtmUpcVplAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmUpcVplAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcVplAdminStatus.setDescription('The desired UPC state of the VPL.')
pgAtmUpcVclTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 3), )
if mibBuilder.loadTexts: pgAtmUpcVclTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcVclTable.setDescription('A list of UPC entries for all VCLs.')
pgAtmUpcVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: pgAtmUpcVclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcVclEntry.setDescription('An entry containing UPC information.')
pgAtmUpcVclAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmUpcVclAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmUpcVclAdminStatus.setDescription('The desired UPC state of the VCL.')
pgAtmVplStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4), )
if mibBuilder.loadTexts: pgAtmVplStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatTable.setDescription('This table contains all the statistics counters for each VPL. Use the table to monitor VPL incoming cell and outgoing cell usage.')
pgAtmVplStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: pgAtmVplStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatEntry.setDescription('Each entry in this table represents a VPL.')
pgAtmVplStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalCellIns.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatTotalCellIns.setDescription('The total number of valid ATM cells received by this VPL including both CLP=0 and CLP=1 cells. The cells are counted prior to the application of the traffic policing.')
pgAtmVplStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatClp0CellIns.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatClp0CellIns.setDescription('The number of valid ATM cells received by this VPL with CLP=0. The cells are counted prior to the application of the traffic policing.')
pgAtmVplStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatTotalDiscards.setDescription('The total number of valid ATM cells discarded by the traffic policing entity. This includes cells originally received with CLP=0 and CLP=1.')
pgAtmVplStatClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatClp0Discards.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatClp0Discards.setDescription('The total number of valid ATM cells received with CLP=0 and discarded by the traffic policing entity.')
pgAtmVplStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalCellOuts.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatTotalCellOuts.setDescription('The total number of valid ATM cells transmitted by this VPL. This includes both CLP=0 and CLP=1 cells.')
pgAtmVplStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatClp0CellOuts.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatClp0CellOuts.setDescription('The total number of valid ATM cells transmitted with CLP=0 by this VPL.')
pgAtmVplStatTaggedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTaggedOuts.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatTaggedOuts.setDescription('The total number of valid ATM cells tagged by the traffic policing entity from CLP=0 to CLP=1 and transmitted by this VPL.')
pgAtmVplStatTotalNonConforming = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalNonConforming.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatTotalNonConforming.setDescription('For this VPL, the total number of valid ATM cells that violated the traffic service contract.')
pgAtmVplStatClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pgAtmVplStatClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatClearCounters.setDescription('For this VPL, clear the statistics counters to zero.')
pgAtmVplStatAllClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmVplStatAllClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVplStatAllClearCounters.setDescription('For all VPLs, clear the statistics counters to zero.')
pgAtmVclStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6), )
if mibBuilder.loadTexts: pgAtmVclStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatTable.setDescription('This table contains all the statistics counters for each VCL. Use the table to monitor VCL incoming cell and outgoing cell usage.')
pgAtmVclStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: pgAtmVclStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatEntry.setDescription('Each entry in this table represents a VCL.')
pgAtmVclStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalCellIns.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatTotalCellIns.setDescription('The total number of valid ATM cells received by this VCL including both CLP=0 and CLP=1 cells. The cells are counted prior to the application of the traffic policing.')
pgAtmVclStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatClp0CellIns.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatClp0CellIns.setDescription('The number of valid ATM cells received by this VCL with CLP=0. The cells are counted prior to the application of the traffic policing.')
pgAtmVclStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatTotalDiscards.setDescription('The total number of valid ATM cells discarded by the traffic policing entity. This includes cells originally received with CLP=0 and CLP=1.')
pgAtmVclStatClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatClp0Discards.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatClp0Discards.setDescription('The total number of valid ATM cells received with CLP=0 and discarded by the traffic policing entity.')
pgAtmVclStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalCellOuts.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatTotalCellOuts.setDescription('The total number of valid ATM cells transmitted by this VCL. This includes both CLP=0 and CLP=1 cells.')
pgAtmVclStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatClp0CellOuts.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatClp0CellOuts.setDescription('The total number of valid ATM cells transmitted with CLP=0 by this VCL.')
pgAtmVclStatTaggedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTaggedOuts.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatTaggedOuts.setDescription('The total number of valid ATM cells tagged by the traffic policing entity from CLP=0 to CLP=1 and transmitted by this VCL.')
pgAtmVclStatTotalNonConforming = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalNonConforming.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatTotalNonConforming.setDescription('For this VCL, the total number of valid ATM cells that violated the traffic service contract.')
pgAtmVclStatClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pgAtmVclStatClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatClearCounters.setDescription('For this VCL, clear statistics counters to zero.')
pgAtmVclStatAllClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmVclStatAllClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: pgAtmVclStatAllClearCounters.setDescription('For all VCLs, clear statistics counters to zero.')
mibBuilder.exportSymbols("DSLAM-UPC-MIB", pgAtmUpcVplAdminStatus=pgAtmUpcVplAdminStatus, pgUpcObjects=pgUpcObjects, pgAtmVclStatTotalNonConforming=pgAtmVclStatTotalNonConforming, pgAtmVplStatAllClearCounters=pgAtmVplStatAllClearCounters, pgAtmUpcPortTable=pgAtmUpcPortTable, pgAtmVplStatTotalDiscards=pgAtmVplStatTotalDiscards, pgAtmUpcPortAdminStatus=pgAtmUpcPortAdminStatus, pgAtmUpcVclAdminStatus=pgAtmUpcVclAdminStatus, pgAtmUpcPortEntry=pgAtmUpcPortEntry, pgAtmVplStatTotalCellOuts=pgAtmVplStatTotalCellOuts, pgAtmVplStatClp0Discards=pgAtmVplStatClp0Discards, pgAtmVclStatEntry=pgAtmVclStatEntry, pgAtmVplStatClearCounters=pgAtmVplStatClearCounters, pgAtmVplStatTaggedOuts=pgAtmVplStatTaggedOuts, pgAtmVclStatTotalCellOuts=pgAtmVclStatTotalCellOuts, pgAtmVplStatTable=pgAtmVplStatTable, pgAtmVclStatClearCounters=pgAtmVclStatClearCounters, PYSNMP_MODULE_ID=pgUpcMIB, pgAtmVclStatClp0Discards=pgAtmVclStatClp0Discards, pgAtmUpcVplEntry=pgAtmUpcVplEntry, pgAtmVplStatClp0CellOuts=pgAtmVplStatClp0CellOuts, pgAtmVclStatTotalCellIns=pgAtmVclStatTotalCellIns, pgAtmVplStatTotalCellIns=pgAtmVplStatTotalCellIns, pgAtmUpcVplTable=pgAtmUpcVplTable, pgAtmVclStatTable=pgAtmVclStatTable, pgAtmVclStatClp0CellOuts=pgAtmVclStatClp0CellOuts, pgAtmVplStatClp0CellIns=pgAtmVplStatClp0CellIns, pgAtmVclStatAllClearCounters=pgAtmVclStatAllClearCounters, pgAtmVclStatTaggedOuts=pgAtmVclStatTaggedOuts, pgUpcMIB=pgUpcMIB, pgAtmVplStatEntry=pgAtmVplStatEntry, pgAtmVclStatClp0CellIns=pgAtmVclStatClp0CellIns, pgAtmUpcVclEntry=pgAtmUpcVclEntry, pgAtmVplStatTotalNonConforming=pgAtmVplStatTotalNonConforming, pgAtmVclStatTotalDiscards=pgAtmVclStatTotalDiscards, pgAtmUpcVclTable=pgAtmUpcVclTable)
