#
# PySNMP MIB module BIANCA-BRICK-X25PAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-X25PAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, IpAddress, Counter64, TimeTicks, Unsigned32, MibIdentifier, ModuleIdentity, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "IpAddress", "Counter64", "TimeTicks", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
x25 = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 6))
class HexValue(Integer32):
    pass

class Date(Integer32):
    pass

x25PadProfileTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 6, 8), )
if mibBuilder.loadTexts: x25PadProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProfileTable.setDescription('This Table contains entries for the pad profiles. For PPP connections, pad profiles are assigned to incoming connections via the isdnDispatchTable. For outgoing connections, the profile is assigned by the biboPppTable. Profile 0 is used as default profile for ppp.')
x25PadProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1), ).setIndexNames((0, "BIANCA-BRICK-X25PAD-MIB", "x25PadProNumber"))
if mibBuilder.loadTexts: x25PadProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProfileEntry.setDescription('Entries can only be created and deleted manually.')
x25PadProNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProNumber.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProNumber.setDescription('The unique number of the profile.')
x25PadProState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProState.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProState.setDescription('The State of the profile.')
x25PadProAutoCallDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProAutoCallDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProAutoCallDstAddr.setDescription('When this object is set to a non-empty string, a call will automatically be established to this PAD address.')
x25PadProEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEscape.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProEscape.setDescription('The value of the parameter one. This parameter defines a character on its receipt the PAD alternates the state from data-transfer in connection-in-progress. This allows the start-stop mode DTE to initiate an escape from the data-transfer state or the connection-in-progress state in order to send PAD command signals. The value 0 means that the escape from data-transfer state and recall of the PAD is not possible. The value 1 means that the escape is possible by character DLE(Ctrl-P). The values 32-126 mean that the escape is possible by graphic character defined by the user.')
x25PadProEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("no-echo", 256), ("echo", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEcho.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProEcho.setDescription('The value of the parameter two. This parameter determines whether the echo mode is off or on. The selection of the characters to be echoed is dependent on the value of parameter EchoMask.')
x25PadProForwardChar = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProForwardChar.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProForwardChar.setDescription('The value of the parameter three. This parameter defines a character. On its receipt the PAD forwards the previously received data from start-stop DTE as packet. The value 0 means no data forwarding character.')
x25PadProIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProIdleTimer.setDescription('The value of parameter four. This parameter allows the selection of the duration of an interval between successive characters received from the start-stop DTE which, when exceeded, will cause the PAD to terminate the assembly of a packet and to forward it. The value 0 will indicate that no data forwarding on time-out is required. A value between 1 and 255 will indicate the value of the delay in twentieths of a second.')
x25PadProDevControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1, 2))).clone(namedValues=NamedValues(("no-use", 256), ("use-only-data-transfer", 1), ("use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProDevControl.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProDevControl.setDescription('The value of the parameter five. This parameter allows for flow control between the PAD and the start-stop DTE. The PAD indicates whether it is ready or not to accept characters from the start-stop DTE by transmitting special characters. These characters are used to switch an ancillary transmitting device on (X-ON; DC1) and off (X-OFF; DC3). The value 0 means no use of DC1 and DC3. Value 1 indicates the use of DC1 and DC3 on data-transfer. Value 2 means the use of DC1 and DC3 on data-transfer and command state.')
x25PadProSigControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProSigControl.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProSigControl.setDescription('The value of the parameter six. This parameter provides the start-stop DTE with the ability to decide whether or not and in what format PAD service signals are transmitted. The value 0 means no service signals are transmitted to the start-stop DTE. Value 1 indicates service signals other than the prompt PAD service signal are transmitted in the standard format. The value 4 indicates prompt PAD service signal is transmitted in the standard format. The value 5 is a combination of value 1 and value 4, i.e. all service signals including prompt are transmitted in standard format. The transmission of service signals is controlled by values 0, 1, 4, 5.')
x25PadProBrkControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProBrkControl.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProBrkControl.setDescription('The value of the parameter seven. This parameter allows the selection of the operation of the PAD after the receipt of a BREAK-signal from the start-stop DTE in data-transfer state. The value 0 indicates no operation. Value 1 means that the PAD sends an interrupt packet to packet mode DTE or other PAD. Value 2 indicates RESET but the PAD remains in data-transfer state. Value 4 means that the PAD sends an indication of a BREAK-message to packet mode DTE or other PAD. Value 8 indicates escape from data-transfer state. Value 16 determines discard output to start-stop DTE.')
x25PadProDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("normal-data-delivery", 256), ("discard-output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProDiscard.setDescription('The value of the parameter eight. This parameter provides for a PAD to discard the content of user sequences in packets upon request rather than disassembling and transmitting these to the start-stop DTE.')
x25PadProCRPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProCRPadding.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProCRPadding.setDescription('The value of the parameter nine. This parameter provides for the automatic insertion by the PAD of padding characters in the character stream transmitted to the start-stop DTE after the occurrence of a carriage return character. This allows for the printing mechanism for the start-stop DTE to perform the carriage return function correctly. A value between 0 and 255 will indicate the number of padding characters. When this parameter is 0, there will be no padding except that PAD service signals will contain a number of padding characters according to the data rate of the start-stop DTE.')
x25PadProLineFold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLineFold.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProLineFold.setDescription('The value of the parameter ten. This parameter provides for the automatic insertion by the PAD of appropriate format effectors in the character stream transmitted to the start-stop DTE. The predetermined maximum number of graphic characters per line may be set. Tha value 0 means no line folding. A value between 1 and 255 will indicate the number of graphic characters per line that will be transmitted by the PAD without inserting appropriate format effectors.')
x25PadProFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("no-use-DC1-DC3", 256), ("use-DC1-DC3", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProFlowControl.setDescription('The value of the parameter twelve. It allows for flow control between the start-stop DTE and the PAD. The start-stop DTE indicates whether it is ready or not to accept characters from the PAD by transmitting special characters.')
x25PadProLFInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLFInsert.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProLFInsert.setDescription('The value of the parameter thirteen. It provides for the automatic insertion by the PAD of a linefeed character in the character stream to or from the start-stop DTE after each carriage return character. It applies only in the data-transfer state.')
x25PadProLFPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLFPadding.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProLFPadding.setDescription('The value of the parameter fourteen. It provides for the automatic insertion by the PAD of padding characters in the character stream transmitted to the start-stop DTE after the occurrence of a linefeed character. It applies only in the data-transfer state. A value between 0 and 255 will indicate the number of padding characters.')
x25PadProEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1))).clone(namedValues=NamedValues(("no-editing-user-data", 256), ("editing-user-data", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEdit.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProEdit.setDescription('The value of the parameter fifteen. It determines, whether editing of user data in data-transfer state is possible or not. The value 1 suspends data forwarding on full packet until the editing buffer is full and data forwarding on idle timer period expiry. The value of parameter 4 remains unchanged. During the PAD command state the editing function is always available.')
x25PadProCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProCharDel.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProCharDel.setDescription('The value of the parameter sixteen. This parameter provides for character delete editing capabilities in the data-transfer state for the start-stop DTE. The character defined by the user for character delete is the binary respresentation of the decimal value in accordance with IA5.')
x25PadProLineDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLineDel.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProLineDel.setDescription('The value of the parameter seventeen. This parameter provides for line delete editing capabilities in the data-transfer state for the start-stop DTE. The character defined by the user for line delete is the binary respresentation of the decimal value in accordance with IA5.')
x25PadProLineDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProLineDisp.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProLineDisp.setDescription('The value of the parameter eighteen. This parameter provides for line display editing capabilities in the data-transfer state for the start-stop DTE. The character defined by the user for line display is the binary respresentation of the decimal value in accordance with IA5.')
x25PadProSigEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProSigEdit.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProSigEdit.setDescription('The value of the parameter nineteen. It provides the start- stop DTE with the ability to decide whether or not editing PAD service signals are transmitted and which format should be used. This parameter does not apply if the value of parameter 6 is set to 0.')
x25PadProEchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProEchoMask.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProEchoMask.setDescription('The value of the parameter twenty. When ECHO is enabled, it allows selected defined sets of characters received from the start-stop DTE not to be transmitted back to the start-stop DTE. Value 64 does not apply if editing is not enabled. If parameter 5, 12, 22 is set to a non-zero value, then DC1 and DC3 are not echoed. The PAD recall character specified by the value of parameter 1 is not echoed. It does not apply if parameter 2 is set to 0.')
x25PadProParity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 256), ("parity-checking", 1), ("parity-generation", 2), ("parity-checking-generation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProParity.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProParity.setDescription('The value of the parameter twenty one. It allows the PAD to check parity in the data stream from the start-stop DTE and/or generate parity in the data stream to the start-stop DTE. Characters generated by the PAD itself (e.g., PAD service signals) have even parity when this parameter is set to zero unless the parity is determined by alternate means.')
x25PadProPageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProPageWait.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProPageWait.setDescription('The value of the parameter twenty two. It allows the PAD to suspend transmission of additional characters to the start- stop DTE after specified number of linefeed characters have been transmitted by the PAD. Value 0 determines page wait disabled. A value between 1 and 255 will indicate page wait condition after n-linefeed characters are sent by the PAD to the start-stop DTE.')
x25PadProXCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXCharDel.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXCharDel.setDescription('The value of parameter one hundered eighteen. This parameter is a repeating of parameter sixteen.')
x25PadProXLineDel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXLineDel.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXLineDel.setDescription('The value of parameter one hundered nineteen. This parameter is a repeating of parameter seventeen.')
x25PadProXLineDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXLineDisp.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXLineDisp.setDescription('The value of the parameter one hundered twenty. This parameter is a repeating of parameter eighteen.')
x25PadProXForwardChar1 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXForwardChar1.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXForwardChar1.setDescription('The value of the parameter one hundered twenty one. This parameter allows predefinition of one data forwarding character in addition to parameter three.')
x25PadProXForwardChar2 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXForwardChar2.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXForwardChar2.setDescription('The value of the parameter one hundered twenty two. This parameter allows predefinition of one data forwarding character in addition to parameter three.')
x25PadProXParity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 256), ("parity-checking-generation", 1), ("parity-generation", 2), ("parity-checking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXParity.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXParity.setDescription('The value of the parameter one hundered twenty three. This corresponds to the parameter twenty one, but the meaning of values 1 and 3 are interchanged.')
x25PadProXDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXDelay.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXDelay.setDescription('The value of the parameter one hundered twenty five. This parameter determines how long data forwarding ist delayed, wenn it synces with a data entry.')
x25PadProXLFInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 6, 8, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PadProXLFInsert.setStatus('mandatory')
if mibBuilder.loadTexts: x25PadProXLFInsert.setDescription('The value of the parameter one hundered twenty six. This is a repeating of parameter thirteen.')
mibBuilder.exportSymbols("BIANCA-BRICK-X25PAD-MIB", x25PadProLineDel=x25PadProLineDel, x25=x25, x25PadProForwardChar=x25PadProForwardChar, x25PadProState=x25PadProState, x25PadProEscape=x25PadProEscape, x25PadProLineFold=x25PadProLineFold, x25PadProLFInsert=x25PadProLFInsert, x25PadProXLineDel=x25PadProXLineDel, x25PadProSigEdit=x25PadProSigEdit, x25PadProXLineDisp=x25PadProXLineDisp, x25PadProCharDel=x25PadProCharDel, Date=Date, x25PadProNumber=x25PadProNumber, x25PadProXForwardChar2=x25PadProXForwardChar2, x25PadProParity=x25PadProParity, enterprises=enterprises, x25PadProPageWait=x25PadProPageWait, x25PadProBrkControl=x25PadProBrkControl, x25PadProEchoMask=x25PadProEchoMask, x25PadProLineDisp=x25PadProLineDisp, x25PadProDiscard=x25PadProDiscard, x25PadProCRPadding=x25PadProCRPadding, x25PadProXParity=x25PadProXParity, dod=dod, bintec=bintec, x25PadProXDelay=x25PadProXDelay, x25PadProSigControl=x25PadProSigControl, x25PadProIdleTimer=x25PadProIdleTimer, x25PadProEcho=x25PadProEcho, x25PadProAutoCallDstAddr=x25PadProAutoCallDstAddr, x25PadProXCharDel=x25PadProXCharDel, x25PadProDevControl=x25PadProDevControl, x25PadProEdit=x25PadProEdit, x25PadProfileEntry=x25PadProfileEntry, x25PadProXLFInsert=x25PadProXLFInsert, x25PadProXForwardChar1=x25PadProXForwardChar1, bibo=bibo, org=org, x25PadProfileTable=x25PadProfileTable, x25PadProLFPadding=x25PadProLFPadding, x25PadProFlowControl=x25PadProFlowControl, private=private, internet=internet, HexValue=HexValue)
