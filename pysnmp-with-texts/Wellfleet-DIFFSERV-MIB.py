#
# PySNMP MIB module Wellfleet-DIFFSERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-DIFFSERV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, Unsigned32, iso, IpAddress, Bits, TimeTicks, ModuleIdentity, MibIdentifier, Integer32, Gauge32, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Unsigned32", "iso", "IpAddress", "Bits", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Integer32", "Gauge32", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfDiffServAppGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDiffServAppGroup")
wfDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1))
wfDiffServCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServCreate.setDescription('Create/Delete parameter. Default is created.')
wfDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServEnable.setDescription('Enable/Disable parameter. Default is enabled.')
wfDiffServDsByteMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServDsByteMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServDsByteMask.setDescription("Bitmask which is AND'ed with DS-byte stting and then OR'ed with DS-byte in the packet. It masks out bits.")
wfDiffServIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2), )
if mibBuilder.loadTexts: wfDiffServIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfTable.setDescription('Table of DiffServ capable interfaces.')
wfDiffServIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1), ).setIndexNames((0, "Wellfleet-DIFFSERV-MIB", "wfDiffServIntfIpAddr"), (0, "Wellfleet-DIFFSERV-MIB", "wfDiffServIntfIfIndex"))
if mibBuilder.loadTexts: wfDiffServIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfEntry.setDescription('DiffServ interface table entry.')
wfDiffServIntfCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfCreate.setDescription('Create/Delete parameter. Default is created.')
wfDiffServIntfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfEnable.setDescription('Enable/Disable parameter. Default is enabled.')
wfDiffServIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notpres", 3))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDiffServIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfState.setDescription('Current state of this interface.')
wfDiffServIntfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDiffServIntfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfIpAddr.setDescription('IP address this interface is associated with.')
wfDiffServIntfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDiffServIntfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfIfIndex.setDescription('Circuit number/if index this interface is associated with.')
wfDiffServIntfLogMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfLogMask.setDescription('Specifies which events to log. 0x00000001 - Filter events: Add/Del/Enb/Dis 0x00000002 - Interaction with cops. 0x00000004 - Trigger events. 0x00000008 - Interaction with IP interface. 0x00000020 - Filter debugging events.')
wfDiffServIntfCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("cops", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfCfgType.setDescription('Interface config type.')
wfDiffServIntfUrlIdleOutTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 8), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfUrlIdleOutTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServIntfUrlIdleOutTimer.setDescription('Number of seconds to wait before a dynamic Url filter is idled out.')
mibBuilder.exportSymbols("Wellfleet-DIFFSERV-MIB", wfDiffServCreate=wfDiffServCreate, wfDiffServIntfEnable=wfDiffServIntfEnable, wfDiffServIntfState=wfDiffServIntfState, wfDiffServIntfEntry=wfDiffServIntfEntry, wfDiffServIntfTable=wfDiffServIntfTable, wfDiffServIntfCfgType=wfDiffServIntfCfgType, wfDiffServDsByteMask=wfDiffServDsByteMask, wfDiffServEnable=wfDiffServEnable, wfDiffServ=wfDiffServ, wfDiffServIntfCreate=wfDiffServIntfCreate, wfDiffServIntfIpAddr=wfDiffServIntfIpAddr, wfDiffServIntfUrlIdleOutTimer=wfDiffServIntfUrlIdleOutTimer, wfDiffServIntfLogMask=wfDiffServIntfLogMask, wfDiffServIntfIfIndex=wfDiffServIntfIfIndex)
