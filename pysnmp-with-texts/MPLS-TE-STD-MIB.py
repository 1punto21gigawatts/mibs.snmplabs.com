#
# PySNMP MIB module MPLS-TE-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-TE-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
IndexIntegerNextFree, = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexIntegerNextFree")
InterfaceIndexOrZero, ifGeneralInformationGroup, ifCounterDiscontinuityGroup = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifGeneralInformationGroup", "ifCounterDiscontinuityGroup")
InetAddressPrefixLength, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength")
TeHopAddressUnnum, mplsStdMIB, MplsLSPID, MplsPathIndexOrZero, TeHopAddressType, TeHopAddress, MplsPathIndex, MplsTunnelInstanceIndex, MplsBitRate, MplsExtendedTunnelId, MplsOwner, TeHopAddressAS, MplsTunnelIndex, MplsBurstSize, MplsTunnelAffinity = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "TeHopAddressUnnum", "mplsStdMIB", "MplsLSPID", "MplsPathIndexOrZero", "TeHopAddressType", "TeHopAddress", "MplsPathIndex", "MplsTunnelInstanceIndex", "MplsBitRate", "MplsExtendedTunnelId", "MplsOwner", "TeHopAddressAS", "MplsTunnelIndex", "MplsBurstSize", "MplsTunnelAffinity")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, NotificationType, TimeTicks, Counter32, Counter64, zeroDotZero, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "NotificationType", "TimeTicks", "Counter32", "Counter64", "zeroDotZero", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso")
TimeStamp, DisplayString, RowPointer, StorageType, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowPointer", "StorageType", "TextualConvention", "TruthValue", "RowStatus")
mplsTeStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 3))
mplsTeStdMIB.setRevisions(('2004-06-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mplsTeStdMIB.setRevisionsDescriptions(('Initial version issued as part of RFC 3812.',))
if mibBuilder.loadTexts: mplsTeStdMIB.setLastUpdated('200406030000Z')
if mibBuilder.loadTexts: mplsTeStdMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
if mibBuilder.loadTexts: mplsTeStdMIB.setContactInfo(' Cheenu Srinivasan Bloomberg L.P. Email: cheenu@bloomberg.net Arun Viswanathan Force10 Networks, Inc. Email: arunv@force10networks.com Thomas D. Nadeau Cisco Systems, Inc. Email: tnadeau@cisco.com Comments about this document should be emailed directly to the MPLS working group mailing list at mpls@uu.net.')
if mibBuilder.loadTexts: mplsTeStdMIB.setDescription("Copyright (C) The Internet Society (2004). The initial version of this MIB module was published in RFC 3812. For full legal notices see the RFC itself or see: http://www.ietf.org/copyrights/ianamib.html This MIB module contains managed object definitions for MPLS Traffic Engineering (TE) as defined in: 1. Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2. Constraint-Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002 3. Requirements for Traffic Engineering Over MPLS, Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M., and J. McManus, [RFC2702], September 1999")
mplsTeNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 0))
mplsTeScalars = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 1))
mplsTeObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 2))
mplsTeConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 3))
mplsTunnelConfigured = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelConfigured.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelConfigured.setDescription('The number of tunnels configured on this device. A tunnel is considered configured if the mplsTunnelRowStatus is active(1).')
mplsTunnelActive = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelActive.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelActive.setDescription('The number of tunnels active on this device. A tunnel is considered active if the mplsTunnelOperStatus is up(1).')
mplsTunnelTEDistProto = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("ospf", 1), ("isis", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelTEDistProto.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelTEDistProto.setDescription('The traffic engineering distribution protocol(s) used by this LSR. Note that an LSR may support more than one distribution protocol simultaneously.')
mplsTunnelMaxHops = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelMaxHops.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelMaxHops.setDescription('The maximum number of hops that can be specified for a tunnel on this device.')
mplsTunnelNotificationMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTunnelNotificationMaxRate.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelNotificationMaxRate.setDescription('This variable indicates the maximum number of notifications issued per second. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time. A value of 0 means no throttling is applied and events may be notified at the rate at which they occur.')
mplsTunnelIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 1), IndexIntegerNextFree().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelIndexNext.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIndexNext.setDescription('This object contains an unused value for mplsTunnelIndex, or a zero to indicate that none exist. Negative values are not allowed, as they do not correspond to valid values of mplsTunnelIndex. Note that this object offers an unused value for an mplsTunnelIndex value at the ingress side of a tunnel. At other LSRs the value of mplsTunnelIndex SHOULD be taken from the value signaled by the MPLS signaling protocol. ')
mplsTunnelTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2), )
if mibBuilder.loadTexts: mplsTunnelTable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelTable.setDescription('The mplsTunnelTable allows new MPLS tunnels to be created between an LSR and a remote endpoint, and existing tunnels to be reconfigured or removed. Note that only point-to-point tunnel segments are supported, although multipoint-to-point and point- to-multipoint connections are supported by an LSR acting as a cross-connect. Each MPLS tunnel can thus have one out-segment originating at this LSR and/or one in-segment terminating at this LSR.')
mplsTunnelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsTunnelEntry.setReference('1. RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000 ')
if mibBuilder.loadTexts: mplsTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelEntry.setDescription('An entry in this table represents an MPLS tunnel. An entry can be created by a network administrator or by an SNMP agent as instructed by an MPLS signalling protocol. Whenever a new entry is created with mplsTunnelIsIf set to true(1), then a corresponding entry is created in ifTable as well (see RFC 2863). The ifType of this entry is mplsTunnel(150). A tunnel entry needs to be uniquely identified across a MPLS network. Indices mplsTunnelIndex and mplsTunnelInstance uniquely identify a tunnel on the LSR originating the tunnel. To uniquely identify a tunnel across an MPLS network requires index mplsTunnelIngressLSRId. The last index mplsTunnelEgressLSRId is useful in identifying all instances of a tunnel that terminate on the same egress LSR.')
mplsTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signalling protocol is rsvp(2) this value SHOULD be equal to the value signaled in the Tunnel Id of the Session object. When the MPLS signalling protocol is crldp(3) this value SHOULD be equal to the value signaled in the LSP ID.')
mplsTunnelInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelInstance.setDescription('Uniquely identifies a particular instance of a tunnel between a pair of ingress and egress LSRs. It is useful to identify multiple instances of tunnels for the purposes of backup and parallel tunnels. When the MPLS signaling protocol is rsvp(2) this value SHOULD be equal to the LSP Id of the Sender Template object. When the signaling protocol is crldp(3) there is no equivalent signaling object.')
mplsTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: mplsTunnelIngressLSRId.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2. Constraint-Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002')
if mibBuilder.loadTexts: mplsTunnelIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIngressLSRId.setDescription('Identity of the ingress LSR associated with this tunnel instance. When the MPLS signalling protocol is rsvp(2) this value SHOULD be equal to the Tunnel Sender Address in the Sender Template object and MAY be equal to the Extended Tunnel Id field in the SESSION object. When the MPLS signalling protocol is crldp(3) this value SHOULD be equal to the Ingress LSR Router ID field in the LSPID TLV object.')
mplsTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 4), MplsExtendedTunnelId())
if mibBuilder.loadTexts: mplsTunnelEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelEgressLSRId.setDescription('Identity of the egress LSR associated with this tunnel instance.')
mplsTunnelName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelName.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: mplsTunnelName.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelName.setDescription("The canonical name assigned to the tunnel. This name can be used to refer to the tunnel on the LSR's console port. If mplsTunnelIsIf is set to true then the ifName of the interface corresponding to this tunnel should have a value equal to mplsTunnelName. Also see the description of ifName in RFC 2863.")
mplsTunnelDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDescr.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelDescr.setDescription('A textual string containing information about the tunnel. If there is no description this object contains a zero length string. This object is may not be signaled by MPLS signaling protocols, consequentally the value of this object at transit and egress LSRs MAY be automatically generated or absent.')
mplsTunnelIsIf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIsIf.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: mplsTunnelIsIf.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIsIf.setDescription('Denotes whether or not this tunnel corresponds to an interface represented in the interfaces group table. Note that if this variable is set to true then the ifName of the interface corresponding to this tunnel should have a value equal to mplsTunnelName. Also see the description of ifName in RFC 2863. This object is meaningful only at the ingress and egress LSRs.')
mplsTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelIfIndex.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: mplsTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIfIndex.setDescription('If mplsTunnelIsIf is set to true, then this value contains the LSR-assigned ifIndex which corresponds to an entry in the interfaces table. Otherwise this variable should contain the value of zero indicating that a valid ifIndex was not assigned to this tunnel interface.')
mplsTunnelOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 9), MplsOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelOwner.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelOwner.setDescription('Denotes the entity that created and is responsible for managing this tunnel. This column is automatically filled by the agent on creation of a row.')
mplsTunnelRole = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("head", 1), ("transit", 2), ("tail", 3), ("headTail", 4))).clone('head')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRole.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelRole.setDescription('This value signifies the role that this tunnel entry/instance represents. This value MUST be set to head(1) at the originating point of the tunnel. This value MUST be set to transit(2) at transit points along the tunnel, if transit points are supported. This value MUST be set to tail(3) at the terminating point of the tunnel if tunnel tails are supported. The value headTail(4) is provided for tunnels that begin and end on the same LSR.')
mplsTunnelXCPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 11), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelXCPointer.setReference('Srinivasan, C., Viswanathan, A., and T. Nadeau, Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813, June 2004')
if mibBuilder.loadTexts: mplsTunnelXCPointer.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelXCPointer.setDescription('This variable points to a row in the mplsXCTable. This table identifies the segments that compose this tunnel, their characteristics, and relationships to each other. A value of zeroDotZero indicates that no LSP has been associated with this tunnel yet.')
mplsTunnelSignallingProto = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rsvp", 2), ("crldp", 3), ("other", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSignallingProto.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelSignallingProto.setDescription('The signalling protocol, if any, used to setup this tunnel.')
mplsTunnelSetupPrio = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSetupPrio.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2. Constraint-Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002')
if mibBuilder.loadTexts: mplsTunnelSetupPrio.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelSetupPrio.setDescription('Indicates the setup priority of this tunnel.')
mplsTunnelHoldingPrio = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHoldingPrio.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2. Constraint-Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002')
if mibBuilder.loadTexts: mplsTunnelHoldingPrio.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHoldingPrio.setDescription('Indicates the holding priority for this tunnel.')
mplsTunnelSessionAttributes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 15), Bits().clone(namedValues=NamedValues(("fastReroute", 0), ("mergingPermitted", 1), ("isPersistent", 2), ("isPinned", 3), ("recordRoute", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSessionAttributes.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.')
if mibBuilder.loadTexts: mplsTunnelSessionAttributes.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelSessionAttributes.setDescription('This bit mask indicates optional session values for this tunnel. The following describes these bit fields: fastReroute This flag indicates that the any tunnel hop may choose to reroute this tunnel without tearing it down. This flag permits transit routers to use a local repair mechanism which may result in violation of the explicit routing of this tunnel. When a fault is detected on an adjacent downstream link or node, a transit router can re-route traffic for fast service restoration. mergingPermitted This flag permits transit routers to merge this session with other RSVP sessions for the purpose of reducing resource overhead on downstream transit routers, thereby providing better network scaling. isPersistent Indicates whether this tunnel should be restored automatically after a failure occurs. isPinned This flag indicates whether the loose- routed hops of this tunnel are to be pinned. recordRoute This flag indicates whether or not the signalling protocol should remember the tunnel path after it has been signaled.')
mplsTunnelLocalProtectInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelLocalProtectInUse.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelLocalProtectInUse.setDescription('Indicates that the local repair mechanism is in use to maintain this tunnel (usually in the face of an outage of the link it was previously routed over).')
mplsTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 17), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourcePointer.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourcePointer.setDescription('This variable represents a pointer to the traffic parameter specification for this tunnel. This value may point at an entry in the mplsTunnelResourceEntry to indicate which mplsTunnelResourceEntry is to be assigned to this LSP instance. This value may optionally point at an externally defined traffic parameter specification table. A value of zeroDotZero indicates best-effort treatment. By having the same value of this object, two or more LSPs can indicate resource sharing.')
mplsTunnelPrimaryInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 18), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryInstance.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPrimaryInstance.setDescription('Specifies the instance index of the primary instance of this tunnel. More details of the definition of tunnel instances and the primary tunnel instance can be found in the description of the TEXTUAL-CONVENTION MplsTunnelInstanceIndex.')
mplsTunnelInstancePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelInstancePriority.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelInstancePriority.setDescription('This value indicates which priority, in descending order, with 0 indicating the lowest priority, within a group of tunnel instances. A group of tunnel instances is defined as a set of LSPs with the same mplsTunnelIndex in this table, but with a different mplsTunnelInstance. Tunnel instance priorities are used to denote the priority at which a particular tunnel instance will supercede another. Instances of tunnels containing the same mplsTunnelInstancePriority will be used for load sharing.')
mplsTunnelHopTableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 20), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopTableIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopTableIndex.setDescription('Index into the mplsTunnelHopTable entry that specifies the explicit route hops for this tunnel. This object is meaningful only at the head-end of the tunnel.')
mplsTunnelPathInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 21), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelPathInUse.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPathInUse.setDescription('This value denotes the configured path that was chosen for this tunnel. This value reflects the secondary index into mplsTunnelHopTable. This path may not exactly match the one in mplsTunnelARHopTable due to the fact that some CSPF modification may have taken place. See mplsTunnelARHopTable for the actual path being taken by the tunnel. A value of zero denotes that no path is currently in use or available.')
mplsTunnelARHopTableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 22), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopTableIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopTableIndex.setDescription('Index into the mplsTunnelARHopTable entry that specifies the actual hops traversed by the tunnel. This is automatically updated by the agent when the actual hops becomes available.')
mplsTunnelCHopTableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 23), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopTableIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopTableIndex.setDescription('Index into the mplsTunnelCHopTable entry that specifies the computed hops traversed by the tunnel. This is automatically updated by the agent when computed hops become available or when computed hops get modified.')
mplsTunnelIncludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 24), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAnyAffinity.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.')
if mibBuilder.loadTexts: mplsTunnelIncludeAnyAffinity.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIncludeAnyAffinity.setDescription('A link satisfies the include-any constraint if and only if the constraint is zero, or the link and the constraint have a resource class in common.')
mplsTunnelIncludeAllAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 25), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAllAffinity.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.')
if mibBuilder.loadTexts: mplsTunnelIncludeAllAffinity.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIncludeAllAffinity.setDescription('A link satisfies the include-all constraint if and only if the link contains all of the administrative groups specified in the constraint.')
mplsTunnelExcludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 26), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExcludeAnyAffinity.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.')
if mibBuilder.loadTexts: mplsTunnelExcludeAnyAffinity.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelExcludeAnyAffinity.setDescription('A link satisfies the exclude-any constraint if and only if the link contains none of the administrative groups specified in the constraint.')
mplsTunnelTotalUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelTotalUpTime.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelTotalUpTime.setDescription('This value represents the aggregate up time for all instances of this tunnel, if available. If this value is unavailable, it MUST return a value of 0.')
mplsTunnelInstanceUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelInstanceUpTime.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelInstanceUpTime.setDescription("This value identifies the total time that this tunnel instance's operStatus has been Up(1).")
mplsTunnelPrimaryUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryUpTime.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPrimaryUpTime.setDescription('Specifies the total time the primary instance of this tunnel has been active. The primary instance of this tunnel is defined in mplsTunnelPrimaryInstance.')
mplsTunnelPathChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPathChanges.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPathChanges.setDescription('Specifies the number of times the actual path for this tunnel instance has changed.')
mplsTunnelLastPathChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 31), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelLastPathChange.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelLastPathChange.setDescription('Specifies the time since the last change to the actual path for this tunnel instance.')
mplsTunnelCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCreationTime.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCreationTime.setDescription('Specifies the value of SysUpTime when the first instance of this tunnel came into existence. That is, when the value of mplsTunnelOperStatus was first set to up(1).')
mplsTunnelStateTransitions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelStateTransitions.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelStateTransitions.setDescription('Specifies the number of times the state (mplsTunnelOperStatus) of this tunnel instance has changed.')
mplsTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelAdminStatus.setDescription('Indicates the desired operational status of this tunnel.')
mplsTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelOperStatus.setDescription('Indicates the actual operational status of this tunnel, which is typically but not limited to, a function of the state of individual segments of this tunnel.')
mplsTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 36), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelAdminStatus, mplsTunnelRowStatus and mplsTunnelStorageType.')
mplsTunnelStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 37), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelStorageType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelStorageType.setDescription("The storage type for this tunnel entry. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
mplsTunnelHopListIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 3), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelHopListIndexNext.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopListIndexNext.setDescription('This object contains an appropriate value to be used for mplsTunnelHopListIndex when creating entries in the mplsTunnelHopTable. If the number of unassigned entries is exhausted, a retrieval operation will return a value of 0. This object may also return a value of 0 when the LSR is unable to accept conceptual row creation, for example, if the mplsTunnelHopTable is implemented as read-only. To obtain the value of mplsTunnelHopListIndex for a new entry in the mplsTunnelHopTable, the manager issues a management protocol retrieval operation to obtain the current value of mplsTunnelHopIndex. When the SET is performed to create a row in the mplsTunnelHopTable, the Command Responder (agent) must determine whether the value is indeed still unused; Two Network Management Applications may attempt to create a row (configuration entry) simultaneously and use the same value. If it is currently unused, the SET succeeds and the Command Responder (agent) changes the value of this object, according to an implementation-specific algorithm. If the value is in use, however, the SET fails. The Network Management Application must then re-read this variable to obtain a new usable value.')
mplsTunnelHopTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4), )
if mibBuilder.loadTexts: mplsTunnelHopTable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopTable.setDescription('The mplsTunnelHopTable is used to indicate the hops, strict or loose, for an instance of an MPLS tunnel defined in mplsTunnelTable, when it is established via signalling, for the outgoing direction of the tunnel. Thus at a transit LSR, this table contains the desired path of the tunnel from this LSR onwards. Each row in this table is indexed by mplsTunnelHopListIndex which corresponds to a group of hop lists or path options. Each row also has a secondary index mplsTunnelHopIndex, which indicates a group of hops (also known as a path option). Finally, the third index, mplsTunnelHopIndex indicates the specific hop information for a path option. In case we want to specify a particular interface on the originating LSR of an outgoing tunnel by which we want packets to exit the LSR, we specify this as the first hop for this tunnel in mplsTunnelHopTable.')
mplsTunnelHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelHopListIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelHopPathOptionIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelHopIndex"))
if mibBuilder.loadTexts: mplsTunnelHopEntry.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopEntry.setDescription('An entry in this table represents a tunnel hop. An entry is created by a network administrator for signaled ERLSP set up by an MPLS signalling protocol.')
mplsTunnelHopListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopListIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopListIndex.setDescription('Primary index into this table identifying a particular explicit route object.')
mplsTunnelHopPathOptionIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopPathOptionIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopPathOptionIndex.setDescription('Secondary index into this table identifying a particular group of hops representing a particular configured path. This is otherwise known as a path option.')
mplsTunnelHopIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 3), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopIndex.setDescription('Tertiary index into this table identifying a particular hop.')
mplsTunnelHopAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 4), TeHopAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAddrType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopAddrType.setDescription("The Hop Address Type of this tunnel hop. The value of this object cannot be changed if the value of the corresponding mplsTunnelHopRowStatus object is 'active'. Note that lspid(5) is a valid option only for tunnels signaled via CRLDP. ")
mplsTunnelHopIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 5), TeHopAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopIpAddr.setDescription("The Tunnel Hop Address for this tunnel hop. The type of this address is determined by the value of the corresponding mplsTunnelHopAddrType. The value of this object cannot be changed if the value of the corresponding mplsTunnelHopRowStatus object is 'active'. ")
mplsTunnelHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 6), InetAddressPrefixLength().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopIpPrefixLen.setDescription('If mplsTunnelHopAddrType is set to ipv4(1) or ipv6(2), then this value will contain an appropriate prefix length for the IP address in object mplsTunnelHopIpAddr. Otherwise this value is irrelevant and should be ignored. ')
mplsTunnelHopAsNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 7), TeHopAddressAS()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAsNumber.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopAsNumber.setDescription('If mplsTunnelHopAddrType is set to asnumber(3), then this value will contain the AS number of this hop. Otherwise the agent should set this object to zero- length string and the manager should ignore this.')
mplsTunnelHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 8), TeHopAddressUnnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAddrUnnum.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopAddrUnnum.setDescription('If mplsTunnelHopAddrType is set to unnum(4), then this value will contain the interface identifier of the unnumbered interface for this hop. This object should be used in conjunction with mplsTunnelHopIpAddress which would contain the LSR Router ID in this case. Otherwise the agent should set this object to zero-length string and the manager should ignore this.')
mplsTunnelHopLspId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 9), MplsLSPID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopLspId.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopLspId.setDescription('If mplsTunnelHopAddrType is set to lspid(5), then this value will contain the LSPID of a tunnel of this hop. The present tunnel being configured is tunneled through this hop (using label stacking). This object is otherwise insignificant and should contain a value of 0 to indicate this fact.')
mplsTunnelHopType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopType.setDescription("Denotes whether this tunnel hop is routed in a strict or loose fashion. The value of this object has no meaning if the mplsTunnelHopInclude object is set to 'false'.")
mplsTunnelHopInclude = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopInclude.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopInclude.setDescription("If this value is set to true, then this indicates that this hop must be included in the tunnel's path. If this value is set to 'false', then this hop must be avoided when calculating the path for this tunnel. The default value of this object is 'true', so that by default all indicated hops are included in the CSPF path computation. If this object is set to 'false' the value of mplsTunnelHopType should be ignored.")
mplsTunnelHopPathOptionName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 12), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopPathOptionName.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopPathOptionName.setDescription('The description of this series of hops as they relate to the specified path option. The value of this object SHOULD be the same for each hop in the series that comprises a path option.')
mplsTunnelHopEntryPathComp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("explicit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopEntryPathComp.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopEntryPathComp.setDescription('If this value is set to dynamic, then the user should only specify the source and destination of the path and expect that the CSPF will calculate the remainder of the path. If this value is set to explicit, the user should specify the entire path for the tunnel to take. This path may contain strict or loose hops. Each hop along a specific path SHOULD have this object set to the same value')
mplsTunnelHopRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopRowStatus.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelHopRowStatus and mplsTunnelHopStorageType.')
mplsTunnelHopStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 15), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopStorageType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelHopStorageType.setDescription("The storage type for this Hop entry. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
mplsTunnelResourceIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelResourceIndexNext.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceIndexNext.setDescription('This object contains the next appropriate value to be used for mplsTunnelResourceIndex when creating entries in the mplsTunnelResourceTable. If the number of unassigned entries is exhausted, a retrieval operation will return a value of 0. This object may also return a value of 0 when the LSR is unable to accept conceptual row creation, for example, if the mplsTunnelTable is implemented as read-only. To obtain the mplsTunnelResourceIndex value for a new entry, the manager must first issue a management protocol retrieval operation to obtain the current value of this object. When the SET is performed to create a row in the mplsTunnelResourceTable, the Command Responder (agent) must determine whether the value is indeed still unused; Two Network Management Applications may attempt to create a row (configuration entry) simultaneously and use the same value. If it is currently unused, the SET succeeds and the Command Responder (agent) changes the value of this object, according to an implementation-specific algorithm. If the value is in use, however, the SET fails. The Network Management Application must then re-read this variable to obtain a new usable value.')
mplsTunnelResourceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6), )
if mibBuilder.loadTexts: mplsTunnelResourceTable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceTable.setDescription('The mplsTunnelResourceTable allows a manager to specify which resources are desired for an MPLS tunnel. This table also allows several tunnels to point to a single entry in this table, implying that these tunnels should share resources.')
mplsTunnelResourceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelResourceEntry.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceEntry.setDescription('An entry in this table represents a set of resources for an MPLS tunnel. An entry can be created by a network administrator or by an SNMP agent as instructed by any MPLS signalling protocol. An entry in this table referenced by a tunnel instance with zero mplsTunnelInstance value indicates a configured set of resource parameter. An entry referenced by a tunnel instance with a non-zero mplsTunnelInstance reflects the in-use resource parameters for the tunnel instance which may have been negotiated or modified by the MPLS signaling protocols.')
mplsTunnelResourceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mplsTunnelResourceIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceIndex.setDescription('Uniquely identifies this row.')
mplsTunnelResourceMaxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 2), MplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxRate.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceMaxRate.setDescription('The maximum rate in bits/second. Note that setting mplsTunnelResourceMaxRate, mplsTunnelResourceMeanRate, and mplsTunnelResourceMaxBurstSize to 0 indicates best- effort treatment.')
mplsTunnelResourceMeanRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 3), MplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanRate.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceMeanRate.setDescription('This object is copied into an instance of mplsTrafficParamMeanRate in the mplsTrafficParamTable. The OID of this table entry is then copied into the corresponding mplsInSegmentTrafficParamPtr.')
mplsTunnelResourceMaxBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 4), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceMaxBurstSize.setDescription('The maximum burst size in bytes.')
mplsTunnelResourceMeanBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 5), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanBurstSize.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceMeanBurstSize.setDescription('The mean burst size in bytes. The implementations which do not implement this variable must return a noSuchObject exception for this object and must not allow a user to set this object.')
mplsTunnelResourceExBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 6), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceExBurstSize.setReference('CR-LDP Specification, Section 4.3.')
if mibBuilder.loadTexts: mplsTunnelResourceExBurstSize.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceExBurstSize.setDescription('The Excess burst size in bytes. The implementations which do not implement this variable must return noSuchObject exception for this object and must not allow a user to set this value.')
mplsTunnelResourceFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceFrequency.setReference('CR-LDP Specification, Section 4.3.')
if mibBuilder.loadTexts: mplsTunnelResourceFrequency.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceFrequency.setDescription('The granularity of the availability of committed rate. The implementations which do not implement this variable must return unspecified(1) for this value and must not allow a user to set this value.')
mplsTunnelResourceWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceWeight.setReference('CR-LDP Specification, Section 4.3.')
if mibBuilder.loadTexts: mplsTunnelResourceWeight.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceWeight.setDescription('The relative weight for using excess bandwidth above its committed rate. The value of 0 means that weight is not applicable for the CR-LSP.')
mplsTunnelResourceRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelResourceRowStatus and mplsTunnelResourceStorageType.')
mplsTunnelResourceStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 10), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceStorageType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelResourceStorageType.setDescription("The storage type for this Hop entry. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
mplsTunnelARHopTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7), )
if mibBuilder.loadTexts: mplsTunnelARHopTable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopTable.setDescription('The mplsTunnelARHopTable is used to indicate the hops for an MPLS tunnel defined in mplsTunnelTable, as reported by the MPLS signalling protocol. Thus at a transit LSR, this table (if the table is supported and if the signaling protocol is recording actual route information) contains the actual route of the whole tunnel. If the signaling protocol is not recording the actual route, this table MAY report the information from the mplsTunnelHopTable or the mplsTunnelCHopTable. Each row in this table is indexed by mplsTunnelARHopListIndex. Each row also has a secondary index mplsTunnelARHopIndex, corresponding to the next hop that this row corresponds to. Please note that since the information necessary to build entries within this table is not provided by some MPLS signalling protocols, implementation of this table is optional. Furthermore, since the information in this table is actually provided by the MPLS signalling protocol after the path has been set-up, the entries in this table are provided only for observation, and hence, all variables in this table are accessible exclusively as read- only. Note also that the contents of this table may change while it is being read because of re-routing activities. A network administrator may verify that the actual route read is consistent by reference to the mplsTunnelLastPathChange object.')
mplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelARHopListIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelARHopIndex"))
if mibBuilder.loadTexts: mplsTunnelARHopEntry.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopEntry.setDescription('An entry in this table represents a tunnel hop. An entry is created by the agent for signaled ERLSP set up by an MPLS signalling protocol.')
mplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopListIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopListIndex.setDescription('Primary index into this table identifying a particular recorded hop list.')
mplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopIndex.setDescription('Secondary index into this table identifying the particular hop.')
mplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 3), TeHopAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopAddrType.setDescription('The Hop Address Type of this tunnel hop. Note that lspid(5) is a valid option only for tunnels signaled via CRLDP.')
mplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 4), TeHopAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopIpAddr.setDescription('The Tunnel Hop Address for this tunnel hop. The type of this address is determined by the value of the corresponding mplsTunnelARHopAddrType. If mplsTunnelARHopAddrType is set to unnum(4), then this value contains the LSR Router ID of the unnumbered interface. Otherwise the agent SHOULD set this object to the zero-length string and the manager should ignore this object.')
mplsTunnelARHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 5), TeHopAddressUnnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrUnnum.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopAddrUnnum.setDescription('If mplsTunnelARHopAddrType is set to unnum(4), then this value will contain the interface identifier of the unnumbered interface for this hop. This object should be used in conjunction with mplsTunnelARHopIpAddr which would contain the LSR Router ID in this case. Otherwise the agent should set this object to zero-length string and the manager should ignore this.')
mplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 6), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopLspId.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelARHopLspId.setDescription('If mplsTunnelARHopAddrType is set to lspid(5), then this value will contain the LSP ID of this hop. This object is otherwise insignificant and should contain a value of 0 to indicate this fact.')
mplsTunnelCHopTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8), )
if mibBuilder.loadTexts: mplsTunnelCHopTable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopTable.setDescription('The mplsTunnelCHopTable is used to indicate the hops, strict or loose, for an MPLS tunnel defined in mplsTunnelTable, as computed by a constraint- based routing protocol, based on the mplsTunnelHopTable for the outgoing direction of the tunnel. Thus at a transit LSR, this table (if the table is supported) MAY contain the path computed by the CSPF engine on (or on behalf of) this LSR. Each row in this table is indexed by mplsTunnelCHopListIndex. Each row also has a secondary index mplsTunnelCHopIndex, corresponding to the next hop that this row corresponds to. In case we want to specify a particular interface on the originating LSR of an outgoing tunnel by which we want packets to exit the LSR, we specify this as the first hop for this tunnel in mplsTunnelCHopTable. Please note that since the information necessary to build entries within this table may not be supported by some LSRs, implementation of this table is optional. Furthermore, since the information in this table describes the path computed by the CSPF engine the entries in this table are read-only.')
mplsTunnelCHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelCHopListIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelCHopIndex"))
if mibBuilder.loadTexts: mplsTunnelCHopEntry.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopEntry.setDescription('An entry in this table represents a tunnel hop. An entry in this table is created by a path computation engine using CSPF techniques applied to the information collected by routing protocols and the hops specified in the corresponding mplsTunnelHopTable.')
mplsTunnelCHopListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopListIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopListIndex.setDescription('Primary index into this table identifying a particular computed hop list.')
mplsTunnelCHopIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopIndex.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopIndex.setDescription('Secondary index into this table identifying the particular hop.')
mplsTunnelCHopAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 3), TeHopAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopAddrType.setDescription('The Hop Address Type of this tunnel hop. Note that lspid(5) is a valid option only for tunnels signaled via CRLDP.')
mplsTunnelCHopIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 4), TeHopAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopIpAddr.setDescription('The Tunnel Hop Address for this tunnel hop. The type of this address is determined by the value of the corresponding mplsTunnelCHopAddrType. If mplsTunnelCHopAddrType is set to unnum(4), then this value will contain the LSR Router ID of the unnumbered interface. Otherwise the agent should set this object to the zero-length string and the manager SHOULD ignore this object.')
mplsTunnelCHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 5), InetAddressPrefixLength().clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopIpPrefixLen.setDescription('If mplsTunnelCHopAddrType is set to ipv4(1) or ipv6(2), then this value will contain an appropriate prefix length for the IP address in object mplsTunnelCHopIpAddr. Otherwise this value is irrelevant and should be ignored. ')
mplsTunnelCHopAsNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 6), TeHopAddressAS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAsNumber.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopAsNumber.setDescription('If mplsTunnelCHopAddrType is set to asnumber(3), then this value will contain the AS number of this hop. Otherwise the agent should set this object to zero-length string and the manager should ignore this.')
mplsTunnelCHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 7), TeHopAddressUnnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrUnnum.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopAddrUnnum.setDescription('If mplsTunnelCHopAddrType is set to unnum(4), then this value will contain the unnumbered interface identifier of this hop. This object should be used in conjunction with mplsTunnelCHopIpAddr which would contain the LSR Router ID in this case. Otherwise the agent should set this object to zero- length string and the manager should ignore this.')
mplsTunnelCHopLspId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 8), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopLspId.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopLspId.setDescription('If mplsTunnelCHopAddrType is set to lspid(5), then this value will contain the LSP ID of this hop. This object is otherwise insignificant and should contain a value of 0 to indicate this fact.')
mplsTunnelCHopType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCHopType.setDescription('Denotes whether this is tunnel hop is routed in a strict or loose fashion.')
mplsTunnelPerfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9), )
if mibBuilder.loadTexts: mplsTunnelPerfTable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPerfTable.setDescription('This table provides per-tunnel instance MPLS performance information.')
mplsTunnelPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1), )
mplsTunnelEntry.registerAugmentions(("MPLS-TE-STD-MIB", "mplsTunnelPerfEntry"))
mplsTunnelPerfEntry.setIndexNames(*mplsTunnelEntry.getIndexNames())
if mibBuilder.loadTexts: mplsTunnelPerfEntry.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPerfEntry.setDescription('An entry in this table is created by the LSR for every tunnel. Its is an extension to mplsTunnelEntry.')
mplsTunnelPerfPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfPackets.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPerfPackets.setDescription('Number of packets forwarded by the tunnel. This object should represents the 32-bit value of the least significant part of the 64-bit value if both mplsTunnelPerfHCPackets is returned.')
mplsTunnelPerfHCPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCPackets.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPerfHCPackets.setDescription('High capacity counter for number of packets forwarded by the tunnel. ')
mplsTunnelPerfErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfErrors.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPerfErrors.setDescription('Number of packets dropped because of errors or for other reasons.')
mplsTunnelPerfBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfBytes.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPerfBytes.setDescription('Number of bytes forwarded by the tunnel. This object should represents the 32-bit value of the least significant part of the 64-bit value if both mplsTunnelPerfHCBytes is returned.')
mplsTunnelPerfHCBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCBytes.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelPerfHCBytes.setDescription('High capacity counter for number of bytes forwarded by the tunnel.')
mplsTunnelCRLDPResTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10), )
if mibBuilder.loadTexts: mplsTunnelCRLDPResTable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResTable.setDescription('The mplsTunnelCRLDPResTable allows a manager to specify which CR-LDP-specific resources are desired for an MPLS tunnel if that tunnel is signaled using CR-LDP. Note that these attributes are in addition to those specified in mplsTunnelResourceTable. This table also allows several tunnels to point to a single entry in this table, implying that these tunnels should share resources.')
mplsTunnelCRLDPResEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelCRLDPResEntry.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResEntry.setDescription('An entry in this table represents a set of resources for an MPLS tunnel established using CRLDP (mplsTunnelSignallingProto equal to crldp (3)). An entry can be created by a network administrator or by an SNMP agent as instructed by any MPLS signalling protocol.')
mplsTunnelCRLDPResMeanBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 1), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResMeanBurstSize.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResMeanBurstSize.setDescription('The mean burst size in bytes.')
mplsTunnelCRLDPResExBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 2), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResExBurstSize.setReference('CR-LDP Specification, Section 4.3.')
if mibBuilder.loadTexts: mplsTunnelCRLDPResExBurstSize.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResExBurstSize.setDescription('The Excess burst size in bytes.')
mplsTunnelCRLDPResFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFrequency.setReference('CR-LDP Specification, Section 4.3.')
if mibBuilder.loadTexts: mplsTunnelCRLDPResFrequency.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResFrequency.setDescription('The granularity of the availability of committed rate.')
mplsTunnelCRLDPResWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResWeight.setReference('CR-LDP Specification, Section 4.3.')
if mibBuilder.loadTexts: mplsTunnelCRLDPResWeight.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResWeight.setDescription('The relative weight for using excess bandwidth above its committed rate. The value of 0 means that weight is not applicable for the CR-LSP.')
mplsTunnelCRLDPResFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFlags.setReference('1. Section 4.3, Constraint-Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002')
if mibBuilder.loadTexts: mplsTunnelCRLDPResFlags.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResFlags.setDescription('The value of the 1 byte Flags conveyed as part of the traffic parameters during the establishment of the CRLSP. The bits in this object are to be interpreted as follows. +--+--+--+--+--+--+--+--+ | Res |F6|F5|F4|F3|F2|F1| +--+--+--+--+--+--+--+--+ Res - These bits are reserved. Zero on transmission. Ignored on receipt. F1 - Corresponds to the PDR. F2 - Corresponds to the PBS. F3 - Corresponds to the CDR. F4 - Corresponds to the CBS. F5 - Corresponds to the EBS. F6 - Corresponds to the Weight. Each flag if is a Negotiable Flag corresponding to a Traffic Parameter. The Negotiable Flag value zero denotes Not Negotiable and value one denotes Negotiable.')
mplsTunnelCRLDPResRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResRowStatus.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelCRLDPResRowStatus and mplsTunnelCRLDPResStorageType.')
mplsTunnelCRLDPResStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResStorageType.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResStorageType.setDescription("The storage type for this CR-LDP Resource entry. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
mplsTunnelNotificationEnable = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTunnelNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelNotificationEnable.setDescription('If this object is true, then it enables the generation of mplsTunnelUp and mplsTunnelDown traps, otherwise these traps are not emitted.')
mplsTunnelUp = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 1)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelUp.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelUp.setDescription('This notification is generated when a mplsTunnelOperStatus object for one of the configured tunnels is about to leave the down state and transition into some other state (but not into the notPresent state). This other state is indicated by the included value of mplsTunnelOperStatus.')
mplsTunnelDown = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 2)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelDown.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelDown.setDescription('This notification is generated when a mplsTunnelOperStatus object for one of the configured tunnels is about to enter the down state from some other state (but not from the notPresent state). This other state is indicated by the included value of mplsTunnelOperStatus.')
mplsTunnelRerouted = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 3)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelRerouted.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelRerouted.setDescription("This notification is generated when a tunnel is rerouted. If the mplsTunnelARHopTable is used, then this tunnel instance's entry in the mplsTunnelARHopTable MAY contain the new path for this tunnel some time after this trap is issued by the agent.")
mplsTunnelReoptimized = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 4)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelReoptimized.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelReoptimized.setDescription("This notification is generated when a tunnel is reoptimized. If the mplsTunnelARHopTable is used, then this tunnel instance's entry in the mplsTunnelARHopTable MAY contain the new path for this tunnel some time after this trap is issued by the agent.")
mplsTeGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1))
mplsTeCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 2))
mplsTeModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 2, 1)).setObjects(("IF-MIB", "ifGeneralInformationGroup"), ("IF-MIB", "ifCounterDiscontinuityGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelScalarGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelManualGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelSignaledGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsNotIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResOptionalGroup"), ("MPLS-TE-STD-MIB", "mplsTeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeModuleFullCompliance = mplsTeModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsTeModuleFullCompliance.setDescription('Compliance statement for agents that provide full support the MPLS-TE-STD-MIB module.')
mplsTeModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 2, 2)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelScalarGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelManualGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelSignaledGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsNotIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResOptionalGroup"), ("MPLS-TE-STD-MIB", "mplsTeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeModuleReadOnlyCompliance = mplsTeModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsTeModuleReadOnlyCompliance.setDescription('Compliance requirement for implementations that only provide read-only support for MPLS-TE-STD-MIB. Such devices can then be monitored but cannot be configured using this MIB modules.')
mplsTunnelGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 1)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelIndexNext"), ("MPLS-TE-STD-MIB", "mplsTunnelName"), ("MPLS-TE-STD-MIB", "mplsTunnelDescr"), ("MPLS-TE-STD-MIB", "mplsTunnelOwner"), ("MPLS-TE-STD-MIB", "mplsTunnelXCPointer"), ("MPLS-TE-STD-MIB", "mplsTunnelIfIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelHopTableIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopTableIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopTableIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelNotificationEnable"), ("MPLS-TE-STD-MIB", "mplsTunnelStorageType"), ("MPLS-TE-STD-MIB", "mplsTunnelConfigured"), ("MPLS-TE-STD-MIB", "mplsTunnelActive"), ("MPLS-TE-STD-MIB", "mplsTunnelPrimaryInstance"), ("MPLS-TE-STD-MIB", "mplsTunnelPrimaryUpTime"), ("MPLS-TE-STD-MIB", "mplsTunnelPathChanges"), ("MPLS-TE-STD-MIB", "mplsTunnelLastPathChange"), ("MPLS-TE-STD-MIB", "mplsTunnelCreationTime"), ("MPLS-TE-STD-MIB", "mplsTunnelStateTransitions"), ("MPLS-TE-STD-MIB", "mplsTunnelIncludeAnyAffinity"), ("MPLS-TE-STD-MIB", "mplsTunnelIncludeAllAffinity"), ("MPLS-TE-STD-MIB", "mplsTunnelExcludeAnyAffinity"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfPackets"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfHCPackets"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfErrors"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfBytes"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfHCBytes"), ("MPLS-TE-STD-MIB", "mplsTunnelResourcePointer"), ("MPLS-TE-STD-MIB", "mplsTunnelInstancePriority"), ("MPLS-TE-STD-MIB", "mplsTunnelPathInUse"), ("MPLS-TE-STD-MIB", "mplsTunnelRole"), ("MPLS-TE-STD-MIB", "mplsTunnelTotalUpTime"), ("MPLS-TE-STD-MIB", "mplsTunnelInstanceUpTime"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceIndexNext"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMaxRate"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMeanRate"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMaxBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMeanBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceExBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceFrequency"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceWeight"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceStorageType"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopAddrType"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopIpAddr"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopAddrUnnum"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopLspId"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopAddrType"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopIpAddr"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopIpPrefixLen"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopAsNumber"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopAddrUnnum"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopLspId"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelGroup = mplsTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelGroup.setDescription('Necessary, but not sufficient, set of objects to implement tunnels. In addition, depending on the type of the tunnels supported (for example, manually configured or signaled, persistent or non- persistent, etc.), the following other groups defined below are mandatory: mplsTunnelManualGroup and/or mplsTunnelSignaledGroup, mplsTunnelIsNotIntfcGroup and/or mplsTunnelIsIntfcGroup.')
mplsTunnelManualGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 2)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelSignallingProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelManualGroup = mplsTunnelManualGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelManualGroup.setDescription('Object(s) needed to implement manually configured tunnels.')
mplsTunnelSignaledGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 3)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelSetupPrio"), ("MPLS-TE-STD-MIB", "mplsTunnelHoldingPrio"), ("MPLS-TE-STD-MIB", "mplsTunnelSignallingProto"), ("MPLS-TE-STD-MIB", "mplsTunnelLocalProtectInUse"), ("MPLS-TE-STD-MIB", "mplsTunnelSessionAttributes"), ("MPLS-TE-STD-MIB", "mplsTunnelHopListIndexNext"), ("MPLS-TE-STD-MIB", "mplsTunnelHopAddrType"), ("MPLS-TE-STD-MIB", "mplsTunnelHopIpAddr"), ("MPLS-TE-STD-MIB", "mplsTunnelHopIpPrefixLen"), ("MPLS-TE-STD-MIB", "mplsTunnelHopAddrUnnum"), ("MPLS-TE-STD-MIB", "mplsTunnelHopAsNumber"), ("MPLS-TE-STD-MIB", "mplsTunnelHopLspId"), ("MPLS-TE-STD-MIB", "mplsTunnelHopType"), ("MPLS-TE-STD-MIB", "mplsTunnelHopInclude"), ("MPLS-TE-STD-MIB", "mplsTunnelHopPathOptionName"), ("MPLS-TE-STD-MIB", "mplsTunnelHopEntryPathComp"), ("MPLS-TE-STD-MIB", "mplsTunnelHopRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelHopStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelSignaledGroup = mplsTunnelSignaledGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelSignaledGroup.setDescription('Objects needed to implement signaled tunnels.')
mplsTunnelScalarGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 4)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelConfigured"), ("MPLS-TE-STD-MIB", "mplsTunnelActive"), ("MPLS-TE-STD-MIB", "mplsTunnelTEDistProto"), ("MPLS-TE-STD-MIB", "mplsTunnelMaxHops"), ("MPLS-TE-STD-MIB", "mplsTunnelNotificationMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelScalarGroup = mplsTunnelScalarGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelScalarGroup.setDescription('Scalar object needed to implement MPLS tunnels.')
mplsTunnelIsIntfcGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 5)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsIntfcGroup = mplsTunnelIsIntfcGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIsIntfcGroup.setDescription('Objects needed to implement tunnels that are interfaces.')
mplsTunnelIsNotIntfcGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 6)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsNotIntfcGroup = mplsTunnelIsNotIntfcGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelIsNotIntfcGroup.setDescription('Objects needed to implement tunnels that are not interfaces.')
mplsTunnelCRLDPResOptionalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 7)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResMeanBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResExBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResFrequency"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResWeight"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResFlags"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelCRLDPResOptionalGroup = mplsTunnelCRLDPResOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTunnelCRLDPResOptionalGroup.setDescription('Set of objects implemented for resources applicable for tunnels signaled using CR-LDP.')
mplsTeNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 8)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelUp"), ("MPLS-TE-STD-MIB", "mplsTunnelDown"), ("MPLS-TE-STD-MIB", "mplsTunnelRerouted"), ("MPLS-TE-STD-MIB", "mplsTunnelReoptimized"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeNotificationGroup = mplsTeNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: mplsTeNotificationGroup.setDescription('Set of notifications implemented in this module. None is mandatory.')
mibBuilder.exportSymbols("MPLS-TE-STD-MIB", mplsTunnelCHopAddrUnnum=mplsTunnelCHopAddrUnnum, mplsTunnelMaxHops=mplsTunnelMaxHops, mplsTunnelHopIndex=mplsTunnelHopIndex, mplsTunnelIncludeAnyAffinity=mplsTunnelIncludeAnyAffinity, mplsTunnelHopEntryPathComp=mplsTunnelHopEntryPathComp, mplsTunnelRole=mplsTunnelRole, mplsTunnelHopEntry=mplsTunnelHopEntry, mplsTunnelARHopTableIndex=mplsTunnelARHopTableIndex, mplsTeNotificationGroup=mplsTeNotificationGroup, mplsTunnelNotificationMaxRate=mplsTunnelNotificationMaxRate, mplsTunnelCHopIpAddr=mplsTunnelCHopIpAddr, mplsTunnelGroup=mplsTunnelGroup, mplsTunnelIndexNext=mplsTunnelIndexNext, mplsTunnelIfIndex=mplsTunnelIfIndex, mplsTunnelARHopIpAddr=mplsTunnelARHopIpAddr, mplsTunnelCHopTableIndex=mplsTunnelCHopTableIndex, mplsTunnelARHopAddrUnnum=mplsTunnelARHopAddrUnnum, mplsTeModuleReadOnlyCompliance=mplsTeModuleReadOnlyCompliance, mplsTeStdMIB=mplsTeStdMIB, mplsTunnelIndex=mplsTunnelIndex, mplsTunnelCRLDPResTable=mplsTunnelCRLDPResTable, mplsTeModuleFullCompliance=mplsTeModuleFullCompliance, mplsTunnelHopPathOptionName=mplsTunnelHopPathOptionName, mplsTunnelIsIf=mplsTunnelIsIf, mplsTunnelDescr=mplsTunnelDescr, mplsTeObjects=mplsTeObjects, mplsTunnelSignallingProto=mplsTunnelSignallingProto, mplsTunnelConfigured=mplsTunnelConfigured, mplsTunnelCreationTime=mplsTunnelCreationTime, mplsTunnelPathInUse=mplsTunnelPathInUse, mplsTunnelEgressLSRId=mplsTunnelEgressLSRId, mplsTunnelOperStatus=mplsTunnelOperStatus, mplsTunnelResourceWeight=mplsTunnelResourceWeight, mplsTunnelResourceStorageType=mplsTunnelResourceStorageType, mplsTunnelARHopLspId=mplsTunnelARHopLspId, mplsTunnelNotificationEnable=mplsTunnelNotificationEnable, mplsTunnelHopListIndexNext=mplsTunnelHopListIndexNext, mplsTeGroups=mplsTeGroups, mplsTunnelAdminStatus=mplsTunnelAdminStatus, mplsTunnelManualGroup=mplsTunnelManualGroup, mplsTeScalars=mplsTeScalars, mplsTunnelResourceTable=mplsTunnelResourceTable, mplsTunnelCHopEntry=mplsTunnelCHopEntry, mplsTunnelPerfTable=mplsTunnelPerfTable, mplsTunnelInstancePriority=mplsTunnelInstancePriority, mplsTunnelIsIntfcGroup=mplsTunnelIsIntfcGroup, mplsTunnelARHopIndex=mplsTunnelARHopIndex, mplsTunnelTEDistProto=mplsTunnelTEDistProto, mplsTunnelCRLDPResStorageType=mplsTunnelCRLDPResStorageType, mplsTunnelRowStatus=mplsTunnelRowStatus, mplsTunnelResourceIndexNext=mplsTunnelResourceIndexNext, mplsTunnelResourcePointer=mplsTunnelResourcePointer, mplsTunnelCRLDPResOptionalGroup=mplsTunnelCRLDPResOptionalGroup, mplsTunnelHopRowStatus=mplsTunnelHopRowStatus, mplsTunnelARHopAddrType=mplsTunnelARHopAddrType, mplsTunnelTable=mplsTunnelTable, mplsTunnelHopStorageType=mplsTunnelHopStorageType, mplsTunnelXCPointer=mplsTunnelXCPointer, mplsTunnelResourceExBurstSize=mplsTunnelResourceExBurstSize, mplsTunnelResourceFrequency=mplsTunnelResourceFrequency, PYSNMP_MODULE_ID=mplsTeStdMIB, mplsTunnelStateTransitions=mplsTunnelStateTransitions, mplsTunnelPrimaryInstance=mplsTunnelPrimaryInstance, mplsTunnelActive=mplsTunnelActive, mplsTunnelResourceMeanRate=mplsTunnelResourceMeanRate, mplsTunnelCHopTable=mplsTunnelCHopTable, mplsTunnelExcludeAnyAffinity=mplsTunnelExcludeAnyAffinity, mplsTunnelHopAsNumber=mplsTunnelHopAsNumber, mplsTunnelResourceMaxBurstSize=mplsTunnelResourceMaxBurstSize, mplsTunnelARHopTable=mplsTunnelARHopTable, mplsTunnelPerfEntry=mplsTunnelPerfEntry, mplsTunnelHopTableIndex=mplsTunnelHopTableIndex, mplsTunnelStorageType=mplsTunnelStorageType, mplsTunnelCHopType=mplsTunnelCHopType, mplsTunnelCHopListIndex=mplsTunnelCHopListIndex, mplsTunnelHopType=mplsTunnelHopType, mplsTunnelCRLDPResEntry=mplsTunnelCRLDPResEntry, mplsTunnelLastPathChange=mplsTunnelLastPathChange, mplsTunnelIsNotIntfcGroup=mplsTunnelIsNotIntfcGroup, mplsTunnelHopListIndex=mplsTunnelHopListIndex, mplsTunnelCRLDPResExBurstSize=mplsTunnelCRLDPResExBurstSize, mplsTunnelResourceIndex=mplsTunnelResourceIndex, mplsTunnelResourceRowStatus=mplsTunnelResourceRowStatus, mplsTunnelPerfErrors=mplsTunnelPerfErrors, mplsTunnelHopLspId=mplsTunnelHopLspId, mplsTunnelResourceMaxRate=mplsTunnelResourceMaxRate, mplsTunnelName=mplsTunnelName, mplsTunnelHopIpAddr=mplsTunnelHopIpAddr, mplsTunnelHopAddrUnnum=mplsTunnelHopAddrUnnum, mplsTunnelSignaledGroup=mplsTunnelSignaledGroup, mplsTunnelARHopListIndex=mplsTunnelARHopListIndex, mplsTunnelInstanceUpTime=mplsTunnelInstanceUpTime, mplsTunnelCRLDPResFlags=mplsTunnelCRLDPResFlags, mplsTunnelPerfHCBytes=mplsTunnelPerfHCBytes, mplsTunnelDown=mplsTunnelDown, mplsTunnelUp=mplsTunnelUp, mplsTunnelIncludeAllAffinity=mplsTunnelIncludeAllAffinity, mplsTeConformance=mplsTeConformance, mplsTunnelIngressLSRId=mplsTunnelIngressLSRId, mplsTunnelCRLDPResFrequency=mplsTunnelCRLDPResFrequency, mplsTunnelHoldingPrio=mplsTunnelHoldingPrio, mplsTunnelRerouted=mplsTunnelRerouted, mplsTunnelARHopEntry=mplsTunnelARHopEntry, mplsTunnelCHopIpPrefixLen=mplsTunnelCHopIpPrefixLen, mplsTunnelLocalProtectInUse=mplsTunnelLocalProtectInUse, mplsTunnelCRLDPResRowStatus=mplsTunnelCRLDPResRowStatus, mplsTunnelScalarGroup=mplsTunnelScalarGroup, mplsTunnelSetupPrio=mplsTunnelSetupPrio, mplsTunnelResourceMeanBurstSize=mplsTunnelResourceMeanBurstSize, mplsTunnelCHopIndex=mplsTunnelCHopIndex, mplsTunnelTotalUpTime=mplsTunnelTotalUpTime, mplsTunnelReoptimized=mplsTunnelReoptimized, mplsTunnelHopIpPrefixLen=mplsTunnelHopIpPrefixLen, mplsTunnelCHopAddrType=mplsTunnelCHopAddrType, mplsTunnelCHopLspId=mplsTunnelCHopLspId, mplsTunnelSessionAttributes=mplsTunnelSessionAttributes, mplsTunnelPerfBytes=mplsTunnelPerfBytes, mplsTeCompliances=mplsTeCompliances, mplsTunnelPrimaryUpTime=mplsTunnelPrimaryUpTime, mplsTunnelHopPathOptionIndex=mplsTunnelHopPathOptionIndex, mplsTunnelCRLDPResWeight=mplsTunnelCRLDPResWeight, mplsTeNotifications=mplsTeNotifications, mplsTunnelResourceEntry=mplsTunnelResourceEntry, mplsTunnelPathChanges=mplsTunnelPathChanges, mplsTunnelEntry=mplsTunnelEntry, mplsTunnelPerfPackets=mplsTunnelPerfPackets, mplsTunnelPerfHCPackets=mplsTunnelPerfHCPackets, mplsTunnelCHopAsNumber=mplsTunnelCHopAsNumber, mplsTunnelHopInclude=mplsTunnelHopInclude, mplsTunnelOwner=mplsTunnelOwner, mplsTunnelCRLDPResMeanBurstSize=mplsTunnelCRLDPResMeanBurstSize, mplsTunnelHopTable=mplsTunnelHopTable, mplsTunnelInstance=mplsTunnelInstance, mplsTunnelHopAddrType=mplsTunnelHopAddrType)
