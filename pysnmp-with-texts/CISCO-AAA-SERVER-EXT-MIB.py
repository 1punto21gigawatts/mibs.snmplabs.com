#
# PySNMP MIB module CISCO-AAA-SERVER-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-AAA-SERVER-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
casConfigEntry, CiscoAAAProtocol = mibBuilder.importSymbols("CISCO-AAA-SERVER-MIB", "casConfigEntry", "CiscoAAAProtocol")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, TimeIntervalMin = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec", "TimeIntervalMin")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, iso, NotificationType, IpAddress, TimeTicks, Gauge32, Counter32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "NotificationType", "IpAddress", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Counter64", "Integer32")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
ciscoAAAServerExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 367))
ciscoAAAServerExtMIB.setRevisions(('2005-05-23 00:00', '2005-05-09 00:00', '2003-11-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAAAServerExtMIB.setRevisionsDescriptions((' - Added notConfigured(3) enumeration to CiscoAAAServerKeyEncrType TC. - Added cAAALoginAuthTypeMSCHAP under cAAASvrExtGenericConfig. - Added cAAAServerProtoDirectedReq in cAAASvrExtProtocolParamTable. - Added cAAASvrGrpConfigDeadTime in cAAASvrExtSvrGrpConfigTable. - Added following objects in cAAASvrExtConfigTable. cAAAServerRootDN cAAAServerIdleTime cAAAServerTestUser cAAAServerTestPassword - Added cAAASvrExtSvrGrpLDAPConfigTable.', 'Added cAAASvrExtClearAccLog.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoAAAServerExtMIB.setLastUpdated('200505230000Z')
if mibBuilder.loadTexts: ciscoAAAServerExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAAAServerExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-aaa@cisco.com')
if mibBuilder.loadTexts: ciscoAAAServerExtMIB.setDescription("This MIB is an extension to the CISCO-AAA-SERVER-MIB. This MIB module enhances the 'casConfigTable' to include other types of Server addresses. This also provides management of : - Generic configurations as applied on the AAA module. - Global configuration settings, i.e., settings for all the AAA Servers instrumented in one instance of this MIB. - Server Group configuration - Application-to-AAA Function-to-Server Group mapping configuration.")
ciscoAAASvrExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 1))
ciscoAAASvrExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 2))
cAAASvrExtGenericConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 1))
cAAASvrExtSvrTableConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2))
cAAASvrExtProtoParamConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3))
cAAASvrExtSvrGrpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4))
cAAASvrExtAppSvrGrpMapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5))
class CiscoAAAServerKeyEncrType(TextualConvention, Integer32):
    description = 'Encryption type used for the AAA Server auth key. plain(1) - Key is in Plain Text. encrypted(2) - Key is Encrypted. notConfigured(3) - Key is not configured. .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("plain", 1), ("encrypted", 2), ("notConfigured", 3))

cAAASvrExtLocalAccLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAASvrExtLocalAccLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtLocalAccLogMaxSize.setDescription('The maximum size of the accounting log file in bytes. The log file is stored on local persistent storage at the device. If the size is set to a smaller value than the existing one, then smaller log will be available for view by the user.')
cAAASvrExtSvrGrpSvrListMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAAASvrExtSvrGrpSvrListMaxEnt.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrGrpSvrListMaxEnt.setDescription("The maximum number of AAA Server entries that the agent supports within a Server Group. This puts the restriction of number of AAA Servers in the 'cAAAServerList' of 'cAAASvrExtSvrGrpConfigTable'.")
cAAASvrExtAppToSvrGrpMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAAASvrExtAppToSvrGrpMaxEnt.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtAppToSvrGrpMaxEnt.setDescription("The maximum number of Server Groups entries that the agent supports for application type on per AAA operation basis excluding the 'Local' and 'Trivial' modes. This puts the restriction of number of Server Groups in the 'cAAASvrGrpList' of 'cAAASvrExtSerSvrGrpConfigTable'.")
cAAASvrExtClearAccLog = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("noOp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAASvrExtClearAccLog.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtClearAccLog.setDescription("This object clears the accounting log, when set to 'clear'. No action is taken if this object is set to 'noOp'. When read, the value 'noOp' is returned.")
cAAALoginAuthTypeMSCHAP = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAALoginAuthTypeMSCHAP.setStatus('current')
if mibBuilder.loadTexts: cAAALoginAuthTypeMSCHAP.setDescription("This indicates whether the MSCHAP authentication mechanism should be used for authenticating the user through remote AAA Server during login. The value 'true(1)' indicates MSCHAP authentication should be used. The value 'false(2)' indicates that the default authentication mechanism should be used. The value of this object is used for authentication during user's login only.")
cAAASvrExtConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1), )
if mibBuilder.loadTexts: cAAASvrExtConfigTable.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtConfigTable.setDescription("This table extends the 'casConfigTable' from CISCO-AAA-SERVER-MIB to provide configuration flexibility. An entry cannot be created until at least one of the following objects/object-set are instantiated : - cAAAServerAddrType and cAAAServerAddr set Or - casAddress of casConfigTable If both 'casAddress' and 'cAAAServerAddr'(along with 'cAAAServerAddrType') are set during the row creation, the values need to be consistent. Else it results in an error.")
cAAASvrExtConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1), )
casConfigEntry.registerAugmentions(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtConfigEntry"))
cAAASvrExtConfigEntry.setIndexNames(*casConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cAAASvrExtConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtConfigEntry.setDescription('An entry (conceptual row) in cAAASvrExtConfigTable.')
cAAAServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 1), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cAAAServerAddrType.setDescription("The type of address of the AAA Server as specified by object 'cAAAServerAddr'. If the user sets 'casAddress' column of the 'casConfigTable', then 'cAAAServerAddrType' is appropriately filled by the agent. If the user specifies a value other than 'ipv4', then the 'casAddress' is set to zero-length string.")
cAAAServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerAddr.setStatus('current')
if mibBuilder.loadTexts: cAAAServerAddr.setDescription("The address of the AAA Server. If the users sets 'casAddress' column of the 'casConfigTable', then 'cAAAServerAddr' is appropriately filled by the agent.")
cAAAServerKeyEncrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 3), CiscoAAAServerKeyEncrType().clone('plain')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerKeyEncrType.setStatus('current')
if mibBuilder.loadTexts: cAAAServerKeyEncrType.setDescription("The encryption type of the corresponding instance of the server key 'casKey' in the augmented row of the 'casConfigTable'.")
cAAAServerDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 4), TimeIntervalMin().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerDeadTime.setStatus('current')
if mibBuilder.loadTexts: cAAAServerDeadTime.setDescription("This indicates the length of time in minutes that the system will mark the server dead when a AAA server does not respond to an authentication request. During the interval of the dead time, any authentication request that comes up would not be sent to that AAA server that was marked as dead. This value overrides value set in the 'cAAAServerProtoDeadTime' of the 'cAAASvrExtProtocolParamTable' for this server. If this value is zero, then the value set in the 'cAAAServerProtoDeadTime' is used.")
cAAAServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 5), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerTimeOut.setStatus('current')
if mibBuilder.loadTexts: cAAAServerTimeOut.setDescription("The time in seconds between retransmissions to the AAA server.This value overrides value set in the 'cAAAServerProtoTimeOut' of the 'cAAASvrExtProtocolParamTable' for this server. If this value is zero, then the value set in the 'cAAAServerProtoTimeOut' is used.")
cAAAServerRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('retransmits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerRetransmits.setStatus('current')
if mibBuilder.loadTexts: cAAAServerRetransmits.setDescription("The additional number of times the AAA server should be tried by the AAA client before giving up on the server. This value overrides value set in the 'cAAAServerProtoTimeOut' of the 'cAAASvrExtProtocolParamTable' for this server. If this value is zero, then the value set in the 'cAAAServerProtoRetransmits' is used.")
cAAAServerRootDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerRootDN.setStatus('current')
if mibBuilder.loadTexts: cAAAServerRootDN.setDescription('This object specifies the root Distinguished Name to be used in authenticating the access to LDAP server database.')
cAAAServerIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 8), TimeIntervalMin().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerIdleTime.setStatus('current')
if mibBuilder.loadTexts: cAAAServerIdleTime.setDescription('This indicates the time interval in minutes, at which the system will periodically test the AAA Server by sending test packets to the server. The default value of 0 means that the AAA server will not be tested periodically.')
cAAAServerTestUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerTestUser.setStatus('current')
if mibBuilder.loadTexts: cAAAServerTestUser.setDescription('The username to be used in the test packets sent to AAA Server to test if the Server responds to the requests or not.')
cAAAServerTestPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 2, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerTestPassword.setStatus('current')
if mibBuilder.loadTexts: cAAAServerTestPassword.setDescription('The password to be used in test packets sent to AAA Server to test if the Server responds to the requests or not. A zero-length string is always returned when this object is read.')
cAAASvrExtProtocolParamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1), )
if mibBuilder.loadTexts: cAAASvrExtProtocolParamTable.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtProtocolParamTable.setDescription('This table contains the per-protocol parameters for use by all AAA Servers instrumented in one instance of this MIB.')
cAAASvrExtProtocolParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtocol"))
if mibBuilder.loadTexts: cAAASvrExtProtocolParamEntry.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtProtocolParamEntry.setDescription("An entry (conceptual row) in 'cAAASvrExtProtocolParamTable'. Each row of the table indicates the protocol parameters setting for a particular AAA protocol. New entries can not be created. The existing rows can only be modified.")
cAAAServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 1), CiscoAAAProtocol())
if mibBuilder.loadTexts: cAAAServerProtocol.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtocol.setDescription('The AAA Protocol for which these settings are being applied.')
cAAAServerProtoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAAServerProtoAuthKey.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtoAuthKey.setDescription("The key used in encrypting the packets passed between the AAA server and the client.This key must match the one configured on the server. This Object is similar to the 'caskey'. If the 'caskey' of the 'casConfigTable' is administratively set to zero length string, then this key used. Retrieving the value of this object via SNMP will always return an empty string for security reasons.")
cAAAServerProtoKeyEncrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 3), CiscoAAAServerKeyEncrType().clone('plain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAAServerProtoKeyEncrType.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtoKeyEncrType.setDescription("The encryption type of the server key 'cAAAServerProtoAuthKey'.")
cAAAServerProtoDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 4), TimeIntervalMin().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAAServerProtoDeadTime.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtoDeadTime.setDescription("The DeadTime setting for AAA Servers. If 'cAAAServerDeadTime' of 'cAAASvrExtConfigTable' is zero, this value is used. This indicates the length of time in minutes that the system will mark the server dead when a AAA server does not respond to an authentication request. During the interval of the dead time, any authentication request that comes up would not be sent to that AAA server that was marked as dead. The default value of 0 means that the AAA servers will not be marked dead if they do not respond.")
cAAAServerProtoTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 5), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAAServerProtoTimeOut.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtoTimeOut.setDescription("The time in seconds between retransmissions to the AAA server. If 'cAAAServerTimeOut' of 'cAAASvrExtConfigTable' is zero , this value is used.")
cAAAServerProtoRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setUnits('retransmits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAAServerProtoRetransmits.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtoRetransmits.setDescription("The additional number of times the AAA server should be tried by the AAA client before giving up on the server. If 'cAAAServerRetransmits' of 'cAAASvrExtConfigTable' is zero, this value is used.")
cAAAServerProtoSvrTableMaxEnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAAAServerProtoSvrTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtoSvrTableMaxEnt.setDescription("Each instance of this object specifies the maximum number of AAA server entries in the 'casConfigTable', for a particular protocol.")
cAAAServerProtoDirectedReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 3, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAAServerProtoDirectedReq.setStatus('current')
if mibBuilder.loadTexts: cAAAServerProtoDirectedReq.setDescription("This object is to specify whether a user could choose a AAA server for authentication during login. The value 'true(1)' indicates that a user can specify the remote AAA server for authentication during login. If the user specifies the login name as 'username@hostname', then the authentication request will be sent to remote AAA server 'hostname' with username as 'username'. An entry should exist in cAAASvrExtConfigTable with 'cAAAServerAddr' value 'hostname'. The configuration in cAAASvrExtAppSvrGrpConfigTable is not used, if the specified remote AAA server fails to respond. The value 'false(2)' indicates user cannot specify the remote AAA server for authentication during login. If user specifies the login name as 'username@hostname', then the complete string will be treated as username and the user will be authenticated as per configuration in cAAASvrExtAppSvrGrpConfigTable.")
cAAASvrExtSvrGrpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1), )
if mibBuilder.loadTexts: cAAASvrExtSvrGrpConfigTable.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrGrpConfigTable.setDescription('A table consisting of entries for Server Groups. A server group consists of a number of AAA servers implementing the same AAA protocol. Multiple server groups (usually one group for TACACS+ and one group for RADIUS) can be used for the same service for authentication, authorization and accounting purpose. An entry cannot be created until following objects are instantiated - cAAASvrGrpName - cAAASvrGrpProtocol - cAAAServerList with at least one member Note that an implementation may support any number of permanent rows which cannot be deleted. These permanent groups are system defined groups and not created by the user.')
cAAASvrExtSvrGrpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpIndex"))
if mibBuilder.loadTexts: cAAASvrExtSvrGrpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrGrpConfigEntry.setDescription('An entry (conceptual row) in the cAAASvrExtSvrGrpConfigTable. ')
cAAASvrGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cAAASvrGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpIndex.setDescription('The index for each of the Server Group entries.')
cAAASvrGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAASvrGrpName.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpName.setDescription("The name of the Server Group. The 'cAAASvrGrpName' has to be specified by the user during the creation of this row entry. The cAAASvrGrpName can not be modified when cAAASvrGrpConfigRowStatus is 'active'.")
cAAASvrGrpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1, 1, 3), CiscoAAAProtocol().clone('tacacsplus')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAASvrGrpProtocol.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpProtocol.setDescription("The AAA Protocol to which this Server Group belongs to. The cAAASvrGrpProtocol can not be modified when cAAASvrGrpConfigRowStatus is 'active'.")
cAAAServerList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAAServerList.setStatus('current')
if mibBuilder.loadTexts: cAAAServerList.setDescription("This represents ordered list of AAA Servers which form this Server Group. This object contains list of the AAA Servers as defined in the 'casConfigTable'. The value of this object is a concatenation of one or more 4-octet strings, where each 4-octet string represents a 32-bit 'casIndex' value of 'casConfigTable' in network byte order. This Index along with the 'cAAASvrGrpProtocol' that is set in the same row form the composite index in the 'casConfigTable'. The order in which servers occur within the value of this object determines the Server priority in that group. The first one will be 'Primary' and the rest are 'secondary' ( others). At least one index has to be provided when creating this row. A Server Group can not exist without any members. The maximum AAA Servers that can be specified is limited by 'cAAASvrExtSvrGrpSvrListMaxEnt' value.")
cAAASvrGrpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAASvrGrpConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpConfigRowStatus.setDescription("The status of this conceptual row.This object can not be set to 'active' unless the corresponding value of 'cAAASvrGrpName' is unique. Once value of this object is set to 'active', the associated entry can not be modified except destroyed by setting this object to destroy(6).")
cAAASvrGrpConfigDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 1, 1, 6), TimeIntervalMin().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAASvrGrpConfigDeadTime.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpConfigDeadTime.setDescription('The DeadTime setting for AAA Server Group. This indicates the length of time in minutes that the system will mark the server dead when a AAA server does not respond to an authentication request. During the interval of the dead time, any authentication request that comes up would not be sent to that AAA server that was marked as dead. The default value of 0 means that the AAA servers will not be marked dead if they do not respond.')
cAAASvrExtSvrGrpLDAPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 2), )
if mibBuilder.loadTexts: cAAASvrExtSvrGrpLDAPConfigTable.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrGrpLDAPConfigTable.setDescription("This table is extension to cAAASvrExtSvrGrpConfigTable. An entry will be created in this table by the agent whenever an entry is created in cAAASvrExtSvrGrpConfigTable with cAAASvrGrpProtocol set to 'ldap'. An entry will get destroyed by the agent whenever corresponding entry in cAAASvrExtSvrGrpConfigTable identified by cAAASvrGrpIndex is destroyed. The SNMP Manager can not create or destroy entries in this table. The SNMP Manager can modify columnar objects in this table.")
cAAASvrExtSvrGrpLDAPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpIndex"))
if mibBuilder.loadTexts: cAAASvrExtSvrGrpLDAPConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrGrpLDAPConfigEntry.setDescription("An entry in the table. Each entry corresponds to LDAP server group identified by a corresponding entry in cAAASvrExtSvrGrpConfigTable with cAAASvrGrpProtocol value of 'ldap'. Each entry contains information on LDAP Base Distinguished Name, Filter and user profile.")
cAAASvrGrpLDAPBaseDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAASvrGrpLDAPBaseDN.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpLDAPBaseDN.setDescription('This object specifies the base entry in the LDAP hierarchy where the LDAP server should begin searching when it receives an authorization request.')
cAAASvrGrpLDAPFilterUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAASvrGrpLDAPFilterUser.setReference('RFC2254 - Section 3. LDAP Search Filter Definition.')
if mibBuilder.loadTexts: cAAASvrGrpLDAPFilterUser.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpLDAPFilterUser.setDescription('This object specifies the filter to be used to search user entry in LDAP server database.')
cAAASvrGrpLDAPUserProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 4, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAAASvrGrpLDAPUserProfile.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpLDAPUserProfile.setDescription('This object specifies the attribute type for user profile private attribute. This attribute is requested in search request to the LDAP server.')
cAAASvrExtAppSvrGrpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1), )
if mibBuilder.loadTexts: cAAASvrExtAppSvrGrpConfigTable.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtAppSvrGrpConfigTable.setDescription("A table associating the AAA server groups for specific AAA function for a given Application and Application Sub-Type. If the device encounters ERRORs from server(s) in first group of 'cAAASvrGrpList',it will try servers in next server group. The order in which Server Groups occur within the value of 'cAAASvrGrpList' decides the order of trial for AAA function. Similarly, within a server group, each server in the group will be tried one by one until one of them responds with either SUCCESS or FAIL. In case all the Server Groups return ERROR, 'Local' mechanism ('cAAASvrGrpLocal') followed by 'Trivial' mechanism ('cAAASvrGrpTrivial') are tried, if so configured.")
cAAASvrExtAppSvrGrpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-AAA-SERVER-EXT-MIB", "cAAAApplicationType"), (0, "CISCO-AAA-SERVER-EXT-MIB", "cAAAApplicationSubType"), (0, "CISCO-AAA-SERVER-EXT-MIB", "cAAAFunction"))
if mibBuilder.loadTexts: cAAASvrExtAppSvrGrpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtAppSvrGrpConfigEntry.setDescription('An entry (conceptual row) in the cAAASvrExtSerSvrGrpConfigTable. New entries can not be created. The existing rows only can be modified.')
cAAAApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("login", 2), ("dhchap", 3), ("iSCSI", 4))))
if mibBuilder.loadTexts: cAAAApplicationType.setReference(' - Fibre Channel Security Protocols (FC-SP) REV. 1.0, T11 FC-SP Working Document T11/03-149v0.pdf - Challenge Handshake Authentication Protocol (CHAP) RFC 1994 - iSCSI Internet Draft .')
if mibBuilder.loadTexts: cAAAApplicationType.setStatus('current')
if mibBuilder.loadTexts: cAAAApplicationType.setDescription("The Application type for which this AAA configuration is applied. Each of these applications uses AAA services on the device. 'login' application includes console, telnet and SSH based login using the username and password. DHCHAP (Diffie Hellman Challenge Handshake Authentication Protocol) is a FC-SP compliant authentication protocol that can be used for switch-to-switch, host-to-switch and host-to-host authentication. DHCHAP is of the applications for AAA. DH-CHAP is basically combination of bi-directional CHAP authentication ([4]) with Diffie-Hellman exchange. iSCSI (Small Computer Systems Interface over IP) is an SCSI transport protocol for mapping of block-oriented storage data over TCP/IP networks. The 'default' application type indicates the default configurations which can be used by all the applications, unless overridden by specific application types.")
cAAAApplicationSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("console", 2))))
if mibBuilder.loadTexts: cAAAApplicationSubType.setStatus('current')
if mibBuilder.loadTexts: cAAAApplicationSubType.setDescription("The Application Sub-Type. This is very specific to the application attached and indicates the sub-application. For 'login' application: - If the 'cAAAApplicationSubType' is 'all', the configuration appearing in the corresponding row is used by all the 'login' applications. - If the 'cAAAApplicationSubType' is 'console', console login uses this configuration instead of the 'all'. For the 'dhchap' application, the only allowed 'cAAAApplicationSubType' is 'all'. This means, the configuration appearing in the corresponding row is used by all the 'dhchap' applications. For the 'iSCSI' application, the only allowed 'cAAAApplicationSubType' is 'all'. This means, the configuration appearing in the corresponding row is used by all the iSCSI applications. For the 'default' application, - the allowed 'cAAAApplicationSubType' values are 'all' and 'console', when 'cAAAFunction' is 'authorization' - the allowed 'cAAAApplicationSubType' value is 'all', when 'cAAAFunction' is 'accounting' .")
cAAAFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authentication", 1), ("authorization", 2), ("accounting", 3))))
if mibBuilder.loadTexts: cAAAFunction.setStatus('current')
if mibBuilder.loadTexts: cAAAFunction.setDescription('The AAA function to which this application configuration row corresponds to.')
cAAASvrGrpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAASvrGrpLocal.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpLocal.setDescription("The value 'true(1)' indicates 'Local' AAA is allowed. The value 'false(2)' indicates 'Local' AAA is not allowed. 'Local' AAA is used only after trying all the Server Groups in the 'cAAASvrGrpList'. The 'Local' AAA means all the AAA functions are performed using the local AAA Service provided in the Device. The value of this object can not be set to 'false' in the following conditions : - 'cAAAApplicationType' is 'default' and 'cAAAFuction' is 'authentication' or 'accounting' and - value of corresponding instance of 'cAAASvrGrpTrivial' is 'false' and no server groups configured in the value of the corresponding instance of 'cAAASvrGrpList' The value of this object can not be set to 'true' if the 'cAAAFuction' value is 'authorization'.")
cAAASvrGrpTrivial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAASvrGrpTrivial.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpTrivial.setDescription("The value 'true(1)' indicates 'Trivial' AAA is allowed. The value 'false(2)' indicates 'Trivial' AAA is not allowed. 'Trivial' AAA is used only after trying all the Server Groups in the 'cAAASvrGrpList' and 'Local' AAA (if configured). Trivial AAA corresponds to one of the following based on the value of corresponding instance of 'AAAFunction': - User name based authentication, if 'cAAAFunction' value is 'authentication' - No Authorization check, if 'cAAAFunction' value is 'authorization' - No accounting, if 'cAAAFunction' value is 'accounting' The value of this object can not be set to 'false' in the following conditions : - 'cAAAApplicationSubType' is 'all' and 'cAAAFuction' is 'authorization' and - value of corresponding instance of 'cAAASvrGrpLocal' is 'false' and no server groups configured in the value of the corresponding instance of 'cAAASvrGrpList' The value of this object can not be set to 'true' in the following conditions : - when 'cAAAApplicationType' is 'iSCSI' , 'cAAAApplicationSubType' is 'all' and 'cAAAFuction' is 'authentication' - when 'cAAAApplicationType' is 'dhchap' , 'cAAAApplicationSubType' is 'all' and 'cAAAFuction' is 'authentication' .")
cAAASvrGrpList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 367, 1, 5, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAAASvrGrpList.setStatus('current')
if mibBuilder.loadTexts: cAAASvrGrpList.setDescription("This represents ordered list of AAA Server Groups that are configured for this application to perform AAA functions. This object contains list of the AAA Server Groups as defined in the 'cAAASvrExtSvrGrpConfigTable'. The value of this object is a concatenation of zero or more 4-octet strings, where each 4-octet string represents a 32-bit 'cAAASvrGrpIndex' value of server group ('cAAASvrExtSvrGrpConfigTable') in network byte order. The order in which Server Groups occur within the value of this object determines the Server Group priority in the list. The maximum number of Server Groups that can be specified in this row is limited by 'cAAASvrExtAppToSvrGrpMaxEnt' value.")
ciscoAAASvrExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 1))
ciscoAAASvrExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2))
ciscoAAAServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 1, 1)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtGenericConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrTableConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtProtoParamConfigGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrGroupConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtAppSvrGroupConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAAAServerMIBCompliance = ciscoAAAServerMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoAAAServerMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-AAA-SERVER-EXT-MIB.')
ciscoAAAServerMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 1, 2)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtGenericConfGroup1"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrTableConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtProtoParamConfigGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrGroupConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtAppSvrGroupConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAAAServerMIBCompliance1 = ciscoAAAServerMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoAAAServerMIBCompliance1.setDescription('The compliance statement for entities which implement the CISCO-AAA-SERVER-EXT-MIB.')
ciscoAAAServerMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 1, 3)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtGenericConfGroup1"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrTableConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtProtoParamConfigGroup1"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrGroupConfGroup2"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtAppSvrGroupConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrTableLDAPConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrGroupLDAPConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrMonitorConfGroup"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtGenericConfGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAAAServerMIBCompliance2 = ciscoAAAServerMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: ciscoAAAServerMIBCompliance2.setDescription('The compliance statement for entities which implement the CISCO-AAA-SERVER-EXT-MIB.')
cAAASvrExtGenericConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 1)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtLocalAccLogMaxSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtGenericConfGroup = cAAASvrExtGenericConfGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cAAASvrExtGenericConfGroup.setDescription('A collection of objects Generic configuration.')
cAAASvrExtSvrTableConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 2)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerAddrType"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerAddr"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerKeyEncrType"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerDeadTime"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerTimeOut"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerRetransmits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtSvrTableConfGroup = cAAASvrExtSvrTableConfGroup.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrTableConfGroup.setDescription('A collection of objects for AAA Server configuration.')
cAAASvrExtProtoParamConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 3)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoAuthKey"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoKeyEncrType"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoDeadTime"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoTimeOut"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoRetransmits"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoSvrTableMaxEnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtProtoParamConfigGroup = cAAASvrExtProtoParamConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cAAASvrExtProtoParamConfigGroup.setDescription('A collection of objects for AAA per-protocol parameter configuration.')
cAAASvrExtSvrGroupConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 4)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpName"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpProtocol"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerList"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpConfigRowStatus"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrGrpSvrListMaxEnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtSvrGroupConfGroup = cAAASvrExtSvrGroupConfGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cAAASvrExtSvrGroupConfGroup.setDescription('A collection of objects for AAA Server Group configuration.')
cAAASvrExtAppSvrGroupConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 5)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpLocal"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpTrivial"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpList"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtAppToSvrGrpMaxEnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtAppSvrGroupConfGroup = cAAASvrExtAppSvrGroupConfGroup.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtAppSvrGroupConfGroup.setDescription('A collection of objects for Application-to-Server Group mapping configuration.')
cAAASvrExtGenericConfGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 6)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtLocalAccLogMaxSize"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtClearAccLog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtGenericConfGroup1 = cAAASvrExtGenericConfGroup1.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtGenericConfGroup1.setDescription('A collection of objects Generic configuration.')
cAAASvrExtGenericConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 7)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAALoginAuthTypeMSCHAP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtGenericConfGroup2 = cAAASvrExtGenericConfGroup2.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtGenericConfGroup2.setDescription('A collection of objects Generic configuration.')
cAAASvrExtSvrGroupConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 8)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpName"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpProtocol"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerList"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpConfigRowStatus"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrExtSvrGrpSvrListMaxEnt"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpConfigDeadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtSvrGroupConfGroup2 = cAAASvrExtSvrGroupConfGroup2.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrGroupConfGroup2.setDescription('A collection of objects for AAA Server Group configuration.')
cAAASvrExtProtoParamConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 9)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoAuthKey"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoKeyEncrType"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoDeadTime"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoTimeOut"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoRetransmits"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoSvrTableMaxEnt"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerProtoDirectedReq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtProtoParamConfigGroup1 = cAAASvrExtProtoParamConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtProtoParamConfigGroup1.setDescription('A collection of objects for AAA per-protocol parameter configuration.')
cAAASvrExtSvrTableLDAPConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 10)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerRootDN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtSvrTableLDAPConfGroup = cAAASvrExtSvrTableLDAPConfGroup.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrTableLDAPConfGroup.setDescription('A collection of objects for AAA Server using LDAP protocol.')
cAAASvrExtSvrGroupLDAPConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 11)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpLDAPBaseDN"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpLDAPFilterUser"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAASvrGrpLDAPUserProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtSvrGroupLDAPConfGroup = cAAASvrExtSvrGroupLDAPConfGroup.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrGroupLDAPConfGroup.setDescription('A collection of objects for LDAP Server Group configuration.')
cAAASvrExtSvrMonitorConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 367, 2, 2, 12)).setObjects(("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerIdleTime"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerTestUser"), ("CISCO-AAA-SERVER-EXT-MIB", "cAAAServerTestPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAAASvrExtSvrMonitorConfGroup = cAAASvrExtSvrMonitorConfGroup.setStatus('current')
if mibBuilder.loadTexts: cAAASvrExtSvrMonitorConfGroup.setDescription('A collection of objects for configuring AAA Server monitoring.')
mibBuilder.exportSymbols("CISCO-AAA-SERVER-EXT-MIB", cAAAServerKeyEncrType=cAAAServerKeyEncrType, cAAAServerProtocol=cAAAServerProtocol, cAAASvrExtSvrGrpConfigTable=cAAASvrExtSvrGrpConfigTable, cAAASvrExtProtoParamConfig=cAAASvrExtProtoParamConfig, cAAASvrExtClearAccLog=cAAASvrExtClearAccLog, cAAAServerProtoRetransmits=cAAAServerProtoRetransmits, cAAASvrExtAppSvrGrpMapConfig=cAAASvrExtAppSvrGrpMapConfig, cAAASvrExtConfigEntry=cAAASvrExtConfigEntry, cAAASvrExtProtocolParamTable=cAAASvrExtProtocolParamTable, cAAAServerProtoKeyEncrType=cAAAServerProtoKeyEncrType, cAAASvrExtSvrGrpConfigEntry=cAAASvrExtSvrGrpConfigEntry, cAAASvrExtSvrTableConfGroup=cAAASvrExtSvrTableConfGroup, cAAASvrExtSvrGroupConfGroup2=cAAASvrExtSvrGroupConfGroup2, cAAASvrExtSvrGrpSvrListMaxEnt=cAAASvrExtSvrGrpSvrListMaxEnt, cAAASvrGrpLDAPUserProfile=cAAASvrGrpLDAPUserProfile, cAAAServerAddrType=cAAAServerAddrType, cAAASvrExtSvrGrpConfig=cAAASvrExtSvrGrpConfig, cAAAServerProtoAuthKey=cAAAServerProtoAuthKey, cAAAServerProtoTimeOut=cAAAServerProtoTimeOut, cAAASvrExtAppSvrGrpConfigEntry=cAAASvrExtAppSvrGrpConfigEntry, cAAASvrExtGenericConfGroup=cAAASvrExtGenericConfGroup, cAAAFunction=cAAAFunction, ciscoAAAServerMIBCompliance1=ciscoAAAServerMIBCompliance1, cAAASvrExtSvrGrpLDAPConfigTable=cAAASvrExtSvrGrpLDAPConfigTable, cAAAServerTestUser=cAAAServerTestUser, cAAASvrExtSvrTableConfig=cAAASvrExtSvrTableConfig, cAAALoginAuthTypeMSCHAP=cAAALoginAuthTypeMSCHAP, PYSNMP_MODULE_ID=ciscoAAAServerExtMIB, cAAASvrGrpIndex=cAAASvrGrpIndex, cAAASvrGrpConfigDeadTime=cAAASvrGrpConfigDeadTime, cAAASvrExtAppSvrGroupConfGroup=cAAASvrExtAppSvrGroupConfGroup, cAAASvrGrpLocal=cAAASvrGrpLocal, CiscoAAAServerKeyEncrType=CiscoAAAServerKeyEncrType, cAAAServerProtoSvrTableMaxEnt=cAAAServerProtoSvrTableMaxEnt, cAAASvrExtSvrGroupLDAPConfGroup=cAAASvrExtSvrGroupLDAPConfGroup, cAAASvrExtGenericConfig=cAAASvrExtGenericConfig, ciscoAAAServerExtMIB=ciscoAAAServerExtMIB, ciscoAAASvrExtMIBObjects=ciscoAAASvrExtMIBObjects, cAAAServerProtoDirectedReq=cAAAServerProtoDirectedReq, cAAASvrGrpTrivial=cAAASvrGrpTrivial, cAAAServerList=cAAAServerList, ciscoAAASvrExtMIBConformance=ciscoAAASvrExtMIBConformance, cAAAServerTestPassword=cAAAServerTestPassword, cAAASvrExtAppToSvrGrpMaxEnt=cAAASvrExtAppToSvrGrpMaxEnt, cAAAServerRetransmits=cAAAServerRetransmits, cAAASvrGrpLDAPBaseDN=cAAASvrGrpLDAPBaseDN, cAAAServerIdleTime=cAAAServerIdleTime, cAAASvrExtGenericConfGroup1=cAAASvrExtGenericConfGroup1, cAAAServerProtoDeadTime=cAAAServerProtoDeadTime, cAAASvrGrpProtocol=cAAASvrGrpProtocol, cAAAServerRootDN=cAAAServerRootDN, cAAASvrExtSvrGroupConfGroup=cAAASvrExtSvrGroupConfGroup, cAAAServerTimeOut=cAAAServerTimeOut, cAAASvrExtSvrGrpLDAPConfigEntry=cAAASvrExtSvrGrpLDAPConfigEntry, ciscoAAAServerMIBCompliance2=ciscoAAAServerMIBCompliance2, cAAAServerAddr=cAAAServerAddr, cAAASvrExtLocalAccLogMaxSize=cAAASvrExtLocalAccLogMaxSize, cAAASvrExtProtoParamConfigGroup1=cAAASvrExtProtoParamConfigGroup1, cAAASvrExtConfigTable=cAAASvrExtConfigTable, cAAASvrExtAppSvrGrpConfigTable=cAAASvrExtAppSvrGrpConfigTable, cAAASvrExtProtocolParamEntry=cAAASvrExtProtocolParamEntry, cAAASvrGrpName=cAAASvrGrpName, ciscoAAAServerMIBCompliance=ciscoAAAServerMIBCompliance, cAAASvrExtGenericConfGroup2=cAAASvrExtGenericConfGroup2, cAAASvrExtSvrMonitorConfGroup=cAAASvrExtSvrMonitorConfGroup, ciscoAAASvrExtMIBCompliances=ciscoAAASvrExtMIBCompliances, cAAASvrExtSvrTableLDAPConfGroup=cAAASvrExtSvrTableLDAPConfGroup, cAAASvrGrpList=cAAASvrGrpList, cAAAServerDeadTime=cAAAServerDeadTime, cAAASvrGrpLDAPFilterUser=cAAASvrGrpLDAPFilterUser, cAAAApplicationType=cAAAApplicationType, cAAASvrExtProtoParamConfigGroup=cAAASvrExtProtoParamConfigGroup, ciscoAAASvrExtMIBGroups=ciscoAAASvrExtMIBGroups, cAAASvrGrpConfigRowStatus=cAAASvrGrpConfigRowStatus, cAAAApplicationSubType=cAAAApplicationSubType)
