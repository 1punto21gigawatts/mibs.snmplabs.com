#
# PySNMP MIB module CADANT-CMTS-MAC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-MAC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
CerOfdmModBitsType, OfdmProfileId = mibBuilder.importSymbols("CADANT-CMTS-DOWNCHANNEL-MIB", "CerOfdmModBitsType", "OfdmProfileId")
cadMacChlChannelIfIndex, cadIfMacDomainIfIndex = mibBuilder.importSymbols("CADANT-CMTS-LAYER2CMTS-MIB", "cadMacChlChannelIfIndex", "cadIfMacDomainIfIndex")
cadLayer2, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadLayer2")
CadCpeDeviceTypes, OUIAddress, InetAddressIPv4or6 = mibBuilder.importSymbols("CADANT-TC", "CadCpeDeviceTypes", "OUIAddress", "InetAddressIPv4or6")
DocsisVersion, TenthdBmV, TenthdB, DocsisUpstreamType, DocsisQosVersion = mibBuilder.importSymbols("DOCS-IF-MIB", "DocsisVersion", "TenthdBmV", "TenthdB", "DocsisUpstreamType", "DocsisQosVersion")
RcpId, IfDirection, ChSetId = mibBuilder.importSymbols("DOCS-IF3-MIB", "RcpId", "IfDirection", "ChSetId")
docsQosServiceClassEntry, docsQosServiceFlowSidClusterId, docsQosServiceFlowId, BitRate = mibBuilder.importSymbols("DOCS-QOS3-MIB", "docsQosServiceClassEntry", "docsQosServiceFlowSidClusterId", "docsQosServiceFlowId", "BitRate")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddressIPv6, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressIPv6", "InetAddressIPv4")
ipNetToMediaEntry, = mibBuilder.importSymbols("IP-MIB", "ipNetToMediaEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibIdentifier, NotificationType, ModuleIdentity, Counter64, TimeTicks, iso, Unsigned32, Bits, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks", "iso", "Unsigned32", "Bits", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32")
RowStatus, TimeStamp, DisplayString, DateAndTime, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "DisplayString", "DateAndTime", "TruthValue", "MacAddress", "TextualConvention")
cadMacMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2))
cadMacMib.setRevisions(('2015-09-08 00:00', '2015-06-05 00:00', '2015-04-14 00:00', '2015-04-06 00:00', '2015-04-01 00:00', '2015-03-03 00:00', '2014-11-25 00:00', '2014-09-23 00:00', '2014-05-31 00:00', '2014-02-13 00:00', '2013-06-20 00:00', '2013-06-12 00:00', '2013-05-14 00:00', '2013-05-09 00:00', '2013-04-29 00:00', '2012-11-30 00:00', '2012-11-26 00:00', '2012-08-01 00:00', '2012-06-27 00:00', '2011-05-05 00:00', '2010-11-23 00:00', '2010-10-12 00:00', '2010-08-31 00:00', '2010-05-24 00:00', '2010-05-13 00:00', '2010-02-08 00:00', '2009-08-26 00:00', '2009-08-19 00:00', '2009-04-08 00:00', '2009-03-25 00:00', '2009-03-04 00:00', '2009-02-12 00:00', '2009-01-26 00:00', '2009-01-05 00:00', '2008-11-17 00:00', '2008-02-01 00:00', '2007-09-06 00:00', '2007-08-30 00:00', '2007-08-08 00:00', '2006-09-19 00:00', '2006-09-12 00:00', '2006-08-11 00:00', '2006-07-17 00:00', '2006-04-06 00:00', '2006-01-30 00:00', '2006-01-05 00:00', '2006-01-03 00:00', '2005-12-12 00:00', '2005-10-19 00:00', '2005-10-18 00:00', '2005-10-14 00:00', '2005-10-07 00:00', '2005-10-05 00:00', '2005-10-03 00:00', '2005-08-10 00:00', '2005-07-11 00:00', '2005-07-01 00:00', '2004-12-03 00:00', '2004-11-12 00:00', '2004-02-28 00:00', '2003-10-16 00:00', '2003-09-24 00:00', '2003-07-29 00:00', '2003-06-23 00:00', '2003-06-20 00:00', '2003-04-14 00:00', '2003-01-06 00:00', '2002-11-11 00:00', '2002-10-10 00:00', '2002-09-23 00:00', '2002-09-19 00:00', '2002-08-28 00:00', '2002-06-05 00:00', '2001-05-22 00:00', '2001-05-03 00:00', '2001-04-03 00:00', '2001-02-05 00:00', '2000-09-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadMacMib.setRevisionsDescriptions(('Update CerOfdmModBitsType.', 'Add cadSubmgtFilterGrpDescTable, the Subscriber Management Filter Group Description Table.', 'Add cadIf3CmtsCmStatsEm1x1ModeTotalDuration and cadIf3CmtsCmStatsEm1x1ModeEntryTime', 'Add cadIfCmtsCmOfdmProfTable', 'Add cadIf3CmtsCmRegStatusEnergyMgtCapability, cadIf3CmtsCmRegStatusEnergyMgtEnabled and cadIf3CmtsCmRegStatusEnergyMgtOperStatus.', 'Add cadIfCmtsCmOfdmStatusTable', 'Add docsis31(5) to DocsisVersion', 'Expand the CadArp table to include additional information.', 'Add cadIfCmtsCmStatusInsertionFlaps.', 'Add cadCmtsCmStatusSummaryTable.', 'Add cadIfCmtsCmStatusRxAcPowerLost.', 'Change syntax of cadEnforceRuleTableLastChange to Counter32.', 'Add cadQosServiceClassControl.', 'Add cadIfCmtsCmCountsTxPower.', 'Add cadEnforceRuleTable cadEnforceRuleCountsTable cadIfCmtsCmStatusDsPenalties cadIfCmtsCmStatusUsPenalties cadIfCmtsCmStatusLastDsPenaltyStart cadIfCmtsCmStatusLastDsPenaltyDuration cadIfCmtsCmStatusLastUsPenaltyStart cadIfCmtsCmStatusLastUsPenaltyDuration cadMacClearPenaltyCounts cadMacClearPenaltyCountsByIfIndex cadMacClearPenaltyCountMacAddr cadMacClearPenaltyCountScn', 'Remove cadIfCmtsCmStatusSignalNoise and cadIfCmtsCmStatusMicroreflections.', 'Add cadMacClearFlapCountsByIfIndex', 'Add cadIfCmtsCmCountsSignalNoise, cadIfCmtsCmCountsUnerroreds, cadIfCmtsCmCountsCorrecteds, and cadIfCmtsCmCountsUncorrectables to cadIfCmtsCmCountsEntry', 'Deprecated cadCmtsCmStatusSummaryEntry.', 'Add cadMacRecalculateCmSummaryIfIndex', 'Change MAX-ACCESS of cadIfCmtsMacToInetIpAddrType and cadIfCmtsMacToInetIpAddr from read-only to not-accessible', 'Add cadIfCmtsMacToInetIpTable.', 'Deprecate cadIfCmtsMacIpAddr, cadIfCmtsMacInetIpAddr, and cadIfCmtsMacInetIpAddrType.', 'Rename cadSubMgtCpeControlMaxCpeIpv6Prefix to cadSubMgtCpeControlMaxCpeIpv6Addresses', 'Add cadQosServiceClassLatencyControlledFlowFlag', 'Update text description of cadQosServiceClassPeakTrafficRate', 'Add cadSubMgtCpeControlLastReset, cadSubMgtCpeControlMaxCpeIpv6Prefix, cadSubMgtCpeIpAddrType, cadSubMgtPsFilterDownstream, cadSubMgtPsFilterUpstream, cadSubMgtMtaFilterDownstream, cadSubMgtMtaFilterUpstream, cadSubMgtStbFilterDownstream cadSubMgtStbFilterUpstream Change Syntax of cadSubMgtCpeIpMacAddr from IpAddress to InetAddressIPv4or6.', 'Remove unused tables for E6.', 'Add cadCmtsCmStatusMacNumRangingAborted and cadCmtsCmStatusMacChNumRangingAborted.', 'Add cadIfCmtsCmStatusBpiEnabled.', 'Add initial device classes support from 5.2. Added cadSubMgtCpeCpeType to CadSubMgtCmFilterEntry. Added cadIfCmtsCmStatuseDocsisType to cadIfCmtsCmStatusEntry.', 'Add cadQosServiceFlowSidClusterUcid.', 'Add cadQosServiceFlowSidClusterTable.', 'Restrict size of cm vendor name and arp inet address.', 'Add cadIfCmtsCmCountsUpChIfIndex to cadIfCmtsCmCountsTable', 'Add cadCmtsCmStatusMacSummaryTable and cadCmtsCmStatusMacChSummaryTable', 'Replace DOCS-QOS-MIB with DOCS-QOS3-MIB', 'Add MIB object cadIf3CmtsCmStatusServiceType.', 'Add MIB objects in cadIfCmtsCmStatusTable to support DOCSIS 3.0 and add new enumeration values to CadIfCmtsCmStatusType', 'Add cadIfCmtsCmCCmDownChannelCount and cadIfCmtsCmCCmUpChannelCount to to cadIfCmtsCmCCmTable', 'Add cadCmtsCmStatusNumTotal, cadCmtsCmStatusNumActive, and cadCmtsCmStatusNumRegistered to cadCmtsCmStatusSummaryTable', 'Add 64-bit version of cadIfCmtsCmStatusLastFlapTime and cadIfCmtsCmStatusInitRangTime to prevent large value wrap-around problem.', 'Add cadIfCmtsCmStatusInetIpAddress, cadIfCmtsInetIpAddr, cadIfCmtsMacInetIpAddr.', 'Add cadMacClearFlapCountMacAddr to clear the flap counts for individual modem', 'Specify maximum 100 rows in Modem Deny list table.', 'Modem Deny list feature - add cadMacClearDenyCounts to clear the counts.', 'Added cadCpeHostAuthorizationTable for CPE Host Authorization (Motorola Style Anti-Spoofing) feature.', 'Modem Deny list feature', 'Rename WideBand to FlexPath', 'Undo deprecating cadCmtsCmStatusNumOperational', 'WideBand feature - Add cadIfCmtsWidebandCmTable, cadIfCmtsCmCCmTable', 'deprecating cadCmtsCmStatusNumOperational', 'Adding objects cadIfCmtsCmStatusDocsCapability and cadIfCmtsCmStatusDocsProvisioned to deprecate cadIfCmtsCmStatusDocsisVersion.', 'Add new modem state netAccessDisabled.', 'Add reverse mapping table for MAC <-> IP/CMMAC translation', 'Included Traffic Shaping for 2D12U feature.', 'Bumping cadCmtsCmVendorTable from cadMacMib.17 to cadMacMib.20.', 'Included support for TFTP Enforce feature.', 'Creating cadCmtsCmVendorTable to map OUIs to vendors and vice-versa.', 'Add flaplist enhancements and placeholder for cmptr.', 'OSS-N-03068 Deprecate operational(8) and add registeredBPIInitializing(9) for docsIfCmtsCmStatusValue.', 'Using DocsisVersion from DOCS-IF-MIB rather than from DOCS-IF-EXT-MIB to support 2.0', 'Adding object to support resetting cable modems from the CMTS.', 'In response to the draft-05 version of the DOCS-IF-MIB required for cw26, added cadIfCmtsCmStatusModulationType to the cadIfCmtsCmStatusTable.', 'Add MIB support for interface to MAC DB.', 'In response to the draft-05 version of the DOCS-IF-MIB required for cw26, added cadCmtsCmStatusNumOperational to CadCmtsCmStatusSummaryEntry and updated CadIfCmtsCmStatusType to add the operational(8) value.', 'added cadIfCmtsCmStatusConfigFilename, cadIfCmtsCmStatusBpiVersion, and cadIfCmtsCmStatusModemType to CadIfCmtsCmStatusEntry.', 'added cadSubMgtCpeFilterDownstream and cadSubMgtCpeFilterUpstream to CadSubMgtCpeIpEntry', "Created the cadQosCmtsMacToSrvFlowTable with a service flow ID that is read-only. This addresses the problem of the docsQosCmtsMacToSrvFlowTable's service flow ID being not-accessible.", 'changed cadIfCmtsServiceId from not-accessible to read-only', 'modified cadIfCmtsCmCountsTimingOffset', 'added more flap list variables', 'added flap list variables', 'added cadIfCmtsCmStatusNumber', 'removed cadIfCmtsCmStatusRxPower, TimingOffset, and EqualizationData', 'added cadIfCmtsCmCountsTable', 'removed cadIfCmtsCmStatusUnerroreds, Correcteds, and Uncorrectables', 'created',))
if mibBuilder.loadTexts: cadMacMib.setLastUpdated('201509080000Z')
if mibBuilder.loadTexts: cadMacMib.setOrganization('Arris Group, Inc.')
if mibBuilder.loadTexts: cadMacMib.setContactInfo(' Arris Support Postal: ARRIS Phone: +1 770 622 8530 E-mail: support@arris.com')
if mibBuilder.loadTexts: cadMacMib.setDescription('This is the Cadant version of all the tables which are really indexed by MacAddress, but are index by docsIfCmtsCmStatusIndex in the DOCS-IF-MIB')
class CadIfCmtsCmStatusType(TextualConvention, Integer32):
    description = 'The current known state of the cable modem.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20))
    namedValues = NamedValues(("other", 1), ("ranging", 2), ("rangingAborted", 3), ("rangingComplete", 4), ("ipComplete", 5), ("registrationComplete", 6), ("accessDenied", 7), ("operational", 8), ("registeredBPIInitializing", 9), ("startEae", 10), ("startDhcpv4", 11), ("startDhcpv6", 12), ("dhcpv6Complete", 13), ("startConfigFileDownload", 14), ("configFileComplete", 15), ("forwardingDisabled", 17), ("rfMuteAll", 18), ("netAccessDisabled", 20))

cadIfCmtsCmStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusNumber.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusNumber.setDescription('The number of rows in the cadIfCmtsCmStatusTable')
cadIfCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2), )
if mibBuilder.loadTexts: cadIfCmtsCmStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusTable.setDescription('')
cadIfCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"))
if mibBuilder.loadTexts: cadIfCmtsCmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusEntry.setDescription('')
cadIfCmtsCmStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: cadIfCmtsCmStatusMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusMacAddress.setDescription('MAC address of this Cable Modem')
cadIfCmtsCmStatusDownChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusDownChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusDownChannelIfIndex.setDescription('')
cadIfCmtsCmStatusUpChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusUpChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusUpChannelIfIndex.setDescription('')
cadIfCmtsCmStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 9), CadIfCmtsCmStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusValue.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusValue.setDescription('')
cadIfCmtsCmStatusDocsisVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 12), DocsisVersion().clone('docsis10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusDocsisVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cadIfCmtsCmStatusDocsisVersion.setDescription('Indication whether the CM has registered as a 1.0 or 1.1 modem. This object has been deprecated with the new objects cadIfCmtsCmStatusDocsCapability and cadIfCmtsCmStatusDocsProvisioned. This object will be removed in a future release.')
cadIfCmtsCmStatusRangFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusRangFlaps.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusRangFlaps.setDescription('Number of times the CM has flapped in Ranging states.')
cadIfCmtsCmStatusProvFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusProvFlaps.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusProvFlaps.setDescription('Number of times the CM has flapped in Provisioning states.')
cadIfCmtsCmStatusRegFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusRegFlaps.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusRegFlaps.setDescription('Number of times the CM has flapped in Registered state.')
cadIfCmtsCmStatusLastFlapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastFlapTime.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastFlapTime.setDescription('Timestamp of the last time the CM flapped.')
cadIfCmtsCmStatusInitRangTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusInitRangTime.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusInitRangTime.setDescription('Timestamp of the last time the CM did initial ranging.')
cadIfCmtsCmStatusPreFlapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 18), CadIfCmtsCmStatusType().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusPreFlapStatus.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusPreFlapStatus.setDescription('CM status value prior to last CM flap.')
cadIfCmtsCmStatusConfigFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusConfigFilename.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusConfigFilename.setDescription('Name of the file used to configure the modem during registration.')
cadIfCmtsCmStatusBpiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bpi", 0), ("bpiPlus", 1))).clone('bpi')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusBpiVersion.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusBpiVersion.setDescription('The value of this object is the version of Baseline Privacy for which this CM has registered.')
cadIfCmtsCmStatusModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("standalone", 1), ("mta", 2), ("ccm", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusModemType.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusModemType.setDescription('The type of modem that has been detected. This value is unknown(0) if the CMTS cannot determine a proper value. The standalone(1) value is set if the modem is a canonical DOCSIS 1.0 or 1.1 modem. The mta(2) value is used if the modem has been detected as being an MTA.')
cadIfCmtsCmStatusModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 22), DocsisUpstreamType().clone('tdma')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusModulationType.setReference('DOCSIS Radio Frequency Interface Specification, Table 8-19.')
if mibBuilder.loadTexts: cadIfCmtsCmStatusModulationType.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusModulationType.setDescription('Indicates modulation type currently used by the CM. Since this object specifically identifies PHY mode, the shared type is not permitted. If the upstream channel is unknown, this object returns a value of zero.')
cadIfCmtsCmStatusCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusCmPtr.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusCmPtr.setDescription('An index into the docsIfCmtsCmStatusTable.')
cadIfCmtsCmStatusTftpEnforceFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 24), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusTftpEnforceFailed.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusTftpEnforceFailed.setDescription('Indicates if TFTP Enforce failed during the modem registration.')
cadIfCmtsCmStatusDynamicSecretFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 25), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusDynamicSecretFailed.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusDynamicSecretFailed.setDescription('Indicates if Dynamic Secret failed during the modem registration.')
cadIfCmtsCmStatusDocsCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 26), DocsisVersion().clone('docsis10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusDocsCapability.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusDocsCapability.setDescription('The highest DOCSIS version the modem is capable of operating at. Note this comes from the modem itself and not the configuration file.')
cadIfCmtsCmStatusDocsProvisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 27), DocsisVersion().clone('docsis10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusDocsProvisioned.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusDocsProvisioned.setDescription('The DOCSIS version the modem has currently been configured to operate at. Note this comes from the config file and is not based upon the hardware capabilities of the modem.')
cadIfHVCmtsCmStatusLastFlapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfHVCmtsCmStatusLastFlapTime.setStatus('current')
if mibBuilder.loadTexts: cadIfHVCmtsCmStatusLastFlapTime.setDescription('The timestamp of the last time the CM flapped, measured in centiseconds. This object is a 64-bit version of cadIfCmtsCmStatusLastFlapTime.')
cadIfHVCmtsCmStatusInitRangTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfHVCmtsCmStatusInitRangTime.setStatus('current')
if mibBuilder.loadTexts: cadIfHVCmtsCmStatusInitRangTime.setDescription('The timestamp of the last time the CM did initial ranging, measured in centiseconds. This object is a 64-bit version of cadIfCmtsCmStatusInitRangTime.')
cadIf3CmtsCmRegStatusIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 30), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusIPv6Addr.setDescription('This attribute represents the IPv6 address of the CM. If the CM has no Internet address assigned, or the Internet address is unknown, the value of this attribute is the all zeros address.')
cadIf3CmtsCmRegStatusIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 31), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusIPv6LinkLocal.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusIPv6LinkLocal.setDescription('This attribute represents the IPv6 local scope address of the CM. If the CM has no link local address assigned, or the Internet address is unknown, the value of this attribute is the all zeros address.')
cadIf3CmtsCmRegStatusMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 32), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusMdIfIndex.setDescription('This attribute represents the interface Index of the CMTS MAC Domain where the CM is active. If the interface is unknown, the CMTS returns a value of zero.')
cadIf3CmtsCmRegStatusMdCmSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusMdCmSgId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Cable Modem Service Group (CM-SG) section.')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusMdCmSgId.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusMdCmSgId.setDescription('This attribute represents the ID of the MAC Domain CM Service Group Id (MD-CM-SG-ID) in which the CM is registered. If the ID is unknown, the CMTS returns a value of zero.')
cadIf3CmtsCmRegStatusRcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 34), RcpId().clone(hexValue="0000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRcpId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, RCP-ID section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRcpId.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRcpId.setDescription('This attribute represents the RCP-ID associated with the CM. If the RCP-ID is unknown the CMTS returns a five octet long string of zeros.')
cadIf3CmtsCmRegStatusRccStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRccStatusId.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRccStatusId.setDescription('This attribute represents the RCC Id the CMTS used to configure the CM receive channel set during the registration process. If unknown, the CMTS returns the value zero.')
cadIf3CmtsCmRegStatusRcsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 36), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRcsId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Cable Modem Physical Receive Channel Configuration section and the Receive Channels section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRcsId.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusRcsId.setDescription('This attribute represents the Receive Channel Set (RCS) that the CM is currently using. If the RCS is unknown, the CMTS returns the value zero.')
cadIf3CmtsCmRegStatusTcsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 37), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusTcsId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Changes to the Transmit Channel Set section.')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusTcsId.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusTcsId.setDescription('This attribute represents Transmit Channel Set (TCS) the CM is currently using. If the TCS is unknown, the CMTS returns the value zero.')
cadIf3CmtsCmRegStatusLastRegTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusLastRegTime.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusLastRegTime.setDescription('This attribute represents the last time the CM registered.')
cadIfCmtsCmStatusInetIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 39), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusInetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusInetIpAddrType.setDescription("The address type associated with the cable modem's IP address")
cadIfCmtsCmStatusInetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 40), InetAddressIPv4or6().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusInetIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusInetIpAddress.setDescription('The IPv4 or IPv6 IP address assigned to the cable modem.')
cadIf3CmtsCmRegStatusServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 41), DocsisQosVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusServiceType.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusServiceType.setDescription(' This attribute denotes the queueing services the CM registered, either DOCSIS 1.1 QoS or DOCSIS 1.0 CoS mode.')
cadIfCmtsCmStatusBpiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 42), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusBpiEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusBpiEnabled.setDescription(' This attribute denotes if BPI is enabled on the CM.')
cadIfCmtsCmStatuseDocsisTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 43), CadCpeDeviceTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatuseDocsisTypes.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatuseDocsisTypes.setDescription('The types of eDOCSIS devices within the modem that have been detected. This list is derived from the vendor specific option (option 43.3) in the DHCP packet from the CM.')
cadIfCmtsCmStatusDsPenalties = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusDsPenalties.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusDsPenalties.setDescription('Number of times the CM has had a downstream SF penalized. When this count is cleared, Start and Duration will not be reset since this CM may still be in penalty')
cadIfCmtsCmStatusUsPenalties = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusUsPenalties.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusUsPenalties.setDescription('Number of times the CM has had an upstream SF penalized. When this count is cleared, Start and Duration will not be reset since this CM may still be in penalty')
cadIfCmtsCmStatusLastDsPenaltyStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastDsPenaltyStart.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastDsPenaltyStart.setDescription('The timestamp of the most recent time the system started penalizing a downstream SF on that CM.')
cadIfCmtsCmStatusLastDsPenaltyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastDsPenaltyDuration.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastDsPenaltyDuration.setDescription('The duration of the last downstream penalty.')
cadIfCmtsCmStatusLastUsPenaltyStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastUsPenaltyStart.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastUsPenaltyStart.setDescription('The timestamp of the most recent time the system started penalizing an upstream SF on that CM.')
cadIfCmtsCmStatusLastUsPenaltyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastUsPenaltyDuration.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusLastUsPenaltyDuration.setDescription('The duration of the last upstream penalty.')
cadIfCmtsCmStatusRxAcPowerLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 50), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusRxAcPowerLost.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusRxAcPowerLost.setDescription(' This attribute denotes if the CMTS believes the CM to be in an AC Power Loss condition.')
cadIfCmtsCmStatusInsertionFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmStatusInsertionFlaps.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmStatusInsertionFlaps.setDescription('Number of times the CM has flapped in Provisioned or Registered state within the flaplist insertion interval.')
cadIf3CmtsCmRegStatusEnergyMgtCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 52), Bits().clone(namedValues=NamedValues(("em1x1Mode", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtCapability.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121113, Energy Management Features section.')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtCapability.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtCapability.setDescription('This attribute indicates the Energy Management Features the CM supports. If this attribute returns em1x1Mode(0) bit set, the CM supports the Energy Management 1x1 feature. If this attribute returns em1x1Mode(0) bit cleared, the CM does not support the Energy Management 1x1 feature. Note: This attribute only indicates if an Energy Management Feature is supported by the CM and does not indicate if the feature is enabled/disabled via the CM config file and registration request/response exchange and and does not indicate whether the CM is actively operation in an Energy Management Mode.')
cadIf3CmtsCmRegStatusEnergyMgtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 53), Bits().clone(namedValues=NamedValues(("em1x1Mode", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121113, Energy Management Features section.')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtEnabled.setDescription('This attribute indicates which, if any, of the Energy Management Features are enabled for this CM. If this attribute returns em1x1Mode(0) bit set, the CM is configured with the Energy Management 1x1 Feature enabled. If this attribute returns all bits cleared, the CM will not request to operate in any Energy Management mode of operation. Note: This attribute only indicates if an Energy Management Feature is enabled/disabled via the CM config file and registration request/response exchange and does not indicate whether the CM is actively operating in an Energy Management Mode.')
cadIf3CmtsCmRegStatusEnergyMgtOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 54), Bits().clone(namedValues=NamedValues(("em1x1Mode", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtOperStatus.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121113, Energy Management 1x1 Mode Indicator section.')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtOperStatus.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmRegStatusEnergyMgtOperStatus.setDescription('This attribute indicates whether the CM is currently operating in an Energy Management Mode. If this attribute returns em1x1Mode(0) bit set, the CM is operating in Energy Management 1x1 Mode. If this attribute returns all bits cleared, the CM is not operating in any Energy Management Mode. This attribute always returns 0x00 (no bits set) in the case when docsIf3CmtsCmRegStatusEnergyMgtEnabled is set to 0x00 (no Energy Management Features enabled).')
cadIf3CmtsCmStatsEm1x1ModeTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 55), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmStatsEm1x1ModeTotalDuration.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmStatsEm1x1ModeTotalDuration.setDescription('This attribute indicates the total time duration, in seconds that this CM (identified by docsIf3CmtsCmRegStatusId ) was in Energy Management 1x1 mode, not including the duration of time if it is Currently in Energy Management 1x1 mode as controlled by the DBC-REQ Energy Management 1x1 Mode Indicator TLV.')
cadIf3CmtsCmStatsEm1x1ModeEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 2, 1, 56), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmStatsEm1x1ModeEntryTime.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmStatsEm1x1ModeEntryTime.setDescription('This attribute indicates the sysUpTime when the CM started its current Energy Management 1x1 mode cycle, in seconds. Zero indicates the CM is currently not in the Energy Management 1x1 mode.')
cadIfCmtsCmCountsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3), )
if mibBuilder.loadTexts: cadIfCmtsCmCountsTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsTable.setDescription('')
cadIfCmtsCmCountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmCountsUpChIfIndex"))
if mibBuilder.loadTexts: cadIfCmtsCmCountsEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsEntry.setDescription('')
cadIfCmtsCmCountsRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 1), TenthdBmV()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsRxPower.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsRxPower.setDescription('The reciever power as perceived for upstream data from this cable modem. If the receive power is unknown, this object returns a value of zero.')
cadIfCmtsCmCountsTimingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsTimingOffset.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsTimingOffset.setDescription('A measure of the current round trip time for this cable modem. Used for timing of CM upstream transmissions to ensure synchronized arrivals at the CMTS. Units are in terms of 6.25 microseconds/(64*256). Returns zero if the value is unknown.')
cadIfCmtsCmCountsEqualizationData = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsEqualizationData.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsEqualizationData.setDescription('Equalization data for this CM. Returns an empty string if the value is unknown or if there is no equalization data available or defined.')
cadIfCmtsCmCountsRangeReqOpportunities = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsRangeReqOpportunities.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsRangeReqOpportunities.setDescription('The number of ranging request opportunities.')
cadIfCmtsCmCountsRangeReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsRangeReqReceived.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsRangeReqReceived.setDescription('The number of ranging request frames received.')
cadIfCmtsCmCountsPowerAdjExceedsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsPowerAdjExceedsThreshold.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsPowerAdjExceedsThreshold.setDescription('The number of ranging request which results in a power adjustment greater than the threshold value.')
cadIfCmtsCmCountsUpChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 7), InterfaceIndex())
if mibBuilder.loadTexts: cadIfCmtsCmCountsUpChIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsUpChIfIndex.setDescription('The upstream channel ifIndex.')
cadIfCmtsCmCountsSignalNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 8), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsSignalNoise.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsSignalNoise.setDescription('This attribute represents Signal/Noise ratio as perceived for upstream data from the CM on this upstream channel.')
cadIfCmtsCmCountsUnerroreds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsUnerroreds.setReference('RFC 2863.')
if mibBuilder.loadTexts: cadIfCmtsCmCountsUnerroreds.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsUnerroreds.setDescription('This attribute represents the codewords received without error from the CM on this interface. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
cadIfCmtsCmCountsCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsCorrecteds.setReference('RFC 2863.')
if mibBuilder.loadTexts: cadIfCmtsCmCountsCorrecteds.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsCorrecteds.setDescription('This attribute represents the codewords received with correctable errors from the CM on this upstream channeli. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
cadIfCmtsCmCountsUncorrectables = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsUncorrectables.setReference('RFC 2863.')
if mibBuilder.loadTexts: cadIfCmtsCmCountsUncorrectables.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsUncorrectables.setDescription('This attribute represents the codewords received with uncorrectable errors from the CM on this upstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
cadIfCmtsCmCountsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmCountsTxPower.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmCountsTxPower.setDescription('This attribute holds the value of CM channel transmit power that is included in the last CM ranging request message (in units of quarter dBmV). This value is updated at the receipt of every station maintenance message. Default value is zero. The value of this MIB object will be non-zero only for D3.0 CMs when MTCM is enabled. If the value of this MIB object is 0, it means that the object is not populated yet or MTCM is disabled (or both).')
cadIfCmtsServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4), )
if mibBuilder.loadTexts: cadIfCmtsServiceTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsServiceTable.setDescription('')
cadIfCmtsServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsServiceId"))
if mibBuilder.loadTexts: cadIfCmtsServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsServiceEntry.setDescription('')
cadIfCmtsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsServiceId.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsServiceId.setDescription('')
cadIfCmtsServiceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsServiceMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsServiceMacAddress.setDescription('MAC address of the Cable Modem this SID is associated with.')
cadIfCmtsServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("destroyed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsServiceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsServiceAdminStatus.setDescription('')
cadIfCmtsServiceQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsServiceQosProfile.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsServiceQosProfile.setDescription('This should be 1 if this is the default flow.')
cadIfCmtsServiceCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsServiceCreateTime.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsServiceCreateTime.setDescription('')
cadIfQosProfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfPriority.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfPriority.setDescription('')
cadIfQosProfMaxUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfMaxUpBandwidth.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfMaxUpBandwidth.setDescription('')
cadIfQosProfGuarUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfGuarUpBandwidth.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfGuarUpBandwidth.setDescription('')
cadIfQosProfMaxDownBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfMaxDownBandwidth.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfMaxDownBandwidth.setDescription('')
cadIfQosProfMaxTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfMaxTxBurst.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfMaxTxBurst.setDescription('')
cadIfQosProfBaselinePrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 4, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfBaselinePrivacy.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfBaselinePrivacy.setDescription('')
cadIfCmtsPtrToMacTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 5), )
if mibBuilder.loadTexts: cadIfCmtsPtrToMacTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsPtrToMacTable.setDescription('This table is the inverse of docsIfCmtsMacToCmTable')
cadIfCmtsPtrToMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 5, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmPtr"))
if mibBuilder.loadTexts: cadIfCmtsPtrToMacEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsPtrToMacEntry.setDescription('')
cadIfCmtsCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cadIfCmtsCmPtr.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmPtr.setDescription('An row index into the docsIfCmtsCmStatusTable.')
cadIfCmtsCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmMac.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmMac.setDescription('The MAC address this CMPtr is for.')
cadSubMgtCpeControlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6), )
if mibBuilder.loadTexts: cadSubMgtCpeControlTable.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlTable.setDescription('This table extends the cadifCmtsCmStatusTable and adds 4 objects which reflect the state of subscriber management on a particular CM.')
cadSubMgtCpeControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6, 1), )
cadIfCmtsCmStatusEntry.registerAugmentions(("CADANT-CMTS-MAC-MIB", "cadSubMgtCpeControlEntry"))
cadSubMgtCpeControlEntry.setIndexNames(*cadIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: cadSubMgtCpeControlEntry.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlEntry.setDescription('')
cadSubMgtCpeControlMaxCpeIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeControlMaxCpeIpv4.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlMaxCpeIpv4.setDescription('')
cadSubMgtCpeControlActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeControlActive.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlActive.setDescription('')
cadSubMgtCpeControlLearnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeControlLearnable.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlLearnable.setDescription('')
cadSubMgtCpeControlReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeControlReset.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlReset.setDescription('')
cadSubMgtCpeControlMaxCpeIpv6Addresses = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeControlMaxCpeIpv6Addresses.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlMaxCpeIpv6Addresses.setDescription('This attribute represents the number of simultaneous IPv6 prefixes permitted ofr CPE connected to the CM.')
cadSubMgtCpeControlLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 6, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeControlLastReset.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeControlLastReset.setDescription("This attribute represents the system Up Time of the last set to 'true' of the Reset attribute of this instance. Zero if never reset.")
cadSubMgtCpeIpTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7), )
if mibBuilder.loadTexts: cadSubMgtCpeIpTable.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeIpTable.setDescription('')
cadSubMgtCpeIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadSubMgtCpeIpIndex"))
if mibBuilder.loadTexts: cadSubMgtCpeIpEntry.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeIpEntry.setDescription("An entry in the cadSubMgtCpeIpTable. The first index is the specific modem we're referring to, the second index is the IP address of a specific CPE.")
cadSubMgtCpeIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: cadSubMgtCpeIpIndex.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeIpIndex.setDescription('refer to DocsSubMgtCpeIpIndex')
cadSubMgtCpeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 2), InetAddressIPv4or6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeIpAddr.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeIpAddr.setDescription('refer to DocsSubMgtCpeIpAddr')
cadSubMgtCpeIpLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeIpLearned.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeIpLearned.setDescription('TRUE if this IP addresses was learned, FALSE if it was provisioned')
cadSubMgtCpeIpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeIpMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeIpMacAddr.setDescription('The MAC address of this CPE.')
cadSubMgtCpeFilterDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeFilterDownstream.setDescription('This is the per-CPE equivalent of docsSubMgtSubFilterDownstream')
cadSubMgtCpeFilterUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeFilterUpstream.setDescription('This is the per-CPE equivalent of docsSubMgtSubFilterUpstream')
cadSubMgtCpeCpeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cpe", 1), ("ps", 2), ("mta", 3), ("stb", 4), ("tea", 5), ("erouter", 6))).clone('cpe')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeCpeType.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeCpeType.setDescription('This is the equivalent of docsSubMgtCpeType')
cadSubMgtCpeIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 7, 1, 8), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCpeIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCpeIpAddrType.setDescription('The IP address type for this CPE.')
cadSubMgtCmFilterTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8), )
if mibBuilder.loadTexts: cadSubMgtCmFilterTable.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCmFilterTable.setDescription('')
cadSubMgtCmFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"))
if mibBuilder.loadTexts: cadSubMgtCmFilterEntry.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCmFilterEntry.setDescription("An entry in the cadSubMgtCmFilterTable. The index is the specific modem we're referring to.")
cadSubMgtSubFilterDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtSubFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtSubFilterDownstream.setDescription('')
cadSubMgtSubFilterUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtSubFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtSubFilterUpstream.setDescription('')
cadSubMgtCmFilterDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCmFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCmFilterDownstream.setDescription('')
cadSubMgtCmFilterUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtCmFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtCmFilterUpstream.setDescription('')
cadSubMgtPsFilterDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtPsFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtPsFilterDownstream.setDescription('')
cadSubMgtPsFilterUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtPsFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtPsFilterUpstream.setDescription('')
cadSubMgtMtaFilterDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtMtaFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtMtaFilterDownstream.setDescription('')
cadSubMgtMtaFilterUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtMtaFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtMtaFilterUpstream.setDescription('')
cadSubMgtStbFilterDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtStbFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtStbFilterDownstream.setDescription('')
cadSubMgtStbFilterUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSubMgtStbFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: cadSubMgtStbFilterUpstream.setDescription('')
cadTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 9), )
if mibBuilder.loadTexts: cadTpFdbTable.setStatus('current')
if mibBuilder.loadTexts: cadTpFdbTable.setDescription('see dot1dTpFdbTable')
cadTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 9, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadTpFdbAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadTpFdbIfIndex"))
if mibBuilder.loadTexts: cadTpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: cadTpFdbEntry.setDescription('see CadTpFdbEntry')
cadTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 9, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadTpFdbAddress.setStatus('current')
if mibBuilder.loadTexts: cadTpFdbAddress.setDescription('see dot1dTpFdbAddress')
cadTpFdbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 9, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cadTpFdbIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadTpFdbIfIndex.setDescription('The ifIndex of the bridge port this MAC address was learned on. For ECard ports, this is the ifIndex of eport itself. However, for DCard ports, this is the ifIndex of the DOCSIS MacLayer (ifType=127). IfIndices of types 128 (DOCSIS downstream port) and 129 (DOCSIS upstream port) should not be used in this table.')
cadTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTpFdbStatus.setStatus('current')
if mibBuilder.loadTexts: cadTpFdbStatus.setDescription('see dot1dTpFdbStatus')
cadIfQosProfileLookupTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 10), )
if mibBuilder.loadTexts: cadIfQosProfileLookupTable.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfileLookupTable.setDescription('')
cadIfQosProfileLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 10, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfQosProfPriority"), (0, "CADANT-CMTS-MAC-MIB", "cadIfQosProfMaxUpBandwidth"), (0, "CADANT-CMTS-MAC-MIB", "cadIfQosProfGuarUpBandwidth"), (0, "CADANT-CMTS-MAC-MIB", "cadIfQosProfMaxDownBandwidth"), (0, "CADANT-CMTS-MAC-MIB", "cadIfQosProfMaxTxBurst"), (0, "CADANT-CMTS-MAC-MIB", "cadIfQosProfBaselinePrivacy"))
if mibBuilder.loadTexts: cadIfQosProfileLookupEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfileLookupEntry.setDescription('')
cadIfQosProfileLookupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfileLookupIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfileLookupIndex.setDescription('This should be 1 if this is the default flow.')
cadIfQosProfileLookupRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfQosProfileLookupRefCount.setStatus('current')
if mibBuilder.loadTexts: cadIfQosProfileLookupRefCount.setDescription('The number of cadIfCmtsServiceEntry rows that have the same cadIfQosProf values. If this count reaches zero(0), this row should be deleted.')
cadChannelToCmTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 11), )
if mibBuilder.loadTexts: cadChannelToCmTable.setStatus('current')
if mibBuilder.loadTexts: cadChannelToCmTable.setDescription('')
cadChannelToCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 11, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIf3CmtsCmRegStatusMdIfIndex"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"))
if mibBuilder.loadTexts: cadChannelToCmEntry.setStatus('current')
if mibBuilder.loadTexts: cadChannelToCmEntry.setDescription('')
cadChannelToCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChannelToCmPtr.setStatus('current')
if mibBuilder.loadTexts: cadChannelToCmPtr.setDescription('An index into the docsIf3CmtsCmRegStatusTable.')
cadCmtsCmStatusSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12), )
if mibBuilder.loadTexts: cadCmtsCmStatusSummaryTable.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusSummaryTable.setDescription('')
cadCmtsCmStatusSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusDownChannelIfIndex"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusUpChannelIfIndex"))
if mibBuilder.loadTexts: cadCmtsCmStatusSummaryEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusSummaryEntry.setDescription('')
cadCmtsCmStatusNumOther = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumOther.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumOther.setDescription('The number of modems on this upstream channel in state other(1)')
cadCmtsCmStatusNumRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRanging.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRanging.setDescription('The number of modems on this upstream channel in state ranging(2)')
cadCmtsCmStatusNumRangingAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRangingAborted.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRangingAborted.setDescription('The number of modems on this upstream channel in state rangingAborted(3)')
cadCmtsCmStatusNumRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRangingComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRangingComplete.setDescription('The number of modems on this upstream channel in state rangingComplete(4)')
cadCmtsCmStatusNumIpComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumIpComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumIpComplete.setDescription('The number of modems on this upstream channel in state ipComplete(5)')
cadCmtsCmStatusNumRegistrationComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegistrationComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegistrationComplete.setDescription('The number of modems on this upstream channel in state registrationComplete(6)')
cadCmtsCmStatusNumAccessDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumAccessDenied.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumAccessDenied.setDescription('The number of modems on this upstream channel in state accessDenied(7)')
cadCmtsCmStatusNumRangFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRangFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRangFlaps.setDescription('The number of times a CM on this upstream channel has reset in Ranging states.')
cadCmtsCmStatusNumProvFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumProvFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumProvFlaps.setDescription('The number of times a CM on this upstream channel has reset in Provisioning states.')
cadCmtsCmStatusNumRegFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegFlaps.setDescription('The number of times a CM on this upstream channel has reset in Registered state.')
cadCmtsCmStatusNumOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumOperational.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumOperational.setDescription('The number of modems on this upstream channel in state operational(8) - deprecated')
cadCmtsCmStatusNumRegisteredBpiInitializing = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegisteredBpiInitializing.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegisteredBpiInitializing.setDescription('The number of modems on this upstream channel in state RegisteredBpiInitializing(9)')
cadCmtsCmStatusNumTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumTotal.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumTotal.setDescription('The total count of cable modems on this upstream channel.')
cadCmtsCmStatusNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumActive.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumActive.setDescription('The count of cable modems that are active. Active cable modems are recognized by the docsIfCmtsCmStatusValue other than other(1). ')
cadCmtsCmStatusNumRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegistered.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusNumRegistered.setDescription('The count of cable modems that are registered and online on this upstream. Registered cable modems are those included in the counts: cadCmtsCmStatusNumRegistrationComplete, cadCmtsCmStatusNumOperational and cadCmtsCmStatusNumRegisteredBpiInitializing.')
cadArpTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13), )
if mibBuilder.loadTexts: cadArpTable.setStatus('current')
if mibBuilder.loadTexts: cadArpTable.setDescription('The ARP table. It can easily used for mapping from IP addresses to physical addresses.')
cadArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadArpIfIndex"), (0, "CADANT-CMTS-MAC-MIB", "cadArpAddressType"), (0, "CADANT-CMTS-MAC-MIB", "cadArpNetAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadArpL3IfIndex"))
if mibBuilder.loadTexts: cadArpEntry.setStatus('current')
if mibBuilder.loadTexts: cadArpEntry.setDescription('Each entry contains one IpAddress to MAC address equivalence.')
cadArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadArpIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadArpIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
cadArpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cadArpAddressType.setStatus('current')
if mibBuilder.loadTexts: cadArpAddressType.setDescription('The IP address type for this MAC to IP address entry router interface. ')
cadArpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1, 3), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadArpNetAddress.setStatus('current')
if mibBuilder.loadTexts: cadArpNetAddress.setDescription("The IpAddress corresponding to the media-dependent 'physical' address.")
cadArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadArpMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadArpMacAddress.setDescription("The 'physical' address associated with this IP address.")
cadArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ("local", 5))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadArpType.setStatus('current')
if mibBuilder.loadTexts: cadArpType.setDescription('The type of mapping. See IpNetToPhysicalType in the IP-MIB for a description.')
cadArpState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6), ("incomplete", 7))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadArpState.setStatus('current')
if mibBuilder.loadTexts: cadArpState.setDescription('The state of the mapping. See ipNetToPhysicalState in the IP-MIB for a description.')
cadArpL3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 13, 1, 7), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cadArpL3IfIndex.setStatus('current')
if mibBuilder.loadTexts: cadArpL3IfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
cadMacControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14))
cadMacClearFlapCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearFlapCounts.setStatus('current')
if mibBuilder.loadTexts: cadMacClearFlapCounts.setDescription('This variable always returns false(2) upon reading. When set to true(1), the flap counts in the Mac Mib are cleared.')
cadMacResetCMMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacResetCMMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadMacResetCMMacAddress.setDescription('This variable always returns 00:00:00:00:00:00 upon reading. When set to any other value, an attempt is made to find the Cable Modem whose MAC address matches that value and then reset that Cable Modem.')
cadMacDeleteMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacDeleteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadMacDeleteMacAddress.setDescription('This variable always returns 00:00:00:00:00:00 upon reading. When set to any other value, an attempt is made to find the device whose MAC address matches that value and remove all data pertaining to that device from the CMTS.')
cadMacClearDenyCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearDenyCounts.setStatus('current')
if mibBuilder.loadTexts: cadMacClearDenyCounts.setDescription('This variable always returns false(2) upon reading. When set to true(1), the counts in the modem deny status table are cleared.')
cadMacClearDenyCountMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearDenyCountMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadMacClearDenyCountMacAddr.setDescription('This variable always returns 00:00:00:00:00:00 upon reading. When set to any other value, the count in the modem deny status table whose MAC address matches that value is cleared.')
cadMacClearFlapCountMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 6), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearFlapCountMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadMacClearFlapCountMacAddr.setDescription('This variable always returns 00:00:00:00:00:00 upon reading. When set to any other value, the the modem flap count in cadIfCmtsCmStatusTable whose MAC address matches that value is cleared.')
cadMacRecalculateCmSummaryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 7), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacRecalculateCmSummaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadMacRecalculateCmSummaryIfIndex.setDescription('This variable always returns 0 upon reading. When set to an ifIndex of a cable MAC domain, the modem summary count of the MAC domain will be recalculated.')
cadMacClearFlapCountsByIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 8), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearFlapCountsByIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadMacClearFlapCountsByIfIndex.setDescription('This variable always returns 0 upon reading. When set to an ifIndex of a cable MAC domain, the flap counts of the MAC domain will be cleared.')
cadMacClearPenaltyCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearPenaltyCounts.setStatus('current')
if mibBuilder.loadTexts: cadMacClearPenaltyCounts.setDescription('This variable always returns false(2) upon reading. When set to true(1), the CM penalty counts in the cadIfCmtsCmStatusTable and the per penalty rule counts in cadEnforceRuleCountsTable are cleared.')
cadMacClearPenaltyCountsByIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 10), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearPenaltyCountsByIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadMacClearPenaltyCountsByIfIndex.setDescription('This variable always returns 0 upon reading. When set to an ifIndex of a cable MAC domain, the modem penalty count in cadIfCmtsCmStatusTable for all CMs in the MAC domain will be cleared.')
cadMacClearPenaltyCountMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearPenaltyCountMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadMacClearPenaltyCountMacAddr.setDescription('This variable always returns 00:00:00:00:00:00 upon reading. When set to any other value, the modem penalty count in cadIfCmtsCmStatusTable whose MAC address matches that value is cleared.')
cadMacClearPenaltyCountScn = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 14, 12), SnmpAdminString().clone(' ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMacClearPenaltyCountScn.setStatus('current')
if mibBuilder.loadTexts: cadMacClearPenaltyCountScn.setDescription('This variable always returns a single blank character upon reading. When set to any other value, the enforce rule penalty count in cadEnforceRuleCountsTable whose SCN matches that value is cleared.')
cadQosCmtsMacToSrvFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 15), )
if mibBuilder.loadTexts: cadQosCmtsMacToSrvFlowTable.setStatus('current')
if mibBuilder.loadTexts: cadQosCmtsMacToSrvFlowTable.setDescription('This table provide for referencing the service flows associated with a particular cable modem. This allows for indexing into other docsQos tables that are indexed by service flow ID and ifIndex.')
cadQosCmtsMacToSrvFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 15, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadQosCmtsCmMac"), (0, "CADANT-CMTS-MAC-MIB", "cadQosCmtsServiceFlowId"))
if mibBuilder.loadTexts: cadQosCmtsMacToSrvFlowEntry.setStatus('current')
if mibBuilder.loadTexts: cadQosCmtsMacToSrvFlowEntry.setDescription('An entry is created by CMTS for each service flow connected to this CMTS.')
cadQosCmtsCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 15, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadQosCmtsCmMac.setStatus('current')
if mibBuilder.loadTexts: cadQosCmtsCmMac.setDescription('The MAC address for the referenced CM.')
cadQosCmtsServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosCmtsServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: cadQosCmtsServiceFlowId.setDescription('An index assigned to a service flow by CMTS.')
cadQosCmtsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 15, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosCmtsIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadQosCmtsIfIndex.setDescription('The ifIndex of ifType docsCableMacLayter(127) on the CMTS that is connected to the Cable Modem.')
cadQosServiceClassTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 19), )
if mibBuilder.loadTexts: cadQosServiceClassTable.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassTable.setDescription('This table extends the docQosServiceClassTable and adds 1 object which is the peak traffic rate shaped to while traffic still conforms to the policing parameters. ')
cadQosServiceClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 19, 1), )
docsQosServiceClassEntry.registerAugmentions(("CADANT-CMTS-MAC-MIB", "cadQosServiceClassEntry"))
cadQosServiceClassEntry.setIndexNames(*docsQosServiceClassEntry.getIndexNames())
if mibBuilder.loadTexts: cadQosServiceClassEntry.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassEntry.setDescription('')
cadQosServiceClassPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 19, 1, 1), BitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadQosServiceClassPeakTrafficRate.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassPeakTrafficRate.setDescription('Peak traffic rate shaped to while traffic still conforms to the policing parameters (Tmax and Burst). If the peak rate is set to a value greater than Tmax, then the traffic will be shaped to the peak rate until the traffic is non-conforming to the policing parameters (Tmax and Burst), and then the traffic will be shaped to the Tmax rate. If the peak rate is less than the Tmax for a flow, then all traffic for that flow will shaped to the Tmax rate, regardless of the Burst parameter. Setting the peak rate to a value of 0 will result no peak rate limiting and flows having virtually unlimited bandwidth until their burst size is used up.')
cadQosServiceClassLatencyControlledFlowFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 19, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadQosServiceClassLatencyControlledFlowFlag.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassLatencyControlledFlowFlag.setDescription('This object indicated whether the flow should be should be latency-controlled. If this flag is not true than the legacy (bitrate-based) scheduler will be used.')
cadCmtsCmVendorTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 20), )
if mibBuilder.loadTexts: cadCmtsCmVendorTable.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmVendorTable.setDescription('The table of known and configured cable modem vendors as identified by the first three bytes of their MAC address, also known as the OUI')
cadCmtsCmVendorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 20, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadCmtsCmVendorOUI"))
if mibBuilder.loadTexts: cadCmtsCmVendorEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmVendorEntry.setDescription('Each row contains an OUI-to-vendor association')
cadCmtsCmVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 20, 1, 1), OUIAddress())
if mibBuilder.loadTexts: cadCmtsCmVendorOUI.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmVendorOUI.setDescription('First three(3) bytes of the MAC address of the cable modems')
cadCmtsCmVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46)).clone('(unspecified)')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCmtsCmVendorName.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmVendorName.setDescription('Name of the cable modem vendor using this OUI')
cadCmtsCmVendorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 20, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCmtsCmVendorRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmVendorRowStatus.setDescription('Control object for each row')
cadIfCmtsMacToIpTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 21), )
if mibBuilder.loadTexts: cadIfCmtsMacToIpTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacToIpTable.setDescription('This table provides a SNMP style wrapper to the MAC DB with a direct translation from MAC to the IP address and CM MAC associated with the CM or CPE MAC.')
cadIfCmtsMacToIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 21, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsMacAddr"))
if mibBuilder.loadTexts: cadIfCmtsMacToIpEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacToIpEntry.setDescription('Per MAC information stored in MAC DB')
cadIfCmtsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 21, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadIfCmtsMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacAddr.setDescription('MAC address of CM or CPE')
cadIfCmtsMacCmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 21, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsMacCmMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacCmMacAddr.setDescription('Mac address of the CM associated with the MAC address. If this is an entry for a CM, the it will be the same as the cadIfCmtsmac. For a CPE MAC, this will be the MAC address of the CM.')
cadIfCmtsMacInetIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 21, 1, 4), InetAddressIPv4or6().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsMacInetIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cadIfCmtsMacInetIpAddr.setDescription('Inet Ip address (IPv4 or IPv6)associated with this CM or CPE MAC address.')
cadIfCmtsMacInetIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 21, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsMacInetIpAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: cadIfCmtsMacInetIpAddrType.setDescription('Inet Ip address type (IPv4 or IPv6)associated with this CM or CPE MAC address.')
cadCmDenyTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 22), )
if mibBuilder.loadTexts: cadCmDenyTable.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyTable.setDescription('The list of cable modems that is configured to be denied for traffic. Maximum number of rows is 100.')
cadCmDenyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 22, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadCmDenyMacAddress"))
if mibBuilder.loadTexts: cadCmDenyEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyEntry.setDescription('The collection of deny modems.')
cadCmDenyMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 22, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadCmDenyMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyMacAddress.setDescription('The MAC address of the CM that is denied for any traffic.')
cadCmDenyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCmDenyRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyRowStatus.setDescription('The status of this conceptual row. To create a row in this table, set this object to createAndGo(4). Support of the values includes createAndGo(4) and destroy(6)')
cadCmDenyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 23), )
if mibBuilder.loadTexts: cadCmDenyStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyStatusTable.setDescription('Table of cable modem deny status.')
cadCmDenyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 23, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadCmDenyMacAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadCmDenyRecentIfIndex"))
if mibBuilder.loadTexts: cadCmDenyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyStatusEntry.setDescription('Entry of cable modem deny status.')
cadCmDenyRecentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 23, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadCmDenyRecentIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyRecentIfIndex.setDescription('The ifIndex of upstream channel where the denied modem was last on or attempted.')
cadCmDenyRecentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 23, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmDenyRecentTime.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyRecentTime.setDescription('The actual clock time when the modem was last denied.')
cadCmDenyAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmDenyAttempts.setStatus('current')
if mibBuilder.loadTexts: cadCmDenyAttempts.setDescription('The number of attempts received from the denied modem.')
cadCpeHostAuthorizationTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 24), )
if mibBuilder.loadTexts: cadCpeHostAuthorizationTable.setStatus('current')
if mibBuilder.loadTexts: cadCpeHostAuthorizationTable.setDescription('')
cadCpeHostAuthorizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 24, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadCpeHostAuthCmMacAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadCpeHostAuthCpeMacAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadCpeHostAuthCpeIpAddress"))
if mibBuilder.loadTexts: cadCpeHostAuthorizationEntry.setStatus('current')
if mibBuilder.loadTexts: cadCpeHostAuthorizationEntry.setDescription('')
cadCpeHostAuthCmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 24, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadCpeHostAuthCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadCpeHostAuthCmMacAddress.setDescription('The CM MAC address.')
cadCpeHostAuthCpeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 24, 1, 2), MacAddress())
if mibBuilder.loadTexts: cadCpeHostAuthCpeMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadCpeHostAuthCpeMacAddress.setDescription('The CPE MAC address.')
cadCpeHostAuthCpeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 24, 1, 3), IpAddress())
if mibBuilder.loadTexts: cadCpeHostAuthCpeIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadCpeHostAuthCpeIpAddress.setDescription('The CPE IP address.')
cadCpeHostAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 24, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCpeHostAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadCpeHostAuthRowStatus.setDescription('Object to control the row addition/deletion in this table.')
cadIfCmtsInetIpToCmMacTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 25), )
if mibBuilder.loadTexts: cadIfCmtsInetIpToCmMacTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsInetIpToCmMacTable.setDescription('Inet MAC DB interface for SNMP')
cadIfCmtsInetIpToCmMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 25, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsInetIpMacAddrType"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsInetIpMac"))
if mibBuilder.loadTexts: cadIfCmtsInetIpToCmMacEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsInetIpToCmMacEntry.setDescription('Per IP information stored in MAC DB')
cadIfCmtsInetIpMacAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 25, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cadIfCmtsInetIpMacAddrType.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsInetIpMacAddrType.setDescription('Inet IP address type of CM or CPE')
cadIfCmtsInetIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 25, 1, 2), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadIfCmtsInetIpMac.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsInetIpMac.setDescription('Inet IP address of CM or CPE')
cadIfCmtsInetIpCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 25, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsInetIpCmMac.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsInetIpCmMac.setDescription('Mac address of CM associated with this CM or CPE IP')
cadIfCmtsInetIpCpeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 25, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsInetIpCpeMac.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsInetIpCpeMac.setDescription('Mac address of CPE associated with this CPE IP. This is set to 0 for CM IPs.')
cadCmtsCmStatusMacSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26), )
if mibBuilder.loadTexts: cadCmtsCmStatusMacSummaryTable.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacSummaryTable.setDescription('')
cadCmtsCmStatusMacSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"))
if mibBuilder.loadTexts: cadCmtsCmStatusMacSummaryEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacSummaryEntry.setDescription('')
cadCmtsCmStatusMacNumOther = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumOther.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumOther.setDescription('The number of modems on this mac domain in state other(1)')
cadCmtsCmStatusMacNumInitRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumInitRanging.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumInitRanging.setDescription('The number of modems on this mac domain in state initialRanging(2)')
cadCmtsCmStatusMacNumRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRangingComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRangingComplete.setDescription('The number of modems on this mac domain in state rangingAutoAdjComplete(4)')
cadCmtsCmStatusMacNumStartEae = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartEae.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartEae.setDescription('The number of modems on this mac domain in state startEae(10)')
cadCmtsCmStatusMacNumStartDhcpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartDhcpv4.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartDhcpv4.setDescription('The number of modems on this mac domain in state startDhcpv4(11)')
cadCmtsCmStatusMacNumStartDhcpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartDhcpv6.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartDhcpv6.setDescription('The number of modems on this mac domain in state startDhcpv6(12)')
cadCmtsCmStatusMacNumDhcpv4Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumDhcpv4Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumDhcpv4Complete.setDescription('The number of modems on this mac domain in state dhcpv4Complete(5)')
cadCmtsCmStatusMacNumDhcpv6Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumDhcpv6Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumDhcpv6Complete.setDescription('The number of modems on this mac domain in state dhcpv6Complete(13)')
cadCmtsCmStatusMacNumStartCfgFileDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartCfgFileDownload.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartCfgFileDownload.setDescription('The number of modems on this mac domain in state startConfigFileDownload(14)')
cadCmtsCmStatusMacNumCfgFileDownloadComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumCfgFileDownloadComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumCfgFileDownloadComplete.setDescription('The number of modems on this mac domain in state configFileDownloadComplete(15)')
cadCmtsCmStatusMacNumStartRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartRegistration.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumStartRegistration.setDescription('The number of modems on this mac domain in state startRegistration(16)')
cadCmtsCmStatusMacNumRegistrationComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRegistrationComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRegistrationComplete.setDescription('The number of modems on this mac domain in state registrationComplete(6)')
cadCmtsCmStatusMacNumOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumOperational.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumOperational.setDescription('The number of modems on this mac domain in state operational(8)')
cadCmtsCmStatusMacNumBpiInit = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumBpiInit.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumBpiInit.setDescription('The number of modems on this mac domain in state bpiInit(9)')
cadCmtsCmStatusMacNumForwardingDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumForwardingDisabled.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumForwardingDisabled.setDescription('The number of modems on this mac domain in state forwardingDisabled(17)')
cadCmtsCmStatusMacNumRfMuteAll = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRfMuteAll.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRfMuteAll.setDescription('The number of modems on this mac domain in state rfMuteAll(18)')
cadCmtsCmStatusMacNumTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumTotal.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumTotal.setDescription('The total count of cable modems on this mac domain')
cadCmtsCmStatusMacNumRangingAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRangingAborted.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRangingAborted.setDescription('The number of modems on this mac domain in state rangingAborted(3)')
cadCmtsCmStatusMacNumRangFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRangFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRangFlaps.setDescription('The number of times a CM on this upstream channel has reset in Ranging states.')
cadCmtsCmStatusMacNumProvFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumProvFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumProvFlaps.setDescription('The number of times a CM on this upstream channel has reset in Provisioning states.')
cadCmtsCmStatusMacNumRegFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 26, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRegFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadCmtsCmStatusMacNumRegFlaps.setDescription('The number of times a CM on this upstream channel has reset in Registered state.')
cadCmtsCmStatusMacChSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27), )
if mibBuilder.loadTexts: cadCmtsCmStatusMacChSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChSummaryTable.setDescription('')
cadCmtsCmStatusMacChSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadMacChlChannelIfIndex"))
if mibBuilder.loadTexts: cadCmtsCmStatusMacChSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChSummaryEntry.setDescription('')
cadCmtsCmStatusMacChNumOther = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumOther.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumOther.setDescription('The number of modems on this channel in state other(1)')
cadCmtsCmStatusMacChNumInitRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumInitRanging.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumInitRanging.setDescription('The number of modems on this channel in state initialRanging(2)')
cadCmtsCmStatusMacChNumRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRangingComplete.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRangingComplete.setDescription('The number of modems on this channel in state rangingAutoAdjComplete(4)')
cadCmtsCmStatusMacChNumStartEae = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartEae.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartEae.setDescription('The number of modems on this channel in state startEae(10)')
cadCmtsCmStatusMacChNumStartDhcpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartDhcpv4.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartDhcpv4.setDescription('The number of modems on this channel in state startDhcpv4(11)')
cadCmtsCmStatusMacChNumStartDhcpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartDhcpv6.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartDhcpv6.setDescription('The number of modems on this channel in state startDhcpv6(12)')
cadCmtsCmStatusMacChNumDhcpv4Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumDhcpv4Complete.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumDhcpv4Complete.setDescription('The number of modems on this channel in state dhcpv4Complete(5)')
cadCmtsCmStatusMacChNumDhcpv6Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumDhcpv6Complete.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumDhcpv6Complete.setDescription('The number of modems on this channel in state dhcpv6Complete(13)')
cadCmtsCmStatusMacChNumStartCfgFileDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartCfgFileDownload.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartCfgFileDownload.setDescription('The number of modems on this channel in state startConfigFileDownload(14)')
cadCmtsCmStatusMacChNumCfgFileDownloadComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumCfgFileDownloadComplete.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumCfgFileDownloadComplete.setDescription('The number of modems on this channel in state configFileDownloadComplete(15)')
cadCmtsCmStatusMacChNumStartRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartRegistration.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumStartRegistration.setDescription('The number of modems on this channel in state startRegistration(16)')
cadCmtsCmStatusMacChNumRegistrationComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRegistrationComplete.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRegistrationComplete.setDescription('The number of modems on this channel in state registrationComplete(6)')
cadCmtsCmStatusMacChNumOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumOperational.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumOperational.setDescription('The number of modems on this channel in state operational(8)')
cadCmtsCmStatusMacChNumBpiInit = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumBpiInit.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumBpiInit.setDescription('The number of modems on this channel in state bpiInit(9)')
cadCmtsCmStatusMacChNumForwardingDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumForwardingDisabled.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumForwardingDisabled.setDescription('The number of modems on this channel in state forwardingDisabled(17)')
cadCmtsCmStatusMacChNumRfMuteAll = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRfMuteAll.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRfMuteAll.setDescription('The number of modems on this channel in state rfMuteAll(18)')
cadCmtsCmStatusMacChNumTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumTotal.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumTotal.setDescription('The total count of cable modems on this channel')
cadCmtsCmStatusMacChNumRangingAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRangingAborted.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRangingAborted.setDescription('The number of modems on this channel in state rangingAborted(3)')
cadCmtsCmStatusMacChNumRangFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRangFlaps.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRangFlaps.setDescription('The number of times a CM on this upstream channel has reset in Ranging states.')
cadCmtsCmStatusMacChNumProvFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumProvFlaps.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumProvFlaps.setDescription('The number of times a CM on this upstream channel has reset in Provisioning states.')
cadCmtsCmStatusMacChNumRegFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 27, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRegFlaps.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmStatusMacChNumRegFlaps.setDescription('The number of times a CM on this upstream channel has reset in Registered state.')
cadQosServiceFlowSidClusterTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 28), )
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I05-07mmdd, Service Flow SID Cluster Assignments section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterTable.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterTable.setDescription('This object defines the SID clusters associated with an upstream service flow. ')
cadQosServiceFlowSidClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowSidClusterId"), (0, "CADANT-CMTS-MAC-MIB", "cadQosServiceFlowSidClusterChIfIndex"))
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterEntry.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterEntry.setDescription('The conceptual row of cadQosServiceFlowSidClusterTable. The ifIndex key corresponds to the MAC Domain interface of the service flow. The index scheme used upstream channel ifIndex intead of channel ID to speed up query performance.')
cadQosServiceFlowSidClusterChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 28, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterChIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterChIfIndex.setDescription('This key represents the upstream Channel ifIndex mapped to the corresponding SID.')
cadQosServiceFlowSidClusterUcid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterUcid.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterUcid.setDescription('This attribute represents the UCID assigned to the upstream channel in this SID Cluster.')
cadQosServiceFlowSidClusterSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 28, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterSid.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceFlowSidClusterSid.setDescription('This attribute represents the SID assigned to the upstream channel in this SID Cluster.')
cadQosServiceFlowSegHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosServiceFlowSegHdr.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceFlowSegHdr.setDescription('This object indicates the segment header in a MTCM enabled flow is on or off.')
cadIfCmtsMacToInetIpTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 29), )
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpTable.setDescription('This table provides a SNMP style wrapper to the MAC DB with a direct translation from MAC to the IP address and CM MAC associated with the CM or CPE MAC.')
cadIfCmtsMacToInetIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 29, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsMacAddr"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsMacToInetIpAddrType"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsMacToInetIpAddr"))
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpEntry.setDescription('Per MAC information stored in MAC DB')
cadIfCmtsMacToInetIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 29, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpAddrType.setDescription('Inet Ip address type (IPv4 or IPv6)associated with this CM or CPE MAC address.')
cadIfCmtsMacToInetIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 29, 1, 2), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpAddr.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpAddr.setDescription('Inet Ip address (IPv4 or IPv6)associated with this CM or CPE MAC address.')
cadIfCmtsMacToInetIpCmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 29, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpCmMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsMacToInetIpCmMacAddr.setDescription('Mac address of the CM associated with the MAC address. If this is an entry for a CM, the it will be the same as the cadIfCmtsmac. For a CPE MAC, this will be the MAC address of the CM.')
cadEnforceRule = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30))
cadEnforceRuleTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 1), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadEnforceRuleTableLastChange.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleTableLastChange.setDescription('The value of sysUpTime on the most recent occasion at which a row in the cadEnforceRuleTable was added or deleted. Is zero if not modified since last boot.')
cadEnforceRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2), )
if mibBuilder.loadTexts: cadEnforceRuleTable.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleTable.setDescription('This object describes an enforce rule list For the Integrated SC Agility feature on a CMTS. Each object instance defines an enforce rule.')
cadEnforceRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadEnforceRuleReferenceSCN"))
if mibBuilder.loadTexts: cadEnforceRuleEntry.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleEntry.setDescription('The conceptual row of cadEnforceRuleTable.')
cadEnforceRuleReferenceSCN = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: cadEnforceRuleReferenceSCN.setReference('Integrated Service Class Agility PSA')
if mibBuilder.loadTexts: cadEnforceRuleReferenceSCN.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleReferenceSCN.setDescription("This attribute represents the Service Class Name from which the reference parameter set values for a SF were derived. This ASCII string acts as a handle pointing to the Service Class Name In the docsQosParamSetTable. This SCN's name and pre-configured QoS parameters are used to determine if a particular Service Flow should be mapped into this particular Enforce Rule.")
cadEnforceRuleEnforceSCN = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEnforceRuleEnforceSCN.setReference('Integrated Service Class Agility PSA')
if mibBuilder.loadTexts: cadEnforceRuleEnforceSCN.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleEnforceSCN.setDescription("This attribute represents the Service Class Name from which the penalty parameter set values are derived. Must be specified. This ASCII string acts as a handle pointing to the Service Class Name In the docsQosParamSetTable. This SCN's pre-configured QoS parameters for Priority, Tmax, Tpeak, and Max Burst are used to temporarily over-write the service flow's QoS Parameter Set values whenever that service flow bandwidth exceeds the threshold.")
cadEnforceRuleAvgBwRateUsageTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 500000))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEnforceRuleAvgBwRateUsageTrigger.setReference('Integrated Service Class Agility PSA')
if mibBuilder.loadTexts: cadEnforceRuleAvgBwRateUsageTrigger.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleAvgBwRateUsageTrigger.setDescription('The threshold bandwidth (in kilobits per second) above which the service flow is identified as being a Heavy User below which the service flow is identified as being a Light User. This must be specified. ')
cadEnforceRuleAvgHistoryDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEnforceRuleAvgHistoryDuration.setReference('Integrated Service Class Agility PSA')
if mibBuilder.loadTexts: cadEnforceRuleAvgHistoryDuration.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleAvgHistoryDuration.setDescription('The duration of time (in minutes) that is used to monitor and calculate the average bandwidth for each service flow associated with this Enforce Rule. In essence, we will use a sliding window with a duration specified by this parameter whenever calculating the average bandwidth that the service flow has utilized. Values must be divisible by 30. The history duration must be an integer multiple of the sampling interval.')
cadEnforceRuleSamplingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(30, 30), )).clone(15)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEnforceRuleSamplingInterval.setReference('Integrated Service Class Agility PSA')
if mibBuilder.loadTexts: cadEnforceRuleSamplingInterval.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleSamplingInterval.setDescription('The period of time (in minutes) between successive slides of the sliding window. It is also the temporal distance over which the sliding window is moved whenever it is slid. The penalty duration and window duration must be an integer multiple of the sampling interval.')
cadEnforceRulePenaltyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 10080)).clone(60)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEnforceRulePenaltyDuration.setReference('Integrated Service Class Agility PSA')
if mibBuilder.loadTexts: cadEnforceRulePenaltyDuration.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRulePenaltyDuration.setDescription('The duration of time (in minutes) that a monitored service flow is held in the penalty box after it has been found to be a Heavy User. Being placed in the penalty box implies that the service flow has had its Priority, Tmax, Tpeak, and Max Burst parameters within its QoS Parameter Set overridden by the corresponding values from the Enforce Service Class Name. Values must be divisible by 30. The penalty duration must be an integer multiple of the sampling interval.')
cadEnforceRuleCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadEnforceRuleCreateTime.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleCreateTime.setDescription('The value of sysUpTime in seconds when this rule was created. Set to new sysUpTime if created before last boot.')
cadEnforceRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEnforceRuleStatus.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleStatus.setDescription('The conceptual row status of this object.')
cadEnforceRuleCountsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 3), )
if mibBuilder.loadTexts: cadEnforceRuleCountsTable.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleCountsTable.setDescription('This object contains the number of times an enforce rule has been used to penalize a service flow.')
cadEnforceRuleCountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 3, 1), )
cadEnforceRuleEntry.registerAugmentions(("CADANT-CMTS-MAC-MIB", "cadEnforceRuleCountsEntry"))
cadEnforceRuleCountsEntry.setIndexNames(*cadEnforceRuleEntry.getIndexNames())
if mibBuilder.loadTexts: cadEnforceRuleCountsEntry.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleCountsEntry.setDescription('The conceptual row of cadEnforceRuleCountsTable.')
cadEnforceRuleCountsPenalties = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 30, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadEnforceRuleCountsPenalties.setStatus('current')
if mibBuilder.loadTexts: cadEnforceRuleCountsPenalties.setDescription('Number of times the CM has had a SF penalized by this Enforce Rule.')
cadQosServiceClassControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31))
cadQosServiceClassControlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31, 1), )
if mibBuilder.loadTexts: cadQosServiceClassControlTable.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassControlTable.setDescription('This table extends the docQosServiceClassTable and adds control features for service classes.')
cadQosServiceClassControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31, 1, 1), )
docsQosServiceClassEntry.registerAugmentions(("CADANT-CMTS-MAC-MIB", "cadQosServiceClassControlEntry"))
cadQosServiceClassControlEntry.setIndexNames(*docsQosServiceClassEntry.getIndexNames())
if mibBuilder.loadTexts: cadQosServiceClassControlEntry.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassControlEntry.setDescription('This is an extension of the DocsQosServiceClassEntry table that provides additional service class control features.')
cadQosServiceClassControlSendDsc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadQosServiceClassControlSendDsc.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassControlSendDsc.setDescription('This variable always returns false(2) upon reading. When set to true(1), a DSC updating the SF parameters is sent to all CMs having a SF matching this SCN name and whose QOS parameter set is out-of-date.')
cadQosServiceClassControlSendDscLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadQosServiceClassControlSendDscLastUpdated.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassControlSendDscLastUpdated.setDescription('The time that cadQosServiceClassControlSendDsc was written for this row. If it was updated prior to the last re- initialization of the local network management subsystem, then this object contains a zero value. Used to decide if a DSC is needed for a SF using this SCN.')
cadQosServiceClassCmControlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31, 2), )
if mibBuilder.loadTexts: cadQosServiceClassCmControlTable.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassCmControlTable.setDescription('This table extends the docQosServiceClassTable and adds a per-CM control feature for service classes.')
cadQosServiceClassCmControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31, 2, 1), )
docsQosServiceClassEntry.registerAugmentions(("CADANT-CMTS-MAC-MIB", "cadQosServiceClassCmControlEntry"))
cadQosServiceClassCmControlEntry.setIndexNames(*docsQosServiceClassEntry.getIndexNames())
if mibBuilder.loadTexts: cadQosServiceClassCmControlEntry.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassCmControlEntry.setDescription('This is an extension of the DocsQosServiceClassEntry table that provides additional service class control features.')
cadQosServiceClassCmControlSendDscMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 31, 2, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadQosServiceClassCmControlSendDscMacAddr.setStatus('current')
if mibBuilder.loadTexts: cadQosServiceClassCmControlSendDscMacAddr.setDescription("This variable always returns 00:00:00:00:00:00 upon reading. When set to any other value, a DSC updating the SF parameters in the CM whose MAC address matches the value written is sent, providing that there is a SF matching this SCN's name, and the CM's QoS parameter set for that SF is out-of-date.")
cadIfCmtsCmOfdmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32), )
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusTable.setDescription('This table contains DOCSIS 3.1 CM Capabilities from CM registration requests.')
cadIfCmtsCmOfdmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmOfdmStatusMacAddress"))
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusEntry.setDescription('An entry has the capabilities from the registration request for one CM.')
cadIfCmtsCmOfdmStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusMacAddress.setDescription('The MAC address of the modem.')
cadIfCmtsCmOfdmStatusOkOfdmMod = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32, 1, 2), CerOfdmModBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusOkOfdmMod.setReference('DOCSIS MULPI Specification, Section C.1.3.1')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusOkOfdmMod.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusOkOfdmMod.setDescription('The OFDM modulations supported by the CM, as reported in TLV 5.52. QAM8 and QAM32 are not allowed for DS channels.')
cadIfCmtsCmOfdmStatusOkOfdmaMod = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32, 1, 3), CerOfdmModBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusOkOfdmaMod.setReference('DOCSIS MULPI Specification, Section C.1.3.1')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusOkOfdmaMod.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusOkOfdmaMod.setDescription('The OFDMA US modulations supported by the CM, as reported in TLV 5.53.')
cadIfCmtsCmOfdmStatusDsLowFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusDsLowFreq.setReference('DOCSIS MULPI Specification, Section C.1.3.1')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusDsLowFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusDsLowFreq.setDescription('The low DS edge frequency (Downstream Lower Band Edge) supported by the CM,as reported in TLV 5.54.')
cadIfCmtsCmOfdmStatusDsHighFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusDsHighFreq.setReference('DOCSIS MULPI Specification, Section C.1.3.1')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusDsHighFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusDsHighFreq.setDescription('The high DS edge frequency (Downstream Upper Band Edge) supported by the CM, as reported in TLV 5.55.')
cadIfCmtsCmOfdmStatusUsHighFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 32, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusUsHighFreq.setReference('DOCSIS MULPI Specification, Section C.1.3.1')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusUsHighFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmStatusUsHighFreq.setDescription('The high US edge frequency (Diplexor Upper Band Edge) supported by the CM,as reported in TLV 5.56.')
cadIfCmtsCmOfdmProfTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 33), )
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfTable.setDescription('This table contains the OFDM and OFDMA channels and profiles assigned to DOCSIS 3.1 CMs, and their status.')
cadIfCmtsCmOfdmProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 33, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmOfdmProfMacAddress"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmOfdmProfIfIndex"), (0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmOfdmProfProfId"))
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfEntry.setDescription('An entry describes one channel and profile assigned to a DOCSIS 3.1 CM.')
cadIfCmtsCmOfdmProfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 33, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfMacAddress.setDescription('The MAC address of the modem.')
cadIfCmtsCmOfdmProfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 33, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfIfIndex.setDescription('The ifIndex of an OFDM DS or OFDMA US channel.')
cadIfCmtsCmOfdmProfProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 33, 1, 3), OfdmProfileId())
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfProfId.setReference('DOCSIS 3.1 CCAP OSSI Specification')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfProfId.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfProfId.setDescription('The profile number plus one of this profile for a DS channel. The data IUC number for a US channel. Range is (1..16|256) for downstream channels, and (5|6|9|10|11|12|13) for upstream channels.')
cadIfCmtsCmOfdmProfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 33, 1, 4), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfDirection.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfDirection.setDescription('Whether the channel is downstream or upstream.')
cadIfCmtsCmOfdmProfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 33, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("impaired", 2))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfStatus.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmOfdmProfStatus.setDescription('Active if there are no issues for this profile for this CM on this channel. Impaired when we receive a CM-STATUS message of type ofdmProfileFailure, for OFDM channels, or due to excessive errors seen by the receiver, for OFDMA channels.')
cadSubmgtFilterGrpDescTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 34), )
if mibBuilder.loadTexts: cadSubmgtFilterGrpDescTable.setStatus('current')
if mibBuilder.loadTexts: cadSubmgtFilterGrpDescTable.setDescription('Each entry of this table defines the description text associated with a single subscriber management filter group. The object exists independent of the existence of the particular filter group (docsSubmgt3FilterGrpTable (DOCS-SUBMGT3-MIB))')
cadSubmgtFilterGrpDescEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 34, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadSubmgtFilterGrpId"))
if mibBuilder.loadTexts: cadSubmgtFilterGrpDescEntry.setStatus('current')
if mibBuilder.loadTexts: cadSubmgtFilterGrpDescEntry.setDescription('The conceptual row of cadSubmgtFilterGrpDescTable.')
cadSubmgtFilterGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 34, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: cadSubmgtFilterGrpId.setStatus('current')
if mibBuilder.loadTexts: cadSubmgtFilterGrpId.setDescription('This key is an identifier for a set of classifiers known as a filter group. Each CM may be associated with several filter groups for its upstream and downstream traffic, one group per target end point on the CM as defined in the docsSubmgt3GrpEntry object (DOCS-SUBMGT3-MIB). Typically, many CMs share a common set of filter groups.')
cadSubmgtFilterGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 34, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadSubmgtFilterGrpDescription.setStatus('current')
if mibBuilder.loadTexts: cadSubmgtFilterGrpDescription.setDescription('A user-defined description of the filter group (1 to 32 human- readable characters).')
cadSubmgtFilterGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 2, 34, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadSubmgtFilterGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadSubmgtFilterGrpRowStatus.setDescription('Control object for row creation and deletion. Support limited to active(1), createAndGo(4), destroy(6).')
mibBuilder.exportSymbols("CADANT-CMTS-MAC-MIB", cadIfCmtsMacInetIpAddr=cadIfCmtsMacInetIpAddr, cadIf3CmtsCmRegStatusRccStatusId=cadIf3CmtsCmRegStatusRccStatusId, cadEnforceRule=cadEnforceRule, cadIfCmtsCmCountsUpChIfIndex=cadIfCmtsCmCountsUpChIfIndex, cadIfCmtsCmStatusLastUsPenaltyDuration=cadIfCmtsCmStatusLastUsPenaltyDuration, cadCmtsCmStatusMacChNumRangingAborted=cadCmtsCmStatusMacChNumRangingAborted, cadIfCmtsServiceId=cadIfCmtsServiceId, cadIf3CmtsCmRegStatusEnergyMgtOperStatus=cadIf3CmtsCmRegStatusEnergyMgtOperStatus, cadMacRecalculateCmSummaryIfIndex=cadMacRecalculateCmSummaryIfIndex, cadCmtsCmStatusNumRanging=cadCmtsCmStatusNumRanging, cadIfCmtsCmOfdmProfTable=cadIfCmtsCmOfdmProfTable, cadIfCmtsCmStatusDocsisVersion=cadIfCmtsCmStatusDocsisVersion, cadCmtsCmStatusMacNumRegFlaps=cadCmtsCmStatusMacNumRegFlaps, cadEnforceRuleEnforceSCN=cadEnforceRuleEnforceSCN, cadQosServiceClassControlEntry=cadQosServiceClassControlEntry, cadQosServiceFlowSidClusterSid=cadQosServiceFlowSidClusterSid, cadIfCmtsCmStatusInsertionFlaps=cadIfCmtsCmStatusInsertionFlaps, cadCmtsCmVendorName=cadCmtsCmVendorName, cadIf3CmtsCmRegStatusTcsId=cadIf3CmtsCmRegStatusTcsId, cadIfCmtsCmCountsTable=cadIfCmtsCmCountsTable, cadSubMgtCpeCpeType=cadSubMgtCpeCpeType, cadMacClearDenyCounts=cadMacClearDenyCounts, cadSubMgtCpeFilterDownstream=cadSubMgtCpeFilterDownstream, cadCmDenyRowStatus=cadCmDenyRowStatus, cadCmtsCmStatusMacNumTotal=cadCmtsCmStatusMacNumTotal, cadIfCmtsCmStatusLastDsPenaltyStart=cadIfCmtsCmStatusLastDsPenaltyStart, cadIfCmtsCmCountsRangeReqReceived=cadIfCmtsCmCountsRangeReqReceived, cadCmtsCmStatusMacNumRegistrationComplete=cadCmtsCmStatusMacNumRegistrationComplete, cadArpTable=cadArpTable, cadIfCmtsCmStatusBpiVersion=cadIfCmtsCmStatusBpiVersion, cadTpFdbTable=cadTpFdbTable, cadSubMgtCpeIpAddrType=cadSubMgtCpeIpAddrType, cadIfCmtsCmStatusDownChannelIfIndex=cadIfCmtsCmStatusDownChannelIfIndex, cadIfCmtsServiceTable=cadIfCmtsServiceTable, cadIfCmtsCmStatusDocsCapability=cadIfCmtsCmStatusDocsCapability, cadCmtsCmStatusMacNumRangingComplete=cadCmtsCmStatusMacNumRangingComplete, cadIfCmtsCmStatusInitRangTime=cadIfCmtsCmStatusInitRangTime, cadCmtsCmStatusMacNumRangingAborted=cadCmtsCmStatusMacNumRangingAborted, cadTpFdbAddress=cadTpFdbAddress, cadSubMgtCpeIpAddr=cadSubMgtCpeIpAddr, cadIfQosProfPriority=cadIfQosProfPriority, cadIfCmtsCmOfdmStatusTable=cadIfCmtsCmOfdmStatusTable, cadArpIfIndex=cadArpIfIndex, cadCmtsCmStatusMacChNumDhcpv4Complete=cadCmtsCmStatusMacChNumDhcpv4Complete, cadSubMgtStbFilterDownstream=cadSubMgtStbFilterDownstream, cadIfCmtsCmCountsTimingOffset=cadIfCmtsCmCountsTimingOffset, cadIfCmtsInetIpCmMac=cadIfCmtsInetIpCmMac, cadIfCmtsCmOfdmProfDirection=cadIfCmtsCmOfdmProfDirection, cadSubMgtCpeControlTable=cadSubMgtCpeControlTable, cadSubmgtFilterGrpRowStatus=cadSubmgtFilterGrpRowStatus, cadIfCmtsMacAddr=cadIfCmtsMacAddr, cadMacMib=cadMacMib, PYSNMP_MODULE_ID=cadMacMib, cadIfCmtsCmStatuseDocsisTypes=cadIfCmtsCmStatuseDocsisTypes, cadIfCmtsCmStatusModemType=cadIfCmtsCmStatusModemType, cadSubmgtFilterGrpDescEntry=cadSubmgtFilterGrpDescEntry, cadCmtsCmStatusMacChNumStartDhcpv6=cadCmtsCmStatusMacChNumStartDhcpv6, cadEnforceRuleTable=cadEnforceRuleTable, cadIfCmtsCmStatusEntry=cadIfCmtsCmStatusEntry, cadCmtsCmStatusNumRegistrationComplete=cadCmtsCmStatusNumRegistrationComplete, cadSubMgtCmFilterTable=cadSubMgtCmFilterTable, cadCmtsCmStatusNumRangFlaps=cadCmtsCmStatusNumRangFlaps, cadTpFdbEntry=cadTpFdbEntry, cadIfCmtsCmStatusDocsProvisioned=cadIfCmtsCmStatusDocsProvisioned, cadIfCmtsCmCountsPowerAdjExceedsThreshold=cadIfCmtsCmCountsPowerAdjExceedsThreshold, cadCmtsCmStatusMacNumDhcpv4Complete=cadCmtsCmStatusMacNumDhcpv4Complete, cadIf3CmtsCmRegStatusLastRegTime=cadIf3CmtsCmRegStatusLastRegTime, cadArpState=cadArpState, cadCmtsCmStatusNumProvFlaps=cadCmtsCmStatusNumProvFlaps, cadIfCmtsCmCountsEqualizationData=cadIfCmtsCmCountsEqualizationData, cadCmtsCmVendorOUI=cadCmtsCmVendorOUI, cadChannelToCmPtr=cadChannelToCmPtr, cadIfCmtsCmOfdmStatusUsHighFreq=cadIfCmtsCmOfdmStatusUsHighFreq, cadIfCmtsMacToIpEntry=cadIfCmtsMacToIpEntry, cadCmtsCmStatusMacChNumInitRanging=cadCmtsCmStatusMacChNumInitRanging, cadIfCmtsCmOfdmProfProfId=cadIfCmtsCmOfdmProfProfId, cadIf3CmtsCmStatsEm1x1ModeTotalDuration=cadIf3CmtsCmStatsEm1x1ModeTotalDuration, cadQosServiceClassControlTable=cadQosServiceClassControlTable, cadIfCmtsCmStatusLastUsPenaltyStart=cadIfCmtsCmStatusLastUsPenaltyStart, cadCmDenyAttempts=cadCmDenyAttempts, cadIfCmtsPtrToMacTable=cadIfCmtsPtrToMacTable, cadIfCmtsServiceAdminStatus=cadIfCmtsServiceAdminStatus, cadIfCmtsPtrToMacEntry=cadIfCmtsPtrToMacEntry, cadIfQosProfileLookupIndex=cadIfQosProfileLookupIndex, cadCmtsCmStatusMacChNumStartRegistration=cadCmtsCmStatusMacChNumStartRegistration, cadTpFdbStatus=cadTpFdbStatus, cadChannelToCmTable=cadChannelToCmTable, cadArpNetAddress=cadArpNetAddress, cadCmDenyRecentTime=cadCmDenyRecentTime, cadIfCmtsCmCountsSignalNoise=cadIfCmtsCmCountsSignalNoise, cadIfCmtsCmStatusProvFlaps=cadIfCmtsCmStatusProvFlaps, cadCmDenyMacAddress=cadCmDenyMacAddress, cadCpeHostAuthCpeMacAddress=cadCpeHostAuthCpeMacAddress, cadCmtsCmStatusMacChSummaryEntry=cadCmtsCmStatusMacChSummaryEntry, cadSubMgtSubFilterDownstream=cadSubMgtSubFilterDownstream, cadCmtsCmStatusMacNumRfMuteAll=cadCmtsCmStatusMacNumRfMuteAll, cadQosServiceClassTable=cadQosServiceClassTable, cadSubMgtCmFilterEntry=cadSubMgtCmFilterEntry, cadEnforceRulePenaltyDuration=cadEnforceRulePenaltyDuration, cadCmtsCmStatusMacNumStartRegistration=cadCmtsCmStatusMacNumStartRegistration, cadIfCmtsCmStatusTftpEnforceFailed=cadIfCmtsCmStatusTftpEnforceFailed, cadCmtsCmStatusMacNumOther=cadCmtsCmStatusMacNumOther, cadQosServiceFlowSidClusterTable=cadQosServiceFlowSidClusterTable, cadQosCmtsMacToSrvFlowTable=cadQosCmtsMacToSrvFlowTable, cadEnforceRuleAvgHistoryDuration=cadEnforceRuleAvgHistoryDuration, cadIfQosProfGuarUpBandwidth=cadIfQosProfGuarUpBandwidth, cadIfCmtsCmOfdmStatusMacAddress=cadIfCmtsCmOfdmStatusMacAddress, cadIf3CmtsCmRegStatusEnergyMgtEnabled=cadIf3CmtsCmRegStatusEnergyMgtEnabled, cadSubMgtCpeIpLearned=cadSubMgtCpeIpLearned, cadSubMgtStbFilterUpstream=cadSubMgtStbFilterUpstream, cadIfCmtsCmStatusInetIpAddress=cadIfCmtsCmStatusInetIpAddress, cadSubMgtCpeFilterUpstream=cadSubMgtCpeFilterUpstream, cadCmtsCmStatusMacNumProvFlaps=cadCmtsCmStatusMacNumProvFlaps, cadCmtsCmStatusMacChNumTotal=cadCmtsCmStatusMacChNumTotal, cadIfCmtsServiceEntry=cadIfCmtsServiceEntry, cadEnforceRuleStatus=cadEnforceRuleStatus, cadCmtsCmStatusNumRegistered=cadCmtsCmStatusNumRegistered, cadMacResetCMMacAddress=cadMacResetCMMacAddress, cadIfCmtsCmMac=cadIfCmtsCmMac, cadQosServiceClassPeakTrafficRate=cadQosServiceClassPeakTrafficRate, cadIfCmtsInetIpMac=cadIfCmtsInetIpMac, cadCmtsCmStatusMacChNumStartEae=cadCmtsCmStatusMacChNumStartEae, cadSubmgtFilterGrpId=cadSubmgtFilterGrpId, cadIfCmtsInetIpMacAddrType=cadIfCmtsInetIpMacAddrType, cadEnforceRuleCountsTable=cadEnforceRuleCountsTable, cadCmtsCmStatusMacNumCfgFileDownloadComplete=cadCmtsCmStatusMacNumCfgFileDownloadComplete, cadCmtsCmStatusMacChNumRfMuteAll=cadCmtsCmStatusMacChNumRfMuteAll, cadCmtsCmStatusNumAccessDenied=cadCmtsCmStatusNumAccessDenied, cadCmtsCmStatusMacChNumRangingComplete=cadCmtsCmStatusMacChNumRangingComplete, cadQosServiceClassEntry=cadQosServiceClassEntry, cadSubmgtFilterGrpDescTable=cadSubmgtFilterGrpDescTable, cadQosCmtsCmMac=cadQosCmtsCmMac, cadIfCmtsCmCountsTxPower=cadIfCmtsCmCountsTxPower, cadSubMgtMtaFilterUpstream=cadSubMgtMtaFilterUpstream, cadQosServiceClassControl=cadQosServiceClassControl, cadSubMgtPsFilterUpstream=cadSubMgtPsFilterUpstream, cadCmtsCmStatusMacNumStartCfgFileDownload=cadCmtsCmStatusMacNumStartCfgFileDownload, cadIfCmtsCmStatusDynamicSecretFailed=cadIfCmtsCmStatusDynamicSecretFailed, cadIfCmtsCmOfdmProfEntry=cadIfCmtsCmOfdmProfEntry, cadQosServiceFlowSidClusterChIfIndex=cadQosServiceFlowSidClusterChIfIndex, cadEnforceRuleEntry=cadEnforceRuleEntry, cadMacClearFlapCountMacAddr=cadMacClearFlapCountMacAddr, cadMacClearFlapCounts=cadMacClearFlapCounts, cadSubMgtSubFilterUpstream=cadSubMgtSubFilterUpstream, cadIfCmtsCmStatusTable=cadIfCmtsCmStatusTable, cadCmtsCmStatusMacChNumProvFlaps=cadCmtsCmStatusMacChNumProvFlaps, cadCmtsCmStatusNumIpComplete=cadCmtsCmStatusNumIpComplete, cadIfCmtsServiceQosProfile=cadIfCmtsServiceQosProfile, cadCmtsCmStatusMacNumDhcpv6Complete=cadCmtsCmStatusMacNumDhcpv6Complete, cadArpL3IfIndex=cadArpL3IfIndex, cadQosServiceFlowSidClusterUcid=cadQosServiceFlowSidClusterUcid, cadCmtsCmStatusMacNumStartDhcpv4=cadCmtsCmStatusMacNumStartDhcpv4, cadCmDenyStatusEntry=cadCmDenyStatusEntry, cadCmtsCmStatusMacSummaryEntry=cadCmtsCmStatusMacSummaryEntry, cadCmtsCmStatusMacChNumOther=cadCmtsCmStatusMacChNumOther, cadSubMgtCpeIpIndex=cadSubMgtCpeIpIndex, cadIfCmtsCmOfdmStatusOkOfdmaMod=cadIfCmtsCmOfdmStatusOkOfdmaMod, cadIfCmtsCmOfdmStatusEntry=cadIfCmtsCmOfdmStatusEntry, cadIfCmtsCmStatusMacAddress=cadIfCmtsCmStatusMacAddress, cadIfCmtsServiceCreateTime=cadIfCmtsServiceCreateTime, cadQosServiceClassControlSendDsc=cadQosServiceClassControlSendDsc, cadCmtsCmStatusMacChNumDhcpv6Complete=cadCmtsCmStatusMacChNumDhcpv6Complete, cadSubMgtCpeControlActive=cadSubMgtCpeControlActive, cadIfHVCmtsCmStatusInitRangTime=cadIfHVCmtsCmStatusInitRangTime, cadMacClearPenaltyCounts=cadMacClearPenaltyCounts, cadCmtsCmStatusNumTotal=cadCmtsCmStatusNumTotal, cadCmtsCmStatusMacNumStartEae=cadCmtsCmStatusMacNumStartEae, cadIfCmtsMacInetIpAddrType=cadIfCmtsMacInetIpAddrType, cadIfCmtsCmOfdmStatusDsHighFreq=cadIfCmtsCmOfdmStatusDsHighFreq, cadEnforceRuleTableLastChange=cadEnforceRuleTableLastChange, cadQosServiceClassCmControlTable=cadQosServiceClassCmControlTable, cadIfCmtsMacToIpTable=cadIfCmtsMacToIpTable, cadIfCmtsCmStatusNumber=cadIfCmtsCmStatusNumber, cadCmtsCmStatusNumActive=cadCmtsCmStatusNumActive, cadIf3CmtsCmStatsEm1x1ModeEntryTime=cadIf3CmtsCmStatsEm1x1ModeEntryTime, cadIfCmtsInetIpCpeMac=cadIfCmtsInetIpCpeMac, cadIf3CmtsCmRegStatusIPv6Addr=cadIf3CmtsCmRegStatusIPv6Addr, cadCmtsCmStatusMacNumForwardingDisabled=cadCmtsCmStatusMacNumForwardingDisabled, cadCmtsCmVendorEntry=cadCmtsCmVendorEntry, cadIfCmtsCmOfdmProfStatus=cadIfCmtsCmOfdmProfStatus, cadSubMgtCpeControlReset=cadSubMgtCpeControlReset, cadCpeHostAuthorizationTable=cadCpeHostAuthorizationTable, cadCmtsCmStatusNumOperational=cadCmtsCmStatusNumOperational, cadMacClearPenaltyCountScn=cadMacClearPenaltyCountScn, cadIf3CmtsCmRegStatusRcpId=cadIf3CmtsCmRegStatusRcpId, cadCpeHostAuthCmMacAddress=cadCpeHostAuthCmMacAddress, cadCmDenyStatusTable=cadCmDenyStatusTable, cadTpFdbIfIndex=cadTpFdbIfIndex, cadIfQosProfBaselinePrivacy=cadIfQosProfBaselinePrivacy, cadSubMgtCpeControlMaxCpeIpv6Addresses=cadSubMgtCpeControlMaxCpeIpv6Addresses, cadCmDenyEntry=cadCmDenyEntry, cadCpeHostAuthorizationEntry=cadCpeHostAuthorizationEntry, cadQosServiceClassControlSendDscLastUpdated=cadQosServiceClassControlSendDscLastUpdated, cadIfCmtsCmOfdmStatusDsLowFreq=cadIfCmtsCmOfdmStatusDsLowFreq, cadQosServiceFlowSidClusterEntry=cadQosServiceFlowSidClusterEntry, cadCmtsCmStatusMacChNumBpiInit=cadCmtsCmStatusMacChNumBpiInit, cadIfCmtsCmStatusLastFlapTime=cadIfCmtsCmStatusLastFlapTime, cadCmtsCmStatusNumOther=cadCmtsCmStatusNumOther, cadCmtsCmStatusMacChNumRegistrationComplete=cadCmtsCmStatusMacChNumRegistrationComplete, cadIfCmtsMacToInetIpTable=cadIfCmtsMacToInetIpTable, cadIfCmtsInetIpToCmMacTable=cadIfCmtsInetIpToCmMacTable, cadIf3CmtsCmRegStatusMdIfIndex=cadIf3CmtsCmRegStatusMdIfIndex, cadChannelToCmEntry=cadChannelToCmEntry, cadIfCmtsMacToInetIpEntry=cadIfCmtsMacToInetIpEntry, cadCmtsCmStatusMacNumStartDhcpv6=cadCmtsCmStatusMacNumStartDhcpv6, cadEnforceRuleCountsPenalties=cadEnforceRuleCountsPenalties, cadMacClearPenaltyCountMacAddr=cadMacClearPenaltyCountMacAddr, cadQosServiceClassLatencyControlledFlowFlag=cadQosServiceClassLatencyControlledFlowFlag, cadEnforceRuleSamplingInterval=cadEnforceRuleSamplingInterval, cadIfCmtsMacToInetIpCmMacAddr=cadIfCmtsMacToInetIpCmMacAddr, cadCmtsCmStatusSummaryEntry=cadCmtsCmStatusSummaryEntry, cadIfCmtsCmStatusRangFlaps=cadIfCmtsCmStatusRangFlaps, cadArpType=cadArpType, cadIfQosProfMaxDownBandwidth=cadIfQosProfMaxDownBandwidth, cadIfCmtsCmStatusDsPenalties=cadIfCmtsCmStatusDsPenalties, cadCmtsCmStatusNumRegFlaps=cadCmtsCmStatusNumRegFlaps, cadIfCmtsCmCountsEntry=cadIfCmtsCmCountsEntry, cadCmtsCmStatusMacChNumStartCfgFileDownload=cadCmtsCmStatusMacChNumStartCfgFileDownload, cadCmtsCmStatusMacChNumRegFlaps=cadCmtsCmStatusMacChNumRegFlaps, cadEnforceRuleCreateTime=cadEnforceRuleCreateTime, cadCmtsCmStatusNumRangingAborted=cadCmtsCmStatusNumRangingAborted, cadQosCmtsIfIndex=cadQosCmtsIfIndex, cadCpeHostAuthCpeIpAddress=cadCpeHostAuthCpeIpAddress, cadIfCmtsMacCmMacAddr=cadIfCmtsMacCmMacAddr, cadIfCmtsCmCountsRxPower=cadIfCmtsCmCountsRxPower, cadIfCmtsCmStatusConfigFilename=cadIfCmtsCmStatusConfigFilename, cadIfHVCmtsCmStatusLastFlapTime=cadIfHVCmtsCmStatusLastFlapTime, cadCmtsCmStatusMacChNumForwardingDisabled=cadCmtsCmStatusMacChNumForwardingDisabled, cadIfCmtsCmOfdmProfIfIndex=cadIfCmtsCmOfdmProfIfIndex, cadMacDeleteMacAddress=cadMacDeleteMacAddress, cadSubMgtCpeIpTable=cadSubMgtCpeIpTable, cadCmDenyTable=cadCmDenyTable, cadIfCmtsCmStatusPreFlapStatus=cadIfCmtsCmStatusPreFlapStatus, cadIfCmtsCmStatusUpChannelIfIndex=cadIfCmtsCmStatusUpChannelIfIndex, cadArpMacAddress=cadArpMacAddress, cadCmtsCmStatusNumRegisteredBpiInitializing=cadCmtsCmStatusNumRegisteredBpiInitializing, cadCpeHostAuthRowStatus=cadCpeHostAuthRowStatus, cadCmtsCmStatusMacChNumRangFlaps=cadCmtsCmStatusMacChNumRangFlaps, cadIfCmtsCmOfdmProfMacAddress=cadIfCmtsCmOfdmProfMacAddress, cadIfCmtsInetIpToCmMacEntry=cadIfCmtsInetIpToCmMacEntry, cadQosCmtsServiceFlowId=cadQosCmtsServiceFlowId, cadIfQosProfileLookupTable=cadIfQosProfileLookupTable, cadMacClearFlapCountsByIfIndex=cadMacClearFlapCountsByIfIndex, cadIfCmtsCmCountsRangeReqOpportunities=cadIfCmtsCmCountsRangeReqOpportunities, cadCmtsCmStatusMacNumRangFlaps=cadCmtsCmStatusMacNumRangFlaps, cadCmtsCmStatusMacSummaryTable=cadCmtsCmStatusMacSummaryTable, cadIf3CmtsCmRegStatusEnergyMgtCapability=cadIf3CmtsCmRegStatusEnergyMgtCapability, cadIfQosProfileLookupEntry=cadIfQosProfileLookupEntry, cadIf3CmtsCmRegStatusMdCmSgId=cadIf3CmtsCmRegStatusMdCmSgId, cadIfCmtsCmPtr=cadIfCmtsCmPtr, cadCmtsCmStatusMacChNumCfgFileDownloadComplete=cadCmtsCmStatusMacChNumCfgFileDownloadComplete, cadIfCmtsCmStatusModulationType=cadIfCmtsCmStatusModulationType, cadCmtsCmStatusMacChNumOperational=cadCmtsCmStatusMacChNumOperational, cadIfQosProfMaxTxBurst=cadIfQosProfMaxTxBurst)
mibBuilder.exportSymbols("CADANT-CMTS-MAC-MIB", cadSubMgtCpeIpEntry=cadSubMgtCpeIpEntry, cadSubMgtCmFilterDownstream=cadSubMgtCmFilterDownstream, cadIfCmtsServiceMacAddress=cadIfCmtsServiceMacAddress, cadMacClearPenaltyCountsByIfIndex=cadMacClearPenaltyCountsByIfIndex, cadSubMgtCpeControlEntry=cadSubMgtCpeControlEntry, cadCmtsCmStatusMacNumOperational=cadCmtsCmStatusMacNumOperational, cadIfCmtsCmCountsUncorrectables=cadIfCmtsCmCountsUncorrectables, cadMacClearDenyCountMacAddr=cadMacClearDenyCountMacAddr, cadIfQosProfileLookupRefCount=cadIfQosProfileLookupRefCount, cadIfCmtsCmStatusRxAcPowerLost=cadIfCmtsCmStatusRxAcPowerLost, cadCmtsCmVendorTable=cadCmtsCmVendorTable, cadCmtsCmStatusMacNumBpiInit=cadCmtsCmStatusMacNumBpiInit, cadCmDenyRecentIfIndex=cadCmDenyRecentIfIndex, cadCmtsCmStatusNumRangingComplete=cadCmtsCmStatusNumRangingComplete, cadIfCmtsCmStatusUsPenalties=cadIfCmtsCmStatusUsPenalties, cadSubMgtCpeControlMaxCpeIpv4=cadSubMgtCpeControlMaxCpeIpv4, cadEnforceRuleReferenceSCN=cadEnforceRuleReferenceSCN, cadQosCmtsMacToSrvFlowEntry=cadQosCmtsMacToSrvFlowEntry, cadArpEntry=cadArpEntry, cadIfQosProfMaxUpBandwidth=cadIfQosProfMaxUpBandwidth, cadCmtsCmStatusMacChSummaryTable=cadCmtsCmStatusMacChSummaryTable, cadIfCmtsCmStatusInetIpAddrType=cadIfCmtsCmStatusInetIpAddrType, cadCmtsCmStatusMacChNumStartDhcpv4=cadCmtsCmStatusMacChNumStartDhcpv4, cadMacControl=cadMacControl, cadSubMgtCpeIpMacAddr=cadSubMgtCpeIpMacAddr, cadSubMgtMtaFilterDownstream=cadSubMgtMtaFilterDownstream, CadIfCmtsCmStatusType=CadIfCmtsCmStatusType, cadIfCmtsMacToInetIpAddrType=cadIfCmtsMacToInetIpAddrType, cadQosServiceClassCmControlEntry=cadQosServiceClassCmControlEntry, cadSubMgtPsFilterDownstream=cadSubMgtPsFilterDownstream, cadIf3CmtsCmRegStatusIPv6LinkLocal=cadIf3CmtsCmRegStatusIPv6LinkLocal, cadArpAddressType=cadArpAddressType, cadSubMgtCpeControlLastReset=cadSubMgtCpeControlLastReset, cadIfCmtsCmCountsUnerroreds=cadIfCmtsCmCountsUnerroreds, cadCmtsCmStatusSummaryTable=cadCmtsCmStatusSummaryTable, cadIfCmtsCmCountsCorrecteds=cadIfCmtsCmCountsCorrecteds, cadSubmgtFilterGrpDescription=cadSubmgtFilterGrpDescription, cadIfCmtsCmStatusRegFlaps=cadIfCmtsCmStatusRegFlaps, cadEnforceRuleAvgBwRateUsageTrigger=cadEnforceRuleAvgBwRateUsageTrigger, cadIfCmtsCmStatusCmPtr=cadIfCmtsCmStatusCmPtr, cadIf3CmtsCmRegStatusRcsId=cadIf3CmtsCmRegStatusRcsId, cadSubMgtCpeControlLearnable=cadSubMgtCpeControlLearnable, cadIfCmtsCmStatusValue=cadIfCmtsCmStatusValue, cadIfCmtsMacToInetIpAddr=cadIfCmtsMacToInetIpAddr, cadIfCmtsCmStatusLastDsPenaltyDuration=cadIfCmtsCmStatusLastDsPenaltyDuration, cadCmtsCmStatusMacNumInitRanging=cadCmtsCmStatusMacNumInitRanging, cadQosServiceClassCmControlSendDscMacAddr=cadQosServiceClassCmControlSendDscMacAddr, cadIf3CmtsCmRegStatusServiceType=cadIf3CmtsCmRegStatusServiceType, cadQosServiceFlowSegHdr=cadQosServiceFlowSegHdr, cadEnforceRuleCountsEntry=cadEnforceRuleCountsEntry, cadSubMgtCmFilterUpstream=cadSubMgtCmFilterUpstream, cadIfCmtsCmOfdmStatusOkOfdmMod=cadIfCmtsCmOfdmStatusOkOfdmMod, cadCmtsCmVendorRowStatus=cadCmtsCmVendorRowStatus, cadIfCmtsCmStatusBpiEnabled=cadIfCmtsCmStatusBpiEnabled)
