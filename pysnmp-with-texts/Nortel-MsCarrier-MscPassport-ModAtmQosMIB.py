#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-ModAtmQosMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-ModAtmQosMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
mscModIndex, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscModIndex")
mscModFrs, mscModFrsIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-ModCommonMIB", "mscModFrs", "mscModFrsIndex")
Unsigned32, DisplayString, StorageType, Integer32, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Unsigned32", "DisplayString", "StorageType", "Integer32", "RowStatus")
NonReplicated, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, Bits, ModuleIdentity, IpAddress, Integer32, TimeTicks, Counter32, iso, Gauge32, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Bits", "ModuleIdentity", "IpAddress", "Integer32", "TimeTicks", "Counter32", "iso", "Gauge32", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
modAtmQosMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75))
mscModFrsAtmNet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2))
mscModFrsAtmNetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 1), )
if mibBuilder.loadTexts: mscModFrsAtmNetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetRowStatusTable.setDescription('This entry controls the addition and deletion of mscModFrsAtmNet components.')
mscModFrsAtmNetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscModIndex"), (0, "Nortel-MsCarrier-MscPassport-ModCommonMIB", "mscModFrsIndex"), (0, "Nortel-MsCarrier-MscPassport-ModAtmQosMIB", "mscModFrsAtmNetIndex"))
if mibBuilder.loadTexts: mscModFrsAtmNetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetRowStatusEntry.setDescription('A single entry in the table represents a single mscModFrsAtmNet component.')
mscModFrsAtmNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscModFrsAtmNetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscModFrsAtmNet components. These components cannot be added nor deleted.')
mscModFrsAtmNetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscModFrsAtmNetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscModFrsAtmNetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscModFrsAtmNetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetStorageType.setDescription('This variable represents the storage type value for the mscModFrsAtmNet tables.')
mscModFrsAtmNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscModFrsAtmNetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetIndex.setDescription('This variable represents the index for the mscModFrsAtmNet tables.')
mscModFrsAtmNetProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 10), )
if mibBuilder.loadTexts: mscModFrsAtmNetProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetProvTable.setDescription('This group contains information related to the Frame Relay to ATM interworking.')
mscModFrsAtmNetProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscModIndex"), (0, "Nortel-MsCarrier-MscPassport-ModCommonMIB", "mscModFrsIndex"), (0, "Nortel-MsCarrier-MscPassport-ModAtmQosMIB", "mscModFrsAtmNetIndex"))
if mibBuilder.loadTexts: mscModFrsAtmNetProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetProvEntry.setDescription('An entry in the mscModFrsAtmNetProvTable.')
mscModFrsAtmNetRetryTimerPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscModFrsAtmNetRetryTimerPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetRetryTimerPeriod.setDescription('This attribute specifies the module wide retry timer interval for failed SPVC calls using Frame Relay to ATM Networking. Changes to this attribute will take effect on subsequent call setups.')
mscModFrsAtmNetTpm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2))
mscModFrsAtmNetTpmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 1), )
if mibBuilder.loadTexts: mscModFrsAtmNetTpmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmRowStatusTable.setDescription('This entry controls the addition and deletion of mscModFrsAtmNetTpm components.')
mscModFrsAtmNetTpmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscModIndex"), (0, "Nortel-MsCarrier-MscPassport-ModCommonMIB", "mscModFrsIndex"), (0, "Nortel-MsCarrier-MscPassport-ModAtmQosMIB", "mscModFrsAtmNetIndex"), (0, "Nortel-MsCarrier-MscPassport-ModAtmQosMIB", "mscModFrsAtmNetTpmIndex"))
if mibBuilder.loadTexts: mscModFrsAtmNetTpmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmRowStatusEntry.setDescription('A single entry in the table represents a single mscModFrsAtmNetTpm component.')
mscModFrsAtmNetTpmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscModFrsAtmNetTpm components. These components can be added.')
mscModFrsAtmNetTpmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscModFrsAtmNetTpmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmStorageType.setDescription('This variable represents the storage type value for the mscModFrsAtmNetTpm tables.')
mscModFrsAtmNetTpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscModFrsAtmNetTpmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmIndex.setDescription('This variable represents the index for the mscModFrsAtmNetTpm tables.')
mscModFrsAtmNetTpmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 2), )
if mibBuilder.loadTexts: mscModFrsAtmNetTpmProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmProvTable.setDescription('This group specifies the mapping from Frame Relay parameters to ATM parameters for a Frame Relay using the defined transfer priority.')
mscModFrsAtmNetTpmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 2, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscModIndex"), (0, "Nortel-MsCarrier-MscPassport-ModCommonMIB", "mscModFrsIndex"), (0, "Nortel-MsCarrier-MscPassport-ModAtmQosMIB", "mscModFrsAtmNetIndex"), (0, "Nortel-MsCarrier-MscPassport-ModAtmQosMIB", "mscModFrsAtmNetTpmIndex"))
if mibBuilder.loadTexts: mscModFrsAtmNetTpmProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmProvEntry.setDescription('An entry in the mscModFrsAtmNetTpmProvTable.')
mscModFrsAtmNetTpmEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmEmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmEmissionPriority.setDescription('This attribute specifies the egress emission priority at the FR to ATM interface. A value of 3 specifies the highest priority, whereas a value of 0 specifies the lowest priority.')
mscModFrsAtmNetTpmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ubr", 0), ("cbr", 1), ("rtVbr", 2), ("nrtVbr", 3))).clone('nrtVbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmAtmServiceCategory.setDescription('This attribute specifies the ATM class of service value to be used on a transport connection.')
mscModFrsAtmNetTpmAvgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8187)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmAvgFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmAvgFrameSize.setDescription('This attribute specifies the average frame size that is used in the traffic parameter conversion policy calculations for this transfer priority to determine the overhead factor for FR to ATM interworking. The overhead factor affects the granularity of the bandwidth requirements. The values should be identical across the network. Otherwise, there may result in bandwidth conversion inconsistencies.')
mscModFrsAtmNetTpmTrafficParmConversionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6))).clone('n6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmTrafficParmConversionPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmTrafficParmConversionPolicy.setDescription('This attribute specifies the traffic parameter conversion policy to use for this transfer priority to specify the equivalent bandwidth rate at the FrAtm interface. Policy 3 characterizes the traffic in the following way: - ATM traffic descriptor type 6 is selected - PCR0+1 is based on the AR - SCR0+1 is based on the CIR and EIR - MBS0+1 is based on Bc,Be,CIR,EIR and AR - Takes into account that the instananeous rate of the frame relay stream can burst above CIR and up tp the AR. Policy 4 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer. - PCR0+1 is based on the AR - SCR0 is based on the CIR - MBS0 is based on Bc,CIR and AR - There is no direct characterization of EIR. The allowed EIR can be derived using the difference between the AR and CIR. Policy 5 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected . Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer - PCR0+1 is based on CIR and EIR - SCR0 is based on the CIR - MBS0 is based on the Bc,CIR and AR - The maximum PCR is no longer based on AR but based on the CIR and EIR. Policy 6 characterizes the traffic in the following way: - ATM traffic descriptor type 3 is selected - PCR0+1 is based only on CIR.')
mscModFrsAtmNetTpmAssignedBandwidthPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 16, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscModFrsAtmNetTpmAssignedBandwidthPool.setStatus('mandatory')
if mibBuilder.loadTexts: mscModFrsAtmNetTpmAssignedBandwidthPool.setDescription('This attribute specifies the bandwidth pool which is used to support this transfer priority. The bandwidth pool is defined in the frAtm Ca component.')
modAtmQosGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 1))
modAtmQosGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 1, 1))
modAtmQosGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 1, 1, 3))
modAtmQosGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 1, 1, 3, 2))
modAtmQosCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 3))
modAtmQosCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 3, 1))
modAtmQosCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 3, 1, 3))
modAtmQosCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 75, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-ModAtmQosMIB", mscModFrsAtmNetTpmRowStatusTable=mscModFrsAtmNetTpmRowStatusTable, modAtmQosGroupCA=modAtmQosGroupCA, mscModFrsAtmNetTpmStorageType=mscModFrsAtmNetTpmStorageType, mscModFrsAtmNetRowStatusEntry=mscModFrsAtmNetRowStatusEntry, modAtmQosCapabilities=modAtmQosCapabilities, mscModFrsAtmNetRetryTimerPeriod=mscModFrsAtmNetRetryTimerPeriod, mscModFrsAtmNetTpmEmissionPriority=mscModFrsAtmNetTpmEmissionPriority, mscModFrsAtmNetProvEntry=mscModFrsAtmNetProvEntry, mscModFrsAtmNetTpmProvTable=mscModFrsAtmNetTpmProvTable, modAtmQosGroupCA02A=modAtmQosGroupCA02A, modAtmQosGroupCA02=modAtmQosGroupCA02, modAtmQosCapabilitiesCA=modAtmQosCapabilitiesCA, mscModFrsAtmNetTpmTrafficParmConversionPolicy=mscModFrsAtmNetTpmTrafficParmConversionPolicy, mscModFrsAtmNetProvTable=mscModFrsAtmNetProvTable, mscModFrsAtmNetIndex=mscModFrsAtmNetIndex, mscModFrsAtmNetRowStatusTable=mscModFrsAtmNetRowStatusTable, mscModFrsAtmNetComponentName=mscModFrsAtmNetComponentName, mscModFrsAtmNetStorageType=mscModFrsAtmNetStorageType, mscModFrsAtmNetTpmAtmServiceCategory=mscModFrsAtmNetTpmAtmServiceCategory, modAtmQosMIB=modAtmQosMIB, modAtmQosCapabilitiesCA02A=modAtmQosCapabilitiesCA02A, mscModFrsAtmNetTpmAvgFrameSize=mscModFrsAtmNetTpmAvgFrameSize, mscModFrsAtmNetTpmRowStatus=mscModFrsAtmNetTpmRowStatus, modAtmQosGroup=modAtmQosGroup, mscModFrsAtmNetTpmAssignedBandwidthPool=mscModFrsAtmNetTpmAssignedBandwidthPool, mscModFrsAtmNetRowStatus=mscModFrsAtmNetRowStatus, mscModFrsAtmNetTpmRowStatusEntry=mscModFrsAtmNetTpmRowStatusEntry, mscModFrsAtmNetTpm=mscModFrsAtmNetTpm, mscModFrsAtmNet=mscModFrsAtmNet, mscModFrsAtmNetTpmIndex=mscModFrsAtmNetTpmIndex, modAtmQosCapabilitiesCA02=modAtmQosCapabilitiesCA02, mscModFrsAtmNetTpmComponentName=mscModFrsAtmNetTpmComponentName, mscModFrsAtmNetTpmProvEntry=mscModFrsAtmNetTpmProvEntry)
