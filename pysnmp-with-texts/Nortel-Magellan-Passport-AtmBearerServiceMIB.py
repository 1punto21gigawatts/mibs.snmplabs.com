#
# PySNMP MIB module Nortel-Magellan-Passport-AtmBearerServiceMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-AtmBearerServiceMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
atmIfVptVccIndex, atmIfVptVcc, atmIfVccIndex, atmIfVptIndex, atmIfVpcIndex, atmIfVpc, atmIfVcc, atmIfIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex", "atmIfVptVcc", "atmIfVccIndex", "atmIfVptIndex", "atmIfVpcIndex", "atmIfVpc", "atmIfVcc", "atmIfIndex")
DisplayString, RowStatus, StorageType = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "RowStatus", "StorageType")
Link, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "NonReplicated")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, IpAddress, MibIdentifier, NotificationType, Gauge32, iso, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "IpAddress", "MibIdentifier", "NotificationType", "Gauge32", "iso", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Integer32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
atmBearerServiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64))
atmIfVpcNrp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4))
atmIfVpcNrpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 1), )
if mibBuilder.loadTexts: atmIfVpcNrpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVpcNrp components.')
atmIfVpcNrpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmBearerServiceMIB", "atmIfVpcNrpIndex"))
if mibBuilder.loadTexts: atmIfVpcNrpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVpcNrp component.')
atmIfVpcNrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVpcNrp components. These components can be added and deleted.')
atmIfVpcNrpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcNrpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVpcNrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcNrpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpStorageType.setDescription('This variable represents the storage type value for the atmIfVpcNrp tables.')
atmIfVpcNrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVpcNrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpIndex.setDescription('This variable represents the index for the atmIfVpcNrp tables.')
atmIfVpcNrpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100), )
if mibBuilder.loadTexts: atmIfVpcNrpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpProvTable.setDescription('This group contains the provisionable attributes for the Nrp component.')
atmIfVpcNrpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmBearerServiceMIB", "atmIfVpcNrpIndex"))
if mibBuilder.loadTexts: atmIfVpcNrpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpProvEntry.setDescription('An entry in the atmIfVpcNrpProvTable.')
atmIfVpcNrpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1, 10), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpNextHop.setDescription('This attribute specifies the Nrp component with which this Nrp is associated. A sample value is AtmIf/31 Vcc/0.32 Nrp.')
atmIfVpcNrpConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("segmentEndPoint", 1), ("connectingPoint", 2), ("autoConfigure", 4))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpConnectionPointType.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVpcNrpConnectionPointType.setDescription("This attribute specifies the connection point type desired for a Nrp component. The actual connection point type value is visible in the parent component's connectionPointType attribute. The desired connection point type can be specified directly as a segmentEndPoint or connectingPoint. If autoConfigure is specified, the switch will select the connection point type based on the type attribute of the associated AtmIf, choosing segmentEndPoint for a UNI-type ATM interface and connectingPoint for a PPI-type ATM interface. It is obsoleted. The value is mapped into oamSegmentBoundary attribute. segmentEndPoint is mapped into yes. connectingPoint is mapped into no. autoConfigure is mapped into sameAsInterface.")
atmIfVpcNrpOamSegmentBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpOamSegmentBoundary.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpOamSegmentBoundary.setDescription("This attribute specifies the OAM segment boundary desired for a Nrp component. It affects the connection point type value visible in the parent component's connectionPointType attribute. The desired OAM segment boundary can be specified directly as yes, no or sameAsInterface. If sameAsInterface is specified, the OAM segment boundary is same as the oamSegmentBoundary attribute of the associated AtmIf and the switch will set the connectionPointType, choosing segmentEndPoint for a segment- boundary ATM interface and connectingPoint for a non-segment- boundary ATM interface.")
atmIfVpcNrpTxAal5PartialPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpTxAal5PartialPacketDiscard.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVpcNrpTxAal5PartialPacketDiscard.setDescription("This attribute is obsolete in P4.2 and has been migrated under Vcd (Vpd) component. This attribute specifies whether the AAL5 Partial Packet Discard (PPD) feature has been enabled or disabled on the Nrp in the transmit direction. This feature allows the NRP to discard the remainder of a cell-forwarded AAL5 frame if a cell of this frame has been discarded due to congestion. This increases the 'goodput' of the link, since cells which are only going to be discarded by the AAL5 reassembly are not transmitted. When this attribute is set to enabled, the PPD feature is applied in the transmit direction. It should only be enabled for connections whose end points are performing AAL5 segmentation and reassembly. When this attribute is set to disabled, the PPD feature is not applied to traffic for this connection in the transmit direction. Note that specifying enabled for a non-AAL5 connection will cause all traffic to be discarded once congestion is encountered.")
atmIfVpcNrpRxAal5PartialPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("sameAsTx", 2))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpRxAal5PartialPacketDiscard.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVpcNrpRxAal5PartialPacketDiscard.setDescription("This attribute is obsolete in P4.2 and has been migrated under Vcd (Vpd) component. This attribute specifies whether the AAL5 Partial Packet Discard (PPD) feature has been enabled or disabled on the Nrp in the receive direction. This feature allows the NRP to discard the remainder of a cell-forwarded AAL5 frame if a cell of this frame has been discarded due to congestion or usage parameter control (UPC). This increases the 'goodput' of the link, since cells which are only going to be discarded by the AAL5 reassembly are not transmitted. When this attribute is set to enabled, the PPD feature is applied in the receive direction. It should only be enabled for connections whose end points are performing AAL5 segmentation and reassembly. When this attribute is set to disabled, the PPD feature is not applied to traffic for this connection in the receive direction. When this attribute is set to sameAsTx, the PPD feature for traffic in the receive direction will be configured the same way as it is in the transmit direction. Note that specifying enabled for a non-AAL5 connection will cause all traffic to be discarded once congestion is encountered.")
atmIfVpcNrpBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpBandwidthElastic.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpBandwidthElastic.setDescription('This attribute is only of importance for connections which are carried on a link with a variable bandwidth. For example, the bandwidth may be reduced in the event that one or more physical links in the IMA group fail, such that the originally requested bandwidth cannot be maintained. This attribute shows whether the application running on this connection can continue to operate if the bandwidth is reduced. If the bandwidth is reduced, the amount by which it is reduced will be displayed in the bandwidthReduction attribute. A value of yes, indicates that this connection is elastic, and the bandwidth may be reduced but the connection will not be released. Currently, this attribute should only be set to yes for situations where this Nrp is functioning as a loopback on one side of an IMA link. There are no other situations where this setting is valid. A value of no indicates that the bandwidth for this connection will not be reduced in the event of link bandwidth reduction. However, this connection may be released based on its holdingPriority.')
atmIfVpcNrpOverrideHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 4, 100, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("noOverride", 6))).clone('noOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcNrpOverrideHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVpcNrpOverrideHoldingPriority.setDescription('This attribute specifies the holding priority of this connection. Holding priority is used when there is an IMA group where some physical links have failed. Holding priority determines the order in which connections are released. 4 is the lowest holding priority and is released first. 0 is a higher priority and is released last. The value specified in this attribute will override whatever holdingPriority that has been provisioned at the Vcd (or Vpd). If the value is left at the default of noOverride, the holdingPriority provisioned at the Vcd (or Vpd) will be used.')
atmIfVccNrp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4))
atmIfVccNrpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 1), )
if mibBuilder.loadTexts: atmIfVccNrpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVccNrp components.')
atmIfVccNrpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmBearerServiceMIB", "atmIfVccNrpIndex"))
if mibBuilder.loadTexts: atmIfVccNrpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVccNrp component.')
atmIfVccNrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVccNrp components. These components can be added and deleted.')
atmIfVccNrpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccNrpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVccNrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccNrpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpStorageType.setDescription('This variable represents the storage type value for the atmIfVccNrp tables.')
atmIfVccNrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccNrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpIndex.setDescription('This variable represents the index for the atmIfVccNrp tables.')
atmIfVccNrpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100), )
if mibBuilder.loadTexts: atmIfVccNrpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpProvTable.setDescription('This group contains the provisionable attributes for the Nrp component.')
atmIfVccNrpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmBearerServiceMIB", "atmIfVccNrpIndex"))
if mibBuilder.loadTexts: atmIfVccNrpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpProvEntry.setDescription('An entry in the atmIfVccNrpProvTable.')
atmIfVccNrpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1, 10), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpNextHop.setDescription('This attribute specifies the Nrp component with which this Nrp is associated. A sample value is AtmIf/31 Vcc/0.32 Nrp.')
atmIfVccNrpConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("segmentEndPoint", 1), ("connectingPoint", 2), ("autoConfigure", 4))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpConnectionPointType.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVccNrpConnectionPointType.setDescription("This attribute specifies the connection point type desired for a Nrp component. The actual connection point type value is visible in the parent component's connectionPointType attribute. The desired connection point type can be specified directly as a segmentEndPoint or connectingPoint. If autoConfigure is specified, the switch will select the connection point type based on the type attribute of the associated AtmIf, choosing segmentEndPoint for a UNI-type ATM interface and connectingPoint for a PPI-type ATM interface. It is obsoleted. The value is mapped into oamSegmentBoundary attribute. segmentEndPoint is mapped into yes. connectingPoint is mapped into no. autoConfigure is mapped into sameAsInterface.")
atmIfVccNrpOamSegmentBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpOamSegmentBoundary.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpOamSegmentBoundary.setDescription("This attribute specifies the OAM segment boundary desired for a Nrp component. It affects the connection point type value visible in the parent component's connectionPointType attribute. The desired OAM segment boundary can be specified directly as yes, no or sameAsInterface. If sameAsInterface is specified, the OAM segment boundary is same as the oamSegmentBoundary attribute of the associated AtmIf and the switch will set the connectionPointType, choosing segmentEndPoint for a segment- boundary ATM interface and connectingPoint for a non-segment- boundary ATM interface.")
atmIfVccNrpTxAal5PartialPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpTxAal5PartialPacketDiscard.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVccNrpTxAal5PartialPacketDiscard.setDescription("This attribute is obsolete in P4.2 and has been migrated under Vcd (Vpd) component. This attribute specifies whether the AAL5 Partial Packet Discard (PPD) feature has been enabled or disabled on the Nrp in the transmit direction. This feature allows the NRP to discard the remainder of a cell-forwarded AAL5 frame if a cell of this frame has been discarded due to congestion. This increases the 'goodput' of the link, since cells which are only going to be discarded by the AAL5 reassembly are not transmitted. When this attribute is set to enabled, the PPD feature is applied in the transmit direction. It should only be enabled for connections whose end points are performing AAL5 segmentation and reassembly. When this attribute is set to disabled, the PPD feature is not applied to traffic for this connection in the transmit direction. Note that specifying enabled for a non-AAL5 connection will cause all traffic to be discarded once congestion is encountered.")
atmIfVccNrpRxAal5PartialPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("sameAsTx", 2))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpRxAal5PartialPacketDiscard.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVccNrpRxAal5PartialPacketDiscard.setDescription("This attribute is obsolete in P4.2 and has been migrated under Vcd (Vpd) component. This attribute specifies whether the AAL5 Partial Packet Discard (PPD) feature has been enabled or disabled on the Nrp in the receive direction. This feature allows the NRP to discard the remainder of a cell-forwarded AAL5 frame if a cell of this frame has been discarded due to congestion or usage parameter control (UPC). This increases the 'goodput' of the link, since cells which are only going to be discarded by the AAL5 reassembly are not transmitted. When this attribute is set to enabled, the PPD feature is applied in the receive direction. It should only be enabled for connections whose end points are performing AAL5 segmentation and reassembly. When this attribute is set to disabled, the PPD feature is not applied to traffic for this connection in the receive direction. When this attribute is set to sameAsTx, the PPD feature for traffic in the receive direction will be configured the same way as it is in the transmit direction. Note that specifying enabled for a non-AAL5 connection will cause all traffic to be discarded once congestion is encountered.")
atmIfVccNrpBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpBandwidthElastic.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpBandwidthElastic.setDescription('This attribute is only of importance for connections which are carried on a link with a variable bandwidth. For example, the bandwidth may be reduced in the event that one or more physical links in the IMA group fail, such that the originally requested bandwidth cannot be maintained. This attribute shows whether the application running on this connection can continue to operate if the bandwidth is reduced. If the bandwidth is reduced, the amount by which it is reduced will be displayed in the bandwidthReduction attribute. A value of yes, indicates that this connection is elastic, and the bandwidth may be reduced but the connection will not be released. Currently, this attribute should only be set to yes for situations where this Nrp is functioning as a loopback on one side of an IMA link. There are no other situations where this setting is valid. A value of no indicates that the bandwidth for this connection will not be reduced in the event of link bandwidth reduction. However, this connection may be released based on its holdingPriority.')
atmIfVccNrpOverrideHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 4, 100, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("noOverride", 6))).clone('noOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNrpOverrideHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVccNrpOverrideHoldingPriority.setDescription('This attribute specifies the holding priority of this connection. Holding priority is used when there is an IMA group where some physical links have failed. Holding priority determines the order in which connections are released. 4 is the lowest holding priority and is released first. 0 is a higher priority and is released last. The value specified in this attribute will override whatever holdingPriority that has been provisioned at the Vcd (or Vpd). If the value is left at the default of noOverride, the holdingPriority provisioned at the Vcd (or Vpd) will be used.')
atmIfVptVccNrp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4))
atmIfVptVccNrpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 1), )
if mibBuilder.loadTexts: atmIfVptVccNrpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptVccNrp components.')
atmIfVptVccNrpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmBearerServiceMIB", "atmIfVptVccNrpIndex"))
if mibBuilder.loadTexts: atmIfVptVccNrpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptVccNrp component.')
atmIfVptVccNrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptVccNrp components. These components can be added and deleted.')
atmIfVptVccNrpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccNrpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptVccNrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccNrpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpStorageType.setDescription('This variable represents the storage type value for the atmIfVptVccNrp tables.')
atmIfVptVccNrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccNrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpIndex.setDescription('This variable represents the index for the atmIfVptVccNrp tables.')
atmIfVptVccNrpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100), )
if mibBuilder.loadTexts: atmIfVptVccNrpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpProvTable.setDescription('This group contains the provisionable attributes for the Nrp component.')
atmIfVptVccNrpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmBearerServiceMIB", "atmIfVptVccNrpIndex"))
if mibBuilder.loadTexts: atmIfVptVccNrpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpProvEntry.setDescription('An entry in the atmIfVptVccNrpProvTable.')
atmIfVptVccNrpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1, 10), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpNextHop.setDescription('This attribute specifies the Nrp component with which this Nrp is associated. A sample value is AtmIf/31 Vcc/0.32 Nrp.')
atmIfVptVccNrpConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("segmentEndPoint", 1), ("connectingPoint", 2), ("autoConfigure", 4))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpConnectionPointType.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVptVccNrpConnectionPointType.setDescription("This attribute specifies the connection point type desired for a Nrp component. The actual connection point type value is visible in the parent component's connectionPointType attribute. The desired connection point type can be specified directly as a segmentEndPoint or connectingPoint. If autoConfigure is specified, the switch will select the connection point type based on the type attribute of the associated AtmIf, choosing segmentEndPoint for a UNI-type ATM interface and connectingPoint for a PPI-type ATM interface. It is obsoleted. The value is mapped into oamSegmentBoundary attribute. segmentEndPoint is mapped into yes. connectingPoint is mapped into no. autoConfigure is mapped into sameAsInterface.")
atmIfVptVccNrpOamSegmentBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpOamSegmentBoundary.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpOamSegmentBoundary.setDescription("This attribute specifies the OAM segment boundary desired for a Nrp component. It affects the connection point type value visible in the parent component's connectionPointType attribute. The desired OAM segment boundary can be specified directly as yes, no or sameAsInterface. If sameAsInterface is specified, the OAM segment boundary is same as the oamSegmentBoundary attribute of the associated AtmIf and the switch will set the connectionPointType, choosing segmentEndPoint for a segment- boundary ATM interface and connectingPoint for a non-segment- boundary ATM interface.")
atmIfVptVccNrpTxAal5PartialPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpTxAal5PartialPacketDiscard.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVptVccNrpTxAal5PartialPacketDiscard.setDescription("This attribute is obsolete in P4.2 and has been migrated under Vcd (Vpd) component. This attribute specifies whether the AAL5 Partial Packet Discard (PPD) feature has been enabled or disabled on the Nrp in the transmit direction. This feature allows the NRP to discard the remainder of a cell-forwarded AAL5 frame if a cell of this frame has been discarded due to congestion. This increases the 'goodput' of the link, since cells which are only going to be discarded by the AAL5 reassembly are not transmitted. When this attribute is set to enabled, the PPD feature is applied in the transmit direction. It should only be enabled for connections whose end points are performing AAL5 segmentation and reassembly. When this attribute is set to disabled, the PPD feature is not applied to traffic for this connection in the transmit direction. Note that specifying enabled for a non-AAL5 connection will cause all traffic to be discarded once congestion is encountered.")
atmIfVptVccNrpRxAal5PartialPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("sameAsTx", 2))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpRxAal5PartialPacketDiscard.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVptVccNrpRxAal5PartialPacketDiscard.setDescription("This attribute is obsolete in P4.2 and has been migrated under Vcd (Vpd) component. This attribute specifies whether the AAL5 Partial Packet Discard (PPD) feature has been enabled or disabled on the Nrp in the receive direction. This feature allows the NRP to discard the remainder of a cell-forwarded AAL5 frame if a cell of this frame has been discarded due to congestion or usage parameter control (UPC). This increases the 'goodput' of the link, since cells which are only going to be discarded by the AAL5 reassembly are not transmitted. When this attribute is set to enabled, the PPD feature is applied in the receive direction. It should only be enabled for connections whose end points are performing AAL5 segmentation and reassembly. When this attribute is set to disabled, the PPD feature is not applied to traffic for this connection in the receive direction. When this attribute is set to sameAsTx, the PPD feature for traffic in the receive direction will be configured the same way as it is in the transmit direction. Note that specifying enabled for a non-AAL5 connection will cause all traffic to be discarded once congestion is encountered.")
atmIfVptVccNrpBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpBandwidthElastic.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpBandwidthElastic.setDescription('This attribute is only of importance for connections which are carried on a link with a variable bandwidth. For example, the bandwidth may be reduced in the event that one or more physical links in the IMA group fail, such that the originally requested bandwidth cannot be maintained. This attribute shows whether the application running on this connection can continue to operate if the bandwidth is reduced. If the bandwidth is reduced, the amount by which it is reduced will be displayed in the bandwidthReduction attribute. A value of yes, indicates that this connection is elastic, and the bandwidth may be reduced but the connection will not be released. Currently, this attribute should only be set to yes for situations where this Nrp is functioning as a loopback on one side of an IMA link. There are no other situations where this setting is valid. A value of no indicates that the bandwidth for this connection will not be reduced in the event of link bandwidth reduction. However, this connection may be released based on its holdingPriority.')
atmIfVptVccNrpOverrideHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 4, 100, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("noOverride", 6))).clone('noOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNrpOverrideHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptVccNrpOverrideHoldingPriority.setDescription('This attribute specifies the holding priority of this connection. Holding priority is used when there is an IMA group where some physical links have failed. Holding priority determines the order in which connections are released. 4 is the lowest holding priority and is released first. 0 is a higher priority and is released last. The value specified in this attribute will override whatever holdingPriority that has been provisioned at the Vcd (or Vpd). If the value is left at the default of noOverride, the holdingPriority provisioned at the Vcd (or Vpd) will be used.')
atmBearerServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 1))
atmBearerServiceGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 1, 5))
atmBearerServiceGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 1, 5, 1))
atmBearerServiceGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 1, 5, 1, 2))
atmBearerServiceCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 3))
atmBearerServiceCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 3, 5))
atmBearerServiceCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 3, 5, 1))
atmBearerServiceCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 64, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmBearerServiceMIB", atmIfVpcNrpProvEntry=atmIfVpcNrpProvEntry, atmIfVccNrpProvTable=atmIfVccNrpProvTable, atmIfVpcNrpRowStatus=atmIfVpcNrpRowStatus, atmIfVpcNrpNextHop=atmIfVpcNrpNextHop, atmIfVccNrpRowStatusTable=atmIfVccNrpRowStatusTable, atmIfVpcNrpComponentName=atmIfVpcNrpComponentName, atmIfVpcNrp=atmIfVpcNrp, atmIfVccNrpNextHop=atmIfVccNrpNextHop, atmIfVccNrpOverrideHoldingPriority=atmIfVccNrpOverrideHoldingPriority, atmIfVptVccNrpRowStatusEntry=atmIfVptVccNrpRowStatusEntry, atmIfVptVccNrpRxAal5PartialPacketDiscard=atmIfVptVccNrpRxAal5PartialPacketDiscard, atmIfVccNrpProvEntry=atmIfVccNrpProvEntry, atmBearerServiceGroupBE00A=atmBearerServiceGroupBE00A, atmIfVpcNrpRowStatusTable=atmIfVpcNrpRowStatusTable, atmBearerServiceGroupBE00=atmBearerServiceGroupBE00, atmBearerServiceCapabilitiesBE=atmBearerServiceCapabilitiesBE, atmIfVptVccNrpOamSegmentBoundary=atmIfVptVccNrpOamSegmentBoundary, atmIfVptVccNrpTxAal5PartialPacketDiscard=atmIfVptVccNrpTxAal5PartialPacketDiscard, atmBearerServiceGroupBE=atmBearerServiceGroupBE, atmIfVccNrpComponentName=atmIfVccNrpComponentName, atmIfVpcNrpStorageType=atmIfVpcNrpStorageType, atmIfVptVccNrpProvEntry=atmIfVptVccNrpProvEntry, atmIfVptVccNrpNextHop=atmIfVptVccNrpNextHop, atmBearerServiceCapabilitiesBE00=atmBearerServiceCapabilitiesBE00, atmIfVccNrpIndex=atmIfVccNrpIndex, atmIfVpcNrpRxAal5PartialPacketDiscard=atmIfVpcNrpRxAal5PartialPacketDiscard, atmIfVccNrpOamSegmentBoundary=atmIfVccNrpOamSegmentBoundary, atmIfVptVccNrp=atmIfVptVccNrp, atmBearerServiceCapabilitiesBE00A=atmBearerServiceCapabilitiesBE00A, atmIfVptVccNrpStorageType=atmIfVptVccNrpStorageType, atmIfVccNrp=atmIfVccNrp, atmIfVptVccNrpIndex=atmIfVptVccNrpIndex, atmIfVptVccNrpRowStatus=atmIfVptVccNrpRowStatus, atmIfVpcNrpIndex=atmIfVpcNrpIndex, atmIfVptVccNrpProvTable=atmIfVptVccNrpProvTable, atmIfVccNrpRowStatusEntry=atmIfVccNrpRowStatusEntry, atmIfVptVccNrpConnectionPointType=atmIfVptVccNrpConnectionPointType, atmIfVpcNrpBandwidthElastic=atmIfVpcNrpBandwidthElastic, atmIfVccNrpRxAal5PartialPacketDiscard=atmIfVccNrpRxAal5PartialPacketDiscard, atmIfVccNrpStorageType=atmIfVccNrpStorageType, atmIfVpcNrpTxAal5PartialPacketDiscard=atmIfVpcNrpTxAal5PartialPacketDiscard, atmIfVpcNrpConnectionPointType=atmIfVpcNrpConnectionPointType, atmIfVptVccNrpOverrideHoldingPriority=atmIfVptVccNrpOverrideHoldingPriority, atmIfVccNrpConnectionPointType=atmIfVccNrpConnectionPointType, atmIfVpcNrpOverrideHoldingPriority=atmIfVpcNrpOverrideHoldingPriority, atmIfVptVccNrpBandwidthElastic=atmIfVptVccNrpBandwidthElastic, atmBearerServiceMIB=atmBearerServiceMIB, atmIfVptVccNrpRowStatusTable=atmIfVptVccNrpRowStatusTable, atmIfVpcNrpProvTable=atmIfVpcNrpProvTable, atmIfVpcNrpOamSegmentBoundary=atmIfVpcNrpOamSegmentBoundary, atmIfVpcNrpRowStatusEntry=atmIfVpcNrpRowStatusEntry, atmIfVccNrpRowStatus=atmIfVccNrpRowStatus, atmIfVccNrpTxAal5PartialPacketDiscard=atmIfVccNrpTxAal5PartialPacketDiscard, atmIfVptVccNrpComponentName=atmIfVptVccNrpComponentName, atmBearerServiceCapabilities=atmBearerServiceCapabilities, atmIfVccNrpBandwidthElastic=atmIfVccNrpBandwidthElastic, atmBearerServiceGroup=atmBearerServiceGroup)
