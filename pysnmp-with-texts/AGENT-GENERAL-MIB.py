#
# PySNMP MIB module AGENT-GENERAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AGENT-GENERAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:15:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
dlink_common_mgmt, AgentNotifyLevel = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt", "AgentNotifyLevel")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Counter64, IpAddress, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Counter64", "IpAddress", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "Gauge32")
DisplayString, TruthValue, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "MacAddress", "TextualConvention", "RowStatus")
agentGeneralMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 1))
if mibBuilder.loadTexts: agentGeneralMgmt.setLastUpdated('201103020000Z')
if mibBuilder.loadTexts: agentGeneralMgmt.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: agentGeneralMgmt.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: agentGeneralMgmt.setDescription('The structure of general management information for enterprise.')
class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses. This is a binary string of 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class UnitList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 3)

agentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 1))
agentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setStatus('current')
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
agentMibCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2), )
if mibBuilder.loadTexts: agentMibCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityTable.setDescription('A list of MIB capability entries supported by this agent.')
agentMibCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentMibCapabilityIndex"))
if mibBuilder.loadTexts: agentMibCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityEntry.setDescription('A MIB capability entry containing objects that describe a particular MIB supported by this agent.')
agentMibCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityIndex.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityIndex.setDescription('A list of Agent MIB Capability Description entries.')
agentMibCapabilityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityDescr.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityDescr.setDescription('The name of the MIB supported by the agent.')
agentMibCapabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityVersion.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityVersion.setDescription('The version of the MIB specified in this entry.')
agentMibCapabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityType.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityType.setDescription('The type of MIB specified in this entry.')
agentStatusConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusConsoleInUse.setStatus('current')
if mibBuilder.loadTexts: agentStatusConsoleInUse.setDescription('This indicates whether the console is currently in use.')
agentStatusSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("proceeding", 2), ("completed", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusSaveCfg.setStatus('current')
if mibBuilder.loadTexts: agentStatusSaveCfg.setDescription('This indicates the status of the device configuration. other (1) - This entry is currently in use but the conditions under which it will remain so are determined by each of the following values. proceeding (2) - The device configuration is currently being saved into NV-RAM. completed (3) - All of the device configuration parameters have been saved into NV-RAM. failed (4) - The process to save the device configuration has failed.')
agentStatusFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("in-process", 2), ("invalid-file", 3), ("violation", 4), ("file-not-found", 5), ("disk-full", 6), ("complete", 7), ("time-out", 8), ("not-format", 9), ("memory-full", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusFileTransfer.setStatus('current')
if mibBuilder.loadTexts: agentStatusFileTransfer.setDescription("The status of the firmware download control. If the value is stated as 'other', the firmware has not been updated since the device was started.")
agentCPUutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6))
agentCPUutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5sec.setStatus('current')
if mibBuilder.loadTexts: agentCPUutilizationIn5sec.setDescription('The time scale is set at 5 second intervals. The value will be between 0% (idle) and 100% (very busy).')
agentCPUutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn1min.setStatus('current')
if mibBuilder.loadTexts: agentCPUutilizationIn1min.setDescription('The time scale is set at 1 minute intervals. The value will be between 0% (idle) and 100% (very busy).')
agentCPUutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5min.setStatus('current')
if mibBuilder.loadTexts: agentCPUutilizationIn5min.setDescription('The time scale is set at 5 minute intervals. The value will be between 0% (idle) and 100% (very busy).')
agentDualImageStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-supported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDualImageStatus.setStatus('current')
if mibBuilder.loadTexts: agentDualImageStatus.setDescription('The dual image status.')
agentPORTutilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8), )
if mibBuilder.loadTexts: agentPORTutilizationTable.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationTable.setDescription('This table specifies the current utilization of a specified port.')
agentPORTutilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentPORTutilizationProtIndex"))
if mibBuilder.loadTexts: agentPORTutilizationEntry.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationEntry.setDescription('A list of information regarding the port utilization function.')
agentPORTutilizationProtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationProtIndex.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationProtIndex.setDescription("This object indicates the module's port number.")
agentPORTutilizationTX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationTX.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationTX.setDescription('The current rate of transmitted frames on the specified port.')
agentPORTutilizationRX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationRX.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationRX.setDescription('The current rate of received frames on the specified port.')
agentPORTutilizationUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationUtil.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationUtil.setDescription('The current percentages regarding port statistics.')
agentDRAMutilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9), )
if mibBuilder.loadTexts: agentDRAMutilizationTable.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationTable.setDescription('Information about DRAM memory.')
agentDRAMutilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentDRAMutilizationUnitID"))
if mibBuilder.loadTexts: agentDRAMutilizationEntry.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationEntry.setDescription('A list of information about DRAM memory.')
agentDRAMutilizationUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilizationUnitID.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationUnitID.setDescription('Specifies the unit ID. If the ID equals zero, it means the current device.')
agentDRAMutilizationTotalDRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 2), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilizationTotalDRAM.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationTotalDRAM.setDescription('The size of total DRAM memory.')
agentDRAMutilizationUsedDRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 3), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilizationUsedDRAM.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationUsedDRAM.setDescription('The size of used DRAM memory.')
agentDRAMutilization = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilization.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilization.setDescription('The percentage of used DRAM memory of the total DRAM memory available. The value will be between 0% (idle) and 100% (very busy).')
agentFLASHutilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 10), )
if mibBuilder.loadTexts: agentFLASHutilizationTable.setStatus('current')
if mibBuilder.loadTexts: agentFLASHutilizationTable.setDescription('Information about the flash memory.')
agentFLASHutilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 10, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentFLASHutilizationUnitID"))
if mibBuilder.loadTexts: agentFLASHutilizationEntry.setStatus('current')
if mibBuilder.loadTexts: agentFLASHutilizationEntry.setDescription('Information about the flash memory.')
agentFLASHutilizationUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFLASHutilizationUnitID.setStatus('current')
if mibBuilder.loadTexts: agentFLASHutilizationUnitID.setDescription('Specifies the unit ID. If the ID equals zero, it means the current device.')
agentFLASHutilizationTotalFLASH = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 10, 1, 2), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFLASHutilizationTotalFLASH.setStatus('current')
if mibBuilder.loadTexts: agentFLASHutilizationTotalFLASH.setDescription('The total size of flash memory.')
agentFLASHutilizationUsedFLASH = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 10, 1, 3), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFLASHutilizationUsedFLASH.setStatus('current')
if mibBuilder.loadTexts: agentFLASHutilizationUsedFLASH.setDescription('The size of the used flash memory.')
agentFLASHutilization = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFLASHutilization.setStatus('current')
if mibBuilder.loadTexts: agentFLASHutilization.setDescription('The percentage of used flash memory in total flash memory. The value will be between 0% (idle) and 100% (very busy).')
agentStatusReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proceeding", 1), ("completed", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusReset.setStatus('current')
if mibBuilder.loadTexts: agentStatusReset.setDescription("This indicates the status of 'agentReset'.")
agentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentSerialNumber.setDescription('A text string containing the serial number of this device.')
agentFirmwareType = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFirmwareType.setStatus('current')
if mibBuilder.loadTexts: agentFirmwareType.setDescription('A text string containing the firmware type.')
agentBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2))
agentBscSwFileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1), )
if mibBuilder.loadTexts: agentBscSwFileTable.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileTable.setDescription('A list of MIB Basic Config entry support files updated by this agent.')
agentBscSwFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentBscSwFileIndex"))
if mibBuilder.loadTexts: agentBscSwFileEntry.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileEntry.setDescription('A basic configuration entry containing the objects that describe a particular MIB supported by this agent.')
agentBscSwFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBscSwFileIndex.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileIndex.setDescription('The table index for the file entry')
agentBscSwFileDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileDscr.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileDscr.setDescription('The description of the software file purpose in this entry. Note: For systems that do not support a change to this object, setting a value for this object will cause the system to return bad-value error messages.')
agentBscSwFileAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileAddr.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileAddr.setDescription('The IP address where the file that needs to be downloaded is located, or the IP address where the file will be uploaded to.')
agentBscSwFileTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileTransferType.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileTransferType.setDescription('The channel through which the file will be downloaded or uploaded. Note: For systems that do not support all channels, setting a value to the unsupported channel will cause the system to return bad-value error messages.')
agentBscSwFile = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFile.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFile.setDescription('The name of the file to be downloaded from, or uploaded to, the TFTP server.')
agentBscSwFileLocateId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLocateId.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileLocateId.setDescription('This object describes the type of file. runtime-code (1), log-file (2), cfg-file (3) Note: For systems that do not support changes to this object, setting a value for this object will cause the system to return bad-value error messages.')
agentBscSwFileLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLoadType.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileLoadType.setDescription('This object provides the user with a choice of uploading or downloading the selected file. Note: For systems that do not support a change to this object, setting a value for this object will cause the system to return bad-value error messages.')
agentBscSwFileCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("start", 3), ("delete", 4), ("config-as-bootup", 5), ("apply", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileCtrl.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileCtrl.setDescription('This object gives the user the option of downloading runtime software. This setting will take effect when the system restarts. See Note (1) below Note: For systems that do not support changes to this object, setting a value to this object will cause the system to return bad-value error messages. start - Activate firmware. delete (4) - Delete the firmware by indicated firmware ID. config-as-bootup (5) - Configured as bootup firmware by the indicated firmware(ID). apply (6) - Apply the configuration to be the active configuration by the indicated config ID.')
agentBscSwFileBIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileBIncrement.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileBIncrement.setDescription('This object indicates whether the previous configuration will remain valid or not after downloading the configuration file. True: Keep valid False: Erase. ')
agentBscSwFileCtrlID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileCtrlID.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileCtrlID.setDescription('The section ID of the firmware image or configuration file. A value of 0 indicates the boot-up firmware image or configuration file.')
agentBscSwFileCtrlUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 11), UnitList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileCtrlUnitID.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileCtrlUnitID.setDescription('Specifies which unit of the switch stack the firmware image will be downloaded from. One or more units can be set in this list. Each bit from the left to the right represents the switch from unit ID 1 to unit ID 12. A null entry in this field denotes all switches in the switch stack.')
agentBscSwFileIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 12), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileIPv6Addr.setDescription('The IPv6 address where the file will be downloaded from or uploaded to.')
agentBscSwFileBootUpImage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileBootUpImage.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileBootUpImage.setDescription('The result of the download will depend on whether the boot_up option is specified. Case 1: In the case where the master unit provides the file system and the slave unit does not provide the file system, when boot_up is specified, the file will be downloaded to the boot_up image on the slave. If boot_up is not specified, then the file will not be downloaded to this slave unit. Case 2: In the case where the master unit does not provide the file system and the slave unit provides the file system, when boot_up is specified, the file will be downloaded to the boot_up image on the slave unit. If boot_up is not specified, the file will not be downloaded to this slave unit. Case 3: In the case where the master unit and the slave unit both support or do not support the file system, the file will be downloaded to the specified file on the slave unit. If boot_up is specified, the downloaded file will be assigned as the boot_up image. True: boot_up option is specified. False: boot_up option is not specified. ')
agentBscSwFileForceAgree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileForceAgree.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileForceAgree.setDescription('When the force_agree option is specified, the reboot command will be executed immediately, without any further confirmation from the user. True: force_agree option is specified. False: force_agree option is not specified. ')
agentBscSwFileInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileInterfaceName.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileInterfaceName.setDescription('This node is used to specify the interface name when the agentBscSwFileIPv6Addr is the link local address.')
agentBscSwFileServerDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileServerDomainName.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileServerDomainName.setDescription('This object indicates the domain name of the TFTP server.')
agentFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("start-and-reset", 3), ("noaction", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileTransfer.setStatus('obsolete')
if mibBuilder.loadTexts: agentFileTransfer.setDescription('This object will execute the download or upload action. If start (2) is chosen, it will begin to download/upload and no reset will follow. If start-and-reset (3) is chosen, then the reset will be activated after completing the download or upload. No action if noaction (4) is chosen. Note: Because these functions will be limited by the support for the system in question, some of the selected items will be invalid. When the user selects an invalid entry, the system will respond with a bad-value status.')
agentSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cold-start", 2), ("warm-start", 3), ("no-reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemReset.setStatus('deprecated')
if mibBuilder.loadTexts: agentSystemReset.setDescription("This object indicates the agent system reset state. Setting this object to no-reset (4) has no effect. Setting this object to cold-start (2) or warm-start (3) will reset the agent. The agent always returns to no-reset (4) when this object is read. This object is replaced by 'agentReset'.")
agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3), ("notAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRs232PortConfig.setStatus('current')
if mibBuilder.loadTexts: agentRs232PortConfig.setDescription('This object indicates the RS-232C mode once the device has restarted.')
agentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-115200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setStatus('obsolete')
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setDescription('This object allows the user to specify an out-of-band baud rate, which will take effect upon system restart. Note: Because these functions will be limited by the support for the system in question, some of the selected items will be invalid. When the user selects an invalid entry, the system will respond with a bad-value error message. ')
agentSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("cfg-id1", 2), ("cfg-id2", 3), ("log", 4), ("all", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveCfg.setStatus('current')
if mibBuilder.loadTexts: agentSaveCfg.setDescription('This object indicates the type of save command to be executed, when saving to NV-RAM. other (1) - None of the following. cfg-id1 (2) - Save configuration ID1. cfg-id2 (3)- Save configuration ID2. log (4) - Save log. all (5) - Save both (active configuration and log).')
swMultiImageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7), )
if mibBuilder.loadTexts: swMultiImageInfoTable.setStatus('current')
if mibBuilder.loadTexts: swMultiImageInfoTable.setDescription('')
swMultiImageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "swMultiImageInfoID"))
if mibBuilder.loadTexts: swMultiImageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swMultiImageInfoEntry.setDescription('A list of information about multiple image management.')
swMultiImageInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageInfoID.setStatus('current')
if mibBuilder.loadTexts: swMultiImageInfoID.setDescription('The stacking section ID of the firmware image. The stacking section ID = 256 * Unit ID + Image File ID.')
swMultiImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageVersion.setStatus('current')
if mibBuilder.loadTexts: swMultiImageVersion.setDescription('The recorded downloaded firmware version.')
swMultiImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageSize.setStatus('current')
if mibBuilder.loadTexts: swMultiImageSize.setDescription('The recorded downloaded firmware size.')
swMultiImageUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageUpdateTime.setStatus('current')
if mibBuilder.loadTexts: swMultiImageUpdateTime.setDescription('The recorded firmware update time.')
swMultiImageFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageFrom.setStatus('current')
if mibBuilder.loadTexts: swMultiImageFrom.setDescription('The recorded IP address of the TFTP server')
swMultiImageSendUser = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageSendUser.setStatus('current')
if mibBuilder.loadTexts: swMultiImageSendUser.setDescription('The record of the user who downloaded the firmware.')
swMultiImageFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageFileName.setStatus('current')
if mibBuilder.loadTexts: swMultiImageFileName.setDescription('When the system is set to boot from SD card, this object will display the recorded path name of the boot firmware file. ')
agentMultiCfgMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8))
swMultiCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1), )
if mibBuilder.loadTexts: swMultiCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgInfoTable.setDescription('')
swMultiCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "swMultiCfgInfoID"))
if mibBuilder.loadTexts: swMultiCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgInfoEntry.setDescription('A list of information about multiple configuration files.')
swMultiCfgInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgInfoID.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgInfoID.setDescription('The section ID of the configuration files.')
swMultiCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgVersion.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgVersion.setDescription('The recorded downloaded configuration version.')
swMultiCfgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgSize.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgSize.setDescription('The recorded downloaded configuration size (in bytes). ')
swMultiCFgUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCFgUpdateTime.setStatus('current')
if mibBuilder.loadTexts: swMultiCFgUpdateTime.setDescription('The recorded configuration update time displayed in string format, i.e. yyyy/mon/dd hh:mm:ss.')
swMultiCfgFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgFrom.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgFrom.setDescription('The recorded IP address of the TFTP server.')
swMultiCfgSendUser = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgSendUser.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgSendUser.setDescription('The record of the user who downloaded the configuration file')
swMultiCfgFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgFileName.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgFileName.setDescription('When the system is set to boot from SD card, this object displays the recorded path name of the boot configuration file. ')
swMultiCfgCurrentUsed = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgCurrentUsed.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgCurrentUsed.setDescription('The indicated configuration file ID of the system currently in use.')
swMultiCfgBootUp = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgBootUp.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgBootUp.setDescription('This object indicates the configuration file ID which will take effect upon the next reboot.')
swMultiCfgCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 4), )
if mibBuilder.loadTexts: swMultiCfgCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgCtrlTable.setDescription('')
swMultiCfgCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 4, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "swMultiCfgCtrlID"))
if mibBuilder.loadTexts: swMultiCfgCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgCtrlEntry.setDescription('A list of information about multiple configuration management.')
swMultiCfgCtrlID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cfgId-1", 1), ("cfgId-2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiCfgCtrlID.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgCtrlID.setDescription('The section ID of the configuration file.')
swMultiCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("delete", 2), ("apply", 3), ("none", 4), ("config-as-bootup-cfg", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMultiCfgAction.setStatus('current')
if mibBuilder.loadTexts: swMultiCfgAction.setDescription(' save: Save configuration to active configuration ID when the parameter is omitted. active: Set any valid configuration as the active configuration. delete: Removes the configuration from the flash memory. This configuration cannot be the active or current configuration file. apply: Loads the indicated configuration file and applies it to the system. config-as-bootup-cfg: Configured as the boot-up configuration by the indicated configuration(ID).')
systemSeverityControlMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 9))
systemSeverityTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 9, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSeverityTrapControl.setStatus('current')
if mibBuilder.loadTexts: systemSeverityTrapControl.setDescription('Indicates the level of trap severity control. The system has a severity level control and each trap should have a severity control set. When trap events occur and its severity is higher than the system severity control level, the trap works as defined. If the event severity is lower than the system severity control level, the event is ignored as if it did not occur.')
systemSeverityLogControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 9, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSeverityLogControl.setStatus('current')
if mibBuilder.loadTexts: systemSeverityLogControl.setDescription('Indicates the level of trap severity control. The system has a severity level control and each trap should have a severity control set. When trap events occur and its severity is higher than the system severity control level, the trap works as defined. If the event severity is lower than the system severity control level, the event is ignored as if it did not occur.')
agentTrustedHostMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10))
agentTrustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1), )
if mibBuilder.loadTexts: agentTrustedHostTable.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostTable.setDescription('This table contains the trusted host information.')
agentTrustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentTrustedHostIndex"))
if mibBuilder.loadTexts: agentTrustedHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostEntry.setDescription('A list of information about the trusted hosts.')
agentTrustedHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrustedHostIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostIndex.setDescription('The index of the trusted host entry.')
agentTrustedHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostIPAddress.setDescription('Specifies the IP address of the trusted host.')
agentTrustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostRowStatus.setDescription('Indicates the status of this entry. When creating a trusted host entry, the IP address should also be set.')
agentTrustedHostIPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostIPSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostIPSubnetMask.setDescription('Specifies the IP subnet mask of the trusted host.')
agentTrustedHostForSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostForSNMP.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostForSNMP.setDescription('Specifies the trusted host for SNMP.')
agentTrustedHostForTELNET = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostForTELNET.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostForTELNET.setDescription('Specifies the trusted host for Telnet.')
agentTrustedHostForSSH = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostForSSH.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostForSSH.setDescription('Specifies the trusted host for SSH.')
agentTrustedHostForHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostForHTTP.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostForHTTP.setDescription('Specifies the trusted host for HTTP.')
agentTrustedHostForHTTPS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostForHTTPS.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostForHTTPS.setDescription('Specifies the trusted host for HTTPS.')
agentTrustedHostForPING = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostForPING.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostForPING.setDescription('Specifies the trusted host for PING.')
agentTrustedHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 11), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostAddrType.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostAddrType.setDescription("The type of trusted host address as specified by the 'agentTrustedHostAddr' object.")
agentTrustedHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostAddr.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostAddr.setDescription('Specifies the IP address of the trusted host.')
agentTrustedHostIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustedHostIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostIPv6PrefixLen.setDescription('Specifies the IPv6 prefix length of the IPv6 trusted host.')
agentTrustedHostDelAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrustedHostDelAllState.setStatus('current')
if mibBuilder.loadTexts: agentTrustedHostDelAllState.setDescription('Used to delete all trusted host entries.')
agentFDBMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11))
agentFDBClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFDBClearAllState.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearAllState.setDescription('Used to clear all FDB entries.')
agentFDBClearByPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 2), )
if mibBuilder.loadTexts: agentFDBClearByPortTable.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearByPortTable.setDescription('Used to clear FDB entries by port.')
agentFDBClearByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 2, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentFDBClearPortIndex"))
if mibBuilder.loadTexts: agentFDBClearByPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearByPortEntry.setDescription('This is an entry of the agentFDBClearByPortTable.')
agentFDBClearPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentFDBClearPortIndex.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearPortIndex.setDescription('This object indicates the port number.')
agentFDBClearByPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFDBClearByPortAction.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearByPortAction.setDescription('This object indicates whether to clear FDB or not.')
agentFDBClearByVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 3), )
if mibBuilder.loadTexts: agentFDBClearByVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearByVlanTable.setDescription('Used to clear FDB entries by port.')
agentFDBClearByVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 3, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentFDBClearVid"))
if mibBuilder.loadTexts: agentFDBClearByVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearByVlanEntry.setDescription('This is an entry of agentFDBClearByPortTable.')
agentFDBClearVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: agentFDBClearVid.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearVid.setDescription('This object indicates the VLAN-ID.')
agentFDBClearByVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFDBClearByVlanAction.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearByVlanAction.setDescription('This object indicates whether to clear the FDB or not.')
agentFDBSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4), )
if mibBuilder.loadTexts: agentFDBSecurityTable.setStatus('current')
if mibBuilder.loadTexts: agentFDBSecurityTable.setDescription('Used to display the FDB entries that have been created by the security module.')
agentFDBSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentFDBVid"), (0, "AGENT-GENERAL-MIB", "agentFDBMacAddress"))
if mibBuilder.loadTexts: agentFDBSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: agentFDBSecurityEntry.setDescription('This is an entry of agentFDBSecurityTable.')
agentFDBVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: agentFDBVid.setStatus('current')
if mibBuilder.loadTexts: agentFDBVid.setDescription('This object indicates the VLAN-ID.')
agentFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: agentFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentFDBMacAddress.setDescription('This object indicates the MAC address.')
agentFDBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFDBPort.setStatus('current')
if mibBuilder.loadTexts: agentFDBPort.setDescription('This object indicates the port number.')
agentFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFDBType.setStatus('current')
if mibBuilder.loadTexts: agentFDBType.setDescription('This object indicates the MAC address type.')
agentFDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFDBStatus.setStatus('current')
if mibBuilder.loadTexts: agentFDBStatus.setDescription("This object indicates the MAC address's forwarding status.")
agentFDBSecurityModule = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dot1x", 1), ("wac", 2), ("jwac", 3), ("port-security", 4), ("mac-based-access-control", 5), ("compound-authentication", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFDBSecurityModule.setStatus('current')
if mibBuilder.loadTexts: agentFDBSecurityModule.setDescription('This object is used to indicate which security module created the current MAC address. dot1x: 802.1X. wac: Web-based Access Control. jwac: Web-Based Access Control extension for Japan. port-security: Port Security. mac-based-access-control: MAC-based Access Control. compound-authentication: Compound Authentication.')
agentARPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12))
agentARPClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentARPClearAllState.setStatus('current')
if mibBuilder.loadTexts: agentARPClearAllState.setDescription('Used to clear all ARP entries.')
agentGratuitousARPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2))
agentGratuitousARPSendIpifStatusUpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPSendIpifStatusUpState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPSendIpifStatusUpState.setDescription("This is used to enable/disable sending of gratuitous ARP request packets while the IPIF interface comes up. This is used to automatically announce the interface's IP address to other nodes. By default, the state is enabled, and only one ARP packet will be broadcast.")
agentGratuitousARPSendDupIpDetectedState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPSendDupIpDetectedState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPSendDupIpDetectedState.setDescription("This is used to enable/disable the sending of gratuitous ARP request packets while a duplicate IP is detected. By default, the state is enabled. The duplicate IP detected state indicates that the system has received an ARP request packet that was sent by an IP address that matches the system's own IP address. In this case, the system knows that somebody out there is using an IP address that is in conflict with the system. In order to reclaim the correct host of this IP address, the system can send out the gratuitous ARP request packet for this duplicate IP address.")
agentGratuitousARPLearningState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPLearningState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPLearningState.setDescription("This is used to enable/disable learning of an ARP entry in the ARP cache based on the received gratuitous ARP packet. If the switch receives a gratuitous ARP request/reply packet and the sender's IP address is in its ARP table, it should update the ARP entry. By default, the state is disabled.")
agentGratuitousARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4), )
if mibBuilder.loadTexts: agentGratuitousARPTable.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPTable.setDescription('Gratuitous ARP Table Information.')
agentGratuitousARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentGratuitousARPInterfaceName"))
if mibBuilder.loadTexts: agentGratuitousARPEntry.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPEntry.setDescription('A list of information from the Gratuitous ARP Table.')
agentGratuitousARPInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGratuitousARPInterfaceName.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPInterfaceName.setDescription('The name of the IP interface.')
agentGratuitousARPPeriodicalSendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPPeriodicalSendInterval.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPPeriodicalSendInterval.setDescription('This is used to configure the interval for the periodic sending of gratuitous ARP request packets. 0 means do not send gratuitous ARP request packets periodically.')
agentGratuitousARPTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPTrapState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPTrapState.setDescription('This indicates the state of the gratuitous ARP trap. The switch can trap the IP conflict events to inform the administrator. By default, the trap is disabled.')
agentGratuitousARPLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPLogState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPLogState.setDescription('This indicates the state of the gratuitous Log trap. The switch can log the IP conflict events to inform the administrator. By default, the event log is enabled.')
agentARPTotalARPEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentARPTotalARPEntries.setStatus('current')
if mibBuilder.loadTexts: agentARPTotalARPEntries.setDescription('Used to display the total number of ARP entries.')
agentARPRetryTimes = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentARPRetryTimes.setStatus('current')
if mibBuilder.loadTexts: agentARPRetryTimes.setDescription('This indicates the retry times of the ARP request.')
swMultiImageCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 13), )
if mibBuilder.loadTexts: swMultiImageCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swMultiImageCtrlTable.setDescription('')
swMultiImageCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 13, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "swMultiImageCtrlID"))
if mibBuilder.loadTexts: swMultiImageCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swMultiImageCtrlEntry.setDescription('A list of information about multiple image management.')
swMultiImageCtrlID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageCtrlID.setStatus('current')
if mibBuilder.loadTexts: swMultiImageCtrlID.setDescription('The stacking section ID of the firmware image. The stacking section ID = 256 * Unit ID + Image File ID.')
swMultiImageCtrlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("config-as-bootup-fw", 1), ("delete", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMultiImageCtrlAction.setStatus('current')
if mibBuilder.loadTexts: swMultiImageCtrlAction.setDescription('This object indicates the running status of the image which is specified by swMultiImageCtrlID and swMultiImageCtrlUnitID. config-as-bootup-fw (1) - Configured as the bootup firmware by the indicated firmware(ID). delete (2) - Delete the firmware by indicated firmware ID. none (3) - No action. ')
agentOutOfBandDataBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOutOfBandDataBits.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandDataBits.setDescription('This object indicates the out-of-band data bits.')
agentOutOfBandParityBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOutOfBandParityBits.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandParityBits.setDescription('This object indicates the out-of-band parity bits.')
agentOutOfBandStopBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOutOfBandStopBits.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandStopBits.setDescription('This object indicates the out-of-band stop bits.')
agentOutOfBandAutoLogoutConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("never", 1), ("minutes-2", 2), ("minutes-5", 3), ("minutes-10", 4), ("minutes-15", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandAutoLogoutConfig.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandAutoLogoutConfig.setDescription('This object allows the user to specify an out-of-band auto logout time.')
agentBscFileSystemMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18))
agentBscFileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1), )
if mibBuilder.loadTexts: agentBscFileSystemTable.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemTable.setDescription('A list of MIB File System Basic Configuration entries supported by the file update of this agent.')
agentBscFileSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentBscFileSystemIndex"))
if mibBuilder.loadTexts: agentBscFileSystemEntry.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemEntry.setDescription('A File System basic configuration entry that contains objects describing a particular MIB supported by this agent.')
agentBscFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBscFileSystemIndex.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemIndex.setDescription('The table index for the file entry. This object describes the file type. runtime-code (1), log-file (2), cfg-file (3), attack-log-file (7)')
agentBscFileSystemDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBscFileSystemDscr.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemDscr.setDescription('The description of the software file purpose in this entry.')
agentBscFileSystemServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemServerAddr.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemServerAddr.setDescription('The IP address where the file to be downloaded is located, or the IP address where the file will be uploaded to.')
agentBscFileSystemServerIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemServerIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemServerIPv6Addr.setDescription('The IPv6 address where the file is to be downloaded from or uploaded to.')
agentBscFileSystemServerFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemServerFileName.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemServerFileName.setDescription('The name of the file to be downloaded from or uploaded to the TFTP server. If agentBscFileSystemDeviceFileName is not set, the switch will default to using the bootup file as the runtime image for the switch.')
agentBscFileSystemDeviceDriverID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5), ("e", 6), ("f", 7), ("g", 8), ("h", 9), ("i", 10), ("j", 11), ("k", 12), ("l", 13), ("m", 14), ("n", 15), ("o", 16), ("p", 17), ("q", 18), ("r", 19), ("s", 20), ("t", 21), ("u", 22), ("v", 23), ("w", 24), ("x", 25), ("y", 26), ("z", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemDeviceDriverID.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemDeviceDriverID.setDescription('Specifies the drive of the device that the firmware to be uploaded/downloaded is located. If none (1) is specified, the switch will default to the current drive.')
agentBscFileSystemDeviceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemDeviceFileName.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemDeviceFileName.setDescription('The name of the file to be downloaded to the device, or uploaded from the device. When downloading or uploading, the agentBscFileSystemServerFileName object must also be set.')
agentBscFileSystemLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemLoadType.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemLoadType.setDescription('This object allows the user to select a download or upload function for the file. Note: For systems that do not support changes to this object, setting a value for this object will cause the system to return a bad-value error message. ')
agentBscFileSystemCtrlUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 9), UnitList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemCtrlUnitID.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemCtrlUnitID.setDescription('Specifies which unit of the switch stack the firmware image or configuration file should be downloaded from. One or more units can be set in this list. Each bit from left to right represents the switch from unit ID 1 to unit ID 12. If this list is set to null it represents all stack switches.')
agentBscFileSystemBootUpImage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemBootUpImage.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemBootUpImage.setDescription('The result of the download will depend on whether the boot_up option has been specified. Case 1: In the case of the master unit providing the file system and the slave unit not providing the file system, when the boot_up parameter is specified, then the file will be downloaded to the boot_up image on the slave. If the boot_up parameter is not specified, then the file will not be downloaded to this slave unit. Case 2: In the case of the master unit not providing the file system and the slave unit providing the file system, when the boot_up parameter is specified, then the file will be downloaded to the boot_up image on the slave unit. If boot_up is not specified, then the file will not be downloaded to this slave unit. Case 3: In the case of the master unit and the slave unit both supporting or not supporting the file system, the file will be downloaded to the specified file on the slave unit. If boot_up is specified, the downloaded file will be assigned as the boot_up image. True: boot_up option is specified. False: boot_up option is not specified.. ')
agentBscFileSystemForceAgree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemForceAgree.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemForceAgree.setDescription('When the force_agree option is specified, the reboot command will be executed immediately without any further confirmation from the user. True: force_agree option is specified. False: force_agree option is not specified.. ')
agentBscFileSystemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("start", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemCtrl.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemCtrl.setDescription('This object allows the user to download runtime software. The settings will take effect when the system restarts. See Note (1) below Note 1: For systems which do not support value changes to this object, setting these values will cause the system to return a bad-value error message start (3) - activate firmware. ')
agentBscFileSystemInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemInterfaceName.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemInterfaceName.setDescription('This node is used to specify the interface name when agentBscFileSystemServerIPv6Addr is the local link address.')
agentBscFileSystemServerDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemServerDomainName.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemServerDomainName.setDescription('This object indicates the domain name of the TFTP server.')
agentBscFileSystemIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemIncrement.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemIncrement.setDescription('If increment is specified, then the existing configuration will not be cleared before applying of the new configuration. If it is not specified, then the existing configuration will be cleared before applying of the new configuration. True : keep valid False : erase. ')
agentBscFileSystemSaveConfigDriverID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5), ("e", 6), ("f", 7), ("g", 8), ("h", 9), ("i", 10), ("j", 11), ("k", 12), ("l", 13), ("m", 14), ("n", 15), ("o", 16), ("p", 17), ("q", 18), ("r", 19), ("s", 20), ("t", 21), ("u", 22), ("v", 23), ("w", 24), ("x", 25), ("y", 26), ("z", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemSaveConfigDriverID.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemSaveConfigDriverID.setDescription('The drive on the device that the configuration file is will be saved to. If none (1) is specified, the switch places the file on the current drive by default.')
agentBscFileSystemSaveConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemSaveConfigFileName.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemSaveConfigFileName.setDescription('The name of the configuration file that will be saved to the device. When agentBscFileSystemSaveCfg is set to cfg (2), and if the agentBscFileSystemSaveConfigFileName is not null, the configuration file will be saved to the set file name. If set to null, the configuration file will be saved to the boot_up CFG file. ')
agentBscFileSystemSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cfg", 2), ("log", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileSystemSaveCfg.setStatus('current')
if mibBuilder.loadTexts: agentBscFileSystemSaveCfg.setDescription('This indicates the method of saving information to the NV-RAM of the device. other (1) - None of the following. cfg (2) - Save configuration. log (3) - Save log. all (4) - Save both ( active configuration and log).')
agentFileSystemConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 5), )
if mibBuilder.loadTexts: agentFileSystemConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentFileSystemConfigTable.setDescription('This table indicates the information about the bootup files.')
agentFileSystemConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 5, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentFileSystemUnit"))
if mibBuilder.loadTexts: agentFileSystemConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentFileSystemConfigEntry.setDescription('A list of information about the bootup files for each unit of the switch stack.')
agentFileSystemUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFileSystemUnit.setStatus('current')
if mibBuilder.loadTexts: agentFileSystemUnit.setDescription('The unit ID.')
agentFileSystemDriverID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5), ("e", 6), ("f", 7), ("g", 8), ("h", 9), ("i", 10), ("j", 11), ("k", 12), ("l", 13), ("m", 14), ("n", 15), ("o", 16), ("p", 17), ("q", 18), ("r", 19), ("s", 20), ("t", 21), ("u", 22), ("v", 23), ("w", 24), ("x", 25), ("y", 26), ("z", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileSystemDriverID.setStatus('current')
if mibBuilder.loadTexts: agentFileSystemDriverID.setDescription('The drive on the device that the configuration file will be saved to. If none (1) is specified, the switch will place the file to the current drive by default.')
agentFileSystemBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileSystemBootImage.setStatus('current')
if mibBuilder.loadTexts: agentFileSystemBootImage.setDescription('When displayed, it shows the current bootup image file name. When set, the set name will be set as the bootup image.')
agentFileSystemBootConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileSystemBootConfig.setStatus('current')
if mibBuilder.loadTexts: agentFileSystemBootConfig.setDescription('When displayed, it shows the current bootup configuration file name. When set, the set name will be set as the bootup configuration.')
agentFileSystemActConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 18, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileSystemActConfig.setStatus('current')
if mibBuilder.loadTexts: agentFileSystemActConfig.setDescription('When displayed, it shows null. When set, the set name will be active at once, but the set name will not be set as the bootup configuration.')
agentReboot = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReboot.setStatus('current')
if mibBuilder.loadTexts: agentReboot.setDescription('Used to restart the switch.')
agentReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("config", 2), ("system", 3), ("reset", 4), ("system-exclude-vlan", 5), ("system-exclude-ip", 6), ("system-exclude-vlan-ip", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReset.setStatus('current')
if mibBuilder.loadTexts: agentReset.setDescription('Used to reset all switch parameters. none (1): No action. This is the default value of this object. config (2): All parameters are reset to default settings. The device will neither save nor reboot. system (3): All parameters are reset to default settings. The switch will then do a factory reset, save, and reboot. reset (4) : All parameters will be reset to default settings except for the IP address, user account, and history log. The device will neither save nor reboot. system-exclude-vlan(5) : All parameters are reset to default settings except for VLAN. The switch will then save its settings and reboot. system-exclude-ip(6) : All parameters are reset to default settings except IP address. The switch will then save its settings and reboot. system-exclude-vlan-ip(7): All parameters are reset to default settings except VLAN and IP address. The switch will then save its settings and reboot. ')
agentFTPFileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21), )
if mibBuilder.loadTexts: agentFTPFileTable.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileTable.setDescription('A list of the MIB Basic Config entries support files updated by this agent.')
agentFTPFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentFTPFileIndex"))
if mibBuilder.loadTexts: agentFTPFileEntry.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileEntry.setDescription('A basic configuration entry containing the objects describing a particular MIB supported by this agent.')
agentFTPFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFTPFileIndex.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileIndex.setDescription('The table index for the file entry. This object describes the file type runtime-code (1), log-file (2), cfg-file (3)')
agentFTPFileDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileDscr.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileDscr.setDescription('The description of the software file purpose in this entry. Note: For systems which do not support changes to this object, setting a value for this object will cause the system to return bad-value error messages.')
agentFTPFileLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileLoadType.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileLoadType.setDescription('This object provides the user with a choice of uploading or downloading the selected file. Note: For systems which do not support a change of this object, setting a value to this object will cause the system to return bad-value error messages.')
agentFTPFileAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileAddr.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileAddr.setDescription('The IP address that the file to be downloaded is located on, or the IP address where the file will be uploaded to.')
agentFTPTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPTCPPort.setStatus('current')
if mibBuilder.loadTexts: agentFTPTCPPort.setDescription('The TCP port number being used to establish the command connection.')
agentFTPFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileName.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileName.setDescription('The name of the file to be downloaded from, or uploaded to, the FTP server.')
agentFTPUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPUserName.setStatus('current')
if mibBuilder.loadTexts: agentFTPUserName.setDescription('This is the user name to enter in upload/download. ')
agentFTPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPPassword.setStatus('current')
if mibBuilder.loadTexts: agentFTPPassword.setDescription('This is the password to enter for an upload/download.')
agentFTPFileCtrlID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileCtrlID.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileCtrlID.setDescription('The section ID of the firmware image or configuration file. A value of 0 indicates the boot-up firmware image or configuration file.')
agentFTPFileBIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileBIncrement.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileBIncrement.setDescription('This object indicates whether the previous configuration will remain valid or not after downloading the configuration file. True: Keep valid False: Erase. ')
agentFTPFileCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileCtrl.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileCtrl.setDescription('This object gives the user the option to download runtime software. The setting will take effect when the system restarts. See Note (1) below Note 1: For systems which do not support changes to this object, setting a value for this object will cause the system to return bad-value error messages. ')
agentFTPFileBootUpImage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileBootUpImage.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileBootUpImage.setDescription('This object indicates whether to set the special file as a boot up file or not. True: The boot-up option is specified. False: The boot-up option is not specified.')
agentFTPFileForceAgree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileForceAgree.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileForceAgree.setDescription('When the force-agree option is specified, the reboot command will be executed immediately without any further confirmation from the user. True: Force-agree option is specified. False: Force-agree option is not specified.')
agentFTPFileIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileIPv6Addr.setDescription('The IPv6 address where the file is to be downloaded from or uploaded to.')
agentFTPFileInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileInterfaceName.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileInterfaceName.setDescription('This node is used to specify the interface name when agentFTPFileIPv6Addr is the local link address. ')
agentFTPFileUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 21, 1, 16), UnitList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileUnitID.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileUnitID.setDescription('Specifies which unit of the switch stack the firmware image or configuration file should be downloaded from. One or more units can be set in this list. Each bit from left to right represents the switch from unit ID 1 to unit ID 12.If this list is set to null it represents all stack switches.')
agentSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapState.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapState.setDescription('This object indicates if the SNMP trap is enabled or disabled.')
agentOutOfBandMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 23))
agentOutOfBandMgmtState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandMgmtState.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandMgmtState.setDescription('Enables or disables the interface.')
agentOutOfBandMgmtIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 23, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandMgmtIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandMgmtIpAddr.setDescription('The IP address for out of band management. This object can only take the value of the unicast IP address.')
agentOutOfBandMgmtSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 23, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandMgmtSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandMgmtSubnetMask.setDescription('The IP net mask for out of band management.')
agentOutOfBandMgmtGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 23, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandMgmtGateway.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandMgmtGateway.setDescription('The gateway for out of band management. ')
agentOutOfBandMgmtLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link-up", 1), ("link-down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOutOfBandMgmtLinkStatus.setStatus('current')
if mibBuilder.loadTexts: agentOutOfBandMgmtLinkStatus.setDescription('The current Link status for out of band management.')
agentTrapMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24))
agentTrapColdStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapColdStart.setStatus('current')
if mibBuilder.loadTexts: agentTrapColdStart.setDescription('When enabled (1), whenever the device detects a cold start event, a trap will be sent out.')
agentTrapWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapWarmStart.setStatus('current')
if mibBuilder.loadTexts: agentTrapWarmStart.setDescription('When enabled (1), whenever the device detects a warm start event, a trap will be sent out.')
agentTrapRmonRisingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapRmonRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: agentTrapRmonRisingAlarm.setDescription('When enabled (1), whenever the device detects a RMON rising alarm event , a trap will be sent out.')
agentTrapRmonFallingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapRmonFallingAlarm.setStatus('current')
if mibBuilder.loadTexts: agentTrapRmonFallingAlarm.setDescription('When enabled (1), whenever the device detects a RMON falling alarm event, a trap will be sent out.')
agentTrapCfgSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapCfgSave.setStatus('current')
if mibBuilder.loadTexts: agentTrapCfgSave.setDescription('When enabled (1), whenever the device detects a configuration saving completed event, a trap will be sent out.')
agentTrapCfgUpload = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapCfgUpload.setStatus('current')
if mibBuilder.loadTexts: agentTrapCfgUpload.setDescription('When enabled (1), whenever the device detects a configuration uploading completed event, a trap will be sent out.')
agentTrapCfgDownload = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 24, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapCfgDownload.setStatus('current')
if mibBuilder.loadTexts: agentTrapCfgDownload.setDescription('When enabled (1), whenever the device detects a configuration downloading completed event, a trap will be sent out')
agentFTPFileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25), )
if mibBuilder.loadTexts: agentFTPFileSystemTable.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemTable.setDescription('The FTP management table for the file system')
agentFTPFileSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentFTPFileSystemIndex"))
if mibBuilder.loadTexts: agentFTPFileSystemEntry.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemEntry.setDescription('A File System basic configuration entry that contains objects describing a particular MIB supported by this agent.')
agentFTPFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 1), Integer32())
if mibBuilder.loadTexts: agentFTPFileSystemIndex.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemIndex.setDescription('The table index for the file entry.')
agentFTPFileSystemDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFTPFileSystemDscr.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemDscr.setDescription('The description of the software file purpose in this entry.')
agentFTPFileSystemLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemLoadType.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemLoadType.setDescription('This object allows the user to select a download or upload function for the file.')
agentFTPFileSystemAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemAddressType.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemAddressType.setDescription('The address type of agentFTPFileSystemAddress.')
agentFTPFileSystemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemAddress.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemAddress.setDescription('This object indicates the FTP server address.')
agentFTPFileSystemTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemTCPPort.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemTCPPort.setDescription('The TCP port number being used to establish the control connection.')
agentFTPFileSystemServerFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemServerFileName.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemServerFileName.setDescription('The name of the file to be downloaded from or uploaded to the FTP server.')
agentFTPFileSystemDeviceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemDeviceFileName.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemDeviceFileName.setDescription('The name of the file to be downloaded to the device, or uploaded from the device. If agentFTPFileSystemDeviceFileName is not set, the switch will default to the bootup file.')
agentFTPFileSystemUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemUserName.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemUserName.setDescription('This object indicates the user name to access the FTP server.')
agentFTPFileSystemPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemPassword.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemPassword.setDescription('This object indicates the password to access the FTP server.')
agentFTPFileSystemCtrlUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 11), UnitList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemCtrlUnitID.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemCtrlUnitID.setDescription('Specifies which unit of the switch stack the firmware image or configuration file should be downloaded from. One or more units can be set in this list. Each bit from left to right represents the switch from unit ID 1 to unit ID 12.If this list is set to null it represents all stack switches.')
agentFTPFileSystemBootUpImage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemBootUpImage.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemBootUpImage.setDescription('This object indicates whether to set the special file as the boot up file or not. True: The boot-up option is specified. False: The boot-up option is not specified.')
agentFTPFileSystemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 25, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFTPFileSystemCtrl.setStatus('current')
if mibBuilder.loadTexts: agentFTPFileSystemCtrl.setDescription('This object allows the user to execute an FTP download/upload.')
agentBscCMDLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscCMDLogState.setStatus('current')
if mibBuilder.loadTexts: agentBscCMDLogState.setDescription('This object indicates the command logging state.')
agentBscBroadcastPingReplyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscBroadcastPingReplyState.setStatus('current')
if mibBuilder.loadTexts: agentBscBroadcastPingReplyState.setDescription('This object indicates the broadcast ping reply state.')
agentBscTftpConfigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28))
agentBscTftpCfgFirmwareFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgFirmwareFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgFirmwareFile.setDescription('The firmware pathname that needs to be downloaded/uploaded from/to the TFTP server.')
agentBscTftpCfgConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgConfigFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgConfigFile.setDescription('The configuration pathname that needs to be downloaded/uploaded from/to the TFTP server.')
agentBscTftpCfgLogFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgLogFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgLogFile.setDescription('The log pathname that needs to be uploaded to the TFTP server.')
agentBscTftpCfgAttackLogFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgAttackLogFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgAttackLogFile.setDescription('The attack log pathname that needs to be uploaded to the TFTP server.')
agentBscTftpCfgCertificateFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgCertificateFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgCertificateFile.setDescription('The certificate pathname that needs to be downloaded from the TFTP server.')
agentBscTftpCfgKeyFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgKeyFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgKeyFile.setDescription('The key pathname that needs to be downloaded from the TFTP server.')
agentBscTftpCfgTechSuooprtFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgTechSuooprtFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgTechSuooprtFile.setDescription("The technique's support information pathname that needs to be uploaded to the TFTP server.")
agentBscTftpCfgDebugLogFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgDebugLogFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgDebugLogFile.setDescription('The debug log pathname that needs to be uploaded to the TFTP server.')
agentBscTftpCfgSIMFirmwareFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgSIMFirmwareFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgSIMFirmwareFile.setDescription('The firmware pathname that needs to be downloaded/uploaded from/to the TFTP server when it is SIM enabled.')
agentBscTftpCfgSIMConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgSIMConfigFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgSIMConfigFile.setDescription('The configuration pathname that needs to be downloaded/uploaded from/to the TFTP server when it is SIM enabled.')
agentBscTftpCfgSIMLogFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgSIMLogFile.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgSIMLogFile.setDescription('The log pathname that needs to be uploaded to the TFTP server when it is SIM enabled.')
agentBscTftpCfgServerIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgServerIPAddr.setDescription('The IPv4 address of the TFTP server.')
agentBscTftpCfgServerIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgServerIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgServerIPv6Addr.setDescription('The IPv6 address of the TFTP server.')
agentBscTftpCfgServerDomainName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 28, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscTftpCfgServerDomainName.setStatus('current')
if mibBuilder.loadTexts: agentBscTftpCfgServerDomainName.setDescription('The domain name of the TFTP server.')
agentBscCommunityEncryptionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscCommunityEncryptionState.setStatus('current')
if mibBuilder.loadTexts: agentBscCommunityEncryptionState.setDescription('This object indicates the encryption state on the SNMP community string.')
agentIpProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 3))
agentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumOfIf.setStatus('current')
if mibBuilder.loadTexts: agentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
agentIpTftpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTftpServerAddr.setStatus('obsolete')
if mibBuilder.loadTexts: agentIpTftpServerAddr.setDescription('The IP address of the TFTP Server.')
agentIpGetIpFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpGetIpFrom.setStatus('current')
if mibBuilder.loadTexts: agentIpGetIpFrom.setDescription('This object indicates if the agent will get its system IP address from a Bootp/DHCP server at start up.')
agentIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpAutoconfig.setStatus('current')
if mibBuilder.loadTexts: agentIpAutoconfig.setDescription('Indicates the status of automatically getting the configuration information from a TFTP server connected to the device.')
agentIpAutoconfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpAutoconfigTimeout.setStatus('current')
if mibBuilder.loadTexts: agentIpAutoconfigTimeout.setDescription('This timer is used to limit the length of time for getting the configuration information from a TFTP server connected to the device.')
agentIpTrapManager = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 4))
agentTrapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2), )
if mibBuilder.loadTexts: agentTrapManagerTable.setStatus('current')
if mibBuilder.loadTexts: agentTrapManagerTable.setDescription('A list of trap managers that the SNMP traps will be sent to.')
agentTrapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1), ).setIndexNames((0, "AGENT-GENERAL-MIB", "agentTrapManagerIndex"))
if mibBuilder.loadTexts: agentTrapManagerEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrapManagerEntry.setDescription("Each entry contains the particular trap manager's settings.")
agentTrapManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentTrapManagerIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrapManagerIndex.setDescription('A value that uniquely identifies trapDestEntry.')
agentTrapManagerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapManagerIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentTrapManagerIpAddr.setDescription('The destination IP address for SNMP traps.')
agentTrapManagerComm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapManagerComm.setStatus('current')
if mibBuilder.loadTexts: agentTrapManagerComm.setDescription('The community string used to encode SNMP trap packets being sent to the trap manager.')
agentTrapManagerMsgVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpAgentVersionDependent", 1), ("v1Trap", 2), ("v2Trap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapManagerMsgVer.setStatus('current')
if mibBuilder.loadTexts: agentTrapManagerMsgVer.setDescription('This object indicates the version of trap packets that will be sent to this trap manager. The default setting is SNMP Agent Version Dependent. Note: Because some of these functions will be limited by the support of the system in question, some selected items may be invalid. If one of these items is selected, a bad value error message will prompt the user. ')
agentTrapManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrapManagerStatus.setStatus('current')
if mibBuilder.loadTexts: agentTrapManagerStatus.setDescription('This object indicates whether or not the trap should be sent to the trap manager.')
agentNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 7))
agentNotifMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 1))
agentNotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2))
agentNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0))
notifFirmwareMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 1, 2))
agentsystemRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 1)).setObjects(("AGENT-GENERAL-MIB", "trapInfosystemRestart"))
if mibBuilder.loadTexts: agentsystemRestart.setStatus('current')
if mibBuilder.loadTexts: agentsystemRestart.setDescription('This trap contains the reboot information.')
agentSaveToNVRAM = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 2)).setObjects(("AGENT-GENERAL-MIB", "unitID"))
if mibBuilder.loadTexts: agentSaveToNVRAM.setStatus('current')
if mibBuilder.loadTexts: agentSaveToNVRAM.setDescription('This trap is sent whenever all the device configuration has been saved to NV-RAM.')
agentFileTransferStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 3)).setObjects(("AGENT-GENERAL-MIB", "unitID"), ("AGENT-GENERAL-MIB", "agentStatusFileTransfer"))
if mibBuilder.loadTexts: agentFileTransferStatusChange.setStatus('current')
if mibBuilder.loadTexts: agentFileTransferStatusChange.setDescription('File transfer status change notification.')
agentSetToFactoryDefault = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 4)).setObjects(("AGENT-GENERAL-MIB", "unitID"))
if mibBuilder.loadTexts: agentSetToFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: agentSetToFactoryDefault.setDescription("This trap is sent whenever the 'set to factory default' setting has been processed. ")
agentGratuitousARPTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 5)).setObjects(("AGENT-GENERAL-MIB", "agentGratuitousARPIpAddr"), ("AGENT-GENERAL-MIB", "agentGratuitousARPMacAddr"), ("AGENT-GENERAL-MIB", "agentGratuitousARPPortNumber"), ("AGENT-GENERAL-MIB", "agentGratuitousARPInterfaceName"))
if mibBuilder.loadTexts: agentGratuitousARPTrap.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPTrap.setDescription('This trap is sent when there is an IP address conflict.')
agentLoginFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 6)).setObjects(("AGENT-GENERAL-MIB", "agentLoginType"), ("AGENT-GENERAL-MIB", "agentLoginAAAMethod"), ("AGENT-GENERAL-MIB", "agentLoginUserName"), ("AGENT-GENERAL-MIB", "agentLoginIpAddr"), ("AGENT-GENERAL-MIB", "agentLoginMacAddr"), ("AGENT-GENERAL-MIB", "agentLoginAAAServerAddr"), ("AGENT-GENERAL-MIB", "agentLoginFailInfo"))
if mibBuilder.loadTexts: agentLoginFailTrap.setStatus('current')
if mibBuilder.loadTexts: agentLoginFailTrap.setDescription('The trap is sent when a login has failed through one of the login types (console, Telnet, web, SSL or SSH).')
agentFirmwareUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 7)).setObjects(("AGENT-GENERAL-MIB", "swMultiImageVersion"))
if mibBuilder.loadTexts: agentFirmwareUpgrade.setStatus('current')
if mibBuilder.loadTexts: agentFirmwareUpgrade.setDescription('This trap is sent when the process of upgrading the firmware via SNMP has finished.')
agentAccessFlashFailed = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 8)).setObjects(("AGENT-GENERAL-MIB", "agentAccessFlashOper"), ("AGENT-GENERAL-MIB", "agentAccessFlashAddr"))
if mibBuilder.loadTexts: agentAccessFlashFailed.setStatus('current')
if mibBuilder.loadTexts: agentAccessFlashFailed.setDescription('The trap is sent when access to the flash fails.')
agentCfgOperCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 0, 9)).setObjects(("AGENT-GENERAL-MIB", "unitID"), ("AGENT-GENERAL-MIB", "agentCfgOperate"), ("AGENT-GENERAL-MIB", "agentLoginUserName"))
if mibBuilder.loadTexts: agentCfgOperCompleteTrap.setStatus('current')
if mibBuilder.loadTexts: agentCfgOperCompleteTrap.setDescription('The trap is sent when the configuration is completely saved, uploaded or downloaded.')
notificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1))
unitID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: unitID.setStatus('current')
if mibBuilder.loadTexts: unitID.setDescription('The unit ID of the device which triggered the event.')
trapInfosystemRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapInfosystemRestart.setStatus('current')
if mibBuilder.loadTexts: trapInfosystemRestart.setDescription('This object indicates the last time the device rebooted. ')
agentGratuitousARPIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentGratuitousARPIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPIpAddr.setDescription('A duplicate IP address with the switch already exists.')
agentGratuitousARPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentGratuitousARPMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPMacAddr.setDescription('This object is the MAC address of the device which has the duplicate IP address.')
agentGratuitousARPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentGratuitousARPPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPPortNumber.setDescription('This indicates the portNum with a string. For example, if the device is in standalone mode, and the port number is 23, the string should be 23. If the device is in stacking mode, and the unit ID is 2, and the port number is 3, the string should be 2:3. ')
agentLoginType = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("web", 3), ("ssl", 4), ("ssh", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentLoginType.setStatus('current')
if mibBuilder.loadTexts: agentLoginType.setDescription('The type is the user login method type.')
agentLoginAAAMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("server", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentLoginAAAMethod.setStatus('current')
if mibBuilder.loadTexts: agentLoginAAAMethod.setDescription('This method is the AAA login method.')
agentLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentLoginUserName.setStatus('current')
if mibBuilder.loadTexts: agentLoginUserName.setDescription('This object is the name of the user that failed to login to the switch.')
agentLoginIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentLoginIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentLoginIpAddr.setDescription('This object is the login type from the IP address.')
agentLoginMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentLoginMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentLoginMacAddr.setDescription('This object is the login type from a MAC address.')
agentLoginAAAServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentLoginAAAServerAddr.setStatus('current')
if mibBuilder.loadTexts: agentLoginAAAServerAddr.setDescription('This object is the login type through a console authenticated by an AAA server.')
agentLoginFailInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("authenticate-fail", 2), ("server-timeout", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentLoginFailInfo.setStatus('current')
if mibBuilder.loadTexts: agentLoginFailInfo.setDescription('This object indicates the reason for the login failure.')
agentAccessFlashOper = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentAccessFlashOper.setStatus('current')
if mibBuilder.loadTexts: agentAccessFlashOper.setDescription('This object indicates the operation of the access flash failure.')
agentAccessFlashAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentAccessFlashAddr.setStatus('current')
if mibBuilder.loadTexts: agentAccessFlashAddr.setDescription('This object indicates the address of the access flash failure.')
agentCfgOperate = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("upload", 2), ("download", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentCfgOperate.setStatus('current')
if mibBuilder.loadTexts: agentCfgOperate.setDescription('This object indicates the operation type of the configuration.')
mibBuilder.exportSymbols("AGENT-GENERAL-MIB", agentOutOfBandDataBits=agentOutOfBandDataBits, agentIpNumOfIf=agentIpNumOfIf, agentDRAMutilizationTotalDRAM=agentDRAMutilizationTotalDRAM, agentTrustedHostForTELNET=agentTrustedHostForTELNET, agentFDBPort=agentFDBPort, agentTrustedHostForPING=agentTrustedHostForPING, agentBscSwFileTransferType=agentBscSwFileTransferType, agentOutOfBandMgmt=agentOutOfBandMgmt, agentFTPFileName=agentFTPFileName, agentTrustedHostAddr=agentTrustedHostAddr, agentBscFileSystemSaveCfg=agentBscFileSystemSaveCfg, agentFTPFileSystemServerFileName=agentFTPFileSystemServerFileName, agentBscFileSystemIncrement=agentBscFileSystemIncrement, systemSeverityTrapControl=systemSeverityTrapControl, agentTrustedHostMgmt=agentTrustedHostMgmt, agentFDBClearAllState=agentFDBClearAllState, agentFDBSecurityModule=agentFDBSecurityModule, swMultiCfgSendUser=swMultiCfgSendUser, agentFTPFileInterfaceName=agentFTPFileInterfaceName, agentFTPFileSystemLoadType=agentFTPFileSystemLoadType, agentBscTftpCfgCertificateFile=agentBscTftpCfgCertificateFile, agentFLASHutilizationUnitID=agentFLASHutilizationUnitID, agentDualImageStatus=agentDualImageStatus, agentBscFileSystemServerDomainName=agentBscFileSystemServerDomainName, agentFileSystemBootConfig=agentFileSystemBootConfig, agentBscFileSystemTable=agentBscFileSystemTable, agentFTPFileSystemIndex=agentFTPFileSystemIndex, agentGratuitousARPPeriodicalSendInterval=agentGratuitousARPPeriodicalSendInterval, agentFTPFileSystemTCPPort=agentFTPFileSystemTCPPort, agentMultiCfgMgmt=agentMultiCfgMgmt, agentARPMgmt=agentARPMgmt, agentDRAMutilizationTable=agentDRAMutilizationTable, agentBscCMDLogState=agentBscCMDLogState, agentTrapManagerIpAddr=agentTrapManagerIpAddr, agentSaveToNVRAM=agentSaveToNVRAM, agentLoginAAAMethod=agentLoginAAAMethod, agentBscSwFileEntry=agentBscSwFileEntry, agentLoginUserName=agentLoginUserName, agentBasicInfo=agentBasicInfo, agentLoginAAAServerAddr=agentLoginAAAServerAddr, Ipv6Address=Ipv6Address, agentNotifFirmware=agentNotifFirmware, agentTrapManagerIndex=agentTrapManagerIndex, agentStatusReset=agentStatusReset, agentBscSwFileLocateId=agentBscSwFileLocateId, agentOutOfBandMgmtSubnetMask=agentOutOfBandMgmtSubnetMask, agentNotifMgmt=agentNotifMgmt, agentNotifyPrefix=agentNotifyPrefix, agentBscSwFileBootUpImage=agentBscSwFileBootUpImage, agentPORTutilizationProtIndex=agentPORTutilizationProtIndex, agentFDBClearPortIndex=agentFDBClearPortIndex, agentFDBMacAddress=agentFDBMacAddress, agentBscFileSystemServerAddr=agentBscFileSystemServerAddr, agentBscTftpCfgSIMLogFile=agentBscTftpCfgSIMLogFile, agentRs232PortConfig=agentRs232PortConfig, agentStatusSaveCfg=agentStatusSaveCfg, agentBscTftpCfgFirmwareFile=agentBscTftpCfgFirmwareFile, agentOutOfBandParityBits=agentOutOfBandParityBits, agentFileSystemConfigEntry=agentFileSystemConfigEntry, agentBscCommunityEncryptionState=agentBscCommunityEncryptionState, agentGratuitousARPMacAddr=agentGratuitousARPMacAddr, agentCfgOperate=agentCfgOperate, agentFirmwareType=agentFirmwareType, agentFileTransfer=agentFileTransfer, agentMgmtProtocolCapability=agentMgmtProtocolCapability, agentBscSwFileTable=agentBscSwFileTable, agentFLASHutilizationTable=agentFLASHutilizationTable, agentBscSwFile=agentBscSwFile, agentBscFileSystemLoadType=agentBscFileSystemLoadType, agentTrapManagerEntry=agentTrapManagerEntry, agentTrapManagerStatus=agentTrapManagerStatus, agentBscSwFileBIncrement=agentBscSwFileBIncrement, agentReboot=agentReboot, agentFileSystemConfigTable=agentFileSystemConfigTable, agentFTPFileSystemBootUpImage=agentFTPFileSystemBootUpImage, agentDRAMutilizationUnitID=agentDRAMutilizationUnitID, agentOutOfBandStopBits=agentOutOfBandStopBits, agentBscFileSystemSaveConfigFileName=agentBscFileSystemSaveConfigFileName, agentBscFileSystemCtrl=agentBscFileSystemCtrl, agentBscTftpCfgDebugLogFile=agentBscTftpCfgDebugLogFile, agentOutOfBandBaudRateConfig=agentOutOfBandBaudRateConfig, agentFTPFileSystemAddress=agentFTPFileSystemAddress, agentGratuitousARPInterfaceName=agentGratuitousARPInterfaceName, agentBscFileSystemServerFileName=agentBscFileSystemServerFileName, agentFTPUserName=agentFTPUserName, agentOutOfBandMgmtState=agentOutOfBandMgmtState, agentFTPFileAddr=agentFTPFileAddr, agentsystemRestart=agentsystemRestart, agentLoginMacAddr=agentLoginMacAddr, agentBscSwFileLoadType=agentBscSwFileLoadType, agentSaveCfg=agentSaveCfg, agentFTPFileBIncrement=agentFTPFileBIncrement, agentFTPFileSystemEntry=agentFTPFileSystemEntry, agentBscFileSystemDscr=agentBscFileSystemDscr, agentAccessFlashOper=agentAccessFlashOper, unitID=unitID, agentTrapCfgUpload=agentTrapCfgUpload, agentStatusConsoleInUse=agentStatusConsoleInUse, swMultiCfgCurrentUsed=swMultiCfgCurrentUsed, swMultiImageCtrlEntry=swMultiImageCtrlEntry, agentBscFileSystemEntry=agentBscFileSystemEntry, agentBscSwFileIPv6Addr=agentBscSwFileIPv6Addr, agentFileSystemBootImage=agentFileSystemBootImage, agentFTPFileCtrlID=agentFTPFileCtrlID, agentCPUutilization=agentCPUutilization, agentCfgOperCompleteTrap=agentCfgOperCompleteTrap, agentTrapWarmStart=agentTrapWarmStart, swMultiCfgSize=swMultiCfgSize, agentOutOfBandAutoLogoutConfig=agentOutOfBandAutoLogoutConfig, agentIpTrapManager=agentIpTrapManager, agentFTPFileUnitID=agentFTPFileUnitID, agentFDBClearByPortAction=agentFDBClearByPortAction, swMultiImageFrom=swMultiImageFrom, agentFTPFileTable=agentFTPFileTable, notificationBindings=notificationBindings, agentBscTftpCfgLogFile=agentBscTftpCfgLogFile, agentFTPFileSystemDscr=agentFTPFileSystemDscr, agentFDBClearVid=agentFDBClearVid, agentFirmwareUpgrade=agentFirmwareUpgrade, agentBscTftpCfgTechSuooprtFile=agentBscTftpCfgTechSuooprtFile, agentTrustedHostIPAddress=agentTrustedHostIPAddress, swMultiImageSendUser=swMultiImageSendUser, agentGeneralMgmt=agentGeneralMgmt, agentBscSwFileCtrlUnitID=agentBscSwFileCtrlUnitID, swMultiCfgInfoTable=swMultiCfgInfoTable, agentTrustedHostEntry=agentTrustedHostEntry, agentPORTutilizationTX=agentPORTutilizationTX, agentGratuitousARPSendDupIpDetectedState=agentGratuitousARPSendDupIpDetectedState, agentFTPPassword=agentFTPPassword, agentSnmpTrapState=agentSnmpTrapState, agentPORTutilizationUtil=agentPORTutilizationUtil, trapInfosystemRestart=trapInfosystemRestart, agentTrapManagerMsgVer=agentTrapManagerMsgVer, agentFDBStatus=agentFDBStatus, agentBscFileSystemIndex=agentBscFileSystemIndex, swMultiImageCtrlID=swMultiImageCtrlID, agentPORTutilizationTable=agentPORTutilizationTable, agentFDBClearByVlanAction=agentFDBClearByVlanAction, agentIpGetIpFrom=agentIpGetIpFrom, agentGratuitousARPTable=agentGratuitousARPTable, agentFTPFileSystemUserName=agentFTPFileSystemUserName, agentTrapManagerComm=agentTrapManagerComm, agentGratuitousARPPortNumber=agentGratuitousARPPortNumber, agentBscTftpCfgKeyFile=agentBscTftpCfgKeyFile, UnitList=UnitList, agentARPClearAllState=agentARPClearAllState, agentBscTftpCfgServerIPv6Addr=agentBscTftpCfgServerIPv6Addr, agentLoginIpAddr=agentLoginIpAddr, agentBasicConfig=agentBasicConfig, agentIpAutoconfigTimeout=agentIpAutoconfigTimeout, agentTrustedHostAddrType=agentTrustedHostAddrType, agentCPUutilizationIn5sec=agentCPUutilizationIn5sec, swMultiImageVersion=swMultiImageVersion, agentDRAMutilizationUsedDRAM=agentDRAMutilizationUsedDRAM, agentPORTutilizationRX=agentPORTutilizationRX, agentFTPFileSystemCtrlUnitID=agentFTPFileSystemCtrlUnitID, agentMibCapabilityType=agentMibCapabilityType, agentTrapManagerTable=agentTrapManagerTable, agentIpTftpServerAddr=agentIpTftpServerAddr, agentAccessFlashAddr=agentAccessFlashAddr, agentPORTutilizationEntry=agentPORTutilizationEntry, agentBscFileSystemInterfaceName=agentBscFileSystemInterfaceName, agentFTPFileSystemTable=agentFTPFileSystemTable, agentARPTotalARPEntries=agentARPTotalARPEntries, swMultiImageUpdateTime=swMultiImageUpdateTime, agentBscFileSystemMgmt=agentBscFileSystemMgmt, agentGratuitousARPEntry=agentGratuitousARPEntry, agentOutOfBandMgmtLinkStatus=agentOutOfBandMgmtLinkStatus, agentSerialNumber=agentSerialNumber, PYSNMP_MODULE_ID=agentGeneralMgmt, agentBscSwFileForceAgree=agentBscSwFileForceAgree, agentFTPFileBootUpImage=agentFTPFileBootUpImage, swMultiImageInfoEntry=swMultiImageInfoEntry, agentFDBType=agentFDBType, agentBscTftpCfgConfigFile=agentBscTftpCfgConfigFile, agentTrapCfgSave=agentTrapCfgSave, agentLoginType=agentLoginType, agentBscSwFileInterfaceName=agentBscSwFileInterfaceName, swMultiCfgCtrlEntry=swMultiCfgCtrlEntry, agentGratuitousARPSendIpifStatusUpState=agentGratuitousARPSendIpifStatusUpState, agentIpAutoconfig=agentIpAutoconfig, swMultiCfgInfoEntry=swMultiCfgInfoEntry, agentSetToFactoryDefault=agentSetToFactoryDefault, agentBscSwFileCtrlID=agentBscSwFileCtrlID, agentTrustedHostForSSH=agentTrustedHostForSSH, agentARPRetryTimes=agentARPRetryTimes, agentFileSystemDriverID=agentFileSystemDriverID, agentTrustedHostIndex=agentTrustedHostIndex, agentTrustedHostTable=agentTrustedHostTable, agentCPUutilizationIn1min=agentCPUutilizationIn1min, notifFirmwareMgmt=notifFirmwareMgmt, agentFLASHutilizationEntry=agentFLASHutilizationEntry, agentFTPFileIPv6Addr=agentFTPFileIPv6Addr, agentFDBClearByPortTable=agentFDBClearByPortTable, agentFDBClearByPortEntry=agentFDBClearByPortEntry, agentFTPFileDscr=agentFTPFileDscr, swMultiCfgFileName=swMultiCfgFileName, agentGratuitousARPIpAddr=agentGratuitousARPIpAddr, agentBscSwFileCtrl=agentBscSwFileCtrl, agentGratuitousARPLogState=agentGratuitousARPLogState, swMultiCfgBootUp=swMultiCfgBootUp, agentFTPFileLoadType=agentFTPFileLoadType, agentBscFileSystemBootUpImage=agentBscFileSystemBootUpImage, swMultiCfgCtrlID=swMultiCfgCtrlID, agentGratuitousARPMgmt=agentGratuitousARPMgmt, agentFTPFileEntry=agentFTPFileEntry, swMultiCfgAction=swMultiCfgAction, agentAccessFlashFailed=agentAccessFlashFailed, agentTrustedHostForHTTP=agentTrustedHostForHTTP, agentTrapColdStart=agentTrapColdStart, agentFDBMgmt=agentFDBMgmt, agentFDBClearByVlanTable=agentFDBClearByVlanTable, agentFDBSecurityEntry=agentFDBSecurityEntry, agentFileTransferStatusChange=agentFileTransferStatusChange, swMultiImageCtrlAction=swMultiImageCtrlAction, agentFLASHutilization=agentFLASHutilization, agentBscTftpCfgSIMConfigFile=agentBscTftpCfgSIMConfigFile, agentGratuitousARPTrapState=agentGratuitousARPTrapState, agentBscSwFileServerDomainName=agentBscSwFileServerDomainName, swMultiCfgInfoID=swMultiCfgInfoID, agentReset=agentReset, agentBscTftpCfgServerDomainName=agentBscTftpCfgServerDomainName, agentMibCapabilityTable=agentMibCapabilityTable, agentFLASHutilizationUsedFLASH=agentFLASHutilizationUsedFLASH, swMultiImageInfoTable=swMultiImageInfoTable, swMultiImageSize=swMultiImageSize, agentFTPFileSystemCtrl=agentFTPFileSystemCtrl, agentFTPFileSystemDeviceFileName=agentFTPFileSystemDeviceFileName, agentFTPFileForceAgree=agentFTPFileForceAgree, agentFTPFileSystemPassword=agentFTPFileSystemPassword, agentBscBroadcastPingReplyState=agentBscBroadcastPingReplyState, agentNotify=agentNotify, agentDRAMutilizationEntry=agentDRAMutilizationEntry, agentMibCapabilityDescr=agentMibCapabilityDescr, agentStatusFileTransfer=agentStatusFileTransfer, agentFileSystemUnit=agentFileSystemUnit, agentBscTftpCfgAttackLogFile=agentBscTftpCfgAttackLogFile, agentTrustedHostDelAllState=agentTrustedHostDelAllState, agentTrustedHostIPSubnetMask=agentTrustedHostIPSubnetMask, agentTrustedHostForSNMP=agentTrustedHostForSNMP, agentBscTftpConfigMgmt=agentBscTftpConfigMgmt, agentBscSwFileAddr=agentBscSwFileAddr, swMultiImageInfoID=swMultiImageInfoID, agentBscFileSystemDeviceFileName=agentBscFileSystemDeviceFileName, agentTrapRmonRisingAlarm=agentTrapRmonRisingAlarm, agentMibCapabilityEntry=agentMibCapabilityEntry, agentBscFileSystemDeviceDriverID=agentBscFileSystemDeviceDriverID, agentFDBClearByVlanEntry=agentFDBClearByVlanEntry, agentIpProtoConfig=agentIpProtoConfig, agentFTPTCPPort=agentFTPTCPPort, agentFDBSecurityTable=agentFDBSecurityTable, agentSystemReset=agentSystemReset, swMultiCfgVersion=swMultiCfgVersion, agentMibCapabilityIndex=agentMibCapabilityIndex)
mibBuilder.exportSymbols("AGENT-GENERAL-MIB", systemSeverityControlMgmt=systemSeverityControlMgmt, systemSeverityLogControl=systemSeverityLogControl, agentOutOfBandMgmtGateway=agentOutOfBandMgmtGateway, swMultiImageCtrlTable=swMultiImageCtrlTable, agentBscSwFileIndex=agentBscSwFileIndex, agentTrapCfgDownload=agentTrapCfgDownload, agentBscTftpCfgSIMFirmwareFile=agentBscTftpCfgSIMFirmwareFile, agentLoginFailInfo=agentLoginFailInfo, agentBscSwFileDscr=agentBscSwFileDscr, agentTrustedHostIPv6PrefixLen=agentTrustedHostIPv6PrefixLen, agentFTPFileCtrl=agentFTPFileCtrl, agentBscFileSystemCtrlUnitID=agentBscFileSystemCtrlUnitID, agentBscFileSystemServerIPv6Addr=agentBscFileSystemServerIPv6Addr, agentFDBVid=agentFDBVid, agentFileSystemActConfig=agentFileSystemActConfig, agentFTPFileSystemAddressType=agentFTPFileSystemAddressType, agentLoginFailTrap=agentLoginFailTrap, agentOutOfBandMgmtIpAddr=agentOutOfBandMgmtIpAddr, agentFLASHutilizationTotalFLASH=agentFLASHutilizationTotalFLASH, agentBscFileSystemSaveConfigDriverID=agentBscFileSystemSaveConfigDriverID, agentDRAMutilization=agentDRAMutilization, agentTrustedHostForHTTPS=agentTrustedHostForHTTPS, agentBscFileSystemForceAgree=agentBscFileSystemForceAgree, swMultiCfgCtrlTable=swMultiCfgCtrlTable, agentGratuitousARPLearningState=agentGratuitousARPLearningState, agentTrapMgmt=agentTrapMgmt, swMultiCFgUpdateTime=swMultiCFgUpdateTime, agentTrapRmonFallingAlarm=agentTrapRmonFallingAlarm, agentCPUutilizationIn5min=agentCPUutilizationIn5min, agentFTPFileIndex=agentFTPFileIndex, agentTrustedHostRowStatus=agentTrustedHostRowStatus, agentGratuitousARPTrap=agentGratuitousARPTrap, agentBscTftpCfgServerIPAddr=agentBscTftpCfgServerIPAddr, swMultiCfgFrom=swMultiCfgFrom, agentMibCapabilityVersion=agentMibCapabilityVersion, swMultiImageFileName=swMultiImageFileName)
