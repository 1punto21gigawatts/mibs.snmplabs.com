#
# PySNMP MIB module AC-PM-MediaServer-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PM-MediaServer-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
acBoardMibs, acProducts, acGeneric, acPerformance, audioCodes, acRegistrations = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acBoardMibs", "acProducts", "acGeneric", "acPerformance", "audioCodes", "acRegistrations")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Unsigned32, ObjectIdentity, TimeTicks, enterprises, Integer32, MibIdentifier, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Unsigned32", "ObjectIdentity", "TimeTicks", "enterprises", "Integer32", "MibIdentifier", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Counter32", "Bits")
DisplayString, TextualConvention, TAddress, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TAddress", "DateAndTime")
acPMMediaServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 14))
if mibBuilder.loadTexts: acPMMediaServer.setLastUpdated('200706181116Z')
if mibBuilder.loadTexts: acPMMediaServer.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acPMMediaServer.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acPMMediaServer.setDescription("The AC-PM-MediaServer MIB offers performance monitoring For the Media Server related elements in Audiocodes' devices. The Configuration sub-tree is for configuring the interval Period length for the entire AC-PM-MediaServer MIB, and the different tables' thresholds. The Data sub-tree presents the tables of monitored elements. Note - for the entire MIB the value (-1) means the value Asked for is either not supported or currently not relevant (this is for when values asked for are for intervals not yet recorded.")
acPMMediaServerConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 14, 1))
acPMMediaServerConfigurationPeriodLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 894780))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMediaServerConfigurationPeriodLength.setStatus('current')
if mibBuilder.loadTexts: acPMMediaServerConfigurationPeriodLength.setDescription('Length of monitoring intervals for entire MIB. Time is in minutes.')
acPMMediaServerConfigurationResetTotalCounters = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCountersDone", 1), ("resetTotalCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMediaServerConfigurationResetTotalCounters.setStatus('current')
if mibBuilder.loadTexts: acPMMediaServerConfigurationResetTotalCounters.setDescription('Total-Counters Reset. To reset the total counters, set the value of this object to resetTotalCounters(2).')
acPMMediaServerData = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2))
acPMMediaServerDataAcPMMediaServerTimeFromStartOfInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMediaServerDataAcPMMediaServerTimeFromStartOfInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMediaServerDataAcPMMediaServerTimeFromStartOfInterval.setDescription('The time in seconds since the start of the current interval. MIB specific.')
acPMMediaServerIvr = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21))
acPMIvrPlayTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 21), )
if mibBuilder.loadTexts: acPMIvrPlayTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayTable.setDescription('Announcement requests and their results received from the call.')
acPMIvrPlayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 21, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayType"), (0, "AC-PM-MediaServer-MIB", "acPMIvrPlayInterval"))
if mibBuilder.loadTexts: acPMIvrPlayEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayEntry.setDescription('')
acPMIvrPlayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("requstes", 0), ("successful", 1), ("failedDueToLackOfResources", 2), ("failedDueToProvMismatch", 3))))
if mibBuilder.loadTexts: acPMIvrPlayType.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayType.setDescription('0 - requstes 1 - Successful 2 - FailedDueToLackOfResources 3 - FailedDueToProvMismatch .')
acPMIvrPlayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayVal.setDescription('Value of gauge or counter.')
acPMIvrPlayInProgressTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 22), )
if mibBuilder.loadTexts: acPMIvrPlayInProgressTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayInProgressTable.setDescription('Number of announcement operations that are currently in progress.')
acPMIvrPlayInProgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 22, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayInProgressInterval"))
if mibBuilder.loadTexts: acPMIvrPlayInProgressEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayInProgressEntry.setDescription('')
acPMIvrPlayInProgressInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayInProgressInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayInProgressInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayInProgressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 22, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayInProgressVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayInProgressVal.setDescription('Value of gauge or counter.')
acPMIvrPlayInProgressVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayInProgressVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayInProgressVolume.setDescription('Activity volume.')
acPMIvrPlayInProgressFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayInProgressFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayInProgressFullDayAverage.setDescription('The average of full 24 hours.')
acPMIvrPlayDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 23), )
if mibBuilder.loadTexts: acPMIvrPlayDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayDurationTable.setDescription('Duration, in seconds, of all successful announcement requests. ')
acPMIvrPlayDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 23, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayDurationInterval"))
if mibBuilder.loadTexts: acPMIvrPlayDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayDurationEntry.setDescription('')
acPMIvrPlayDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayDurationVal.setDescription('Value of gauge or counter.')
acPMIvrPlayDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayDurationVolume.setDescription('Activity volume.')
acPMIvrPlayDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayDurationAverage.setDescription('Average value with in the period time.')
acPMIvrPlayCollectTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 24), )
if mibBuilder.loadTexts: acPMIvrPlayCollectTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectTable.setDescription('Play collect requests and their results received from the call.')
acPMIvrPlayCollectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 24, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayCollectType"), (0, "AC-PM-MediaServer-MIB", "acPMIvrPlayCollectInterval"))
if mibBuilder.loadTexts: acPMIvrPlayCollectEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectEntry.setDescription('')
acPMIvrPlayCollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("requstes", 0), ("successful", 1), ("failedDueToLackOfResources", 2), ("failedDueToProvMismatch", 3))))
if mibBuilder.loadTexts: acPMIvrPlayCollectType.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectType.setDescription('0 - requstes 1 - Successful 2 - FailedDueToLackOfResources 3 - FailedDueToProvMismatch .')
acPMIvrPlayCollectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 24, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayCollectInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayCollectVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 24, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayCollectVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectVal.setDescription('Value of gauge or counter.')
acPMIvrPlayCollectInProgressTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 25), )
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressTable.setDescription('Number of play collect operations that are currently in progress.')
acPMIvrPlayCollectInProgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 25, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayCollectInProgressInterval"))
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressEntry.setDescription('')
acPMIvrPlayCollectInProgressInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayCollectInProgressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressVal.setDescription('Value of gauge or counter.')
acPMIvrPlayCollectInProgressVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 25, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressVolume.setDescription('Activity volume.')
acPMIvrPlayCollectInProgressFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectInProgressFullDayAverage.setDescription('The average of full 24 hours.')
acPMIvrPlayCollectDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 26), )
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationTable.setDescription('Duration, in seconds, of all successful play collect requests.')
acPMIvrPlayCollectDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 26, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayCollectDurationInterval"))
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationEntry.setDescription('')
acPMIvrPlayCollectDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 26, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayCollectDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationVal.setDescription('Value of gauge or counter.')
acPMIvrPlayCollectDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 26, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationVolume.setDescription('Activity volume.')
acPMIvrPlayCollectDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayCollectDurationAverage.setDescription('Average value with in the period time.')
acPMIvrPlayRecordTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 27), )
if mibBuilder.loadTexts: acPMIvrPlayRecordTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordTable.setDescription('Play record requests and their results received from the call.')
acPMIvrPlayRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 27, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayRecordType"), (0, "AC-PM-MediaServer-MIB", "acPMIvrPlayRecordInterval"))
if mibBuilder.loadTexts: acPMIvrPlayRecordEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordEntry.setDescription('')
acPMIvrPlayRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("requstes", 0), ("successful", 1), ("failedDueToLackOfResources", 2), ("failedDueToProvMismatch", 3))))
if mibBuilder.loadTexts: acPMIvrPlayRecordType.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordType.setDescription('0 - requstes 1 - Successful 2 - FailedDueToLackOfResources 3 - FailedDueToProvMismatch .')
acPMIvrPlayRecordInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 27, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayRecordInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayRecordVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 27, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayRecordVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordVal.setDescription('Value of gauge or counter.')
acPMIvrPlayRecordInProgressTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 28), )
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressTable.setDescription('Number of play record operations that are currently in progress.')
acPMIvrPlayRecordInProgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 28, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayRecordInProgressInterval"))
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressEntry.setDescription('')
acPMIvrPlayRecordInProgressInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 28, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayRecordInProgressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 28, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressVal.setDescription('Value of gauge or counter.')
acPMIvrPlayRecordInProgressVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 28, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressVolume.setDescription('Activity volume.')
acPMIvrPlayRecordInProgressFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordInProgressFullDayAverage.setDescription('The average of full 24 hours.')
acPMIvrPlayRecordDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 29), )
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationTable.setDescription('Duration, in seconds, of all successful play record requests.')
acPMIvrPlayRecordDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 29, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrPlayRecordDurationInterval"))
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationEntry.setDescription('')
acPMIvrPlayRecordDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 29, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrPlayRecordDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 29, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationVal.setDescription('Value of gauge or counter.')
acPMIvrPlayRecordDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 29, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationVolume.setDescription('Activity volume.')
acPMIvrPlayRecordDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 29, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIvrPlayRecordDurationAverage.setDescription('Average value with in the period time.')
acPMIvrContDigitCollectTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 30), )
if mibBuilder.loadTexts: acPMIvrContDigitCollectTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectTable.setDescription('Digit collect requests and their results received from the call.')
acPMIvrContDigitCollectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 30, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrContDigitCollectType"), (0, "AC-PM-MediaServer-MIB", "acPMIvrContDigitCollectInterval"))
if mibBuilder.loadTexts: acPMIvrContDigitCollectEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectEntry.setDescription('')
acPMIvrContDigitCollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("requstes", 0), ("successful", 1), ("failedDueToLackOfResources", 2))))
if mibBuilder.loadTexts: acPMIvrContDigitCollectType.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectType.setDescription('0 - requstes 1 - Successful 2 - FailedDueToLackOfResources .')
acPMIvrContDigitCollectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 30, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrContDigitCollectInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrContDigitCollectVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 30, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrContDigitCollectVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectVal.setDescription('Value of gauge or counter.')
acPMIvrContDigitCollectInProgressTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 31), )
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressTable.setDescription('The number of digit collect requests that are currently in progress.')
acPMIvrContDigitCollectInProgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 31, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrContDigitCollectInProgressInterval"))
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressEntry.setDescription('')
acPMIvrContDigitCollectInProgressInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 31, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrContDigitCollectInProgressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 31, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressVal.setDescription('Value of gauge or counter.')
acPMIvrContDigitCollectInProgressVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectInProgressVolume.setDescription('Activity volume.')
acPMIvrContDigitCollectDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 32), )
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationTable.setDescription('Duration, in seconds, of all successful digit collect requests. ')
acPMIvrContDigitCollectDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 32, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMIvrContDigitCollectDurationInterval"))
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationEntry.setDescription('')
acPMIvrContDigitCollectDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 32, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIvrContDigitCollectDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationVal.setDescription('Value of gauge or counter.')
acPMIvrContDigitCollectDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 32, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationVolume.setDescription('Activity volume.')
acPMIvrContDigitCollectDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 21, 32, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIvrContDigitCollectDurationAverage.setDescription('Average value with in the period time.')
acPMMediaServerBct = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31))
acPMBctTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 21), )
if mibBuilder.loadTexts: acPMBctTable.setStatus('current')
if mibBuilder.loadTexts: acPMBctTable.setDescription('Total number of BCT contexts.')
acPMBctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 21, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMBctType"), (0, "AC-PM-MediaServer-MIB", "acPMBctInterval"))
if mibBuilder.loadTexts: acPMBctEntry.setStatus('current')
if mibBuilder.loadTexts: acPMBctEntry.setDescription('')
acPMBctType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("requstes", 0), ("successful", 1), ("failedDueToLackOfResources", 2), ("participants", 3))))
if mibBuilder.loadTexts: acPMBctType.setStatus('current')
if mibBuilder.loadTexts: acPMBctType.setDescription('0 - requests 1 - Successful 2 - Failure Due To lack of resources 3 - Participants.')
acPMBctInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMBctInterval.setStatus('current')
if mibBuilder.loadTexts: acPMBctInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMBctVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMBctVal.setStatus('current')
if mibBuilder.loadTexts: acPMBctVal.setDescription('Value of gauge or counter.')
acPMBctInProgressTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 22), )
if mibBuilder.loadTexts: acPMBctInProgressTable.setStatus('current')
if mibBuilder.loadTexts: acPMBctInProgressTable.setDescription('The number of BCT calls/participants that are currently in progress..')
acPMBctInProgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 22, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMBctInProgressType"), (0, "AC-PM-MediaServer-MIB", "acPMBctInProgressInterval"))
if mibBuilder.loadTexts: acPMBctInProgressEntry.setStatus('current')
if mibBuilder.loadTexts: acPMBctInProgressEntry.setDescription('')
acPMBctInProgressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bct", 0), ("participants", 1))))
if mibBuilder.loadTexts: acPMBctInProgressType.setStatus('current')
if mibBuilder.loadTexts: acPMBctInProgressType.setDescription('0 - Bct 1 - participants.')
acPMBctInProgressInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMBctInProgressInterval.setStatus('current')
if mibBuilder.loadTexts: acPMBctInProgressInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMBctInProgressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMBctInProgressVal.setStatus('current')
if mibBuilder.loadTexts: acPMBctInProgressVal.setDescription('Value of gauge or counter.')
acPMBctInProgressVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMBctInProgressVolume.setStatus('current')
if mibBuilder.loadTexts: acPMBctInProgressVolume.setDescription('Activity volume.')
acPMBctDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 23), )
if mibBuilder.loadTexts: acPMBctDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMBctDurationTable.setDescription('Duration, in seconds, of all successful BCT contexts.')
acPMBctDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 23, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMBctDurationInterval"))
if mibBuilder.loadTexts: acPMBctDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMBctDurationEntry.setDescription('')
acPMBctDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMBctDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMBctDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMBctDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMBctDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMBctDurationVal.setDescription('Value of gauge or counter.')
acPMBctDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMBctDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMBctDurationVolume.setDescription('Activity volume.')
acPMBctDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 31, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMBctDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMBctDurationAverage.setDescription('Average value with in the period time.')
acPMMediaServerConference = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41))
acPMConfTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 21), )
if mibBuilder.loadTexts: acPMConfTable.setStatus('current')
if mibBuilder.loadTexts: acPMConfTable.setDescription('Total number of conferences processed.')
acPMConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 21, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMConfType"), (0, "AC-PM-MediaServer-MIB", "acPMConfInterval"))
if mibBuilder.loadTexts: acPMConfEntry.setStatus('current')
if mibBuilder.loadTexts: acPMConfEntry.setDescription('')
acPMConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("requstes", 0), ("successful", 1), ("failedDueToLackOfResources", 2), ("participants", 3))))
if mibBuilder.loadTexts: acPMConfType.setStatus('current')
if mibBuilder.loadTexts: acPMConfType.setDescription('0 - requests 1 - Successful 2 - Failure Due To lack of resources 3 - Participants.')
acPMConfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMConfInterval.setStatus('current')
if mibBuilder.loadTexts: acPMConfInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMConfVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMConfVal.setStatus('current')
if mibBuilder.loadTexts: acPMConfVal.setDescription('Value of gauge or counter.')
acPMConfInProgressTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 22), )
if mibBuilder.loadTexts: acPMConfInProgressTable.setStatus('current')
if mibBuilder.loadTexts: acPMConfInProgressTable.setDescription('The number of conferences/participants currently in progress.')
acPMConfInProgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 22, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMConfInProgressType"), (0, "AC-PM-MediaServer-MIB", "acPMConfInProgressInterval"))
if mibBuilder.loadTexts: acPMConfInProgressEntry.setStatus('current')
if mibBuilder.loadTexts: acPMConfInProgressEntry.setDescription('')
acPMConfInProgressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("conference", 0), ("participants", 1))))
if mibBuilder.loadTexts: acPMConfInProgressType.setStatus('current')
if mibBuilder.loadTexts: acPMConfInProgressType.setDescription('0 - Conference 1 - participants.')
acPMConfInProgressInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMConfInProgressInterval.setStatus('current')
if mibBuilder.loadTexts: acPMConfInProgressInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMConfInProgressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMConfInProgressVal.setStatus('current')
if mibBuilder.loadTexts: acPMConfInProgressVal.setDescription('Value of gauge or counter.')
acPMConfInProgressVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMConfInProgressVolume.setStatus('current')
if mibBuilder.loadTexts: acPMConfInProgressVolume.setDescription('Activity volume.')
acPMConfDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 23), )
if mibBuilder.loadTexts: acPMConfDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMConfDurationTable.setDescription('Duration, in seconds, of all successful conferences.')
acPMConfDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 23, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMConfDurationInterval"))
if mibBuilder.loadTexts: acPMConfDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMConfDurationEntry.setDescription('')
acPMConfDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMConfDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMConfDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMConfDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMConfDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMConfDurationVal.setDescription('Value of gauge or counter.')
acPMConfDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMConfDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMConfDurationVolume.setDescription('Activity volume.')
acPMConfDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 41, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMConfDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMConfDurationAverage.setDescription('Average value with in the period time.')
acPMMediaServerTrunkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51))
acPMTrunkTestTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 21), )
if mibBuilder.loadTexts: acPMTrunkTestTable.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestTable.setDescription('Number of test trunk calls requested.')
acPMTrunkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 21, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMTrunkTestType"), (0, "AC-PM-MediaServer-MIB", "acPMTrunkTestInterval"))
if mibBuilder.loadTexts: acPMTrunkTestEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestEntry.setDescription('')
acPMTrunkTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("requstes", 0), ("successful", 1), ("failedDueToLackOfResources", 2))))
if mibBuilder.loadTexts: acPMTrunkTestType.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestType.setDescription('0 - requests 1 - Successful 2 - Failure Due To lack of resources .')
acPMTrunkTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTrunkTestInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTrunkTestVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkTestVal.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestVal.setDescription('Value of gauge or counter.')
acPMTrunkTestInProgressTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 22), )
if mibBuilder.loadTexts: acPMTrunkTestInProgressTable.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestInProgressTable.setDescription('The number of test trunk calls that are currently in progress.')
acPMTrunkTestInProgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 22, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMTrunkTestInProgressInterval"))
if mibBuilder.loadTexts: acPMTrunkTestInProgressEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestInProgressEntry.setDescription('')
acPMTrunkTestInProgressInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTrunkTestInProgressInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestInProgressInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTrunkTestInProgressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 22, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkTestInProgressVal.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestInProgressVal.setDescription('Value of gauge or counter.')
acPMTrunkTestInProgressVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkTestInProgressVolume.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestInProgressVolume.setDescription('Activity volume.')
acPMTrunkTestDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 23), )
if mibBuilder.loadTexts: acPMTrunkTestDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestDurationTable.setDescription('Duration, in seconds, of all successful test trunk requests. ')
acPMTrunkTestDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 23, 1), ).setIndexNames((0, "AC-PM-MediaServer-MIB", "acPMTrunkTestDurationInterval"))
if mibBuilder.loadTexts: acPMTrunkTestDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestDurationEntry.setDescription('')
acPMTrunkTestDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTrunkTestDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTrunkTestDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkTestDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestDurationVal.setDescription('Value of gauge or counter.')
acPMTrunkTestDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkTestDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestDurationVolume.setDescription('Activity volume.')
acPMTrunkTestDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 14, 2, 51, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkTestDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkTestDurationAverage.setDescription('Average value with in the period time.')
mibBuilder.exportSymbols("AC-PM-MediaServer-MIB", acPMIvrPlayCollectDurationAverage=acPMIvrPlayCollectDurationAverage, acPMTrunkTestInProgressEntry=acPMTrunkTestInProgressEntry, acPMTrunkTestInProgressTable=acPMTrunkTestInProgressTable, acPMTrunkTestVal=acPMTrunkTestVal, acPMIvrPlayCollectType=acPMIvrPlayCollectType, acPMTrunkTestEntry=acPMTrunkTestEntry, acPMMediaServerConference=acPMMediaServerConference, acPMIvrPlayRecordEntry=acPMIvrPlayRecordEntry, acPMConfDurationVolume=acPMConfDurationVolume, acPMConfDurationTable=acPMConfDurationTable, acPMConfDurationEntry=acPMConfDurationEntry, acPMIvrPlayRecordType=acPMIvrPlayRecordType, acPMIvrPlayInProgressFullDayAverage=acPMIvrPlayInProgressFullDayAverage, acPMBctDurationTable=acPMBctDurationTable, acPMConfInProgressTable=acPMConfInProgressTable, acPMIvrPlayInProgressEntry=acPMIvrPlayInProgressEntry, acPMIvrPlayCollectTable=acPMIvrPlayCollectTable, acPMIvrContDigitCollectDurationVolume=acPMIvrContDigitCollectDurationVolume, acPMBctEntry=acPMBctEntry, acPMIvrContDigitCollectVal=acPMIvrContDigitCollectVal, acPMIvrPlayDurationEntry=acPMIvrPlayDurationEntry, PYSNMP_MODULE_ID=acPMMediaServer, acPMIvrPlayRecordVal=acPMIvrPlayRecordVal, acPMConfVal=acPMConfVal, acPMIvrPlayCollectInProgressInterval=acPMIvrPlayCollectInProgressInterval, acPMIvrPlayInProgressVolume=acPMIvrPlayInProgressVolume, acPMIvrContDigitCollectInProgressTable=acPMIvrContDigitCollectInProgressTable, acPMMediaServerConfigurationPeriodLength=acPMMediaServerConfigurationPeriodLength, acPMTrunkTestDurationInterval=acPMTrunkTestDurationInterval, acPMBctDurationVal=acPMBctDurationVal, acPMBctTable=acPMBctTable, acPMTrunkTestInProgressVal=acPMTrunkTestInProgressVal, acPMIvrPlayCollectDurationEntry=acPMIvrPlayCollectDurationEntry, acPMIvrPlayCollectDurationVolume=acPMIvrPlayCollectDurationVolume, acPMTrunkTestDurationVolume=acPMTrunkTestDurationVolume, acPMIvrPlayDurationAverage=acPMIvrPlayDurationAverage, acPMIvrPlayEntry=acPMIvrPlayEntry, acPMBctInProgressInterval=acPMBctInProgressInterval, acPMIvrPlayCollectVal=acPMIvrPlayCollectVal, acPMIvrPlayCollectDurationInterval=acPMIvrPlayCollectDurationInterval, acPMIvrPlayDurationVolume=acPMIvrPlayDurationVolume, acPMConfInProgressInterval=acPMConfInProgressInterval, acPMIvrPlayInProgressVal=acPMIvrPlayInProgressVal, acPMMediaServer=acPMMediaServer, acPMIvrPlayDurationInterval=acPMIvrPlayDurationInterval, acPMConfInProgressVolume=acPMConfInProgressVolume, acPMIvrPlayRecordDurationVolume=acPMIvrPlayRecordDurationVolume, acPMIvrContDigitCollectDurationVal=acPMIvrContDigitCollectDurationVal, acPMTrunkTestInProgressInterval=acPMTrunkTestInProgressInterval, acPMIvrPlayCollectInProgressFullDayAverage=acPMIvrPlayCollectInProgressFullDayAverage, acPMConfEntry=acPMConfEntry, acPMConfDurationVal=acPMConfDurationVal, acPMIvrPlayInProgressTable=acPMIvrPlayInProgressTable, acPMIvrContDigitCollectDurationTable=acPMIvrContDigitCollectDurationTable, acPMIvrPlayRecordDurationTable=acPMIvrPlayRecordDurationTable, acPMConfInProgressEntry=acPMConfInProgressEntry, acPMBctDurationAverage=acPMBctDurationAverage, acPMMediaServerConfigurationResetTotalCounters=acPMMediaServerConfigurationResetTotalCounters, acPMIvrPlayCollectInProgressVal=acPMIvrPlayCollectInProgressVal, acPMConfInterval=acPMConfInterval, acPMIvrPlayRecordInProgressTable=acPMIvrPlayRecordInProgressTable, acPMBctInProgressVal=acPMBctInProgressVal, acPMIvrPlayInProgressInterval=acPMIvrPlayInProgressInterval, acPMIvrPlayDurationTable=acPMIvrPlayDurationTable, acPMIvrContDigitCollectTable=acPMIvrContDigitCollectTable, acPMConfInProgressVal=acPMConfInProgressVal, acPMIvrPlayRecordInProgressFullDayAverage=acPMIvrPlayRecordInProgressFullDayAverage, acPMBctInProgressEntry=acPMBctInProgressEntry, acPMBctInProgressVolume=acPMBctInProgressVolume, acPMBctDurationEntry=acPMBctDurationEntry, acPMConfTable=acPMConfTable, acPMIvrPlayTable=acPMIvrPlayTable, acPMIvrContDigitCollectInProgressVal=acPMIvrContDigitCollectInProgressVal, acPMMediaServerTrunkTest=acPMMediaServerTrunkTest, acPMBctVal=acPMBctVal, acPMIvrContDigitCollectEntry=acPMIvrContDigitCollectEntry, acPMIvrContDigitCollectInProgressEntry=acPMIvrContDigitCollectInProgressEntry, acPMBctInProgressType=acPMBctInProgressType, acPMIvrPlayRecordInProgressVolume=acPMIvrPlayRecordInProgressVolume, acPMIvrPlayRecordDurationVal=acPMIvrPlayRecordDurationVal, acPMIvrContDigitCollectDurationInterval=acPMIvrContDigitCollectDurationInterval, acPMIvrPlayType=acPMIvrPlayType, acPMMediaServerData=acPMMediaServerData, acPMTrunkTestDurationTable=acPMTrunkTestDurationTable, acPMIvrPlayRecordInterval=acPMIvrPlayRecordInterval, acPMIvrPlayRecordTable=acPMIvrPlayRecordTable, acPMConfDurationAverage=acPMConfDurationAverage, acPMConfInProgressType=acPMConfInProgressType, acPMIvrPlayCollectDurationTable=acPMIvrPlayCollectDurationTable, acPMBctInProgressTable=acPMBctInProgressTable, acPMIvrContDigitCollectInProgressInterval=acPMIvrContDigitCollectInProgressInterval, acPMConfDurationInterval=acPMConfDurationInterval, acPMTrunkTestDurationAverage=acPMTrunkTestDurationAverage, acPMIvrContDigitCollectType=acPMIvrContDigitCollectType, acPMMediaServerBct=acPMMediaServerBct, acPMBctDurationVolume=acPMBctDurationVolume, acPMIvrPlayRecordInProgressInterval=acPMIvrPlayRecordInProgressInterval, acPMIvrPlayVal=acPMIvrPlayVal, acPMIvrPlayRecordInProgressVal=acPMIvrPlayRecordInProgressVal, acPMIvrContDigitCollectInterval=acPMIvrContDigitCollectInterval, acPMTrunkTestType=acPMTrunkTestType, acPMIvrPlayRecordInProgressEntry=acPMIvrPlayRecordInProgressEntry, acPMBctDurationInterval=acPMBctDurationInterval, acPMConfType=acPMConfType, acPMIvrPlayRecordDurationEntry=acPMIvrPlayRecordDurationEntry, acPMIvrContDigitCollectDurationEntry=acPMIvrContDigitCollectDurationEntry, acPMTrunkTestInterval=acPMTrunkTestInterval, acPMMediaServerDataAcPMMediaServerTimeFromStartOfInterval=acPMMediaServerDataAcPMMediaServerTimeFromStartOfInterval, acPMIvrPlayRecordDurationAverage=acPMIvrPlayRecordDurationAverage, acPMIvrPlayRecordDurationInterval=acPMIvrPlayRecordDurationInterval, acPMIvrPlayCollectEntry=acPMIvrPlayCollectEntry, acPMIvrContDigitCollectDurationAverage=acPMIvrContDigitCollectDurationAverage, acPMTrunkTestDurationVal=acPMTrunkTestDurationVal, acPMIvrPlayCollectDurationVal=acPMIvrPlayCollectDurationVal, acPMIvrPlayCollectInProgressVolume=acPMIvrPlayCollectInProgressVolume, acPMTrunkTestDurationEntry=acPMTrunkTestDurationEntry, acPMBctType=acPMBctType, acPMIvrPlayCollectInterval=acPMIvrPlayCollectInterval, acPMMediaServerIvr=acPMMediaServerIvr, acPMMediaServerConfiguration=acPMMediaServerConfiguration, acPMIvrPlayInterval=acPMIvrPlayInterval, acPMIvrContDigitCollectInProgressVolume=acPMIvrContDigitCollectInProgressVolume, acPMIvrPlayCollectInProgressTable=acPMIvrPlayCollectInProgressTable, acPMTrunkTestInProgressVolume=acPMTrunkTestInProgressVolume, acPMIvrPlayCollectInProgressEntry=acPMIvrPlayCollectInProgressEntry, acPMBctInterval=acPMBctInterval, acPMIvrPlayDurationVal=acPMIvrPlayDurationVal, acPMTrunkTestTable=acPMTrunkTestTable)
