#
# PySNMP MIB module ALCATEL-IND1-RIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-RIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:19:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1Rip, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Rip")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, Gauge32, ModuleIdentity, Counter64, Bits, IpAddress, Counter32, iso, Unsigned32, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "ModuleIdentity", "Counter64", "Bits", "IpAddress", "Counter32", "iso", "Unsigned32", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1RIPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1))
alcatelIND1RIPMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1RIPMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setContactInfo(' Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line Configuration Of Global RIP Configuration Parameters. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1RIPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1))
if mibBuilder.loadTexts: alcatelIND1RIPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBObjects.setDescription('Branch for Routing Information Protocol (RIP) Subsystem Managed Objects.')
alcatelIND1RIPMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2))
if mibBuilder.loadTexts: alcatelIND1RIPMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBConformance.setDescription('Branch for Routing Information Protocol (RIP) Subsystem Conformance Information.')
alcatelIND1RIPMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1RIPMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBGroups.setDescription('Branch for Routing Information Protocol (RIP) Subsystem Units Of Conformance.')
alcatelIND1RIPMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1RIPMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBCompliances.setDescription('Branch for Routing Information Protocol (RIP) Subsystem Compliance Statements.')
class AlaAuthenticationEncryptKey(TextualConvention, OctetString):
    description = 'The authentication encryption key that is used to decypher RIP simple passwords.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

alaProtocolRip = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1))
alaRipProtoStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipProtoStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipProtoStatus.setDescription('Global administration status of RIP.')
alaRipHostRouteSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipHostRouteSupport.setStatus('current')
if mibBuilder.loadTexts: alaRipHostRouteSupport.setDescription('Enable or disable support for host routes.')
alaRipRedistAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistAdminStatus.setDescription('Enable or disable redistribution of routes into RIP. This object has been obsoleted. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaRipRedistRouteTag.setDescription('A 32-bit value tagged to each RIP internal route while it is redistributed in to other routing protocol domains. The lower 16-bits typically indicate the autonomous system number.')
alaRipForceHolddownTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipForceHolddownTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipForceHolddownTimer.setDescription('Interval in seconds during which routing information regarding better paths is suppressed. A route enters into a forced holddown state when an update packet is received that indicates the route is unreachable and when this timer value is nonzero. After this timer has expired, if the value is less that 120 - the route enters a holddown state for the rest of the period until 120. During this time advertisements for better paths are accepted if any.')
alaRipRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteNumber.setStatus('current')
if mibBuilder.loadTexts: alaRipRouteNumber.setDescription('The number of network routes in RIP routing table.')
alaRipUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: alaRipUpdateInterval.setDescription('Interval (in seconds) that RIP routing updates will be sent out. The value must be less than or equal to one-third the value of the invalid timer.')
alaRipInvalidTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 360)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipInvalidTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipInvalidTimer.setDescription('Time in seconds that a route will remain active in RIB before being moved to the invalid state. The value must be at least three times the update interval.')
alaRipHolddownTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipHolddownTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipHolddownTimer.setDescription('Time to keep a route in the holddown state.')
alaRipGarbageTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipGarbageTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipGarbageTimer.setDescription('Time to keep a route before garbage collection.')
alaRipRedistProtoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alaRipRedistProtoTable.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistProtoTable.setDescription('Protocol based configuration for route redistribution using RIP. This table has been obsoleted. Use alaRouteMapRedistProtoTable of AlcatelIND1RouteMap.mib.')
alaRipRedistProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-RIP-MIB", "alaRipRedistProtoId"))
if mibBuilder.loadTexts: alaRipRedistProtoEntry.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistProtoEntry.setDescription('A range of routes from a protocol to be redistributed using RIP. This entry has been obsoleted. Use alaRouteMapRedistProtoEntry of AlcatelIND1RouteMap.mib.')
alaRipRedistProtoId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("directHost", 3), ("netmgmt", 4), ("rip", 5), ("ospf", 6), ("isis", 7), ("bgp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRedistProtoId.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistProtoId.setDescription('The routing mechanism via which the routes, to be redistributed using RIP, are learned. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistProtoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistProtoMetric.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistProtoMetric.setDescription('Default metric to be used for redistributing routes. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 7, 1, 3), RowStatus().clone('notInService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistProtoStatus.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistProtoStatus.setDescription('Add or Delete entries. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2))
alaRipDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugLevel.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugLevel.setDescription('This Object is deprecated in favour of alaDrcTmRipDebug Configuration')
alaRipDebugError = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugError.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugError.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugError MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugWarn = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugWarn.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugWarn.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugWarning MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugRecv = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugRecv.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugRecv.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugRecv MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugSend = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugSend.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugSend.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugSend MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugRdb = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugRdb.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugRdb.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugRdb MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugAge = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugAge.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugAge.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugAge MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugConfig.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugConfig.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugConfig MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugRedist = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugRedist.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugRedist.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugRedist MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugInfo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugInfo.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugInfo.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugInfo MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugSetup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugSetup.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugSetup.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugSetup MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugTime.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugTime.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugTime MIB Object of alaDrcTmRipDebug Configuration')
alaRipDebugAll = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipDebugAll.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugAll.setDescription('This Object is deprecated in favour of alaDrcTmRipDebugAll MIB Object of alaDrcTmRipDebug Configuration')
alaRipRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9), )
if mibBuilder.loadTexts: alaRipRouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteTable.setDescription('RIP routing table which contains the network routes. This Object is deprecated in favour of alaRipEcmpRouteTable.')
alaRipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-RIP-MIB", "alaRipRouteDest"), (0, "ALCATEL-IND1-RIP-MIB", "alaRipRouteMask"))
if mibBuilder.loadTexts: alaRipRouteEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteEntry.setDescription("RIP routing table which contains the network routes. This Object is deprecated in favour of alaRipEcmpRouteEntry. This deprecated object is indexed by Destination/Mask. With the addition of ECMP support, routes can now have more than one nexthop, which requires routing entries to be identified/indexed by Destination/Mask/NextHop. As a result of this change, GET/GETNEXT operations on this deprecated object (which provide only Destination/Mask) will fail to uniquely identify a routing table entry. In response, the router will return only the first nexthop in its list of nexthops for the given routing destination. The order of the router's internal nexthop list is not specified or guaranteed, so there's no assurance that the returned nexthop will be active, installed, or otherwise in service. To retrieve information on all nexthops for a given destination, use alaRipEcmpRouteTable instead.")
alaRipRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteDest.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteDest.setDescription('The destination IP address of this route. This Object is deprecated in favour of alaRipEcmpRouteDest.')
alaRipRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteMask.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteMask.setDescription('The network mask for this route. This Object is deprecated in favour of alaRipEcmpRouteMask.')
alaRipRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteNextHop.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteNextHop.setDescription('The address of the next hop to reach this route. This Object is deprecated in favour of alaRipEcmpRouteNextHop.')
alaRipRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("redistribute", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteType.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteType.setDescription('The type of route. This Object is deprecated in favour of alaRipEcmpRouteType.')
alaRipRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteAge.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteAge.setDescription('The number of seconds since this route was last updated or otherwise determined to be correct. This Object is deprecated in favour of alaRipEcmpRouteAge.')
alaRipRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteTag.setDescription('The associated route tag. This Object is deprecated in favour of alaRipEcmpRouteTag.')
alaRipRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteMetric.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteMetric.setDescription('The routing metric for this route. This Object is deprecated in favour of alaRipEcmpRouteMetric.')
alaRipRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 9, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteStatus.setDescription('The row status variable, used according to row installation and removal conventions. This Object is deprecated in favour of alaRipEcmpRouteStatus.')
alaRipRedistRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10), )
if mibBuilder.loadTexts: alaRipRedistRouteTable.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteTable.setDescription('A configuration table which controls the routes to be redistributed by RIP from other routing protocols. This table has been obsoleted. Use alaRouteMapRedistProtoTable of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteProto"), (0, "ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteDest"), (0, "ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteMask"))
if mibBuilder.loadTexts: alaRipRedistRouteEntry.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteEntry.setDescription('An entry of alaRipRedistRouteTable which specifies a route or set of routes to be redistributed by RIP from another routing protocol. This entry has been obsoleted. Use alaRouteMapRedistProtoEntry of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("directHost", 3), ("netmgmt", 4), ("ospf", 6), ("isis", 7), ("bgp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRedistRouteProto.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteProto.setDescription('Protocol from which this route is to be imported into RIP. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRedistRouteDest.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteDest.setDescription('The destination IP address of this route. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRedistRouteMask.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteMask.setDescription('The network mask for this route. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistRouteMetric.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteMetric.setDescription('The metric to be used for the redistributed route. A value of 0 means that the metric used should be the value configured in alaRipRedistProtoMetric for this protocol. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redistributeAllSubnets", 1), ("redistributeAsAggregate", 2), ("redistributeExactMatch", 3))).clone('redistributeAllSubnets')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistRouteControl.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteControl.setDescription('Specifies how routes matching this entry are to be redistributed into RIP. The different mechanisms possible are to redistribute all the subnet routes, redistribute an aggregated route if there are one or more actual routes which match this entry or redistribute only an exactly matching route. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteTagMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistRouteTagMatch.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteTagMatch.setDescription('Redistribute the route only when the route tag matches with this value. It defaults to -1 which matches all route tags. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redistribute", 1), ("doNotRedistribute", 2))).clone('redistribute')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistRouteEffect.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteEffect.setDescription('Specifies whether the redistribution of routes in this range is allowed or denied. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRipRedistRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 10, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistRouteStatus.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteStatus.setDescription('The row status variable, used according to row installation and removal conventions. This object has been obsoleted. Use alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaRip2IfConfAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11), )
if mibBuilder.loadTexts: alaRip2IfConfAugTable.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfAugTable.setDescription('Expansion for rip2ifconftable')
alaRip2IfConfAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1), )
rip2IfConfEntry.registerAugmentions(("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfAugEntry"))
alaRip2IfConfAugEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: alaRip2IfConfAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfAugEntry.setDescription('An entry of alaRip2IfConfAugTable')
alaRip2IfConfEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 1), AlaAuthenticationEncryptKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfEncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfEncryptKey.setDescription('The authentication encryption key that is used to decypher RIP passwords.')
alaRip2IfIpConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRip2IfIpConfStatus.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfIpConfStatus.setDescription('The status of the associated IP interface')
alaRip2IfRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRip2IfRecvPkts.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfRecvPkts.setDescription('Number of packets received on this interface')
alaRip2IfConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRip2IfConfName.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfName.setDescription('The user defined name used to identify the IP interface')
alaRip2IfConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("point2point", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfType.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfType.setDescription('The type of the rip interface')
alaRip2IfConfPtoPPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfPtoPPeer.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfPtoPPeer.setDescription('The address of the peer for a point-to-point rip interface')
alaRipEcmpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12), )
if mibBuilder.loadTexts: alaRipEcmpRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteTable.setDescription('ECMP-enabled RIP routing table which contains the network routes.')
alaRipEcmpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteDest"), (0, "ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteMask"), (0, "ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteNextHop"))
if mibBuilder.loadTexts: alaRipEcmpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteEntry.setDescription('ECMP-enabled RIP routing table which contains the network routes.')
alaRipEcmpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaRipEcmpRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteDest.setDescription('The destination IP address of this route.')
alaRipEcmpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaRipEcmpRouteMask.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteMask.setDescription('The network mask for this route.')
alaRipEcmpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 3), IpAddress())
if mibBuilder.loadTexts: alaRipEcmpRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteNextHop.setDescription('The address of the next hop to reach this route.')
alaRipEcmpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("redistribute", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteType.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteType.setDescription('The type of route.')
alaRipEcmpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteAge.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteAge.setDescription('The number of seconds since this route was last updated or otherwise determined to be correct.')
alaRipEcmpRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteTag.setDescription('The associated route tag.')
alaRipEcmpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteMetric.setDescription('The routing metric for this route.')
alaRipEcmpRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
alaRipEcmpRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("garbage", 2), ("holddown", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteState.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteState.setDescription('The associated state for this route.')
alcatelIND1RIPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipMiscellaneousGroup"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistProtoGroup"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugGroup"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteGroup"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1RIPMIBCompliance = alcatelIND1RIPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBCompliance.setDescription('Compliance statement for Routing Information Protocol (RIP) Subsystem.')
alaRipMiscellaneousGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipRedistAdminStatus"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteTag"), ("ALCATEL-IND1-RIP-MIB", "alaRipForceHolddownTimer"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipMiscellaneousGroup = alaRipMiscellaneousGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipMiscellaneousGroup.setDescription('Collection of Miscellaneous objects for management of RIP.')
alaRipRedistProtoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipRedistProtoId"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistProtoMetric"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistProtoStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipRedistProtoGroup = alaRipRedistProtoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistProtoGroup.setDescription('Collection of objects for management of Route Redistribution Protocol. These objects have been obsoleted, and this group is no longer mandatory.')
alaRipDebugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipDebugLevel"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugError"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugWarn"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugRecv"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugSend"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugRdb"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugAge"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugConfig"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugRedist"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugInfo"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugSetup"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugTime"), ("ALCATEL-IND1-RIP-MIB", "alaRipDebugAll"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipDebugGroup = alaRipDebugGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipDebugGroup.setDescription('Collection of objects for management of Debug Information. These objects have been deprecated, and this group is no longer mandatory.')
alaRipRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipRouteNumber"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteDest"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteMask"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteNextHop"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteType"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteAge"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteTag"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteMetric"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipRouteGroup = alaRipRouteGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaRipRouteGroup.setDescription('Collection of objects for management of Network Route configuration. This Object is deprecated in favour of alaRipEcmpRouteGroup.')
alaRipRedistRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteTag"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteProto"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteDest"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteMask"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteMetric"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteControl"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteTagMatch"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteEffect"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipRedistRouteGroup = alaRipRedistRouteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: alaRipRedistRouteGroup.setDescription('Collection of objects for management of Route Redistribution configuration. These objects have been obsoleted, and this group is no longer mandatory.')
alaRipEcmpRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipRouteNumber"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteType"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteAge"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteTag"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteMetric"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteStatus"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipEcmpRouteGroup = alaRipEcmpRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteGroup.setDescription('Collection of objects for management of Network Route configuration.')
alcatelIND1RIPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 3))
alcatelIND1RIPTrapsRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 3, 0))
ripRouteMaxLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 3, 0, 1))
if mibBuilder.loadTexts: ripRouteMaxLimitReached.setStatus('current')
if mibBuilder.loadTexts: ripRouteMaxLimitReached.setDescription(' This notification is generated as RIP database reached supported Maximum entries. RIP will discard any new updates.')
mibBuilder.exportSymbols("ALCATEL-IND1-RIP-MIB", alaRip2IfConfPtoPPeer=alaRip2IfConfPtoPPeer, alaRipRedistRouteTagMatch=alaRipRedistRouteTagMatch, alaRip2IfConfEncryptKey=alaRip2IfConfEncryptKey, alaRipRedistRouteProto=alaRipRedistRouteProto, alaRipRouteMask=alaRipRouteMask, alaRipRedistProtoId=alaRipRedistProtoId, alcatelIND1RIPTrapsRoot=alcatelIND1RIPTrapsRoot, alaRipEcmpRouteMask=alaRipEcmpRouteMask, alaRipDebugLevel=alaRipDebugLevel, alaRipDebugConfig=alaRipDebugConfig, alaRipRouteAge=alaRipRouteAge, alaRipEcmpRouteAge=alaRipEcmpRouteAge, alaRipRedistRouteEffect=alaRipRedistRouteEffect, alaRipEcmpRouteTag=alaRipEcmpRouteTag, alaRipRouteNextHop=alaRipRouteNextHop, alaRipRedistRouteEntry=alaRipRedistRouteEntry, alaRipRedistProtoMetric=alaRipRedistProtoMetric, alaRipDebugRecv=alaRipDebugRecv, alaRipRedistProtoGroup=alaRipRedistProtoGroup, alaRipDebugAll=alaRipDebugAll, alcatelIND1RIPMIBCompliances=alcatelIND1RIPMIBCompliances, alcatelIND1RIPMIB=alcatelIND1RIPMIB, alaRip2IfConfName=alaRip2IfConfName, alaRipRedistProtoEntry=alaRipRedistProtoEntry, alcatelIND1RIPMIBCompliance=alcatelIND1RIPMIBCompliance, alaRipEcmpRouteState=alaRipEcmpRouteState, alaRipDebugWarn=alaRipDebugWarn, alaRip2IfConfType=alaRip2IfConfType, alaRipHolddownTimer=alaRipHolddownTimer, alaRipDebugInfo=alaRipDebugInfo, alaRipGarbageTimer=alaRipGarbageTimer, alaRipEcmpRouteDest=alaRipEcmpRouteDest, alaRipEcmpRouteType=alaRipEcmpRouteType, alaRipDebugError=alaRipDebugError, alaRipDebug=alaRipDebug, alaRipRedistRouteStatus=alaRipRedistRouteStatus, alaRip2IfConfAugTable=alaRip2IfConfAugTable, alaRipMiscellaneousGroup=alaRipMiscellaneousGroup, alaRipInvalidTimer=alaRipInvalidTimer, alaRipEcmpRouteMetric=alaRipEcmpRouteMetric, alaRip2IfRecvPkts=alaRip2IfRecvPkts, alcatelIND1RIPMIBGroups=alcatelIND1RIPMIBGroups, alaRipEcmpRouteNextHop=alaRipEcmpRouteNextHop, ripRouteMaxLimitReached=ripRouteMaxLimitReached, alaRip2IfConfAugEntry=alaRip2IfConfAugEntry, alcatelIND1RIPTraps=alcatelIND1RIPTraps, alaRip2IfIpConfStatus=alaRip2IfIpConfStatus, AlaAuthenticationEncryptKey=AlaAuthenticationEncryptKey, alaRipDebugRdb=alaRipDebugRdb, alaRipRouteDest=alaRipRouteDest, alaRipEcmpRouteGroup=alaRipEcmpRouteGroup, alcatelIND1RIPMIBObjects=alcatelIND1RIPMIBObjects, alaRipEcmpRouteEntry=alaRipEcmpRouteEntry, alaRipDebugGroup=alaRipDebugGroup, alaRipRedistRouteGroup=alaRipRedistRouteGroup, alaRipHostRouteSupport=alaRipHostRouteSupport, alaRipRedistRouteDest=alaRipRedistRouteDest, alaRipRedistRouteMetric=alaRipRedistRouteMetric, alaRipRedistProtoStatus=alaRipRedistProtoStatus, alaRipDebugSend=alaRipDebugSend, alaRipDebugSetup=alaRipDebugSetup, alaRipRouteMetric=alaRipRouteMetric, alaRipDebugTime=alaRipDebugTime, PYSNMP_MODULE_ID=alcatelIND1RIPMIB, alaRipRedistRouteControl=alaRipRedistRouteControl, alaRipProtoStatus=alaRipProtoStatus, alaRipRedistProtoTable=alaRipRedistProtoTable, alaRipRedistRouteTable=alaRipRedistRouteTable, alaRipEcmpRouteStatus=alaRipEcmpRouteStatus, alaRipDebugRedist=alaRipDebugRedist, alaRipRouteStatus=alaRipRouteStatus, alaRipRedistRouteMask=alaRipRedistRouteMask, alaRipRouteTag=alaRipRouteTag, alaRipRedistAdminStatus=alaRipRedistAdminStatus, alaRipEcmpRouteTable=alaRipEcmpRouteTable, alaProtocolRip=alaProtocolRip, alaRipForceHolddownTimer=alaRipForceHolddownTimer, alaRipDebugAge=alaRipDebugAge, alaRipRouteType=alaRipRouteType, alaRipRouteGroup=alaRipRouteGroup, alaRipRedistRouteTag=alaRipRedistRouteTag, alaRipRouteEntry=alaRipRouteEntry, alaRipRouteTable=alaRipRouteTable, alaRipUpdateInterval=alaRipUpdateInterval, alaRipRouteNumber=alaRipRouteNumber, alcatelIND1RIPMIBConformance=alcatelIND1RIPMIBConformance)
