#
# PySNMP MIB module DENIALOFSERVICE-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DENIALOFSERVICE-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:38:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
switch, = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, Counter64, Counter32, iso, Bits, ModuleIdentity, Integer32, Gauge32, MibIdentifier, TimeTicks, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Counter64", "Counter32", "iso", "Bits", "ModuleIdentity", "Integer32", "Gauge32", "MibIdentifier", "TimeTicks", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "RowStatus")
denialOfService = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 31))
if mibBuilder.loadTexts: denialOfService.setLastUpdated('201108310000Z')
if mibBuilder.loadTexts: denialOfService.setOrganization('QCI')
if mibBuilder.loadTexts: denialOfService.setContactInfo(' Customer Support Postal: Quanta Computer Inc. 4, Wen Ming 1 St., Kuei Shan Hsiang, Tao Yuan Shien, Taiwan, R.O.C. Tel: +886 3 328 0050 E-Mail: strong.chen@quantatw.com')
if mibBuilder.loadTexts: denialOfService.setDescription('The Quanta Private MIB for Denial of Service.')
agentSwitchDenialOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1))
agentSwitchDenialOfServiceSIPDIPMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSIPDIPMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSIPDIPMode.setDescription('Enables or Disables the SIP=DIP Denial of Service protection feature.')
agentSwitchDenialOfServiceSMACDMACMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSMACDMACMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSMACDMACMode.setDescription('Enables or Disables the SMAC=DMAC Denial of Service protection feature.')
agentSwitchDenialOfServiceFirstFragMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceFirstFragMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceFirstFragMode.setDescription('Enables or Disables the First Fragment Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPHdrSize = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPHdrSize.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPHdrSize.setDescription('Configures the Minimum allowed TCP Header size. This is active if the First Fragment Denial of Service protection feature is enabled.')
agentSwitchDenialOfServiceTCPFragMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFragMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFragMode.setDescription('Enables or Disables the TCP Fragment Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPOffsetMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPOffsetMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPOffsetMode.setDescription('Enables or Disables the TCP Offset Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPFlagMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagMode.setDescription('Enables or Disables the TCP Flag Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPFlagSeqMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagSeqMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagSeqMode.setDescription('Enables or Disables the TCP Flag and Sequence Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPSynMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynMode.setDescription('Enables or Disables the TCP Syn Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPSynFinMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynFinMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynFinMode.setDescription('Enables or Disables the TCP Syn and Fin Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPFinUrgPshMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFinUrgPshMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFinUrgPshMode.setDescription('Enables or Disables the TCP Fin and Urg and Psh Denial of Service protection feature.')
agentSwitchDenialOfServiceL4PortMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceL4PortMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceL4PortMode.setDescription('Enables or Disables the L4 Port Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPPortMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPPortMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPPortMode.setDescription('Enables or Disables the TCP Port Denial of Service protection feature.')
agentSwitchDenialOfServiceUDPPortMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceUDPPortMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceUDPPortMode.setDescription('Enables or Disables the UDP Port Denial of Service protection feature.')
agentSwitchDenialOfServiceICMPMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPMode.setDescription('Enables or Disables the ICMP Denial of Service protection feature.')
agentSwitchDenialOfServiceICMPv6Mode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPv6Mode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPv6Mode.setDescription('Enables or Disables the ICMPv6 Denial of Service protection feature.')
agentSwitchDenialOfServiceICMPSize = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16376)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPSize.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPSize.setDescription('Configures the Maximum allowed ICMP data size. This is active if the ICMP Denial of Service protection feature is enabled.')
agentSwitchDenialOfServiceICMPv6Size = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16376)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPv6Size.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPv6Size.setDescription('Configures the Maximum allowed ICMPv6 data size. This is active if the ICMPv6 Denial of Service protection feature is enabled.')
agentSwitchDenialOfServiceICMPFragMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 31, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPFragMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPFragMode.setDescription('Enables or Disables the ICMP Fragment Denial of Service protection feature.')
mibBuilder.exportSymbols("DENIALOFSERVICE-PRIVATE-MIB", agentSwitchDenialOfServiceTCPSynMode=agentSwitchDenialOfServiceTCPSynMode, agentSwitchDenialOfServiceUDPPortMode=agentSwitchDenialOfServiceUDPPortMode, agentSwitchDenialOfServiceFirstFragMode=agentSwitchDenialOfServiceFirstFragMode, agentSwitchDenialOfServiceTCPHdrSize=agentSwitchDenialOfServiceTCPHdrSize, agentSwitchDenialOfServiceICMPMode=agentSwitchDenialOfServiceICMPMode, agentSwitchDenialOfServiceSMACDMACMode=agentSwitchDenialOfServiceSMACDMACMode, denialOfService=denialOfService, agentSwitchDenialOfServiceTCPSynFinMode=agentSwitchDenialOfServiceTCPSynFinMode, agentSwitchDenialOfServiceICMPFragMode=agentSwitchDenialOfServiceICMPFragMode, agentSwitchDenialOfServiceTCPFragMode=agentSwitchDenialOfServiceTCPFragMode, agentSwitchDenialOfServiceTCPFlagMode=agentSwitchDenialOfServiceTCPFlagMode, agentSwitchDenialOfServiceTCPPortMode=agentSwitchDenialOfServiceTCPPortMode, agentSwitchDenialOfServiceTCPFlagSeqMode=agentSwitchDenialOfServiceTCPFlagSeqMode, agentSwitchDenialOfServiceGroup=agentSwitchDenialOfServiceGroup, agentSwitchDenialOfServiceSIPDIPMode=agentSwitchDenialOfServiceSIPDIPMode, agentSwitchDenialOfServiceTCPFinUrgPshMode=agentSwitchDenialOfServiceTCPFinUrgPshMode, agentSwitchDenialOfServiceICMPv6Mode=agentSwitchDenialOfServiceICMPv6Mode, agentSwitchDenialOfServiceL4PortMode=agentSwitchDenialOfServiceL4PortMode, agentSwitchDenialOfServiceTCPOffsetMode=agentSwitchDenialOfServiceTCPOffsetMode, PYSNMP_MODULE_ID=denialOfService, agentSwitchDenialOfServiceICMPSize=agentSwitchDenialOfServiceICMPSize, agentSwitchDenialOfServiceICMPv6Size=agentSwitchDenialOfServiceICMPv6Size)
