#
# PySNMP MIB module CXQLLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXQLLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
cxQLLC, ThruputClass, Alias, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "cxQLLC", "ThruputClass", "Alias", "SapIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, Gauge32, Unsigned32, MibIdentifier, IpAddress, Counter64, Counter32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Gauge32", "Unsigned32", "MibIdentifier", "IpAddress", "Counter64", "Counter32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class X25Address(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

class PacketSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bytes16", 4), ("bytes32", 5), ("bytes64", 6), ("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10), ("bytes2048", 11), ("bytes4096", 12))

qllcSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1), )
if mibBuilder.loadTexts: qllcSapTable.setReference('Memotec Communications Inc.')
if mibBuilder.loadTexts: qllcSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapTable.setDescription('A table containing configuration information for each QLLC service access point.')
qllcSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1), ).setIndexNames((0, "CXQLLC-MIB", "qllcSapNumber"))
if mibBuilder.loadTexts: qllcSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapEntry.setDescription('Defines a row in the qllcSapTable. Each row contains the objects which are used to define a service access point.')
qllcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapNumber.setDescription('Identifies a SAP (service access point) in the qllcSapTable.')
qllcSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Configuration Changed: administrative')
qllcSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcSapType.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapType.setDescription("Specifies this SAP (service access point) as either 'upper' or 'lower'. Options: lower (1): This is a lower SAP which communicates with the X.25 layer. upper (2): This is an upper SAP, which acts as an inter-layer port communicating with the SNA Link Conversion layer. Configuration Changed: administrative")
qllcSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapAlias.setDescription('Identifies this service access point by a textual name. Names must be unique across all service access points at all layers. Range of Values: 1 - 16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
qllcSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapCompanionAlias.setDescription('Identifies the X.25 SAP that this SAP communicates with. Range of Values: 1 - 16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
qllcSapSnalcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcSapSnalcRef.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapSnalcRef.setDescription('This object applies only to lower SAPs (service access points). Determines the upper SAP (service access point) that is associated with this SAP. Range of Values: 0 - 8 Default Value: none Configuration Changed: administrative')
qllcSapOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcSapOperationalMode.setStatus('mandatory')
if mibBuilder.loadTexts: qllcSapOperationalMode.setDescription('Identifies the operational state of this SAP (service access point). Options: offLine (1): Indicates that this SAP is not operational. onLine (2): Indicates that this SAP is operational.')
qllcDteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2), )
if mibBuilder.loadTexts: qllcDteTable.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteTable.setDescription('The DTE table contains the parameter settings that are used to create an X.25 Call Request packet for calls established by a particular lower service access point for a particular control unit.')
qllcDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1), ).setIndexNames((0, "CXQLLC-MIB", "qllcDteSap"), (0, "CXQLLC-MIB", "qllcDteIndex"))
if mibBuilder.loadTexts: qllcDteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteEntry.setDescription('Defines a row in the qllcDteTable. Each row contains the objects which are used to define a the parameters for an X.25 Call Request packet.')
qllcDteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteSap.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteSap.setDescription('Identifies the SAP (service access point) associated with this entry. Configuration Changed: administrative ')
qllcDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteIndex.setDescription('Identifies the control unit address associated with this DTE entry. Configuration Changed: administrative ')
qllcDteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Configuration Changed: administrative')
qllcDteType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminalInterfaceUnit", 1), ("hostInterfaceUnit", 2))).clone('terminalInterfaceUnit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteType.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteType.setDescription('Determines the type of interface (HIU or TIU) associated with this DTE. Options: terminalInterfaceUnit (1): The SAP type is a TIU, which means it is connected to one or more control units (secondary link stations). The TIU emulates a primary link station, and polls the attached control units. The SDLC interface can support a total of 64 control units across all TIU SAPs. hostInterfaceUnit (2): The SAP type is an HIU, which means it is connected to an SNA host (primary link station). The HIU emulates the control units connected to a TIU. It responds to polls issued by the host. Default Value: terminalInterfaceUnit (1) Configuration Changed: administrative')
qllcDteCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 5), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteCalledAddress.setDescription('Determines the DTE to call to establish a QLLC connection. Range of Values: DTE address enclosed in quotes (up to 15 characters in length) Default Value: none Configuration Changed: administrative and operative')
qllcDteCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 6), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteCallingAddress.setDescription('Determines the DTE address of the caller. Range of Values: DTE address enclosed in quotes (up to 15 characters in length) Default Value: none Configuration Changed: administrative and operative')
qllcDteDBitCall = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteDBitCall.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteDBitCall.setDescription('Determines if segmentation is supported and is to be performed by the QLLC layer for the specific DTE entry. Options: no (1): QLLC does not support segmentation. yes (2): QLLC supports segmentation. (For future use.) Default Value: yes (2) Configuration Changed: administrative and operative')
qllcDteWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteWindow.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteWindow.setDescription('Determines the transmit and receive window sizes for this DTE. This window size is used when establishing calls from this DTE, or when receiving calls at this DTE. QLLC only supports modulo 8 window size. Range of Values: 1 - 7 Default Value: 7 Configuration Changed: administrative and operative')
qllcDtePacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 9), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDtePacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDtePacketSize.setDescription('Determines the transmit and receive packet size for this DTE when flow control negotiation (x25SapSbscrFlowCntrlParamNegotiation) is not subscribed to, or when a D-bit call is routed through this SAP. Options: bytes16 (4): 16 bytes bytes32 (5): 32 bytes bytes64 (6): 64 bytes bytes128 (7): 128 bytes bytes256 (8): 256 bytes bytes512 (9): 512 bytes bytes1024 (10): 1024 bytes bytes2048 (11): 2048 bytes bytes4096 (12): 4096 bytes Default Value: bytes128 (7) Related Objects: x25SapSbscrFlowCntrlParamNegotiation Configuration Changed: administrative and operative')
qllcDteThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 10), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteThroughput.setDescription('Determines the transmit and receive throughput class for this DTE when flow control negotiation (x25SapSbscrThruputClassNegotiation) is not subscribed to, or when a D-bit call is routed through this SAP. Options: bps75 (3) bps150 (4) bps300 (5) bps600 (6) bps1200 (7) bps2400 (8) bps4800 (9) bps9600 (10) bps19200 (11) bps38400 (12) bps64000 (13) Default Value: bps9600 (10) Related Objects: x25SapSbscrThruputClassNegotiation Configuration Changed: administrative and operative')
qllcDteUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteUserData.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteUserData.setDescription('Determines the data included in the call user data field of each outgoing call initiated by this DTE. Call user data can only be included when calling non-Memotec devices. In this case, up to 12 characters can be specified. The format of the call user data field is determined by the value of the qllcDteMemotec object. Related Object: qllcDteMemotec Range of Values: 0 - 12 characters Default Value: none Configuration Changed: administrative and operative')
qllcDteFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteFacility.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteFacility.setDescription('Determines the facility codes and associated parameters for this DTE. Default Value: 0 Range of Values: 0 - 20 hexadecimal characters Configuration Changed: administrative and operative')
qllcDteMemotec = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonmemotec", 1), ("cx900", 2), ("legacy", 3), ("pvc", 4))).clone('cx900')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteMemotec.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteMemotec.setDescription('Determines the type of product that the called DTE address is associated with, which in turn determines how the call user data (CUD) field is constructed for all outgoing calls from this DTE. This object also determines whether the call is associated to a Switched Virtual Circuit (SVC) or a Permanent Virtual Circuit (PVC). Options: (1): Called DTE address is a non- Memotec product. CUD field = QLLC protocol ID + value of object qllcDteUserData (2): Called DTE is a Memotec CX900 product. CUD field = QLLC protocol ID + value of object qllcDteIndex (3): Called DTE is an older Memotec product (including CX1000). CUD field = QLLC protocol ID + / + Port Group GE + CU Alias + FF + Port + FF + FF (4): The DTE is connected through a Permanent Virtual Circuit (PVC), and can be either TIU or HIU. Note that if the DTE is configured for an SVC but a PVC call is received, the QLLC layer will attempt to connect to the PVC. Default Value: cx900 (2) Related Objects: qllcDteUserData qllcDteCalledAddress qllcDteConnectMethod Configuration Changed: administrative and operative')
qllcDtePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDtePvc.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDtePvc.setDescription('Determines if this DTE makes its calls on a PVC (permanent virtual circuit). Options: no (1): This DTE does not make its calls on a PVC (all calls are switched). yes (2): This DTE makes its calls on a PVC. (For future use.) Default Value: no (1) Configuration Changed: administrative ')
qllcDteConnectMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userdata", 1), ("callingaddress", 2))).clone('userdata')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcDteConnectMethod.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteConnectMethod.setDescription("Determines if this DTE accepts calls by validating the user-data field, or by matching the calling address with its corresponding called address. Note: This object only applies to the HIU. Options: userdata (1): The HIU DTE validates the call using the user-data field. callingaddress (2): The HIU DTE validates the call by matching the call's calling address with the configured called address. Default Value: userdata (1) Configuration Changed: administrative ")
qllcDteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: qllcDteControl.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteControl.setDescription('Clears all statistics for this service access point. Options: clearStats (1): Clear statistics. Default Value: none Configuration Changed: administrative and operative')
qllcDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("pendingConnect", 2), ("disconnected", 3), ("pendingDisconnect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteStatus.setDescription('Indicates the connection status of this DTE. Options: connected (1): This DTE is connected. pendingConnect (2): This DTE has issued a call and is waiting for it to complete. disconnected (3): This DTE is not connected. pendingDisconnect (4): This DTE has issued a call clear and is waiting for it to complete. Configuration Changed: administrative and operative')
qllcDteOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteOperationalMode.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteOperationalMode.setDescription('Indicates the operational state of this DTE. Options: offLine (1): Indicates that this DTE is not operational. onLine (2): Indicates that this DTE is operational.')
qllcDteState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("xidcmd", 3), ("tstcmd", 4), ("xidrsp", 5), ("tstrsp", 6), ("reset", 7), ("setmode", 8), ("disc", 9), ("reqdisc", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteState.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteState.setDescription('Indicates the state of this DTE with regards to SNA traffic. Options: opened (1): Indicates that this DTE is in data transfer mode (a QSM was sent and a QUA was received). closed (2): Indicates that this DTE is not in data transfer mode (QSM not sent or QUA not received). xidcmd (3): Indicates that an XID was sent by the TIU and received by the HIU. tstcmd (4): Indicates that a TEST was sent by the TIU and received by the HIU. xiddrsp (5): Indicates that the HIU received an XID response from the TIU, or that the TIU received an XID response from the control unit. tsttrsp (6): Indicates that the HIU received a TEST response from the TIU, or that the TIU received a TEST response from the control unit. reset (7): Indicates that an X.25 reset was received. setmode (8): Indicates that a QSM was received. disc (9): Indicates that the HIU received a DISC from the host, or that the TIU sent a DISC to the control unit. reqdisc (10): Indicates that the HIU sent a DISC to the host, or that the TIU received a DISC from the control unit. unknown (11): Indicates that an unknown condition has occurred. ')
qllcDteConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("svc", 2), ("pvc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteConnectionType.setDescription('Identifies the type of X.25 connection that the DTE is supporting. Options: none (1): No X.25 connection exists yet. svc (2): The QLLC DTE is transmitting SNA data over a Switched Virtual Circuit (SVC). pvc (3): The QLLC DTE is transmitting SNA data over a Permanent Virtual Circuit (PVC).')
qllcDteCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteCalls.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteCalls.setDescription('Indicates the number of incoming calls received by this DTE.')
qllcDteClears = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteClears.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteClears.setDescription('Indicates the number of calls cleared by this DTE.')
qllcDteTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteTxPackets.setDescription('Indicates the number of data packets sent by this DTE.')
qllcDteRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteRxPackets.setDescription('Indicates the number of data packets received by this DTE.')
qllcDteQdc = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteQdc.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteQdc.setDescription('Indicates the number of SNA disconnects sent and received by this DTE.')
qllcDteQxid = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteQxid.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteQxid.setDescription('Indicates the number of SNA XIDs sent and received by this DTE.')
qllcDteQua = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteQua.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteQua.setDescription('Indicates the number of unnumbered acknowledgments sent and received by this DTE.')
qllcDteQsm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteQsm.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteQsm.setDescription('Indicates the number of SNRMs sent and received by this DTE.')
qllcDteX25Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteX25Reset.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteX25Reset.setDescription('Indicates the number of X.25 resets sent and received by this DTE.')
qllcDteSnalcRnr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteSnalcRnr.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteSnalcRnr.setDescription('Indicates the number of SNA link conversion layer flow control RNRs sent and received by this DTE.')
qllcDteSnalcRr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteSnalcRr.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteSnalcRr.setDescription('Indicates the number of SNA link conversion layer flow control RRs sent and received by this DTE.')
qllcDteX25Rnr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteX25Rnr.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteX25Rnr.setDescription('Indicates the number of X.25 flow control RNRs sent and received by this DTE.')
qllcDteX25Rr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcDteX25Rr.setStatus('mandatory')
if mibBuilder.loadTexts: qllcDteX25Rr.setDescription('Indicates the number of X.25 flow control RRs sent and received by this DTE.')
qllcMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 38, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: qllcMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
mibBuilder.exportSymbols("CXQLLC-MIB", qllcSapAlias=qllcSapAlias, qllcDteCalls=qllcDteCalls, qllcDteClears=qllcDteClears, qllcSapTable=qllcSapTable, qllcDtePacketSize=qllcDtePacketSize, qllcDteStatus=qllcDteStatus, qllcSapCompanionAlias=qllcSapCompanionAlias, qllcDteRowStatus=qllcDteRowStatus, qllcDteQdc=qllcDteQdc, qllcDtePvc=qllcDtePvc, qllcDteQua=qllcDteQua, qllcSapOperationalMode=qllcSapOperationalMode, qllcDteOperationalMode=qllcDteOperationalMode, qllcDteDBitCall=qllcDteDBitCall, qllcSapRowStatus=qllcSapRowStatus, qllcDteEntry=qllcDteEntry, qllcDteCalledAddress=qllcDteCalledAddress, qllcDteConnectionType=qllcDteConnectionType, qllcDteType=qllcDteType, qllcDteSnalcRr=qllcDteSnalcRr, qllcDteX25Rnr=qllcDteX25Rnr, qllcMibLevel=qllcMibLevel, qllcDteQsm=qllcDteQsm, qllcDteTxPackets=qllcDteTxPackets, qllcDteMemotec=qllcDteMemotec, qllcDteQxid=qllcDteQxid, qllcDteTable=qllcDteTable, qllcDteSap=qllcDteSap, qllcDteThroughput=qllcDteThroughput, qllcDteConnectMethod=qllcDteConnectMethod, qllcDteX25Reset=qllcDteX25Reset, qllcSapNumber=qllcSapNumber, qllcDteSnalcRnr=qllcDteSnalcRnr, qllcSapEntry=qllcSapEntry, qllcDteControl=qllcDteControl, qllcDteFacility=qllcDteFacility, qllcDteState=qllcDteState, PacketSize=PacketSize, qllcSapType=qllcSapType, qllcSapSnalcRef=qllcSapSnalcRef, qllcDteCallingAddress=qllcDteCallingAddress, qllcDteIndex=qllcDteIndex, qllcDteUserData=qllcDteUserData, X25Address=X25Address, qllcDteX25Rr=qllcDteX25Rr, qllcDteRxPackets=qllcDteRxPackets, qllcDteWindow=qllcDteWindow)
