#
# PySNMP MIB module FOUNDRY-SN-NOTIFICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-NOTIFICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:15:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
brcdNPLockupRecoveryCount, brcdNPIndex = mibBuilder.importSymbols("BROCADE-NP-TM-STATS-MIB", "brcdNPLockupRecoveryCount", "brcdNPIndex")
dot3OamLoopbackStatus, = mibBuilder.importSymbols("DOT3-OAM-MIB", "dot3OamLoopbackStatus")
snAgentBrdIndex, snAgentBrdModuleStatus, fdryLicenseType, snChasPwrSupplyDescription, snAgGblTrapMessage, snChasUnitIndex, snChasPwrSupplyIndex, snChasFanIndex, snChasFanDescription, snChasPwrSupplyStatus = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex", "snAgentBrdModuleStatus", "fdryLicenseType", "snChasPwrSupplyDescription", "snAgGblTrapMessage", "snChasUnitIndex", "snChasPwrSupplyIndex", "snChasFanIndex", "snChasFanDescription", "snChasPwrSupplyStatus")
snOspfVirtNbrRtrId, snOspfPacketSrc, snOspfIfStatusState, snOspfLsdbAreaId, snOspfVirtNbrArea, snOspfNbrState, snOspfVirtIfStatusAreaID, snOspfVirtIfStatusNeighbor, snOspfLsdbLsId, snOspfVirtIfStatusState, snOspfLsdbRouterId, snOspfVirtNbrState, snOspfRouterId, snOspfConfigErrorType, snOspfPacketType, snOspfExtLsdbLimit, snOspfIfStatusIpAddress, snOspfNbrRtrId, snOspfLsdbType, snOspfNbrIpAddr = mibBuilder.importSymbols("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtNbrRtrId", "snOspfPacketSrc", "snOspfIfStatusState", "snOspfLsdbAreaId", "snOspfVirtNbrArea", "snOspfNbrState", "snOspfVirtIfStatusAreaID", "snOspfVirtIfStatusNeighbor", "snOspfLsdbLsId", "snOspfVirtIfStatusState", "snOspfLsdbRouterId", "snOspfVirtNbrState", "snOspfRouterId", "snOspfConfigErrorType", "snOspfPacketType", "snOspfExtLsdbLimit", "snOspfIfStatusIpAddress", "snOspfNbrRtrId", "snOspfLsdbType", "snOspfNbrIpAddr")
foundry, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "foundry")
snStackingGlobalMixedMode, = mibBuilder.importSymbols("FOUNDRY-SN-STACKING-MIB", "snStackingGlobalMixedMode")
snL4TcpSynLimit, snL4TrapRealServerPort, snL4TrapRealServerCurConnections, snL4TrapRealServerName, snL4LinkVirtualInterface, snL4TrapRealServerIP, snL4TrapLinkName, snL4MaxSessionLimit = mibBuilder.importSymbols("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TcpSynLimit", "snL4TrapRealServerPort", "snL4TrapRealServerCurConnections", "snL4TrapRealServerName", "snL4LinkVirtualInterface", "snL4TrapRealServerIP", "snL4TrapLinkName", "snL4MaxSessionLimit")
snSwViolatorMacAddress, snSwViolatorPortNumber, snVLanByPortCfgVLanId = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwViolatorMacAddress", "snSwViolatorPortNumber", "snVLanByPortCfgVLanId")
wgPnPStatus, = mibBuilder.importSymbols("FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgPnPStatus")
dot1agCfmMepDbRMepState, dot1agCfmMaNetName, dot1agCfmMdName = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepState", "dot1agCfmMaNetName", "dot1agCfmMdName")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, Unsigned32, Counter32, ModuleIdentity, IpAddress, Bits, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Unsigned32", "Counter32", "ModuleIdentity", "IpAddress", "Bits", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snTraps = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 0))
snTraps.setRevisions(('2012-05-18 00:00', '2010-06-02 00:00', '2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snTraps.setRevisionsDescriptions(('Added snTrapModuleNPLockupIndication and snTrapModuleNPLockupThresholdExceeded traps.', 'Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', 'convert from SMIv1 to SMIv2',))
if mibBuilder.loadTexts: snTraps.setLastUpdated('201205180000Z')
if mibBuilder.loadTexts: snTraps.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: snTraps.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: snTraps.setDescription("This MIB module describes proprietery SNMP Trap information of Brocade Communications' router/switch product. Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
snTrapChasPwrSupply = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyStatus"))
if mibBuilder.loadTexts: snTrapChasPwrSupply.setStatus('current')
if mibBuilder.loadTexts: snTrapChasPwrSupply.setDescription('The SNMP trap that is generated when a power supply fails to operate normally. The value is a packed bit string; the 2 power supplies status are encoded into 4 bits (a nibble). The following shows the meaning of each bit: (bit 0 is the least significant bit). bit position meaning ------------ ------- 4-31 reserved 3 Power Supply 2 DC (0=bad, 1=good). 2 Power Supply 1 DC (0=bad, 1=good). 1 Power Supply 2 present status (0=present, 1=not-present). 0 Power Supply 1 present status (0=present, 1=not-present).')
snTrapLockedAddressViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 2)).setObjects(("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwViolatorPortNumber"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwViolatorMacAddress"))
if mibBuilder.loadTexts: snTrapLockedAddressViolation.setStatus('current')
if mibBuilder.loadTexts: snTrapLockedAddressViolation.setDescription('The SNMP trap that is generated when more source MAC addresses are received from a port than the maximum number of addresses configured to that port.')
snTrapOspfIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 3)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusState"))
if mibBuilder.loadTexts: snTrapOspfIfStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapOspfIfStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of a non-virtual OSPF interface. This trap should be generated when the interface state regresses (e.g., goes from Dr to Down) or progresses to a terminal state (i.e., Point-to-Point, DR Other, Dr, or Backup).')
snTrapOspfVirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 4)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusState"))
if mibBuilder.loadTexts: snTrapOspfVirtIfStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapOspfVirtIfStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual interface. This trap should be generated when the inter- face state regresses (e.g., goes from Point- to-Point to Down) or progresses to a terminal state (i.e., Point-to-Point).')
snOspfNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 5)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrIpAddr"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrRtrId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrState"))
if mibBuilder.loadTexts: snOspfNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: snOspfNbrStateChange.setDescription('An ospfNbrStateChange trap signifies that there has been a change in the state of a non- virtual OSPF neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., 2-Way or Full). When an neighbor transitions from or to Full on non-broadcast multi-access and broadcast networks, the trap should be gen- erated by the designated router. A designated router transitioning to Down will be noted by ospfIfStateChange.')
snOspfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 6)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtNbrArea"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtNbrRtrId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtNbrState"))
if mibBuilder.loadTexts: snOspfVirtNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: snOspfVirtNbrStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., Full).')
snOspfIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 7)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfConfigError.setStatus('current')
if mibBuilder.loadTexts: snOspfIfConfigError.setDescription("An ospfIfConfigError trap signifies that a packet has been received on a non-virtual in- terface from a router whose configuration parameters conflict with this router's confi- guration parameters. Note that the event op- tionMismatch should cause a trap only if it prevents an adjacency from forming.")
snOspfVirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 8)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfConfigError.setStatus('current')
if mibBuilder.loadTexts: snOspfVirtIfConfigError.setDescription("An ospfConfigError trap signifies that a pack- et has been received on a virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a trap only if it prevents an ad- jacency from forming.")
snOspfIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 9)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfAuthFailure.setStatus('current')
if mibBuilder.loadTexts: snOspfIfAuthFailure.setDescription("An ospfIfAuthFailure trap signifies that a packet has been received on a non-virtual in- terface from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type.")
snOspfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 10)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfAuthFailure.setStatus('current')
if mibBuilder.loadTexts: snOspfVirtIfAuthFailure.setDescription("An ospfVirtIfAuthFailure trap signifies that a packet has been received on a virtual interface from a router whose authentication key or au- thentication type conflicts with this router's authentication key or authentication type.")
snOspfIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 11)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: snOspfIfRxBadPacket.setDescription('An ospfIfRxBadPacket trap signifies that an OSPF packet has been received on a non-virtual interface that cannot be parsed.')
snOspfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 12)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: snOspfVirtIfRxBadPacket.setDescription('An ospfRxBadPacket trap signifies that an OSPF packet has been received on a virtual interface that cannot be parsed.')
snOspfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 13)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrRtrId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfTxRetransmit.setStatus('current')
if mibBuilder.loadTexts: snOspfTxRetransmit.setDescription('An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a non- virtual interface. All packets that may be re- transmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
ospfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 14)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: ospfVirtIfTxRetransmit.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIfTxRetransmit.setDescription('An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a virtual interface. All packets that may be retransmit- ted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
snOspfOriginateLsa = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 15)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbAreaId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfOriginateLsa.setStatus('current')
if mibBuilder.loadTexts: snOspfOriginateLsa.setDescription('An ospfOriginateLsa trap signifies that a new LSA has been originated by this router. This trap should not be invoked for simple refreshes of LSAs (which happesn every 30 minutes), but instead will only be invoked when an LSA is (re)originated due to a topology change. Addi- tionally, this trap does not include LSAs that are being flushed because they have reached MaxAge.')
snOspfMaxAgeLsa = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 16)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbAreaId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfMaxAgeLsa.setStatus('current')
if mibBuilder.loadTexts: snOspfMaxAgeLsa.setDescription("An ospfMaxAgeLsa trap signifies that one of the LSA in the router's link-state database has aged to MaxAge.")
snOspfLsdbOverflow = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 17)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfExtLsdbLimit"))
if mibBuilder.loadTexts: snOspfLsdbOverflow.setStatus('current')
if mibBuilder.loadTexts: snOspfLsdbOverflow.setDescription("An ospfLsdbOverflow trap signifies that the number of LSAs in the router's link-state data- base has exceeded ospfExtLsdbLimit.")
snOspfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 18)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfExtLsdbLimit"))
if mibBuilder.loadTexts: snOspfLsdbApproachingOverflow.setStatus('current')
if mibBuilder.loadTexts: snOspfLsdbApproachingOverflow.setDescription("An ospfLsdbApproachingOverflow trap signifies that the number of LSAs in the router's link- state database has exceeded ninety percent of ospfExtLsdbLimit.")
snTrapL4MaxSessionLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 19)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4MaxSessionLimit"))
if mibBuilder.loadTexts: snTrapL4MaxSessionLimitReached.setStatus('current')
if mibBuilder.loadTexts: snTrapL4MaxSessionLimitReached.setDescription('The SNMP trap that is generated when the maximum number of connections reached.')
snTrapL4TcpSynLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 20)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TcpSynLimit"))
if mibBuilder.loadTexts: snTrapL4TcpSynLimitReached.setStatus('current')
if mibBuilder.loadTexts: snTrapL4TcpSynLimitReached.setDescription('The SNMP trap that is generated when the number of TCP SYN limits reached.')
snTrapL4RealServerUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 21)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"))
if mibBuilder.loadTexts: snTrapL4RealServerUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerUp.setDescription('The SNMP trap that is generated when the load balancing real server is up.')
snTrapL4RealServerDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 22)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"))
if mibBuilder.loadTexts: snTrapL4RealServerDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerDown.setDescription('The SNMP trap that is generated when the load balancing real server is down.')
snTrapL4RealServerPortUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 23)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerPort"))
if mibBuilder.loadTexts: snTrapL4RealServerPortUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerPortUp.setDescription('The SNMP trap that is generated when the load balancing real server TCP port is up.')
snTrapL4RealServerPortDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 24)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerPort"))
if mibBuilder.loadTexts: snTrapL4RealServerPortDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerPortDown.setDescription('The SNMP trap that is generated when the load balancing real server TCP port is down.')
snTrapL4RealServerMaxConnectionLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 25)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerCurConnections"))
if mibBuilder.loadTexts: snTrapL4RealServerMaxConnectionLimitReached.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerMaxConnectionLimitReached.setDescription('The SNMP trap that is generated when the real server reaches maximum number of connections.')
snTrapL4BecomeStandby = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 26))
if mibBuilder.loadTexts: snTrapL4BecomeStandby.setStatus('current')
if mibBuilder.loadTexts: snTrapL4BecomeStandby.setDescription('The SNMP trap that is generated when the server load balancing switch changes state from active to standby.')
snTrapL4BecomeActive = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 27))
if mibBuilder.loadTexts: snTrapL4BecomeActive.setStatus('current')
if mibBuilder.loadTexts: snTrapL4BecomeActive.setDescription('The SNMP trap that is generated when the server load balancing switch changes state from standby to active.')
snTrapModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 28)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snTrapModuleInserted.setStatus('current')
if mibBuilder.loadTexts: snTrapModuleInserted.setDescription('The SNMP trap that is generated when a module was inserted to the chassis during system running.')
snTrapModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 29)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snTrapModuleRemoved.setStatus('current')
if mibBuilder.loadTexts: snTrapModuleRemoved.setDescription('The SNMP trap that is generated when a module was removed from the chassis during system running.')
snTrapChasPwrSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 30)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyDescription"))
if mibBuilder.loadTexts: snTrapChasPwrSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: snTrapChasPwrSupplyFailed.setDescription('The SNMP trap that is generated when a power supply operational status changed from normal to failure.')
snTrapChasFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 31)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanDescription"))
if mibBuilder.loadTexts: snTrapChasFanFailed.setStatus('current')
if mibBuilder.loadTexts: snTrapChasFanFailed.setDescription('The SNMP trap that is generated when a fan fails to operate normally.')
snTrapLockedAddressViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 32)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLockedAddressViolation2.setStatus('current')
if mibBuilder.loadTexts: snTrapLockedAddressViolation2.setDescription('The SNMP trap that is generated when more source MAC addresses are received from a port than the maximum number of addresses configured to that port.')
snTrapFsrpIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 33)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFsrpIfStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapFsrpIfStateChange.setDescription('The SNMP trap that is generated when a FSRP routing device changed state from active to standby or vice-versa.')
snTrapVrrpIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 34)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapVrrpIfStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapVrrpIfStateChange.setDescription('The SNMP trap that is generated when a VRRP routing device switched between states master, backup, intialized or uknown.')
snTrapMgmtModuleRedunStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 35)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMgmtModuleRedunStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapMgmtModuleRedunStateChange.setDescription('The SNMP trap that is generated when the management module changes redundancy state.')
snTrapTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 36)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: snTrapTemperatureWarning.setDescription('The SNMP trap that is generated when the actual temperature reading is above the warning temperature threshold.')
snTrapAccessListDeny = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 37)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapAccessListDeny.setStatus('current')
if mibBuilder.loadTexts: snTrapAccessListDeny.setDescription('The SNMP trap that is generated when a packet was denied by an access list.')
snTrapMacFilterDeny = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 38)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacFilterDeny.setStatus('current')
if mibBuilder.loadTexts: snTrapMacFilterDeny.setDescription('The SNMP trap that is generated when a packet was denied by a MAC address filter.')
snTrapL4GslbRemoteUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 39)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbRemoteUp.setDescription('The SNMP trap that is generated when the connection to the remote SI is established.')
snTrapL4GslbRemoteDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 40)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbRemoteDown.setDescription('The SNMP trap that is generated when the connection to the remote SI is down.')
snTrapL4GslbRemoteControllerUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 41)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteControllerUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbRemoteControllerUp.setDescription('The SNMP trap that is generated when the connection to the GSLB SI is established.')
snTrapL4GslbRemoteControllerDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 42)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteControllerDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbRemoteControllerDown.setDescription('The SNMP trap that is generated when the connection to the GSLB SI is down.')
snTrapL4GslbHealthCheckIpUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 43)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpUp.setDescription('The SNMP trap that is generated when GSLB health check for an address transitions from down to active state.')
snTrapL4GslbHealthCheckIpDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 44)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpDown.setDescription('The SNMP trap that is generated when GSLB health check for an address transitions from active to down state.')
snTrapL4GslbHealthCheckIpPortUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 45)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpPortUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpPortUp.setDescription('The SNMP trap that is generated when a given port for a health check address is up.')
snTrapL4GslbHealthCheckIpPortDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 46)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpPortDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpPortDown.setDescription('The SNMP trap that is generated when a given port for a health check address is down.')
snTrapL4FirewallBecomeStandby = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 47))
if mibBuilder.loadTexts: snTrapL4FirewallBecomeStandby.setStatus('current')
if mibBuilder.loadTexts: snTrapL4FirewallBecomeStandby.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall changes state from active to standby.')
snTrapL4FirewallBecomeActive = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 48))
if mibBuilder.loadTexts: snTrapL4FirewallBecomeActive.setStatus('current')
if mibBuilder.loadTexts: snTrapL4FirewallBecomeActive.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall changes state from standby to active.')
snTrapL4FirewallPathUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 49))
if mibBuilder.loadTexts: snTrapL4FirewallPathUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4FirewallPathUp.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall path is up.')
snTrapL4FirewallPathDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 50))
if mibBuilder.loadTexts: snTrapL4FirewallPathDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4FirewallPathDown.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall path is down.')
snTrapIcmpLocalExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 51)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapIcmpLocalExceedBurst.setStatus('current')
if mibBuilder.loadTexts: snTrapIcmpLocalExceedBurst.setDescription('The SNMP trap that is generated when incoming ICMP exceeds burst-MAX.')
snTrapIcmpTransitExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 52)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapIcmpTransitExceedBurst.setStatus('current')
if mibBuilder.loadTexts: snTrapIcmpTransitExceedBurst.setDescription('The SNMP trap that is generated when transit ICMP exceeds burst-MAX.')
snTrapTcpLocalExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 53)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTcpLocalExceedBurst.setStatus('current')
if mibBuilder.loadTexts: snTrapTcpLocalExceedBurst.setDescription('The SNMP trap that is generated when incoming TCP SYN exceeds burst-MAX.')
snTrapTcpTransitExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 54)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTcpTransitExceedBurst.setStatus('current')
if mibBuilder.loadTexts: snTrapTcpTransitExceedBurst.setDescription('The SNMP trap that is generated when transit TCP exceeds burst-MAX.')
snTrapL4ContentVerification = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 55))
if mibBuilder.loadTexts: snTrapL4ContentVerification.setStatus('current')
if mibBuilder.loadTexts: snTrapL4ContentVerification.setDescription('The SNMP trap that is generated when the HTTP match-list pattern is found.')
snTrapDuplicateIp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 56)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDuplicateIp.setStatus('current')
if mibBuilder.loadTexts: snTrapDuplicateIp.setDescription('Duplicate IP address detected.')
snTrapMplsProblem = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 57))
if mibBuilder.loadTexts: snTrapMplsProblem.setStatus('obsolete')
if mibBuilder.loadTexts: snTrapMplsProblem.setDescription('NOT IMPLEMENTED: MPLS Problem Detected.')
snTrapMplsException = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 58))
if mibBuilder.loadTexts: snTrapMplsException.setStatus('obsolete')
if mibBuilder.loadTexts: snTrapMplsException.setDescription('NOT IMPLEMENTED: MPLS Exception Detected.')
snTrapMplsAudit = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 59))
if mibBuilder.loadTexts: snTrapMplsAudit.setStatus('obsolete')
if mibBuilder.loadTexts: snTrapMplsAudit.setDescription('NOT IMPLEMENTED: MPLS Audit Trap.')
snTrapMplsDeveloper = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 60))
if mibBuilder.loadTexts: snTrapMplsDeveloper.setStatus('obsolete')
if mibBuilder.loadTexts: snTrapMplsDeveloper.setDescription('NOT IMPLEMENTED: MPLS Developer Trap.')
snTrapNoBmFreeQueue = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 61)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapNoBmFreeQueue.setStatus('current')
if mibBuilder.loadTexts: snTrapNoBmFreeQueue.setDescription('The SNMP trap that is generated when no free queue is available in buffer manager.')
snTrapSmcDmaDrop = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 62)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSmcDmaDrop.setStatus('current')
if mibBuilder.loadTexts: snTrapSmcDmaDrop.setDescription('The SNMP trap that is generated when SMC DMA packet is dropped.')
snTrapSmcBpDrop = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 63)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSmcBpDrop.setStatus('current')
if mibBuilder.loadTexts: snTrapSmcBpDrop.setDescription('The SNMP trap that is generated when SMC BackPlane packet is dropped.')
snTrapBmWriteSeqDrop = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 64)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapBmWriteSeqDrop.setStatus('current')
if mibBuilder.loadTexts: snTrapBmWriteSeqDrop.setDescription('The SNMP trap that is generated when BM write sequence packet is dropped.')
snTrapBgpPeerUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 65)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapBgpPeerUp.setStatus('current')
if mibBuilder.loadTexts: snTrapBgpPeerUp.setDescription('The SNMP trap that is generated when the bgp peer is up.')
snTrapBgpPeerDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 66)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapBgpPeerDown.setStatus('current')
if mibBuilder.loadTexts: snTrapBgpPeerDown.setDescription('The SNMP trap that is generated when the bgp peer is down.')
snTrapL4RealServerResponseTimeLowerLimit = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 67)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4RealServerResponseTimeLowerLimit.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerResponseTimeLowerLimit.setDescription('The SNMP trap that is generated when the real server average response time exceeds lower threshold.')
snTrapL4RealServerResponseTimeUpperLimit = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 68)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4RealServerResponseTimeUpperLimit.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerResponseTimeUpperLimit.setDescription('The SNMP trap that is generated when the real server average response time exceeds upper threshold.')
snTrapL4TcpAttackRateExceedMax = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 69)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4TcpAttackRateExceedMax.setStatus('current')
if mibBuilder.loadTexts: snTrapL4TcpAttackRateExceedMax.setDescription('The SNMP trap that is generated when the TCP attack rate exceeds configured maximum.')
snTrapL4TcpAttackRateExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 70)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4TcpAttackRateExceedThreshold.setStatus('current')
if mibBuilder.loadTexts: snTrapL4TcpAttackRateExceedThreshold.setDescription('The SNMP trap that is generated when the TCP attack rate exceeds 80% of configured maximum.')
snTrapL4ConnectionRateExceedMax = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 71)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4ConnectionRateExceedMax.setStatus('current')
if mibBuilder.loadTexts: snTrapL4ConnectionRateExceedMax.setDescription('The SNMP trap that is generated when the L4 connection rate exceeds configured maximum.')
snTrapL4ConnectionRateExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 72)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4ConnectionRateExceedThreshold.setStatus('current')
if mibBuilder.loadTexts: snTrapL4ConnectionRateExceedThreshold.setDescription('The SNMP trap that is generated when the L4 connection rate exceeds 80% of configured maximum')
snTrapRunningConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 73)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapRunningConfigChanged.setStatus('current')
if mibBuilder.loadTexts: snTrapRunningConfigChanged.setDescription('The SNMP trap that is generated when the running configuration was changed.')
snTrapStartupConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 74)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStartupConfigChanged.setStatus('current')
if mibBuilder.loadTexts: snTrapStartupConfigChanged.setDescription('The SNMP trap that is generated when the startup configuration was changed.')
snTrapUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 75)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUserLogin.setStatus('current')
if mibBuilder.loadTexts: snTrapUserLogin.setDescription('The SNMP trap that is generated when user login.')
snTrapUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 76)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUserLogout.setStatus('current')
if mibBuilder.loadTexts: snTrapUserLogout.setDescription('The SNMP trap that is generated when user logout.')
snTrapPortSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 77)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPortSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: snTrapPortSecurityViolation.setDescription('The SNMP trap that is generated when insecure MAC addresses are received from a port with MAC security feature enabled.')
snTrapPortSecurityShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 78)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPortSecurityShutdown.setStatus('current')
if mibBuilder.loadTexts: snTrapPortSecurityShutdown.setDescription('The SNMP trap that is generated when insecure MAC addresses are received from a port caused the port to shutdown.')
snTrapMrpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 79)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMrpStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapMrpStateChange.setDescription('The SNMP trap that is generated when a MRP switching and routing device changed state to disabled, blocking, preforwarding, forwarding, uknown.')
snTrapMrpCamError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 80)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMrpCamError.setStatus('current')
if mibBuilder.loadTexts: snTrapMrpCamError.setDescription('The SNMP trap that is generated when a MRP Cam Error occurs.')
snTrapChasPwrSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 81)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyDescription"))
if mibBuilder.loadTexts: snTrapChasPwrSupplyOK.setStatus('current')
if mibBuilder.loadTexts: snTrapChasPwrSupplyOK.setDescription('The SNMP trap that is generated when a power supply operational status changed from failure to normal.')
snTrapVrrpeIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 82)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapVrrpeIfStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapVrrpeIfStateChange.setDescription('The SNMP trap that is generated when a VRRPE routing device switched between states master, backup, intialized or uknown.')
snTrapVsrpIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 83)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapVsrpIfStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapVsrpIfStateChange.setDescription('The SNMP trap that is generated when a VSRP switching and routing device switched between states master, backup, intialized or uknown.')
snTrapSrcIpAddressViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 84)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSrcIpAddressViolation.setStatus('current')
if mibBuilder.loadTexts: snTrapSrcIpAddressViolation.setDescription('The SNMP trap that is generated when a rogue device spoofs source IP address for denial of service attack.')
snTrapMacAuthEnable = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 85)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacAuthEnable.setStatus('current')
if mibBuilder.loadTexts: snTrapMacAuthEnable.setDescription('The SNMP trap that is generated when MAC-Authentication is enabled on an interface.')
snTrapMacAuthDisable = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 86)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacAuthDisable.setStatus('current')
if mibBuilder.loadTexts: snTrapMacAuthDisable.setDescription('The SNMP trap that is generated when MAC-Authentication is disabled on an interface.')
snTrapMacAuthMACAccepted = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 87)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacAuthMACAccepted.setStatus('current')
if mibBuilder.loadTexts: snTrapMacAuthMACAccepted.setDescription('The SNMP trap that is generated when MAC-Authentication is successful on an interface.')
snTrapMacAuthMACRejected = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 88)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacAuthMACRejected.setStatus('current')
if mibBuilder.loadTexts: snTrapMacAuthMACRejected.setDescription('The SNMP trap that is generated when MAC-Authentication is failed on an interface.')
snTrapMacAuthPortDisabled = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 89)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacAuthPortDisabled.setStatus('current')
if mibBuilder.loadTexts: snTrapMacAuthPortDisabled.setDescription('The SNMP trap that is generated when an interface is disabled due to MAC-Authentication detecting a DOS attack on that interface.')
snTrapClientLoginReject = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 110)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapClientLoginReject.setStatus('current')
if mibBuilder.loadTexts: snTrapClientLoginReject.setDescription('The SNMP trap that is generated when a login attempt by a telnet or SSH client fails.')
snTrapLocalUserConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 111)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLocalUserConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapLocalUserConfigChange.setDescription('The SNMP trap that is generated when a local user configuration is changed.')
snTrapVlanConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 112)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapVlanConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapVlanConfigChange.setDescription('The SNMP trap that is generated when a vlan configuration is changed.')
snTrapAclConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 113)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapAclConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapAclConfigChange.setDescription('The SNMP trap that is generated when a ACL configuration is changed.')
snTrapMacFilterConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 114)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacFilterConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapMacFilterConfigChange.setDescription('The SNMP trap that is generated when a MAC Filter configuration is changed.')
snTrapSNMPConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 115)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSNMPConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapSNMPConfigChange.setDescription('The SNMP trap that is generated when a SNMP configuration is changed.')
snTrapSyslogConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 116)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSyslogConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapSyslogConfigChange.setDescription('The SNMP trap that is generated when syslog is enabled/disabled globally, or when a syslog server is added/deleted.')
snTrapPasswordConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 117)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPasswordConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapPasswordConfigChange.setDescription('The SNMP trap that is generated when enable or line password is changed.')
snTrapServerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 118)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapServerStatusChange.setStatus('current')
if mibBuilder.loadTexts: snTrapServerStatusChange.setDescription('The SNMP trap that is generated when a server is disabled or enabled.')
snTrapL4RealServerPortMaxConnectionLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 119)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4RealServerPortMaxConnectionLimitReached.setStatus('current')
if mibBuilder.loadTexts: snTrapL4RealServerPortMaxConnectionLimitReached.setDescription("The SNMP trap that is generated when the real server's port reaches maximum number of connections.")
snTrapL4LinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 120)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapLinkName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4LinkVirtualInterface"))
if mibBuilder.loadTexts: snTrapL4LinkDown.setStatus('current')
if mibBuilder.loadTexts: snTrapL4LinkDown.setDescription('The SNMP trap that is generated when the ISP link goes down.')
snTrapL4LinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 121)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapLinkName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4LinkVirtualInterface"))
if mibBuilder.loadTexts: snTrapL4LinkUp.setStatus('current')
if mibBuilder.loadTexts: snTrapL4LinkUp.setDescription('The SNMP trap that is generated when the ISP link goes up.')
snTrapPortPriorityChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 122)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPortPriorityChange.setStatus('current')
if mibBuilder.loadTexts: snTrapPortPriorityChange.setDescription('The SNMP trap that is generated when the priority of a port is changed.')
snTrapAutoPortDisableTrigger = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 123)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapAutoPortDisableTrigger.setStatus('current')
if mibBuilder.loadTexts: snTrapAutoPortDisableTrigger.setDescription('The SNMP trap that is generated when automatic port disable was triggered.')
snTrapAutoPortDisableRelease = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 124)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapAutoPortDisableRelease.setStatus('current')
if mibBuilder.loadTexts: snTrapAutoPortDisableRelease.setDescription('The SNMP trap that is generated when automatic port disable was released.')
snTrapPnPStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 125)).setObjects(("FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgPnPStatus"), ("FOUNDRY-SN-WIRELESS-GROUP-MIB", "wgPnPStatus"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPnPStatusChange.setStatus('current')
if mibBuilder.loadTexts: snTrapPnPStatusChange.setDescription('The SNMP trap that is generated when plug-and-play status change.')
snTrapWirelessIsrpPeerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 126)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapWirelessIsrpPeerStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapWirelessIsrpPeerStateChange.setDescription('The SNMP trap that is generated when ISRP Peer changes state.')
snTrapWirelessStationStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 127)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapWirelessStationStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapWirelessStationStateChange.setDescription("The SNMP trap that is generated when a wireless station's state changes.")
snTrapWirelessStationRoamingEventTriggered = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 128)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapWirelessStationRoamingEventTriggered.setStatus('current')
if mibBuilder.loadTexts: snTrapWirelessStationRoamingEventTriggered.setDescription('The SNMP trap that is generated when we received a MOVE request from the AP')
snTrapWirelessSappStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 129)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapWirelessSappStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapWirelessSappStateChange.setDescription('The SNMP trap that is generated when SAPP between an AP and a FIPS changes state.')
snTrapExternalPowerConnectionStatus = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 130)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapExternalPowerConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: snTrapExternalPowerConnectionStatus.setDescription('The SNMP trap that is generated when the external power supply connecting or disconnecting to a power over ethernet module.')
snTrapDot1xSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 131)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1xSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1xSecurityViolation.setDescription('The SNMP trap that is generated when a malicious mac address was detected.')
snTrapDot1xPortLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 132)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1xPortLinkChange.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1xPortLinkChange.setDescription('The SNMP trap that is generated when software port link status has changed to up or down.')
snTrapDot1xPortControlChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 133)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1xPortControlChange.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1xPortControlChange.setDescription('The SNMP trap that is generated when software port control status has changed to authorize or unauthorize.')
snTrapDot1xVlanIdChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 134)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1xVlanIdChange.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1xVlanIdChange.setDescription('The SNMP trap that is generated when VLAN ID of a port has changed.')
snTrapDot1xFilterSetupFailure = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 135)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1xFilterSetupFailure.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1xFilterSetupFailure.setDescription('The SNMP trap that is generated when software failed to setup a filter to a mac address of a port.')
snTrapDot1xError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 136)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1xError.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1xError.setDescription('The SNMP trap that is generated when software detected system error.')
snTrapPortConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 137)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPortConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapPortConfigChange.setDescription('The SNMP trap that is generated when a port configuration is changed.')
snTrapMacAuthVlanIdChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 138)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacAuthVlanIdChange.setStatus('current')
if mibBuilder.loadTexts: snTrapMacAuthVlanIdChange.setDescription('The SNMP trap that is generated when VLAN ID of a port has changed.')
snTrapWebAuthEnabled = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 139)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapWebAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: snTrapWebAuthEnabled.setDescription('The SNMP trap that is generated when web authentication is enabled.')
snTrapWebAuthDisabled = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 140)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapWebAuthDisabled.setStatus('current')
if mibBuilder.loadTexts: snTrapWebAuthDisabled.setDescription('The SNMP trap that is generated when web authentication is disabled.')
snTrapIpConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 141)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapIpConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapIpConfigChange.setDescription('The SNMP trap that is generated when IP system address changes.')
snTrapIpv6ConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 142)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapIpv6ConfigChange.setStatus('current')
if mibBuilder.loadTexts: snTrapIpv6ConfigChange.setDescription('The SNMP trap that is generated when IPv6 system address changes.')
snTrapMacAuthRadiusTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 143)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacAuthRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: snTrapMacAuthRadiusTimeout.setDescription('The SNMP trap that is generated when a request from Mac-Auth to RADIUS has not been answered within the retry and time limit.')
snTrapDot1xRadiusTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 144)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1xRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1xRadiusTimeout.setDescription('The SNMP trap that is generated when a request from 802.1x to RADIUS has not been answered within the retry and time limit.')
snTrapUDLDLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 145)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUDLDLinkDown.setStatus('current')
if mibBuilder.loadTexts: snTrapUDLDLinkDown.setDescription('The SNMP trap that is generated when UDLD port link status has changed to down.')
snTrapUDLDLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 146)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUDLDLinkUp.setStatus('current')
if mibBuilder.loadTexts: snTrapUDLDLinkUp.setDescription('The SNMP trap that is generated when UDLD port link status has changed to up.')
snTrapMacBasedVlanEnabled = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 147)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacBasedVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: snTrapMacBasedVlanEnabled.setDescription('The SNMP trap that is generated when MAC based VLAN is enabled.')
snTrapMacBasedVlanDisabled = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 148)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacBasedVlanDisabled.setStatus('current')
if mibBuilder.loadTexts: snTrapMacBasedVlanDisabled.setDescription('The SNMP trap that is generated when MAC based VLAN is disabled.')
snTrapChasFanNormal = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 149)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanDescription"))
if mibBuilder.loadTexts: snTrapChasFanNormal.setStatus('current')
if mibBuilder.loadTexts: snTrapChasFanNormal.setDescription('The SNMP trap that is generated when a fan operational status changed from failure to normal.')
snTrapStpRootGuardDetect = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 150)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStpRootGuardDetect.setStatus('current')
if mibBuilder.loadTexts: snTrapStpRootGuardDetect.setDescription("The SNMP trap that is generated when VLAN's Root-Guarded port received superior BPDU.")
snTrapStpRootGuardExpire = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 151)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStpRootGuardExpire.setStatus('current')
if mibBuilder.loadTexts: snTrapStpRootGuardExpire.setDescription("The SNMP trap that is generated when VLAN's ports's Root-Guard expire.")
snTrapStpBPDUGuardDetect = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 152)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStpBPDUGuardDetect.setStatus('current')
if mibBuilder.loadTexts: snTrapStpBPDUGuardDetect.setDescription("The SNMP trap that is generated when VLAN's BPDU-guarded port received BPDU . ")
snTrapMstpBPDUGuardDetect = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 153)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMstpBPDUGuardDetect.setStatus('current')
if mibBuilder.loadTexts: snTrapMstpBPDUGuardDetect.setDescription('The SNMP trap that is generated when BPDU-guarded port received BPDU . ')
snTrapErrorDisableAction = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 154)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapErrorDisableAction.setStatus('current')
if mibBuilder.loadTexts: snTrapErrorDisableAction.setDescription('The SNMP trap that is generated when Interface error-disable is hit or recovery times out . ')
snTrapLACPLinkStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 155)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLACPLinkStateChange.setStatus('current')
if mibBuilder.loadTexts: snTrapLACPLinkStateChange.setDescription('The SNMP trap that is generated when LACP port changes its state. ')
snTrapOpticalMonitoringNotFoundryOptics = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 156)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapOpticalMonitoringNotFoundryOptics.setStatus('current')
if mibBuilder.loadTexts: snTrapOpticalMonitoringNotFoundryOptics.setDescription('The SNMP trap that is generated if optical monitoring is enabled but optics vendor is not Foundry Networks.')
snTrapOpticalMonitoringFoundryOpticsNotCapable = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 157)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapOpticalMonitoringFoundryOpticsNotCapable.setStatus('current')
if mibBuilder.loadTexts: snTrapOpticalMonitoringFoundryOpticsNotCapable.setDescription('The SNMP trap that is generated if optical monitoring is enabled but the Foundry optic is not capable.')
snTrapStaticMulticastMacConfigAdd = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 158)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStaticMulticastMacConfigAdd.setStatus('current')
if mibBuilder.loadTexts: snTrapStaticMulticastMacConfigAdd.setDescription('The SNMP trap that is generated if a new entry is added to static multicast mac configuration table. Format 1: Static Mac entry with Mac Address <xxxx:xxxx:xxxx> is added to portnumber <port> on VLAN <id> Format 2: Static Mac entry with Mac Address <xxxx:xxxx:xxxx> is added to portmask <0xXXXXXXXX-XXXXXXXX> on VLAN <id>')
snTrapStaticMulticastMacConfigRemove = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 159)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStaticMulticastMacConfigRemove.setStatus('current')
if mibBuilder.loadTexts: snTrapStaticMulticastMacConfigRemove.setDescription('The SNMP trap that is generated if an entry is removed from static multicast mac configuration table . Format 1: Static Mac entry with Mac Address <xxxx:xxxx:xxxx> is deleted from portnumber <port> on VLAN <id> Format 2: Static Mac entry with Mac Address <xxxx:xxxx:xxxx> is deleted from portmask <0xXXXXXXXX-XXXXXXXX> on VLAN <id>')
snTrapSTPBPDUGuardExpire = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 160)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSTPBPDUGuardExpire.setStatus('current')
if mibBuilder.loadTexts: snTrapSTPBPDUGuardExpire.setDescription('The SNMP notification that is generated when a port is re-enabled after being disabled due to BPDU Guard Violation. Format: STP: BPDU Guard re-enabled on VLAN <id> port <slot>/<port>')
snTrapPortLoopDetection = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 161)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPortLoopDetection.setStatus('current')
if mibBuilder.loadTexts: snTrapPortLoopDetection.setDescription('The SNMP notification is generated when a port loop is detected. Format: LOOP DETECTION: VLAN <id>, port <slot>/<port> detect, putting into err-disable state')
snTrapNoFreeTcamEntry = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 162)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapNoFreeTcamEntry.setStatus('current')
if mibBuilder.loadTexts: snTrapNoFreeTcamEntry.setDescription('The SNMP trap that is generated when system is running out of TCAM spaces allocated for routing entries. ')
snTrapStackingMasterElected = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 163)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingMasterElected.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingMasterElected.setDescription('The SNMP trap that is generated when a unit is elected as Master unit for the stacking system.')
snTrapStackingUnitAdded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 164)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingUnitAdded.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingUnitAdded.setDescription('The SNMP trap that is generated when a unit has been added to the stacking system.')
snTrapStackingUnitDeleted = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 165)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingUnitDeleted.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingUnitDeleted.setDescription('The SNMP trap that is generated when a unit has been deleted from the stacking system.')
snTrapStackingChasPwrSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 166)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingChasPwrSupplyOK.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingChasPwrSupplyOK.setDescription('The SNMP trap that is generated when a power supply operational status changed from failure to normal for a stacking system.')
snTrapStackingChasPwrSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 167)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingChasPwrSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingChasPwrSupplyFailed.setDescription('The SNMP trap that is generated when a power supply operational status changed from normal to failure for a stacking system.')
snTrapStackingChasFanNormal = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 168)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanDescription"))
if mibBuilder.loadTexts: snTrapStackingChasFanNormal.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingChasFanNormal.setDescription('The SNMP trap that is generated when a fan operational status changed from failure to normal for a stacking system')
snTrapStackingChasFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 169)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanDescription"))
if mibBuilder.loadTexts: snTrapStackingChasFanFailed.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingChasFanFailed.setDescription('The SNMP trap that is generated when a fan fails to operate normally for a stacking system.')
snTrapStackingManagementMACChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 170)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingManagementMACChanged.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingManagementMACChanged.setDescription('The SNMP trap that is generated when the managemnet MAC address of a stacking system has been changed.')
snTrapStackingTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 171)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingTemperatureWarning.setDescription('The SNMP trap that is generated when the actual temperature reading is above the warning temperature threshold for a stack sytem.')
snTrapIfIndexAssignmentChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 172)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapIfIndexAssignmentChanged.setStatus('current')
if mibBuilder.loadTexts: snTrapIfIndexAssignmentChanged.setDescription('The SNMP trap that is generated when the Interface Index (IfIndex) assignment for the physical interfaces was changed.')
snTrapPBRConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 173)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPBRConfigChanged.setStatus('current')
if mibBuilder.loadTexts: snTrapPBRConfigChanged.setDescription('The SNMP trap that is generated when a Policy Based Routing (PBR) routemap is bound or unbound either globally or to an interface.')
snTrapChasPwrSupplyRPSAdd = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 174)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyDescription"))
if mibBuilder.loadTexts: snTrapChasPwrSupplyRPSAdd.setStatus('current')
if mibBuilder.loadTexts: snTrapChasPwrSupplyRPSAdd.setDescription('The SNMP trap that is generated when an External Redundant Power Supply (RPS2-EIF) is added to the system.')
snTrapChasPwrSupplyRPSRemove = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 175)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyDescription"))
if mibBuilder.loadTexts: snTrapChasPwrSupplyRPSRemove.setStatus('current')
if mibBuilder.loadTexts: snTrapChasPwrSupplyRPSRemove.setDescription('The SNMP trap that is generated when an External Redundant Power Supply (RPS2-EIF) is removed from the system.')
snTrapModuleStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 176)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgentBrdModuleStatus"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapModuleStatusChange.setStatus('current')
if mibBuilder.loadTexts: snTrapModuleStatusChange.setDescription("The SNMP notification that is generated when a module's operational state changes. The management entity receiving the notification can identify the module and the event by referencing snChasUnitIndex, snAgentBrdIndex, snAgentBrdModuleStatus. In case of a module-down event, the varbind snAgGblTrapMessage is a text string that describes the cause. In case of module-up event, snAgGblTrapMessage is a null string. ")
snTrapChasHighSpeedFansNeeded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 177)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapChasHighSpeedFansNeeded.setStatus('current')
if mibBuilder.loadTexts: snTrapChasHighSpeedFansNeeded.setDescription("The SNMP trap that is generated when chassis doesn't have high speed fans for specific modules")
snTrapSysmaxReverted = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 178)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSysmaxReverted.setStatus('current')
if mibBuilder.loadTexts: snTrapSysmaxReverted.setDescription('The SNMP trap that is generated when the revertible sysmax elements are reverted during the card bringup if they can not be accomodated in the available memory.')
snTrapSysmaxLeftLowMem = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 179)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSysmaxLeftLowMem.setStatus('current')
if mibBuilder.loadTexts: snTrapSysmaxLeftLowMem.setDescription('The SNMP trap that is generated when its found during bootup that the configured sysmax set shall leave less than 10% available memory free.')
snTrapSysMemoryLowThreshold = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 180)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSysMemoryLowThreshold.setStatus('current')
if mibBuilder.loadTexts: snTrapSysMemoryLowThreshold.setDescription('The SNMP trap that is generated when the available dynamic memory in a card is below 5% of the installed physical memory.')
snTrapSysMemoryOutThreshold = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 181)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSysMemoryOutThreshold.setStatus('current')
if mibBuilder.loadTexts: snTrapSysMemoryOutThreshold.setDescription('The SNMP trap that is generated when the dynamic memory fails to be allocated in a system.')
snTrapLinkOAMLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 182)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLinkOAMLinkDown.setStatus('current')
if mibBuilder.loadTexts: snTrapLinkOAMLinkDown.setDescription('The SNMP trap that is generated when Link-OAM port link status has changed to down.')
snTrapLinkOAMLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 183)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLinkOAMLinkUp.setStatus('current')
if mibBuilder.loadTexts: snTrapLinkOAMLinkUp.setDescription('The SNMP trap that is generated when Link-OAM port link status has changed to up.')
snTrapI2CAccessLog = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 184)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapI2CAccessLog.setStatus('current')
if mibBuilder.loadTexts: snTrapI2CAccessLog.setDescription("The SNMP trap that is generated to provide information about state of the management module's I2C accesses.")
snTrapLinkOAMLoopbackEntered = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 185)).setObjects(("IF-MIB", "ifIndex"), ("DOT3-OAM-MIB", "dot3OamLoopbackStatus"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLinkOAMLoopbackEntered.setStatus('current')
if mibBuilder.loadTexts: snTrapLinkOAMLoopbackEntered.setDescription('The SNMP trap that is generated when Link-OAM port has entered loopback mode. The link is not useful for data transfer any more.')
snTrapLinkOAMLoopbackCleared = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 186)).setObjects(("IF-MIB", "ifIndex"), ("DOT3-OAM-MIB", "dot3OamLoopbackStatus"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLinkOAMLoopbackCleared.setStatus('current')
if mibBuilder.loadTexts: snTrapLinkOAMLoopbackCleared.setDescription('The SNMP trap that is generated when Link-OAM port has entered loopback mode. The link is not useful for data transfer any more.')
snTrapLicenseAdded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 187)).setObjects(("FOUNDRY-SN-AGENT-MIB", "fdryLicenseType"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseAdded.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseAdded.setDescription('The SNMP trap that is generated when a new license is added to the system.')
snTrapLicenseRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 188)).setObjects(("FOUNDRY-SN-AGENT-MIB", "fdryLicenseType"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseRemoved.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseRemoved.setDescription('The SNMP trap that is generated when an existing license is removed from the system.')
snTrapLicenseExpires = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 189)).setObjects(("FOUNDRY-SN-AGENT-MIB", "fdryLicenseType"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseExpires.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseExpires.setDescription('The SNMP trap that is generated when a trial license is about to expire. This trap is generated daily for last 3 days and every 2 hours on the last day of expire.')
snTrapLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 190)).setObjects(("FOUNDRY-SN-AGENT-MIB", "fdryLicenseType"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseExpired.setDescription('The SNMP trap that is generated when a trial license has expired.')
snTrapUDLDCrcFailureDetected = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 191)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUDLDCrcFailureDetected.setStatus('current')
if mibBuilder.loadTexts: snTrapUDLDCrcFailureDetected.setDescription('The SNMP trap that is generated when UDLD detects CRC failures on PDUs received on a port')
snTrapDot1agCfmRemoteMEPAgeOut = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 192)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMdName"), ("IEEE8021-CFM-MIB", "dot1agCfmMaNetName"), ("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepState"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1agCfmRemoteMEPAgeOut.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1agCfmRemoteMEPAgeOut.setDescription('The SNMP trap that is generated when 802.1ag Remote MEP ages out.')
snTrapDot1agCfmRemoteMEPUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 193)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMdName"), ("IEEE8021-CFM-MIB", "dot1agCfmMaNetName"), ("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepState"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1agCfmRemoteMEPUp.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1agCfmRemoteMEPUp.setDescription('The SNMP trap that is generated when 802.1ag Remote MEP is up.')
snTrapDot1agCfmDomainCrossConnection = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 194)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMdName"), ("IEEE8021-CFM-MIB", "dot1agCfmMaNetName"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1agCfmDomainCrossConnection.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1agCfmDomainCrossConnection.setDescription('The SNMP trap that is generated when 802.1ag domain gets cross-connected.')
snTrapDot1agCfmDuplicateMEPId = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 195)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMdName"), ("IEEE8021-CFM-MIB", "dot1agCfmMaNetName"), ("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepState"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapDot1agCfmDuplicateMEPId.setStatus('current')
if mibBuilder.loadTexts: snTrapDot1agCfmDuplicateMEPId.setDescription('The SNMP trap that is generated when 802.1ag Remote MEP reports a duplicate MEP Id that conflicts with local MEP Id.')
snTrapStackingStandbyElected = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 196)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingStandbyElected.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingStandbyElected.setDescription('The SNMP trap that is generated when a unit is elected as Standby unit for the stacking system.')
snTrapMacMoveThresholdRate = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 197)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacMoveThresholdRate.setStatus('current')
if mibBuilder.loadTexts: snTrapMacMoveThresholdRate.setDescription('The SNMP notification is generated when MAC movement exceeding the certain threshold for a sampling interval is detected. Format: Mac-Move threshold-rate: MAC address <mac> moved from interface <port-id> to interface <port-id> for vlan <vlan-id>, <move-count> times exceeding the threshold rate <threshold-rate> for a sampling interval <interval> seconds')
snTrapMacMoveIntervalHistory = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 198)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacMoveIntervalHistory.setStatus('current')
if mibBuilder.loadTexts: snTrapMacMoveIntervalHistory.setDescription('The SNMP notification is generated every user configured interval, summarizing the moves in the interval . Format: Mac-Move Interval-History: <#macs> macs moved in last <interval> seconds. Total number of mac moves in the interval is <#moves>')
snTrapStackingMixedModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 199)).setObjects(("FOUNDRY-SN-STACKING-MIB", "snStackingGlobalMixedMode"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingMixedModeChanged.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingMixedModeChanged.setDescription('The SNMP trap that is generated when a stacking system mode is changed. Format: The stacking system is changed to Mixed Stacking mode ')
snTrapSysMonErrorDetect = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 200)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSysMonErrorDetect.setStatus('current')
if mibBuilder.loadTexts: snTrapSysMonErrorDetect.setDescription('The SNMP notification is generated when SYSMON detects internal error.')
snTrapMacNotification = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 201)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacNotification.setStatus('current')
if mibBuilder.loadTexts: snTrapMacNotification.setDescription('The SNMP notification is generated when MAC event(s) is(are) detected. Format: MAC-Event:MAC:<mac>-VLAN:<vlan-id>-PORT:<port-id>-ACT:<action>::MAC:<mac>-VLAN:<vlan-id>-PORT:<port-id>-ACT:<action>:: ... ...MAC:<mac>-VLAN:<vlan-id>-PORT:<port-id>-ACT:<action>:: where action: 1-MAC addition; 2-MAC deletion; 3-remove all MACs; 4-remove MAC from a port; 5-remove MAC from a VLAN; 6-remove MAC from a VLAN on a port')
snTrapMacEventBufferFull = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 202)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacEventBufferFull.setStatus('current')
if mibBuilder.loadTexts: snTrapMacEventBufferFull.setDescription('The SNMP notification is generated when MAC event buffer full is detected. Format: MAC-Event: The Buffer is full, FDB table walk is required')
snTrapStpDesignatedGuardDetect = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 203)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStpDesignatedGuardDetect.setStatus('current')
if mibBuilder.loadTexts: snTrapStpDesignatedGuardDetect.setDescription("The SNMP trap that is generated when VLAN's ports's Designated-Guard detect.")
snTrapStpDesignatedGuardDisable = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 204)).setObjects(("IF-MIB", "ifIndex"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStpDesignatedGuardDisable.setStatus('current')
if mibBuilder.loadTexts: snTrapStpDesignatedGuardDisable.setDescription("The SNMP trap that is generated when VLAN's ports's Designated-Guard disable.")
snTrapLicenseNNLLTrialNotify = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 205)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseNNLLTrialNotify.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseNNLLTrialNotify.setDescription('The SNMP trap that is generated when a non-node locked licensed feature is enabled with no a non-node locked license installed. Format: Stack <stack_id>: Use of the <feature_name> feature requires a license to be purchased and installed within <day> days. ')
snTrapLicenseNNLLTrialExpiry = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 206)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseNNLLTrialExpiry.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseNNLLTrialExpiry.setDescription('The SNMP trap that is generated when a non-node locked licensed feature is enabled after 30-44 days with no a non-node locked license installed. This message will be displayed 3 times day 30, day 37, day 44. Format: Stack <stack_id>: The <feature_name> feature has been activated for <day> days. To ensure compliance, please purchase and install a license as soon as possible ')
snTrapLicenseNNLLNonCompliant = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 207)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseNNLLNonCompliant.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseNNLLNonCompliant.setDescription('The SNMP trap that is generated when a non-node locked licensed feature is enabled after 45+ days whit no a non-node locked license installed. Or deletion of an installed license if any of the associated features are still enabled. This message will be displayed daily. Format: Stack <stack_id>: THIS UNIT IS NOT COMPLIANT. A license for <feature_name> feature must be purchased and installed or the feature <feature_name> must be deactivated to become compliant with the terms and conditions of use ')
snTrapLicenseNNLLDelete = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 208)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicenseNNLLDelete.setStatus('current')
if mibBuilder.loadTexts: snTrapLicenseNNLLDelete.setDescription('The SNMP trap that is generated when a non-node locked licensed feature is enabled after a non-node locked license is deleted. Format: Stack <stack_id>: The <license_name> license has been deleted on this unit and is available for redeployment on another unit in accordance with the terms and conditions of use. All features associated to this license must be disabled')
snTrapStackingShowStackConnect = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 209)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStackingShowStackConnect.setStatus('current')
if mibBuilder.loadTexts: snTrapStackingShowStackConnect.setDescription('The SNMP trap that is generated when the background diagnosis detects the connection errors to notify the user to check the connections in a stacking system Format: Background diagnosis detects connection errors. Please use show stack conn to view detailed connections')
snTrapChasFanOK = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1000)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanDescription"))
if mibBuilder.loadTexts: snTrapChasFanOK.setStatus('current')
if mibBuilder.loadTexts: snTrapChasFanOK.setDescription('The SNMP trap that is generated when a fan operational status changed from failure to normal or change in the fan speed due to temperature variations downwards.')
snTrapTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1001)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTemperatureOK.setStatus('current')
if mibBuilder.loadTexts: snTrapTemperatureOK.setDescription('The SNMP trap that is generated when the actual temperature reading is below the warning temperature threshold.')
snTrapCAMOverflow = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1002)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapCAMOverflow.setStatus('current')
if mibBuilder.loadTexts: snTrapCAMOverflow.setDescription('The SNMP trap that is generated when any CAM partition becomes full.')
snTrapOpticalMonitoringWarning = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1003)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapOpticalMonitoringWarning.setStatus('current')
if mibBuilder.loadTexts: snTrapOpticalMonitoringWarning.setDescription('The SNMP trap that is generated if there is a warning during optical monitoring. The first varbind, snAgGblTrapMessage, will have a detailed message on the cause of event. The second optional varbind, ifIndex, points to the affected interface originating this event. If an event does not have associated port, or has multiple associated ports, then ifIndex will have maximum value 0x7ffffff.')
snTrapOpticalMonitoringAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1004)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapOpticalMonitoringAlarm.setStatus('current')
if mibBuilder.loadTexts: snTrapOpticalMonitoringAlarm.setDescription('The SNMP trap that is generated if there is an alarm during optical monitoring. The first varbind, snAgGblTrapMessage, will have a detailed message on the cause of event. The second optional varbind, ifIndex, points to the affected interface originating this event. If an event does not have associated port, or has multiple associated ports, then ifIndex will have maximum value 0x7ffffff.')
snTrapOpticalMonitoringError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1005)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapOpticalMonitoringError.setStatus('current')
if mibBuilder.loadTexts: snTrapOpticalMonitoringError.setDescription('The SNMP trap that is generated if there is an error during optical monitoring. The first varbind, snAgGblTrapMessage, will have a detailed message on the cause of event. The second optional varbind, ifIndex, points to the affected interface originating this event. If an event does not have associated port, or has multiple associated ports, then ifIndex will have maximum value 0x7ffffff.')
snTrapPosMonitoringWarning = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1006)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPosMonitoringWarning.setStatus('current')
if mibBuilder.loadTexts: snTrapPosMonitoringWarning.setDescription('The SNMP trap that is generated if there is a warning during POS alarm monitoring. The first varbind, snAgGblTrapMessage, will have a detailed message on the cause of event. The second optional varbind, ifIndex, points to the affected interface originating this event. If an event does not have associated port, or has multiple associated ports, then ifIndex will have maximum value 0x7ffffff.')
snTrapPosMonitoringAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1007)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPosMonitoringAlarm.setStatus('current')
if mibBuilder.loadTexts: snTrapPosMonitoringAlarm.setDescription('The SNMP trap that is generated if there is an alarm up/down during POS alarm monitoring. The first varbind, snAgGblTrapMessage, will have a detailed message on the cause of event. The second optional varbind, ifIndex, points to the affected interface originating this event. If an event does not have associated port, or has multiple associated ports, then ifIndex will have maximum value 0x7ffffff.')
snTrapPosMonitoringError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1008)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPosMonitoringError.setStatus('current')
if mibBuilder.loadTexts: snTrapPosMonitoringError.setDescription('The SNMP trap that is generated if there is an error during POS alarm monitoring. The first varbind, snAgGblTrapMessage, will have a detailed message on the cause of event. The second optional varbind, ifIndex, points to the affected interface originating this event. If an event does not have associated port, or has multiple associated ports, then ifIndex will have maximum value 0x7ffffff.')
snTrapXfpSfpIncompatibleOptics = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1009)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapXfpSfpIncompatibleOptics.setStatus('current')
if mibBuilder.loadTexts: snTrapXfpSfpIncompatibleOptics.setDescription('The SNMP trap that is generated if optics is incompatible with port configuration.')
snTrapTMLoggingStart = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1015)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMLoggingStart.setStatus('current')
if mibBuilder.loadTexts: snTrapTMLoggingStart.setDescription('The SNMP trap that is generated if TM logging is started by an event trigger.')
snTrapTMLoggingStop = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1016)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMLoggingStop.setStatus('current')
if mibBuilder.loadTexts: snTrapTMLoggingStop.setDescription('The SNMP trap that is generated if TM logging stopped due to storage full.')
snTrapTMLoggingRestart = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1017)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMLoggingRestart.setStatus('current')
if mibBuilder.loadTexts: snTrapTMLoggingRestart.setDescription('The SNMP trap that is generated if TM logging restarted after user clearing the log.')
snTrapXfpSfpNotFoundryOptics = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1018)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapXfpSfpNotFoundryOptics.setStatus('current')
if mibBuilder.loadTexts: snTrapXfpSfpNotFoundryOptics.setDescription('The SNMP trap that is generated if optics vendor is not Foundry Networks.')
snTrapTMRecoverySlotReset = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1019)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMRecoverySlotReset.setStatus('current')
if mibBuilder.loadTexts: snTrapTMRecoverySlotReset.setDescription('The SNMP trap that is generated when TM recovery slot reset is triggered.')
snTrapTMEgressDataError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1020)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMEgressDataError.setStatus('current')
if mibBuilder.loadTexts: snTrapTMEgressDataError.setDescription('The SNMP trap that is generated when system detects egress data errors on Traffic Manager. For e.g. Fabric Monitoring : TM Egress data errors detected on LP <num>/TM <num>')
snTrapSFMLoggingRestart = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1021)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMLoggingRestart.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMLoggingRestart.setDescription('The SNMP trap that is generated if SFM logging restarted after user clearing the log.')
snTrapNotEnoughFapLinks = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1035)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapNotEnoughFapLinks.setStatus('current')
if mibBuilder.loadTexts: snTrapNotEnoughFapLinks.setDescription('The SNMP trap that is generated when LP FAP (Fabric Adapter Processor) has not enough links to maintain the line rate.')
snTrapSFMLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1100)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMLinkDown.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMLinkDown.setDescription('The SNMP trap that is generated when a link from LP Traffic Manager to SFM Fabric Element is down. For eg. Fabric Monitoring Link Down : SFM <num>/FE <num>/Link <num>, LP <num>/TM <num>')
snTrapSFMLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1101)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMLinkUp.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMLinkUp.setDescription('The SNMP trap that is generated when a link from LP Traffic Manager to SFM Fabric Element is up. For eg. Fabric Monitoring Link Up : SFM <num>/FE <num>/Link <num>, LP <num>/TM <num>')
snTrapSFMAccessError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1102)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMAccessError.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMAccessError.setDescription('The SNMP trap that is generated when system fails to access a SFM Fabric Element. For e.g. Fabric Monitoring : Device access failure in SFM <num>/FE <num>')
snTrapSFMStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1103)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgentBrdModuleStatus"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMStatusChange.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMStatusChange.setDescription('The SNMP notification that is generated when there is a change in the operational state of the Switch Fabric Module (SFM). For example, System: Health Monitoring: SFM <num> powered off due to failure detection')
snTrapLPFabricStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1104)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgentBrdModuleStatus"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLPFabricStatusChange.setStatus('current')
if mibBuilder.loadTexts: snTrapLPFabricStatusChange.setDescription('Health Monitoring: LP Fabric status change.')
snTrapModuleNPLockupIndication = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1105)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPIndex"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPLockupRecoveryCount"))
if mibBuilder.loadTexts: snTrapModuleNPLockupIndication.setStatus('current')
if mibBuilder.loadTexts: snTrapModuleNPLockupIndication.setDescription("The SNMP notification that is generated for the module's NP health monitoring to indicate that a lockup and recovery have occurred. Expressed in number of times in the past 1 hour ")
snTrapModuleNPLockupThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1106)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snTrapModuleNPLockupThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: snTrapModuleNPLockupThresholdExceeded.setDescription("The SNMP notification that is generated for the module's NP health monitoring when the threshold for lockup and recovery of any NP within the module have been reached. The threshold value is 5 times in the past 1 hour.")
snTrapSFMAutoTuneStart = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1107)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMAutoTuneStart.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMAutoTuneStart.setDescription('The SNMP trap that is generated when Auto tuning starts on the fabric side')
snTrapSFMAutoTuneFails = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1108)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMAutoTuneFails.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMAutoTuneFails.setDescription('The SNMP trap that is generated when Auto tuning fails on the fabric side ')
snTrapSFMAutoTuneComplete = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1109)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMAutoTuneComplete.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMAutoTuneComplete.setDescription('The SNMP trap that is generated when Auto tuning completes on the fabric side')
snTrapTMAutoTuneStart = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1110)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMAutoTuneStart.setStatus('current')
if mibBuilder.loadTexts: snTrapTMAutoTuneStart.setDescription('The SNMP trap that is generated when Auto tuning starts on the TM side')
snTrapTMAutoTuneFails = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1111)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMAutoTuneFails.setStatus('current')
if mibBuilder.loadTexts: snTrapTMAutoTuneFails.setDescription('The SNMP trap that is generated when Auto tuning fails on the TM side ')
snTrapTMAutoTuneComplete = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1112)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTMAutoTuneComplete.setStatus('current')
if mibBuilder.loadTexts: snTrapTMAutoTuneComplete.setDescription('The SNMP trap that is generated when Auto tuning completes on the TM side')
snTrapNPILKNCRCError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1113)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapNPILKNCRCError.setStatus('current')
if mibBuilder.loadTexts: snTrapNPILKNCRCError.setDescription('The SNMP trap that is generated when packet drops are observed in 2x100G ports because of Interlaken CRC errors')
snTrapARPMACMovement = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1114)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapARPMACMovement.setStatus('current')
if mibBuilder.loadTexts: snTrapARPMACMovement.setDescription('The SNMP trap that is generated when the MAC address associated with a host IP is changed.')
snTrapChassisFanSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1200)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapChassisFanSpeedLow.setStatus('current')
if mibBuilder.loadTexts: snTrapChassisFanSpeedLow.setDescription('The SNMP trap that is generated when all chassis fans change to low speed.')
snTrapChassisFanSpeedMedium = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1201)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapChassisFanSpeedMedium.setStatus('current')
if mibBuilder.loadTexts: snTrapChassisFanSpeedMedium.setDescription('The SNMP trap that is generated when all chassis fans change to medium speed.')
snTrapChassisFanSpeedMedHigh = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1202)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapChassisFanSpeedMedHigh.setStatus('current')
if mibBuilder.loadTexts: snTrapChassisFanSpeedMedHigh.setDescription('The SNMP trap that is generated when all chassis fans change to medium high speed.')
snTrapChassisFanSpeedHigh = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1203)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapChassisFanSpeedHigh.setStatus('current')
if mibBuilder.loadTexts: snTrapChassisFanSpeedHigh.setDescription('The SNMP trap that is generated when all chassis fans change to high speed.')
snTrapFIPSModeEnable = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1207)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFIPSModeEnable.setStatus('current')
if mibBuilder.loadTexts: snTrapFIPSModeEnable.setDescription('The SNMP trap that is generated when FIPS mode is enabled.')
snTrapFIPSModeDisable = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1208)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFIPSModeDisable.setStatus('current')
if mibBuilder.loadTexts: snTrapFIPSModeDisable.setDescription('The SNMP trap that is generated when FIPS mode is disabled.')
snTrapFIPSHostZeroized = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1209)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFIPSHostZeroized.setStatus('current')
if mibBuilder.loadTexts: snTrapFIPSHostZeroized.setDescription('The SNMP trap that is generated when host keys are zeroized in FIPS mode')
snTrapFIPSSharedSecretZeroized = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1210)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFIPSSharedSecretZeroized.setStatus('current')
if mibBuilder.loadTexts: snTrapFIPSSharedSecretZeroized.setDescription('The SNMP trap that is generated when shared secret are zeroized in FIPS mode')
snTrapFIPSPOSTStatus = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1211)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFIPSPOSTStatus.setStatus('current')
if mibBuilder.loadTexts: snTrapFIPSPOSTStatus.setDescription('The SNMP trap that is generated after POST.')
snTrapFIPSCryptoModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1212)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFIPSCryptoModuleFailure.setStatus('current')
if mibBuilder.loadTexts: snTrapFIPSCryptoModuleFailure.setDescription('The SNMP trap that is generated on cryptographic module failure.')
snTrapLicense2PortNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1213)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLicense2PortNotSupported.setStatus('current')
if mibBuilder.loadTexts: snTrapLicense2PortNotSupported.setDescription('The SNMP trap that is generated when a 2 port license cannot be applied due to hardware limitation.')
snTrapOpticalMonitoringOK = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1214)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snTrapOpticalMonitoringOK.setStatus('current')
if mibBuilder.loadTexts: snTrapOpticalMonitoringOK.setDescription('The SNMP trap that is generated when an interface transitions from an error to normal state because the alarms/warnings are below the threshold. snTrapOpticalMonitoringError would have been earlier generated when the interface transitioned to the error state. The first varbind, snAgGblTrapMessage, will have a detailed message on the cause of event. The second varbind, ifIndex, points to the affected interface originating this event. If an event does not have associated port, or has multiple associated ports, then ifIndex will have maximum value 0x7ffffff.')
snTrapSFMAccessOK = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1215)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSFMAccessOK.setStatus('current')
if mibBuilder.loadTexts: snTrapSFMAccessOK.setDescription('The SNMP trap that is generated when system can successfully access an SFM Fabric Element. snTrapSFMAccessError would have been generated when the system failed to access the FE. For e.g. Fabric Monitoring : Device SFM <num>/FE <num> is OK to access.')
snTrapUpgradeSingleCmdStart = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1216))
if mibBuilder.loadTexts: snTrapUpgradeSingleCmdStart.setStatus('current')
if mibBuilder.loadTexts: snTrapUpgradeSingleCmdStart.setDescription('The SNMP trap that is generated when the single-command package upgrade has started. This happens after a successful download and validation of manifest file and before the first image download takes place.')
snTrapUpgradeSingleCmdDone = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1217)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUpgradeSingleCmdDone.setStatus('current')
if mibBuilder.loadTexts: snTrapUpgradeSingleCmdDone.setDescription('The SNMP trap that is generated when the single-command package upgrade completed, or partially completed. The table brcdSwPackageLoadResultTable lists the result of the upgrade.')
snTrapAutoUpgradeStart = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1218)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snTrapAutoUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: snTrapAutoUpgradeStart.setDescription('The SNMP trap that is generated when an auto-upgrade on a line card has started.')
snTrapAutoUpgradeDone = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1219)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapAutoUpgradeDone.setStatus('current')
if mibBuilder.loadTexts: snTrapAutoUpgradeDone.setDescription('The SNMP trap that is generated when the auto-upgrade of interface module completed.')
snTrapTcamParityError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1220)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTcamParityError.setStatus('current')
if mibBuilder.loadTexts: snTrapTcamParityError.setDescription('The SNMP trap that is generated when the TCAM parity errors are detected on LP.')
snTrapLPResetOnTcamError = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1221)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"), ("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLPResetOnTcamError.setStatus('current')
if mibBuilder.loadTexts: snTrapLPResetOnTcamError.setDescription('The SNMP trap that is generated when the LP reset due to TCAM parity errors crossing the threshold or TCAM integrity check failure.')
snTrapSTPRootGuardViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1230)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSTPRootGuardViolation.setStatus('current')
if mibBuilder.loadTexts: snTrapSTPRootGuardViolation.setDescription('The SNMP trap that is generated when STP Root Guard Violation occurs on a port. Format: STP: Root-protect port <slot>/<port>, VLAN <id> inconsistent (Received superior BPDU)')
snTrapRSTPRootGuardViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1231)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapRSTPRootGuardViolation.setStatus('current')
if mibBuilder.loadTexts: snTrapRSTPRootGuardViolation.setDescription('The SNMP trap that is generated when STP Root Guard Violation occurs on a port. Format: RSTP: Root-protect port <slot>/<port>, VLAN <id> inconsistent (Received superior BPDU)')
mibBuilder.exportSymbols("FOUNDRY-SN-NOTIFICATION-MIB", snTrapChasPwrSupply=snTrapChasPwrSupply, snTrapL4LinkUp=snTrapL4LinkUp, snTrapPortPriorityChange=snTrapPortPriorityChange, snTrapSysMonErrorDetect=snTrapSysMonErrorDetect, snTrapWebAuthEnabled=snTrapWebAuthEnabled, snTrapPBRConfigChanged=snTrapPBRConfigChanged, snTrapL4LinkDown=snTrapL4LinkDown, snOspfOriginateLsa=snOspfOriginateLsa, snTrapOpticalMonitoringOK=snTrapOpticalMonitoringOK, snTrapMacAuthDisable=snTrapMacAuthDisable, snTrapSysmaxLeftLowMem=snTrapSysmaxLeftLowMem, snTrapBgpPeerDown=snTrapBgpPeerDown, snTrapStackingStandbyElected=snTrapStackingStandbyElected, snOspfMaxAgeLsa=snOspfMaxAgeLsa, snTrapDot1agCfmRemoteMEPAgeOut=snTrapDot1agCfmRemoteMEPAgeOut, snTrapStackingMixedModeChanged=snTrapStackingMixedModeChanged, snTrapXfpSfpNotFoundryOptics=snTrapXfpSfpNotFoundryOptics, snTrapLACPLinkStateChange=snTrapLACPLinkStateChange, snTrapFIPSPOSTStatus=snTrapFIPSPOSTStatus, snTrapAutoUpgradeDone=snTrapAutoUpgradeDone, snTrapTMEgressDataError=snTrapTMEgressDataError, snTrapL4RealServerResponseTimeLowerLimit=snTrapL4RealServerResponseTimeLowerLimit, snTrapStpRootGuardExpire=snTrapStpRootGuardExpire, snTrapSFMAccessError=snTrapSFMAccessError, snTrapL4ConnectionRateExceedMax=snTrapL4ConnectionRateExceedMax, snTrapExternalPowerConnectionStatus=snTrapExternalPowerConnectionStatus, snTrapChasFanNormal=snTrapChasFanNormal, snTrapLockedAddressViolation2=snTrapLockedAddressViolation2, snTrapL4FirewallBecomeStandby=snTrapL4FirewallBecomeStandby, snTrapModuleInserted=snTrapModuleInserted, snTrapL4GslbRemoteControllerUp=snTrapL4GslbRemoteControllerUp, snTrapChasPwrSupplyFailed=snTrapChasPwrSupplyFailed, snTrapMacNotification=snTrapMacNotification, snTrapWirelessSappStateChange=snTrapWirelessSappStateChange, snTrapAclConfigChange=snTrapAclConfigChange, snTrapIpv6ConfigChange=snTrapIpv6ConfigChange, snTrapSFMAutoTuneComplete=snTrapSFMAutoTuneComplete, snTrapAutoPortDisableTrigger=snTrapAutoPortDisableTrigger, snTrapMacFilterDeny=snTrapMacFilterDeny, snTrapOspfIfStateChange=snTrapOspfIfStateChange, snTrapSFMLinkDown=snTrapSFMLinkDown, snTrapL4BecomeActive=snTrapL4BecomeActive, snTrapIcmpTransitExceedBurst=snTrapIcmpTransitExceedBurst, snTrapUserLogin=snTrapUserLogin, snTrapStaticMulticastMacConfigAdd=snTrapStaticMulticastMacConfigAdd, snTrapMacAuthEnable=snTrapMacAuthEnable, snTrapPortLoopDetection=snTrapPortLoopDetection, snTrapLocalUserConfigChange=snTrapLocalUserConfigChange, snTrapLinkOAMLoopbackCleared=snTrapLinkOAMLoopbackCleared, snTrapL4GslbRemoteDown=snTrapL4GslbRemoteDown, snTrapStackingChasFanFailed=snTrapStackingChasFanFailed, snOspfVirtIfRxBadPacket=snOspfVirtIfRxBadPacket, snTrapNoFreeTcamEntry=snTrapNoFreeTcamEntry, snTrapL4ConnectionRateExceedThreshold=snTrapL4ConnectionRateExceedThreshold, snTrapOpticalMonitoringWarning=snTrapOpticalMonitoringWarning, snTrapOpticalMonitoringNotFoundryOptics=snTrapOpticalMonitoringNotFoundryOptics, snTrapAccessListDeny=snTrapAccessListDeny, snTrapStartupConfigChanged=snTrapStartupConfigChanged, snTrapDot1xVlanIdChange=snTrapDot1xVlanIdChange, snTrapVrrpIfStateChange=snTrapVrrpIfStateChange, snOspfLsdbApproachingOverflow=snOspfLsdbApproachingOverflow, snTrapMplsException=snTrapMplsException, snTrapMplsProblem=snTrapMplsProblem, snTrapLicenseNNLLNonCompliant=snTrapLicenseNNLLNonCompliant, snTrapStackingUnitDeleted=snTrapStackingUnitDeleted, snTrapServerStatusChange=snTrapServerStatusChange, snTrapTcpTransitExceedBurst=snTrapTcpTransitExceedBurst, snTrapL4RealServerResponseTimeUpperLimit=snTrapL4RealServerResponseTimeUpperLimit, snTrapModuleNPLockupIndication=snTrapModuleNPLockupIndication, snTrapXfpSfpIncompatibleOptics=snTrapXfpSfpIncompatibleOptics, snOspfIfRxBadPacket=snOspfIfRxBadPacket, snTrapL4RealServerUp=snTrapL4RealServerUp, snTrapStaticMulticastMacConfigRemove=snTrapStaticMulticastMacConfigRemove, snTrapDot1agCfmDomainCrossConnection=snTrapDot1agCfmDomainCrossConnection, snTrapLicenseNNLLDelete=snTrapLicenseNNLLDelete, snTrapL4RealServerPortMaxConnectionLimitReached=snTrapL4RealServerPortMaxConnectionLimitReached, snTrapOpticalMonitoringAlarm=snTrapOpticalMonitoringAlarm, snTrapRSTPRootGuardViolation=snTrapRSTPRootGuardViolation, snTrapStackingChasFanNormal=snTrapStackingChasFanNormal, snTrapPosMonitoringError=snTrapPosMonitoringError, snTrapFIPSHostZeroized=snTrapFIPSHostZeroized, snTrapMrpCamError=snTrapMrpCamError, snTrapI2CAccessLog=snTrapI2CAccessLog, snTrapDot1xSecurityViolation=snTrapDot1xSecurityViolation, snTrapStackingTemperatureWarning=snTrapStackingTemperatureWarning, snTrapDot1agCfmDuplicateMEPId=snTrapDot1agCfmDuplicateMEPId, snTrapSmcDmaDrop=snTrapSmcDmaDrop, snTrapSysmaxReverted=snTrapSysmaxReverted, snTrapL4RealServerPortDown=snTrapL4RealServerPortDown, snTrapFIPSModeDisable=snTrapFIPSModeDisable, snTrapMacMoveIntervalHistory=snTrapMacMoveIntervalHistory, snTrapNoBmFreeQueue=snTrapNoBmFreeQueue, snTrapDot1xPortControlChange=snTrapDot1xPortControlChange, snTrapWirelessStationStateChange=snTrapWirelessStationStateChange, snTrapLicenseExpired=snTrapLicenseExpired, snOspfIfAuthFailure=snOspfIfAuthFailure, snTrapCAMOverflow=snTrapCAMOverflow, snTrapPortConfigChange=snTrapPortConfigChange, snTrapTMLoggingStart=snTrapTMLoggingStart, snTrapL4GslbRemoteControllerDown=snTrapL4GslbRemoteControllerDown, snTrapAutoPortDisableRelease=snTrapAutoPortDisableRelease, snTrapLinkOAMLinkUp=snTrapLinkOAMLinkUp, snTrapTMAutoTuneFails=snTrapTMAutoTuneFails, snTrapTcpLocalExceedBurst=snTrapTcpLocalExceedBurst, snTrapLicense2PortNotSupported=snTrapLicense2PortNotSupported, snTrapPasswordConfigChange=snTrapPasswordConfigChange, snTrapWebAuthDisabled=snTrapWebAuthDisabled, snOspfVirtNbrStateChange=snOspfVirtNbrStateChange, snTrapDuplicateIp=snTrapDuplicateIp, snTrapL4GslbHealthCheckIpPortDown=snTrapL4GslbHealthCheckIpPortDown, snTrapUDLDLinkDown=snTrapUDLDLinkDown, snTrapLPResetOnTcamError=snTrapLPResetOnTcamError, snTrapLinkOAMLoopbackEntered=snTrapLinkOAMLoopbackEntered, snTrapMstpBPDUGuardDetect=snTrapMstpBPDUGuardDetect, snTrapDot1xFilterSetupFailure=snTrapDot1xFilterSetupFailure, snTrapLicenseNNLLTrialNotify=snTrapLicenseNNLLTrialNotify, snTrapL4RealServerDown=snTrapL4RealServerDown, snTrapStackingMasterElected=snTrapStackingMasterElected, snTrapLicenseRemoved=snTrapLicenseRemoved, snTrapMacAuthMACAccepted=snTrapMacAuthMACAccepted, snTrapMacAuthRadiusTimeout=snTrapMacAuthRadiusTimeout, snTrapTemperatureWarning=snTrapTemperatureWarning, snTrapChassisFanSpeedMedHigh=snTrapChassisFanSpeedMedHigh, snTrapStackingChasPwrSupplyOK=snTrapStackingChasPwrSupplyOK, snTrapIfIndexAssignmentChanged=snTrapIfIndexAssignmentChanged, snTrapTMLoggingRestart=snTrapTMLoggingRestart, snOspfIfConfigError=snOspfIfConfigError, snTrapSmcBpDrop=snTrapSmcBpDrop, PYSNMP_MODULE_ID=snTraps, snTrapChasPwrSupplyRPSAdd=snTrapChasPwrSupplyRPSAdd, snTrapChasHighSpeedFansNeeded=snTrapChasHighSpeedFansNeeded, snTrapL4BecomeStandby=snTrapL4BecomeStandby, snTrapFsrpIfStateChange=snTrapFsrpIfStateChange, snOspfLsdbOverflow=snOspfLsdbOverflow, snTrapL4GslbRemoteUp=snTrapL4GslbRemoteUp, snTrapMplsAudit=snTrapMplsAudit, snTrapL4FirewallBecomeActive=snTrapL4FirewallBecomeActive, snTrapOpticalMonitoringError=snTrapOpticalMonitoringError, snTrapAutoUpgradeStart=snTrapAutoUpgradeStart, snTrapOpticalMonitoringFoundryOpticsNotCapable=snTrapOpticalMonitoringFoundryOpticsNotCapable, snTrapStackingUnitAdded=snTrapStackingUnitAdded, snTrapMgmtModuleRedunStateChange=snTrapMgmtModuleRedunStateChange, snTrapWirelessStationRoamingEventTriggered=snTrapWirelessStationRoamingEventTriggered, snTrapVrrpeIfStateChange=snTrapVrrpeIfStateChange, snTrapMrpStateChange=snTrapMrpStateChange, snTrapL4TcpAttackRateExceedMax=snTrapL4TcpAttackRateExceedMax, snTrapL4GslbHealthCheckIpDown=snTrapL4GslbHealthCheckIpDown, snTrapVsrpIfStateChange=snTrapVsrpIfStateChange, snTrapSyslogConfigChange=snTrapSyslogConfigChange, snTrapTMLoggingStop=snTrapTMLoggingStop, snTrapL4FirewallPathUp=snTrapL4FirewallPathUp, snTrapMacAuthMACRejected=snTrapMacAuthMACRejected, snTrapSFMAutoTuneFails=snTrapSFMAutoTuneFails, snTrapNotEnoughFapLinks=snTrapNotEnoughFapLinks, snTrapModuleRemoved=snTrapModuleRemoved, snTrapL4TcpAttackRateExceedThreshold=snTrapL4TcpAttackRateExceedThreshold, snTrapDot1xPortLinkChange=snTrapDot1xPortLinkChange, snTrapNPILKNCRCError=snTrapNPILKNCRCError, snTrapIcmpLocalExceedBurst=snTrapIcmpLocalExceedBurst, snOspfNbrStateChange=snOspfNbrStateChange, snTrapL4RealServerMaxConnectionLimitReached=snTrapL4RealServerMaxConnectionLimitReached, snTrapMplsDeveloper=snTrapMplsDeveloper, snTrapChasPwrSupplyOK=snTrapChasPwrSupplyOK, snTrapMacAuthVlanIdChange=snTrapMacAuthVlanIdChange, snTrapL4GslbHealthCheckIpPortUp=snTrapL4GslbHealthCheckIpPortUp, snTrapLicenseAdded=snTrapLicenseAdded, snTrapLicenseExpires=snTrapLicenseExpires, snTrapL4GslbHealthCheckIpUp=snTrapL4GslbHealthCheckIpUp, snTrapMacEventBufferFull=snTrapMacEventBufferFull, snTrapSFMAccessOK=snTrapSFMAccessOK, snTrapTemperatureOK=snTrapTemperatureOK, snTrapChasPwrSupplyRPSRemove=snTrapChasPwrSupplyRPSRemove, snTrapChassisFanSpeedMedium=snTrapChassisFanSpeedMedium, snTrapDot1xRadiusTimeout=snTrapDot1xRadiusTimeout, snTrapChasFanOK=snTrapChasFanOK, snTrapModuleNPLockupThresholdExceeded=snTrapModuleNPLockupThresholdExceeded, snTrapTMAutoTuneStart=snTrapTMAutoTuneStart, snTrapL4ContentVerification=snTrapL4ContentVerification, snTrapBmWriteSeqDrop=snTrapBmWriteSeqDrop, snTrapBgpPeerUp=snTrapBgpPeerUp, snTrapUDLDLinkUp=snTrapUDLDLinkUp, snTrapChassisFanSpeedHigh=snTrapChassisFanSpeedHigh, snTrapMacMoveThresholdRate=snTrapMacMoveThresholdRate, snTrapChassisFanSpeedLow=snTrapChassisFanSpeedLow, snTrapPosMonitoringAlarm=snTrapPosMonitoringAlarm, snTrapSNMPConfigChange=snTrapSNMPConfigChange, snTrapDot1xError=snTrapDot1xError, snOspfVirtIfConfigError=snOspfVirtIfConfigError, snTrapPortSecurityShutdown=snTrapPortSecurityShutdown, snTrapSysMemoryOutThreshold=snTrapSysMemoryOutThreshold, snTrapSTPBPDUGuardExpire=snTrapSTPBPDUGuardExpire, snTrapFIPSModeEnable=snTrapFIPSModeEnable, snTrapFIPSSharedSecretZeroized=snTrapFIPSSharedSecretZeroized, ospfVirtIfTxRetransmit=ospfVirtIfTxRetransmit, snTrapL4FirewallPathDown=snTrapL4FirewallPathDown, snTrapStackingManagementMACChanged=snTrapStackingManagementMACChanged, snTrapPosMonitoringWarning=snTrapPosMonitoringWarning, snTrapLockedAddressViolation=snTrapLockedAddressViolation, snTrapUserLogout=snTrapUserLogout, snTrapClientLoginReject=snTrapClientLoginReject, snTrapStpDesignatedGuardDisable=snTrapStpDesignatedGuardDisable, snTrapDot1agCfmRemoteMEPUp=snTrapDot1agCfmRemoteMEPUp, snTrapMacBasedVlanEnabled=snTrapMacBasedVlanEnabled, snTrapMacFilterConfigChange=snTrapMacFilterConfigChange, snTrapTMAutoTuneComplete=snTrapTMAutoTuneComplete, snTrapTcamParityError=snTrapTcamParityError, snTrapPnPStatusChange=snTrapPnPStatusChange, snTrapSrcIpAddressViolation=snTrapSrcIpAddressViolation, snTraps=snTraps, snTrapL4MaxSessionLimitReached=snTrapL4MaxSessionLimitReached, snTrapChasFanFailed=snTrapChasFanFailed, snTrapFIPSCryptoModuleFailure=snTrapFIPSCryptoModuleFailure, snTrapVlanConfigChange=snTrapVlanConfigChange, snTrapIpConfigChange=snTrapIpConfigChange, snTrapStackingChasPwrSupplyFailed=snTrapStackingChasPwrSupplyFailed, snTrapARPMACMovement=snTrapARPMACMovement, snTrapLicenseNNLLTrialExpiry=snTrapLicenseNNLLTrialExpiry, snTrapSTPRootGuardViolation=snTrapSTPRootGuardViolation, snTrapTMRecoverySlotReset=snTrapTMRecoverySlotReset, snTrapOspfVirtIfStateChange=snTrapOspfVirtIfStateChange, snTrapWirelessIsrpPeerStateChange=snTrapWirelessIsrpPeerStateChange, snTrapUpgradeSingleCmdStart=snTrapUpgradeSingleCmdStart, snTrapSFMLoggingRestart=snTrapSFMLoggingRestart, snTrapPortSecurityViolation=snTrapPortSecurityViolation, snTrapSysMemoryLowThreshold=snTrapSysMemoryLowThreshold, snTrapSFMAutoTuneStart=snTrapSFMAutoTuneStart, snTrapMacAuthPortDisabled=snTrapMacAuthPortDisabled, snTrapUpgradeSingleCmdDone=snTrapUpgradeSingleCmdDone, snTrapUDLDCrcFailureDetected=snTrapUDLDCrcFailureDetected, snTrapStackingShowStackConnect=snTrapStackingShowStackConnect, snTrapModuleStatusChange=snTrapModuleStatusChange, snTrapLPFabricStatusChange=snTrapLPFabricStatusChange, snTrapMacBasedVlanDisabled=snTrapMacBasedVlanDisabled, snTrapL4RealServerPortUp=snTrapL4RealServerPortUp, snTrapSFMStatusChange=snTrapSFMStatusChange, snTrapStpBPDUGuardDetect=snTrapStpBPDUGuardDetect, snTrapErrorDisableAction=snTrapErrorDisableAction, snTrapLinkOAMLinkDown=snTrapLinkOAMLinkDown, snTrapStpDesignatedGuardDetect=snTrapStpDesignatedGuardDetect, snOspfVirtIfAuthFailure=snOspfVirtIfAuthFailure, snTrapL4TcpSynLimitReached=snTrapL4TcpSynLimitReached, snTrapStpRootGuardDetect=snTrapStpRootGuardDetect, snOspfTxRetransmit=snOspfTxRetransmit, snTrapRunningConfigChanged=snTrapRunningConfigChanged, snTrapSFMLinkUp=snTrapSFMLinkUp)
