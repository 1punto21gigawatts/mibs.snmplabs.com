#
# PySNMP MIB module CISCO-SWITCH-CEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-CEF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, NotificationType, MibIdentifier, ObjectIdentity, ModuleIdentity, Counter32, iso, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "NotificationType", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Counter32", "iso", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoSwitchCefMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 790))
ciscoSwitchCefMIB.setRevisions(('2011-12-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSwitchCefMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSwitchCefMIB.setLastUpdated('201112150000Z')
if mibBuilder.loadTexts: ciscoSwitchCefMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSwitchCefMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSwitchCefMIB.setDescription('This MIB module defines management objects for the CEF features on Cisco Layer 2 and Layer 3 devices. Definition of some of the terms used in this MIB: CEF - Cisco Express Forwarding. VPN - Virtual private network. VRF - VPN Routing and Forwarding instance. MPLS - Multiprotocol Label Switching EoMPLS - Ethernet over MPLS')
ciscoSwitchCefMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 0))
ciscoSwitchCefMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 1))
ciscoSwitchCefMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 2))
cscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1))
cscSwitchCefStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1), )
if mibBuilder.loadTexts: cscSwitchCefStatsTable.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefStatsTable.setDescription('This table provides CEF statistics for switching engines.')
cscSwitchCefStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cscSwitchCefStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefStatsEntry.setDescription('An entry providing CEF statistics information maintained by a particular switching engine entity (identified by entPhysicalIndex). An entry of this table is created if a switch engine with these CEF statistics is detected by the managed system. An entry of this table is deleted if the removal of the switching engine itself.')
cscIpv4NonVrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4NonVrfRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv4NonVrfRoutes.setDescription('The total number of IPv4 non VRF routes.')
cscIpv4VrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4VrfRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv4VrfRoutes.setDescription('The total number of IPv4 VRF routes.')
cscIpv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv4MulticastRoutes.setDescription('The total number of IPv4 multicast routes.')
cscIpv4UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4UnicastRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv4UnicastRoutes.setDescription('The total number of IPv4 unicast routes.')
cscIpv6GlobalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6GlobalRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv6GlobalRoutes.setDescription('The total number of IPv6 global routes.')
cscIpv6NonVrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6NonVrfRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv6NonVrfRoutes.setDescription('The total number of IPv6 non VRF routes.')
cscIpv6VrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6VrfRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv6VrfRoutes.setDescription('The total number of IPv6 VRF routes.')
cscIpv6LinkLocalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6LinkLocalRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv6LinkLocalRoutes.setDescription('The total number of IPv6 link-local routes.')
cscIpv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv6MulticastRoutes.setDescription('The total number of IPv6 multicast routes.')
cscIpv6UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6UnicastRoutes.setStatus('current')
if mibBuilder.loadTexts: cscIpv6UnicastRoutes.setDescription('The total number of IPv6 unicast routes.')
cscMplsRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscMplsRoutes.setStatus('current')
if mibBuilder.loadTexts: cscMplsRoutes.setDescription('The total number of MPLS routes.')
cscMplsVpnRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscMplsVpnRoutes.setStatus('current')
if mibBuilder.loadTexts: cscMplsVpnRoutes.setDescription('The total number of MPLS VPN routes.')
cscEomL2Routes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscEomL2Routes.setStatus('current')
if mibBuilder.loadTexts: cscEomL2Routes.setDescription('The total number of EoMPLS L2 routes.')
cscEomIpv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscEomIpv4MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: cscEomIpv4MulticastRoutes.setDescription('The total number of EoMPLS Ipv4 Multicast routes.')
cscEomIpv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscEomIpv6MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: cscEomIpv6MulticastRoutes.setDescription('The total number of EoMPLS Ipv6 Multicast routes.')
cscTotalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscTotalRoutes.setStatus('current')
if mibBuilder.loadTexts: cscTotalRoutes.setDescription('The total number of routes.')
cscSwitchCefMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 1))
cscSwitchCefMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2))
cscSwitchCefMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 1, 1)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv4StatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv6StatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscTotalStatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv6GlobalStatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv6LinkLocalGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefEomL2Group"), ("CISCO-SWITCH-CEF-MIB", "cscMplsStatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscMplsStatsGroupExt"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefMIBCompliance = cscSwitchCefMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefMIBCompliance.setDescription('The compliance statement for CISCO-SWITCH-CEF-MIB.')
cscSwitchCefIpv4StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 1)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv4NonVrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv4VrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv4MulticastRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv4UnicastRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv4StatsGroup = cscSwitchCefIpv4StatsGroup.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefIpv4StatsGroup.setDescription('A collection of objects providing Ipv4 statistics for switching engines.')
cscSwitchCefIpv6StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 2)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv6NonVrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv6VrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv6MulticastRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv6UnicastRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv6StatsGroup = cscSwitchCefIpv6StatsGroup.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefIpv6StatsGroup.setDescription('A collection of objects providing Ipv6 statistics for switching engines.')
cscSwitchCefIpv6GlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 3)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv6GlobalRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv6GlobalStatsGroup = cscSwitchCefIpv6GlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefIpv6GlobalStatsGroup.setDescription('A collection of objects providing Ipv6 Global statistics for switching engines.')
cscSwitchCefIpv6LinkLocalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 4)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv6LinkLocalRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv6LinkLocalGroup = cscSwitchCefIpv6LinkLocalGroup.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefIpv6LinkLocalGroup.setDescription('A collection of objects providing Ipv6 Link Local Route statistics for switching engines.')
cscSwitchCefEomL2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 5)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscEomL2Routes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefEomL2Group = cscSwitchCefEomL2Group.setStatus('current')
if mibBuilder.loadTexts: cscSwitchCefEomL2Group.setDescription('A collection of objects providing EoMPLS L2 Route statistics for switching engines.')
cscMplsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 6)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscMplsRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscMplsStatsGroup = cscMplsStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cscMplsStatsGroup.setDescription('A collection of objects providing MPLS Route statistics for switching engines.')
cscMplsStatsGroupExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 7)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscMplsVpnRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscEomIpv4MulticastRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscEomIpv6MulticastRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscMplsStatsGroupExt = cscMplsStatsGroupExt.setStatus('current')
if mibBuilder.loadTexts: cscMplsStatsGroupExt.setDescription('A collection of objects providing additional MPLS CEF statistics for switching engines.')
cscTotalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 8)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscTotalRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscTotalStatsGroup = cscTotalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cscTotalStatsGroup.setDescription('A collection of objects providing MPLS CEF statistics for switching engines.')
mibBuilder.exportSymbols("CISCO-SWITCH-CEF-MIB", cscIpv4MulticastRoutes=cscIpv4MulticastRoutes, cscIpv6VrfRoutes=cscIpv6VrfRoutes, cscSwitchCefIpv6LinkLocalGroup=cscSwitchCefIpv6LinkLocalGroup, cscEomIpv4MulticastRoutes=cscEomIpv4MulticastRoutes, cscSwitchCefStatsEntry=cscSwitchCefStatsEntry, ciscoSwitchCefMIBObjects=ciscoSwitchCefMIBObjects, cscSwitchCefMIBCompliances=cscSwitchCefMIBCompliances, cscSwitchCefMIBCompliance=cscSwitchCefMIBCompliance, cscSwitchCefIpv4StatsGroup=cscSwitchCefIpv4StatsGroup, cscEomIpv6MulticastRoutes=cscEomIpv6MulticastRoutes, PYSNMP_MODULE_ID=ciscoSwitchCefMIB, cscIpv4VrfRoutes=cscIpv4VrfRoutes, cscSwitchCefMIBGroups=cscSwitchCefMIBGroups, cscIpv4NonVrfRoutes=cscIpv4NonVrfRoutes, cscMplsVpnRoutes=cscMplsVpnRoutes, cscTotalStatsGroup=cscTotalStatsGroup, ciscoSwitchCefMIBConform=ciscoSwitchCefMIBConform, cscSwitchCefIpv6GlobalStatsGroup=cscSwitchCefIpv6GlobalStatsGroup, cscIpv6LinkLocalRoutes=cscIpv6LinkLocalRoutes, cscMplsStatsGroup=cscMplsStatsGroup, cscMplsRoutes=cscMplsRoutes, cscEomL2Routes=cscEomL2Routes, cscTotalRoutes=cscTotalRoutes, cscSwitchCefEomL2Group=cscSwitchCefEomL2Group, ciscoSwitchCefMIB=ciscoSwitchCefMIB, cscStats=cscStats, cscIpv4UnicastRoutes=cscIpv4UnicastRoutes, cscIpv6GlobalRoutes=cscIpv6GlobalRoutes, cscSwitchCefStatsTable=cscSwitchCefStatsTable, cscIpv6NonVrfRoutes=cscIpv6NonVrfRoutes, cscIpv6MulticastRoutes=cscIpv6MulticastRoutes, cscMplsStatsGroupExt=cscMplsStatsGroupExt, cscSwitchCefIpv6StatsGroup=cscSwitchCefIpv6StatsGroup, cscIpv6UnicastRoutes=cscIpv6UnicastRoutes, ciscoSwitchCefMIBNotifs=ciscoSwitchCefMIBNotifs)
