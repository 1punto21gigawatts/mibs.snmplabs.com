#
# PySNMP MIB module ENTERASYS-FIREWALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-FIREWALL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, iso, NotificationType, Gauge32, IpAddress, ObjectIdentity, Unsigned32, MibIdentifier, Bits, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "NotificationType", "Gauge32", "IpAddress", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks")
TextualConvention, VariablePointer, StorageType, DateAndTime, TruthValue, TimeStamp, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "VariablePointer", "StorageType", "DateAndTime", "TruthValue", "TimeStamp", "DisplayString", "RowStatus")
etsysFirewallMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37))
etsysFirewallMIB.setRevisions(('2004-11-17 22:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysFirewallMIB.setRevisionsDescriptions(('The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysFirewallMIB.setLastUpdated('200411172222Z')
if mibBuilder.loadTexts: etsysFirewallMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysFirewallMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01801-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysFirewallMIB.setDescription('This MIB module defines a portion of the SNMP MIB under the Enterasys Networks enterprise OID pertaining to the configuration, policy, and monitoring of firewall network devices.')
etsysFWConfigurationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1))
etsysFWPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2))
etsysFWMonitoringObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3))
etsysFWPolicyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1))
etsysFWPolicyRules = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2))
etsysFWPolicyNetworks = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3))
etsysFWPolicyServices = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4))
etsysFWPolicyFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5))
etsysFWFirewallEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWFirewallEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallEnabled.setDescription('The current state of the firewall is returned when this value is read. Setting the value to true causes the firewall to start inspecting packets. Setting the value to false causes the firewall to stop inspecting packets. The value read could be different than the last value set if the state is changed by a means other than this MIB.')
etsysFWTcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 2), Unsigned32().clone(1200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWTcpTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysFWTcpTimeout.setDescription('Firewalls can perform stateful inspection of TCP sessions. TCP sessions are created and deleted by monitoring TCP SYNC/ACK/FIN flags. Inactivity for the period specified by this object will delete the TCP session.')
etsysFWUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 3), Unsigned32().clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWUdpTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysFWUdpTimeout.setDescription('Firewalls can perform stateful inspection of UDP sessions. UDP sessions are created on the first outbound UDP packet. Inactivity for the period specified by this object will delete the UDP session.')
etsysFWIcmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 4), Unsigned32().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWIcmpTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysFWIcmpTimeout.setDescription('ICMP sessions are created on an outbound ICMP echo request. Inactivity for the period specified by this object will delete the ICMP session.')
etsysFWAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 5), Unsigned32().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthTimeout.setDescription('Firewalls can be configured to only allow packets from IP addresses that have been authenticated. An authenticated IP address will need to re-authenticate if there is no traffic from that address for the period specified by this object.')
etsysFWAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWAuthPort.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthPort.setDescription('Firewalls can be configured to only allow packets from IP addresses that have been authenticated. This object specifies the port on which the firewall listens for authentication requests.')
etsysFWLoggingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWLoggingThreshold.setStatus('current')
if mibBuilder.loadTexts: etsysFWLoggingThreshold.setDescription('The threshold for firewall event logging. Events with severity equal to or less than the value specified will be logged. The value corresponds to syslog severity levels as defined in RFC3164.')
etsysFWRPCMicrosoftTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 8), Unsigned32().clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWRPCMicrosoftTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysFWRPCMicrosoftTimeout.setDescription('The idle session timeout on packet inspection for Remote Procedure Call (RPC) -based applications. This Application Level Gateway (ALG) supports two types of RPCs - SUN (used by most UNIX systems) and Microsoft. If the RPC-based session is idle for the specified period, it will be shutdown.')
etsysFWRPCSunTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 9), Unsigned32().clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWRPCSunTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysFWRPCSunTimeout.setDescription('The idle session timeout on packet inspection for Remote Procedure Call (RPC) -based applications. This Application Level Gateway (ALG) supports two types of RPCs - SUN (used by most UNIX systems) and Microsoft. If the RPC-based session is idle for the specified period, it will be shutdown.')
etsysFWFirewallOnIntfLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWFirewallOnIntfLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallOnIntfLastChange.setDescription('The sysUpTime at which the etsysFWFirewallOnIntfTable was last modified.')
etsysFWFirewallOnIntfTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 11), )
if mibBuilder.loadTexts: etsysFWFirewallOnIntfTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallOnIntfTable.setDescription('This table defines the state of the firewall on individual interfaces. The firewall may be enabled or disabled for each interface on the device. The effective state of the firewall depends on the setting of etsysFWFirewallEnabled. | | interface etsysFWFirewallEnabled | etsysFWFirewallOnIntfEnabled | effective | | state ----------------------------------------------------------------- true true enabled true false disabled false true disabled false false disabled If an interface is not represented in this table, then its effective state is determined by etsysFWFirewallEnabled. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWFirewallOnIntfStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWFirewallOnIntfStorageType value could allow the row to be modified or deleted.')
etsysFWFirewallOnIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etsysFWFirewallOnIntfEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallOnIntfEntry.setDescription('A row defining whether firewall is enabled for a particular interface.')
etsysFWFirewallOnIntfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 11, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFirewallOnIntfEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallOnIntfEnabled.setDescription('The current state of the firewall is returned when this value is read. This setting is only effective when etsysFWFirewallEnabled is true. Setting the value to true causes the firewall to start inspecting packets, if etsysFWFirewallEnabled is true. Setting the value to false causes the firewall to stop inspecting packets, if etsysFWFirewallEnabled is true.')
etsysFWFirewallOnIntfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 11, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFirewallOnIntfStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallOnIntfStorageType.setDescription('The storage type for this row.')
etsysFWFirewallOnIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFirewallOnIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallOnIntfRowStatus.setDescription('The status of this conceptual row. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
etsysFWFirewallIntfFilterLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterLastChange.setDescription('The sysUpTime at which the etsysFWFirewallIntfFilterTable was last modified.')
etsysFWFirewallIntfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 13), )
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterTable.setDescription('This table defines the IP filters applied to individual interfaces. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWFirewallIntfFilterStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWFirewallIntfFilterStorageType value could allow the row to be modified or deleted.')
etsysFWFirewallIntfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-FIREWALL-MIB", "etsysFWFirewallIntfFilterType"))
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterEntry.setDescription('A row defining the IP filters applied to individual interfaces.')
etsysFWFirewallIntfFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ipBroadcast", 1), ("ipMulticast", 2), ("ipOptionAll", 3), ("ipOptionOther", 4), ("ipOptionLooseSourceRoute", 5), ("ipOptionRecordRoute", 6), ("ipOptionStrictSourceRoute", 7), ("ipOptionTimeStamp", 8))))
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterType.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterType.setDescription('The type of IP filter that applies on a particular interface. ipBroadcast - This filter type allows incoming/outgoing IP packets through the firewall with 255.255.255.255 set as the destination address. It enables broadcast protocols such as DHCP to traverse the firewall. ipMulticast - This filter type allows incoming/outgoing IP packets with a multicast destination address through the firewall. It enables multicast protocols such as RIP and OSPF to traverse the firewall. ipOptionAll - All IP options allowed. ipOptionOther - Any IP option other than those explicitly supported by the command. ipOptionLooseSourceRoute - Requests routing that includes the specified routers. This routing path includes a sequence of IP addresses a datagram must follow to its destination but allows multiple network hops between successive addresses on the list. ipOptionRecordRoute - Traces a route. It allows the source to create an empty list of IP addresses and arrange for each router that router that handles a datagram to add its IP address to the list. When a datagram arrives, the destination device can extract and and process the list of addresses. ipOptionStrictSourceRoute - Specifies an exact route through the Internet. This routing path includes a sequence of IP addresses a datagram must follow, hop by hop, from its source to destination. The path between two successive addresses in the list must consist of a single physical network. ipOptionTimeStamp - Records timestamps along a route. It is similar to the record route option in that every router from source to destination adds its IP address, and a timestamp, to the list. The timestamp notes the time and date a router handled the datagram, expressed in milliseconds since midnight, Universal Time.')
etsysFWFirewallIntfFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("in", 2), ("out", 3), ("both", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterDirection.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterDirection.setDescription('The direction which the filter is applied. none - Denies the packet that matched the filter type. in - Allows the packet that matched the filter type to enter the interface. out - Allows the packet that matched the filter type to exit the interface. both - Allows the packet that matched the filter type to enter and exit the interface.')
etsysFWFirewallIntfFilterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 13, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterStorageType.setDescription('The storage type for this row.')
etsysFWFirewallIntfFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 1, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfFilterRowStatus.setDescription('The status of this conceptual row. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
etsysFWSystemPolicyGroupName = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysFWSystemPolicyGroupName.setStatus('current')
if mibBuilder.loadTexts: etsysFWSystemPolicyGroupName.setDescription("The name of the policy group containing the global system policy. The value of etsysFWSystemPolicyGroupName should be used as an index into the etsysFWGroupPolicyTable to determine the list of rules that MUST be applied to the system. A zero length string indicates no system wide policy exists, and the default policy of 'allow' should be executed until one is imposed by either this object or by the interface processing the packet. Since policy group names are unique, the etsysFWSystemPolicyGroupName MUST NOT be equal to any etsysFWIntfToGroupName objects.")
etsysFWIntfToGroupLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIntfToGroupLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWIntfToGroupLastChange.setDescription('The sysUpTime at which the etsysFWIntfToGroupTable was last modified.')
etsysFWIntfToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 3), )
if mibBuilder.loadTexts: etsysFWIntfToGroupTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWIntfToGroupTable.setDescription('This table defines the group of firewall rules applied to individual interfaces. Rules for this group will be applied in the etsysFWGroupPolicyTable. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWIntfToGroupStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWIntfToGroupStorageType value could allow the row to be modified or deleted.')
etsysFWIntfToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-FIREWALL-MIB", "etsysFWIntfToGroupIntfDirection"), (0, "ENTERASYS-FIREWALL-MIB", "etsysFWIntfToGroupName"))
if mibBuilder.loadTexts: etsysFWIntfToGroupEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWIntfToGroupEntry.setDescription('A row defining the group name for a particular interface.')
etsysFWIntfToGroupIntfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: etsysFWIntfToGroupIntfDirection.setStatus('current')
if mibBuilder.loadTexts: etsysFWIntfToGroupIntfDirection.setDescription('Defines the direction of the packets to inspect, incoming (ingress), or outgoing (egress).')
etsysFWIntfToGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWIntfToGroupName.setStatus('current')
if mibBuilder.loadTexts: etsysFWIntfToGroupName.setDescription('The group name for this interface. The value of etsysFWIntfToGroupName should be used as index into the etsysFWGroupPolicyTable to determine the list of rules that MUST be applied to this interface. Since policy group names are unique, the etsysFWIntfToGroupName MUST NOT be equal to the etsysFWSystemPolicyGroupName object.')
etsysFWIntfToGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 3, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWIntfToGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWIntfToGroupStorageType.setDescription('The storage type for this row.')
etsysFWIntfToGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWIntfToGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWIntfToGroupRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
etsysFWGroupPolicyLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWGroupPolicyLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyLastChange.setDescription('The sysUpTime at which the etsysFWGroupPolicyTable was last modified.')
etsysFWGroupPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 5), )
if mibBuilder.loadTexts: etsysFWGroupPolicyTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyTable.setDescription('This table defines the firewall rules applied to groups. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWGroupPolicyStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWGroupPolicyStorageType value could allow the row to be modified or deleted.')
etsysFWGroupPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 5, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWGroupPolicyName"), (0, "ENTERASYS-FIREWALL-MIB", "etsysFWGroupPolicyRuleDef"))
if mibBuilder.loadTexts: etsysFWGroupPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyEntry.setDescription('A row defining a particular group policy rule and its priority.')
etsysFWGroupPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWGroupPolicyName.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyName.setDescription('The name of the group. These names should be either the etsysFWSystemPolicyGroupName or the etsysFWIntfToGroupName from the etsysFWIntfToGroupTable.')
etsysFWGroupPolicyRuleDef = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 5, 1, 2), SnmpAdminString())
if mibBuilder.loadTexts: etsysFWGroupPolicyRuleDef.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyRuleDef.setDescription('An etsysFWPolicyRuleDefName from the etsysFWPolicyRuleDefTable.')
etsysFWGroupPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWGroupPolicyPriority.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyPriority.setDescription('The priority of rule in the group. The firewall applies the rules from the lowest to the highest priority. Priority can only be in the range of 0 to the maximum number of policyRuleDef in the group + 1. i.e. If there are 5 policies in the group. The maximum priority the user can create is 6.')
etsysFWGroupPolicyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 5, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWGroupPolicyStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyStorageType.setDescription('The storage type for this row.')
etsysFWGroupPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWGroupPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
etsysFWPolicyRuleDefMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefMaxEntries.setDescription('The maximum number of entries allowed in the etsysFWPolicyRuleDefTable.')
etsysFWPolicyRuleDefNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefNumEntries.setDescription('The current number of entries in the etsysFWPolicyRuleDefTable.')
etsysFWPolicyRuleDefLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefLastChange.setDescription('The sysUpTime at which the etsysFWPolicyRuleDefTable was last modified.')
etsysFWPolicyRuleDefTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4), )
if mibBuilder.loadTexts: etsysFWPolicyRuleDefTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefTable.setDescription('This table defines a policy rule by associating a network objects with a filter or a set of filters and an action to take when the filter is true. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWPolicyRuleDefStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWPolicyRuleDefStorageType value could allow the row to be modified or deleted.')
etsysFWPolicyRuleDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefName"))
if mibBuilder.loadTexts: etsysFWPolicyRuleDefEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefEntry.setDescription('A row defining a particular policy definition. A rule definition binds a filter pointer to an action.')
etsysFWPolicyRuleDefName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWPolicyRuleDefName.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefName.setDescription('etsysFWPolicyRuleDefName is the administratively assigned name of the policy rule.')
etsysFWPolicyRuleDefSrcNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefSrcNetwork.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefSrcNetwork.setDescription('If the source address of the packet is in the set of addresses defined by the network object pointed to by etsysFWPolicyRuleDefSrcNetwork and the destination address is in the set of addresses defined by the network object pointed to by etsysFWPolicyRuleDefDstNetwork, the firewall will evaluate the etsysFWPolicyRuleDefFilter for the packet. This MIB defines the following tables which may be pointed to by this column. Implementations may choose to provide support for other network tables or scalars as well: etsysFWNetworkGroupTable etsysFWNetworkTable If this column is set to a VariablePointer value which references a non-existent row in an otherwise supported table, the inconsistentName exception should be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception should be returned.')
etsysFWPolicyRuleDefDstNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefDstNetwork.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefDstNetwork.setDescription('If the source address of the packet is in the set of addresses defined by the network object pointed to by etsysFWPolicyRuleDefSrcNetwork and the destination address is in the set of addresses defined by the network object pointed to by etsysFWPolicyRuleDefDstNetwork, the firewall will evaluate the etsysFWPolicyRuleDefFilter for the packet. This MIB defines the following tables which may be pointed to by this column. Implementations may choose to provide support for other network tables or scalars as well: etsysFWNetworkGroupTable etsysFWNetworkTable If this column is set to a VariablePointer value which references a non-existent row in an otherwise supported table, the inconsistentName exception should be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception should be returned.')
etsysFWPolicyRuleDefBidirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefBidirectional.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefBidirectional.setDescription('A policy may be specified as bidirectional to mean that it also operates with the etsysFWPolicyRuleDefSrcNetwork and etsysFWPolicyRuleDefDstNetwork reversed. If this column is false, the policy operates only in the direction defined by etsysFWPolicyRuleDefSrcNetwork and etsysFWPolicyRuleDefDstNetwork.')
etsysFWPolicyRuleDefService = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefService.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefService.setDescription('etsysFWPolicyRuleDefFilter points to a filter which is used to evaluate whether the action associated with this row should be fired or not. The action will only fire if the filter referenced by this object evaluates to true. This MIB defines the following tables which may be pointed to by this column. Implementations may choose to provide support for other filter tables or scalars as well: etsysFWIpHeaderFilterTable etsysFWIpOptionsFilterTable If this column is set to a VariablePointer value which references a non-existent row in an otherwise supported table, the inconsistentName exception should be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception should be returned.')
etsysFWPolicyRuleAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleAuthName.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleAuthName.setDescription('The authentication group name to use.')
etsysFWPolicyRuleDefAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow", 1), ("allowAuth", 2), ("drop", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefAction.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefAction.setDescription('The action to take when the filter is true. allow: the packet should be allowed drop: the packet should be dropped allowAuth: the packet is allowed if the source address has been authenticated to the group.')
etsysFWPolicyRuleDefLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefLogging.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefLogging.setDescription('When the filter is true, log the activity of this rule.')
etsysFWPolicyRuleDefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 9), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefStorageType.setDescription('The storage type for this row.')
etsysFWPolicyRuleDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 2, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWPolicyRuleDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object SHOULD NOT be set to active until the containing networks and filters have been defined. Once active, it MUST remain active until no etsysFWGroupPolicyRuleDef entries are referencing it.')
etsysFWNetworkGroupMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetworkGroupMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupMaxEntries.setDescription('The maximum number of entries allowed in the etsysFWNetworkGroupTable.')
etsysFWNetworkGroupNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetworkGroupNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupNumEntries.setDescription('The current number of entries in the etsysFWNetworkGroupTable.')
etsysFWNetworkGroupLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetworkGroupLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupLastChange.setDescription('The sysUpTime at which the etsysFWNetworkGroupTable was last modified.')
etsysFWNetworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 4), )
if mibBuilder.loadTexts: etsysFWNetworkGroupTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupTable.setDescription('A table defining a group of network objects from the etsysFWNetworkTable or a network group in etsysFWNetworkGroupTable. The networks contained in the group are defined in the etsysFWNetwkInNetGrpTable. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWNetworkGroupStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWNetworkGroupStorageType value could allow the row to be modified or deleted.')
etsysFWNetworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 4, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupName"))
if mibBuilder.loadTexts: etsysFWNetworkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupEntry.setDescription('An entry in the etsysFWNetworkGroupTable.')
etsysFWNetworkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWNetworkGroupName.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupName.setDescription('The administratively assigned name of the network group.')
etsysFWNetworkGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 4, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupStorageType.setDescription('The storage type for this row.')
etsysFWNetworkGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. Once active, it MAY NOT have its value changed if any active rows in the etsysFWNetwkInNetGrpTable or the etsysFWFilterDefTable are currently pointing at this row.')
etsysFWNetworkGroupMaxNetworks = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetworkGroupMaxNetworks.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupMaxNetworks.setDescription('The maximum number of networks allowed in a network group.')
etsysFWNetwkInNetGrpLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpLastChange.setDescription('The sysUpTime at which the etsysFWNetwkInNetGrpTable was last modified.')
etsysFWNetwkInNetGrpTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 7), )
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpTable.setDescription('A table defining the networks in a network group. All etsysFWNetwkInNetGrpSubNetwork objects in a etsysFWNetworkGroupName must have the same etsysFWNetworkIPVersion and etsysFWNetworkRealm. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWNetwkInNetGrpStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWNetwkInNetGrpStorageType value could allow the row to be modified or deleted.')
etsysFWNetwkInNetGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 7, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupName"), (0, "ENTERASYS-FIREWALL-MIB", "etsysFWNetwkInNetGrpSubNetwork"))
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpEntry.setDescription('An entry in the etsysFWNetwkInNetGrpTable.')
etsysFWNetwkInNetGrpSubNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 7, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpSubNetwork.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpSubNetwork.setDescription('The location of the contained network. The MIB defines the following tables which may be pointed to by this column: etsysFWNetworkTable Implementations should prevent recursion and return the inconsistentName exception if the SnmpAdminString value references an etsysFWNetworkGroupTable row that already contains the etsysFWNetworkGroupName of this row. If this column is set to a SnmpAdminString value which references a non-existent row in an otherwise supported table, the inconsistentName exception should be returned. If the table or scalar pointed to by the SnmpAdminString is not supported at all, then an inconsistentValue exception should be returned.')
etsysFWNetwkInNetGrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 7, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpStorageType.setDescription('The storage type for this row.')
etsysFWNetwkInNetGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetwkInNetGrpRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object cannot be made active until the network or network group referenced by the etsysFWNetwkInNetGrpSubNetwork is both defined and is active. An attempt to do so will result in an inconsistentValue error.')
etsysFWNetworkMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetworkMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkMaxEntries.setDescription('The maximum number of entries allowed in the etsysFWNetworkTable.')
etsysFWNetworkNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetworkNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkNumEntries.setDescription('The current number of entries in the etsysFWNetworkTable.')
etsysFWNetworkLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWNetworkLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkLastChange.setDescription('The sysUpTime at which the etsysFWNetworkTable was last modified.')
etsysFWNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11), )
if mibBuilder.loadTexts: etsysFWNetworkTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkTable.setDescription('A table defining the networks associated with filters to create the firewall policy rules. Networks can be defined with a network IP address and mask, an IP address range, or a single IP host address. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWNetworkStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWNetworkStorageType value could allow the row to be modified or deleted.')
etsysFWNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWNetworkName"))
if mibBuilder.loadTexts: etsysFWNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkEntry.setDescription('An entry in the etsysFWNetworkTable.')
etsysFWNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWNetworkName.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkName.setDescription('The administratively assigned name of the network.')
etsysFWNetworkRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkRealm.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkRealm.setDescription('A network is qualified as either an internal or external address.')
etsysFWNetworkRangeOrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useIpAddrRange", 1), ("useIpAddrMask", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkRangeOrMask.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkRangeOrMask.setDescription('When set to useIpAddrRange, the etsysFWNetworkIPAddrBegin and etsysFWNetworkIPAddrEnd define the network object in this row. When set to useIpAddrMask, the etsysFWNetworkIPAddrBegin and etsysFWNetworkIPAddrMask define the network object in this row.')
etsysFWNetworkIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkIPVersion.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkIPVersion.setDescription('The Internet Protocol version the addresses are to match against. The value of this property determines the size and format of the etsysFWNetworkIPAddressBegin, etsysFWNetworkIPAddressEnd and etsysFWNetworkIPAddressMask objects. Values of unknown, ipv4z, ipv6z and dns are not legal values for this object.')
etsysFWNetworkIPAddressBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkIPAddressBegin.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkIPAddressBegin.setDescription('The IP address that with either the etsysFWNetworkIPAddrEnd or etsysFWNetworkIPAddrMask define the network object for this row.')
etsysFWNetworkIPAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkIPAddressEnd.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkIPAddressEnd.setDescription('When etsysFWNetworkRangeOrMask is set to useIpAddrRange, this is the end of the IP address range. To define a single host set this to the value of etsysFWNetworkIpAddrBegin.')
etsysFWNetworkIPAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkIPAddressMask.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkIPAddressMask.setDescription("When etsysFWNetworkRangeOrMask is set to useIpAddrMask, this is the mask that define the IP network. To define a single host set this to all 1's.")
etsysFWNetworkStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 8), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkStorageType.setDescription('The storage type for this row.')
etsysFWNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 3, 11, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWNetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. Once active, it MAY NOT have its value changed if any active rows in the etsysFWNetwkInNetGrpTable or the etsysFWFilterDefTable are currently pointing at this row.')
etsysFWServiceGroupMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceGroupMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupMaxEntries.setDescription('The maximum number of entries allowed in the etsysFWServiceGroupTable.')
etsysFWServiceGroupNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceGroupNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupNumEntries.setDescription('The current number of entries in the etsysFWServiceGroupTable.')
etsysFWServiceGroupLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceGroupLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupLastChange.setDescription('The sysUpTime at which the etsysFWServiceGroupTable was last modified.')
etsysFWServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 4), )
if mibBuilder.loadTexts: etsysFWServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupTable.setDescription('A table defining a group of service objects from the etsysFWServiceTable or a service group in etsysFWServiceGroupTable. The services contained in the group are defined in the etsysFWNetwkInNetGrpTable. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWServiceGroupStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWServiceGroupStorageType value could allow the row to be modified or deleted.')
etsysFWServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 4, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupName"))
if mibBuilder.loadTexts: etsysFWServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupEntry.setDescription('An entry in the etsysFWServiceGroupTable.')
etsysFWServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupName.setDescription('The administratively assigned name of the service group.')
etsysFWServiceGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 4, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupStorageType.setDescription('The storage type for this row.')
etsysFWServiceGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. Once active, it MAY NOT have its value changed if any active rows in the etsysFWNetwkInNetGrpTable or the etsysFWFilterDefTable are currently pointing at this row.')
etsysFWServiceGroupMaxServices = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceGroupMaxServices.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupMaxServices.setDescription('The maximum number of services allowed in a service group.')
etsysFWServiceInSvcGrpLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpLastChange.setDescription('The sysUpTime at which the etsysFWServiceInSvcTable was last modified.')
etsysFWServiceInSvcGrpTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 7), )
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpTable.setDescription('A table defining the services in a service group. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWServiceInSvcGrpStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWServiceInSvcGrpStorageType value could allow the row to be modified or deleted.')
etsysFWServiceInSvcGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 7, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupName"), (0, "ENTERASYS-FIREWALL-MIB", "etsysFWServiceInSvcGrpSubService"))
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpEntry.setDescription('An entry in the etsysFWServiceInSvcGrpTable.')
etsysFWServiceInSvcGrpSubService = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 7, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpSubService.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpSubService.setDescription('The location of the contained service. The MIB defines the following tables which may be pointed to by this column: etsysFWServiceTable Implementations should prevent recursion and return the inconsistentName exception if the SnmpAdminString value references an etsysFWServiceGroupTable row that already contains the etsysFWServiceGroupName of this row. If this column is set to a SnmpAdminString value which references a non-existent row in an otherwise supported table, the inconsistentName exception should be returned. If the table or scalar pointed to by the SnmpAdminString is not supported at all, then an inconsistentValue exception should be returned.')
etsysFWServiceInSvcGrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 7, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpStorageType.setDescription('The storage type for this row.')
etsysFWServiceInSvcGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceInSvcGrpRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object cannot be made active until the service or service group referenced by the etsysFWNetwkInNetGrpSubService is both defined and is active. An attempt to do so will result in an inconsistentValue error.')
etsysFWServiceMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceMaxEntries.setDescription('The maximum number of entries allowed in the etsysFWServiceTable.')
etsysFWServiceNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceNumEntries.setDescription('The current number of entries in the etsysFWServiceTable.')
etsysFWServiceLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWServiceLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceLastChange.setDescription('The sysUpTime at which the etsysFWServiceTable was last modified.')
etsysFWServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11), )
if mibBuilder.loadTexts: etsysFWServiceTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceTable.setDescription('This table contains a list of service definitions to be used within the etsysFWPolicyRuleDefTable. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWServiceStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWServiceStorageType value could allow the row to be modified or deleted.')
etsysFWServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWServiceName"))
if mibBuilder.loadTexts: etsysFWServiceEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceEntry.setDescription('A definition of a service.')
etsysFWServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWServiceName.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceName.setDescription('The administrative name for this filter.')
etsysFWServiceSrcLowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 2), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceSrcLowPort.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceSrcLowPort.setDescription("The low port of the port range a packet's source must match against. To match, the port number must be greater than or equal to this value. This object is only used if sourcePort is set in etsysFWServiceType, in which case the value of 0 for this object is illegal.")
etsysFWServiceSrcHighPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 3), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceSrcHighPort.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceSrcHighPort.setDescription("The high port of the port range a packet's source must match against. To match, the port number must be less than or equal to this value. This object is only used if sourcePort is set in etsysFWServiceType, in which case the value of 0 for this object is illegal.")
etsysFWServiceDstLowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceDstLowPort.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceDstLowPort.setDescription("The low port of the port range a packet's destination must match against. To match, the port number must be greater than or equal to this value. This object is only used if destinationPort is set in etsysFWServiceType, in which case the value of 0 for this object is illegal.")
etsysFWServiceDstHighPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceDstHighPort.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceDstHighPort.setDescription("The high port of the port range a packet's destination must match against. To match, the port number must be less than or equal to this value. This object is only used if destinationPort is set in etsysFWServiceType, in which case the value of 0 for this object is illegal.")
etsysFWServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceProtocol.setDescription('The protocol number the incoming packet must match against for this filter to be evaluated as true. This object is only used if protocol is set in etsysFWServiceType.')
etsysFWServiceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceStorageType.setDescription('The storage type for this row.')
etsysFWServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 4, 11, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
etsysFWFilterDefMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWFilterDefMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefMaxEntries.setDescription('The maximum number of entries allowed in the etsysFWFilterDefTable.')
etsysFWFilterDefNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWFilterDefNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefNumEntries.setDescription('The current number of entries in the etsysFWFilterDefTable.')
etsysFWFilterDefLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWFilterDefLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefLastChange.setDescription('The sysUpTime at which the etsysFWFilterDefTable was last modified.')
etsysFWFilterDefTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4), )
if mibBuilder.loadTexts: etsysFWFilterDefTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefTable.setDescription('This table defines a policy rule by associating a network objects with a filter or a set of filters and an action to take when the filter is true. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWFilterDefStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWFilterDefStorageType value could allow the row to be modified or deleted.')
etsysFWFilterDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefName"))
if mibBuilder.loadTexts: etsysFWFilterDefEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefEntry.setDescription('A row defining a particular filter definition. A rule definition binds a filter pointer to an action.')
etsysFWFilterDefName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWFilterDefName.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefName.setDescription('etsysFWFilterDefName is the administratively assigned name of the policy rule.')
etsysFWFilterDefSrcNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefSrcNetwork.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefSrcNetwork.setDescription('If the source address of the packet is in the set of addresses defined by the network object pointed to by etsysFWFilterDefSrcNetwork and the destination address is in the set of addresses defined by the network object pointed to by etsysFWFilterDefDstNetwork, the firewall will evaluate the etsysFWFilterDefFilter for the packet. This MIB defines the following tables which may be pointed to by this column. Implementations may choose to provide support for other network tables or scalars as well: etsysFWNetworkGroupTable etsysFWNetworkTable If this column is set to an SnmpAdminString value which references a non-existent row in an otherwise supported table, the inconsistentName exception should be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception should be returned.')
etsysFWFilterDefDstNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefDstNetwork.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefDstNetwork.setDescription('If the source address of the packet is in the set of addresses defined by the network object pointed to by etsysFWFilterDefSrcNetwork and the destination address is in the set of addresses defined by the network object pointed to by etsysFWFilterDefDstNetwork, the firewall will evaluate the etsysFWFilterDefFilter for the packet. This MIB defines the following tables which may be pointed to by this column. Implementations may choose to provide support for other network tables or scalars as well: etsysFWNetworkGroupTable etsysFWNetworkTable If this column is set to a VariablePointer value which references a non-existent row in an otherwise supported table, the inconsistentName exception should be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception should be returned.')
etsysFWFilterDefBidirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefBidirectional.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefBidirectional.setDescription('A policy may be specified as bidirectional to mean that it also operates with the etsysFWFilterDefSrcNetwork and etsysFWFilterDefDstNetwork reversed. If this column is false, the policy operates only in the direction defined by etsysFWFilterDefSrcNetwork and etsysFWFilterDefDstNetwork.')
etsysFWFilterDefProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefProtocol.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefProtocol.setDescription('x')
etsysFWFilterDefICMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefICMPType.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefICMPType.setDescription('x')
etsysFWFilterDefLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefLogging.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefLogging.setDescription('When the filter is true, log the activity of this rule.')
etsysFWFilterDefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 8), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefStorageType.setDescription('The storage type for this row.')
etsysFWFilterDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWFilterDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterDefRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object SHOULD NOT be set to active until the containing networks and filters have been defined. Once active, it MUST remain active until no etsysFWGroupFilterDef entries are referencing it.')
etsysFWCLSFilterMaxFilters = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWCLSFilterMaxFilters.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterMaxFilters.setDescription('The maximum number of CLS filters allowed per etsysFWPolicyRuleDefName.')
etsysFWCLSFilterLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWCLSFilterLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterLastChange.setDescription('The sysUpTime at which the etsysFWCLSFilterTable was last modified.')
etsysFWCLSFilterTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 7), )
if mibBuilder.loadTexts: etsysFWCLSFilterTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterTable.setDescription('This table defines the command line string filters that can be applied to a policy rule definition. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWGroupPolicyStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWGroupPolicyStorageType value could allow the row to be modified or deleted.')
etsysFWCLSFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 7, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefName"), (0, "ENTERASYS-FIREWALL-MIB", "etsysFWCLSFilterIndex"))
if mibBuilder.loadTexts: etsysFWCLSFilterEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterEntry.setDescription('A row defining a particular command line string filter.')
etsysFWCLSFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: etsysFWCLSFilterIndex.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterIndex.setDescription('.')
etsysFWCLSFilterWord = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 7, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWCLSFilterWord.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterWord.setDescription('.')
etsysFWCLSFilterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 7, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWCLSFilterStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterStorageType.setDescription('The storage type for this row.')
etsysFWCLSFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWCLSFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
etsysFWHTMLFilterTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8), )
if mibBuilder.loadTexts: etsysFWHTMLFilterTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterTable.setDescription('This table contains filters that applies to the HTML protocol. The implementation may choose to allow modifications to this table only under certain SNMP contexts. The etsysFWIpOptionsHeadFiltStorageType for a given SNMP context may be readOnly, meaning the row cannot be modified or deleted. In another SNMP context, the etsysFWIpOptionsHeadFiltStorageType value could allow the row to be modified or deleted.')
etsysFWHTMLFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWHTMLFilterName"))
if mibBuilder.loadTexts: etsysFWHTMLFilterEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterEntry.setDescription('A definition of a particular filter.')
etsysFWHTMLFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: etsysFWHTMLFilterName.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterName.setDescription('The administrative name for this HTML filter.')
etsysFWHTMLFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("selected", 2), ("all", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWHTMLFilterType.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterType.setDescription('.')
etsysFWHTMLFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWHTMLFilterNetwork.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterNetwork.setDescription('.')
etsysFWHTMLFilterLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWHTMLFilterLogging.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterLogging.setDescription('.')
etsysFWHTMLFilterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWHTMLFilterStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterStorageType.setDescription('The storage type for this row.')
etsysFWHTMLFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 2, 5, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysFWHTMLFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
etsysFWPolicyRuleTrueNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueNumEntries.setDescription('The current number of entries in the etsysFWPolicyRuleTrueTable.')
etsysFWPolicyRuleTrueLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueLastChange.setDescription('The sysUpTime at which the etsysFWPolicyRuleTrueTable was last modified.')
etsysFWPolicyRuleTrueTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 3), )
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueTable.setDescription('This table contains a counter for the number of times each policy rule has been true during packet inspection since the last restart of the device.')
etsysFWPolicyRuleTrueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 3, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueIndex"))
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueEntry.setDescription('A row in the table for a named policy rule definition.')
etsysFWPolicyRuleTrueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueIndex.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueIndex.setDescription('A unique index for this row.')
etsysFWPolicyRuleTrueName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueName.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueName.setDescription('The name of the policy rule.')
etsysFWPolicyRuleTrueEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueEvents.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueEvents.setDescription('The number of times since the device has restarted that the rule has been true during packet inspection.')
etsysFWPolicyRuleTrueLastEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueLastEvent.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueLastEvent.setDescription('The date and time when this rule was last true during packet inspection.')
etsysFWSessionTotalsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessionTotalsNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessionTotalsNumEntries.setDescription('The current number of entries in the etsysFWSessionTotalsTable.')
etsysFWSessionTotalsLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessionTotalsLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessionTotalsLastChange.setDescription('The sysUpTime at which the etsysFWSessionTotalsTable was last modified.')
etsysFWSessionTotalsTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6), )
if mibBuilder.loadTexts: etsysFWSessionTotalsTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessionTotalsTable.setDescription('The firewall can perform stateful inspection of packets to allow incoming traffic associated with outgoing packets. These associations are sessions. This table returns data about the total sessions indexed by protocol-id (as defined by the assigned protocol-numbers of the IANA).')
etsysFWSessionTotalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWSessTotIndex"))
if mibBuilder.loadTexts: etsysFWSessionTotalsEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessionTotalsEntry.setDescription('A row with the session counters for a particular protocol-id.')
etsysFWSessTotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessTotIndex.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessTotIndex.setDescription('A unique index for this row.')
etsysFWSessTotProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessTotProtocolID.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessTotProtocolID.setDescription('The protocol-id for this row.')
etsysFWSessTotActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessTotActiveSessions.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessTotActiveSessions.setDescription('The total number of active sessions for this protocol.')
etsysFWSessTotPeakSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessTotPeakSessions.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessTotPeakSessions.setDescription('The peak number of sessions for this protocol since the last restart of the device.')
etsysFWSessTotBlockedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessTotBlockedSessions.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessTotBlockedSessions.setDescription('The total number of sessions that have been blocked for this protocol since the last restart of the device.')
etsysFWSessTotLastBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWSessTotLastBlock.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessTotLastBlock.setDescription('The date and time of the last blocked session for this protocol.')
etsysFWIpSessionNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionNumEntries.setDescription('The current number of entries in the etsysFWIpSessionTable.')
etsysFWIpSessionLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionLastChange.setDescription('The sysUpTime at which the etsysFWIpSessionTable was last modified.')
etsysFWIpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9), )
if mibBuilder.loadTexts: etsysFWIpSessionTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionTable.setDescription('The firewall can perform stateful inspection of packets to allow incoming traffic associated with outgoing packets. These associations are sessions. This table returns data about the current active sessions.')
etsysFWIpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionIndex"))
if mibBuilder.loadTexts: etsysFWIpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionEntry.setDescription('A row that defines an active session.')
etsysFWIpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionIndex.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionIndex.setDescription('A unique index for this row.')
etsysFWIpSessionIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionIPVersion.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionIPVersion.setDescription('The Internet Protocol version. The value of this property affects the size and format of the etsysFWIpSessionSrcAddress and etsysFWIpSessionDstAddress objects.')
etsysFWIpSessionSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionSrcAddress.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionSrcAddress.setDescription('The source IP address of this session.')
etsysFWIpSessionDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionDstAddress.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionDstAddress.setDescription('The destination IP address of this session.')
etsysFWIpSessionSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionSrcPort.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionSrcPort.setDescription('The source port of this session.')
etsysFWIpSessionDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionDstPort.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionDstPort.setDescription('The destination port of this session.')
etsysFWIpSessionProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionProtocolID.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionProtocolID.setDescription('The protocol-id of this session (as defined by the assigned protocol-numbers of the IANA).')
etsysFWIpSessionCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 9, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWIpSessionCreation.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionCreation.setDescription('The date and time this session was created.')
etsysFWAuthAddressNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWAuthAddressNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressNumEntries.setDescription('The current number of entries in the etsysFWAuthAddressTable.')
etsysFWAuthAddressLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWAuthAddressLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressLastChange.setDescription('The sysUpTime at which the etsysFWAuthAddressTable was last modified.')
etsysFWAuthAddressTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 12), )
if mibBuilder.loadTexts: etsysFWAuthAddressTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressTable.setDescription('The firewall has an action to allow traffic only to IP addresses that have authenticated with the firewall. After authentication, the authenticated address remains in a cache as long as there are packets from the address. This table returns the cached authenticated IP addresses. The table rows are removed when the IP address is idle for the number of seconds specified in etsysFWAuthTimeout.')
etsysFWAuthAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 12, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressIndex"))
if mibBuilder.loadTexts: etsysFWAuthAddressEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressEntry.setDescription('A row that defines an authenticated IP address.')
etsysFWAuthAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWAuthAddressIndex.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressIndex.setDescription('A unique index for this row.')
etsysFWAuthAddressIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 12, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWAuthAddressIPVersion.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressIPVersion.setDescription('The Internet Protocol version. The value of this property affects the size and format of the etsysFWAuthAddressIPAddress object.')
etsysFWAuthAddressIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 12, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWAuthAddressIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressIPAddress.setDescription('The authenticated IP address.')
etsysFWAuthAddressGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 12, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWAuthAddressGroupName.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressGroupName.setDescription('The group name of the authenticated IP address.')
etsysFWAuthAddressIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWAuthAddressIdleTime.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressIdleTime.setDescription('The number of seconds this IP address has been idle.')
etsysFWDoSBlockedNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWDoSBlockedNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSBlockedNumEntries.setDescription('The current number of entries in the etsysFWDoSBlockedTable.')
etsysFWDoSBlockedLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWDoSBlockedLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSBlockedLastChange.setDescription('The sysUpTime at which the etsysFWDoSBlockedTable was last modified.')
etsysFWDoSBlockedTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 15), )
if mibBuilder.loadTexts: etsysFWDoSBlockedTable.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSBlockedTable.setDescription('Firewalls can provide protection from some common forms of Denial of Service attacks. The firewall will return the total number of times the specific DoS attack has been blocked and the IP address and time of the last blocked attack.')
etsysFWDoSBlockedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 15, 1), ).setIndexNames((0, "ENTERASYS-FIREWALL-MIB", "etsysFWDoSAttackName"))
if mibBuilder.loadTexts: etsysFWDoSBlockedEntry.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSBlockedEntry.setDescription('A row that defines the statistics for a particular DoS attack.')
etsysFWDoSAttackName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 15, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWDoSAttackName.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSAttackName.setDescription("The name of a DoS attack. Example names are 'SYN Flood', 'Tear Drop', and 'ICMP Flood'.")
etsysFWDoSSrcIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 15, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWDoSSrcIPVersion.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSSrcIPVersion.setDescription('The Internet Protocol version. The value of this property affects the size and format of the etsysFWDoSScrIPAddress object.')
etsysFWDoSSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 15, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWDoSSrcIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSSrcIPAddress.setDescription('The source IP address of the last blocked attack.')
etsysFWDoSAttackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 15, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWDoSAttackTime.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSAttackTime.setDescription('The time of the last blocked attack.')
etsysFWDoSBlockedAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 3, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysFWDoSBlockedAttacks.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSBlockedAttacks.setDescription('The number of times this DoS attack has been blocked since the last restart of the device.')
etsysFirewallConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4))
etsysFirewallGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1))
etsysFirewallCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 2))
etsysFWFirewallEnabledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 1)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWFirewallEnabledGroup = etsysFWFirewallEnabledGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallEnabledGroup.setDescription('The Firewall Enabled Group.')
etsysFWFirewallConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 2)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWTcpTimeout"), ("ENTERASYS-FIREWALL-MIB", "etsysFWUdpTimeout"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIcmpTimeout"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthTimeout"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthPort"), ("ENTERASYS-FIREWALL-MIB", "etsysFWLoggingThreshold"), ("ENTERASYS-FIREWALL-MIB", "etsysFWRPCMicrosoftTimeout"), ("ENTERASYS-FIREWALL-MIB", "etsysFWRPCSunTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWFirewallConfigGroup = etsysFWFirewallConfigGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallConfigGroup.setDescription('The Firewall Configuration Group for general system parameters.')
etsysFWFirewallIntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 3)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallOnIntfLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallOnIntfEnabled"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallOnIntfStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallOnIntfRowStatus"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallIntfFilterLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallIntfFilterDirection"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallIntfFilterStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallIntfFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWFirewallIntfGroup = etsysFWFirewallIntfGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWFirewallIntfGroup.setDescription('The Firewall on Interface Enabled Group for enabling the firewall on individual interfaces.')
etsysFWSystemPolicyNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 4)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWSystemPolicyGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWSystemPolicyNameGroup = etsysFWSystemPolicyNameGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWSystemPolicyNameGroup.setDescription('The System Policy Group Name Group.')
etsysFWInterfacePolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 5)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWIntfToGroupLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIntfToGroupStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIntfToGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWInterfacePolicyGroup = etsysFWInterfacePolicyGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWInterfacePolicyGroup.setDescription('The Interface to Policy Table Group.')
etsysFWGroupPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 6)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWGroupPolicyLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWGroupPolicyPriority"), ("ENTERASYS-FIREWALL-MIB", "etsysFWGroupPolicyStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWGroupPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWGroupPolicyGroup = etsysFWGroupPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWGroupPolicyGroup.setDescription('The Group Policy to Rule Definition Table Group.')
etsysFWPolicyRuleDefGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 7)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefMaxEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefSrcNetwork"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefDstNetwork"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefBidirectional"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefService"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleAuthName"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefAction"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefLogging"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWPolicyRuleDefGroup = etsysFWPolicyRuleDefGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleDefGroup.setDescription('The Policy Rule Definition Table Group.')
etsysFWNetworkGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 8)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupMaxEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupRowStatus"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupMaxNetworks"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetwkInNetGrpLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetwkInNetGrpStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetwkInNetGrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWNetworkGroupGroup = etsysFWNetworkGroupGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroupGroup.setDescription('The Network Group Network In Network Group Tables Group')
etsysFWNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 9)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkMaxEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkRealm"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkRangeOrMask"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkIPVersion"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkIPAddressBegin"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkIPAddressEnd"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkIPAddressMask"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWNetworkGroup = etsysFWNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWNetworkGroup.setDescription('The Network Table Group.')
etsysFWServiceGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 10)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupMaxEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupRowStatus"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupMaxServices"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceInSvcGrpLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceInSvcGrpStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceInSvcGrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWServiceGroupGroup = etsysFWServiceGroupGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroupGroup.setDescription('The Service Group in Servce Group Tables Group.')
etsysFWServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 11)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWServiceMaxEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceSrcLowPort"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceSrcHighPort"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceDstLowPort"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceDstHighPort"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceProtocol"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWServiceGroup = etsysFWServiceGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWServiceGroup.setDescription('The Service Table Group.')
etsysFWFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 12)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefMaxEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefSrcNetwork"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefDstNetwork"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefBidirectional"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefProtocol"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefICMPType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefLogging"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterDefRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWFilterGroup = etsysFWFilterGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWFilterGroup.setDescription('The Filter Table Group.')
etsysFWCLSFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 13)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWCLSFilterMaxFilters"), ("ENTERASYS-FIREWALL-MIB", "etsysFWCLSFilterLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWCLSFilterWord"), ("ENTERASYS-FIREWALL-MIB", "etsysFWCLSFilterStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWCLSFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWCLSFilterGroup = etsysFWCLSFilterGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWCLSFilterGroup.setDescription('The CLS Filter Table Group.')
etsysFWHTMLFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 14)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWHTMLFilterType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWHTMLFilterNetwork"), ("ENTERASYS-FIREWALL-MIB", "etsysFWHTMLFilterLogging"), ("ENTERASYS-FIREWALL-MIB", "etsysFWHTMLFilterStorageType"), ("ENTERASYS-FIREWALL-MIB", "etsysFWHTMLFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWHTMLFilterGroup = etsysFWHTMLFilterGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWHTMLFilterGroup.setDescription('The HTML Filter Table Group.')
etsysFWPolicyRuleTrueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 15)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueIndex"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueName"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueEvents"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueLastEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWPolicyRuleTrueGroup = etsysFWPolicyRuleTrueGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWPolicyRuleTrueGroup.setDescription('The Policy Rule True Table Group.')
etsysFWSessionTotalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 16)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWSessionTotalsNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessionTotalsLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessTotIndex"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessTotProtocolID"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessTotActiveSessions"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessTotPeakSessions"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessTotBlockedSessions"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessTotLastBlock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWSessionTotalsGroup = etsysFWSessionTotalsGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWSessionTotalsGroup.setDescription('The Firewall Session Totals Table Group.')
etsysFWIpSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 17)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionIndex"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionIPVersion"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionSrcAddress"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionDstAddress"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionSrcPort"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionDstPort"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionProtocolID"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionCreation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWIpSessionGroup = etsysFWIpSessionGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWIpSessionGroup.setDescription('The Firewall IP Sessions Table Group.')
etsysFWAuthAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 18)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressIndex"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressIPVersion"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressIPAddress"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressGroupName"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressIdleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWAuthAddressGroup = etsysFWAuthAddressGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWAuthAddressGroup.setDescription('The Firewall Authenticated Addresses Table Group.')
etsysFWDoSBlockedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 1, 19)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWDoSBlockedNumEntries"), ("ENTERASYS-FIREWALL-MIB", "etsysFWDoSBlockedLastChange"), ("ENTERASYS-FIREWALL-MIB", "etsysFWDoSAttackName"), ("ENTERASYS-FIREWALL-MIB", "etsysFWDoSSrcIPVersion"), ("ENTERASYS-FIREWALL-MIB", "etsysFWDoSSrcIPAddress"), ("ENTERASYS-FIREWALL-MIB", "etsysFWDoSAttackTime"), ("ENTERASYS-FIREWALL-MIB", "etsysFWDoSBlockedAttacks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFWDoSBlockedGroup = etsysFWDoSBlockedGroup.setStatus('current')
if mibBuilder.loadTexts: etsysFWDoSBlockedGroup.setDescription('The Firewall DoS Blocked Attacks Table Group.')
etsysFirewallCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 37, 4, 2, 1)).setObjects(("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallEnabledGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWGroupPolicyGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleDefGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallConfigGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFirewallIntfGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSystemPolicyNameGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWInterfacePolicyGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWNetworkGroupGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroupGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWServiceGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWFilterGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWCLSFilterGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWHTMLFilterGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWPolicyRuleTrueGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWSessionTotalsGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWIpSessionGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWAuthAddressGroup"), ("ENTERASYS-FIREWALL-MIB", "etsysFWDoSBlockedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysFirewallCompliance = etsysFirewallCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysFirewallCompliance.setDescription('The compliance statement for devices that support the etsysFirewallMIB.')
mibBuilder.exportSymbols("ENTERASYS-FIREWALL-MIB", etsysFWIntfToGroupRowStatus=etsysFWIntfToGroupRowStatus, etsysFWServiceInSvcGrpRowStatus=etsysFWServiceInSvcGrpRowStatus, etsysFWPolicyRuleDefBidirectional=etsysFWPolicyRuleDefBidirectional, etsysFWNetwkInNetGrpSubNetwork=etsysFWNetwkInNetGrpSubNetwork, etsysFWNetworkTable=etsysFWNetworkTable, etsysFWNetworkRealm=etsysFWNetworkRealm, etsysFWServiceInSvcGrpStorageType=etsysFWServiceInSvcGrpStorageType, etsysFWSessTotIndex=etsysFWSessTotIndex, etsysFWFilterDefName=etsysFWFilterDefName, etsysFWServiceEntry=etsysFWServiceEntry, etsysFWIpSessionGroup=etsysFWIpSessionGroup, etsysFWServiceGroupName=etsysFWServiceGroupName, etsysFWNetworkGroup=etsysFWNetworkGroup, etsysFWGroupPolicyEntry=etsysFWGroupPolicyEntry, etsysFWAuthAddressGroup=etsysFWAuthAddressGroup, etsysFWFirewallOnIntfEnabled=etsysFWFirewallOnIntfEnabled, etsysFWSessionTotalsTable=etsysFWSessionTotalsTable, etsysFWPolicyRuleDefTable=etsysFWPolicyRuleDefTable, etsysFWServiceGroupEntry=etsysFWServiceGroupEntry, etsysFWCLSFilterIndex=etsysFWCLSFilterIndex, etsysFWInterfacePolicyGroup=etsysFWInterfacePolicyGroup, etsysFWServiceGroupTable=etsysFWServiceGroupTable, etsysFirewallCompliances=etsysFirewallCompliances, etsysFWFirewallOnIntfRowStatus=etsysFWFirewallOnIntfRowStatus, etsysFWServiceGroupStorageType=etsysFWServiceGroupStorageType, etsysFWIpSessionIPVersion=etsysFWIpSessionIPVersion, etsysFWIntfToGroupLastChange=etsysFWIntfToGroupLastChange, etsysFWIpSessionDstPort=etsysFWIpSessionDstPort, etsysFWCLSFilterTable=etsysFWCLSFilterTable, etsysFWPolicyRuleTrueEntry=etsysFWPolicyRuleTrueEntry, etsysFWTcpTimeout=etsysFWTcpTimeout, etsysFWIpSessionIndex=etsysFWIpSessionIndex, etsysFWDoSBlockedTable=etsysFWDoSBlockedTable, etsysFirewallConformance=etsysFirewallConformance, etsysFWNetworkMaxEntries=etsysFWNetworkMaxEntries, etsysFWServiceSrcLowPort=etsysFWServiceSrcLowPort, etsysFWFilterDefEntry=etsysFWFilterDefEntry, etsysFWFilterDefNumEntries=etsysFWFilterDefNumEntries, etsysFWNetwkInNetGrpTable=etsysFWNetwkInNetGrpTable, etsysFWPolicyRuleTrueLastEvent=etsysFWPolicyRuleTrueLastEvent, etsysFWPolicyRuleDefGroup=etsysFWPolicyRuleDefGroup, etsysFWAuthAddressIndex=etsysFWAuthAddressIndex, etsysFWPolicyRuleDefService=etsysFWPolicyRuleDefService, etsysFWPolicyRuleDefRowStatus=etsysFWPolicyRuleDefRowStatus, etsysFWGroupPolicyLastChange=etsysFWGroupPolicyLastChange, etsysFWLoggingThreshold=etsysFWLoggingThreshold, etsysFWFilterDefDstNetwork=etsysFWFilterDefDstNetwork, etsysFWServiceTable=etsysFWServiceTable, etsysFWRPCMicrosoftTimeout=etsysFWRPCMicrosoftTimeout, etsysFWCLSFilterEntry=etsysFWCLSFilterEntry, etsysFWSessionTotalsLastChange=etsysFWSessionTotalsLastChange, etsysFWPolicyFilters=etsysFWPolicyFilters, etsysFWHTMLFilterRowStatus=etsysFWHTMLFilterRowStatus, etsysFWGroupPolicyStorageType=etsysFWGroupPolicyStorageType, etsysFWFirewallOnIntfLastChange=etsysFWFirewallOnIntfLastChange, etsysFWSessTotPeakSessions=etsysFWSessTotPeakSessions, etsysFWPolicyObjects=etsysFWPolicyObjects, etsysFWFilterDefTable=etsysFWFilterDefTable, etsysFWDoSAttackName=etsysFWDoSAttackName, etsysFWAuthAddressIPAddress=etsysFWAuthAddressIPAddress, etsysFWPolicyRuleDefNumEntries=etsysFWPolicyRuleDefNumEntries, etsysFWIntfToGroupIntfDirection=etsysFWIntfToGroupIntfDirection, etsysFWSessionTotalsGroup=etsysFWSessionTotalsGroup, etsysFWFilterDefSrcNetwork=etsysFWFilterDefSrcNetwork, etsysFWGroupPolicyTable=etsysFWGroupPolicyTable, etsysFWServiceRowStatus=etsysFWServiceRowStatus, etsysFWPolicyRuleTrueEvents=etsysFWPolicyRuleTrueEvents, etsysFWDoSSrcIPAddress=etsysFWDoSSrcIPAddress, etsysFWFirewallOnIntfTable=etsysFWFirewallOnIntfTable, etsysFWAuthAddressIdleTime=etsysFWAuthAddressIdleTime, etsysFWPolicyServices=etsysFWPolicyServices, etsysFWFirewallIntfFilterStorageType=etsysFWFirewallIntfFilterStorageType, etsysFWFirewallIntfFilterRowStatus=etsysFWFirewallIntfFilterRowStatus, etsysFWNetworkGroupTable=etsysFWNetworkGroupTable, etsysFWPolicyRuleDefAction=etsysFWPolicyRuleDefAction, etsysFWFirewallIntfFilterEntry=etsysFWFirewallIntfFilterEntry, etsysFWNetwkInNetGrpEntry=etsysFWNetwkInNetGrpEntry, etsysFWFirewallConfigGroup=etsysFWFirewallConfigGroup, etsysFWSessTotActiveSessions=etsysFWSessTotActiveSessions, etsysFWCLSFilterGroup=etsysFWCLSFilterGroup, etsysFWIpSessionSrcPort=etsysFWIpSessionSrcPort, etsysFWConfigurationObjects=etsysFWConfigurationObjects, etsysFWNetworkGroupEntry=etsysFWNetworkGroupEntry, etsysFWNetworkNumEntries=etsysFWNetworkNumEntries, etsysFWAuthAddressIPVersion=etsysFWAuthAddressIPVersion, etsysFWHTMLFilterGroup=etsysFWHTMLFilterGroup, etsysFWNetworkRangeOrMask=etsysFWNetworkRangeOrMask, etsysFWPolicyRuleTrueName=etsysFWPolicyRuleTrueName, etsysFWPolicyRuleDefEntry=etsysFWPolicyRuleDefEntry, etsysFWGroupPolicyGroup=etsysFWGroupPolicyGroup, etsysFWDoSBlockedNumEntries=etsysFWDoSBlockedNumEntries, etsysFWGroupPolicyName=etsysFWGroupPolicyName, etsysFWNetworkRowStatus=etsysFWNetworkRowStatus, etsysFWPolicyGroups=etsysFWPolicyGroups, etsysFWIcmpTimeout=etsysFWIcmpTimeout, etsysFWAuthAddressGroupName=etsysFWAuthAddressGroupName, etsysFWNetworkIPAddressMask=etsysFWNetworkIPAddressMask, etsysFWSessTotLastBlock=etsysFWSessTotLastBlock, etsysFWServiceDstLowPort=etsysFWServiceDstLowPort, etsysFWServiceInSvcGrpLastChange=etsysFWServiceInSvcGrpLastChange, etsysFWFirewallEnabledGroup=etsysFWFirewallEnabledGroup, etsysFWUdpTimeout=etsysFWUdpTimeout, etsysFWPolicyRuleDefDstNetwork=etsysFWPolicyRuleDefDstNetwork, etsysFWFilterDefLogging=etsysFWFilterDefLogging, etsysFWAuthTimeout=etsysFWAuthTimeout, etsysFWHTMLFilterEntry=etsysFWHTMLFilterEntry, etsysFWSystemPolicyNameGroup=etsysFWSystemPolicyNameGroup, etsysFWIpSessionTable=etsysFWIpSessionTable, etsysFWAuthAddressTable=etsysFWAuthAddressTable, etsysFWNetworkGroupGroup=etsysFWNetworkGroupGroup, etsysFWNetwkInNetGrpRowStatus=etsysFWNetwkInNetGrpRowStatus, etsysFWNetworkIPVersion=etsysFWNetworkIPVersion, etsysFWIpSessionLastChange=etsysFWIpSessionLastChange, etsysFWServiceGroup=etsysFWServiceGroup, etsysFirewallGroups=etsysFirewallGroups, etsysFWPolicyRuleTrueTable=etsysFWPolicyRuleTrueTable, etsysFWServiceProtocol=etsysFWServiceProtocol, etsysFWHTMLFilterTable=etsysFWHTMLFilterTable, etsysFWPolicyRuleDefLogging=etsysFWPolicyRuleDefLogging, etsysFWIpSessionNumEntries=etsysFWIpSessionNumEntries, etsysFWFilterDefStorageType=etsysFWFilterDefStorageType, etsysFWNetworkEntry=etsysFWNetworkEntry, etsysFWPolicyRuleTrueGroup=etsysFWPolicyRuleTrueGroup, etsysFWHTMLFilterStorageType=etsysFWHTMLFilterStorageType, etsysFWDoSAttackTime=etsysFWDoSAttackTime, etsysFWServiceGroupLastChange=etsysFWServiceGroupLastChange, etsysFWDoSBlockedGroup=etsysFWDoSBlockedGroup, etsysFWRPCSunTimeout=etsysFWRPCSunTimeout, etsysFWFirewallIntfFilterLastChange=etsysFWFirewallIntfFilterLastChange, etsysFWFirewallIntfFilterTable=etsysFWFirewallIntfFilterTable, etsysFWServiceGroupRowStatus=etsysFWServiceGroupRowStatus, etsysFWHTMLFilterName=etsysFWHTMLFilterName, etsysFWCLSFilterStorageType=etsysFWCLSFilterStorageType, etsysFWPolicyRuleTrueIndex=etsysFWPolicyRuleTrueIndex, etsysFWNetworkGroupMaxNetworks=etsysFWNetworkGroupMaxNetworks, etsysFWFilterDefBidirectional=etsysFWFilterDefBidirectional, etsysFWNetwkInNetGrpLastChange=etsysFWNetwkInNetGrpLastChange, etsysFWDoSBlockedAttacks=etsysFWDoSBlockedAttacks, etsysFWFirewallOnIntfStorageType=etsysFWFirewallOnIntfStorageType, etsysFWNetworkLastChange=etsysFWNetworkLastChange, etsysFWHTMLFilterType=etsysFWHTMLFilterType, etsysFWPolicyRuleTrueLastChange=etsysFWPolicyRuleTrueLastChange, etsysFWIpSessionCreation=etsysFWIpSessionCreation, etsysFWServiceSrcHighPort=etsysFWServiceSrcHighPort, etsysFWPolicyRuleDefStorageType=etsysFWPolicyRuleDefStorageType, etsysFWSessionTotalsEntry=etsysFWSessionTotalsEntry, etsysFWServiceGroupGroup=etsysFWServiceGroupGroup, etsysFWServiceDstHighPort=etsysFWServiceDstHighPort, etsysFWIntfToGroupName=etsysFWIntfToGroupName, etsysFWServiceName=etsysFWServiceName, etsysFWHTMLFilterNetwork=etsysFWHTMLFilterNetwork, etsysFWCLSFilterMaxFilters=etsysFWCLSFilterMaxFilters, etsysFWIpSessionProtocolID=etsysFWIpSessionProtocolID, etsysFWPolicyRuleDefSrcNetwork=etsysFWPolicyRuleDefSrcNetwork, etsysFWIpSessionEntry=etsysFWIpSessionEntry, etsysFWIpSessionSrcAddress=etsysFWIpSessionSrcAddress, etsysFWIntfToGroupEntry=etsysFWIntfToGroupEntry, etsysFWServiceStorageType=etsysFWServiceStorageType, etsysFWSessTotProtocolID=etsysFWSessTotProtocolID, etsysFWPolicyRuleDefLastChange=etsysFWPolicyRuleDefLastChange, etsysFWMonitoringObjects=etsysFWMonitoringObjects, etsysFWDoSBlockedLastChange=etsysFWDoSBlockedLastChange, etsysFWFilterDefRowStatus=etsysFWFilterDefRowStatus, etsysFWIntfToGroupStorageType=etsysFWIntfToGroupStorageType, etsysFWFirewallIntfFilterDirection=etsysFWFirewallIntfFilterDirection, etsysFWSessionTotalsNumEntries=etsysFWSessionTotalsNumEntries, etsysFWNetwkInNetGrpStorageType=etsysFWNetwkInNetGrpStorageType, etsysFWFirewallOnIntfEntry=etsysFWFirewallOnIntfEntry, etsysFWGroupPolicyRuleDef=etsysFWGroupPolicyRuleDef, PYSNMP_MODULE_ID=etsysFirewallMIB, etsysFWNetworkGroupMaxEntries=etsysFWNetworkGroupMaxEntries, etsysFWServiceGroupNumEntries=etsysFWServiceGroupNumEntries, etsysFWFilterDefMaxEntries=etsysFWFilterDefMaxEntries, etsysFWCLSFilterWord=etsysFWCLSFilterWord, etsysFWDoSBlockedEntry=etsysFWDoSBlockedEntry, etsysFWAuthAddressEntry=etsysFWAuthAddressEntry, etsysFWSessTotBlockedSessions=etsysFWSessTotBlockedSessions, etsysFWCLSFilterLastChange=etsysFWCLSFilterLastChange, etsysFWSystemPolicyGroupName=etsysFWSystemPolicyGroupName, etsysFWNetworkGroupStorageType=etsysFWNetworkGroupStorageType, etsysFWHTMLFilterLogging=etsysFWHTMLFilterLogging, etsysFWServiceNumEntries=etsysFWServiceNumEntries, etsysFWNetworkGroupNumEntries=etsysFWNetworkGroupNumEntries, etsysFWCLSFilterRowStatus=etsysFWCLSFilterRowStatus, etsysFWFilterDefProtocol=etsysFWFilterDefProtocol, etsysFWFirewallEnabled=etsysFWFirewallEnabled, etsysFWServiceInSvcGrpTable=etsysFWServiceInSvcGrpTable, etsysFWServiceMaxEntries=etsysFWServiceMaxEntries, etsysFWServiceGroupMaxEntries=etsysFWServiceGroupMaxEntries, etsysFWIntfToGroupTable=etsysFWIntfToGroupTable, etsysFWDoSSrcIPVersion=etsysFWDoSSrcIPVersion, etsysFWFilterDefICMPType=etsysFWFilterDefICMPType, etsysFWServiceInSvcGrpEntry=etsysFWServiceInSvcGrpEntry, etsysFWGroupPolicyRowStatus=etsysFWGroupPolicyRowStatus, etsysFWPolicyRules=etsysFWPolicyRules, etsysFWFirewallIntfGroup=etsysFWFirewallIntfGroup, etsysFWServiceLastChange=etsysFWServiceLastChange, etsysFWAuthAddressNumEntries=etsysFWAuthAddressNumEntries, etsysFWServiceGroupMaxServices=etsysFWServiceGroupMaxServices, etsysFWNetworkIPAddressEnd=etsysFWNetworkIPAddressEnd, etsysFWNetworkGroupLastChange=etsysFWNetworkGroupLastChange, etsysFWNetworkName=etsysFWNetworkName, etsysFWPolicyNetworks=etsysFWPolicyNetworks, etsysFWNetworkGroupName=etsysFWNetworkGroupName, etsysFWFilterGroup=etsysFWFilterGroup, etsysFWAuthPort=etsysFWAuthPort, etsysFWGroupPolicyPriority=etsysFWGroupPolicyPriority, etsysFWPolicyRuleDefName=etsysFWPolicyRuleDefName, etsysFirewallMIB=etsysFirewallMIB, etsysFWPolicyRuleAuthName=etsysFWPolicyRuleAuthName, etsysFWNetworkStorageType=etsysFWNetworkStorageType, etsysFWFirewallIntfFilterType=etsysFWFirewallIntfFilterType, etsysFWPolicyRuleTrueNumEntries=etsysFWPolicyRuleTrueNumEntries, etsysFWIpSessionDstAddress=etsysFWIpSessionDstAddress, etsysFirewallCompliance=etsysFirewallCompliance, etsysFWFilterDefLastChange=etsysFWFilterDefLastChange, etsysFWServiceInSvcGrpSubService=etsysFWServiceInSvcGrpSubService, etsysFWNetworkIPAddressBegin=etsysFWNetworkIPAddressBegin, etsysFWNetworkGroupRowStatus=etsysFWNetworkGroupRowStatus, etsysFWAuthAddressLastChange=etsysFWAuthAddressLastChange, etsysFWPolicyRuleDefMaxEntries=etsysFWPolicyRuleDefMaxEntries)
