#
# PySNMP MIB module XEDIA-FRAME-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-FRAME-RELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
frCircuitEntry, = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitEntry")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, MibIdentifier, Bits, IpAddress, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, ModuleIdentity, Gauge32, ObjectIdentity, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Bits", "IpAddress", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaFrameRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 19))
if mibBuilder.loadTexts: xediaFrameRelayMIB.setLastUpdated('9808242155Z')
if mibBuilder.loadTexts: xediaFrameRelayMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaFrameRelayMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaFrameRelayMIB.setDescription("This module defines additional objects for management of Frame Relay in Xedia devices, above and beyond what is defined in the IETF's Frame Relay MIBs.")
xfrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 19, 1))
xfrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 19, 2))
xfrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 19, 3))
xfrArpTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 1), )
if mibBuilder.loadTexts: xfrArpTable.setStatus('current')
if mibBuilder.loadTexts: xfrArpTable.setDescription('The IP Address Translation table used for mapping from IP addresses to physical addresses, in this case frame relay DLCIs. This table contains much of the same information that is in the ipNetToMediaTable.')
xfrArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 1, 1), ).setIndexNames((0, "XEDIA-FRAME-RELAY-MIB", "xfrArpIfIndex"), (0, "XEDIA-FRAME-RELAY-MIB", "xfrArpNetAddress"))
if mibBuilder.loadTexts: xfrArpEntry.setStatus('current')
if mibBuilder.loadTexts: xfrArpEntry.setDescription("Each entry contains one IpAddress to `physical' address equivalence.")
xfrArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xfrArpIfIndex.setStatus('current')
if mibBuilder.loadTexts: xfrArpIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of RFC 1573's ifIndex.")
xfrArpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xfrArpNetAddress.setStatus('current')
if mibBuilder.loadTexts: xfrArpNetAddress.setDescription('The IpAddress corresponding to the frame relay DLCI.')
xfrArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xfrArpType.setStatus('current')
if mibBuilder.loadTexts: xfrArpType.setDescription('The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the xfrArpEntryTable. That is, it effectively disassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation- specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant xfrArpEntryType object.')
xfrArpDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xfrArpDlci.setStatus('current')
if mibBuilder.loadTexts: xfrArpDlci.setDescription('The DLCI attached to the IP address.')
xfrArpIfStack = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfrArpIfStack.setStatus('current')
if mibBuilder.loadTexts: xfrArpIfStack.setDescription('A description of the interface stack containing this frame relay interface, with the IP interface, the frame relay interface, and the device interface.')
xFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 2), )
if mibBuilder.loadTexts: xFrCircuitTable.setStatus('current')
if mibBuilder.loadTexts: xFrCircuitTable.setDescription('A table containing additional information about specific Data Link Connection Identifiers and corresponding virtual circuits.')
xFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 2, 1), )
frCircuitEntry.registerAugmentions(("XEDIA-FRAME-RELAY-MIB", "xFrCircuitEntry"))
xFrCircuitEntry.setIndexNames(*frCircuitEntry.getIndexNames())
if mibBuilder.loadTexts: xFrCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: xFrCircuitEntry.setDescription('The additional information regarding a single Data Link Connection Identifier.')
xfrCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 19, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfrCircuitType.setStatus('current')
if mibBuilder.loadTexts: xfrCircuitType.setDescription('The type of DLCI ')
xfrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 19, 3, 1))
xfrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 19, 3, 2))
xfrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 19, 3, 1, 1)).setObjects(("XEDIA-FRAME-RELAY-MIB", "xfrAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfrCompliance = xfrCompliance.setStatus('current')
if mibBuilder.loadTexts: xfrCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xfrAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 19, 3, 2, 1)).setObjects(("XEDIA-FRAME-RELAY-MIB", "xfrArpIfIndex"), ("XEDIA-FRAME-RELAY-MIB", "xfrArpNetAddress"), ("XEDIA-FRAME-RELAY-MIB", "xfrArpDlci"), ("XEDIA-FRAME-RELAY-MIB", "xfrArpIfStack"), ("XEDIA-FRAME-RELAY-MIB", "xfrArpType"), ("XEDIA-FRAME-RELAY-MIB", "xfrCircuitType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfrAllGroup = xfrAllGroup.setStatus('current')
if mibBuilder.loadTexts: xfrAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-FRAME-RELAY-MIB", xfrArpEntry=xfrArpEntry, xfrArpNetAddress=xfrArpNetAddress, xFrCircuitEntry=xFrCircuitEntry, xfrCircuitType=xfrCircuitType, xFrCircuitTable=xFrCircuitTable, xfrArpIfIndex=xfrArpIfIndex, xfrArpDlci=xfrArpDlci, xfrConformance=xfrConformance, xfrNotifications=xfrNotifications, xediaFrameRelayMIB=xediaFrameRelayMIB, xfrArpTable=xfrArpTable, xfrArpIfStack=xfrArpIfStack, xfrCompliances=xfrCompliances, xfrArpType=xfrArpType, PYSNMP_MODULE_ID=xediaFrameRelayMIB, xfrObjects=xfrObjects, xfrAllGroup=xfrAllGroup, xfrGroups=xfrGroups, xfrCompliance=xfrCompliance)
