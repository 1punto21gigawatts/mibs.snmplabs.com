#
# PySNMP MIB module INTEL-HDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-HDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Gauge32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, iso, Counter32, Bits, NotificationType, MibIdentifier, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "iso", "Counter32", "Bits", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 30))
hdlcMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 30, 1))
hdlcMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1), )
if mibBuilder.loadTexts: hdlcMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorTable.setDescription('The HDLC error counters.')
hdlcMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1), ).setIndexNames((0, "INTEL-HDLC-MIB", "hdlcMonitorIndex"))
if mibBuilder.loadTexts: hdlcMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorEntry.setDescription('')
hdlcMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorIndex.setDescription('The IfIndex for the layer that these counters apply to. The index may belong to the encapsulation layer (e.g. PPP), an individual B-channel (ISDN), a B-channel Bundle (ISDN) or the HDLC layer of a V.x WAN link.')
hdlcMonitorReceiverChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverChecksumErrors.setDescription('The number of CRC errors.')
hdlcMonitorReceiverGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverGiants.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverGiants.setDescription('The number of frames whose length exceeded the maximum allowed.')
hdlcMonitorReceiverDwarves = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverDwarves.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverDwarves.setDescription('The number of frames that were shorter than the minimum allowed.')
hdlcMonitorReceiverAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverAborts.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverAborts.setDescription('The number of aborted frames.')
hdlcMonitorReceiverOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverOverruns.setDescription('The number of frames lost due to a lack of resources.')
hdlcMonitorReceiverMisalignments = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverMisalignments.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverMisalignments.setDescription('The number of frames that did not end with a full byte (octet).')
hdlcMonitorTransmitterUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorTransmitterUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorTransmitterUnderruns.setDescription('The number of frames not properly sent due to the transmit channel being starved from data.')
hdlcMonitorReceiverAsyncParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverAsyncParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverAsyncParityErrors.setDescription('The number of frames received with parity errors.')
hdlcMonitorReceiverAsyncFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverAsyncFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverAsyncFramingErrors.setDescription('The number of frames received with framing errors.')
hdlcMonitorReceiverAsyncBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 30, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMonitorReceiverAsyncBreaks.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcMonitorReceiverAsyncBreaks.setDescription('The number of times that the receiving data is held in the spacing state for longer than a full word transmission time (data discarded).')
mibBuilder.exportSymbols("INTEL-HDLC-MIB", hdlcMonitor=hdlcMonitor, hdlcMonitorTable=hdlcMonitorTable, hdlcMonitorReceiverGiants=hdlcMonitorReceiverGiants, hdlcMonitorReceiverOverruns=hdlcMonitorReceiverOverruns, hdlcMonitorEntry=hdlcMonitorEntry, hdlc=hdlc, hdlcMonitorReceiverAsyncParityErrors=hdlcMonitorReceiverAsyncParityErrors, hdlcMonitorReceiverChecksumErrors=hdlcMonitorReceiverChecksumErrors, hdlcMonitorReceiverAsyncFramingErrors=hdlcMonitorReceiverAsyncFramingErrors, hdlcMonitorReceiverDwarves=hdlcMonitorReceiverDwarves, hdlcMonitorReceiverMisalignments=hdlcMonitorReceiverMisalignments, hdlcMonitorReceiverAsyncBreaks=hdlcMonitorReceiverAsyncBreaks, hdlcMonitorTransmitterUnderruns=hdlcMonitorTransmitterUnderruns, hdlcMonitorReceiverAborts=hdlcMonitorReceiverAborts, hdlcMonitorIndex=hdlcMonitorIndex)
