#
# PySNMP MIB module OPL-SP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPL-SP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, MibIdentifier, NotificationType, Unsigned32, Gauge32, Counter64, IpAddress, Counter32, ObjectIdentity, iso, enterprises, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "NotificationType", "Unsigned32", "Gauge32", "Counter64", "IpAddress", "Counter32", "ObjectIdentity", "iso", "enterprises", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fujitsu = MibIdentifier((1, 3, 6, 1, 4, 1, 211))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15))
sparcEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3))
oplSpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1))
oplSpMIB.setRevisions(('2010-05-24 00:00', '2009-06-10 00:00', '2009-01-28 00:00', '2008-11-14 00:00', '2008-04-01 00:00', '2007-01-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: oplSpMIB.setRevisionsDescriptions(('This revision extends ScfBoardSubTypeTC with types C, 1 and 2.', 'This revision extends ScfTrapEventTypeTC with new ac restore trap types. ScfBoardEntry is also extended with scfBoardSubType and ScfBoardSubTypeTC.', 'This revision extends ScfComponentType and ScfTrapEventTypeTC and introduces scfModeSwitchEvent to support new traps. Support for scfSystemAirFlow is also added.', 'This revision introduces power management extensions to scfSystemInfo.', 'This revision extends the ScfTrapEventTypeTC textual convention.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: oplSpMIB.setLastUpdated('201005240000Z')
if mibBuilder.loadTexts: oplSpMIB.setOrganization('Sun Microsystems, Inc. Fujitsu LIMITED')
if mibBuilder.loadTexts: oplSpMIB.setContactInfo('Sun Microsystems, Inc. 4150 Network Circle Santa Clara, CA 95054 +1-800-555-9SUN or +1-650-960-1300 http://www.sun.com or contact your local support representative Fujitsu LIMITED. http://www.fujitsu.com or contact your local support representative')
if mibBuilder.loadTexts: oplSpMIB.setDescription('Version: 1.5 Copyright 2009, by Sun Microsystems, Inc. All rights reserved. Use is subject to license terms. All Rights Reserved, Copyright Fujitsu LIMITED 2007-2009. This MIB module provides monitoring capabilities for OPL Systems.')
scfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1))
scfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1))
scfState = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2))
scfMonitorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3))
scfSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4))
scfDomainInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5))
scfXsbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6))
scfLsbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7))
scfBoardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8))
scfCpuInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9))
scfMemoryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10))
scfIoBoxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11))
scfComponentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12))
scfMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2))
scfMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0))
scfMIBTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1))
scfMIBConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3))
scfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 1))
scfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2))
scfMIBObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1))
scfMIBNotifGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 2))
class ScfMonitorTypeTC(TextualConvention, Integer32):
    description = 'An enumerated value which represents the type of data that is being monitored.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))
    namedValues = NamedValues(("temperature", 1), ("voltage", 2), ("fanRotational", 3), ("humidity", 4), ("unknown", 255))

class ScfComponentType(TextualConvention, Integer32):
    description = 'An enumerated value which represents components which make up an OPL Platform.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 96, 97, 98, 100, 110, 115, 133, 134, 135, 136, 137, 141, 148, 149, 150, 151, 155, 157, 158, 159, 160, 161, 169, 171, 173, 175, 180, 190, 192, 196, 200, 201, 203, 253, 254, 255))
    namedValues = NamedValues(("cmu", 1), ("ddc", 2), ("cpum", 3), ("cpuChip", 4), ("cpuCore", 5), ("cpuStrand", 6), ("way", 7), ("mem", 9), ("sc", 10), ("tag", 11), ("xsb", 12), ("mac", 13), ("bank", 14), ("block", 15), ("xbuA", 16), ("half", 17), ("xbuB", 19), ("iou", 21), ("pcir", 23), ("ioc", 24), ("flp", 25), ("iocCh", 26), ("iocLeaf", 27), ("hdd", 28), ("pci", 29), ("pcic", 30), ("xscfA", 31), ("xscfB", 32), ("xscfC", 33), ("clkuA", 34), ("clkuB", 36), ("psubpA", 38), ("psubpB", 39), ("acsA", 40), ("acsB", 41), ("psu", 42), ("bpA", 43), ("bpB", 44), ("ddcA", 45), ("fanbpA", 46), ("fanbpB", 47), ("fanbpC", 48), ("fanA", 49), ("fan", 50), ("fanB", 51), ("opnl", 53), ("tape", 54), ("dvd", 55), ("swbp", 56), ("medbp", 57), ("mbuA", 96), ("riser", 97), ("pcmu", 98), ("ddcB", 100), ("memb", 110), ("mbuB", 115), ("bpuA", 133), ("iob", 134), ("pdb", 135), ("bpuB", 136), ("busbar", 137), ("ddcr", 141), ("sw", 148), ("bridge", 149), ("gbe", 150), ("sas", 151), ("xscfu", 155), ("psuFan", 157), ("airA", 158), ("airB", 159), ("airC", 160), ("acInlet", 161), ("hddbp", 169), ("tapebp", 171), ("dvdbpA", 173), ("dvdbpB", 175), ("cable", 180), ("ioua", 190), ("snsu", 192), ("ups", 196), ("environment", 200), ("firm", 201), ("domain", 203), ("unspecified", 253), ("notApplicable", 254), ("unknown", 255))

class ScfValidStatus(TextualConvention, Integer32):
    description = 'An enumeration representing the validity of a object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("invalid", 1), ("valid", 2))

class ScfLEDState(TextualConvention, Integer32):
    description = 'An enumeration representing the state of an OPL System or Component LED.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("on", 2), ("blinking", 3))

class ScfModeSwitchState(TextualConvention, Integer32):
    description = 'A enumerated value representing the state of the OPL systems operator panel mode switch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("locked", 1), ("service", 2))

class ScfStateTC(TextualConvention, Integer32):
    description = 'An enumeration of possible component or Extended System Board(XSB) state values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254, 255))
    namedValues = NamedValues(("unmounted", 1), ("stop", 2), ("init", 3), ("notConfigured", 4), ("idle", 5), ("run", 6), ("deconfigured", 7), ("change", 254), ("unknown", 255))

class ScfErrorStatus(TextualConvention, Integer32):
    description = 'An enumeration of possible error status values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))
    namedValues = NamedValues(("normal", 1), ("degraded", 2), ("faulted", 3), ("change", 254), ("unknown", 255))

class ScfDomainStatusTC(TextualConvention, Integer32):
    description = 'An enumeration of possible domain status values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254, 255))
    namedValues = NamedValues(("powerOff", 1), ("panic", 2), ("shutdown", 3), ("initialize", 4), ("boot", 5), ("running", 6), ("prom", 7), ("change", 254), ("unknown", 255))

class ScfDomainConfigPolicy(TextualConvention, Integer32):
    description = 'An enumeration of possible Domain Component List(DCL) configuration policies.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fru", 1), ("xsb", 2), ("system", 3))

class ScfIoBoxLEDState(TextualConvention, Integer32):
    description = 'An enumeration representing the possible I/O Box LED states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("off", 1), ("standbyBlink", 2), ("blinkSlow", 3), ("blinkFast", 4), ("feedbackFlash", 5), ("on", 6), ("unknown", 7))

class ScfIoBoxComponentLocation(TextualConvention, Integer32):
    description = 'An enumeration representing an I/O Box Component Location.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("left", 1), ("right", 2))

class ScfIoBoxComponentType(TextualConvention, Integer32):
    description = 'An enumeration describing possible I/O Box components.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("cp", 2), ("ps", 3), ("boat", 4), ("ulc", 5), ("dlc", 6))

class ScfIoBoatTypeTC(TextualConvention, Integer32):
    description = 'An enumeration representing I/O Boat Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notPresent", 1), ("unknown", 2), ("pcie", 3), ("pcix", 4), ("max", 5))

class ScfIoBoxEnabledAlarms(TextualConvention, Bits):
    description = 'The possible alarm levels that may be enabled for an I/O Box sensor.'
    status = 'current'
    namedValues = NamedValues(("min", 0), ("max", 1))

class ScfCodState(TextualConvention, Integer32):
    description = 'An enumeration describing possible Capacity On Demand(COD) states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2), ("notApplicable", 3))

class ScfBoardSubTypeTC(TextualConvention, Integer32):
    description = 'An enumeration describing board subtype.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))
    namedValues = NamedValues(("typeA", 1), ("typeB", 2), ("typeC", 3), ("type1", 4), ("type2", 5), ("notApplicable", 254), ("unknown", 255))

class ScfTrapEventTypeTC(TextualConvention, Integer32):
    description = 'An enumeration describing possible reasons that a trap event has been generated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("other", 1), ("add", 2), ("remove", 3), ("acFail", 4), ("acRestore", 5), ("changeComplete", 6), ("acRestoreStart", 7), ("acRestoreFail", 8), ("acRestoreComplete", 9))

class ScfTrapStatusEventTypeTC(TextualConvention, Integer32):
    description = 'An enumeration describing possible reasons that a status trap event has been generated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("degraded", 2), ("faulted", 3), ("recover", 4), ("information", 5))

class ScfDomainStatusAlarmType(TextualConvention, Integer32):
    description = 'An enumeration describing possible reasons that a domain status alarm has been generated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("status", 2), ("panic", 3))

class ScfTrapIoBoxTempEventTypeTC(TextualConvention, Integer32):
    description = 'An enumeration of possible reasons that an I/O Boat Temperature event has been generated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("overTemp", 2), ("recover", 3))

class ScfIoBoxLEDType(TextualConvention, Integer32):
    description = 'An enumeration of I/O Boat LED types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("locate", 2), ("active", 3), ("powerDC", 4), ("powerAC", 5), ("service", 6), ("rtr", 7), ("overtemp", 8), ("mgmt", 9), ("data", 10))

class ScfTrapModeSwitchEventTypeTC(TextualConvention, Integer32):
    description = 'An enumeration describing possible reasons that a panel switch trap event has been generated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("powerShort", 2), ("powerLong", 3), ("modeToLocked", 4), ("modeToService", 5))

class ScfIndex(TextualConvention, Integer32):
    description = 'An arbitrary value which uniquely identifies an element. The value should be a small positive integer; index values for different elements are not necessarily contiguous.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScfIoBoxIndex(TextualConvention, OctetString):
    description = 'An fixed length string which uniquely identifies an I/O Box chassis. This corresponds to the Boxes serial number.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class ScfXsbIndex(TextualConvention, OctetString):
    description = 'An fixed length string which uniquely identifies a system XSB. i.e 00-0, 06-1, 15-3'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class ScfDRState(TextualConvention, Integer32):
    description = 'An enumeration describing possible dynamic reconfiguration(DR) states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))
    namedValues = NamedValues(("unconfigured", 1), ("configured", 2), ("waiting", 3), ("disconnected", 4), ("unknown", 255))

class ScfUsageState(TextualConvention, Integer32):
    description = 'An enumeration describing general states of use.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class ScfTestState(TextualConvention, Integer32):
    description = 'An enumeration describing various XSB test states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unmounted", 1), ("unknown", 2), ("testing", 3), ("passed", 4), ("failed", 5))

class ScfAssignmentState(TextualConvention, Integer32):
    description = 'An enumeration describing XSB assignment states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unavailable", 1), ("available", 2), ("assigned", 3))

class ScfConnectivityState(TextualConvention, Integer32):
    description = 'An enumeration describing XSB connectivity states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disconnected", 1), ("connected", 2))

class ScfConfigurationState(TextualConvention, Integer32):
    description = 'An enumeration describing XSB configuration states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unconfigured", 1), ("configured", 2))

scfAgentId = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfAgentId.setStatus('current')
if mibBuilder.loadTexts: scfAgentId.setDescription('SCF board ID which this SNMP agent is currently running on.')
scfAgentNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfAgentNumber.setStatus('current')
if mibBuilder.loadTexts: scfAgentNumber.setDescription('Total count of available SCF boards.')
scfAgentTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3), )
if mibBuilder.loadTexts: scfAgentTable.setStatus('current')
if mibBuilder.loadTexts: scfAgentTable.setDescription('Table of available SCF boards.')
scfAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfAgentIndex"))
if mibBuilder.loadTexts: scfAgentEntry.setStatus('current')
if mibBuilder.loadTexts: scfAgentEntry.setDescription('Available SCF board entry.')
scfAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfAgentIndex.setStatus('current')
if mibBuilder.loadTexts: scfAgentIndex.setDescription('SCF board ID.')
scfXcpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXcpVersion.setStatus('current')
if mibBuilder.loadTexts: scfXcpVersion.setDescription('SCF board XSCF Control Package(XCP) version.')
scfIpAddressPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddressPortNumber.setStatus('current')
if mibBuilder.loadTexts: scfIpAddressPortNumber.setDescription('SNMP communication port for all SCF LAN IP Addresses.')
scfIpAddressNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddressNumber.setStatus('current')
if mibBuilder.loadTexts: scfIpAddressNumber.setDescription('Total count of IP Address table entries.')
scfIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6), )
if mibBuilder.loadTexts: scfIpAddressTable.setStatus('current')
if mibBuilder.loadTexts: scfIpAddressTable.setDescription('Table of available management LAN IPs on SCF.')
scfIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIpAddressIndex"))
if mibBuilder.loadTexts: scfIpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: scfIpAddressEntry.setDescription('SCF LAN IP Address entry.')
scfIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddressIndex.setStatus('current')
if mibBuilder.loadTexts: scfIpAddressIndex.setDescription('SCF IP Address table entry index.')
scfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddress.setStatus('current')
if mibBuilder.loadTexts: scfIpAddress.setDescription('IP Address of a management LAN port.')
scfSystemState = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 1), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemState.setStatus('current')
if mibBuilder.loadTexts: scfSystemState.setDescription('Overall system state.')
scfFirmwareState = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 2), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfFirmwareState.setStatus('current')
if mibBuilder.loadTexts: scfFirmwareState.setDescription('SCF software state.')
scfHardwareState = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 3), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfHardwareState.setStatus('current')
if mibBuilder.loadTexts: scfHardwareState.setDescription('Overall system hardware state.')
scfModeSwitch = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 4), ScfModeSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfModeSwitch.setStatus('current')
if mibBuilder.loadTexts: scfModeSwitch.setDescription('Operator panel switch state.')
scfMonitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorNumber.setStatus('current')
if mibBuilder.loadTexts: scfMonitorNumber.setDescription('Total count of environmental monitor table entries.')
scfMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2), )
if mibBuilder.loadTexts: scfMonitorTable.setStatus('current')
if mibBuilder.loadTexts: scfMonitorTable.setDescription('Monitor table. Contains environmental monitor information for system components.')
scfMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfMonitorBoardType"), (0, "OPL-SP-MIB", "scfMonitorBoardId"), (0, "OPL-SP-MIB", "scfMonitorModuleType"), (0, "OPL-SP-MIB", "scfMonitorModuleId"), (0, "OPL-SP-MIB", "scfMonitorType"), (0, "OPL-SP-MIB", "scfMonitorId"))
if mibBuilder.loadTexts: scfMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: scfMonitorEntry.setDescription('Environmental monitor table entry.')
scfMonitorBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorBoardType.setStatus('current')
if mibBuilder.loadTexts: scfMonitorBoardType.setDescription('Monitor component board type.')
scfMonitorBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorBoardId.setStatus('current')
if mibBuilder.loadTexts: scfMonitorBoardId.setDescription('Monitor component board ID.')
scfMonitorModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorModuleType.setStatus('current')
if mibBuilder.loadTexts: scfMonitorModuleType.setDescription('Monitor component module type.')
scfMonitorModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorModuleId.setStatus('current')
if mibBuilder.loadTexts: scfMonitorModuleId.setDescription('Monitor component module ID.')
scfMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 5), ScfMonitorTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorType.setStatus('current')
if mibBuilder.loadTexts: scfMonitorType.setDescription('Monitor component type.')
scfMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorId.setStatus('current')
if mibBuilder.loadTexts: scfMonitorId.setDescription('Monitor ID.')
scfMonitorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorDescription.setStatus('current')
if mibBuilder.loadTexts: scfMonitorDescription.setDescription('Text description of a monitor component.')
scfMonitorAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfMonitorAdditionalInfo.setDescription('Additional monitor info.')
scfMonitorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorUnits.setStatus('current')
if mibBuilder.loadTexts: scfMonitorUnits.setDescription('Units of value.')
scfMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 10), ScfValidStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: scfMonitorStatus.setDescription('Status of monitor component. Reflects if the sensor could be accessed or should not be used based on the containing components state.')
scfMonitorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorValue.setStatus('current')
if mibBuilder.loadTexts: scfMonitorValue.setDescription('Monitor value.')
scfMonitorValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 12), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorValueStatus.setStatus('current')
if mibBuilder.loadTexts: scfMonitorValueStatus.setDescription('Status of the monitor value. Reflects if valid value is within required limits.')
scfSystemName = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemName.setStatus('current')
if mibBuilder.loadTexts: scfSystemName.setDescription('System name.')
scfSystemType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemType.setStatus('current')
if mibBuilder.loadTexts: scfSystemType.setDescription('System type.')
scfSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemSerialNumber.setStatus('current')
if mibBuilder.loadTexts: scfSystemSerialNumber.setDescription('System serial number.')
scfSystemAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfSystemAdditionalInfo.setDescription('Additional System information.')
scfSystemCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemCpuNumber.setStatus('current')
if mibBuilder.loadTexts: scfSystemCpuNumber.setDescription('Total count of CPUs/Chips in this system.')
scfSystemMemoryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 6), Integer32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemMemoryCapacity.setStatus('current')
if mibBuilder.loadTexts: scfSystemMemoryCapacity.setDescription('Total memory capacity of this system.')
scfSystemReadyLED = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 7), ScfLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemReadyLED.setStatus('current')
if mibBuilder.loadTexts: scfSystemReadyLED.setDescription('Systems Ready LED state.')
scfSystemPowerLED = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 8), ScfLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemPowerLED.setStatus('current')
if mibBuilder.loadTexts: scfSystemPowerLED.setDescription('Systems Power LED state.')
scfSystemCheckLED = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 9), ScfLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemCheckLED.setStatus('current')
if mibBuilder.loadTexts: scfSystemCheckLED.setDescription('Systems Check LED state.')
scfSystemActualPowerConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10))
scfSystemAirFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11))
scfSystemAmbientTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12))
scfSystemPowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 13))
scfSystemPermittedPowerConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 14))
scfSystemAvailablePowerConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 15))
scfSystemActualPowerConsumptionValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemActualPowerConsumptionValue.setStatus('current')
if mibBuilder.loadTexts: scfSystemActualPowerConsumptionValue.setDescription('Power consumption of the system. Set to 0 if this feature is not supported.')
scfSystemActualPowerConsumptionUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemActualPowerConsumptionUnit.setStatus('current')
if mibBuilder.loadTexts: scfSystemActualPowerConsumptionUnit.setDescription('Unit of system power consumption.')
scfSystemActualPowerMinPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemActualPowerMinPollingInterval.setStatus('current')
if mibBuilder.loadTexts: scfSystemActualPowerMinPollingInterval.setDescription('Minimum interval time in seconds between updates of scfSystemActualPowerConsumptionValue. It is strongly recommended to get object scfSystemActualPowerConsumptionValue with intervals longer than this value. It is meaningless to get value at smaller intervals, because, internally, scfSystemActualPowerConsumptionValue will not be updated. When this feature is not supported, maximum value of INTEGER type is set as interval value.')
scfSystemExhaustAirFlowValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemExhaustAirFlowValue.setStatus('current')
if mibBuilder.loadTexts: scfSystemExhaustAirFlowValue.setDescription('Exhaust air flow of the system. Set to 0 if this feature is not supported.')
scfSystemExhaustAirFlowUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemExhaustAirFlowUnit.setStatus('current')
if mibBuilder.loadTexts: scfSystemExhaustAirFlowUnit.setDescription('Unit of system exhaust air flow.')
scfSystemExhaustAirFlowMinPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemExhaustAirFlowMinPollingInterval.setStatus('current')
if mibBuilder.loadTexts: scfSystemExhaustAirFlowMinPollingInterval.setDescription('Minimum interval time in seconds between updates of scfSystemExhaustAirFlowValue. It is strongly recommended to get object scfSystemExhaustAirFlowValue with intervals longer than this value. It is meaningless to get value at smaller intervals, because, internally, scfSystemExhaustAirFlowValue will not be updated. When this feature is not supported, maximum value of INTEGER type is set as interval value.')
scfSystemAmbientTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAmbientTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: scfSystemAmbientTemperatureValue.setDescription('Ambient temperature of the system. Set to 0 if this feature is not supported.')
scfSystemAmbientTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAmbientTemperatureUnit.setStatus('current')
if mibBuilder.loadTexts: scfSystemAmbientTemperatureUnit.setDescription('Unit of system ambient temperature.')
scfSystemAmbientTemperatureMinPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAmbientTemperatureMinPollingInterval.setStatus('current')
if mibBuilder.loadTexts: scfSystemAmbientTemperatureMinPollingInterval.setDescription('Minimum interval time in seconds between updates of scfSystemAmbientTemperatureValue. It is strongly recommended to get object scfSystemAmbientTemperatureValue with intervals longer than this value. It is meaningless to get value at smaller intervals, because, internally, scfSystemAmbientTemperatureValue will not be updated. When this feature is not supported, maximum value of INTEGER type is set as interval value.')
scfSystemPermittedPowerConsumptionValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemPermittedPowerConsumptionValue.setStatus('current')
if mibBuilder.loadTexts: scfSystemPermittedPowerConsumptionValue.setDescription('Maximum power consumption, that a system will consume over all configurations. When this feature is not supported, 0 is set.')
scfSystemPermittedPowerConsumptionUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 14, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemPermittedPowerConsumptionUnit.setStatus('current')
if mibBuilder.loadTexts: scfSystemPermittedPowerConsumptionUnit.setDescription('Unit of power consumption.')
scfDomainNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainNumber.setStatus('current')
if mibBuilder.loadTexts: scfDomainNumber.setDescription('Total count of Domain Table entries.')
scfDomainTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2), )
if mibBuilder.loadTexts: scfDomainTable.setStatus('current')
if mibBuilder.loadTexts: scfDomainTable.setDescription('Domain table.')
scfDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfDomainId"))
if mibBuilder.loadTexts: scfDomainEntry.setStatus('current')
if mibBuilder.loadTexts: scfDomainEntry.setDescription('Domain table entry.')
scfDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainId.setStatus('current')
if mibBuilder.loadTexts: scfDomainId.setDescription('Domain ID.')
scfDomainCpuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainCpuNumber.setStatus('current')
if mibBuilder.loadTexts: scfDomainCpuNumber.setDescription('Total number of CPUs/Strands in this domain.')
scfDomainMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 3), Integer32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainMemoryCapacity.setStatus('current')
if mibBuilder.loadTexts: scfDomainMemoryCapacity.setDescription('Memory capacity of this domain.')
scfDomainObpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainObpVersion.setStatus('current')
if mibBuilder.loadTexts: scfDomainObpVersion.setDescription('Version of OBP firmware.')
scfDomainObpAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainObpAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfDomainObpAdditionalInfo.setDescription('Additional OBP information.')
scfDomainOsMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsMachine.setStatus('current')
if mibBuilder.loadTexts: scfDomainOsMachine.setDescription('Domain machine hardware name.')
scfDomainOsRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsRelease.setStatus('current')
if mibBuilder.loadTexts: scfDomainOsRelease.setDescription('OS release level.')
scfDomainOsSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsSysName.setStatus('current')
if mibBuilder.loadTexts: scfDomainOsSysName.setDescription('OS Name.')
scfDomainOsNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsNodeName.setStatus('current')
if mibBuilder.loadTexts: scfDomainOsNodeName.setDescription('OS network node hostname.')
scfDomainOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsVersion.setStatus('current')
if mibBuilder.loadTexts: scfDomainOsVersion.setDescription('Version of the OS.')
scfDomainOsAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfDomainOsAdditionalInfo.setDescription('Additional OS information.')
scfDomainValid = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 12), ScfValidStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainValid.setStatus('current')
if mibBuilder.loadTexts: scfDomainValid.setDescription('Validity of the domain.')
scfDomainXsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainXsbs.setStatus('current')
if mibBuilder.loadTexts: scfDomainXsbs.setDescription('List of XSBs contained in this domain.')
scfDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 14), ScfDomainStatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainStatus.setStatus('current')
if mibBuilder.loadTexts: scfDomainStatus.setDescription('Domain operational status.')
scfDomainErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 15), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainErrorStatus.setStatus('current')
if mibBuilder.loadTexts: scfDomainErrorStatus.setDescription('Domain error status.')
scfDomainConfigurationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 16), ScfDomainConfigPolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainConfigurationPolicy.setStatus('current')
if mibBuilder.loadTexts: scfDomainConfigurationPolicy.setDescription('The DCL configuration policy of this domain.')
scfXsbType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbType.setStatus('current')
if mibBuilder.loadTexts: scfXsbType.setDescription('Type of XSB rule for the system.')
scfXsbNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbNumber.setStatus('current')
if mibBuilder.loadTexts: scfXsbNumber.setDescription('Total count of XSB Table entries.')
scfXsbTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3), )
if mibBuilder.loadTexts: scfXsbTable.setStatus('current')
if mibBuilder.loadTexts: scfXsbTable.setDescription('XSB table.')
scfXsbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfXsbId"))
if mibBuilder.loadTexts: scfXsbEntry.setStatus('current')
if mibBuilder.loadTexts: scfXsbEntry.setDescription('XSB table entry.')
scfXsbId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 1), ScfXsbIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbId.setStatus('current')
if mibBuilder.loadTexts: scfXsbId.setDescription('XSB ID.')
scfXsbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 2), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbStatus.setStatus('current')
if mibBuilder.loadTexts: scfXsbStatus.setDescription('XSB operational state.')
scfXsbErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 3), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbErrorStatus.setStatus('current')
if mibBuilder.loadTexts: scfXsbErrorStatus.setDescription('XSB error status.')
scfXsbDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbDomainId.setStatus('current')
if mibBuilder.loadTexts: scfXsbDomainId.setDescription('Active domain ID of the XSB.')
scfXsbDrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 5), ScfDRState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbDrStatus.setStatus('current')
if mibBuilder.loadTexts: scfXsbDrStatus.setDescription('Domain reconfiguration status of the XSB.')
scfXsbSubStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 6), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusPower.setStatus('current')
if mibBuilder.loadTexts: scfXsbSubStatusPower.setDescription('XSB detail status power state.')
scfXsbSubStatusTest = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 7), ScfTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusTest.setStatus('current')
if mibBuilder.loadTexts: scfXsbSubStatusTest.setDescription('XSB detail status test state.')
scfXsbSubStatusAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 8), ScfAssignmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusAssignment.setStatus('current')
if mibBuilder.loadTexts: scfXsbSubStatusAssignment.setDescription('XSB detail status assignment state.')
scfXsbSubStatusConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 9), ScfConnectivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusConnectivity.setStatus('current')
if mibBuilder.loadTexts: scfXsbSubStatusConnectivity.setDescription('XSB detail status conectivity state.')
scfXsbSubStatusConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 10), ScfConfigurationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusConfiguration.setStatus('current')
if mibBuilder.loadTexts: scfXsbSubStatusConfiguration.setDescription('XSB detail status configuration state.')
scfXsbSetupDID = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSetupDID.setStatus('current')
if mibBuilder.loadTexts: scfXsbSetupDID.setDescription('The Setup Domain ID. Shows the Domain ID where the XSB will be added.')
scfXsbNextDID = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbNextDID.setStatus('current')
if mibBuilder.loadTexts: scfXsbNextDID.setDescription('Next Domain ID. Shows the Domain ID where the XSB is preassigned.')
scfLsbType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbType.setStatus('current')
if mibBuilder.loadTexts: scfLsbType.setDescription('Type of LSB rule for this system.')
scfLsbNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbNumber.setStatus('current')
if mibBuilder.loadTexts: scfLsbNumber.setDescription('Total count of LSB Table entries.')
scfLsbTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3), )
if mibBuilder.loadTexts: scfLsbTable.setStatus('current')
if mibBuilder.loadTexts: scfLsbTable.setDescription('LSB table.')
scfLsbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfLsbDomainId"), (0, "OPL-SP-MIB", "scfLsbId"))
if mibBuilder.loadTexts: scfLsbEntry.setStatus('current')
if mibBuilder.loadTexts: scfLsbEntry.setDescription('LSB table entry.')
scfLsbDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbDomainId.setStatus('current')
if mibBuilder.loadTexts: scfLsbDomainId.setDescription('LSB Domain ID.')
scfLsbId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbId.setStatus('current')
if mibBuilder.loadTexts: scfLsbId.setDescription('LSB ID.')
scfLsbXsbId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbXsbId.setStatus('current')
if mibBuilder.loadTexts: scfLsbXsbId.setDescription('Current XSB ID that is registered to this LSB.')
scfLsbNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 4), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbNoMem.setStatus('current')
if mibBuilder.loadTexts: scfLsbNoMem.setDescription('DCL no-mem use setting. Reflects if the memory which is part of this LSB should not be used in the Domain.')
scfLsbNoIo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 5), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbNoIo.setStatus('current')
if mibBuilder.loadTexts: scfLsbNoIo.setDescription('DCL no-io use setting. Reflects if the I/O which is part of this LSB should not be used in the Domain')
scfLsbFloatingBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 6), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbFloatingBoard.setStatus('current')
if mibBuilder.loadTexts: scfLsbFloatingBoard.setDescription('DCL floating board use setting. Reflects if the LSB is considered a floating board which eases DR operations.')
scfBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardNumber.setStatus('current')
if mibBuilder.loadTexts: scfBoardNumber.setDescription('Total count of Board Table entries.')
scfBoardTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2), )
if mibBuilder.loadTexts: scfBoardTable.setStatus('current')
if mibBuilder.loadTexts: scfBoardTable.setDescription('Board table.')
scfBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfBoardType"), (0, "OPL-SP-MIB", "scfBoardId"))
if mibBuilder.loadTexts: scfBoardEntry.setStatus('current')
if mibBuilder.loadTexts: scfBoardEntry.setDescription('Board table entry.')
scfBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardType.setStatus('current')
if mibBuilder.loadTexts: scfBoardType.setDescription('Board type.')
scfBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardId.setStatus('current')
if mibBuilder.loadTexts: scfBoardId.setDescription('Board ID.')
scfBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardName.setStatus('current')
if mibBuilder.loadTexts: scfBoardName.setDescription('Board description.')
scfBoardAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfBoardAdditionalInfo.setDescription('Additional board info.')
scfBoardXsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardXsbs.setStatus('current')
if mibBuilder.loadTexts: scfBoardXsbs.setDescription('The total number of XSB partitions for this board.')
scfBoardState = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 6), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardState.setStatus('current')
if mibBuilder.loadTexts: scfBoardState.setDescription('Board operating state.')
scfBoardCODEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 7), ScfCodState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardCODEnabled.setStatus('current')
if mibBuilder.loadTexts: scfBoardCODEnabled.setDescription('COD State of the board.')
scfBoardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 8), ScfBoardSubTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardSubType.setStatus('current')
if mibBuilder.loadTexts: scfBoardSubType.setDescription('Board subtype.')
scfCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuNumber.setStatus('current')
if mibBuilder.loadTexts: scfCpuNumber.setDescription('Total count of CPU Table entries.')
scfCpuTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2), )
if mibBuilder.loadTexts: scfCpuTable.setStatus('current')
if mibBuilder.loadTexts: scfCpuTable.setDescription('CPU table.')
scfCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfCpuBoardType"), (0, "OPL-SP-MIB", "scfCpuBoardId"), (0, "OPL-SP-MIB", "scfCpuModuleType"), (0, "OPL-SP-MIB", "scfCpuModuleId"), (0, "OPL-SP-MIB", "scfCpuSubType"), (0, "OPL-SP-MIB", "scfCpuSubId"))
if mibBuilder.loadTexts: scfCpuEntry.setStatus('current')
if mibBuilder.loadTexts: scfCpuEntry.setDescription('CPU table entry.')
scfCpuBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuBoardType.setStatus('current')
if mibBuilder.loadTexts: scfCpuBoardType.setDescription('CPU board type.')
scfCpuBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuBoardId.setStatus('current')
if mibBuilder.loadTexts: scfCpuBoardId.setDescription('CPU board ID.')
scfCpuModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuModuleType.setStatus('current')
if mibBuilder.loadTexts: scfCpuModuleType.setDescription('CPU module type.')
scfCpuModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuModuleId.setStatus('current')
if mibBuilder.loadTexts: scfCpuModuleId.setDescription('CPU module ID.')
scfCpuSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 5), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuSubType.setStatus('current')
if mibBuilder.loadTexts: scfCpuSubType.setDescription('CPU sub-part type.')
scfCpuSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuSubId.setStatus('current')
if mibBuilder.loadTexts: scfCpuSubId.setDescription('CPU sub-part ID.')
scfCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuType.setStatus('current')
if mibBuilder.loadTexts: scfCpuType.setDescription('CPU type.')
scfCpuFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 8), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuFrequency.setStatus('current')
if mibBuilder.loadTexts: scfCpuFrequency.setDescription('CPU frequency.')
scfCpuAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfCpuAdditionalInfo.setDescription('Additional CPU info.')
scfCpuState = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 10), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuState.setStatus('current')
if mibBuilder.loadTexts: scfCpuState.setDescription('CPU operating state.')
scfMemoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryNumber.setStatus('current')
if mibBuilder.loadTexts: scfMemoryNumber.setDescription('Total count of Memory Table entries.')
scfMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2), )
if mibBuilder.loadTexts: scfMemoryTable.setStatus('current')
if mibBuilder.loadTexts: scfMemoryTable.setDescription('Memory card table.')
scfMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfMemoryBoardType"), (0, "OPL-SP-MIB", "scfMemoryBoardId"), (0, "OPL-SP-MIB", "scfMemoryModuleType"), (0, "OPL-SP-MIB", "scfMemoryModuleId"), (0, "OPL-SP-MIB", "scfMemorySubType"), (0, "OPL-SP-MIB", "scfMemorySubId"))
if mibBuilder.loadTexts: scfMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: scfMemoryEntry.setDescription('Memory card table entry.')
scfMemoryBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryBoardType.setStatus('current')
if mibBuilder.loadTexts: scfMemoryBoardType.setDescription('Memory board type.')
scfMemoryBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryBoardId.setStatus('current')
if mibBuilder.loadTexts: scfMemoryBoardId.setDescription('Memory board ID.')
scfMemoryModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryModuleType.setStatus('current')
if mibBuilder.loadTexts: scfMemoryModuleType.setDescription('Memory module type.')
scfMemoryModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryModuleId.setStatus('current')
if mibBuilder.loadTexts: scfMemoryModuleId.setDescription('Memory module ID.')
scfMemorySubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 5), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemorySubType.setStatus('current')
if mibBuilder.loadTexts: scfMemorySubType.setDescription('Memory sub-part type.')
scfMemorySubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemorySubId.setStatus('current')
if mibBuilder.loadTexts: scfMemorySubId.setDescription('Memory sub-part ID.')
scfMemoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryName.setStatus('current')
if mibBuilder.loadTexts: scfMemoryName.setDescription('Memory Name. This object provides the actual nomenclature specific name for this piece of memory. i.e. 02A, 13B')
scfMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 8), Integer32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryCapacity.setStatus('current')
if mibBuilder.loadTexts: scfMemoryCapacity.setDescription('Memory capacity.')
scfMemoryAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfMemoryAdditionalInfo.setDescription('Additional Memory info.')
scfMemoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 10), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryState.setStatus('current')
if mibBuilder.loadTexts: scfMemoryState.setDescription('Operation state of the memory.')
scfIoBoxNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxNumber.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxNumber.setDescription('Total count of I/O Box Table entries.')
scfIoBoxTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2), )
if mibBuilder.loadTexts: scfIoBoxTable.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxTable.setDescription('I/O Box table.')
scfIoBoxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIoBoxId"))
if mibBuilder.loadTexts: scfIoBoxEntry.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxEntry.setDescription('I/O Box entry.')
scfIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxId.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxId.setDescription("Unique I/O Box identifier. The persistent unique identifier for an I/O Box is it's serial number.")
scfIoBoxLocationLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 2), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxLocationLED.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxLocationLED.setDescription('State of the Location LED.')
scfIoBoxOverTempLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 3), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxOverTempLED.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxOverTempLED.setDescription('State of the Over Temperature LED.')
scfIoBoxServiceReqLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 4), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxServiceReqLED.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxServiceReqLED.setDescription('State of the Service Request LED.')
scfIoBoxActiveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxActiveLED.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxActiveLED.setDescription('State of the Active LED.')
scfIoBoxPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxPartNumber.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxPartNumber.setDescription('I/O Box part number.')
scfIoBoxSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSerialNumber.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSerialNumber.setDescription('I/O Box serial number.')
scfIoBoxDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxDashLevel.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxDashLevel.setDescription('I/O Box dash level.')
scfIoBoatNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatNumber.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatNumber.setDescription('Total count of I/O Boat Table entries.')
scfIoBoatTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4), )
if mibBuilder.loadTexts: scfIoBoatTable.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatTable.setDescription('I/O Boat table.')
scfIoBoatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIoBoatIoBoxId"), (0, "OPL-SP-MIB", "scfIoBoatId"))
if mibBuilder.loadTexts: scfIoBoatEntry.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatEntry.setDescription('I/O Boat entry. This entry is indexed by the I/O Box ID the Boat is contained in, as well as the Boat identifier.')
scfIoBoatIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatIoBoxId.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatIoBoxId.setDescription("Unique I/O Box identifier. The persistent unique identifier for an I/O Box is it's serial number.")
scfIoBoatId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatId.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatId.setDescription('Unique I/O Boat identifier')
scfIoBoatLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 3), ScfIoBoxComponentLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatLocation.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatLocation.setDescription('Slot location in I/O Box.')
scfIoBoatType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 4), ScfIoBoatTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatType.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatType.setDescription('I/O Boat Type.')
scfIoBoatOKtoRemoveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatOKtoRemoveLED.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatOKtoRemoveLED.setDescription('State of the I/O Boat Removal LED.')
scfIoBoatServiceReqLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 6), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatServiceReqLED.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatServiceReqLED.setDescription('State of the Service Request LED.')
scfIoBoatActiveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 7), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatActiveLED.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatActiveLED.setDescription('State of the Active LED.')
scfIoBoatPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatPartNumber.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatPartNumber.setDescription('I/O Boat part number.')
scfIoBoatSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatSerialNumber.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatSerialNumber.setDescription('I/O Boat serial number.')
scfIoBoatDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatDashLevel.setStatus('current')
if mibBuilder.loadTexts: scfIoBoatDashLevel.setDescription('I/O Boat dash level.')
scfLinkCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardNumber.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardNumber.setDescription('Total count of I/O Boat Link Card Table entries.')
scfLinkCardTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6), )
if mibBuilder.loadTexts: scfLinkCardTable.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardTable.setDescription('I/O Box Link Card table.')
scfLinkCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfLinkCardIoBoxId"), (0, "OPL-SP-MIB", "scfLinkCardIoBoatId"), (0, "OPL-SP-MIB", "scfLinkCardId"))
if mibBuilder.loadTexts: scfLinkCardEntry.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardEntry.setDescription('PCI-E Link Card Table Entry. This entry is indexed by the I/O Box container hierarchy, where the link card is contained in the boat and the boat is contained in the box.')
scfLinkCardIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardIoBoxId.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardIoBoxId.setDescription("Unique I/O Box identifier. The persistent unique identifier for an I/O Box is it's serial number.")
scfLinkCardIoBoatId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardIoBoatId.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardIoBoatId.setDescription('Unique I/O Boat identifier')
scfLinkCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 3), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardId.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardId.setDescription('Unique Link Card identifier.')
scfLinkCardDataLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 4), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDataLED.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardDataLED.setDescription('State of the Data LED.')
scfLinkCardMgmtLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardMgmtLED.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardMgmtLED.setDescription('State of the Management LED.')
scfLinkCardDownlinkCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDownlinkCardLocation.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardDownlinkCardLocation.setDescription('Link Card counterpart card location on the Host IOU.')
scfLinkCardDownlinkCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDownlinkCardId.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardDownlinkCardId.setDescription('Link Card counterpart card ID on the Host IOU.')
scfLinkCardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardPartNumber.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardPartNumber.setDescription('Link Card part number.')
scfLinkCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardSerialNumber.setDescription('Link Card serial number.')
scfLinkCardDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDashLevel.setStatus('current')
if mibBuilder.loadTexts: scfLinkCardDashLevel.setDescription('Link Card dash level.')
scfPowerSupplyFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanNumber.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanNumber.setDescription('Total count of I/O Box Power Supply/Fan Table entries.')
scfPowerSupplyFanTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8), )
if mibBuilder.loadTexts: scfPowerSupplyFanTable.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanTable.setDescription('IOBox Power Supply/Fan Table.')
scfPowerSupplyFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfPowerSupplyFanIoBoxId"), (0, "OPL-SP-MIB", "scfPowerSupplyFanId"))
if mibBuilder.loadTexts: scfPowerSupplyFanEntry.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanEntry.setDescription('I/O Box Power Supply/Fan Table Entry. This entry is indexed by the I/O Box ID the PS/Fan is contained in, as well as the PS/Fan identifier.')
scfPowerSupplyFanIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanIoBoxId.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanIoBoxId.setDescription("Unique I/O Box identifier. The persistent unique identifier for an I/O Box is it's serial number.")
scfPowerSupplyFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanId.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanId.setDescription('IOBox Power Supply/Fan identifier.')
scfPowerSupplyFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 3), ScfIoBoxComponentLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanLocation.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanLocation.setDescription('Slot location in IOBox.')
scfPowerSupplyFanOKtoRemoveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 4), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanOKtoRemoveLED.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanOKtoRemoveLED.setDescription('State of the Power Supply Fan Removal LED.')
scfPowerSupplyFanServiceReqLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanServiceReqLED.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanServiceReqLED.setDescription('State of the Service Request LED.')
scfPowerSupplyFanACPowerLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 6), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanACPowerLED.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanACPowerLED.setDescription('State of the A/C Power LED.')
scfPowerSupplyFanDCPowerLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 7), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanDCPowerLED.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanDCPowerLED.setDescription('State of the D/C Power LED.')
scfPowerSupplyFanPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanPartNumber.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanPartNumber.setDescription('PowerSupply/Fan part number.')
scfPowerSupplyFanSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanSerialNumber.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanSerialNumber.setDescription('PowerSupply/Fan serial number.')
scfPowerSupplyFanDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanDashLevel.setStatus('current')
if mibBuilder.loadTexts: scfPowerSupplyFanDashLevel.setDescription('PowerSupply/Fan dash level.')
scfIoBoxSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorNumber.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorNumber.setDescription('Total count of I/O Box environmental sensor table entries.')
scfIoBoxSensorTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10), )
if mibBuilder.loadTexts: scfIoBoxSensorTable.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorTable.setDescription('I/O Box environmental sensor table.')
scfIoBoxSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIoBoxSensorIoBoxId"), (0, "OPL-SP-MIB", "scfIoBoxSensorIoBoxSubType"), (0, "OPL-SP-MIB", "scfIoBoxSensorIoBoxSubId"), (0, "OPL-SP-MIB", "scfIoBoxSensorId"))
if mibBuilder.loadTexts: scfIoBoxSensorEntry.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorEntry.setDescription('I/O Box environmental sensor entry.')
scfIoBoxSensorIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxId.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxId.setDescription("Unique I/O Box identifier for a sensor entry. The persistent unique identifier for an I/O Box is it's serial number.")
scfIoBoxSensorIoBoxSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 2), ScfIoBoxComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxSubType.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxSubType.setDescription('Type of the I/O Box component that the sensor is located.')
scfIoBoxSensorIoBoxSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 3), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxSubId.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxSubId.setDescription('Identifier for the I/O Box component that the sensor is located.')
scfIoBoxSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorId.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorId.setDescription('Identifier of the sensor.')
scfIoBoxSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorDescription.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorDescription.setDescription('A description of the environmental sensor.')
scfIoBoxSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorUnits.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorUnits.setDescription('The units for the environmental sensor value.')
scfIoBoxSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorValue.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorValue.setDescription('The value read from the environmental sensor. This object can be compared with the Sensor Minimum Alarm and Maximum Alarm objects in this table to determine the value status. In addition, the Enabled Alarm should be used to determine what this value can be compared against, MinAlarm, MaxAlarm, or both. If a value has exceeded the Minimum or Maximum, then the user will be notified through a change in the I/O Box component LED or temperature event trap. Through the comparisions described here, further information can be gathered as to the cause.')
scfIoBoxSensorEnabledAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 8), ScfIoBoxEnabledAlarms()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorEnabledAlarms.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorEnabledAlarms.setDescription('The environmental alarm threshold values to be utilized for this sensor. The values immediately follow this object.')
scfIoBoxSensorMinAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorMinAlarm.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorMinAlarm.setDescription('The environmental sensor minimum threshold value before an alarm is generated. Not utilized for all sensors.')
scfIoBoxSensorMaxAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorMaxAlarm.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxSensorMaxAlarm.setDescription('The environmental sensor maximum threshold value before an alarm is generated. Not utilized for all sensors.')
scfComponentNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentNumber.setStatus('current')
if mibBuilder.loadTexts: scfComponentNumber.setDescription('Total count of Component Table entries.')
scfComponentTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2), )
if mibBuilder.loadTexts: scfComponentTable.setStatus('current')
if mibBuilder.loadTexts: scfComponentTable.setDescription('Hardware Component table.')
scfComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfComponentBoardType"), (0, "OPL-SP-MIB", "scfComponentBoardId"), (0, "OPL-SP-MIB", "scfComponentModuleType"), (0, "OPL-SP-MIB", "scfComponentModuleId"), (0, "OPL-SP-MIB", "scfComponentSubType"), (0, "OPL-SP-MIB", "scfComponentSubId"))
if mibBuilder.loadTexts: scfComponentEntry.setStatus('current')
if mibBuilder.loadTexts: scfComponentEntry.setDescription('Component table entry.')
scfComponentBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentBoardType.setStatus('current')
if mibBuilder.loadTexts: scfComponentBoardType.setDescription('Component board type.')
scfComponentBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentBoardId.setStatus('current')
if mibBuilder.loadTexts: scfComponentBoardId.setDescription('Component board ID.')
scfComponentModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentModuleType.setStatus('current')
if mibBuilder.loadTexts: scfComponentModuleType.setDescription('Component module type.')
scfComponentModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentModuleId.setStatus('current')
if mibBuilder.loadTexts: scfComponentModuleId.setDescription('Component module ID.')
scfComponentSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 5), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentSubType.setStatus('current')
if mibBuilder.loadTexts: scfComponentSubType.setDescription('Component sub-part type.')
scfComponentSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentSubId.setStatus('current')
if mibBuilder.loadTexts: scfComponentSubId.setDescription('Component sub-part ID.')
scfComponentAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: scfComponentAdditionalInfo.setDescription('Additional component info.')
scfComponentPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentPartNumber.setStatus('current')
if mibBuilder.loadTexts: scfComponentPartNumber.setDescription('Component part number.')
scfComponentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: scfComponentSerialNumber.setDescription('Component serial number.')
scfComponentProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentProductName.setStatus('current')
if mibBuilder.loadTexts: scfComponentProductName.setDescription('Component product name.')
scfComponentManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentManufacturer.setStatus('current')
if mibBuilder.loadTexts: scfComponentManufacturer.setDescription('Component manufacturer.')
scfComponentManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentManufactureDate.setStatus('current')
if mibBuilder.loadTexts: scfComponentManufactureDate.setDescription('Component manufacture date. This date varies for different components. For many components this object will provide IPMI format, which is 3 bytes of the number of minutes from 0:00 hrs 1/1/96. In this case the most significant byte is first. In some components, 2 bytes will be provided with the first byte year(yy) in binary-coded decimal(BCD), and the second byte week(ww) in BCD.')
scfComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 13), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentStatus.setStatus('current')
if mibBuilder.loadTexts: scfComponentStatus.setDescription('Component operational status.')
scfComponentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 14), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentErrorStatus.setStatus('current')
if mibBuilder.loadTexts: scfComponentErrorStatus.setDescription('Error status of component.')
scfTrapEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 1), ScfTrapEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapEventType.setStatus('current')
if mibBuilder.loadTexts: scfTrapEventType.setDescription('The event type of this notification. This provides additional information on the reason that the notification was sent.')
scfTrapStatusEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 2), ScfTrapStatusEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapStatusEventType.setStatus('current')
if mibBuilder.loadTexts: scfTrapStatusEventType.setDescription('The status event type of this notification. This provides additional information on the reason that the notification was sent.')
scfTrapDomainStatusAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 3), ScfDomainStatusAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapDomainStatusAlarmType.setStatus('current')
if mibBuilder.loadTexts: scfTrapDomainStatusAlarmType.setDescription('The type of this domain alarm that provides additional information on the reason that the notification was sent.')
scfTrapIoBoxId = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 4), ScfIoBoxIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxId.setStatus('current')
if mibBuilder.loadTexts: scfTrapIoBoxId.setDescription("Trap unique I/O Box identifier. The persistent unique identifier for an I/O Box is it's serial number.")
scfTrapIoBoxSubType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 5), ScfIoBoxComponentType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxSubType.setStatus('current')
if mibBuilder.loadTexts: scfTrapIoBoxSubType.setDescription('Type of the I/O Box component that a trap originated from.')
scfTrapIoBoxSubId = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 6), ScfIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxSubId.setStatus('current')
if mibBuilder.loadTexts: scfTrapIoBoxSubId.setDescription('Identifier for the I/O Box component that a trap originated from.')
scfTrapIoBoxTempEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 7), ScfTrapIoBoxTempEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxTempEventType.setStatus('current')
if mibBuilder.loadTexts: scfTrapIoBoxTempEventType.setDescription('The event type of this notification. This provides additional information on the reason that the notification was sent.')
scfTrapIoBoxLedType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 8), ScfIoBoxLEDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxLedType.setStatus('current')
if mibBuilder.loadTexts: scfTrapIoBoxLedType.setDescription('LED Type for the I/O Box component that a trap originated from.')
scfTrapIoBoxLedValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 9), ScfIoBoxLEDState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxLedValue.setStatus('current')
if mibBuilder.loadTexts: scfTrapIoBoxLedValue.setDescription('LED Value for the I/O Box component LED that a trap originated from.')
scfTrapModeSwitchEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 10), ScfTrapModeSwitchEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapModeSwitchEventType.setStatus('current')
if mibBuilder.loadTexts: scfTrapModeSwitchEventType.setDescription('The panel switch event type of this notification. This provides additional information on the reason that the notification was sent.')
scfSPFailover = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 1)).setObjects(("OPL-SP-MIB", "scfAgentIndex"))
if mibBuilder.loadTexts: scfSPFailover.setStatus('current')
if mibBuilder.loadTexts: scfSPFailover.setDescription('Indicates that a failover from the active SP to the standby SP has occurred. The Board ID included is the ID of the SP that has been failed over to.')
scfComponentEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 2)).setObjects(("OPL-SP-MIB", "scfComponentSerialNumber"), ("OPL-SP-MIB", "scfTrapEventType"))
if mibBuilder.loadTexts: scfComponentEvent.setStatus('current')
if mibBuilder.loadTexts: scfComponentEvent.setDescription('Indicates that a component has been added to or removed from the system, or that a component-specific event has occurred. When indicating that a component has been added to or removed from the system, the event will be based on the highest level component possible. For example, if a CMU is removed, then only a trap for the CMU is generated and not for the CPU and Memory that are on that CMU.')
scfComponentStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 3)).setObjects(("OPL-SP-MIB", "scfComponentStatus"), ("OPL-SP-MIB", "scfTrapStatusEventType"))
if mibBuilder.loadTexts: scfComponentStatusEvent.setStatus('current')
if mibBuilder.loadTexts: scfComponentStatusEvent.setDescription('Indicates that a component has changed to a status of interest, including fault, degraded, and recovery from a previous fault or degraded state condition.')
scfXsbModeChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 4)).setObjects(("OPL-SP-MIB", "scfBoardXsbs"))
if mibBuilder.loadTexts: scfXsbModeChangeEvent.setStatus('current')
if mibBuilder.loadTexts: scfXsbModeChangeEvent.setDescription('Indicates that an XSB mode has been changed to either a divided or non-divided state.')
scfDomainStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 5)).setObjects(("OPL-SP-MIB", "scfDomainStatus"), ("OPL-SP-MIB", "scfTrapDomainStatusAlarmType"))
if mibBuilder.loadTexts: scfDomainStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: scfDomainStatusAlarm.setDescription('Indicates that a status alarm condition has occurred on a domain. This includes a status change and a panic.')
scfDomainXsbEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 6)).setObjects(("OPL-SP-MIB", "scfXsbDomainId"), ("OPL-SP-MIB", "scfTrapEventType"))
if mibBuilder.loadTexts: scfDomainXsbEvent.setStatus('current')
if mibBuilder.loadTexts: scfDomainXsbEvent.setDescription('Indicates that an XSB has been added to or removed from a domain.')
scfIoBoxEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 7)).setObjects(("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapEventType"))
if mibBuilder.loadTexts: scfIoBoxEvent.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxEvent.setDescription('Indicates that an I/O Box component has been added to or removed from the system.')
scfIoBoxLedEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 8)).setObjects(("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapIoBoxLedType"), ("OPL-SP-MIB", "scfTrapIoBoxLedValue"))
if mibBuilder.loadTexts: scfIoBoxLedEvent.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxLedEvent.setDescription('Indicates that an I/O Box component LED changed. Depending on the LED type, this will notify of errors detected in an I/O Box component.')
scfIoBoxTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 9)).setObjects(("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapIoBoxTempEventType"))
if mibBuilder.loadTexts: scfIoBoxTemperatureEvent.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxTemperatureEvent.setDescription('Indicates that an I/O Box temperature sensor has triggered an event.')
scfModeSwitchEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 10)).setObjects(("OPL-SP-MIB", "scfTrapModeSwitchEventType"), ("OPL-SP-MIB", "scfModeSwitch"))
if mibBuilder.loadTexts: scfModeSwitchEvent.setStatus('current')
if mibBuilder.loadTexts: scfModeSwitchEvent.setDescription('Indicates that a panel switch has triggered an event.')
scfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 1, 1)).setObjects(("OPL-SP-MIB", "scfInfoGroup"), ("OPL-SP-MIB", "scfStateGroup"), ("OPL-SP-MIB", "scfMonitorInfoGroup"), ("OPL-SP-MIB", "scfSystemInfoGroup"), ("OPL-SP-MIB", "scfDomainInfoGroup"), ("OPL-SP-MIB", "scfXsbInfoGroup"), ("OPL-SP-MIB", "scfLsbInfoGroup"), ("OPL-SP-MIB", "scfBoardInfoGroup"), ("OPL-SP-MIB", "scfCpuInfoGroup"), ("OPL-SP-MIB", "scfMemoryInfoGroup"), ("OPL-SP-MIB", "scfIoBoxInfoGroup"), ("OPL-SP-MIB", "scfComponentInfoGroup"), ("OPL-SP-MIB", "scfNotificationObjectGroup"), ("OPL-SP-MIB", "scfNotificationsGroup"), ("OPL-SP-MIB", "scfSystemActualPowerConsumptionGroup"), ("OPL-SP-MIB", "scfSystemAmbientTemperatureGroup"), ("OPL-SP-MIB", "scfSystemPermittedPowerConsumptionGroup"), ("OPL-SP-MIB", "scfSystemAirFlowGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfCompliance = scfCompliance.setStatus('current')
if mibBuilder.loadTexts: scfCompliance.setDescription('The compliance statement for SNMP entities which implement this MIB.')
scfInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 1)).setObjects(("OPL-SP-MIB", "scfAgentId"), ("OPL-SP-MIB", "scfAgentNumber"), ("OPL-SP-MIB", "scfAgentIndex"), ("OPL-SP-MIB", "scfXcpVersion"), ("OPL-SP-MIB", "scfIpAddressPortNumber"), ("OPL-SP-MIB", "scfIpAddressNumber"), ("OPL-SP-MIB", "scfIpAddressIndex"), ("OPL-SP-MIB", "scfIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfInfoGroup = scfInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfInfoGroup.setDescription('A collection of objects providing SCF SNMP Agent information.')
scfStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 2)).setObjects(("OPL-SP-MIB", "scfSystemState"), ("OPL-SP-MIB", "scfFirmwareState"), ("OPL-SP-MIB", "scfHardwareState"), ("OPL-SP-MIB", "scfModeSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfStateGroup = scfStateGroup.setStatus('current')
if mibBuilder.loadTexts: scfStateGroup.setDescription('A collection of objects providing overall SCF state information.')
scfMonitorInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 3)).setObjects(("OPL-SP-MIB", "scfMonitorNumber"), ("OPL-SP-MIB", "scfMonitorType"), ("OPL-SP-MIB", "scfMonitorBoardType"), ("OPL-SP-MIB", "scfMonitorBoardId"), ("OPL-SP-MIB", "scfMonitorModuleType"), ("OPL-SP-MIB", "scfMonitorModuleId"), ("OPL-SP-MIB", "scfMonitorId"), ("OPL-SP-MIB", "scfMonitorDescription"), ("OPL-SP-MIB", "scfMonitorAdditionalInfo"), ("OPL-SP-MIB", "scfMonitorUnits"), ("OPL-SP-MIB", "scfMonitorStatus"), ("OPL-SP-MIB", "scfMonitorValue"), ("OPL-SP-MIB", "scfMonitorValueStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfMonitorInfoGroup = scfMonitorInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfMonitorInfoGroup.setDescription('A collection of objects providing environmental (temperature, voltage, rotation) monitoring information for platform components.')
scfSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 4)).setObjects(("OPL-SP-MIB", "scfSystemName"), ("OPL-SP-MIB", "scfSystemType"), ("OPL-SP-MIB", "scfSystemSerialNumber"), ("OPL-SP-MIB", "scfSystemAdditionalInfo"), ("OPL-SP-MIB", "scfSystemCpuNumber"), ("OPL-SP-MIB", "scfSystemMemoryCapacity"), ("OPL-SP-MIB", "scfSystemReadyLED"), ("OPL-SP-MIB", "scfSystemPowerLED"), ("OPL-SP-MIB", "scfSystemCheckLED"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemInfoGroup = scfSystemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfSystemInfoGroup.setDescription('A collection of objects providing System information.')
scfDomainInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 5)).setObjects(("OPL-SP-MIB", "scfDomainNumber"), ("OPL-SP-MIB", "scfDomainId"), ("OPL-SP-MIB", "scfDomainCpuNumber"), ("OPL-SP-MIB", "scfDomainMemoryCapacity"), ("OPL-SP-MIB", "scfDomainObpVersion"), ("OPL-SP-MIB", "scfDomainObpAdditionalInfo"), ("OPL-SP-MIB", "scfDomainOsMachine"), ("OPL-SP-MIB", "scfDomainOsRelease"), ("OPL-SP-MIB", "scfDomainOsSysName"), ("OPL-SP-MIB", "scfDomainOsNodeName"), ("OPL-SP-MIB", "scfDomainOsVersion"), ("OPL-SP-MIB", "scfDomainOsAdditionalInfo"), ("OPL-SP-MIB", "scfDomainValid"), ("OPL-SP-MIB", "scfDomainXsbs"), ("OPL-SP-MIB", "scfDomainStatus"), ("OPL-SP-MIB", "scfDomainErrorStatus"), ("OPL-SP-MIB", "scfDomainConfigurationPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfDomainInfoGroup = scfDomainInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfDomainInfoGroup.setDescription('A collection of objects providing Domain information.')
scfXsbInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 6)).setObjects(("OPL-SP-MIB", "scfXsbType"), ("OPL-SP-MIB", "scfXsbNumber"), ("OPL-SP-MIB", "scfXsbId"), ("OPL-SP-MIB", "scfXsbStatus"), ("OPL-SP-MIB", "scfXsbErrorStatus"), ("OPL-SP-MIB", "scfXsbDomainId"), ("OPL-SP-MIB", "scfXsbDrStatus"), ("OPL-SP-MIB", "scfXsbSubStatusPower"), ("OPL-SP-MIB", "scfXsbSubStatusTest"), ("OPL-SP-MIB", "scfXsbSubStatusAssignment"), ("OPL-SP-MIB", "scfXsbSubStatusConnectivity"), ("OPL-SP-MIB", "scfXsbSubStatusConfiguration"), ("OPL-SP-MIB", "scfXsbSetupDID"), ("OPL-SP-MIB", "scfXsbNextDID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfXsbInfoGroup = scfXsbInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfXsbInfoGroup.setDescription('A collection of objects providing XSB information.')
scfLsbInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 7)).setObjects(("OPL-SP-MIB", "scfLsbType"), ("OPL-SP-MIB", "scfLsbNumber"), ("OPL-SP-MIB", "scfLsbDomainId"), ("OPL-SP-MIB", "scfLsbId"), ("OPL-SP-MIB", "scfLsbXsbId"), ("OPL-SP-MIB", "scfLsbNoMem"), ("OPL-SP-MIB", "scfLsbNoIo"), ("OPL-SP-MIB", "scfLsbFloatingBoard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfLsbInfoGroup = scfLsbInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfLsbInfoGroup.setDescription('A collection of objects providing LSB information.')
scfBoardInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 8)).setObjects(("OPL-SP-MIB", "scfBoardNumber"), ("OPL-SP-MIB", "scfBoardType"), ("OPL-SP-MIB", "scfBoardId"), ("OPL-SP-MIB", "scfBoardName"), ("OPL-SP-MIB", "scfBoardAdditionalInfo"), ("OPL-SP-MIB", "scfBoardXsbs"), ("OPL-SP-MIB", "scfBoardState"), ("OPL-SP-MIB", "scfBoardCODEnabled"), ("OPL-SP-MIB", "scfBoardSubType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfBoardInfoGroup = scfBoardInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfBoardInfoGroup.setDescription('A collection of objects providing Board(CMU/IOU) information.')
scfCpuInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 9)).setObjects(("OPL-SP-MIB", "scfCpuNumber"), ("OPL-SP-MIB", "scfCpuBoardType"), ("OPL-SP-MIB", "scfCpuBoardId"), ("OPL-SP-MIB", "scfCpuModuleType"), ("OPL-SP-MIB", "scfCpuModuleId"), ("OPL-SP-MIB", "scfCpuSubType"), ("OPL-SP-MIB", "scfCpuSubId"), ("OPL-SP-MIB", "scfCpuType"), ("OPL-SP-MIB", "scfCpuFrequency"), ("OPL-SP-MIB", "scfCpuAdditionalInfo"), ("OPL-SP-MIB", "scfCpuState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfCpuInfoGroup = scfCpuInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfCpuInfoGroup.setDescription('A collection of objects providing CPU Module information.')
scfMemoryInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 10)).setObjects(("OPL-SP-MIB", "scfMemoryNumber"), ("OPL-SP-MIB", "scfMemoryBoardType"), ("OPL-SP-MIB", "scfMemoryBoardId"), ("OPL-SP-MIB", "scfMemoryModuleType"), ("OPL-SP-MIB", "scfMemoryModuleId"), ("OPL-SP-MIB", "scfMemorySubType"), ("OPL-SP-MIB", "scfMemorySubId"), ("OPL-SP-MIB", "scfMemoryName"), ("OPL-SP-MIB", "scfMemoryCapacity"), ("OPL-SP-MIB", "scfMemoryAdditionalInfo"), ("OPL-SP-MIB", "scfMemoryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfMemoryInfoGroup = scfMemoryInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfMemoryInfoGroup.setDescription('A collection of objects providing Memory information.')
scfIoBoxInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 11)).setObjects(("OPL-SP-MIB", "scfIoBoxNumber"), ("OPL-SP-MIB", "scfIoBoxId"), ("OPL-SP-MIB", "scfIoBoxLocationLED"), ("OPL-SP-MIB", "scfIoBoxOverTempLED"), ("OPL-SP-MIB", "scfIoBoxServiceReqLED"), ("OPL-SP-MIB", "scfIoBoxActiveLED"), ("OPL-SP-MIB", "scfIoBoxPartNumber"), ("OPL-SP-MIB", "scfIoBoxSerialNumber"), ("OPL-SP-MIB", "scfIoBoxDashLevel"), ("OPL-SP-MIB", "scfIoBoatNumber"), ("OPL-SP-MIB", "scfIoBoatIoBoxId"), ("OPL-SP-MIB", "scfIoBoatId"), ("OPL-SP-MIB", "scfIoBoatLocation"), ("OPL-SP-MIB", "scfIoBoatType"), ("OPL-SP-MIB", "scfIoBoatOKtoRemoveLED"), ("OPL-SP-MIB", "scfIoBoatServiceReqLED"), ("OPL-SP-MIB", "scfIoBoatActiveLED"), ("OPL-SP-MIB", "scfIoBoatPartNumber"), ("OPL-SP-MIB", "scfIoBoatSerialNumber"), ("OPL-SP-MIB", "scfIoBoatDashLevel"), ("OPL-SP-MIB", "scfLinkCardNumber"), ("OPL-SP-MIB", "scfLinkCardIoBoxId"), ("OPL-SP-MIB", "scfLinkCardIoBoatId"), ("OPL-SP-MIB", "scfLinkCardId"), ("OPL-SP-MIB", "scfLinkCardDataLED"), ("OPL-SP-MIB", "scfLinkCardMgmtLED"), ("OPL-SP-MIB", "scfLinkCardDownlinkCardLocation"), ("OPL-SP-MIB", "scfLinkCardDownlinkCardId"), ("OPL-SP-MIB", "scfLinkCardPartNumber"), ("OPL-SP-MIB", "scfLinkCardSerialNumber"), ("OPL-SP-MIB", "scfLinkCardDashLevel"), ("OPL-SP-MIB", "scfPowerSupplyFanNumber"), ("OPL-SP-MIB", "scfPowerSupplyFanIoBoxId"), ("OPL-SP-MIB", "scfPowerSupplyFanId"), ("OPL-SP-MIB", "scfPowerSupplyFanLocation"), ("OPL-SP-MIB", "scfPowerSupplyFanOKtoRemoveLED"), ("OPL-SP-MIB", "scfPowerSupplyFanServiceReqLED"), ("OPL-SP-MIB", "scfPowerSupplyFanACPowerLED"), ("OPL-SP-MIB", "scfPowerSupplyFanDCPowerLED"), ("OPL-SP-MIB", "scfPowerSupplyFanPartNumber"), ("OPL-SP-MIB", "scfPowerSupplyFanSerialNumber"), ("OPL-SP-MIB", "scfPowerSupplyFanDashLevel"), ("OPL-SP-MIB", "scfIoBoxSensorNumber"), ("OPL-SP-MIB", "scfIoBoxSensorIoBoxId"), ("OPL-SP-MIB", "scfIoBoxSensorIoBoxSubType"), ("OPL-SP-MIB", "scfIoBoxSensorIoBoxSubId"), ("OPL-SP-MIB", "scfIoBoxSensorId"), ("OPL-SP-MIB", "scfIoBoxSensorDescription"), ("OPL-SP-MIB", "scfIoBoxSensorUnits"), ("OPL-SP-MIB", "scfIoBoxSensorValue"), ("OPL-SP-MIB", "scfIoBoxSensorEnabledAlarms"), ("OPL-SP-MIB", "scfIoBoxSensorMinAlarm"), ("OPL-SP-MIB", "scfIoBoxSensorMaxAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfIoBoxInfoGroup = scfIoBoxInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfIoBoxInfoGroup.setDescription('A collection of objects providing I/O Box information.')
scfComponentInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 12)).setObjects(("OPL-SP-MIB", "scfComponentNumber"), ("OPL-SP-MIB", "scfComponentBoardType"), ("OPL-SP-MIB", "scfComponentBoardId"), ("OPL-SP-MIB", "scfComponentModuleType"), ("OPL-SP-MIB", "scfComponentModuleId"), ("OPL-SP-MIB", "scfComponentSubType"), ("OPL-SP-MIB", "scfComponentSubId"), ("OPL-SP-MIB", "scfComponentAdditionalInfo"), ("OPL-SP-MIB", "scfComponentPartNumber"), ("OPL-SP-MIB", "scfComponentSerialNumber"), ("OPL-SP-MIB", "scfComponentProductName"), ("OPL-SP-MIB", "scfComponentManufacturer"), ("OPL-SP-MIB", "scfComponentManufactureDate"), ("OPL-SP-MIB", "scfComponentStatus"), ("OPL-SP-MIB", "scfComponentErrorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfComponentInfoGroup = scfComponentInfoGroup.setStatus('current')
if mibBuilder.loadTexts: scfComponentInfoGroup.setDescription('A collection of objects providing physical component information.')
scfNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 13)).setObjects(("OPL-SP-MIB", "scfTrapEventType"), ("OPL-SP-MIB", "scfTrapStatusEventType"), ("OPL-SP-MIB", "scfTrapDomainStatusAlarmType"), ("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapIoBoxTempEventType"), ("OPL-SP-MIB", "scfTrapIoBoxLedType"), ("OPL-SP-MIB", "scfTrapIoBoxLedValue"), ("OPL-SP-MIB", "scfTrapModeSwitchEventType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfNotificationObjectGroup = scfNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: scfNotificationObjectGroup.setDescription('The collection of notification objects used to indicate events, alarms, and state changes that occur in the system.')
scfSystemActualPowerConsumptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 14)).setObjects(("OPL-SP-MIB", "scfSystemActualPowerConsumptionValue"), ("OPL-SP-MIB", "scfSystemActualPowerConsumptionUnit"), ("OPL-SP-MIB", "scfSystemActualPowerMinPollingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemActualPowerConsumptionGroup = scfSystemActualPowerConsumptionGroup.setStatus('current')
if mibBuilder.loadTexts: scfSystemActualPowerConsumptionGroup.setDescription('A collection of objects providing System Actual Power Consumption information.')
scfSystemAmbientTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 15)).setObjects(("OPL-SP-MIB", "scfSystemAmbientTemperatureValue"), ("OPL-SP-MIB", "scfSystemAmbientTemperatureUnit"), ("OPL-SP-MIB", "scfSystemAmbientTemperatureMinPollingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemAmbientTemperatureGroup = scfSystemAmbientTemperatureGroup.setStatus('current')
if mibBuilder.loadTexts: scfSystemAmbientTemperatureGroup.setDescription('A collection of objects providing System Ambient Temperature information.')
scfSystemPermittedPowerConsumptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 16)).setObjects(("OPL-SP-MIB", "scfSystemPermittedPowerConsumptionValue"), ("OPL-SP-MIB", "scfSystemPermittedPowerConsumptionUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemPermittedPowerConsumptionGroup = scfSystemPermittedPowerConsumptionGroup.setStatus('current')
if mibBuilder.loadTexts: scfSystemPermittedPowerConsumptionGroup.setDescription('A collection of objects providing System Permitted Power Consumption information.')
scfSystemAirFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 17)).setObjects(("OPL-SP-MIB", "scfSystemExhaustAirFlowValue"), ("OPL-SP-MIB", "scfSystemExhaustAirFlowUnit"), ("OPL-SP-MIB", "scfSystemExhaustAirFlowMinPollingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemAirFlowGroup = scfSystemAirFlowGroup.setStatus('current')
if mibBuilder.loadTexts: scfSystemAirFlowGroup.setDescription('A collection of objects providing System Air Flow information.')
scfNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 2, 1)).setObjects(("OPL-SP-MIB", "scfSPFailover"), ("OPL-SP-MIB", "scfComponentEvent"), ("OPL-SP-MIB", "scfComponentStatusEvent"), ("OPL-SP-MIB", "scfXsbModeChangeEvent"), ("OPL-SP-MIB", "scfDomainStatusAlarm"), ("OPL-SP-MIB", "scfDomainXsbEvent"), ("OPL-SP-MIB", "scfIoBoxEvent"), ("OPL-SP-MIB", "scfIoBoxLedEvent"), ("OPL-SP-MIB", "scfIoBoxTemperatureEvent"), ("OPL-SP-MIB", "scfModeSwitchEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfNotificationsGroup = scfNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: scfNotificationsGroup.setDescription('The collection of notifications used to indicate events, alarms, and state changes that occur in the system.')
mibBuilder.exportSymbols("OPL-SP-MIB", scfComponentInfoGroup=scfComponentInfoGroup, scfMIBTrapPrefix=scfMIBTrapPrefix, scfIpAddress=scfIpAddress, scfBoardTable=scfBoardTable, scfTrapIoBoxLedType=scfTrapIoBoxLedType, scfSystemActualPowerConsumptionValue=scfSystemActualPowerConsumptionValue, scfMIBTrapData=scfMIBTrapData, scfSystemReadyLED=scfSystemReadyLED, scfLsbInfo=scfLsbInfo, scfNotificationsGroup=scfNotificationsGroup, scfSystemExhaustAirFlowUnit=scfSystemExhaustAirFlowUnit, scfLsbId=scfLsbId, scfXsbInfo=scfXsbInfo, ScfTestState=ScfTestState, scfLinkCardDownlinkCardId=scfLinkCardDownlinkCardId, scfSystemPowerLED=scfSystemPowerLED, scfDomainErrorStatus=scfDomainErrorStatus, scfAgentIndex=scfAgentIndex, scfSystemSerialNumber=scfSystemSerialNumber, scfDomainOsVersion=scfDomainOsVersion, scfMIBTraps=scfMIBTraps, scfBoardNumber=scfBoardNumber, scfMonitorModuleType=scfMonitorModuleType, scfIoBoxServiceReqLED=scfIoBoxServiceReqLED, scfXsbInfoGroup=scfXsbInfoGroup, ScfTrapEventTypeTC=ScfTrapEventTypeTC, scfMemoryAdditionalInfo=scfMemoryAdditionalInfo, scfIoBoxEvent=scfIoBoxEvent, scfSystemAirFlowGroup=scfSystemAirFlowGroup, scfMonitorEntry=scfMonitorEntry, scfSystemActualPowerMinPollingInterval=scfSystemActualPowerMinPollingInterval, scfComponentManufactureDate=scfComponentManufactureDate, scfSystemActualPowerConsumptionGroup=scfSystemActualPowerConsumptionGroup, scfPowerSupplyFanLocation=scfPowerSupplyFanLocation, scfLsbXsbId=scfLsbXsbId, scfIoBoxSensorEntry=scfIoBoxSensorEntry, scfTrapIoBoxSubId=scfTrapIoBoxSubId, scfXsbSubStatusConfiguration=scfXsbSubStatusConfiguration, scfDomainTable=scfDomainTable, scfIoBoatPartNumber=scfIoBoatPartNumber, product=product, scfDomainOsSysName=scfDomainOsSysName, scfIoBoxInfo=scfIoBoxInfo, scfCpuTable=scfCpuTable, scfTrapIoBoxTempEventType=scfTrapIoBoxTempEventType, scfModeSwitchEvent=scfModeSwitchEvent, ScfIndex=ScfIndex, scfXsbDomainId=scfXsbDomainId, ScfMonitorTypeTC=ScfMonitorTypeTC, ScfIoBoxLEDState=ScfIoBoxLEDState, scfDomainOsMachine=scfDomainOsMachine, scfPowerSupplyFanServiceReqLED=scfPowerSupplyFanServiceReqLED, scfPowerSupplyFanSerialNumber=scfPowerSupplyFanSerialNumber, scfMonitorModuleId=scfMonitorModuleId, scfDomainId=scfDomainId, ScfXsbIndex=ScfXsbIndex, scfLsbFloatingBoard=scfLsbFloatingBoard, scfMemoryName=scfMemoryName, scfIoBoxSensorIoBoxSubId=scfIoBoxSensorIoBoxSubId, solaris=solaris, scfIoBoxSensorValue=scfIoBoxSensorValue, scfIoBoxId=scfIoBoxId, scfDomainMemoryCapacity=scfDomainMemoryCapacity, scfXsbDrStatus=scfXsbDrStatus, scfMonitorValue=scfMonitorValue, PYSNMP_MODULE_ID=oplSpMIB, scfIoBoatDashLevel=scfIoBoatDashLevel, scfXsbId=scfXsbId, scfCpuModuleId=scfCpuModuleId, scfAgentEntry=scfAgentEntry, scfDomainInfo=scfDomainInfo, scfIoBoxSensorId=scfIoBoxSensorId, scfDomainOsAdditionalInfo=scfDomainOsAdditionalInfo, ScfTrapStatusEventTypeTC=ScfTrapStatusEventTypeTC, scfLinkCardIoBoatId=scfLinkCardIoBoatId, scfXsbNextDID=scfXsbNextDID, ScfUsageState=ScfUsageState, scfLinkCardMgmtLED=scfLinkCardMgmtLED, scfMonitorBoardId=scfMonitorBoardId, scfIoBoxSensorMaxAlarm=scfIoBoxSensorMaxAlarm, scfIoBoatNumber=scfIoBoatNumber, ScfDomainConfigPolicy=ScfDomainConfigPolicy, scfBoardEntry=scfBoardEntry, scfAgentNumber=scfAgentNumber, scfLinkCardSerialNumber=scfLinkCardSerialNumber, scfBoardSubType=scfBoardSubType, scfSystemAmbientTemperature=scfSystemAmbientTemperature, scfSystemCpuNumber=scfSystemCpuNumber, scfDomainCpuNumber=scfDomainCpuNumber, ScfTrapIoBoxTempEventTypeTC=ScfTrapIoBoxTempEventTypeTC, scfIoBoxLocationLED=scfIoBoxLocationLED, scfIoBoxSensorTable=scfIoBoxSensorTable, scfLsbDomainId=scfLsbDomainId, scfXsbErrorStatus=scfXsbErrorStatus, scfComponentEntry=scfComponentEntry, scfIoBoatIoBoxId=scfIoBoatIoBoxId, scfPowerSupplyFanNumber=scfPowerSupplyFanNumber, scfIoBoxTemperatureEvent=scfIoBoxTemperatureEvent, ScfIoBoxIndex=ScfIoBoxIndex, scfAgentId=scfAgentId, scfSystemActualPowerConsumptionUnit=scfSystemActualPowerConsumptionUnit, scfIoBoatLocation=scfIoBoatLocation, scfMonitorUnits=scfMonitorUnits, scfComponentModuleType=scfComponentModuleType, scfCpuBoardType=scfCpuBoardType, scfComponentSubId=scfComponentSubId, scfSystemPowerSource=scfSystemPowerSource, scfCpuBoardId=scfCpuBoardId, scfCompliance=scfCompliance, scfDomainValid=scfDomainValid, scfMemoryEntry=scfMemoryEntry, scfSystemAmbientTemperatureMinPollingInterval=scfSystemAmbientTemperatureMinPollingInterval, scfMonitorStatus=scfMonitorStatus, scfDomainStatus=scfDomainStatus, scfBoardInfoGroup=scfBoardInfoGroup, scfXsbSubStatusTest=scfXsbSubStatusTest, scfIoBoxSensorUnits=scfIoBoxSensorUnits, scfComponentBoardId=scfComponentBoardId, scfMemorySubType=scfMemorySubType, scfSystemAvailablePowerConsumption=scfSystemAvailablePowerConsumption, scfComponentPartNumber=scfComponentPartNumber, scfIpAddressNumber=scfIpAddressNumber, scfMonitorId=scfMonitorId, scfLinkCardId=scfLinkCardId, scfBoardInfo=scfBoardInfo, scfLinkCardEntry=scfLinkCardEntry, scfComponentStatus=scfComponentStatus, scfDomainXsbEvent=scfDomainXsbEvent, scfCpuType=scfCpuType, scfSystemName=scfSystemName, ScfIoBoxEnabledAlarms=ScfIoBoxEnabledAlarms, scfComponentNumber=scfComponentNumber, scfMonitorValueStatus=scfMonitorValueStatus, scfMemoryCapacity=scfMemoryCapacity, scfLsbNoIo=scfLsbNoIo, scfDomainXsbs=scfDomainXsbs, scfComponentManufacturer=scfComponentManufacturer, scfIoBoatServiceReqLED=scfIoBoatServiceReqLED, scfNotificationObjectGroup=scfNotificationObjectGroup, scfMIBConformances=scfMIBConformances, scfLinkCardDataLED=scfLinkCardDataLED, ScfDomainStatusTC=ScfDomainStatusTC, scfSystemAmbientTemperatureUnit=scfSystemAmbientTemperatureUnit, ScfCodState=ScfCodState, scfDomainNumber=scfDomainNumber, scfIpAddressTable=scfIpAddressTable, scfIoBoatSerialNumber=scfIoBoatSerialNumber, scfIoBoxEntry=scfIoBoxEntry, scfPowerSupplyFanId=scfPowerSupplyFanId, scfComponentSubType=scfComponentSubType, scfSystemAdditionalInfo=scfSystemAdditionalInfo, scfInfoGroup=scfInfoGroup, ScfDRState=ScfDRState, scfLinkCardDownlinkCardLocation=scfLinkCardDownlinkCardLocation, ScfIoBoxLEDType=ScfIoBoxLEDType, scfBoardCODEnabled=scfBoardCODEnabled, ScfLEDState=ScfLEDState, scfIoBoxPartNumber=scfIoBoxPartNumber, scfDomainInfoGroup=scfDomainInfoGroup, scfLsbInfoGroup=scfLsbInfoGroup, scfSystemExhaustAirFlowValue=scfSystemExhaustAirFlowValue, scfBoardAdditionalInfo=scfBoardAdditionalInfo, scfIoBoatOKtoRemoveLED=scfIoBoatOKtoRemoveLED, scfSystemCheckLED=scfSystemCheckLED, scfPowerSupplyFanEntry=scfPowerSupplyFanEntry, scfMonitorTable=scfMonitorTable, scfSystemAirFlow=scfSystemAirFlow, scfXsbNumber=scfXsbNumber, scfPowerSupplyFanDashLevel=scfPowerSupplyFanDashLevel, scfCpuAdditionalInfo=scfCpuAdditionalInfo, scfSystemMemoryCapacity=scfSystemMemoryCapacity, scfIoBoxOverTempLED=scfIoBoxOverTempLED, scfBoardType=scfBoardType, scfMIBGroups=scfMIBGroups, scfComponentInfo=scfComponentInfo, scfXsbType=scfXsbType, scfState=scfState, scfSystemAmbientTemperatureGroup=scfSystemAmbientTemperatureGroup, scfSystemPermittedPowerConsumptionUnit=scfSystemPermittedPowerConsumptionUnit, scfComponentProductName=scfComponentProductName, scfDomainObpAdditionalInfo=scfDomainObpAdditionalInfo, scfComponentStatusEvent=scfComponentStatusEvent, scfIoBoxSensorEnabledAlarms=scfIoBoxSensorEnabledAlarms, scfBoardState=scfBoardState, scfSystemAmbientTemperatureValue=scfSystemAmbientTemperatureValue, scfDomainStatusAlarm=scfDomainStatusAlarm, scfIoBoatEntry=scfIoBoatEntry, scfSystemState=scfSystemState, scfXsbSetupDID=scfXsbSetupDID, scfIoBoxInfoGroup=scfIoBoxInfoGroup, scfPowerSupplyFanDCPowerLED=scfPowerSupplyFanDCPowerLED, scfDomainObpVersion=scfDomainObpVersion, scfIoBoxSensorNumber=scfIoBoxSensorNumber, scfIoBoxSensorDescription=scfIoBoxSensorDescription, scfFirmwareState=scfFirmwareState, scfSystemExhaustAirFlowMinPollingInterval=scfSystemExhaustAirFlowMinPollingInterval, scfModeSwitch=scfModeSwitch, scfTrapIoBoxLedValue=scfTrapIoBoxLedValue, scfDomainOsRelease=scfDomainOsRelease, ScfBoardSubTypeTC=ScfBoardSubTypeTC, scfLsbNoMem=scfLsbNoMem, scfPowerSupplyFanTable=scfPowerSupplyFanTable, scfDomainOsNodeName=scfDomainOsNodeName, scfMonitorInfoGroup=scfMonitorInfoGroup, scfInfo=scfInfo, ScfStateTC=ScfStateTC, scfCpuSubId=scfCpuSubId, scfLinkCardDashLevel=scfLinkCardDashLevel, scfXsbEntry=scfXsbEntry, scfPowerSupplyFanIoBoxId=scfPowerSupplyFanIoBoxId, ScfConfigurationState=ScfConfigurationState, scfMIBCompliances=scfMIBCompliances, scfIoBoxTable=scfIoBoxTable, ScfErrorStatus=ScfErrorStatus, scfTrapDomainStatusAlarmType=scfTrapDomainStatusAlarmType, ScfComponentType=ScfComponentType, scfSystemActualPowerConsumption=scfSystemActualPowerConsumption, scfPowerSupplyFanOKtoRemoveLED=scfPowerSupplyFanOKtoRemoveLED, scfCpuNumber=scfCpuNumber, scfBoardId=scfBoardId, scfMemoryModuleId=scfMemoryModuleId, scfHardwareState=scfHardwareState, scfIoBoxSerialNumber=scfIoBoxSerialNumber, scfXsbSubStatusConnectivity=scfXsbSubStatusConnectivity, ScfAssignmentState=ScfAssignmentState, scfXsbTable=scfXsbTable, scfPowerSupplyFanACPowerLED=scfPowerSupplyFanACPowerLED, scfComponentSerialNumber=scfComponentSerialNumber, scfIoBoxDashLevel=scfIoBoxDashLevel, scfCpuEntry=scfCpuEntry, scfIoBoatTable=scfIoBoatTable, scfIoBoatId=scfIoBoatId, scfIoBoxSensorMinAlarm=scfIoBoxSensorMinAlarm, scfObjects=scfObjects, scfMemoryState=scfMemoryState, scfTrapModeSwitchEventType=scfTrapModeSwitchEventType, scfLinkCardNumber=scfLinkCardNumber, scfXsbStatus=scfXsbStatus, fujitsu=fujitsu, ScfModeSwitchState=ScfModeSwitchState, scfLinkCardIoBoxId=scfLinkCardIoBoxId, scfXsbSubStatusPower=scfXsbSubStatusPower, scfSystemPermittedPowerConsumption=scfSystemPermittedPowerConsumption, scfCpuInfo=scfCpuInfo, scfMonitorBoardType=scfMonitorBoardType, ScfIoBoatTypeTC=ScfIoBoatTypeTC, scfTrapIoBoxSubType=scfTrapIoBoxSubType, scfLinkCardTable=scfLinkCardTable, scfComponentEvent=scfComponentEvent, scfIpAddressEntry=scfIpAddressEntry, scfMemoryNumber=scfMemoryNumber, scfLsbType=scfLsbType, scfMemoryTable=scfMemoryTable, scfComponentBoardType=scfComponentBoardType)
mibBuilder.exportSymbols("OPL-SP-MIB", scfCpuState=scfCpuState, scfComponentErrorStatus=scfComponentErrorStatus, ScfValidStatus=ScfValidStatus, scfIpAddressPortNumber=scfIpAddressPortNumber, scfMonitorInfo=scfMonitorInfo, scfMemorySubId=scfMemorySubId, scfCpuSubType=scfCpuSubType, scfLsbNumber=scfLsbNumber, ScfConnectivityState=ScfConnectivityState, scfIoBoxNumber=scfIoBoxNumber, ScfDomainStatusAlarmType=ScfDomainStatusAlarmType, scfCpuInfoGroup=scfCpuInfoGroup, ScfTrapModeSwitchEventTypeTC=ScfTrapModeSwitchEventTypeTC, scfTrapEventType=scfTrapEventType, scfIoBoxSensorIoBoxId=scfIoBoxSensorIoBoxId, scfBoardName=scfBoardName, scfPowerSupplyFanPartNumber=scfPowerSupplyFanPartNumber, scfTrapStatusEventType=scfTrapStatusEventType, scfMonitorType=scfMonitorType, scfLsbTable=scfLsbTable, scfMemoryBoardId=scfMemoryBoardId, scfSystemPermittedPowerConsumptionGroup=scfSystemPermittedPowerConsumptionGroup, scfXsbSubStatusAssignment=scfXsbSubStatusAssignment, scfMemoryInfo=scfMemoryInfo, scfMIBNotifGroups=scfMIBNotifGroups, scfLsbEntry=scfLsbEntry, scfXsbModeChangeEvent=scfXsbModeChangeEvent, sparcEnterprise=sparcEnterprise, scfAgentTable=scfAgentTable, scfLinkCardPartNumber=scfLinkCardPartNumber, scfComponentModuleId=scfComponentModuleId, scfMemoryModuleType=scfMemoryModuleType, scfMonitorAdditionalInfo=scfMonitorAdditionalInfo, scfSystemPermittedPowerConsumptionValue=scfSystemPermittedPowerConsumptionValue, scfStateGroup=scfStateGroup, scfTrapIoBoxId=scfTrapIoBoxId, scfComponentAdditionalInfo=scfComponentAdditionalInfo, scfIoBoxSensorIoBoxSubType=scfIoBoxSensorIoBoxSubType, scfDomainConfigurationPolicy=scfDomainConfigurationPolicy, scfCpuModuleType=scfCpuModuleType, scfIoBoatActiveLED=scfIoBoatActiveLED, scfIoBoxLedEvent=scfIoBoxLedEvent, scfIoBoatType=scfIoBoatType, scfIoBoxActiveLED=scfIoBoxActiveLED, scfCpuFrequency=scfCpuFrequency, oplSpMIB=oplSpMIB, scfXcpVersion=scfXcpVersion, scfDomainEntry=scfDomainEntry, scfMonitorDescription=scfMonitorDescription, scfBoardXsbs=scfBoardXsbs, scfSystemType=scfSystemType, scfMemoryInfoGroup=scfMemoryInfoGroup, ScfIoBoxComponentType=ScfIoBoxComponentType, scfSPFailover=scfSPFailover, scfIpAddressIndex=scfIpAddressIndex, scfSystemInfo=scfSystemInfo, scfMemoryBoardType=scfMemoryBoardType, scfComponentTable=scfComponentTable, ScfIoBoxComponentLocation=ScfIoBoxComponentLocation, scfSystemInfoGroup=scfSystemInfoGroup, scfMIBObjectGroups=scfMIBObjectGroups, scfMonitorNumber=scfMonitorNumber)
