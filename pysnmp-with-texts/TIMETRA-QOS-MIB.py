#
# PySNMP MIB module TIMETRA-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
AtmVcIdentifier, AtmServiceCategory, AtmTrafficDescrParamIndex = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVcIdentifier", "AtmServiceCategory", "AtmTrafficDescrParamIndex")
InetAddressType, InetAddressIPv6, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressIPv6", "InetAddressPrefixLength", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Counter64, ObjectIdentity, iso, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Unsigned32, Counter32, ModuleIdentity, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ObjectIdentity", "iso", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Unsigned32", "Counter32", "ModuleIdentity", "Bits", "IpAddress")
TimeStamp, TruthValue, MacAddress, RowStatus, StorageType, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "MacAddress", "RowStatus", "StorageType", "DisplayString", "TextualConvention")
tmnxSRNotifyPrefix, timetraSRMIBModules, tmnxSRObjs, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRConfs")
TmnxMcMlpppClassIndex, = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "TmnxMcMlpppClassIndex")
TFCName, Dot1PPriority, TPolicerRateType, TQueueMode, TEgressQPerPacketOffset, THsmdaPolicyScheduleClass, THPolVirtualScheCIRRate, TBurstSizeBytes, TClassBurstLimit, THsmdaCIRKRate, THSMDAQueueBurstLimit, THPolCIRRate, TAtmTdpDescrType, TPriority, TDEProfileOrDei, TPolicerWeight, TItemDescription, TSapIngressPolicyID, TCIRRate, TmnxSlopeMap, TEgressQueueId, TIngressQueueId, TIngressHsmdaQueueId, TEgrPolicerId, TDSCPNameOrEmpty, TItemMatch, ServiceAccessPoint, TMcFrQoSProfileId, TLevelOrDefault, TPriorityOrDefault, TIngressHsmdaPerPacketOffset, TPIRRatePercent, TPortSchedulerPIR, TPrecValueOrNone, TIngressHsmdaCounterIdOrZero, TTcpUdpPort, TDEValue, TIngPolicerId, TNamedItemOrEmpty, TBurstPercent, TFrameType, TmnxEnabledDisabled, TRemarkType, TDSCPName, TPerPacketOffset, TPlcrBurstSizeBytes, THSMDABurstSizeBytes, TLNamedItemOrEmpty, TFCNameOrEmpty, TLevel, THsmdaSchedulerPolicyGroupId, TNonZeroWeight, TProfileOrNone, TIngPolicerIdOrNone, TWeight, TMatchCriteria, IpAddressPrefixLength, TPortSchedulerCIR, TAdaptationRule, TPrecValue, THsmdaWrrWeight, TPIRRate, TPortSchedulerPIRRate, TProfileUseDEOrNone, TProfileOrDei, TMacFilterType, TEgressHsmdaQueueId, THsmdaPIRMRate, THsmdaPolicyIncludeQueues, TmnxIngPolicerStatMode, TRatePercent, TEgressHsmdaPerPacketOffset, QTagFullRangeOrNone, TAdvCfgRate, TProfile, TNamedItem, THsmdaWeight, TMaxDecRate, TTcpUdpPortOperator, TDEProfile, TBurstHundredthsOfPercent, TLspExpValue, TSapEgressPolicyID, TMlpppQoSProfileId, TBurstSize, TDSCPValue, QTagFullRange, TEntryId, TNetworkPolicyID, THsmdaPIRKRate, TBurstPercentOrDefault, TItemScope, TRateType, TBurstLimit, THPolPIRRate, TEgrPolicerIdOrNone, TIpProtocol, THsmdaWeightClass, TQueueId, TEgressHsmdaCounterIdOrZero, TBWRateType, THPolVirtualSchePIRRate, TmnxEgrPolicerStatMode = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TFCName", "Dot1PPriority", "TPolicerRateType", "TQueueMode", "TEgressQPerPacketOffset", "THsmdaPolicyScheduleClass", "THPolVirtualScheCIRRate", "TBurstSizeBytes", "TClassBurstLimit", "THsmdaCIRKRate", "THSMDAQueueBurstLimit", "THPolCIRRate", "TAtmTdpDescrType", "TPriority", "TDEProfileOrDei", "TPolicerWeight", "TItemDescription", "TSapIngressPolicyID", "TCIRRate", "TmnxSlopeMap", "TEgressQueueId", "TIngressQueueId", "TIngressHsmdaQueueId", "TEgrPolicerId", "TDSCPNameOrEmpty", "TItemMatch", "ServiceAccessPoint", "TMcFrQoSProfileId", "TLevelOrDefault", "TPriorityOrDefault", "TIngressHsmdaPerPacketOffset", "TPIRRatePercent", "TPortSchedulerPIR", "TPrecValueOrNone", "TIngressHsmdaCounterIdOrZero", "TTcpUdpPort", "TDEValue", "TIngPolicerId", "TNamedItemOrEmpty", "TBurstPercent", "TFrameType", "TmnxEnabledDisabled", "TRemarkType", "TDSCPName", "TPerPacketOffset", "TPlcrBurstSizeBytes", "THSMDABurstSizeBytes", "TLNamedItemOrEmpty", "TFCNameOrEmpty", "TLevel", "THsmdaSchedulerPolicyGroupId", "TNonZeroWeight", "TProfileOrNone", "TIngPolicerIdOrNone", "TWeight", "TMatchCriteria", "IpAddressPrefixLength", "TPortSchedulerCIR", "TAdaptationRule", "TPrecValue", "THsmdaWrrWeight", "TPIRRate", "TPortSchedulerPIRRate", "TProfileUseDEOrNone", "TProfileOrDei", "TMacFilterType", "TEgressHsmdaQueueId", "THsmdaPIRMRate", "THsmdaPolicyIncludeQueues", "TmnxIngPolicerStatMode", "TRatePercent", "TEgressHsmdaPerPacketOffset", "QTagFullRangeOrNone", "TAdvCfgRate", "TProfile", "TNamedItem", "THsmdaWeight", "TMaxDecRate", "TTcpUdpPortOperator", "TDEProfile", "TBurstHundredthsOfPercent", "TLspExpValue", "TSapEgressPolicyID", "TMlpppQoSProfileId", "TBurstSize", "TDSCPValue", "QTagFullRange", "TEntryId", "TNetworkPolicyID", "THsmdaPIRKRate", "TBurstPercentOrDefault", "TItemScope", "TRateType", "TBurstLimit", "THPolPIRRate", "TEgrPolicerIdOrNone", "TIpProtocol", "THsmdaWeightClass", "TQueueId", "TEgressHsmdaCounterIdOrZero", "TBWRateType", "THPolVirtualSchePIRRate", "TmnxEgrPolicerStatMode")
timetraQosMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 16))
timetraQosMIBModule.setRevisions(('1909-02-28 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '2003-01-20 00:00', '2001-05-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraQosMIBModule.setRevisionsDescriptions(('Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-QOS-MIB.', 'Rev 6.1 01 Jul 2008 00:00 6.1 release of the TIMETRA-QOS-MIB.', 'Rev 6.0 01 Jan 2008 00:00 6.0 release of the TIMETRA-QOS-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-QOS-MIB.', 'Rev 4.0 28 Feb 2006 00:00 4.0 release of the TIMETRA-QOS-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-QOS-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-QOS-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-QOS-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-QOS-MIB.', 'Rev 1.0 20 Jan 2003 00:00 1.0 Release of the TIMETRA-QOS-MIB.', 'Rev 0.1 29 May 2001 00:00 Initial version of the TIMETRA-QOS-MIB.',))
if mibBuilder.loadTexts: timetraQosMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraQosMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraQosMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraQosMIBModule.setDescription("This document is the SNMP MIB module to manage and provision Quality of Service features on Alcatel-Lucent SROS systems. Copyright 2003-2014 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tQosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16))
tQosNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 16))
tQosNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 16, 0))
tmnxQosConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16))
tDSCPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1))
tFCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2))
tSapIngressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3))
tSapEgressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4))
tNetworkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5))
tNetworkQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6))
tSharedQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7))
tSlopeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10))
tSchedulerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12))
tQosTimeStampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20))
tAtmTdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21))
tPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22))
tMcMlpppIngressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23))
tMcMlpppEgressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24))
tMcFrIngressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25))
tMcFrEgressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26))
tQosPolicerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27))
tWrrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28))
class TmnxMcFrClassIndex(TextualConvention, Integer32):
    description = 'The TmnxMcFrClassIndex indicates the class of a Multiclass Fr bundle. For example, a 4-class Fr link has 4 classes with indices 0, 1, 2, and 3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 15)

tDSCPNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1), )
if mibBuilder.loadTexts: tDSCPNameTable.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameTable.setDescription('A list of all DSCP Names. DSCP Name entries must exist here and be active before they can be referenced elsewhere (e.g. IP filter).')
tDSCPNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tDSCPName"))
if mibBuilder.loadTexts: tDSCPNameEntry.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameEntry.setDescription('Information about a particular DSCP Name, particularly the DSCP value. It maps a DSCP Name into a DSCP value. Some default entries are created by the agent. Default entries have tDSCPNameStorageType permanent, and can not be deleted. Entries cannot be created by user but may be supported later. An attempt to create a row in this table would return no creation.')
tDSCPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tDSCPName.setReference('')
if mibBuilder.loadTexts: tDSCPName.setStatus('current')
if mibBuilder.loadTexts: tDSCPName.setDescription('The name assigned to the DSCP Value.')
tDSCPNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameRowStatus.setDescription('Row Status of the entry.')
tDSCPNameStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameStorageType.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameStorageType.setDescription('The storage type of this row in the table.')
tDSCPNameDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 4), TDSCPValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameDscpValue.setReference('')
if mibBuilder.loadTexts: tDSCPNameDscpValue.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameDscpValue.setDescription('The DSCP Value.')
tDSCPNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDSCPNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameLastChanged.setDescription('timestamp of last change to this row in tDSCPNameTable.')
tFCNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1), )
if mibBuilder.loadTexts: tFCNameTable.setStatus('current')
if mibBuilder.loadTexts: tFCNameTable.setDescription('A list of all Forwarding Class Names. Forwarding Class Name entries must exist here and be active before they can be referenced elsewhere (e.g. qos queue).')
tFCNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tFCName"))
if mibBuilder.loadTexts: tFCNameEntry.setStatus('current')
if mibBuilder.loadTexts: tFCNameEntry.setDescription('Information about a particular Forwarding Class Name, particularly the Forwarding Class value. Some default entries are created by the agent. Default entries have tFCStorageType permanent, and can not be deleted. Entries cannot be created by user but maybe supported in future. An attempt to create a row in this table would return no creation.')
tFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 1), TFCName())
if mibBuilder.loadTexts: tFCName.setReference('')
if mibBuilder.loadTexts: tFCName.setStatus('current')
if mibBuilder.loadTexts: tFCName.setDescription('Forwarding class name.')
tFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFCRowStatus.setDescription('Row Status of the entry.')
tFCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCStorageType.setStatus('current')
if mibBuilder.loadTexts: tFCStorageType.setDescription('The storage type of this row in the table.')
tFCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCValue.setReference('')
if mibBuilder.loadTexts: tFCValue.setStatus('current')
if mibBuilder.loadTexts: tFCValue.setDescription('FC Value.')
tFCNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFCNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tFCNameLastChanged.setDescription('timestamp of last change to this row in tFCNameTable.')
tSapIngressTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1), )
if mibBuilder.loadTexts: tSapIngressTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressTable.setDescription(' ')
tSapIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"))
if mibBuilder.loadTexts: tSapIngressEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressEntry.setDescription('Information about a particular Sap Ingress Policy. sap-ingress policy (1) is the default entry. Default Entry is created by the agent, other entries are created by user. Default Entry cannot be modified/deleted. The other entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tSapIngressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 1), TSapIngressPolicyID().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(65536, 65536), ValueRangeConstraint(65537, 65537), )))
if mibBuilder.loadTexts: tSapIngressIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIndex.setDescription('the policy ID is the index to this table.')
tSapIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressRowStatus.setDescription('Row Status for the policy. The deletion of this row has an action of removing the dependent rows in the following tables : - tSapIngressQueueTable - tSapIngressDSCPTable - tSapIngressDot1pTable ')
tSapIngressScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressScope.setStatus('current')
if mibBuilder.loadTexts: tSapIngressScope.setDescription("Scope of the policy. If the scope is 'exclusive', it can only be instantiated once whereas it could have multiple instances if defined as 'exclusive'.")
tSapIngressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDescription.setDescription('user-provided description of the policy.')
tSapIngressDefaultFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 5), TNamedItem().clone(hexValue="be")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDefaultFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDefaultFC.setDescription("tSapIngressDefaultFC specifies the forwarding class or the sub forwarding class which should be used for all traffic that does not match a specific classification specified in this SAP ingress QoS policy. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. If not specified explicitly, all traffic will be classified as best-effort 'be'.")
tSapIngressDefaultFCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 6), TPriority().clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDefaultFCPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDefaultFCPriority.setDescription('the priority to assign to traffic ingressing as the default action queue.')
tSapIngressMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 7), TMatchCriteria()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMatchCriteria.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMatchCriteria.setDescription('indicates which type of match criteria the policy should use. when set to ip(1), the policy looks for match entries in tSapIngressIPCriteriaTable or tSapIngressIPv6CriteriaTable. When set to mac(2), the policy looks for match entries in tSapIngressMacCriteriaTable. the value of tSapIngressMatchCriteria is set when the first match criteria table entry is created. the value is set to none(3) when the last criteria table entry is removed. when tSapIngressMatchCriteria is set to ip(1), no tSapIngressMacCriteriaTable entries can be created. when set to mac(2), no tSapIngressIPCriteriaTable or tSapIngressIPv6CriteriaTable entries can be created. ')
tSapIngressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLastChanged.setDescription('timestamp of last change to this row in tSapIngressTable.')
tSapIngressHsmdaPacketOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 9), TIngressHsmdaPerPacketOffset()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaPacketOffset.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaPacketOffset.setDescription('The value of tSapIngressHsmdaPacketOffset specifies the value, in bytes, of the adjustment to make to the size of each packet for HSMDA queue accounting. This object is obsoleted in 10.0 Release.')
tSapIngressDefFCHsmdaCntrOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 10), TIngressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDefFCHsmdaCntrOvr.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressDefFCHsmdaCntrOvr.setDescription('The value of the object tSapIngressDefFCHsmdaCntrOvr specifies the counter to use for all traffic that does not match a specific classification specified in this SAP ingress QoS policy. A value of zero implies that the default counters should be used. This object is obsoleted in 10.0 Release.')
tSapIngressMacCritType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 11), TMacFilterType().clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCritType.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCritType.setDescription("tSapIngressMacCritType specifies which type of entries this mac filter can contain. If tSapIngressMacCritType is set to 'normal(1)', all match criteria are accepted except the criteria mentioned below that belong to type vid(3) or isid(2). tSapIngressMacCritType 'isid(2)' is not supported here. If tSapIngressMacCritType is set to vid(3) the only accepted match criteria for the filter entries are: - tSapIngressMacCritInnerTagValue - tSapIngressMacCritInnerTagMask - tSapIngressMacCritOuterTagValue - tSapIngressMacCritOuterTagMask tSapIngressMacCritType can only be changed if the filter has no entries. The value will be set to 'normal(1)' if IP or IPV6 criteria are added to the this SAP ingress QoS policy. Any change attempt in this case will be silently discarded. ")
tSapIngressPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 12), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPolicyName.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPolicyName.setDescription('The value of tSapIngressPolicyName specifies the name to associate with this policy.')
tSapIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2), )
if mibBuilder.loadTexts: tSapIngressQueueTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueTable.setDescription("information about all sap-ingress policies' queues.")
tSapIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressQueue"))
if mibBuilder.loadTexts: tSapIngressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueEntry.setDescription('Information about a particular queue for a sap-ingress policy. Queue (1) is the used as a default for unicast and queue (11) is used as a default for multicast. Both these are created by the agent and can be edited but not removed from the system. Other entries are created by user.')
tSapIngressQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tSapIngressQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueue.setDescription('The queue ID is used as the secondary index to the table entry.')
tSapIngressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this table.')
tSapIngressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueParent.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
tSapIngressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
tSapIngressQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding to.')
tSapIngressQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCIRLevel.setDescription("This specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tSapIngressQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding to.')
tSapIngressQueueMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMCast.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueMCast.setDescription('This object specifies if this is a multicast queue or not.')
tSapIngressQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueExpedite.setDescription("tSapIngressQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.")
tSapIngressQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 10), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCBS.setDescription('The amount of reserved buffer space (in kilo bytes) for the queue.')
tSapIngressQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 11), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMBS.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressQueueMBS.setDescription('The maximum amount of buffer space (in kilo bytes) allowed for the queue. This object has been replaced with tSapIngressQueueMBSBytes object.')
tSapIngressQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 12), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueHiPrioOnly.setDescription('The percentage of buffer space for the queue, used exclusively by high priority packets.')
tSapIngressQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueuePIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngressQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 14), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngressQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 15), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueAdminPIR.setDescription('The administrative PIR specified by the user.')
tSapIngressQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 16), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueAdminCIR.setDescription('The administrative CIR specified by the user.')
tSapIngressQueueOperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 17), TPIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueOperPIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressQueueOperPIR.setDescription('The operating PIR.')
tSapIngressQueueOperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 18), TCIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueOperCIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressQueueOperCIR.setDescription('The operational value derived by computing the CIR value from the administrative CIR and PIR values and their corresponding adaptation rules.')
tSapIngressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueLastChanged.setDescription('timestamp of last change to this row in tSapIngressQueueTable.')
tSapIngressQueuePoliced = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePoliced.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueuePoliced.setDescription('tSapIngressQueuePoliced specifies that the out of profile traffic feeding into the physical queue instance should be dropped. tSapIngressQueuePoliced overrides the bandwidth specified by the object tSapIngressQueueAdminCIR.')
tSapIngressQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 21), TQueueMode().clone('priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMode.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueMode.setDescription('tSapIngressQueueMode specifies the mode in which the queue is operating. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.')
tSapIngressQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 22), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueuePoolName.setDescription('The value of tSapIngressQueuePoolName specifies the name of the pool to be applied for SAP ingress queue.')
tSapIngressQueueMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 23), TBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMBSBytes.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueMBSBytes.setDescription('The maximum amount of buffer space (in bytes) allowed for the queue.')
tSapIngressQueueBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 24), TBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueBurstLimit.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueBurstLimit.setDescription('The value of tSapIngressQueueBurstLimit specifies the explicit shaping burst size of a queue.')
tSapIngressQueueAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminPIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueAdminPIRPercent.setDescription("The administrative PIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapIngressQueueAdminPIRPercent is set to non-default value when the object tSapIngressQueueRateType is set to 'kbps'.")
tSapIngressQueueAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminCIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueAdminCIRPercent.setDescription("The administrative CIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapIngressQueueAdminCIRPercent is set to non-default value when the object tSapIngressQueueRateType is set to 'kbps'.")
tSapIngressQueueRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 27), TBWRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueRateType.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueRateType.setDescription("The value of tSapIngressQueueRateType specifies the type of Ingress Queue rate. When the value of the object is set to 'kbps', the ingresss queue rates are specified in kbps. The objects tSapIngressQueueAdminCIRPercent and tSapIngressQueueAdminPIRPercent will be set to their default values. When the value of the object is set to either 'percentOfPortLimit' or 'percentOfLocalLimit', the ingress queue rates are specified in percentage. The objects tSapIngressQueueAdminCIR and tSapIngressQueueAdminPIR will be set to their default values.")
tSapIngressQueueAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 28), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueAdvCfgPolicy.setDescription('The value of tSapIngressQueueAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this queue.')
tSapIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3), )
if mibBuilder.loadTexts: tSapIngressDSCPTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPTable.setDescription('a list of all DSCP entries for all sap-ingress policies.')
tSapIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressDSCP"))
if mibBuilder.loadTexts: tSapIngressDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPEntry.setDescription('Information about a particular DSCP entry for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. in the event that one policy has multiple entries, and the tSapIngressDSCP values are the same, only one queue will be created (the queue for the lexicographically first tSapIngressDSCP). ')
tSapIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tSapIngressDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCP.setDescription('')
tSapIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPRowStatus.setDescription('This object allows creation/deletion of rows in this table.')
tSapIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPFC.setDescription('tSapIngressDSCPFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific DSCP i.e. tSapIngressDSCP. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressDSCPFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressDSCPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPPriority.setDescription('')
tSapIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDSCPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPLastChanged.setDescription('timestamp of last change to this row in tSapIngressDSCPTable.')
tSapIngressDSCPHsmdaCntrOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 6), TIngressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPHsmdaCntrOvr.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressDSCPHsmdaCntrOvr.setDescription('The value of the object tSapIngressDSCPHsmdaCntrOvr specifies the counter to use for all the traffic that matches the specific DSCP i.e. tSapIngressDSCP. A value of zero implies that the default counters should be used. This object is obsoleted in 10.0 Release.')
tSapIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4), )
if mibBuilder.loadTexts: tSapIngressDot1pTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pTable.setDescription('a list of all dot1p entries for all sap-ingress policies.')
tSapIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressDot1pValue"))
if mibBuilder.loadTexts: tSapIngressDot1pEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pEntry.setDescription('Information about a particular dot1p match for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tSapIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 1), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tSapIngressDot1pValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pValue.setDescription('dot1p value to match in the packet. this value is also used as an index so that for any dot1p value there is only one possible disposition queue and priority. ')
tSapIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pRowStatus.setDescription("Row Status for this sap-ingress policy's dot1p entry.")
tSapIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pFC.setDescription('tSapIngressDot1pFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific Dot1p i.e. tSapIngressDot1pValue. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressDot1pFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressDot1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pPriority.setDescription('priority to use for packets that match the dot1p value tSapIngressDot1pValue.')
tSapIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDot1pLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pLastChanged.setDescription('timestamp of last change to this row in tSapIngressDot1pTable.')
tSapIngressDot1pHsmdaCntrOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 6), TIngressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pHsmdaCntrOvr.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressDot1pHsmdaCntrOvr.setDescription('The value of the object tSapIngressDot1pHsmdaCntrOvr specifies the counter to use for all the traffic that matches the specific Dot1p i.e. tSapIngressDot1pValue. A value of zero implies that the default counters should be used. This object is obsoleted in 10.0 Release.')
tSapIngressIPCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5), )
if mibBuilder.loadTexts: tSapIngressIPCriteriaTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaTable.setDescription("information about all sap-ingress policies' ip-criteria entries.")
tSapIngressIPCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressIPCriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressIPCriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaEntry.setDescription('Information about a particular ip-criteria entry for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tSapIngressIPCriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressIPCriteriaIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaIndex.setDescription('unique identifier separates this entry from others in this policy.')
tSapIngressIPCriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaRowStatus.setDescription('Row Status for the IP Criteria entry.')
tSapIngressIPCriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDescription.setDescription('description of this IP criteria entry.')
tSapIngressIPCriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionFC.setDescription('tSapIngressIPCriteriaActionFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific IP criteria. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressIPCriteriaActionFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressIPCriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionPriority.setDescription("priority for packets which match this entry's criteria. when set to default, the packet is sent to the queue from DSCP/dot1p/FC which matched the packet, using the priority from the DSCP/dot1p/FC which matched the packet.")
tSapIngressIPCriteriaSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpAddr.setDescription('IP address to match with source-IP of the packet.')
tSapIngressIPCriteriaSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 7), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpMask.setDescription('the prefix is the number of bits of the source IP address to match.')
tSapIngressIPCriteriaDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpAddr.setDescription('IP address to match with destination-IP of the packet.')
tSapIngressIPCriteriaDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 9), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpMask.setDescription('the prefix is the number of bits of the destination IP address to match.')
tSapIngressIPCriteriaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 10), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaProtocol.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaProtocol.setDescription('IP protocol to match. use -1 to disable matching by IP protocol.')
tSapIngressIPCriteriaSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 11), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue1.setDescription('TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPCriteriaSourcePortOperator.')
tSapIngressIPCriteriaSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 12), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue2.setDescription('TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPCriteriaSourcePortOperator.')
tSapIngressIPCriteriaSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 13), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortOperator.setDescription('The operator specifies the manner in which tSapIngressIPCriteriaSourcePortValue1 and tSapIngressIPCriteriaSourcePortValue2 are to be used. The value of these latter 2 objects and tSapIngressIPCriteriaSourcePortOperator is used as described in TTcpUdpPortOperator.')
tSapIngressIPCriteriaDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 14), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue1.setDescription('TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPCriteriaDestPortOperator.')
tSapIngressIPCriteriaDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue2.setDescription('TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPCriteriaDestPortOperator.')
tSapIngressIPCriteriaDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 16), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortOperator.setDescription('The operator specifies the manner in which tSapIngressIPCriteriaDestPortValue1 and tSapIngressIPCriteriaDestPortValue2 are to be used. The value of these latter 2 objects and tSapIngressIPCriteriaDestPortOperator is used as described in TTcpUdpPortOperator.')
tSapIngressIPCriteriaDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 17), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaDSCP.setDescription('DSCP value to match in the packet')
tSapIngressIPCriteriaFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 19), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaFragment.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaFragment.setDescription('matches when the packet is a fragment (true) or when the packet is not a fragment (false) or matches all packets fragmented or not (off).')
tSapIngressIPCriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPCriteriaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaLastChanged.setDescription('timestamp of last change to this row in tSapIngressIPCriteriaTable.')
tSapIngressIPCritHsmdaCntrOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 21), TIngressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCritHsmdaCntrOvr.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressIPCritHsmdaCntrOvr.setDescription('The value of the object tSapIngressIPCritHsmdaCntrOvr specifies the Hsmda counter to use for matching packets. This value will be ignored when the sap-ingress policy specified by tSapIngressIndex, is applied to a SAP on a non-Hsmda MDA type. A value of zero implies that the default counters should be used. This object is obsoleted in 10.0 Release.')
tSapIngressIPCriteriaIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 31), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaIpPrecValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaIpPrecValue.setDescription('')
tSapIngressIPCriteriaIpPrecMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 32), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaIpPrecMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaIpPrecMask.setDescription('')
tSapIngressMacCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6), )
if mibBuilder.loadTexts: tSapIngressMacCriteriaTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaTable.setDescription("information about all sap-ingress policies' mac-criteria entries.")
tSapIngressMacCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressMacCriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressMacCriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaEntry.setDescription('Information about a particular mac-criteria entry for a sap-ingress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tSapIngressMacCriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressMacCriteriaIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaIndex.setDescription('')
tSapIngressMacCriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaRowStatus.setDescription('')
tSapIngressMacCriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDescription.setDescription('')
tSapIngressMacCriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionFC.setDescription('tSapIngressMacCriteriaActionFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific Mac criteria. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressMacCriteriaActionFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressMacCriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionPriority.setDescription('')
tSapIngressMacCriteriaFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 6), TFrameType().clone('e802dot3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaFrameType.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaFrameType.setDescription('The type of mac frame for which we are defining this match criteria.')
tSapIngressMacCriteriaSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 8), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacAddr.setDescription('')
tSapIngressMacCriteriaSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacMask.setDescription('')
tSapIngressMacCriteriaDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacAddr.setDescription('')
tSapIngressMacCriteriaDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacMask.setDescription('')
tSapIngressMacCriteriaDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 12), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PValue.setDescription('')
tSapIngressMacCriteriaDot1PMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 13), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PMask.setDescription('')
tSapIngressMacCriteriaEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1536, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaEthernetType.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaEthernetType.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaDSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 15), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAP.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaDSAPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 16), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAPMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAPMask.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 17), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAP.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSSAPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 18), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAPMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAPMask.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSnapPid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapPid.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapPid.setDescription('the ethernet type, ssap/dsap, and snap-pid match criteria are mutually exclusive and only one can be set per entry.')
tSapIngressMacCriteriaSnapOui = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("zero", 2), ("nonZero", 3))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapOui.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapOui.setDescription('whether to match snap-oui, and what to match.')
tSapIngressMacCriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMacCriteriaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaLastChanged.setDescription('timestamp of last change to this row in tSapIngressMacCriteriaTable.')
tSapIngressMacCriteriaAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 22), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaAtmVci.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaAtmVci.setDescription("The value of tSapIngressMacCriteriaAtmVci specifies ATM VC Identifier to match as part of the MAC criteria for this SAP on the ingress. An inconsistentValue error is returned if this object is set when tSapIngressMacCriteriaFrameType is not set to 'atm'.")
tSapIngressMacCritInnerTagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 23), QTagFullRangeOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCritInnerTagValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCritInnerTagValue.setDescription("The value of tSapIngressMacCritInnerTagValue specifies the value to match against the VID of the second VLAN tag in the packet that is carried transparently through the service (the second vlan tag after the service delimiting tags). This object can only be set if tSapIngressMacCritType is set to 'vid(3)'. The (default) value of '-1' indicates no VLAN tag matching will be performed.")
tSapIngressMacCritInnerTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 24), QTagFullRange().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCritInnerTagMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCritInnerTagMask.setDescription("The value of tSapIngressMacCritInnerTagMask is applied as a mask to VID of the inner VLAN tag of the packet prior to comparing it with tSapIngressMacCritInnerTagValue. The inner tag is the second tag in the packet that is carried transparently through the service (the second tag after the service delimiting tags). This object can only be set if tSapIngressMacCritType is set to 'vid(3)'.")
tSapIngressMacCritOuterTagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 25), QTagFullRangeOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCritOuterTagValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCritOuterTagValue.setDescription("The value of tSapIngressMacCritOuterTagValue specifies the value to match against the VID of the first VLAN tag in the packet that is carried transparently through the service (the first vlan tag after the service delimiting tags). This object can only be set if tSapIngressMacCritType is set to 'vid(3)'. The (default) value of '-1' indicates no outer VLAN tag matching will be performed.")
tSapIngressMacCritOuterTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 26), QTagFullRange().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCritOuterTagMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCritOuterTagMask.setDescription("The value of tSapIngressMacCritOuterTagMask is applied as a mask to VID of the outer VLAN tag of the packet prior to comparing it with tSapIngressMacCritOuterTagValue. The outer tag is the first tag in the packet that is carried transparently through the service (the first tag after the service delimiting tags). This object can only be set if tSapIngressMacCritType is set to 'vid(3)'.")
tSapIngressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7), )
if mibBuilder.loadTexts: tSapIngressFCTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCTable.setDescription('This table maintains the mapping of a particular forwarding class traffic into the specified queue.')
tSapIngressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressFCName"))
if mibBuilder.loadTexts: tSapIngressFCEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCEntry.setDescription("Information about a particular sap-ingress policy's forwarding class mappings to queues. Entries are created and deleted by user. They have a presumed StorageType of nonVolatile.")
tSapIngressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSapIngressFCName.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCName.setDescription('tSapIngressFCName specifies the forwarding class or the sub forwarding class for which this mapping is defined. A sub forwarding class mapping can also be configured. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] A sub forwarding class mapping should exist in this table if any explicit match criteria in this SAP ingress QoS policy try to use it. However, it is not the same for the base forwarding classes.')
tSapIngressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCRowStatus.setDescription('Row Status for this queue.')
tSapIngressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 3), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCQueue.setDescription('The specific queue to be used for packets in this forwarding class. Default value for this object along with default value for tSapIngressFCQGrp implies that the default queues should be used.')
tSapIngressFCMCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 4), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCMCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCMCastQueue.setDescription('The specific multicast queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant. Default value for this object along with default value for tSapIngressFCQGrpMCast implies that the default queues should be used.')
tSapIngressFCBCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 5), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCBCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCBCastQueue.setDescription('The specific broadcast queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant. Default value for this object along with default value for tSapIngressFCQGrpBCast implies that the default queues should be used.')
tSapIngressFCUnknownQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 6), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCUnknownQueue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCUnknownQueue.setDescription('The specific unknown destination queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant. Default value for this object along with default value for tSapIngressFCQGrpUnknown implies that the default queues should be used.')
tSapIngressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCLastChanged.setDescription('tSapIngressFCLastChanged indicates the value of sysUpTime when the forwarding class entry was last modified.')
tSapIngressFCInProfRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 8), TRemarkType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfRemark.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCInProfRemark.setDescription('tSapIngressFCInProfRemark specifies the remarking type to be used for the in profile packets feeding into the queues.')
tSapIngressFCInProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCInProfDscp.setDescription("tSapIngressFCInProfDscp specifies the DSCP to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCInProfRemark is specified to be 'dscp'.")
tSapIngressFCInProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 10), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCInProfPrec.setDescription("tSapIngressFCInProfPrec specifies the precedence value to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCInProfRemark is specified to be 'precedence'.")
tSapIngressFCOutProfRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 11), TRemarkType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfRemark.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCOutProfRemark.setDescription('tSapIngressFCOutProfRemark specifies the remarking type to be used for the in profile packets feeding into the queues.')
tSapIngressFCOutProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 12), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCOutProfDscp.setDescription("tSapIngressFCOutProfDscp specifies the DSCP to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCOutProfRemark is specified to be 'dscp'.")
tSapIngressFCOutProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 13), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCOutProfPrec.setDescription("tSapIngressFCOutProfPrec specifies the precedence value to be used while remarking the in profile packets when the in-profile remarking type, tSapIngressFCOutProfRemark is specified to be 'precedence'.")
tSapIngressFCProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 14), TProfileOrNone().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCProfile.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCProfile.setDescription("tSapIngressFCProfile specifies the profile of the packets associated with this forwarding class. This object can not be set to anything but 'none' if the queues being used by this mapping do not have their modes, tSapIngressQueueMode set to 'profile'.")
tSapIngressFCHsmdaQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 15), TIngressHsmdaQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCHsmdaQueue.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressFCHsmdaQueue.setDescription('The value of the object tSapIngressFCHsmdaQueue specifies the HSMDA queue to use for packets in this forwarding class. This mapping will be used when the SAP is on a HSMDA MDA. A value of zero implies that the default queues should be used. This object is obsoleted in 10.0 Release.')
tSapIngressFCHsmdaMCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 16), TIngressHsmdaQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCHsmdaMCastQueue.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressFCHsmdaMCastQueue.setDescription('The value of the object tSapIngressFCHsmdaMCastQueue specifies the multicast queue to use for packets in this forwarding class. This mapping will be used when the SAP is on a HSMDA MDA. A value of zero implies that the default queues should be used. This object is obsoleted in 10.0 Release.')
tSapIngressFCHsmdaBCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 17), TIngressHsmdaQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCHsmdaBCastQueue.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressFCHsmdaBCastQueue.setDescription('The value of the object tSapIngressFCHsmdaBCastQueue specifies the broadcast queue to use for packets in this forwarding class. This mapping will be used when the SAP is on a HSMDA MDA. A value of zero implies that the default queues should be used. This object is obsoleted in 10.0 Release.')
tSapIngressFCDE1OutOfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCDE1OutOfProfile.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCDE1OutOfProfile.setDescription("The value of tSapIngressFCDE1OutOfProfile specifies whether frames with DE value of '1' are to be treated as out-of-profile (as if tSapIngressFCProfile was set to 'out'). When tSapIngressFCDE1OutOfProfile is set to 'true', frames with DE value of '1' are autmatically classified as out-of-profile. Frames with DE value of '0' will continue to be policed based on the value of tSapIngressQueueAdminCIR. That is, if the dynamic rate of ingress queue is within CIR, frames with DE=0 will be treated as in-profile (as if tSapIngressFCProfile was set to 'in') otherwise these frames are treated as out-of-profile. When tSapIngressFCDE1OutOfProfile is set to 'true', it supercedes action specified by the value of tSapIngressFCProfile.")
tSapIngressFCQGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 19), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCQGrp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCQGrp.setDescription("tSapIngressFCQGrp specifies the tQosIngQGroupName. This object must be set along with tSapIngressFCQueue object. An 'inconsistentValue' error is returned if this object is set to the default and other is set to a non-default value.")
tSapIngressFCQGrpMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 20), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCQGrpMCast.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCQGrpMCast.setDescription("tSapIngressFCQGrpMCast specifies the tQosIngQGroupName. This object must be set along with tSapIngressFCMCastQueue object. An 'inconsistentValue' error is returned if this object is set to the default and other is set to a non-default value.")
tSapIngressFCQGrpBCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 21), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCQGrpBCast.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCQGrpBCast.setDescription("tSapIngressFCQGrpBCast specifies the tQosIngQGroupName. This object must be set along with tSapIngressFCBCastQueue object. An 'inconsistentValue' error is returned if this object is set to the default and other is set to a non-default value.")
tSapIngressFCQGrpUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 22), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCQGrpUnknown.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCQGrpUnknown.setDescription("tSapIngressFCQGrpUnknown specifies the tQosIngQGroupName. This object must be set along with tSapIngressFCUnknownQueue object. An 'inconsistentValue' error is returned if this object is set to the default and other is set to a non-default value.")
tSapIngressFCPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 23), TIngPolicerIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCPolicer.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCPolicer.setDescription('tSapIngressFCPolicer specifies the policer ID to be used for the normal traffic in this forwarding class.')
tSapIngressFCMCastPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 24), TIngPolicerIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCMCastPolicer.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCMCastPolicer.setDescription('tSapIngressFCMCastPolicer specifies the policer ID to be used for multicast in this forwarding class.')
tSapIngressFCBCastPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 25), TIngPolicerIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCBCastPolicer.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCBCastPolicer.setDescription('tSapIngressFCBCastPolicer specifies the policer ID to be used for broadcast traffic in this forwarding class.')
tSapIngressFCUnknownPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 26), TIngPolicerIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCUnknownPolicer.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCUnknownPolicer.setDescription('tSapIngressFCUnknownPolicer specifies the policer ID to be used for unknown traffic in this forwarding class.')
tSapIngressFCPlcrFPQGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCPlcrFPQGrp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCPlcrFPQGrp.setDescription("The value of tSapIngressFCPlcrFPQGrp specifies whether to use the specified policer defined in FP(forwading-plane) Queue group for this SAP. When tSapIngressFCPlcrFPQGrp is set to 'true', it specifies the FC to use the specific policer defined in the FP Queue Group instance attached to the SAP specified by sapIngressFPQGrp and sapIngressFPQGrpInstanceId. An 'inconsistentValue' error is returned if tSapIngressFCPlcrFPQGrp is set to a non-default value and an entry corresponding to the policer tSapIngressFCPolicer does not exist in Queue group attached at the FP.")
tSapIngressFCMCastPlcrFPQGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCMCastPlcrFPQGrp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCMCastPlcrFPQGrp.setDescription("The value of tSapIngressFCMCastPlcrFPQGrp specifies whether to use the specified multicast policer defined in FP(forwading-plane) Queue group for this SAP. When tSapIngressFCMCastPlcrFPQGrp is set to 'true', it specifies the FC to use the specific multicast policer defined in the FP Queue Group instance attached to the SAP specified by sapIngressFPQGrp and sapIngressFPQGrpInstanceId. An 'inconsistentValue' error is returned if tSapIngressFCMCastPlcrFPQGrp is set to a non-default value and an entry corresponding to the policer tSapIngressFCPolicer does not exist in Queue group attached at the FP.")
tSapIngressFCBCastPlcrFPQGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCBCastPlcrFPQGrp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCBCastPlcrFPQGrp.setDescription("The value of tSapIngressFCBCastPlcrFPQGrp specifies whether to use the specified broadcast policer defined in FP(forwading-plane) Queue group for this SAP. When tSapIngressFCBCastPlcrFPQGrp is set to 'true', it specifies the FC to use the specific broadcast policer defined in the FP Queue Group instance attached to the SAP specified by sapIngressFPQGrp and sapIngressFPQGrpInstanceId. An 'inconsistentValue' error is returned if tSapIngressFCBCastPlcrFPQGrp is set to a non-default value and an entry corresponding to the policer tSapIngressFCPolicer does not exist in Queue group attached at the FP.")
tSapIngressFCUnknownPlcrFPQGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCUnknownPlcrFPQGrp.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCUnknownPlcrFPQGrp.setDescription("The value of tSapIngressFCUnknownPlcrFPQGrp specifies whether to use the specified unknown policer defined in FP(forwading-plane) Queue group for this SAP. When tSapIngressFCUnknownPlcrFPQGrp is set to 'true', it specifies the FC to use the specific broadcast policer defined in the FP Queue Group instance attached to the SAP specified by sapIngressFPQGrp and sapIngressFPQGrpInstanceId. An 'inconsistentValue' error is returned if tSapIngressFCUnknownPlcrFPQGrp is set to a non-default value and an entry corresponding to the policer tSapIngressFCPolicer does not exist in Queue group attached at the FP.")
tSapIngressPrecTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8), )
if mibBuilder.loadTexts: tSapIngressPrecTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecTable.setDescription('This table maintains the mapping of a particular precedence value into a forwarding class')
tSapIngressPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressPrecValue"))
if mibBuilder.loadTexts: tSapIngressPrecEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecEntry.setDescription("Information about a particular sap-ingress policy's IP precedence values to forwarding class mappings. Entries are created and deleted by user. They have a presumed StorageType of nonVolatile.")
tSapIngressPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 1), TPrecValue())
if mibBuilder.loadTexts: tSapIngressPrecValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecValue.setDescription('Precedence value for which the mapping is done.')
tSapIngressPrecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecRowStatus.setDescription('Row Status for this mapping.')
tSapIngressPrecFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecFC.setDescription('tSapIngressPrecFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific precedence value i.e. tSapIngressPrecValue. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressPrecFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressPrecFCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecFCPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecFCPriority.setDescription('The priority to be assigned to the matching traffic.')
tSapIngressPrecLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressPrecLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecLastChanged.setDescription('timestamp of last change to this row in tSapIngressPrecTable.')
tSapIngressPrecHsmdaCntrOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 6), TIngressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecHsmdaCntrOvr.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressPrecHsmdaCntrOvr.setDescription('The value of the object tSapIngressPrecHsmdaCntrOvr specifies the counter to use for all the traffic that matches the specific precedence value i.e. tSapIngressPrecValue. A value of zero implies that the default counters should be used. This object is obsoleted in 10.0 Release.')
tSapIngressIPv6CriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9), )
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTable.setDescription("Information about all sap-ingress policies' ipv6-criteria entries.")
tSapIngressIPv6CriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaEntry.setDescription('Information about a particular ipv6-criteria entry for a sap-ingress policy. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tSapIngressIPv6CriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIndex.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIndex.setDescription('The value of the object tSapIngressIPv6CriteriaIndex specifies uniquely each entry in the policy.')
tSapIngressIPv6CriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaRowStatus.setDescription('The value of the object tSapIngressIPv6CriteriaRowStatus specifies the Row Status for the IPv6 Criteria entry.')
tSapIngressIPv6CriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDescription.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDescription.setDescription('The value of the object tSapIngressIPv6CriteriaDescription specifies an optional user provided description of this IPv6 criteria entry.')
tSapIngressIPv6CriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionFC.setDescription('The value of the object tSapIngressIPv6CriteriaActionFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific IPv6 criteria. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressIPv6CriteriaActionFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressIPv6CriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionPriority.setDescription("The value of the object tSapIngressIPv6CriteriaActionPriority specifies the priority for packets which match this entry's criteria. When set to 'default', the packet is sent to the queue from DSCP/dot1p/FC which matched the packet, using the priority from the DSCP/dot1p/FC which matched the packet.")
tSapIngressIPv6CriteriaSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 6), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpAddr.setDescription('The value of the object tSapIngressIPv6CriteriaSourceIpAddr specifies the IPv6 address to match with source-IPv6 of the packet.')
tSapIngressIPv6CriteriaSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 7), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpMask.setDescription('The value of the object tSapIngressIPv6CriteriaSourceIpMask specifies the prefix is the number of bits of the source IPv6 address to match.')
tSapIngressIPv6CriteriaDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 8), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpAddr.setDescription('The value of the object tSapIngressIPv6CriteriaDestIpAddr specifies the IPv6 address to match with destination-IPv6 of the packet.')
tSapIngressIPv6CriteriaDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 9), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpMask.setDescription('The value of the object tSapIngressIPv6CriteriaDestIpMask specifies the prefix is the number of bits of the destination IPv6 address to match.')
tSapIngressIPv6CriteriaNextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 10), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaNextHeader.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaNextHeader.setDescription('The value of the object tSapIngressIPv6CriteriaNextHeader specifies the Next Header to match. use -1 to disable matching by Next Header. Because the match criteria only pertains to the last next-header, the following values are not accepted: 0, 43, 44, 50, 51, and 60.')
tSapIngressIPv6CriteriaSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 11), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue1.setDescription('The value of the object tSapIngressIPv6CriteriaSourcePortValue1 specifies the TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPv6CriteriaSourcePortOperator.')
tSapIngressIPv6CriteriaSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 12), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue2.setDescription('The value of the object tSapIngressIPv6CriteriaSourcePortValue2 specifies TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPv6CriteriaSourcePortOperator.')
tSapIngressIPv6CriteriaSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 13), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortOperator.setDescription('The value of the object tSapIngressIPv6CriteriaSourcePortOperator specifies The operator specifies the manner in which tSapIngressIPv6CriteriaSourcePortValue1 and tSapIngressIPv6CriteriaSourcePortValue2 are to be used.')
tSapIngressIPv6CriteriaDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 14), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue1.setDescription('The value of the object tSapIngressIPv6CriteriaDestPortValue1 specifies the TCP/UDP port value1. The value of this object is used according to the description for tSapIngressIPv6CriteriaDestPortOperator.')
tSapIngressIPv6CriteriaDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue2.setDescription('The value of the object tSapIngressIPv6CriteriaDestPortValue2 specifies the TCP/UDP port value2. The value of this object is used according to the description for tSapIngressIPv6CriteriaDestPortOperator.')
tSapIngressIPv6CriteriaDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 16), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortOperator.setDescription('The value of the object tSapIngressIPv6CriteriaDestPortOperator specifies the manner in which tSapIngressIPv6CriteriaDestPortValue1 and tSapIngressIPv6CriteriaDestPortValue2 are to be used.')
tSapIngressIPv6CriteriaDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 17), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDSCP.setDescription('The value of the object tSapIngressIPv6CriteriaDSCP specifies the DSCP value to match in the packet')
tSapIngressIPv6CriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaLastChanged.setDescription('The value of the object indicates timestamp of last change to this row in tSapIngressIPv6CriteriaTable.')
tSapIngressIPv6CriteriaIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 31), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIpPrecValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIpPrecValue.setDescription('')
tSapIngressIPv6CriteriaIpPrecMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 32), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIpPrecMask.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIpPrecMask.setDescription('')
tSapIngressHsmdaQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10), )
if mibBuilder.loadTexts: tSapIngressHsmdaQueueTable.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueTable.setDescription("Information about all sap-ingress policies' HSMDA queues. This table is obsoleted in 10.0 release.")
tSapIngressHsmdaQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressHsmdaQueue"))
if mibBuilder.loadTexts: tSapIngressHsmdaQueueEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueEntry.setDescription('Information about a particular HSMDA queue for a sap-ingress policy. Entries are created by user.')
tSapIngressHsmdaQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 1), TIngressHsmdaQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tSapIngressHsmdaQueue.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueue.setDescription('The HSMDA queue ID is used as the secondary index to the table entry.')
tSapIngressHsmdaQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaQueueRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueRowStatus.setDescription('The value of tSapIngressHsmdaQueueRowStatus is used for the creation and deletion of entries in the tSapIngressHsmdaQueueTable.')
tSapIngressHsmdaQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressHsmdaQueueLastChanged.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueLastChanged.setDescription('The value of tSapIngressHsmdaQueueLastChanged indicates the timestamp of last change to this row in tSapIngressHsmdaQueueTable.')
tSapIngressHsmdaQueueCIRAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 4), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaQueueCIRAdaptn.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueCIRAdaptn.setDescription('The value of tSapIngressHsmdaQueueCIRAdaptn specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngressHsmdaQueuePIRAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 5), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaQueuePIRAdaptn.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueuePIRAdaptn.setDescription('The value of tSapIngressHsmdaQueuePIRAdaptn specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngressHsmdaQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 6), THsmdaPIRKRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaQueueAdminPIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueAdminPIR.setDescription('The value of tSapIngressHsmdaQueueAdminPIR specifies the administrative PIR specified by the user.')
tSapIngressHsmdaQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 7), THsmdaCIRKRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaQueueAdminCIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueAdminCIR.setDescription('The value of tSapIngressHsmdaQueueAdminCIR specifies the administrative CIR specified by the user.')
tSapIngressHsmdaQueueSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 8), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaQueueSlopePolicy.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueueSlopePolicy.setDescription('The value of tSapIngressHsmdaQueueSlopePolicy specifies the slope policy specified by the user.')
tSapIngressHsmdaQueuePoliced = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 10, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressHsmdaQueuePoliced.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressHsmdaQueuePoliced.setDescription("The value of tSapIngressHsmdaQueuePoliced specifies whether the out of profile traffic feeding into the physical queue instance should be dropped. When the value is 'true', out-of-profile packets are discarded. This policing function is different than the shaping function normally performed by the queues defined rate in that scheduling is not stopped for the queue when the rate is exceeded. Accordingly, tSapIngressHsmdaQueuePoliced overrides the bandwidth specified by the object tSapIngressHsmdaQueueAdminCIR.")
tSapIngressLspExpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11), )
if mibBuilder.loadTexts: tSapIngressLspExpTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpTable.setDescription('This table maintains the mappings of an Lsp Exp Bit value into a forwarding class')
tSapIngressLspExpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngressLspExpValue"))
if mibBuilder.loadTexts: tSapIngressLspExpEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpEntry.setDescription("Information about a particular sap-ingress policy's Lsp Exp Bit values to forwarding class mappings. Entries are created and deleted by user. They have a presumed StorageType of nonVolatile.")
tSapIngressLspExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11, 1, 1), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tSapIngressLspExpValue.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpValue.setDescription('The value of the object tSapIngressLspExpValue specifies the value for which the mapping is done.')
tSapIngressLspExpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressLspExpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpRowStatus.setDescription('The value of tSapIngressLspExpRowStatus specifies the Row Status for this mapping.')
tSapIngressLspExpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressLspExpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpLastChanged.setDescription('The value of tSapIngressLspExpLastChanged indicates the timestamp of last change to this row in tSapIngressLspExpTable.')
tSapIngressLspExpFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressLspExpFC.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpFC.setDescription('The value of the object tSapIngressLspExpFC specifies the forwarding class or the sub forwarding class to be used to classify all the traffic that matches the specific Lsp Exp value i.e. tSapIngressLspExpValue. Specification of a sub forwarding class is also allowed. The format of a sub forwarding class is the concatenation of the base forwarding class and a sub class identifier in the form base-fc-name[.sub-fc-name] To reference a sub forwarding class, the mapping of the sub forwarding class should be existing in this QoS policy. Unless tSapIngressLspExpFC is specified explicitly, this match will be ignored for classification purposes.')
tSapIngressLspExpFCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressLspExpFCPriority.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpFCPriority.setDescription('The value of the object tSapIngressLspExpFCPriority specifies the priority to be assigned to the matching traffic.')
tSapIngressLspExpHsmdaCntrOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 11, 1, 6), TIngressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressLspExpHsmdaCntrOvr.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngressLspExpHsmdaCntrOvr.setDescription('The value of the object tSapIngressPrecHsmdaCntrOvr specifies the counter to use for all the traffic that matches the specific Lsp Exp value i.e. tSapIngressLspExpValue. A value of zero implies that the default counters should be used. This object is obsoleted in 10.0 Release.')
tSapIngPolicerTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 85), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngPolicerTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerTableLastChanged.setDescription('tSapIngPolicerTableLastChanged indicates the timestamp of last change to the tSapIngPolicerTable.')
tSapIngPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12), )
if mibBuilder.loadTexts: tSapIngPolicerTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerTable.setDescription('tSapIngPolicerTable defines SAP Ingress Policer Table for providing, via SNMP, the capability of defining the policers. tSapIngPolicerTable holds a list of all the policers configured in the managed system. Policers must exist in this table before being referenced by the forwarding class mappings within the queue policy as defined in the tSapIngressFCTable.')
tSapIngPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "TIMETRA-QOS-MIB", "tSapIngPolicerId"))
if mibBuilder.loadTexts: tSapIngPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerEntry.setDescription('tSapIngPolicerEntry defines an entry in the tSapIngPolicerTable. Entries are created/deleted in this table by SNMP sets to tSapIngPolicerRowStatus.')
tSapIngPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tSapIngPolicerId.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerId.setDescription('tSapIngPolicerId defines the SAP Ingress Policer identifier. It identifies an sap-ingress policer in the managed system.')
tSapIngPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSapIngPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerRowStatus.setDescription('tSapIngPolicerRowStatus allows entries to be created and deleted in the tSapIngPolicerTable.')
tSapIngPolicerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngPolicerLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerLastChanged.setDescription('tSapIngPolicerLastChanged indicates the value of sysUpTime when the entry was last modified.')
tSapIngPolicerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerDescr.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerDescr.setDescription('tSapIngPolicerDescr specifies the description of the policer.')
tSapIngPolicerPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 5), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerPIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngPolicerCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 6), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapIngPolicerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerParent.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerParent.setDescription('tSapIngPolicerParent specifies the scheduler to which this queue would be feeding.')
tSapIngPolicerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 8), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerLevel.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerLevel.setDescription('tSapIngPolicerLevel specifies the level of priority while feeding the parent.')
tSapIngPolicerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 9), TPolicerWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerWeight.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerWeight.setDescription('tSapIngPolicerWeight specifies the weight that needs to be used by the scheduler to which this queue would be feeding.')
tSapIngPolicerAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 10), THPolPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerAdminPIR.setDescription('tSapIngPolicerAdminPIR specifies the administrative PIR specified by the user.')
tSapIngPolicerAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 11), THPolCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerAdminCIR.setDescription('tSapIngPolicerAdminCIR specifies the administrative CIR specified by the user.')
tSapIngPolicerStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 12), TmnxIngPolicerStatMode().clone('minimal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerStatMode.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerStatMode.setDescription('tSapIngPolicerStatMode specifies the mode of statistics collected by this policer.')
tSapIngPolicerMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 13), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerMBS.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerMBS.setDescription("The tSapIngPolicerMBS specifies the high priority 'violate' threshold of PIR leaky bucket of this policer.")
tSapIngPolicerHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 14), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerHiPrioOnly.setDescription("The tSapIngPolicerHiPrioOnly specifies the percentage of PIR leaky bucket's MBS (maximum burst size) of this policer that is reserved for high priority traffic.")
tSapIngPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 15), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerCBS.setDescription("The tSapIngPolicerCBS specifies the 'exceed' threshold of the CIR leaky bucket of this policer.")
tSapIngPolicerPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 16), TPerPacketOffset()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerPktOffset.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerPktOffset.setDescription('tSapIngPolicerPktOffset specifies the packet byte offset for addition of policing information by this policer.')
tSapIngPolicerAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerAdminPIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerAdminPIRPercent.setDescription("The administrative PIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapIngPolicerAdminPIRPercent is set to non-default value when the object tSapIngPolicerRateType is set to 'kbps'.")
tSapIngPolicerAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerAdminCIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerAdminCIRPercent.setDescription("The administrative CIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapIngPolicerAdminCIRPercent is set to non-default value when the object tSapIngPolicerRateType is set to 'kbps'.")
tSapIngPolicerRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 19), TPolicerRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerRateType.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerRateType.setDescription("The value of tSapIngPolicerRateType specifies the type of ingress policer rate. When the value of the object is set to 'kbps', the ingresss policer rates are specified in kbps. The objects tSapIngPolicerAdminPIRPercent and tSapIngPolicerAdminCIRPercent will be set to their default values. When the value of the object is set to 'percentOfLocalLimit', the ingress policer rates are specified in percentage. The objects tSapIngPolicerAdminPIR and tSapIngPolicerAdminCIR will be set to their default values.")
tSapIngPolicerSlopeStartDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerSlopeStartDepth.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerSlopeStartDepth.setDescription('The value of tSapIngPolicerSlopeStartDepth specifies the percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tSapIngPolicerSlopeMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerSlopeMaxDepth.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerSlopeMaxDepth.setDescription('The value of tSapIngPolicerSlopeMaxDepth specifies the percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tSapIngPolicerSlopeMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerSlopeMaxProb.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerSlopeMaxProb.setDescription('The value of tSapIngPolicerSlopeMaxProb specifies the drop probability, as a percentage, when the queue depth reaches tSapIngPolicerSlopeMaxDepth. The drop increases steadily from 0 at the tSapIngPolicerSlopeStartDepth up to the tSapIngPolicerSlopeMaxProb at the tSapIngPolicerSlopeMaxDepth.')
tSapIngPolicerSlopeMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 23), TmnxSlopeMap().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerSlopeMap.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerSlopeMap.setDescription('The value of tSapIngPolicerSlopeMap specifies the slope map to be used with this policer.')
tSapIngPolicerAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 24), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerAdvCfgPolicy.setDescription('The value of tSapIngPolicerAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this policer.')
tSapIngPolicerProfileCapped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 12, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngPolicerProfileCapped.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicerProfileCapped.setDescription("The value of tSapIngPolicerProfileCapped specifies how the explicit in-profile and undetermined profile traffic should be handled at the ingress policer. When the value of tSapIngPolicerProfileCapped is set to 'true', both explicit in-profile and undetermined profile traffic is honored up to CIR, above which it is marked as out-of-profile. If CIR is set to zero, then all explicit in-profile and undetermined profile packets, along with the explicit out-of-profile packets are marked as out-of-profile. The default behavior when tSapIngPolicerProfileCapped is set to 'false' is to ignore the CIR output state when an explicit in-profile packet is handled by an ingress policer.")
tSapIngPolicyNameTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 95), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngPolicyNameTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicyNameTableLastChgd.setDescription('The value of tSapIngPolicyNameTableLastChgd indicates the sysUpTime at the time of the last modification of tSapIngPolicyNameTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tSapIngPolicyNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 13), )
if mibBuilder.loadTexts: tSapIngPolicyNameTable.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicyNameTable.setDescription('A table that contains SAP ingress policy name information. Entries are created automatically by the system when tSapIngressPolicyName object is set for the SAP ingress policy.')
tSapIngPolicyNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 13, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapIngressPolicyName"))
if mibBuilder.loadTexts: tSapIngPolicyNameEntry.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicyNameEntry.setDescription('Basic information about a specific SAP ingress policy name.')
tSapIngPolicyNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 13, 1, 1), TSapIngressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngPolicyNameId.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicyNameId.setDescription('The value of the object tSapIngPolicyNameId specifies the policy name associated with this SAP ingress policy.')
tSapIngPolicyNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 13, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngPolicyNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicyNameRowStatus.setDescription('This value of the object tSapIngPolicyNameRowStatus specifies the status of this row.')
tSapIngPolicyNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 13, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngPolicyNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngPolicyNameLastChanged.setDescription('The value of tSapIngPolicyNameLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tSapEgressTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1), )
if mibBuilder.loadTexts: tSapEgressTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressTable.setDescription('information about all sap-egress policies.')
tSapEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"))
if mibBuilder.loadTexts: tSapEgressEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressEntry.setDescription('Information about a particular sap-egress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. the default sap-egress policy (1) cannot be changed or destroyed. ')
tSapEgressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 1), TSapEgressPolicyID())
if mibBuilder.loadTexts: tSapEgressIndex.setStatus('current')
if mibBuilder.loadTexts: tSapEgressIndex.setDescription('the sap-egress policy ID is used as index for the table.')
tSapEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressRowStatus.setDescription("Row Status of this policy's entry.")
tSapEgressScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressScope.setStatus('current')
if mibBuilder.loadTexts: tSapEgressScope.setDescription('scope of the sap-egress policy.')
tSapEgressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDescription.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDescription.setDescription('user-supplied description of this sap-egress policy.')
tSapEgressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressLastChanged.setDescription('timestamp of last change to this row in tSapEgressTable.')
tSapEgressHsmdaPacketOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 6), TEgressHsmdaPerPacketOffset()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaPacketOffset.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaPacketOffset.setDescription('The value of tSapEgressHsmdaPacketOffset specifies the value, in bytes, of the adjustment to make to the size of each packet for HSMDA queue accounting.')
tSapEgressMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 7), TMatchCriteria()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressMatchCriteria.setStatus('current')
if mibBuilder.loadTexts: tSapEgressMatchCriteria.setDescription("The value of tSapEgressMatchCriteria indicates which type of match criteria the policy should use. When tSapEgressMatchCriteria has a value of 'ip', the sap-egress policy looks for match entries in tSapIngressIPCriteriaTable or tSapIngressIPv6CriteriaTable. The value of tSapIngressMatchCriteria is set when the first match criteria table entry is created. The value of tSapEgressMatchCriteria is set to 'none' when the last criteria table entry is removed.")
tSapEgressHsmdaWrrPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaWrrPolicy.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaWrrPolicy.setDescription('The value of tSapEgressHsmdaWrrPolicy specifies the HSMDA Weighted Round Robin (WRR) scheduling policy to use.')
tSapEgressHsmdaLowBrstMaxCls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaLowBrstMaxCls.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaLowBrstMaxCls.setDescription('The value of tSapEgressHsmdaLowBrstMaxCls specifies which class should use the low priority burst threshold. All classes starting from 1, up to and including that specified by tSapEgressHsmdaLowBrstMaxCls use the low priority burst threshold. All classes greater than the value of tSapEgressHsmdaLowBrstMaxCls up to and including class 8 use the high priority burst threshold.')
tSapEgressPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 10), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressPolicyName.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPolicyName.setDescription('The value of tSapEgressPolicyName specifies the name to associate with this policy.')
tSapEgressEthernetCtag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressEthernetCtag.setStatus('current')
if mibBuilder.loadTexts: tSapEgressEthernetCtag.setDescription("The value of tSapEgressEthernetCtag specifies the tag from which the dot1p and DE (Drop-Eligible) values will be drawn to be used by all tSapEgressDot1pEntry objects related to this policy. The value 'true' specifies that the top customer tag will be used for egress reclassification based on dot1p criteria. The value 'false' specifies that a service delimiting tag will be used for egress reclassification based on dot1p criteria.")
tSapEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2), )
if mibBuilder.loadTexts: tSapEgressQueueTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueTable.setDescription("information about all sap-egress policies' queues.")
tSapEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgressQueueIndex"))
if mibBuilder.loadTexts: tSapEgressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueEntry.setDescription('Information about a particular sap-egress queue. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tSapEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tSapEgressQueueIndex.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueIndex.setDescription('the number of a queue. zero is not allowed. for sap-egress, only three queues are allowed, so the queue index range is restricted.')
tSapEgressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueRowStatus.setDescription('Row Status of the entry.')
tSapEgressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueParent.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
tSapEgressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
tSapEgressQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding to.')
tSapEgressQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCIRLevel.setDescription("This specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tSapEgressQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding to.')
tSapEgressQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueExpedite.setDescription("tSapEgressQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.")
tSapEgressQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 9), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCBS.setDescription('The amount of reserved buffer space (in kilo bytes) for the queue.')
tSapEgressQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 10), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueMBS.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressQueueMBS.setDescription('The maximum amount of buffer space (in kilo bytes) allowed for the queue. This object has been replaced with tSapEgressQueueMBSBytes object.')
tSapEgressQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 11), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueHiPrioOnly.setDescription('The percentage of buffer space for the queue, used exclusively by high priority packets.')
tSapEgressQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 12), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapEgressQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapEgressQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 14), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueAdminPIR.setDescription('The administrative PIR specified by the user.')
tSapEgressQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 15), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueAdminCIR.setDescription('The administrative CIR specified by the user.')
tSapEgressQueueOperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 16), TPIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueOperPIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressQueueOperPIR.setDescription('The administrative PIR specified by the user.')
tSapEgressQueueOperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 17), TCIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueOperCIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressQueueOperCIR.setDescription('The operational value derived by computing the CIR value from the administrative CIR and PIR values and their corresponding adaptation rules.')
tSapEgressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueLastChanged.setDescription('timestamp of last change to this row in tSapEgressQueueTable.')
tSapEgressQueueUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueUsePortParent.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueUsePortParent.setDescription("The value of the object tSapEgressQueueUsePortParent specifies whether this queue is parented by a port-level scheduler. When the value is 'true', this SAP egress queue is parented by a port-level scheduler. This object is mutually exclusive with tSapEgressQueueParent. Only one kind of parent is allowed.")
tSapEgressQueuePortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 20), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortLvl.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortLvl.setDescription('The value of the object tSapEgressQueuePortLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tSapEgressQueuePortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 21), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortWght.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortWght.setDescription('The value of the object tSapEgressQueuePortWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tSapEgressQueuePortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 22), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortCIRLvl.setDescription('The value of the object tSapEgressQueuePortCIRLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tSapEgressQueuePortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 23), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortCIRWght.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortCIRWght.setDescription('The value of the object tSapEgressQueuePortCIRWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tSapEgressQueuePortAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortAvgOverhead.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePortAvgOverhead.setDescription('The value of tSapEgressQueuePortAvgOverhead specifies the encapsulation overhead, in hundredths of a percent, used to translate packet-based rate to frame-based rate and vice versa.')
tSapEgressQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 25), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePoolName.setDescription('The value of tSapEgressQueuePoolName specifies the name of the pool to be applied for SAP egress queue.')
tSapEgressQueueXPWredQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueXPWredQ.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueXPWredQ.setDescription('The value of tSapEgressQueueXPWredQ specifies whether to alter the generic pool association of the queue for the purpose of allowing queue-specific WRED slopes with minimal provisioning.')
tSapEgressQueueXPWredQSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 27), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueXPWredQSlope.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueXPWredQSlope.setDescription("The value of tSapEgressQueueXPWredQSlope specifies the name of the slope-policy to be applied for SAP egress queue. An 'inconsistentValue' error is returned when this object is set to a non-default value when tSapEgressQueueXPWredQ is set to 'false'.")
tSapEgressQueueMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 28), TBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueMBSBytes.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueMBSBytes.setDescription('The maximum amount of buffer space (in bytes) allowed for the queue.')
tSapEgressQueueBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 29), TBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueBurstLimit.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueBurstLimit.setDescription('The value of tSapIngressQueueBurstLimit specifies the explicit shaping burst size of a queue.')
tSapEgressQueuePktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 30), TEgressQPerPacketOffset()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePktOffset.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueuePktOffset.setDescription('The value of tSapEgressQueuePktOffset specifies the per packet byte offset for this queue.')
tSapEgressQueueAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminPIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueAdminPIRPercent.setDescription("The administrative PIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapEgressQueueAdminPIRPercent is set to non-default value when the object tSapEgressQueueRateType is set to 'kbps'.")
tSapEgressQueueAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminCIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueAdminCIRPercent.setDescription("The administrative CIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapEgressQueueAdminCIRPercent is set to non-default value when the object tSapEgressQueueRateType is set to 'kbps'.")
tSapEgressQueueRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 33), TBWRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueRateType.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueRateType.setDescription("The value of tSapEgressQueueRateType specifies the type of Egress Queue rate. When the value of the object is set to 'kbps', the ingresss queue rates are specified in kbps. The objects tSapEgressQueueAdminCIRPercent and tSapEgressQueueAdminPIRPercent will be set to their default values. When the value of the object is set to either 'percentOfPortLimit' or 'percentOfLocalLimit', the egress queue rates are specified in percentage. The objects tSapEgressQueueAdminCIR and tSapEgressQueueAdminPIR will be set to their default values.")
tSapEgressQueueAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 34), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueAdvCfgPolicy.setDescription('The value of tSapEgressQueueAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this queue.')
tSapEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3), )
if mibBuilder.loadTexts: tSapEgressFCTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCTable.setDescription(' ')
tSapEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgressFCName"))
if mibBuilder.loadTexts: tSapEgressFCEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCEntry.setDescription("Information about a particular sap-egress policy's forwarding class mappings to queues and dot1p values. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ")
tSapEgressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tSapEgressFCName.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCName.setDescription('forwarding class name.')
tSapEgressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCRowStatus.setDescription('Row Status for this queue.')
tSapEgressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 3), TEgressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCQueue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCQueue.setDescription('The queue to use for packets in this forwarding class. When tSapEgressFCQGrp is set to its default value, tSapEgressFCQueue represents the local queue to which traffic will be forwarded. When tSapEgressFCQGrp is set to a non-default value, tSapEgressFCQueue represents the queue within the specified queue-group to which traffic will be forwarded.')
tSapEgressFCDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 4), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1PValue.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressFCDot1PValue.setDescription('The value of tSapEgressFCDot1PValue specifies 802.1p value to use for packets in this forwarding class. This object has been replaced by tSapEgressFCDot1PInProfile and tSapEgressFCDot1POutProfile objects.')
tSapEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCLastChanged.setDescription('timestamp of last change to this row in tSapEgressFCTable.')
tSapEgressFCHsmdaQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 6), TEgressHsmdaQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCHsmdaQueue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCHsmdaQueue.setDescription('The HSMDA queue to use for packets in this forwarding class. This mapping will be used when the SAP is on a HSMDA MDA.')
tSapEgressFCDot1PHsmdaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1PHsmdaProfile.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressFCDot1PHsmdaProfile.setDescription('The value of the object tSapEgressFCDot1PHsmdaProfile specifies if the system will perform egress profiling on HSMDA queues or not. The tSapEgressFCDot1PHsmdaProfile object is obsoleted in 9.0 Release.')
tSapEgressFCDot1PInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 8), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1PInProfile.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCDot1PInProfile.setDescription("The value of tSapEgressFCDot1PInProfile specifies 802.1p value to set for in-profile frames in this forwarding class. An inconsistentValue error is returned if this object is set to any value other than '-1', when tSapEgressFCDot1POutProfile object is set to '-1'.")
tSapEgressFCDot1POutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 9), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1POutProfile.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCDot1POutProfile.setDescription("The value of tSapEgressFCDot1POutProfile specifies 802.1p value to set for out-profile frames in this forwarding class. An inconsistentValue error is returned if this object is set to any value other than '-1', when tSapEgressFCDot1PInProfile object is set to '-1'.")
tSapEgressFCForceDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 10), TDEValue().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCForceDEValue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCForceDEValue.setDescription("The value of tSapEgressFCForceDEValue specifies the DE value to set for all the frames of this forwarding class regardless of frame's profile status. An inconsistentValue error is returned if this object is set to any value other than '-1', when tSapEgressFCDEMark object is set to 'false'.")
tSapEgressFCDEMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDEMark.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCDEMark.setDescription("The value of tSapEgressFCDEMark specifies whether to set DE value in the frames of this forwarding class. An inconsistentValue error is returned if this object is set to 'false' when tSapEgressFCForceDEValue object is not set to '-1'.")
tSapEgressFCInProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 12), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCInProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCInProfDscp.setDescription('The value of tSapEgressFCInProfDscp specifies the DSCP name to set for in-profile frames in this forwarding class. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp must be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec are reset to default values when tSapEgressFCInProfDscp is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfPrec object or tSapEgressFCOutProfPrec to a value other than their default values.')
tSapEgressFCOutProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 13), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCOutProfDscp.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCOutProfDscp.setDescription('The value of tSapEgressFCOutProfDscp specifies the DSCP name to set for out-profile frames in this forwarding class. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp must be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec are reset to default values when tSapEgressFCOutProfDscp is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfPrec object or tSapEgressFCOutProfPrec to a value other than their default values.')
tSapEgressFCInProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 14), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCInProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCInProfPrec.setDescription('The value of tSapEgressFCInProfPrec specifies the precedence value to set for in-profile frames in this forwarding class. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec must be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp are reset to default values when tSapEgressFCOutProfPrec is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfDscp object or tSapEgressFCOutProfDscp to a value other than their default values.')
tSapEgressFCOutProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 15), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCOutProfPrec.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCOutProfPrec.setDescription('The value of tSapEgressFCOutProfPrec specifies the precedence value to set for out-profile frames in this forwarding class. The values of tSapEgressFCInProfPrec and tSapEgressFCOutProfPrec must be be set to either the default or non-default values for both. An inconsistentValue error is returned if one object is set to the default and other is set to a non-default value. The values of tSapEgressFCInProfDscp and tSapEgressFCOutProfDscp are reset to default values when tSapEgressFCOutProfPrec is set to any value other than default. An inconsistentValue error is returned if this object is set to any value other than its default value when setting tSapEgressFCInProfDscp object or tSapEgressFCOutProfDscp to a value other than their default values.')
tSapEgressFCQGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 16), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCQGrp.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCQGrp.setDescription('The value of tSapEgressFCQGrp specifies the tQosEgrQGroupName. When set to a non-default value, this indicates the name of the queue-group to which traffic will be forwarded.')
tSapEgressFCPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 17), TEgrPolicerIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCPolicer.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCPolicer.setDescription("The value of tSapEgressFCPolicer specifies the SAP Egress Policer identifier. If a corresponding Sap Egress Policer Id does not exist in tSapEgrPolicerTable, an 'inconsistentValue' error will be returned. When tSapEgressFCPolicer is set to its default value, then traffic for this forwarding class will not use policers. When tSapEgressFCPolicer is set to a non-default value, and tSapEgressFCQGrp is set to default, and tSapEgressFCQueue is set to default, then traffic will use the given policer, and then feed into a system determined queue-group queue. When tSapEgressFCPolicer is set to a non-default value, and tSapEgressFCQGrp is set to a non-default value, and tSapEgressFCQueue is set to default, then traffic will use the given policer, and then feed into a queue within the given queue-group according to the appropriate tQosEgrQGroupFCEntry. When tSapEgressFCPolicer is set to a non-default value, and tSapEgressFCQGrp is set to a non-default value, and tSapEgressFCQueue is set to a non-default value, then trafifc will use the given policer, and then feed into the given queue within the given queue-group. When tSapEgressFCPolicer is set to a non-default value, and tSapEgressFCQGrp is set its default value, and tSapEgressFCQueue is set to a non-default value, then trafifc will use the given policer, and then feed into the given local queue.")
tSapEgressFCQGrpFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 18), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCQGrpFC.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCQGrpFC.setDescription("The value of tSapEgressFCQGrpFC, when specified, will replace the forwarding class derived from ingress as the forwarding class to use inside the egress queue group. tSapEgressFCQGrpFC is only allowed to be used in conjunction with egress policers, and is mutually exclusive with direct queue-group queue mappings. An 'inconsistentValue' error is returned if tSapEgressFCQGrpFC is set to a non-default value when tSapEgressFCPolicer is set to default.")
tSapEgressHsmdaQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4), )
if mibBuilder.loadTexts: tSapEgressHsmdaQueueTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueTable.setDescription("Information about all sap-egress policies' HSMDA queues.")
tSapEgressHsmdaQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgressHsmdaQueue"))
if mibBuilder.loadTexts: tSapEgressHsmdaQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueEntry.setDescription('Information about a particular HSMDA queue for a sap-egress policy. Entries are created by user.')
tSapEgressHsmdaQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 1), TEgressHsmdaQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tSapEgressHsmdaQueue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueue.setDescription('The HSMDA queue ID is used as the secondary index to the table entry.')
tSapEgressHsmdaQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueRowStatus.setDescription('The value of tSapEgressHsmdaQueueRowStatus is used for the creation and deletion of entries in the tSapEgressHsmdaQueueTable.')
tSapEgressHsmdaQueueCIRAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 3), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueCIRAdaptn.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueCIRAdaptn.setDescription('The value of tSapEgressHsmdaQueueCIRAdaptn specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset. This object is obsoleted in 10.0 Release.')
tSapEgressHsmdaQueuePIRAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 4), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueuePIRAdaptn.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueuePIRAdaptn.setDescription('The value of tSapEgressHsmdaQueuePIRAdaptn specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapEgressHsmdaQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 5), THsmdaPIRKRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueAdminPIR.setDescription('The value of tSapEgressHsmdaQueueAdminPIR specifies the administrative PIR specified by the user.')
tSapEgressHsmdaQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 6), THsmdaCIRKRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueAdminCIR.setStatus('obsolete')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueAdminCIR.setDescription('The value of tSapEgressHsmdaQueueAdminCIR specifies the administrative CIR specified by the user. This object is obsoleted in 10.0 Release.')
tSapEgressHsmdaQueueSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 7), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueSlopePolicy.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueSlopePolicy.setDescription('The value of tSapEgressHsmdaQueueSlopePolicy specifies the slope policy specified by the user.')
tSapEgressHsmdaQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueLastChanged.setDescription('The value of tSapEgressHsmdaQueueLastChanged indicates the timestamp of last change to this row in tSapEgressHsmdaQueueTable.')
tSapEgressHsmdaQueueWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 9), THsmdaWrrWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueWrrWeight.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueWrrWeight.setDescription('The value of tSapEgressHsmdaQueueWrrWeight specifies the weight with which this queue should parent into the HSMDA scheduler, provided it is not superseded by the Weighted Round Robin (WRR) policy. The weight of each queue determines how much bandwidth that queue gets out of the total rate for the scheduling class.')
tSapEgressHsmdaQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 10), THSMDABurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueMBS.setDescription('The value of tSapEgressHsmdaQueueMBS specifies the maximum amount of buffer space (in bytes) allowed for this HSMDA queue.')
tSapEgressHsmdaQueueBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 4, 1, 11), THSMDAQueueBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressHsmdaQueueBurstLimit.setStatus('current')
if mibBuilder.loadTexts: tSapEgressHsmdaQueueBurstLimit.setDescription('The value of tSapEgressHsmdaQueueBurstLimit specifies the explicit shaping burst size of the queue.')
tSapEgressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5), )
if mibBuilder.loadTexts: tSapEgressDSCPTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCPTable.setDescription('a list of all DSCP entries for all sap-egress policies.')
tSapEgressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgressDSCP"))
if mibBuilder.loadTexts: tSapEgressDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCPEntry.setDescription('Information about a particular DSCP entry for a sap-egress policy. Entries are created by user. Entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. in the event that one policy has multiple entries, and the tSapEgressDSCP values are the same, only one queue will be created (the queue for the lexicographically first tSapEgressDSCP). ')
tSapEgressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tSapEgressDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCP.setDescription('')
tSapEgressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCPRowStatus.setDescription('The value of tSapEgressDSCPRowStatus controls the creation/deletion of rows in this table.')
tSapEgressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressDSCPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCPLastChanged.setDescription('The value of tSapEgressDSCPLastChanged indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tSapEgressDSCPHsmdaCntrOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5, 1, 4), TEgressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDSCPHsmdaCntrOverride.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCPHsmdaCntrOverride.setDescription('The value of the object tSapEgressDSCPHsmdaCntrOverride specifies the counter to use for all the traffic that matches the specific DSCP i.e. tSapEgressDSCP. A value of zero implies that the default counters should be used.')
tSapEgressDSCPfc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5, 1, 5), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDSCPfc.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCPfc.setDescription('The value of tSapEgressDSCPfc, when specified, will overwrite the forwarding class derived from ingress. The new forwarding class is used for egress remarking and queue mapping decisions.')
tSapEgressDSCPprofile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 5, 1, 6), TProfileOrNone().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDSCPprofile.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDSCPprofile.setDescription('The value of tSapEgressDSCPprofile, when provided, specifies the egress classification rule that will overwrite the profile of the packet derived from the ingress. The new profile value is used for egress remarking and queue congestion behavior.')
tSapEgressPrecTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6), )
if mibBuilder.loadTexts: tSapEgressPrecTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecTable.setDescription('This table maintains the mapping of a particular precedence value into a forwarding class')
tSapEgressPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgressPrecValue"))
if mibBuilder.loadTexts: tSapEgressPrecEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecEntry.setDescription("Information about a particular sap-egress policy's IP precedence values to forwarding class mappings. Entries are created and deleted by user. They have a presumed StorageType of nonVolatile.")
tSapEgressPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6, 1, 1), TPrecValue())
if mibBuilder.loadTexts: tSapEgressPrecValue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecValue.setDescription('The value of tSapEgressPrecValue indicates the precedence value for which the mapping is done. It is used as a secondary index for tSapEgressPrecTable.')
tSapEgressPrecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressPrecRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecRowStatus.setDescription('The value of tSapEgressPrecRowStatus controls the creation/deletion of rows in this table.')
tSapEgressPrecLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressPrecLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecLastChanged.setDescription('The value of tSapEgressPrecLastChanged indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tSapEgressPrecHsmdaCntrOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6, 1, 4), TEgressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressPrecHsmdaCntrOverride.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecHsmdaCntrOverride.setDescription('The value of tSapEgressPrecHsmdaCntrOverride specifies the counter to use for all the traffic that matches the specific precedence value i.e. tSapEgressPrecValue. A value of zero implies that the default counters should be used.')
tSapEgressPrecFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6, 1, 5), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressPrecFC.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecFC.setDescription('The value of tSapEgressPrecFC, when specified, will overwrite the forwarding class derived from ingress. The new forwarding class is used for egress remarking and queue mapping decisions.')
tSapEgressPrecProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 6, 1, 6), TProfileOrNone().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressPrecProfile.setStatus('current')
if mibBuilder.loadTexts: tSapEgressPrecProfile.setDescription('The value of tSapEgressPrecProfile, when provided, specifies the egress classification rule that will overwrite the profile of the packet derived from the ingress. The new profile value is used for egress remarking and queue congestion behavior.')
tSapEgrIPCritTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7), )
if mibBuilder.loadTexts: tSapEgrIPCritTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritTable.setDescription('This table maintains the entries for matching criteria for IP packets on egress. In release 10.0 and higher, this table can also contain IPv6 criteria.')
tSapEgrIPCritEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgrIPCritAddrType"), (0, "TIMETRA-QOS-MIB", "tSapEgrIPCritIndex"))
if mibBuilder.loadTexts: tSapEgrIPCritEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritEntry.setDescription('Information about a particular egress IP or IPv6 matching criteria entry. Entries are created and deleted by user. They have a presumed StorageType of nonVolatile.')
tSapEgrIPCritAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 1), InetAddressType().clone('ipv4'))
if mibBuilder.loadTexts: tSapEgrIPCritAddrType.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritAddrType.setDescription('The value of tSapEgrIPCritAddrType specifies the index address type this entry should match against.')
tSapEgrIPCritIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tSapEgrIPCritIndex.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritIndex.setDescription('The value of tSapEgrIPCritIndex specifies the index for a sap-egress IP or IPv6 criteria entry.')
tSapEgrIPCritRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritRowStatus.setDescription('The value of tSapEgrIPCritRowStatus is used for the creation and deletion of sap-egress IP or IPv6 criteria entries.')
tSapEgrIPCritLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrIPCritLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritLastChanged.setDescription('The value of tSapEgrIPCritLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tSapEgrIPCritDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDescription.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDescription.setDescription('The value of tSapEgrIPCritDescription specifies a description of the sap-egress IP or IPv6 criteria entry.')
tSapEgrIPCritActionHsmdaCntrOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 6), TEgressHsmdaCounterIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritActionHsmdaCntrOvr.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritActionHsmdaCntrOvr.setDescription('The value of the object tSapEgrIPCritActionHsmdaCntrOvr specifies the Hsmda counter to use for matching packets. This value will be ignored when the sap-egress policy specified by tSapEgressIndex, is applied to a SAP on a non-Hsmda MDA type. A value of zero implies that the default counters should be used.')
tSapEgrIPCritSourceIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 7), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritSourceIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritSourceIpAddrType.setDescription("The value of tSapEgrIPCritSourceIpAddrType specifies the address type of tSapEgrIPCritSourceIpAddr. If the value of this object is not 'none', it must have the same value as tSapEgrIPCritAddrType.")
tSapEgrIPCritSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritSourceIpAddr.setDescription('The value of tSapEgrIPCritSourceIpAddr specifies the IP or IPv6 address to match with source-IP of the packet.')
tSapEgrIPCritSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 9), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritSourceIpMask.setDescription('The value of tSapEgrIPCritSourceIpMask specifies the number of bits of the source IP or IPv6 address to match.')
tSapEgrIPCritDestIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 10), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDestIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDestIpAddrType.setDescription("The value of tSapEgrIPCritDestIpAddrType specifies the address type of tSapEgrIPCritDestIpAddr. If the value of this object is not 'none', it must have the same value as tSapEgrIPCritAddrType.")
tSapEgrIPCritDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 11), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDestIpAddr.setDescription('The value of tSapEgrIPCritDestIpAddr specifies the IP or IPv6 address to match with destination-IP of the packet.')
tSapEgrIPCritDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 12), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDestIpMask.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDestIpMask.setDescription('The value of tSapEgrIPCritDestIpMask specifies the number of bits of the destination IP or IPv6 address to match.')
tSapEgrIPCritProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 13), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritProtocol.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritProtocol.setDescription("The value of tSapEgrIPCritProtocol specifies the IP protocol or IPv6 next-header to match. The value '-1' is used to disable matching by IP protocol or IPv6 next-header. When this value specifies an IPv6 next-header, since the match criteria only pertains to the last next-header, the following values are not accepted: 0, 43, 44, 50, 51, and 60.")
tSapEgrIPCritSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 14), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritSourcePortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritSourcePortValue1.setDescription('The value of tSapEgrIPCritSourcePortValue1 specifies the first TCP/UDP source port value. The value of this object is used according to the value of tSapEgrIPCritSourcePortOperator.')
tSapEgrIPCritSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritSourcePortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritSourcePortValue2.setDescription('The value of tSapEgrIPCritSourcePortValue2 specifies the second TCP/UDP source port value. The value of this object is used according to the value of tSapEgrIPCritSourcePortOperator.')
tSapEgrIPCritSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 16), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritSourcePortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritSourcePortOperator.setDescription('The value of tSapEgrIPCritSourcePortOperator specifies the manner in which tSapEgrIPCritSourcePortValue1 and tSapEgrIPCritSourcePortValue2 are to be used.')
tSapEgrIPCritDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 17), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDestPortValue1.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDestPortValue1.setDescription('The value of tSapEgrIPCritDestPortValue1 specifies the first TCP/UDP destination port value. The value of this object is used according to the value of tSapEgrIPCritDestPortOperator.')
tSapEgrIPCritDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 18), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDestPortValue2.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDestPortValue2.setDescription('The value of tSapEgrIPCritDestPortValue2 specifies the second TCP/UDP destination port value. The value of this object is used according to the value of tSapEgrIPCritDestPortOperator.')
tSapEgrIPCritDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 19), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDestPortOperator.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDestPortOperator.setDescription('The value of tSapEgrIPCritDestPortOperator specifies the manner in which tSapEgrIPCritDestPortValue1 and tSapEgrIPCritDestPortValue2 are to be used.')
tSapEgrIPCritDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 20), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritDSCP.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritDSCP.setDescription('The value of tSapEgrIPCritDSCP specifies the DSCP value to match in the packet')
tSapEgrIPCritFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 21), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritFragment.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritFragment.setDescription("The value of tSapEgrIPCritFragment specifies fragmented packet matching. If the value is 'true', only fragmented packets match. If the value is 'false', only non-fragmented packets match. If the value is 'off', all packets match regardless. This field is only relevant for ipv4. An inconsistentValue error is returned when the value of tSapEgrIPCritFragment is not 'off' and the value of tSapEgrIPCritAddrType is not 'ipv4'.")
tSapEgrIPCritActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 22), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritActionFC.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritActionFC.setDescription("tSapEgrIPCritActionFC specifies the forwarding class to be used to classify all the traffic that matches the specific IP or IPv6 criteria. The value ''H indicates that the FC is derived from ingress classification and profiling functions.")
tSapEgrIPCritActionProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 7, 1, 23), TProfileOrNone().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrIPCritActionProfile.setStatus('current')
if mibBuilder.loadTexts: tSapEgrIPCritActionProfile.setDescription('tSapEgrIPCritActionProfile specifies the profile of the traffic that matches the specific IP or IPv6 criteria. The value none indicates that the profile is derived from ingress classification and profiling functions.')
tSapEgrPolicerTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 86), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrPolicerTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerTableLastChanged.setDescription('tSapEgrPolicerTableLastChanged indicates the timestamp of last change to the tSapEgrPolicerTable.')
tSapEgrPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8), )
if mibBuilder.loadTexts: tSapEgrPolicerTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerTable.setDescription('tSapEgrPolicerTable defines SAP Egress Policer Table for providing, via SNMP, the capability of defining the policers. tSapEgrPolicerTable holds a list of all the policers configured in the managed system. Policers must exist in this table before being referenced by the forwarding class mappings within the queue policy as defined in the tSapEgressFCTable.')
tSapEgrPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgrPolicerId"))
if mibBuilder.loadTexts: tSapEgrPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerEntry.setDescription('tSapEgrPolicerEntry defines an entry in the tSapEgrPolicerTable. Entries are created/deleted in this table by SNMP sets to tSapEgrPolicerRowStatus.')
tSapEgrPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 1), TEgrPolicerId())
if mibBuilder.loadTexts: tSapEgrPolicerId.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerId.setDescription('tSapEgrPolicerId defines the SAP Egress Policer identifier. It identifies an sap-egress policer in the managed system.')
tSapEgrPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSapEgrPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerRowStatus.setDescription('tSapEgrPolicerRowStatus allows entries to be created and deleted in the tSapEgrPolicerTable.')
tSapEgrPolicerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrPolicerLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerLastChanged.setDescription('tSapEgrPolicerLastChanged indicates the value of sysUpTime when the entry was last modified.')
tSapEgrPolicerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerDescr.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerDescr.setDescription('tSapEgrPolicerDescr specifies the description of the policer.')
tSapEgrPolicerPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 5), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerPIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapEgrPolicerCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 6), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tSapEgrPolicerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerParent.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerParent.setDescription('tSapEgrPolicerParent specifies the scheduler to which this queue would be feeding.')
tSapEgrPolicerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 8), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerLevel.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerLevel.setDescription('tSapEgrPolicerLevel specifies the level of priority while feeding the parent.')
tSapEgrPolicerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 9), TPolicerWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerWeight.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerWeight.setDescription('tSapEgrPolicerWeight specifies the weight that needs to be used by the scheduler to which this queue would be feeding.')
tSapEgrPolicerAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 10), THPolPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerAdminPIR.setDescription('tSapEgrPolicerAdminPIR specifies the administrative PIR specified by the user.')
tSapEgrPolicerAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 11), THPolCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerAdminCIR.setDescription('tSapEgrPolicerAdminCIR specifies the administrative CIR specified by the user.')
tSapEgrPolicerStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 12), TmnxEgrPolicerStatMode().clone('minimal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerStatMode.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerStatMode.setDescription('tSapEgrPolicerStatMode specifies the mode of statistics collected by this policer.')
tSapEgrPolicerMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 13), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerMBS.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerMBS.setDescription("The tSapEgrPolicerMBS specifies the high priority 'violate' threshold of PIR leaky bucket of this policer.")
tSapEgrPolicerHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 14), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerHiPrioOnly.setDescription("The tSapEgrPolicerHiPrioOnly specifies the percentage of PIR leaky bucket's MBS (maximum burst size) of this policer that is reserved for high priority traffic.")
tSapEgrPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 15), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerCBS.setDescription("The tSapEgrPolicerCBS specifies the 'exceed' threshold of the CIR leaky bucket of this policer.")
tSapEgrPolicerPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 16), TPerPacketOffset()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerPktOffset.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerPktOffset.setDescription('tSapEgrPolicerPktOffset specifies the packet byte offset for addition of policing information by this policer.')
tSapEgrPolicerAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerAdminPIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerAdminPIRPercent.setDescription("The administrative PIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapEgrPolicerAdminPIRPercent is set to non-default value when the object tSapEgrPolicerRateType is set to 'kbps'.")
tSapEgrPolicerAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerAdminCIRPercent.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerAdminCIRPercent.setDescription("The administrative CIR percentage, in hundredths of a percent. An 'inconsistentValue' error is returned if tSapEgrPolicerAdminCIRPercent is set to non-default value when the object tSapEgrPolicerRateType is set to 'kbps'.")
tSapEgrPolicerRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 19), TPolicerRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerRateType.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerRateType.setDescription("The value of tSapEgrPolicerRateType specifies the type of egress policer rate. When the value of the object is set to 'kbps', the egresss policer rates are specified in kbps. The objects tSapEgrPolicerAdminPIRPercent and tSapEgrPolicerAdminCIRPercent will be set to their default values. When the value of the object is set to 'percentOfLocalLimit', the egress policer rates are specified in percentage. The objects tSapEgrPolicerAdminPIR and tSapEgrPolicerAdminCIR will be set to their default values.")
tSapEgrPolicerSlopeStartDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerSlopeStartDepth.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerSlopeStartDepth.setDescription('The value of tSapEgrPolicerSlopeStartDepth specifies the percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tSapEgrPolicerSlopeMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerSlopeMaxDepth.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerSlopeMaxDepth.setDescription('The value of tSapEgrPolicerSlopeMaxDepth specifies the percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tSapEgrPolicerSlopeMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerSlopeMaxProb.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerSlopeMaxProb.setDescription('The value of tSapEgrPolicerSlopeMaxProb specifies the drop probability, as a percentage, when the queue depth reaches tSapEgrPolicerSlopeMaxDepth. The drop increases steadily from 0 at the tSapEgrPolicerSlopeStartDepth up to the tSapEgrPolicerSlopeMaxProb at the tSapEgrPolicerSlopeMaxDepth.')
tSapEgrPolicerSlopeMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 23), TmnxSlopeMap().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerSlopeMap.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerSlopeMap.setDescription('The value of tSapEgrPolicerSlopeMap specifies the slope map to be used with this policer.')
tSapEgrPolicerAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 24), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerAdvCfgPolicy.setDescription('The value of tSapEgrPolicerAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this policer.')
tSapEgrPolicerProfileCapped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 8, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgrPolicerProfileCapped.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicerProfileCapped.setDescription("The value of tSapEgrPolicerProfileCapped specifies how the explicit in-profile and undetermined profile traffic should be handled at the egress policer. When the value of tSapEgrPolicerProfileCapped is set to 'true', both explicit in-profile and undetermined profile traffic is honored up to CIR, above which it is marked as out-of-profile. If CIR is set to zero, then all explicit in-profile and undetermined profile packets, along with the explicit out-of-profile packets are marked as out-of-profile. The default behavior when tSapEgrPolicerProfileCapped is set to 'false' is to ignore the CIR output state when an explicit in-profile packet is handled by an egress policer.")
tSapEgrPolicyNameTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 96), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrPolicyNameTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicyNameTableLastChgd.setDescription('The value of tSapEgrPolicyNameTableLastChgd indicates the sysUpTime at the time of the last modification of tSapEgrPolicyNameTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tSapEgrPolicyNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 9), )
if mibBuilder.loadTexts: tSapEgrPolicyNameTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicyNameTable.setDescription('A table that contains SAP egress policy name information. Entries are created automatically by the system when tSapEgressPolicyName object is set for the SAP egress policy.')
tSapEgrPolicyNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 9, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressPolicyName"))
if mibBuilder.loadTexts: tSapEgrPolicyNameEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicyNameEntry.setDescription('Basic information about a specific SAP egress policy name.')
tSapEgrPolicyNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 9, 1, 1), TSapEgressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrPolicyNameId.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicyNameId.setDescription('The value of the object tSapEgrPolicyNameId specifies the policy name associated with this SAP egress policy.')
tSapEgrPolicyNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrPolicyNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicyNameRowStatus.setDescription('This value of the object tSapEgrPolicyNameRowStatus specifies the status of this row.')
tSapEgrPolicyNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrPolicyNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgrPolicyNameLastChanged.setDescription('The value of tSapEgrPolicyNameLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tSapEgressDot1pTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 99), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressDot1pTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pTableLastChanged.setDescription('tSapEgressDot1pTableLastChanged indicates the timestamp of last change to the tSapEgressDot1pTable.')
tSapEgressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 10), )
if mibBuilder.loadTexts: tSapEgressDot1pTable.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pTable.setDescription('A table that contains the list of all dot1p entries for all sap-egress policies.')
tSapEgressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 10, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "TIMETRA-QOS-MIB", "tSapEgressDot1pValue"))
if mibBuilder.loadTexts: tSapEgressDot1pEntry.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pEntry.setDescription('Information about a particular dot1p match for a sap-egress policy. Entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tSapEgressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 10, 1, 1), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tSapEgressDot1pValue.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pValue.setDescription('The value of tSapEgressDot1pValue specifies the dotp value to match in the packet. This value is also used as an index so that for any dot1p value there is only one possible disposition queue and priority.')
tSapEgressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDot1pRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pRowStatus.setDescription('tSapEgressDot1pRowStatus allows entries to be created and deleted in the tSapEgressDot1pTable.')
tSapEgressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressDot1pLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pLastChanged.setDescription('The value of tSapEgressDot1pLastChanged indicates the sysUpTime at the time of the last modification of this entry.')
tSapEgressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 10, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDot1pFC.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pFC.setDescription('The value of tSapEgressDot1pFC specifies the forwarding class to be used to classify all the traffic that matches the Dot1p value specified by tSapEgressDot1pValue. Unless tSapEgressDot1pFC is specified explicitly, this match will be ignored for classification purposes.')
tSapEgressDot1pProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 10, 1, 5), TProfileUseDEOrNone().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDot1pProfile.setStatus('current')
if mibBuilder.loadTexts: tSapEgressDot1pProfile.setDescription('The value of tSapEgressDot1pProfile specifies the profile to use for packets that match the dot1p value specified by tSapEgressDot1pValue.')
tNetworkPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1), )
if mibBuilder.loadTexts: tNetworkPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyTable.setDescription(' ')
tNetworkPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"))
if mibBuilder.loadTexts: tNetworkPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyEntry.setDescription('Information about a particular Network Policy. network policy (1) is the default entry. Default Entry is created by the agent, other entries are created by user. Default Entry cannot be modified/deleted. The other entries are deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. The default Egress FC entries are created as an action of setting the rowstatus.')
tNetworkPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 1), TNetworkPolicyID().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65535), ValueRangeConstraint(65536, 65536), ValueRangeConstraint(65537, 65537), )))
if mibBuilder.loadTexts: tNetworkPolicyIndex.setReference('')
if mibBuilder.loadTexts: tNetworkPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIndex.setDescription('')
tNetworkPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyRowStatus.setDescription('')
tNetworkPolicyScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 5), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyScope.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyScope.setDescription('')
tNetworkPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyDescription.setDescription('tNetworkPolicyDescription holds the description for this policy.')
tNetworkPolicyIngressDefaultActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 7), TFCName().clone(hexValue="be")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionFC.setDescription('tNetworkPolicyIngressDefaultActionFC specifies the default forwarding class to be used while classifying the ingress traffic.')
tNetworkPolicyIngressDefaultActionProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 8), TProfileOrDei().clone('out')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionProfile.setDescription('tNetworkPolicyIngressDefaultActionProfile specifies the default profile to be used for the ingressing traffic.')
tNetworkPolicyEgressRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyEgressRemark.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyEgressRemark.setDescription('The object tNetworkPolicyEgressRemark specifies if the system will remark the egress packets or not.')
tNetworkPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyLastChanged.setDescription('Timestamp of last change to this row in tNetworkPolicyTable.')
tNetworkPolicyIngressLerUseDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressLerUseDscp.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyIngressLerUseDscp.setDescription('The object has significance only for the label edge routers which should honor the DSCP markings instead of the LSPEXP bits.')
tNetworkPolicyEgressRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyEgressRemarkDscp.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyEgressRemarkDscp.setDescription("The value of tNetworkPolicyEgressRemarkDscp object specifies whether DSCP bits in the internal IP header should be remarked. This object is valid only when tNetworkPolicyEgressRemark is set to 'true'.")
tNetworkIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2), )
if mibBuilder.loadTexts: tNetworkIngressDSCPTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPTable.setDescription(' ')
tNetworkIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "TIMETRA-QOS-MIB", "tNetworkIngressDSCP"))
if mibBuilder.loadTexts: tNetworkIngressDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPEntry.setDescription('Information about a dscp map for a network policy. Some default entries are created by the agent for the default network policy (1). These cannot be deleted or modified. Other entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tNetworkIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tNetworkIngressDSCP.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCP.setDescription('')
tNetworkIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPRowStatus.setDescription('')
tNetworkIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 3), TFCName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPFC.setDescription('')
tNetworkIngressDSCPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 4), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPProfile.setDescription('there is no DEFVAL for this object. it must be deliberately set before activating the row.')
tNetworkIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDSCPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPLastChanged.setDescription('timestamp of last change to this row in tNetworkIngressDSCPTable.')
tNetworkIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3), )
if mibBuilder.loadTexts: tNetworkIngressDot1pTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pTable.setDescription(' ')
tNetworkIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "TIMETRA-QOS-MIB", "tNetworkIngressDot1pValue"))
if mibBuilder.loadTexts: tNetworkIngressDot1pEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pEntry.setDescription('Information about a dot1p map for a network policy. Some default entries are created by the agent for the default network policy (1). These cannot be deleted or modified. Other entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile. ')
tNetworkIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 1), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tNetworkIngressDot1pValue.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pValue.setDescription('')
tNetworkIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pRowStatus.setDescription('')
tNetworkIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 3), TFCName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pFC.setDescription('')
tNetworkIngressDot1pProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 4), TDEProfileOrDei()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pProfile.setDescription('there is no DEFVAL for this object. It must be deliberately set before activating the row.')
tNetworkIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDot1pLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pLastChanged.setDescription('timestamp of last change to this row in tNetworkIngressDot1pTable.')
tNetworkIngressLSPEXPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4), )
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTable.setDescription(' ')
tNetworkIngressLSPEXPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "TIMETRA-QOS-MIB", "tNetworkIngressLSPEXP"))
if mibBuilder.loadTexts: tNetworkIngressLSPEXPEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPEntry.setDescription('Information about LSP EXP mapping for a network policy. Some default entries are created by the agent for the default network policy (1). These cannot be deleted or modified. Other entries are created/deleted by user. There is no StorageType object, entries have a presumed StorageType of nonVolatile.')
tNetworkIngressLSPEXP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 1), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tNetworkIngressLSPEXP.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXP.setDescription('')
tNetworkIngressLSPEXPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPRowStatus.setDescription('')
tNetworkIngressLSPEXPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 3), TFCName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPFC.setDescription('')
tNetworkIngressLSPEXPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 4), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPProfile.setDescription('there is no DEFVAL for this object. it must be deliberately set before activating the row.')
tNetworkIngressLSPEXPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPLastChanged.setDescription('timestamp of last change to this row in tNetworkIngressLSPEXPTable.')
tNetworkEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7), )
if mibBuilder.loadTexts: tNetworkEgressFCTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCTable.setDescription("Information about all network policies' egress FC traffic disposition.")
tNetworkEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "TIMETRA-QOS-MIB", "tNetworkEgressFCName"))
if mibBuilder.loadTexts: tNetworkEgressFCEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCEntry.setDescription("Information about a particular network policy's egress per-forwarding-class traffic disposition. Entries are created/deleted as an action of creating/deleting a row in the tNetworkPolicyTable. There is no StorageType object, entries have a presumed StorageType of nonVolatile.")
tNetworkEgressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 1), TFCName())
if mibBuilder.loadTexts: tNetworkEgressFCName.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCName.setDescription('the name of the forwarding class (FC).')
tNetworkEgressFCDSCPInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 2), TDSCPNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDSCPInProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDSCPInProfile.setDescription('the DSCP to use for in-profile traffic.')
tNetworkEgressFCDSCPOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 3), TDSCPNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDSCPOutProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDSCPOutProfile.setDescription('the DSCP to use for out-of-profile traffic.')
tNetworkEgressFCLspExpInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 4), TLspExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCLspExpInProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCLspExpInProfile.setDescription('the lsp-exp value to use for in-profile traffic.')
tNetworkEgressFCLspExpOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 5), TLspExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCLspExpOutProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCLspExpOutProfile.setDescription('the lsp-exp value to use for out-of-profile traffic.')
tNetworkEgressFCDot1pInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 6), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDot1pInProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDot1pInProfile.setDescription('the Dot1p to use for in-profile traffic.')
tNetworkEgressFCDot1pOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 7), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDot1pOutProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDot1pOutProfile.setDescription('the Dot1p to use for out-of-profile traffic.')
tNetworkEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCLastChanged.setDescription('timestamp of last change to this row in tNetworkEgressFCTable.')
tNetworkEgressFCForceDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 9), TDEValue().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCForceDEValue.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCForceDEValue.setDescription("The value of tNetworkEgressFCForceDEValue specifies the DE value to set for network egress packets in this forwarding class regardless of profile status of the frames. An inconsistentValue error is returned if this object is set to any value other than '-1', when tNetworkEgressFCDEMark object is set to 'false'.")
tNetworkEgressFCDEMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDEMark.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCDEMark.setDescription("The value of tNetworkEgressFCDEMark specifies whether to set DE value in the frames of this forwarding class. An inconsistentValue error is returned if this object is set to 'false' when tNetworkEgressFCForceDEValue object is not set to '-1'.")
tNetworkEgressFCQGrpQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 11), TEgressQueueId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCQGrpQueue.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCQGrpQueue.setDescription('tNetworkEgressFCQGrpQueue specifies the specific queue from queue-group TIMETRA-VRTR-MIB::vRtrIfQosQGrp to be used for packets in this forwarding class.')
tNetworkEgressFCQGrpPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 12), TEgrPolicerIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCQGrpPolicer.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCQGrpPolicer.setDescription('The value of tNetworkEgressFCQGrpPolicer specifies the policer from queue-group to be used for packets in this forwarding class.')
tNetworkQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1), )
if mibBuilder.loadTexts: tNetworkQueuePolicyTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyTable.setDescription(' ')
tNetworkQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkQueuePolicy"))
if mibBuilder.loadTexts: tNetworkQueuePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyEntry.setDescription('')
tNetworkQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tNetworkQueuePolicy.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicy.setDescription('')
tNetworkQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyRowStatus.setDescription('')
tNetworkQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyDescription.setDescription('')
tNetworkQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueuePolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyLastChanged.setDescription('')
tNetworkQueuePolicyEHWrrPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 9), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyEHWrrPlcy.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyEHWrrPlcy.setDescription('The value of tNetworkQueuePolicyEHWrrPlcy specifies the Weighted Round Robin (WRR) policy to use on this HSMDA egress queue.')
tNetworkQueuePolicyEHPktBOffst = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 10), TPerPacketOffset()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyEHPktBOffst.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyEHPktBOffst.setDescription('The value of tNetworkQueuePolicyEHPktBOffst specifies the packet byte offset to use for the HSMDA egress queues. This value is used for the adjustment to make to the size of each packet for HSMDA queue accounting.')
tNetworkQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2), )
if mibBuilder.loadTexts: tNetworkQueueTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueTable.setDescription('')
tNetworkQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkQueuePolicy"), (0, "TIMETRA-QOS-MIB", "tNetworkQueue"))
if mibBuilder.loadTexts: tNetworkQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueEntry.setDescription('')
tNetworkQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tNetworkQueue.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueue.setDescription('The queue ID is used as the secondary index to the table entry.')
tNetworkQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this table.')
tNetworkQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePoolName.setDescription('The tNetworkQueuePoolName specifies the pool that is associated with this network queue. If tNetworkQueuePoolName is empty, no pool has been associated with the queue.')
tNetworkQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueParent.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
tNetworkQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 5), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
tNetworkQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 6), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding to.')
tNetworkQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 7), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIRLevel.setDescription("This specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tNetworkQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 8), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding to.')
tNetworkQueueMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueMCast.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueMCast.setDescription('This object specifies if this is a multicast queue or not.')
tNetworkQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueExpedite.setDescription("tNetworkQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.")
tNetworkQueueCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 11), TRatePercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIR.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIR.setDescription('The percentage of max rate allowed.')
tNetworkQueuePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 12), TPIRRatePercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePIR.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePIR.setDescription('The percentage of max rate allowed.')
tNetworkQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 13), TBurstHundredthsOfPercent().clone(100)).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCBS.setDescription('The percentage of reserved buffer space for the queue, defined to two decimal places.')
tNetworkQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 14), TBurstHundredthsOfPercent().clone(10000)).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueMBS.setDescription('The percentage of reserved buffer space for the queue, defined to two decimal places.')
tNetworkQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 15), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueHiPrioOnly.setDescription('The percentage of buffer space for the queue, used exclusively by high priority packets.')
tNetworkQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueLastChanged.setDescription('The value of the object tNetworkQueueLastChanged indicates the timestamp of last change to this row in tNetworkQueueTable.')
tNetworkQueueUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueUsePortParent.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueUsePortParent.setDescription("The value of the object tNetworkQueueUsePortParent specifies whether this queue is parented by a port-level scheduler. When the value is 'true', this network queue is parented by a port-level scheduler.")
tNetworkQueuePortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 18), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortLvl.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortLvl.setDescription('The value of the object tNetworkQueuePortLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tNetworkQueuePortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 19), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortWght.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortWght.setDescription('The value of the object tNetworkQueuePortWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tNetworkQueuePortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 20), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortCIRLvl.setDescription('The value of the object tNetworkQueuePortCIRLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tNetworkQueuePortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 21), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortCIRWght.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortCIRWght.setDescription('The value of the object tNetworkQueuePortCIRWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tNetworkQueuePortAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortAvgOverhead.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePortAvgOverhead.setDescription('The value of tNetworkQueuePortAvgOverhead specifies the encapsulation overhead, in hundredths of a percent, used to translate packet-based rate to frame-based rate and vice versa.')
tNetworkQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 23), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueCIRAdaptation.setDescription('The value of tNetworkQueueCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational value while maintaining the minimum offset.')
tNetworkQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 24), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePIRAdaptation.setDescription('The value of tNetworkQueuePIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational value while maintaining the minimum offset.')
tNetworkQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3), )
if mibBuilder.loadTexts: tNetworkQueueFCTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCTable.setDescription('')
tNetworkQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkQueuePolicy"), (0, "TIMETRA-QOS-MIB", "tNetworkQueueFCName"))
if mibBuilder.loadTexts: tNetworkQueueFCEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCEntry.setDescription('')
tNetworkQueueFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tNetworkQueueFCName.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCName.setDescription('Forwarding class name.')
tNetworkQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCRowStatus.setDescription('Row Status for this queue.')
tNetworkQueueFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 3), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFC.setDescription('The specific queue to be used for packets in this forwarding class.')
tNetworkQueueFCMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFCMCast.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCMCast.setDescription('The specific multicast queue to be used for packets in this forwarding class. The queue is used only for specific entities and will be ignored wherever it is irrelevant.')
tNetworkQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCLastChanged.setDescription('timestamp of last change to this row in tNetworkQueueFCTable.')
tNetworkQueueFCEgrHsmdaQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 8), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFCEgrHsmdaQueue.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCEgrHsmdaQueue.setDescription('The value of tNetworkQueueFCEgrHsmdaQueue specifies the egress hsmda queue to be used for packets in this forwarding class. This is only applicable on supported hsmda ports.')
tNetworkEgrHsmdaQueueTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 94), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueTblLastChgd.setDescription('The value of tNetworkEgrHsmdaQueueTblLastChgd indicates the timestamp of last change to this row in tNetworkEgrHsmdaQueueTable.')
tNetworkEgrHsmdaQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4), )
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueTable.setDescription('The tNetworkEgrHsmdaQueueTable contains the information about all network egress policies on HSMDA queues. Entries in this table are created whenever a network queue policy is created in tNetworkQueuePolicyEntry.')
tNetworkEgrHsmdaQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkQueuePolicy"), (0, "TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueue"))
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueEntry.setDescription('Each entry in tNetworkEgrHsmdaQueueEntry represents the information about a particular HSMDA queue for a network egress policy specified by tNetworkEgrHsmdaQueue.')
tNetworkEgrHsmdaQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 1), TEgressHsmdaQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueue.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueue.setDescription('The value of tNetworkEgrHsmdaQueue indicates the HSMDA queue ID used as the secondary index to the table entry.')
tNetworkEgrHsmdaQueuePIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueuePIRPercent.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueuePIRPercent.setDescription("The value of tNetworkEgrHsmdaQueuePIRPercent specifies the queue's PIR expressed as a percentage of port line rate.")
tNetworkEgrHsmdaQueuePIRAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 3), TAdaptationRule().clone('closest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueuePIRAdaptn.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueuePIRAdaptn.setDescription('The value of tNetworkEgrHsmdaQueuePIRAdaptn specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tNetworkEgrHsmdaQueueWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 4), THsmdaWrrWeight().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueWrrWeight.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueWrrWeight.setDescription('The value of tNetworkEgrHsmdaQueueWrrWeight specifies the weight with which this queue should parent into the HSMDA scheduler, provided it is not superseded by the Weighted Round Robin (WRR) policy. The weight of each queue determines how much bandwidth that queue gets out of the total rate for the scheduling class.')
tNetworkEgrHsmdaQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 5), THSMDABurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueMBS.setDescription('The value of tNetworkEgrHsmdaQueueMBS specifies the maximum amount of buffer space, in bytes, allowed for this network egress HSMDA queue.')
tNetworkEgrHsmdaQueueSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 6), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueSlopePolicy.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueSlopePolicy.setDescription('The value of tNetworkEgrHsmdaQueueSlopePolicy specifies the slope policy on this network egress HSMDA queue. The slope policy defines the WRED slope behavior for this queue.')
tNetworkEgrHsmdaQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueLastChanged.setDescription('The value of tNetworkEgrHsmdaQueueLastChanged indicates the sysUpTime for the last change to this row.')
tNetworkEgrHsmdaQueueBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 4, 1, 8), THSMDAQueueBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueBurstLimit.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrHsmdaQueueBurstLimit.setDescription('The value of tNetworkEgrHsmdaQueueBurstLimit specifies the explicit shaping burst size of the queue.')
tSharedQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1), )
if mibBuilder.loadTexts: tSharedQueuePolicyTable.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyTable.setDescription("Defines the Alcatel-Lucent SROS series Shared Queue Policy Table for providing, via SNMP, the capability of defining the queue policies. tSharedQueuePolicyTable holds a list of all shared queue policies in the managed system. Shared queue policies should exist in this table before being referenced elsewhere. There is a default queue policy 'default' created by the agent and can not be deleted.")
tSharedQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSharedQueuePolicy"))
if mibBuilder.loadTexts: tSharedQueuePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyEntry.setDescription('Defines an entry in the tSharedQueuePolicyTable. Entries are created and deleted in this table by SNMP sets to tSharedQueuePolicyRowStatus.')
tSharedQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSharedQueuePolicy.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicy.setDescription('tSharedQueuePolicy serves as an index and uniquely identifies a queue policy in the managed system.')
tSharedQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePolicyRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSharedQueuePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyRowStatus.setDescription('tSharedQueuePolicyRowStatus allows entries to be created and deleted in the tSharedQueuePolicyTable. The deletion of an entry in this table will fail if the action is performed on the default policy or the policy is being used within the system.')
tSharedQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueuePolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyLastChanged.setDescription('tSharedQueuePolicyLastChanged indicates the value of sysUpTime when the queue policy entry was last modified.')
tSharedQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyDescription.setDescription('tSharedQueuePolicyDescription specifies the user provided description string for this queue policy entry. It can consist of only the printable, seven-bit ASCII characters.')
tSharedQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2), )
if mibBuilder.loadTexts: tSharedQueueTable.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueTable.setDescription("Defines the Alcatel-Lucent SROS series Shared Queue Table for providing, via SNMP, the capability of defining the queues for the shared queue policies existing in the tSharedQueuePolicyTable. tSharedQueueTable holds a list of all the shared queues in the managed system defined for the queue policies. Queues should exist in this table before being referenced by the forwarding class mappings within the queue policy as defined in the tSharedQueueFCTable. There is a default queue with the queue identifier '1' which gets created automatically when a new queue policy is created.")
tSharedQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSharedQueuePolicy"), (0, "TIMETRA-QOS-MIB", "tSharedQueueId"))
if mibBuilder.loadTexts: tSharedQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueEntry.setDescription('Defines an entry in the tSharedQueueTable. Entries are created/deleted in this table by SNMP sets to tSharedQueueRowStatus. An exception to this rule is the default queue. The default queue is created/deleted as a result of the creation/deletion of a new queue policy in the tSharedQueuePolicyTable.')
tSharedQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tSharedQueueId.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueId.setDescription('tSharedQueueId serves as the secondary index. When used in conjunction with tSharedQueuePolicy, it uniquely identifies a shared queue in the managed system.')
tSharedQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSharedQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueRowStatus.setDescription('tSharedQueueRowStatus allows entries to be created and deleted in the tSharedQueueTable. The deletion of an entry in this table will fail if the action is performed on the default queue or if the queue is being referenced by a forwarding class mapping in the queue policy.')
tSharedQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueLastChanged.setDescription('tSharedQueueLastChanged indicates the value of sysUpTime when the queue entry was last modified.')
tSharedQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePoolName.setDescription('tSharedQueuePoolName specifies the pool from which the queue should be allocating its buffer. By default it will share the default pool being used by the entity where the queue is instantiated.')
tSharedQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueParent.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueParent.setDescription('tSharedQueueParent specifies the scheduler to which this queue should be feeding into. By default there would be no parent for the queue and it will be controlled by the entity where the queue is instantiated.')
tSharedQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 6), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueLevel.setDescription('tSharedQueueLevel specifies the level of priority to be used by the parent entity to compute the priority of this queue when the traffic is exceeding the committed rate.')
tSharedQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueWeight.setDescription('tSharedQueueWeight specifies the weight that this queue should be assigned by the parent among all the entities feeding into the parent with the same level when the traffic is exceeding the committed rate.')
tSharedQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 8), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCIRLevel.setDescription("tSharedQueueCIRLevel specifies the level of priority to be used by the parent entity to compute the priority of this queue when the traffic is conforming to the committed rate. The level '0' means treat all offered load for this queue same as the load which is exceeding the committed rate.")
tSharedQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 9), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCIRWeight.setDescription('tSharedQueueCIRWeight specifies the weight that this queue should be assigned by the parent among all the entities feeding into the parent with the same level when the traffic is conforming to the committed rate.')
tSharedQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueExpedite.setDescription("tSharedQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. The value 'auto-expedited' implies that this attribute should be dynamically updated by looking at the forwarding classes mapping into this queue. In such a case the queue is treated as 'non-expedited' if there is even a single non-expedited forwarding class using this queue.")
tSharedQueueCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 11), TRatePercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIR.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCIR.setDescription('tSharedQueueCIR specifies the committed rate as a percentage of maximum rate for this queue.')
tSharedQueuePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 12), TPIRRatePercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePIR.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePIR.setDescription('tSharedQueuePIR specifies the peak rate as a percentage of maximum rate for this queue.')
tSharedQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 13), TBurstPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueCBS.setDescription('tSharedQueueCBS specifies the committed burst size as a percentage of maximum reserved buffer space for the queue.')
tSharedQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 14), TBurstPercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueMBS.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueMBS.setDescription('tSharedQueueMBS specifies the maximum burst size as a percentage of maximum reserved buffer space for the queue.')
tSharedQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 15), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueHiPrioOnly.setDescription('tSharedQueueHiPrioOnly specifies the percentage of buffer space to be exclusively by high priority packets as a percentage of maximum reserved buffer space for the queue.')
tSharedQueueIsMultipoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueIsMultipoint.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueIsMultipoint.setDescription('The value of tSharedQueueIsMultipoint specifies whether this shared queue is a multipoint-shared queue. This object can only be modified at row creation time; any attempt to set it after creation is silently ignored.')
tSharedQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3), )
if mibBuilder.loadTexts: tSharedQueueFCTable.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCTable.setDescription('Defines the Alcatel-Lucent SROS series forwarding class to shared queue mapping table for providing, via SNMP, the capability of defining the forwarding class to shared queue mapping for the queue policies existing in the tSharedQueuePolicyTable. tSharedQueueFCTable holds a list of forwarding class to queue mappings managed system defined for the queue policies. The forwarding classes which are not existing in this table should use the default shared queue for this policy.')
tSharedQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSharedQueuePolicy"), (0, "TIMETRA-QOS-MIB", "tSharedQueueFCName"))
if mibBuilder.loadTexts: tSharedQueueFCEntry.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCEntry.setDescription('Defines an entry in the tSharedQueueFCTable. Entries are created/deleted in this table by SNMP sets to tSharedQueueFCRowStatus.')
tSharedQueueFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tSharedQueueFCName.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCName.setDescription('tSharedQueueFCName serves as the secondary index. When used in conjunction with tSharedQueuePolicy, it uniquely identifies a forwarding class to queue mapping in the managed system.')
tSharedQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tSharedQueueFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCRowStatus.setDescription('tSharedQueueFCRowStatus allows entries to be created and deleted in the tSharedQueueFCTable. Deletion of an entry from this table will cause the forwarding class to use the default mapping.')
tSharedQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCLastChanged.setDescription('tSharedQueueFCLastChanged indicates the value of sysUpTime when the forwarding class to queue mapping entry was last modified.')
tSharedQueueFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCQueue.setDescription('tSharedQueueFCQueue specifies the logical queue that the traffic classified into this forwarding class should use.')
tSharedQueueFCMCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 5), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(9, 32)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCMCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCMCastQueue.setDescription('The value of tSharedQueueFCMCastQueue specifies the logical queue that mutlticast traffic classified into this forwarding class should use.')
tSharedQueueFCBCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 6), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(9, 32)).clone(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCBCastQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCBCastQueue.setDescription('The value of tSharedQueueFCBCastQueue specifies the logical queue that broadscast traffic classified into this forwarding class should use.')
tSharedQueueFCUnknownQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 7), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(9, 32)).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCUnknownQueue.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCUnknownQueue.setDescription('The value of tSharedQueueFCUnknownQueue specifies the logical queue that unknown traffic classified into this forwarding class should use.')
tQosIngQGroupTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosIngQGroupTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosIngQGroupTableLastChanged.setDescription('tQosIngQGroupTableLastChanged indicates the timestamp of last change to the tQosIngQGroupTable.')
tQosIngQGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 4), )
if mibBuilder.loadTexts: tQosIngQGroupTable.setStatus('current')
if mibBuilder.loadTexts: tQosIngQGroupTable.setDescription('tQosIngQGroupTable defines Ingress Queue Group Table for providing, via SNMP, the capability of defining the queue groups for the queues existing in the tQosIngQueueTable. tQosIngQGroupTable holds a list of all the queue-groups in the managed system defined. Queue-groups should exist in this table before being referenced by the forwarding class mappings within the queue policy as defined in the tSapIngressFCTable.')
tQosIngQGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosIngQGroupName"))
if mibBuilder.loadTexts: tQosIngQGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tQosIngQGroupEntry.setDescription('tQosIngQGroupEntry defines an entry in the tQosIngQGroupTable. Entries are created/deleted in this table by SNMP sets to tQosIngQGroupRowStatus.')
tQosIngQGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 4, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tQosIngQGroupName.setStatus('current')
if mibBuilder.loadTexts: tQosIngQGroupName.setDescription('tQosIngQGroupName defines the Ingress Queue Group name. It uniquely identifies an ingress queue group in the managed system.')
tQosIngQGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQGroupRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tQosIngQGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosIngQGroupRowStatus.setDescription('tQosIngQGroupRowStatus allows entries to be created and deleted in the tQosIngQGroupTable. The deletion of an entry in this table will fail if the queue is being referenced by a forwarding class mapping in the queue policy.')
tQosIngQGroupLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosIngQGroupLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosIngQGroupLastChanged.setDescription('tQosIngQGroupLastChanged indicates the value of sysUpTime when the queue entry was last modified.')
tQosIngQGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 4, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQGroupDescr.setStatus('current')
if mibBuilder.loadTexts: tQosIngQGroupDescr.setDescription('tQosIngQGroupDescr specifies the description of the queue-group.')
tQosIngQTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosIngQTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosIngQTableLastChanged.setDescription('tQosIngQTableLastChanged indicates the timestamp of last change to the tQosIngQueueTable.')
tQosIngQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5), )
if mibBuilder.loadTexts: tQosIngQueueTable.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueTable.setDescription('tQosIngQueueTable defines all ingress queues.')
tQosIngQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosIngQGroupName"), (0, "TIMETRA-QOS-MIB", "tQosIngQueue"))
if mibBuilder.loadTexts: tQosIngQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueEntry.setDescription('tQosIngQueueEntry defines a particular ingress queue. Entries are created by user by setting tQosIngQueueRowStatus.')
tQosIngQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tQosIngQueue.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueue.setDescription('tQosIngQueue specifies the queue ID which is used as the secondary index to the table entry.')
tQosIngQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueRowStatus.setDescription('tQosIngQueueRowStatus is the Row-Status of the entry. This allows creation/deletion of rows in this table.')
tQosIngQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueParent.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueParent.setDescription('tQosIngQueueParent specifies the scheduler to which this queue would be feeding.')
tQosIngQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueLevel.setDescription('tQosIngQueueLevel specifies the level of priority while feeding the parent.')
tQosIngQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueWeight.setDescription('tQosIngQueueWeight specifies the weight that needs to be used by the scheduler to which this queue would be feeding.')
tQosIngQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueCIRLevel.setDescription("tQosIngQueueCIRLevel specifies the level of priority while feeding to the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tQosIngQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueCIRWeight.setDescription('tQosIngQueueCIRWeight specifies the weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding.')
tQosIngQueueMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueMCast.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueMCast.setDescription('tQosIngQueueMCast specifies if this is a multicast queue.')
tQosIngQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("expedited", 1), ("bestEffort", 3))).clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueExpedite.setDescription('tQosIngQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.')
tQosIngQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 10), TBurstSize().clone(-1)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueCBS.setDescription('tQosIngQueueCBS specifies the amount of reserved buffer space for the queue.')
tQosIngQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 11), TBurstSize().clone(-1)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueMBS.setStatus('obsolete')
if mibBuilder.loadTexts: tQosIngQueueMBS.setDescription('tQosIngQueueMBS specifies the maximum amount of buffer space allowed for the queue. This object has been replaced with tQosIngQueueMBSBytes object.')
tQosIngQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 12), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueHiPrioOnly.setDescription('tQosIngQueueHiPrioOnly specifies the percentage of buffer space for the queue, used exclusively by high priority packets.')
tQosIngQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueuePIRAdaptation.setDescription('tQosIngQueuePIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosIngQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 14), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueCIRAdaptation.setDescription('tQosIngQueueCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosIngQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 15), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueAdminPIR.setDescription('tQosIngQueueAdminPIR specifies the administrative PIR specified by the user.')
tQosIngQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 16), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueAdminCIR.setDescription('tQosIngQueueAdminCIR specifies the administrative CIR specified by the user.')
tQosIngQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosIngQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueLastChanged.setDescription('tQosIngQueueLastChanged specifies the timestamp of last change to this row in tQosIngQueueTable.')
tQosIngQueuePoliced = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueuePoliced.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueuePoliced.setDescription('tQosIngQueuePoliced specifies that the out of profile traffic feeding into the physical queue instance should be dropped. tQosIngQueuePoliced overrides the bandwidth specified by the object tQosIngQueueAdminCIR.')
tQosIngQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 19), TQueueMode().clone('priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueMode.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueMode.setDescription('tQosIngQueueMode specifies the mode in which the queue is operating. This attribute is associated with the queue at the time of creation and cannot be modified thereafter.')
tQosIngQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 20), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueuePoolName.setDescription('tQosIngQueuePoolName specifies the name of the pool to be applied for the ingress queue.')
tQosIngQueueMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 21), TBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueMBSBytes.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueMBSBytes.setDescription('tQosIngQueueMBSBytes specifies the maximum amount of buffer space allowed for the queue.')
tQosIngQueueBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 22), TBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueBurstLimit.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueBurstLimit.setDescription('The value of tQosIngQueueBurstLimit specifies the explicit shaping burst size of a queue.')
tQosIngQueueAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 5, 1, 23), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngQueueAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tQosIngQueueAdvCfgPolicy.setDescription('The value of tQosIngQueueAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this queue.')
tQosEgrQGroupTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrQGroupTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupTableLastChanged.setDescription('tQosEgrQGroupTableLastChanged indicates the timestamp of last change to the tQosEgrQGroupTable.')
tQosEgrQGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 6), )
if mibBuilder.loadTexts: tQosEgrQGroupTable.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupTable.setDescription('tQosEgrQGroupTable defines the Ingress Queue Group Table for providing, via SNMP, the capability of defining the queue groups for the queues existing in the tQosEgrQueueTable. tQosEgrQGroupTable holds a list of all the queue-groups in the managed system defined. Queue-groups should exist in this table before being referenced by the forwarding class mappings within the queue policy as defined in the tSapIngressFCTable.')
tQosEgrQGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 6, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosEgrQGroupName"))
if mibBuilder.loadTexts: tQosEgrQGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupEntry.setDescription('tQosEgrQGroupEntry defines an entry in the tQosEgrQGroupTable. Entries are created/deleted in this table by SNMP sets to tQosEgrQGroupRowStatus.')
tQosEgrQGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tQosEgrQGroupName.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupName.setDescription('tQosEgrQGroupName defines the Ingress Queue Group name. It uniquely identifies an ingress queue group in the managed system.')
tQosEgrQGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQGroupRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tQosEgrQGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupRowStatus.setDescription('tQosEgrQGroupRowStatus allows entries to be created and deleted in the tQosEgrQGroupTable. The deletion of an entry in this table will fail if the queue is being referenced by a forwarding class mapping in the queue policy.')
tQosEgrQGroupLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrQGroupLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupLastChanged.setDescription('tQosEgrQGroupLastChanged indicates the value of sysUpTime when the queue entry was last modified.')
tQosEgrQGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 6, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQGroupDescr.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupDescr.setDescription('tQosEgrQGroupDescr specifies the description of the queue-group.')
tQosEgrQTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrQTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQTableLastChanged.setDescription('tQosEgrQTableLastChanged indicates the timestamp of last change to the tQosEgrQueueTable.')
tQosEgrQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7), )
if mibBuilder.loadTexts: tQosEgrQueueTable.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueTable.setDescription('tQosEgrQueueTable defines all egress queues.')
tQosEgrQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosEgrQGroupName"), (0, "TIMETRA-QOS-MIB", "tQosEgrQueue"))
if mibBuilder.loadTexts: tQosEgrQueueEntry.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueEntry.setDescription('tQosEgrQueueEntry defines a particular egress queue. Entries are created and deleted by user.')
tQosEgrQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tQosEgrQueue.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueue.setDescription('The value of tQosEgrQueue identifies the queue index which is used as the second index to the table entry. Zero is not allowed.')
tQosEgrQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueRowStatus.setDescription('This is the Row Status of the entry. This allows creation/deletion of rows in this table.')
tQosEgrQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueParent.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueParent.setDescription('The value of tQosEgrQueueParent specifies the scheduler to which this queue would be feeding.')
tQosEgrQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueLevel.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueLevel.setDescription('The value of tQosEgrQueueLevel specifies the level of priority while feeding the parent.')
tQosEgrQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueWeight.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueWeight.setDescription('The value of tQosEgrQueueWeight specifies the weight that needs to be used by the scheduler to which this queue would be feeding.')
tQosEgrQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueCIRLevel.setDescription("The value of tQosEgrQueueCIRLevel specifies the level of priority while feeding the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tQosEgrQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueCIRWeight.setDescription('The value of tQosEgrQueueCIRWeight specifies the weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding.')
tQosEgrQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("expedited", 1), ("bestEffort", 3))).clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueExpedite.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueExpedite.setDescription('The value of tQosEgrQueueExpedite specifies the priority that this queue should be assigned by the hardware level schedulers.')
tQosEgrQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 9), TBurstSize().clone(-1)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueCBS.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueCBS.setDescription('The value of tQosEgrQueueCBS specifies the amount of reserved buffer space for the queue.')
tQosEgrQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 10), TBurstSize().clone(-1)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueMBS.setStatus('obsolete')
if mibBuilder.loadTexts: tQosEgrQueueMBS.setDescription('The value of tQosEgrQueueMBS specifies the maximum amount of buffer space allowed for the queue. This object has been replaced with tQosEgrQueueMBSBytes object.')
tQosEgrQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 11), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueHiPrioOnly.setDescription('The value of tQosEgrQueueHiPrioOnly specifies the percentage of buffer space for the queue, used exclusively by high priority packets.')
tQosEgrQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 12), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueuePIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueuePIRAdaptation.setDescription('The value of tQosEgrQueuePIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosEgrQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueCIRAdaptation.setDescription('The value of tQosEgrQueueCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosEgrQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 14), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueAdminPIR.setDescription("The value of tQosEgrQueueAdminPIR specifies the administrative PIR. An 'inconsistentValue' error is returned if tQosEgrQueueAdminPIR is set to non-default value when the object tQosEgrQueueRateType is set to 'percent'.")
tQosEgrQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 15), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueAdminCIR.setDescription("The value of tQosEgrQueueAdminCIR specifies the administrative CIR. An 'inconsistentValue' error is returned if tQosEgrQueueAdminCIR is set to non-default value when the object tQosEgrQueueRateType is set to 'percent'.")
tQosEgrQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueLastChanged.setDescription('The value of tQosEgrQueueLastChanged indicates the timestamp of last change to this row in tQosEgrQueueTable.')
tQosEgrQueueUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueUsePortParent.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueUsePortParent.setDescription("The value of tQosEgrQueueUsePortParent specifies whether this queue is parented by a port-level scheduler. When the value is 'true', this SAP egress queue is parented by a port-level scheduler. This object is mutually exclusive with tQosEgrQueueParent. Only one kind of parent is allowed.")
tQosEgrQueuePortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 20), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueuePortLvl.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueuePortLvl.setDescription('The value of the object tQosEgrQueuePortLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tQosEgrQueuePortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 21), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueuePortWght.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueuePortWght.setDescription('The value of the object tQosEgrQueuePortWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tQosEgrQueuePortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 22), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueuePortCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueuePortCIRLvl.setDescription('The value of the object tQosEgrQueuePortCIRLvl specifies the port priority this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tQosEgrQueuePortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 23), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueuePortCIRWght.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueuePortCIRWght.setDescription('The value of the object tQosEgrQueuePortCIRWght specifies the weight this queue will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tQosEgrQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 24), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueuePoolName.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueuePoolName.setDescription('The value of tQosEgrQueuePoolName specifies the name of the pool to be applied for SAP egress queue.')
tQosEgrQueueXPWredQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueXPWredQ.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueXPWredQ.setDescription('The value of tQosEgrQueueXPWredQ specifies whether to alter the generic pool association of the queue for the purpose of allowing queue-specific WRED slopes with minimal provisioning.')
tQosEgrQueueXPWredQSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 26), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueXPWredQSlope.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueXPWredQSlope.setDescription("The value of tQosEgrQueueXPWredQSlope specifies the name of the slope-policy to be applied for QOS egress queue. When tQosEgrQueueXPWredQ has the value 'false', an 'inconsistentValue' error is returned if an attempt is made to set this object to a value other than 'default'.")
tQosEgrQueueMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 27), TBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueMBSBytes.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueMBSBytes.setDescription('The value of tQosEgrQueueMBSBytes specifies the maximum amount of buffer space allowed for the queue.')
tQosEgrQueueAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueAdminPIRPercent.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueAdminPIRPercent.setDescription("The value of tQosEgrQueueAdminPIRPercent specifies the administrative PIR percentage, in hudredths of a percent. An 'inconsistentValue' error is returned if tQosEgrQueueAdminPIRPercent is set to non-default value when the object tQosEgrQueueRateType is set to 'kbps'.")
tQosEgrQueueAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueAdminCIRPercent.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueAdminCIRPercent.setDescription("The value of tQosEgrQueueAdminCIRPercent specifies the administrative CIR percentage, in hudredths of a percent. An 'inconsistentValue' error is returned if tQosEgrQueueAdminCIRPercent is set to non-default value when the object tQosEgrQueueRateType is set to 'kbps'.")
tQosEgrQueueRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 30), TRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueRateType.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueRateType.setDescription("The value of tQosEgrQueueRateType specifies the type of Egress queue rate. When the value of the object is set to 'kbps', the egresss queue rates are specified in kbps. The objects tQosEgrQueueAdminCIRPercent and tQosEgrQueueAdminPIRPercent will be set to their default values. When the value of the object is set to 'percent', the egress queue rates are specified in percentage. The objects tQosEgrQueueAdminCIR and tQosEgrQueueAdminPIR will be set to their default values.")
tQosEgrQueueBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 31), TBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueBurstLimit.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueBurstLimit.setDescription('The value of tQosEgrQueueBurstLimit specifies the explicit shaping burst size of a queue.')
tQosEgrQueueAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 32), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueueAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueueAdvCfgPolicy.setDescription('The value of tQosEgrQueueAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this queue.')
tQosEgrQueuePktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 7, 1, 33), TPerPacketOffset()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQueuePktOffset.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQueuePktOffset.setDescription('The value of tQosEgrQueuePktOffset specifies the packet byte offset to be applied with this queue.')
tQosEgrQGroupFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 90), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrQGroupFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupFCTableLastChanged.setDescription('The value of tQosEgrQGroupFCTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tQosEgrQGroupFCTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tQosEgrQGroupFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 8), )
if mibBuilder.loadTexts: tQosEgrQGroupFCTable.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupFCTable.setDescription('This table maintains the information of forwarding classes in a egress queue group.')
tQosEgrQGroupFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 8, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosEgrQGroupName"), (0, "TIMETRA-QOS-MIB", "tQosEgrQGroupFCName"))
if mibBuilder.loadTexts: tQosEgrQGroupFCEntry.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupFCEntry.setDescription("Information about a particular queue group's forwarding class.")
tQosEgrQGroupFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 8, 1, 1), TFCName())
if mibBuilder.loadTexts: tQosEgrQGroupFCName.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupFCName.setDescription('The value of the object tQosEgrQGroupFCName specifies the name of the forwarding class')
tQosEgrQGroupFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQGroupFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupFCRowStatus.setDescription('The value of tQosEgrQGroupFCRowStatus specifies the Row Status for this entry.')
tQosEgrQGroupFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrQGroupFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupFCLastChanged.setDescription('The value of tQosEgrQGroupFCLastChanged indicates the timestamp of last change to this row in tQosEgrQGroupFCTable.')
tQosEgrQGroupFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 8, 1, 4), TEgressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrQGroupFCQueue.setStatus('current')
if mibBuilder.loadTexts: tQosEgrQGroupFCQueue.setDescription('The value of tQosEgrQGroupFCQueue specifies the queue to be used for the packets in this forwarding class. ')
tSlopePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1), )
if mibBuilder.loadTexts: tSlopePolicyTable.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicyTable.setDescription('Slope Policy Table. Each entry in this table defines the RED slopes for the high and the low priority traffic.')
tSlopePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSlopePolicy"))
if mibBuilder.loadTexts: tSlopePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicyEntry.setDescription('Slope Policy Entry.')
tSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSlopePolicy.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicy.setDescription('tSlopePolicy maintains the name of the slope policy identifying the policy.')
tSlopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSlopeRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this table.')
tSlopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeDescription.setStatus('current')
if mibBuilder.loadTexts: tSlopeDescription.setDescription('User-provided description of the policy.')
tSlopeHiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiAdminStatus.setDescription("tSlopeHiAdminStatus specifies the admin state for the high priority RED slope. If the tSlopeHiAdminStatus is set to 'down', the RED slope is inactive.")
tSlopeHiStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiStartAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiStartAverage.setDescription('The percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tSlopeHiMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiMaxAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiMaxAverage.setDescription('The percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tSlopeHiMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiMaxProbability.setStatus('current')
if mibBuilder.loadTexts: tSlopeHiMaxProbability.setDescription('The drop probability increases steadily from 0 at the tSlopeHiStartAverage upto the tSlopeHiMaxProbability at the tSlopeHiMaxAverage.')
tSlopeLoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoAdminStatus.setDescription("tSlopeLoAdminStatus specifies the admin state for the high priority RED slope. If the tSlopeLoAdminStatus is set to 'down', the RED slope is inactive.")
tSlopeLoStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoStartAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoStartAverage.setDescription('The percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tSlopeLoMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoMaxAverage.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoMaxAverage.setDescription('The percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tSlopeLoMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoMaxProbability.setStatus('current')
if mibBuilder.loadTexts: tSlopeLoMaxProbability.setDescription('The drop probability increases steadily from 0 at the tSlopeLoStartAverage upto the tSlopeLoMaxProbability at the tSlopeLoMaxAverage.')
tSlopeTimeAvgFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeTimeAvgFactor.setStatus('current')
if mibBuilder.loadTexts: tSlopeTimeAvgFactor.setDescription('The time average factor describes the weighting between the previous shared buffer average utilization result and the new shared buffer utilization in determining the new shared buffer average utilization.')
tSlopeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSlopeLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSlopeLastChanged.setDescription('Timestamp of when this entry was last changed.')
tHsmdaSlopePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2), )
if mibBuilder.loadTexts: tHsmdaSlopePolicyTable.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopePolicyTable.setDescription('The tHsmdaSlopePolicyTable has an entry for each HSMDA slope policy configured on this system.')
tHsmdaSlopePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tHsmdaSlopePolicyName"))
if mibBuilder.loadTexts: tHsmdaSlopePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopePolicyEntry.setDescription('Each row represents a particular HSMDA slope policy. Entries are created and deleted by the user.')
tHsmdaSlopePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tHsmdaSlopePolicyName.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopePolicyName.setDescription('The value of tHsmdaSlopePolicyName specifies the name of the HSMDA slope policy.')
tHsmdaSlopePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopePolicyRowStatus.setDescription('The value of tHsmdaSlopePolicyRowStatus is used for the creation and deletion of HSMDA slope policies.')
tHsmdaSlopeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaSlopeLastChanged.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeLastChanged.setDescription('The value of tHsmdaSlopeLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tHsmdaSlopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeDescription.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeDescription.setDescription('The value of tHsmdaSlopeDescription specifies the description of this HSMDA slope policy.')
tHsmdaSlopeQueueMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000)).clone(16800)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeQueueMbs.setStatus('obsolete')
if mibBuilder.loadTexts: tHsmdaSlopeQueueMbs.setDescription('The value of tHsmdaSlopeQueueMbs specifies the maximum amount of buffer space, in bytes, allowed for any HSMDA queue associated with this HSMDA slope policy. Specifying a value of 0 effectively disables all queues associated with this slope policy causing each queue to discard all packets. This object is obsoleted in 10.0 Release.')
tHsmdaSlopeHiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 6), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeHiAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeHiAdminStatus.setDescription("The value of tHsmdaSlopeHiAdminStatus specifies the admin state for the high priority RED slope. If the tHsmdaSlopeHiAdminStatus is set to 'disabled', the RED slope is inactive.")
tHsmdaSlopeHiStartDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeHiStartDepth.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeHiStartDepth.setDescription('The value of tHsmdaSlopeHiStartDepth specifies the percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tHsmdaSlopeHiMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeHiMaxDepth.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeHiMaxDepth.setDescription('The value of tHsmdaSlopeHiMaxDepth specifies the percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tHsmdaSlopeHiMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeHiMaxProbability.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeHiMaxProbability.setDescription('The value of tHsmdaSlopeHiMaxProbability specifies the drop probability, as a percentage, when the Hsmda queue depth reaches tHsmdaSlopeHiMaxDepth. The drop increases steadily from 0 at the tHsmdaSlopeHiStartDepth up to the tHsmdaSlopeHiMaxProbability at the tHsmdaSlopeHiMaxDepth.')
tHsmdaSlopeLoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 10), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeLoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeLoAdminStatus.setDescription("The value of tHsmdaSlopeLoAdminStatus specifies the admin state for the low priority RED slope. If the tHsmdaSlopeLoAdminStatus is set to 'disabled', the RED slope is inactive.")
tHsmdaSlopeLoStartDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(9000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeLoStartDepth.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeLoStartDepth.setDescription('The value of tHsmdaSlopeLoStartDepth specifies the percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tHsmdaSlopeLoMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(9000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeLoMaxDepth.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeLoMaxDepth.setDescription('The value of tHsmdaSlopeLoMaxDepth specifies the percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tHsmdaSlopeLoMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSlopeLoMaxProbability.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopeLoMaxProbability.setDescription('The value of tHsmdaSlopeLoMaxProbability specifies the drop probability, as a percentage, when the Hsmda queue depth reaches tHsmdaSlopeLoMaxDepth. The drop increases steadily from 0 at the tHsmdaSlopeLoStartDepth up to the tHsmdaSlopeLoMaxProbability at the tHsmdaSlopeLoMaxDepth.')
tSchedulerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1), )
if mibBuilder.loadTexts: tSchedulerPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyTable.setDescription(' ')
tSchedulerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1), ).setIndexNames((1, "TIMETRA-QOS-MIB", "tSchedulerPolicyName"))
if mibBuilder.loadTexts: tSchedulerPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyEntry.setDescription('Information about a particular Scheduler Policy.')
tSchedulerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSchedulerPolicyName.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyName.setDescription('Name of the scheduler policy.')
tSchedulerPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyRowStatus.setDescription('Row Status of the entry.')
tSchedulerPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyDescription.setDescription('Description for the scheduler policy')
tSchedulerPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSchedulerPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyLastChanged.setDescription('timestamp of last change to this row in tSchedulerPolicyTable.')
tSchedulerPolicyFrameBasedAccnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyFrameBasedAccnt.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyFrameBasedAccnt.setDescription("The value of tSchedulerPolicyFrameBasedAccnt specifies whether to use frame-based accounting for the schedulers within the scheduler policy and the children queues parented to the scheduling policy. If the value is 'false', the default packet-based accounting method will be used.")
tVirtualSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2), )
if mibBuilder.loadTexts: tVirtualSchedulerTable.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerTable.setDescription(' ')
tVirtualSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "TIMETRA-QOS-MIB", "tVirtualSchedulerTier"), (1, "TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: tVirtualSchedulerEntry.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerEntry.setDescription('Information about a particular Scheduler belonging to a Scheduler Policy.')
tVirtualSchedulerTier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: tVirtualSchedulerTier.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerTier.setDescription('Tier to which this scheduler belongs to.')
tVirtualSchedulerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tVirtualSchedulerName.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerName.setDescription('Name of the scheduler policy.')
tVirtualSchedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerRowStatus.setDescription('Row Status of the entry.')
tVirtualSchedulerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerDescription.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerDescription.setDescription('Description for the scheduler policy')
tVirtualSchedulerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerParent.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerParent.setDescription('The scheduler to which this scheduler would be feeding.')
tVirtualSchedulerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 6), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerLevel.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerLevel.setDescription('This specifies the level of priority while feeding the parent.')
tVirtualSchedulerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerWeight.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerWeight.setDescription('The weight that needs to be used by the scheduler to which this queue would be feeding.')
tVirtualSchedulerCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 8), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIRLevel.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerCIRLevel.setDescription("This specifies the level of priority while feeding the parent. The level '0' means treat all offered load for this queue as for the above CIR traffic.")
tVirtualSchedulerCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 9), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerCIRWeight.setDescription('The weight that needs to be used until the committed rate by the scheduler to which this queue would be feeding.')
tVirtualSchedulerPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 10), THPolVirtualSchePIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPIR.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPIR.setDescription('The rate allowed for this scheduler. A value of -1 implies maximum.')
tVirtualSchedulerCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 11), THPolVirtualScheCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIR.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerCIR.setDescription('The rate allowed for this scheduler. A value of -1 implies maximum.')
tVirtualSchedulerSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerSummedCIR.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerSummedCIR.setDescription("tVirtualSchedulerSummedCIR specifies if the CIR should be used as the summed value of the children. If set to 'true', tVirtualSchedulerCIR loses its meaning.")
tVirtualSchedulerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVirtualSchedulerLastChanged.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerLastChanged.setDescription('The value of the object tVirtualSchedulerLastChanged indicates the timestamp of last change to this row in tVirtualSchedulerTable.')
tVirtualSchedulerUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerUsePortParent.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerUsePortParent.setDescription("The value of the object tVirtualSchedulerUsePortParent specifies whether this scheduler is parented by a port-level scheduler. When the value is 'true', this virtual scheduler is parented by a port-level scheduler. This object is mutually exclusive with tVirtualSchedulerParent. Only one kind of parent is allowed.")
tVirtualSchedulerPortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 15), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortLvl.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortLvl.setDescription('The value of the object tVirtualSchedulerPortLvl specifies the port priority this scheduler will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tVirtualSchedulerPortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 16), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortWght.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortWght.setDescription('The value of the object tVirtualSchedulerPortWght specifies the weight this scheduler will use to receive bandwidth from the port-level scheduler for its above-cir offered load.')
tVirtualSchedulerPortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 17), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRLvl.setDescription('The value of the object tVirtualSchedulerPortCIRLvl specifies the port priority this scheduler will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tVirtualSchedulerPortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 18), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRWght.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRWght.setDescription('The value of the object tVirtualSchedulerPortCIRWght specifies the weight this scheduler will use to receive bandwidth from the port-level scheduler for its within-cir offered load.')
tPortSchedulerPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3), )
if mibBuilder.loadTexts: tPortSchedulerPlcyTable.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyTable.setDescription('The tPortSchedulerPlcyTable has an entry for each port scheduler configured on this system.')
tPortSchedulerPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1), ).setIndexNames((1, "TIMETRA-QOS-MIB", "tPortSchedulerPlcyName"))
if mibBuilder.loadTexts: tPortSchedulerPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyEntry.setDescription('Each row represents a particular port scheduler. Entries are created and deleted by the user.')
tPortSchedulerPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortSchedulerPlcyName.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyName.setDescription('The value of tPortSchedulerPlcyName specifies the name of the port scheduler.')
tPortSchedulerPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyRowStatus.setDescription('The value of tPortSchedulerPlcyRowStatus is used for the creation and deletion of port scheduler policies.')
tPortSchedulerPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 3), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyDescription.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyDescription.setDescription('The value of tPortSchedulerPlcyDescription specifies the description of this port scheduler.')
tPortSchedulerPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortSchedulerPlcyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLastChanged.setDescription('The value of tPortSchedulerPlcyLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tPortSchedulerPlcyMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 5), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyMaxRate.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyMaxRate.setDescription('The value of tPortSchedulerPlcyMaxRate specifies the explicit maximum frame based bandwidth limit of this port scheduler.')
tPortSchedulerPlcyLvl1PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 6), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1PIR.setDescription('The value of tPortSchedulerPlcyLvl1PIR specifies the total bandwidth limit, PIR, for priority level 1.')
tPortSchedulerPlcyLvl1CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 7), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1CIR.setDescription('The value of tPortSchedulerPlcyLvl1CIR specifies the within-cir bandwidth limit for priority level 1.')
tPortSchedulerPlcyLvl2PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 8), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2PIR.setDescription('The value of tPortSchedulerPlcyLvl2PIR specifies the total bandwidth limit, PIR, for priority level 2.')
tPortSchedulerPlcyLvl2CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 9), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2CIR.setDescription('The value of tPortSchedulerPlcyLvl2CIR specifies the within-cir bandwidth limit for priority level 2.')
tPortSchedulerPlcyLvl3PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 10), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3PIR.setDescription('The value of tPortSchedulerPlcyLvl3PIR specifies the total bandwidth limit, PIR, for priority level 3.')
tPortSchedulerPlcyLvl3CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 11), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3CIR.setDescription('The value of tPortSchedulerPlcyLvl3CIR specifies the within-cir bandwidth limit for priority level 3.')
tPortSchedulerPlcyLvl4PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 12), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4PIR.setDescription('The value of tPortSchedulerPlcyLvl4PIR specifies the total bandwidth limit, PIR, for priority level 4.')
tPortSchedulerPlcyLvl4CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 13), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4CIR.setDescription('The value of tPortSchedulerPlcyLvl4CIR specifies the within-cir bandwidth limit for priority level 4.')
tPortSchedulerPlcyLvl5PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 14), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5PIR.setDescription('The value of tPortSchedulerPlcyLvl5PIR specifies the total bandwidth limit, PIR, for priority level 5.')
tPortSchedulerPlcyLvl5CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 15), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5CIR.setDescription('The value of tPortSchedulerPlcyLvl5CIR specifies the within-cir bandwidth limit for priority level 5.')
tPortSchedulerPlcyLvl6PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 16), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6PIR.setDescription('The value of tPortSchedulerPlcyLvl6PIR specifies the total bandwidth limit, PIR, for priority level 6.')
tPortSchedulerPlcyLvl6CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 17), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6CIR.setDescription('The value of tPortSchedulerPlcyLvl6CIR specifies the within-cir bandwidth limit for priority level 6.')
tPortSchedulerPlcyLvl7PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 18), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7PIR.setDescription('The value of tPortSchedulerPlcyLvl7PIR specifies the total bandwidth limit, PIR, for priority level 7.')
tPortSchedulerPlcyLvl7CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 19), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7CIR.setDescription('The value of tPortSchedulerPlcyLvl7CIR specifies the within-cir bandwidth limit for priority level 7.')
tPortSchedulerPlcyLvl8PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 20), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8PIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8PIR.setDescription('The value of tPortSchedulerPlcyLvl8PIR specifies the total bandwidth limit, PIR, for priority level 8.')
tPortSchedulerPlcyLvl8CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 21), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8CIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8CIR.setDescription('The value of tPortSchedulerPlcyLvl8CIR specifies the within-cir bandwidth limit for priority level 8.')
tPortSchedulerPlcyOrphanLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 22), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanLvl.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanLvl.setDescription('The value of tPortSchedulerPlcyOrphanLvl specifies the port priority of orphaned queues and schedulers that are above-cir.')
tPortSchedulerPlcyOrphanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 23), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanWeight.setDescription('The value of tPortSchedulerPlcyOrphanWeight specifies the weight of orphaned queues and schedulers that are above-cir.')
tPortSchedulerPlcyOrphanCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 24), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRLvl.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRLvl.setDescription('The value of tPortSchedulerPlcyOrphanCIRLvl specifies the port priority of orphaned queues and schedulers that are within-cir.')
tPortSchedulerPlcyOrphanCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 25), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRWght.setStatus('current')
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRWght.setDescription('The value of tPortSchedulerPlcyOrphanCIRWght specifies the weight of orphaned queues and schedulers that are within-cir.')
tHsmdaSchedulerPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4), )
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyTable.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyTable.setDescription('The tHsmdaSchedulerPlcyTable has an entry for each HSMDA scheduler policy configured on this system.')
tHsmdaSchedulerPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyName"))
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyEntry.setDescription('Each row represents a particular HSMDA scheduler policy. Entries are created and deleted by the user.')
tHsmdaSchedulerPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyName.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyName.setDescription('The value of tHsmdaSchedulerPlcyName specifies the name of the HSMDA scheduler policy.')
tHsmdaSchedulerPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyRowStatus.setDescription('The value of tHsmdaSchedulerPlcyRowStatus is used for the creation and deletion of HSMDA scheduler policies.')
tHsmdaSchedulerPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 3), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyDescription.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyDescription.setDescription('The value of tHsmdaSchedulerPlcyDescription specifies the description of this HSMDA scheduling policy.')
tHsmdaSchedulerPlcyMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 4), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyMaxRate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyMaxRate.setDescription('The value of tHsmdaSchedulerPlcyMaxRate specifies the explicit maximum frame based bandwidth limit, in megabits per second, of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 5), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl1Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl1GrpId. Setting tHsmdaSchedulerPlcyLvl1Rate to any value (including default) while tHsmdaSchedulerPlcyLvl1GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl1GrpId being set to default, and tHsmdaSchedulerPlcyLvl1WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl1GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 6), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl1GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl1Rate. Setting tHsmdaSchedulerPlcyLvl1GrpId to non-default value while tHsmdaSchedulerPlcyLvl1Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl1Rate being set to default. Setting tHsmdaSchedulerPlcyLvl1GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl1WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl1WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 7), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl1WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl1WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl1GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl1WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl1GrpId is non-default.')
tHsmdaSchedulerPlcyLvl2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 8), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl2Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl2GrpId. Setting tHsmdaSchedulerPlcyLvl2Rate to any value (including default) while tHsmdaSchedulerPlcyLvl2GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl2GrpId being set to default, and tHsmdaSchedulerPlcyLvl2WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl2GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 9), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl2GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl2Rate. Setting tHsmdaSchedulerPlcyLvl2GrpId to non-default value while tHsmdaSchedulerPlcyLvl2Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl2Rate being set to default. Setting tHsmdaSchedulerPlcyLvl2GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl2WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl2WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 10), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl2WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl2WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl2GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl2WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl2GrpId is non-default.')
tHsmdaSchedulerPlcyLvl3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 11), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl3Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl3GrpId. Setting tHsmdaSchedulerPlcyLvl3Rate to any value (including default) while tHsmdaSchedulerPlcyLvl3GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl3GrpId being set to default, and tHsmdaSchedulerPlcyLvl3WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl3GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 12), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl3GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl3Rate. Setting tHsmdaSchedulerPlcyLvl3GrpId to non-default value while tHsmdaSchedulerPlcyLvl3Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl3Rate being set to default. Setting tHsmdaSchedulerPlcyLvl3GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl3WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl3WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 13), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl3WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl3WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl3GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl3WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl3GrpId is non-default.')
tHsmdaSchedulerPlcyLvl4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 14), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl4Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl4GrpId. Setting tHsmdaSchedulerPlcyLvl4Rate to any value (including default) while tHsmdaSchedulerPlcyLvl4GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl4GrpId being set to default, and tHsmdaSchedulerPlcyLvl4WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl4GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 15), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl4GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl4Rate. Setting tHsmdaSchedulerPlcyLvl4GrpId to non-default value while tHsmdaSchedulerPlcyLvl4Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl4Rate being set to default. Setting tHsmdaSchedulerPlcyLvl4GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl4WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl4WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 16), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl4WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl4WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl4GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl4WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl4GrpId is non-default.')
tHsmdaSchedulerPlcyLvl5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 17), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl5Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl5GrpId. Setting tHsmdaSchedulerPlcyLvl5Rate to any value (including default) while tHsmdaSchedulerPlcyLvl5GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl5GrpId being set to default, and tHsmdaSchedulerPlcyLvl5WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl5GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 18), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl5GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl5Rate. Setting tHsmdaSchedulerPlcyLvl5GrpId to non-default value while tHsmdaSchedulerPlcyLvl5Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl5Rate being set to default. Setting tHsmdaSchedulerPlcyLvl5GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl5WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl5WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 19), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl5WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl5WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl5GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl5WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl5GrpId is non-default.')
tHsmdaSchedulerPlcyLvl6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 20), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl6Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl6GrpId. Setting tHsmdaSchedulerPlcyLvl6Rate to any value (including default) while tHsmdaSchedulerPlcyLvl6GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl6GrpId being set to default, and tHsmdaSchedulerPlcyLvl6WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl6GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 21), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl6GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl6Rate. Setting tHsmdaSchedulerPlcyLvl6GrpId to non-default value while tHsmdaSchedulerPlcyLvl6Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl6Rate being set to default. Setting tHsmdaSchedulerPlcyLvl6GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl6WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl6WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 22), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl6WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl6WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl6GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl6WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl6GrpId is non-default.')
tHsmdaSchedulerPlcyLvl7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 23), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl7Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl7GrpId. Setting tHsmdaSchedulerPlcyLvl7Rate to any value (including default) while tHsmdaSchedulerPlcyLvl7GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl7GrpId being set to default, and tHsmdaSchedulerPlcyLvl7WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl7GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 24), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl7GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl7Rate. Setting tHsmdaSchedulerPlcyLvl7GrpId to non-default value while tHsmdaSchedulerPlcyLvl7Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl7Rate being set to default. Setting tHsmdaSchedulerPlcyLvl7GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl7WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl7WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 25), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl7WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl7WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl7GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl7WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl7GrpId is non-default.')
tHsmdaSchedulerPlcyLvl8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 26), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8Rate.setDescription('The value of tHsmdaSchedulerPlcyLvl8Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA scheduler policy level. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl8GrpId. Setting tHsmdaSchedulerPlcyLvl8Rate to any value (including default) while tHsmdaSchedulerPlcyLvl8GrpId is non-default, results in the level being removed from the group, tHsmdaSchedulerPlcyLvl8GrpId being set to default, and tHsmdaSchedulerPlcyLvl8WgtInGrp being set to default.')
tHsmdaSchedulerPlcyLvl8GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 27), THsmdaSchedulerPolicyGroupId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8GrpId.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8GrpId.setDescription("The value of tHsmdaSchedulerPlcyLvl8GrpId specifies the group this HSMDA scheduler policy level belongs to. If the value is '0', this level is not assigned to a scheduler policy group. This object may not be set simultaneously with tHsmdaSchedulerPlcyLvl8Rate. Setting tHsmdaSchedulerPlcyLvl8GrpId to non-default value while tHsmdaSchedulerPlcyLvl8Rate is non-default, results in the level being added to the group and tHsmdaSchedulerPlcyLvl8Rate being set to default. Setting tHsmdaSchedulerPlcyLvl8GrpId to default value results in the level being removed from any group and tHsmdaSchedulerPlcyLvl8WgtInGrp being set to default.")
tHsmdaSchedulerPlcyLvl8WgtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 28), THsmdaWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8WgtInGrp.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8WgtInGrp.setDescription('The value of tHsmdaSchedulerPlcyLvl8WgtInGrp specifies the weight the HSMDA scheduler policy should apply to this policy level within the group it belongs to. The value of tHsmdaSchedulerPlcyLvl8WgtInGrp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl8GrpId to a non-zero value. The value of tHsmdaSchedulerPlcyLvl8WgtInGrp is only allowed to be non-default when tHsmdaSchedulerPlcyLvl8GrpId is non-default.')
tHsmdaSchedulerPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLastChanged.setDescription('The value of tHsmdaSchedulerPlcyLastChanged indicates the timestamp of last change to this row in tHsmdaSchedulerPlcyTable.')
tHsmdaSchedulerPlcyGrp1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 30), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp1Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp1Rate.setDescription('The value of tHsmdaSchedulerPlcyGrp1Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for group 1 for this HSMDA scheduler policy group.')
tHsmdaSchedulerPlcyGrp2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 31), THsmdaPIRMRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp2Rate.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp2Rate.setDescription('The value of tHsmdaSchedulerPlcyGrp2Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for group 2 for this HSMDA scheduler policy group.')
tHsmdaSchedulerPlcyBrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 32), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyBrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyBrstLimit.setDescription('The value of tHsmdaSchedulerPlcyBrstLimit specifies the explicit shaping burst size for this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyGrp1BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 33), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp1BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp1BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyGrp1BrstLimit specifies the explicit shaping burst size for group 1 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyGrp2BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 34), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp2BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyGrp2BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyGrp2BrstLimit specifies the explicit shaping burst size for group 2 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl1BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 35), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl1BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl1BrstLimit specifies the explicit shaping burst size for level 1 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl2BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 36), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl2BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl2BrstLimit specifies the explicit shaping burst size for level 2 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl3BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 37), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl3BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl3BrstLimit specifies the explicit shaping burst size for level 3 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl4BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 38), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl4BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl4BrstLimit specifies the explicit shaping burst size for level 4 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl5BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 39), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl5BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl5BrstLimit specifies the explicit shaping burst size for level 5 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl6BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 40), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl6BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl6BrstLimit specifies the explicit shaping burst size for level 6 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl7BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 41), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl7BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl7BrstLimit specifies the explicit shaping burst size for level 7 of this HSMDA scheduler policy.')
tHsmdaSchedulerPlcyLvl8BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 4, 1, 42), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedulerPlcyLvl8BrstLimit.setDescription('The value of tHsmdaSchedulerPlcyLvl8BrstLimit specifies the explicit shaping burst size for level 8 of this HSMDA scheduler policy.')
tQosDomainLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosDomainLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosDomainLastChanged.setDescription('The value of the object tQosDomainLastChanged indicates the timestamp of last change to the QoS Domain.')
tDSCPNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDSCPNameTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tDSCPNameTableLastChanged.setDescription('The value of the object tDSCPNameTableLastChanged indicates the timestamp of last change to the DSCP Name Table.')
tFCNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFCNameTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tFCNameTableLastChanged.setDescription('The value of the object tFCNameTableLastChanged indicates the timestamp of last change to the FC Name Table.')
tSapIngressTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressTableLastChanged.setDescription('The value of the object tSapIngressTableLastChanged indicates the timestamp of last change to the Sap Ingress Policy Table.')
tSapIngressQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressQueueTableLastChanged.setDescription('tSapIngressQueueTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Queue Table.')
tSapIngressDSCPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDSCPTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDSCPTableLastChanged.setDescription('tSapIngressDSCPTableLastChanged maintains the timestamp of the last change made to the Sap Ingress DSCP Mapping Table.')
tSapIngressDot1pTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDot1pTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressDot1pTableLastChanged.setDescription('tSapIngressDot1pTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Dot1p Table.')
tSapIngressIPCriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPCriteriaTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPCriteriaTableLastChanged.setDescription('tSapIngressIPCriteriaTableLastChanged maintains the timestamp of the last change made to the Sap Ingress IP Criteria Table.')
tSapIngressMacCriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMacCriteriaTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressMacCriteriaTableLastChanged.setDescription('tSapIngressMacCriteriaTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Mac Criteria Table.')
tSapIngressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressFCTableLastChanged.setDescription('tSapIngressFCTableLastChanged maintains the timestamp of the last change made to the Sap Ingress FC Table.')
tSapIngressPrecTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressPrecTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressPrecTableLastChanged.setDescription('tSapIngressPrecTableLastChanged maintains the timestamp of the last change made to the Sap Ingress Precedence Table.')
tSapEgressTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressTableLastChanged.setDescription('tSapEgressTableLastChanged maintains the timestamp of the last change made to the Sap Egress Policy Table.')
tSapEgressQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressQueueTableLastChanged.setDescription('tSapEgressQueueTableLastChanged maintains the timestamp of the last change made to the Sap Egress Queue Table.')
tSapEgressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapEgressFCTableLastChanged.setDescription('tSapEgressFCTableLastChanged maintains the timestamp of the last change made to the Sap Egress FC Table.')
tNetworkPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 40), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkPolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkPolicyTableLastChanged.setDescription('tNetworkPolicyTableLastChanged maintains the timestamp of the last change made to the Network Policy Table.')
tNetworkIngressDSCPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 41), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDSCPTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDSCPTableLastChanged.setDescription('tNetworkIngressDSCPTableLastChanged maintains the timestamp of the last change made to the Network Ingress DSCP Mapping Table.')
tNetworkIngressLSPEXPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 42), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTableLastChanged.setDescription('tNetworkIngressLSPEXPTableLastChanged maintains the timestamp of the last change made to the Network Ingress LSPEXP Table.')
tNetworkEgressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 43), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressFCTableLastChanged.setDescription('tNetworkEgressFCTableLastChanged maintains the timestamp of the last change made to the Network Egress FC Table.')
tNetworkIngressDot1pTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 44), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDot1pTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressDot1pTableLastChanged.setDescription('tNetworkIngressDot1pTableLastChanged maintains the timestamp of the last change made to the Network Ingress Dot1p Table.')
tNetworkQueuePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 50), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueuePolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueuePolicyTableLastChanged.setDescription('tNetworkQueuePolicyTableLastChanged maintains the timestamp of the last change made to the Network Queue Policy Table.')
tNetworkQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 51), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueTableLastChanged.setDescription('tNetworkQueueTableLastChanged maintains the timestamp of the last change made to the Network Queue Table.')
tNetworkQueueFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 52), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkQueueFCTableLastChanged.setDescription('tNetworkQueueFCTableLastChanged maintains the timestamp of the last change made to the Network Queue FC Table.')
tSlopePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 55), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSlopePolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSlopePolicyTableLastChanged.setDescription('tSlopePolicyTableLastChanged maintains the timestamp of the last change made to the Slope Policy Table.')
tSchedulerPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSchedulerPolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSchedulerPolicyTableLastChanged.setDescription('tSchedulerPolicyTableLastChanged maintains the timestamp of the last change made to the Scheduler Policy Table.')
tVirtualSchedulerTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 61), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVirtualSchedulerTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tVirtualSchedulerTableLastChanged.setDescription('tVirtualSchedulerTableLastChanged maintains the timestamp of the last change made to the Virtual Scheduler Table.')
tAtmTdpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 62), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpTableLastChanged.setDescription('tAtmTdpTableLastChanged maintains the timestamp of the last change made to the Traffic Descriptor Profile Table.')
tSharedQueuePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 63), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueuePolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueuePolicyTableLastChanged.setDescription('tSharedQueuePolicyTableLastChanged maintains the timestamp of the last change made to the Queue Policy Table.')
tSharedQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 64), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueTableLastChanged.setDescription('tSharedQueueTableLastChanged maintains the timestamp of the last change made to the Queue Table.')
tSharedQueueFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 65), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSharedQueueFCTableLastChanged.setDescription('tSharedQueueFCTableLastChanged maintains the timestamp of the last change made to the Queue FC Table.')
tSapIngressIPv6CriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 66), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTableLastChanged.setDescription('The value of the object tSapIngressIPv6CriteriaTableLastChanged indicates the timestamp of the last change made to the Sap Ingress IPv6 Criteria Table.')
tSapIngrHsmdaQueueTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 67), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngrHsmdaQueueTblLastChngd.setStatus('obsolete')
if mibBuilder.loadTexts: tSapIngrHsmdaQueueTblLastChngd.setDescription('tSapIngrHsmdaQueueTblLastChngd maintains the timestamp of the last change made to the Sap Ingress HSMDA Queue Table. This object is obsoleted in 10.0 Release.')
tSapEgrHsmdaQueueTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 68), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgrHsmdaQueueTblLastChngd.setStatus('current')
if mibBuilder.loadTexts: tSapEgrHsmdaQueueTblLastChngd.setDescription('tSapEgrHsmdaQueueTblLastChngd maintains the timestamp of the last change made to the Sap Egress HSMDA Queue Table.')
tHsmdaSchedPlcyTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 69), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaSchedPlcyTblLastChngd.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedPlcyTblLastChngd.setDescription('tHsmdaSchedPlcyTblLastChngd maintains the timestamp of the last change made to the HSMDA Scheduler Policy Table.')
tHsmdaSchedPlcyGrpTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 70), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaSchedPlcyGrpTblLastChngd.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSchedPlcyGrpTblLastChngd.setDescription('tHsmdaSchedPlcyGrpTblLastChngd maintains the timestamp of the last change made to the HSMDA Scheduler Policy Group Table.')
tHsmdaPoolPlcyTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 71), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaPoolPlcyTblLastChngd.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolPlcyTblLastChngd.setDescription('tHsmdaPoolPlcyTblLastChngd maintains the timestamp of the last change made to the HSMDA Pool Policy Table.')
tHsmdaSlopePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 72), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaSlopePolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tHsmdaSlopePolicyTableLastChanged.setDescription('tHsmdaSlopePolicyTableLastChanged maintains the timestamp of the last change made to the Hsmda Slope Policy Table.')
tNamedPoolPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 73), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNamedPoolPolicyTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyTableLastChanged.setDescription('The value of tNamedPoolPolicyTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tNamedPoolPolicyTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tQ1NamedPoolTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 74), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQ1NamedPoolTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolTableLastChanged.setDescription('The value of tQ1NamedPoolTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tQ1NamedPoolTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcMlpppIngrProfTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 75), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppIngrProfTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrProfTableLastChanged.setDescription('The value of tMcMlpppIngrProfTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcMlpppIngrProfTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcMlpppIngrClassTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 76), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppIngrClassTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrClassTableLastChanged.setDescription('The value of tMcMlpppIngrClassTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcMlpppIngrClassTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcMlpppEgrProfTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 77), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppEgrProfTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrProfTableLastChanged.setDescription('The value of tMcMlpppEgrProfTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcMlpppEgrProfTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcMlpppEgrClassTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 78), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppEgrClassTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassTableLastChanged.setDescription('The value of tMcMlpppEgrClassTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcMlpppEgrClassTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcMlpppEgrFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 79), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppEgrFCTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrFCTableLastChanged.setDescription('The value of tMcMlpppEgrFCTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcMlpppEgrFCTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcFrIngrProfTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 80), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrIngrProfTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrProfTableLastChanged.setDescription('The value of tMcFrIngrProfTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcFrIngrProfTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcFrIngrClassTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 81), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrIngrClassTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrClassTableLastChanged.setDescription('The value of tMcFrIngrClassTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcFrIngrClassTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcFrEgrProfTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 82), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrEgrProfTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrProfTableLastChanged.setDescription('The value of tMcFrEgrProfTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcFrEgrProfTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tMcFrEgrClassTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 83), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrEgrClassTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassTableLastChanged.setDescription('The value of tMcFrEgrClassTableLastChanged indicates the sysUpTime at the time of the last modification of an entry in the tMcFrEgrClassTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tSapIngressLspExpTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 84), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressLspExpTableLastChange.setStatus('current')
if mibBuilder.loadTexts: tSapIngressLspExpTableLastChange.setDescription('The value of tSapIngressLspExpTableLastChange indicates the sysUpTime at the time of the last modification of an entry in the tSapIngressLspExpTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tAtmTdpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1), )
if mibBuilder.loadTexts: tAtmTdpTable.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpTable.setDescription('This table contains information on ATM traffic descriptors for controlling ATM traffic management capabilities.')
tAtmTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tAtmTdpIndex"))
if mibBuilder.loadTexts: tAtmTdpEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpEntry.setDescription('This list contains ATM traffic descriptor objects and the associated parameters. All objects that do not apply to a given service category are given default values of zero.')
tAtmTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 1), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: tAtmTdpIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpIndex.setDescription('This object is used to identify an entity inside the tAtmTdpTable. When creating a new row in the table the value of this index may be obtained by retrieving the value of tAtmTdpIndexNext.')
tAtmTdpSir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpSir.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpSir.setDescription('tAtmTdpSir identifies the sustained information rate in kilobits per second. The default Sir is determined by the Service Category. The following default applies to Sir that is modifiable depending upon a given service category: Applicable Service Category Default Sir Value RT-VBR 0 NRT-VBR 0 Note that for the service categories given above, the value of Sir must be less than or equal to the value of Pir.')
tAtmTdpPir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpPir.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpPir.setDescription('tAtmTdpPir identifies the peak information rate in kilobits per second. The default Pir is determined by the Service Category. The following default applies to Pir that is modifiable depending upon a given service category: Applicable Service Category Default Pir Value UBR (with/without Mir) 4294967295 CBR 0 RT-VBR 0 NRT-VBR 0')
tAtmTdpMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpMbs.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpMbs.setDescription('tAtmTdpMbs identifies the maximum burst size in cells. The default Mbs is determined by the Service Category. The following default applies to Mbs that is modifiable depending upon a given service category: Applicable Service Category Default Mbs Value RT-VBR 32 NRT-VBR 32')
tAtmTdpMir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpMir.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpMir.setDescription('tAtmTdpMir identifies the Minimum Information Rate in kilobits per second. The default Mir is determined by the Service Category. The following default applies for Mir that is modifiable depending upon a given service category: Applicable Service Category Default Mir Value UBR (with/without Mir) 0 Note that for the service categories given above, the value of Mir must be less than or equal to the value of Pir.')
tAtmTdpShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpShaping.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpShaping.setDescription('tAtmTdpShaping determines whether egress shaping should occur. The default tAtmTdpShaping is determined by the Service Category. The following default applies for tAtmTdpShaping depending upon a given service category: Applicable Service Category Default Shaping Value UBR disabled CBR enabled RT-VBR enabled NRT-VBR enabled For a Service Category of UBR, tAtmTdpShaping cannot be enabled. For CBR and RT-VBR service cateories disabling shaping is MDA-dependent. Shaping is only applied in the egress direction.')
tAtmTdpServCat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 7), AtmServiceCategory().clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpServCat.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpServCat.setDescription('tAtmTdpServCat determines the ATM service category.')
tAtmTdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 8), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpDescription.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpDescription.setDescription('The value of tAtmTdpDescription specifies an ASCII string used to describe the ATM traffic descriptor.')
tAtmTdpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpLastChanged.setDescription('tAtmTdpLastChanged maintains the timestamp of the last change made to a row in the Traffic Descriptor Profile Table.')
tAtmTdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpRowStatus.setDescription('tAtmTdpRowStatus is used to create/modify/delete a new row in this table. Only createAndGo/Active/Destroy are supported')
tAtmTdpDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 11), TAtmTdpDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpDescrType.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpDescrType.setDescription('tAtmTdpDescrType identifies the types of ATM traffic descriptor. The default is determined by the value of tAtmTdpServCat. The following default rules apply: Applicable Service Category tAtmTdpDescrType UBR clp0And1pcr CBR clp0And1pcr RT-VBR clp0And1pcrPlusClp0And1scr NRT-VBR clp0And1pcrPlusClp0And1scr')
tAtmTdpCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpCdvt.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpCdvt.setDescription('tAtmTdpCdvt identifies the Cell Delay Variation Tolerance in microseconds. The following default applies for Cdvt that is modifiable depending upon a given service category: Applicable Service Category Default Cdvt Value CBR/RT-VBR/NRT-VBR/UBR 250 ')
tAtmTdpPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpPolicing.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpPolicing.setDescription('tAtmTdpPolicing determines whether ingress traffic is policed. Policing by default is disabled. Policing is valid for CBR, UBR RT-VBR and NRT-VBR. This is cell-based policing. tAtmTdpDescrType Policing Scheme Applicable Serv Cat clp0And1pcr CBR.1 CBR and UBR clp0And1pcrPlusClp0And1scr VBR.1 RT/NRT-VBR clp0And1pcrPlusClp0scr VBR.2 RT/NRT-VBR clp0And1pcrPlusClp0scrTag VBR.3 RT/NRT-VBR')
tAtmTdpCLPTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpCLPTagging.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpCLPTagging.setDescription('tAtmTdpCLPTagging controls the setting of the CLP bit in the ATM cell header for egress traffic on an IES or VPRN SAP. If disabled (the default), all traffic has the CLP bit set to zero. If enabled, traffic queued on expedited queues has the CLP bit set to zero, while traffic on non-expedited queues has the CLP bit set to one.')
tAtmTdpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpWeight.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpWeight.setDescription('The value of tAtmTdpWeight specifies the relative weight assigned to this ATM traffic descriptor with respect to ATM VP shaper scheduling. The value of tAtmTdpWeight is only relevant for MDA where the value of TIMETRA-CHASSIS-MIB::tmnxMDAAtmMode is equal to max16kVc, and is ignored otherwise. If the value of tAtmTdpWeight is not specified when the conceptual row is created, the weight is derived from the ATM service category: CBR 10 rt-VBR 7 nrt-VBR 5 UBR+ (nonzero MIR) 2 UBR (zero MIR) 1.')
tNamedPoolPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1), )
if mibBuilder.loadTexts: tNamedPoolPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyTable.setDescription('This table contains information on Named buffer pools policy.')
tNamedPoolPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNamedPoolPolicyName"))
if mibBuilder.loadTexts: tNamedPoolPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyEntry.setDescription('This list contains Named buffer pools policy related information.')
tNamedPoolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tNamedPoolPolicyName.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyName.setDescription('The value of tNamedPoolPolicyName indicates the name of Named pool policy.')
tNamedPoolPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyRowStatus.setDescription('The value of tNamedPoolPolicyRowStatus is used for creation or deletion of named pool policies.')
tNamedPoolPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNamedPoolPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyLastChanged.setDescription('The value of tNamedPoolPolicyLastChanged indicates the sysUpTime when this row was last modified.')
tNamedPoolPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyDescription.setDescription('The value of tNamedPoolPolicyDescription specifies the description for a specific named pool policy.')
tNamedPoolPolicyQ1DefaultWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1DefaultWeight.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyQ1DefaultWeight.setDescription('The value of tNamedPoolPolicyQ1DefaultWeight specifies the port allocation weight given to the default pools.')
tNamedPoolPolicyQ1MdaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1MdaWeight.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyQ1MdaWeight.setDescription('The value of tNamedPoolPolicyQ1MdaWeight specifies the port allocation weight given to the MDA named pools.')
tNamedPoolPolicyQ1PortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1PortWeight.setStatus('current')
if mibBuilder.loadTexts: tNamedPoolPolicyQ1PortWeight.setDescription('The value of tNamedPoolPolicyQ1PortWeight specifies the port allocation weight given to the local port named pools.')
tQ1NamedPoolTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2), )
if mibBuilder.loadTexts: tQ1NamedPoolTable.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolTable.setDescription('This table contains information on Q1 pools policy.')
tQ1NamedPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQ1NamedPoolPolicyName"), (0, "TIMETRA-QOS-MIB", "tQ1NamedPoolName"))
if mibBuilder.loadTexts: tQ1NamedPoolEntry.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolEntry.setDescription('This list contains Q1 pools policy related information.')
tQ1NamedPoolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tQ1NamedPoolPolicyName.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolPolicyName.setDescription('The value of tQ1NamedPoolPolicyName indicates the name of the existing Q1 named pool policy.')
tQ1NamedPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tQ1NamedPoolName.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolName.setDescription('The value of tQ1NamedPoolName indicates the name of the existing pool within the policy.')
tQ1NamedPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolRowStatus.setDescription('The value of tQ1NamedPoolRowStatus is used for creation or deletion of Q1 named pools.')
tQ1NamedPoolLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQ1NamedPoolLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolLastChanged.setDescription('The value of tQ1NamedPoolLastChanged indicates the sysUpTime when this row was last modified. ')
tQ1NamedPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolDescription.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolDescription.setDescription('The value of tQ1NamedPoolDescription specifies the description for a specific Q1 named pool.')
tQ1NamedPoolNetworkAllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolNetworkAllocWeight.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolNetworkAllocWeight.setDescription('The value of tQ1NamedPoolNetworkAllocWeight specifies the weight used to divide network associated buffer space between named pools.')
tQ1NamedPoolAccessAllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolAccessAllocWeight.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolAccessAllocWeight.setDescription('The value of tQ1NamedPoolAccessAllocWeight specifies the weight used to divide access associated buffer space between named pools.')
tQ1NamedPoolSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolSlopePolicy.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolSlopePolicy.setDescription('The value of tQ1NamedPoolSlopePolicy specifies the name of the slop-policy which is used to override the default slope-policy for the named buffer pool.')
tQ1NamedPoolReservedCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolReservedCbs.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolReservedCbs.setDescription('The value of tQ1NamedPoolReservedCbs specifies the reserved CBS size of the pool. The reserved CBS (Committed Burst Size) defines the amount of buffer space within the pool that is not considered shared.')
tQ1NamedPoolResvCbsAmbrAlrmStep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolResvCbsAmbrAlrmStep.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolResvCbsAmbrAlrmStep.setDescription('The value of tQ1NamedPoolResvCbsAmbrAlrmStep specifies the percentage step-size for the reserved CBS size of the pool. When tQ1NamedPoolResvCbsAmbrAlrmStep is set to default value, the adaptive CBS sizing is disabled. To enable adaptive CBS sizing, tQ1NamedPoolResvCbsAmbrAlrmStep MUST be set to non-default value along with tQ1NamedPoolResvCbsAmbrAlrmMax. When reserved CBS is default adaptive CBS sizing cannot be enabled. The reserved CBS (Committed Burst Size) defines the amount of buffer space within the pool that is not considered shared.')
tQ1NamedPoolResvCbsAmbrAlrmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolResvCbsAmbrAlrmMax.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolResvCbsAmbrAlrmMax.setDescription('The value of tQ1NamedPoolResvCbsAmbrAlrmMax specifies the maximum percentage for the reserved CBS size of the pool. When tQ1NamedPoolResvCbsAmbrAlrmMax is set to default value, the adaptive CBS sizing is disabled. To enable adaptive CBS sizing, tQ1NamedPoolResvCbsAmbrAlrmMax MUST be set to non-default value along with tQ1NamedPoolResvCbsAmbrAlrmStep. When reserved CBS is default adaptive CBS sizing cannot be enabled. The reserved CBS (Committed Burst Size) defines the amount of buffer space within the pool that is not considered shared. Max reserved CBS must not be more than the reserved CBS.')
tQ1NamedPoolAmbrAlrmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolAmbrAlrmThresh.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolAmbrAlrmThresh.setDescription('The value of tQ1NamedPoolAmbrAlrmThresh specifies the threshold for the amber alarm on the over-subscription allowed.')
tQ1NamedPoolRedAlrmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolRedAlrmThresh.setStatus('current')
if mibBuilder.loadTexts: tQ1NamedPoolRedAlrmThresh.setDescription('The value of tQ1NamedPoolRedAlrmThresh specifies the threshold for the red alarm on the over-subscription allowed.')
tAtmTdpIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpIndexNext.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpIndexNext.setDescription('This object contains an appropriate value to be used for tAtmTdpIndex when creating entries in the tAtmTdpTable. The value 0 indicates that no unassigned entries are available. To obtain the tAtmTdpIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
tAtmTdpsMaxSupported = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpsMaxSupported.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpsMaxSupported.setDescription('This object contains the maximum number of ATM Traffic Descriptor Profiles that can be configured on this system.')
tAtmTdpsCurrentlyConfigured = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpsCurrentlyConfigured.setStatus('current')
if mibBuilder.loadTexts: tAtmTdpsCurrentlyConfigured.setDescription('This object contains the number of currently configured ATM Traffic Descriptor Profiles on this system.')
tHsmdaPoolPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3), )
if mibBuilder.loadTexts: tHsmdaPoolPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolPolicyTable.setDescription('The tHsmdaPoolPolicyTable has an entry for each HSMDA pool policy configured on this system.')
tHsmdaPoolPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tHsmdaPoolPolicyName"))
if mibBuilder.loadTexts: tHsmdaPoolPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolPolicyEntry.setDescription('Each row represents a particular HSMDA pool policy. Entries are created and deleted by the user.')
tHsmdaPoolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tHsmdaPoolPolicyName.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolPolicyName.setDescription('The value of tHsmdaPoolPolicyName specifies the name of the HSMDA pool policy.')
tHsmdaPoolPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolPolicyRowStatus.setDescription('The value of tHsmdaPoolPolicyRowStatus is used for the creation and deletion of HSMDA pool policies.')
tHsmdaPoolLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaPoolLastChanged.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolLastChanged.setDescription('The value of tHsmdaPoolLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tHsmdaPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolDescription.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolDescription.setDescription('The value of tHsmdaPoolDescription specifies the description of this HSMDA pool policy.')
tHsmdaPoolSystemReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000)).clone(1000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolSystemReserve.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolSystemReserve.setDescription('The value of tHsmdaPoolSystemReserve specifies the percentage of HSMDA buffers that will be reserved for internal system use. When this value is set, all the provisioned buffer pool allocation sizes will be re-evaluated. This includes the port class allocations specified by indirectly by tmnxPortIngPoolPercentRate and tmnxPortEgrPoolPercentRate, and class and root pools specified indirectly by tHsmdaPoolClass1AllocPercent through tHsmdaPoolClass8AllocPercent and tHsmdaPoolRoot1AllocWeight through tHsmdaPoolRoot8AllocWeight.')
tHsmdaPoolRoot1AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 6), TWeight().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot1AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot1AllocWeight.setDescription("The value of tHsmdaPoolRoot1AllocWeight specifies the weight that will be applied to the first root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolRoot2AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 7), TWeight().clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot2AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot2AllocWeight.setDescription("The value of tHsmdaPoolRoot2AllocWeight specifies the weight that will be applied to the second root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolRoot3AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 8), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot3AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot3AllocWeight.setDescription("The value of tHsmdaPoolRoot3AllocWeight specifies the weight that will be applied to the third root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolRoot4AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 9), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot4AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot4AllocWeight.setDescription("The value of tHsmdaPoolRoot4AllocWeight specifies the weight that will be applied to the fourth root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolRoot5AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 10), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot5AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot5AllocWeight.setDescription("The value of tHsmdaPoolRoot5AllocWeight specifies the weight that will be applied to the fifth root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolRoot6AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 11), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot6AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot6AllocWeight.setDescription("The value of tHsmdaPoolRoot6AllocWeight specifies the weight that will be applied to the sixth root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolRoot7AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 12), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot7AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot7AllocWeight.setDescription("The value of tHsmdaPoolRoot7AllocWeight specifies the weight that will be applied to the seventh root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolRoot8AllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 13), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolRoot8AllocWeight.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolRoot8AllocWeight.setDescription("The value of tHsmdaPoolRoot8AllocWeight specifies the weight that will be applied to the eighth root pool and is divided by the sum of all root pool weights to derive the pool's buffer allocation factor.")
tHsmdaPoolClass1Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass1Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass1Parent.setDescription('The value of tHsmdaPoolClass1Parent specifies the root pool to which the first class pool will be associated.')
tHsmdaPoolClass1AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(4000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass1AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass1AllocPercent.setDescription('The value of tHsmdaPoolClass1AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass1Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tHsmdaPoolClass2Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass2Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass2Parent.setDescription('The value of tHsmdaPoolClass2Parent specifies the root pool to which the second class pool will be associated.')
tHsmdaPoolClass2AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(3500)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass2AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass2AllocPercent.setDescription('The value of tHsmdaPoolClass2AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass2Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tHsmdaPoolClass3Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass3Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass3Parent.setDescription('The value of tHsmdaPoolClass3Parent specifies the root pool to which the third class pool will be associated.')
tHsmdaPoolClass3AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(3000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass3AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass3AllocPercent.setDescription('The value of tHsmdaPoolClass3AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass3Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tHsmdaPoolClass4Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass4Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass4Parent.setDescription('The value of tHsmdaPoolClass4Parent specifies the root pool to which the fourth class pool will be associated.')
tHsmdaPoolClass4AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(2500)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass4AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass4AllocPercent.setDescription('The value of tHsmdaPoolClass4AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass4Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tHsmdaPoolClass5Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass5Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass5Parent.setDescription('The value of tHsmdaPoolClass5Parent specifies the root pool to which the fifth class pool will be associated.')
tHsmdaPoolClass5AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(2000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass5AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass5AllocPercent.setDescription('The value of tHsmdaPoolClass5AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass5Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tHsmdaPoolClass6Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass6Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass6Parent.setDescription('The value of tHsmdaPoolClass6Parent specifies the root pool to which the sixth class pool will be associated.')
tHsmdaPoolClass6AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(5000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass6AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass6AllocPercent.setDescription('The value of tHsmdaPoolClass6AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass6Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tHsmdaPoolClass7Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass7Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass7Parent.setDescription('The value of tHsmdaPoolClass7Parent specifies the root pool to which the seventh class pool will be associated.')
tHsmdaPoolClass7AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(4000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass7AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass7AllocPercent.setDescription('The value of tHsmdaPoolClass7AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass7Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tHsmdaPoolClass8Parent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass8Parent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass8Parent.setDescription('The value of tHsmdaPoolClass8Parent specifies the root pool to which the eigth class pool will be associated.')
tHsmdaPoolClass8AllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(3000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaPoolClass8AllocPercent.setStatus('current')
if mibBuilder.loadTexts: tHsmdaPoolClass8AllocPercent.setDescription('The value of tHsmdaPoolClass8AllocPercent specifies, indirectly, the size of the first class pool. The specified percentage, in hundredths of a percent, determines what percentage of the root pool with which it is associated, as specified by tHsmdaPoolClass8Parent, will be available to this class. The sum of the class pool percentages for a root pool may exceed 100 percent(10000 hundredths of a percent), allowing the root pool to be oversubscribed. The sum of the class pool percentages for a root pool may also total less than 100 percent, allowing the root pool to be undersubscribed.')
tMcMlpppIngrProfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 1), )
if mibBuilder.loadTexts: tMcMlpppIngrProfTable.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrProfTable.setDescription('The tMcMlpppIngrProfTable has an entry for each ingress multi-class mlppp profile configured in the system.')
tMcMlpppIngrProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcMlpppIngrProfIndex"))
if mibBuilder.loadTexts: tMcMlpppIngrProfEntry.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrProfEntry.setDescription('Each row entry contains information about a particular ingress multi-class mlppp profile. Multi-class mlppp ingress profile 1 is created by the agent. It cannot be deleted. Other entries are created by the user.')
tMcMlpppIngrProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 1, 1, 1), TMlpppQoSProfileId().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tMcMlpppIngrProfIndex.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrProfIndex.setDescription('The value of tMcMlpppIngrProfIndex specifies a specific multi-class ingress profile.')
tMcMlpppIngrProfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 1, 1, 2), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcMlpppIngrProfDescription.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrProfDescription.setDescription('The value of tMcMlpppIngrProfDescription holds the description for this profile.')
tMcMlpppIngrProfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppIngrProfLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrProfLastChanged.setDescription('The value of tMcMlpppIngrProfTable indicates the sysUpTime for the last change to this row.')
tMcMlpppIngrProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcMlpppIngrProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrProfRowStatus.setDescription('The value of tMcMlpppIngrProfRowStatus controls the creation and deletion of rows in this table.')
tMcMlpppIngrClassTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 2), )
if mibBuilder.loadTexts: tMcMlpppIngrClassTable.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrClassTable.setDescription('The tMcMlpppIngrClassTable has an entry for each multi-class mlppp ingress class per multi-class mlppp ingress profile in the system.')
tMcMlpppIngrClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcMlpppIngrProfIndex"), (0, "TIMETRA-QOS-MIB", "tMcMlpppIngrClassIndex"))
if mibBuilder.loadTexts: tMcMlpppIngrClassEntry.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrClassEntry.setDescription('Each entry contains information about a particular mlppp ingress multi-class class per mlppp ingress profile. Entries are created/destroyed as each tMcMlpppIngrProfEntry is created/destroyed.')
tMcMlpppIngrClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 2, 1, 1), TmnxMcMlpppClassIndex())
if mibBuilder.loadTexts: tMcMlpppIngrClassIndex.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrClassIndex.setDescription('The value of tMcMlpppIngrClassIndex specifies a specific mlppp ingress class per multi-class mlppp ingress profile.')
tMcMlpppIngrClassReassemblyTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcMlpppIngrClassReassemblyTmout.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrClassReassemblyTmout.setDescription('The value of tMcMlpppIngrClassReassemblyTmout specifies the reassembly timeout for a specific mlppp multi-class ingress class. The default reassembly timeout value is determined by the tMcMlpppIngrClassIndex value. Currently only four multi-class classes are supported per profile. tMcMlpppIngrClassIndex Default Reassembly Value 0 10 1 10 2 100 3 1000')
tMcMlpppIngrClassLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 23, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppIngrClassLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppIngrClassLastChanged.setDescription('The value of tMcMlpppIngrClassLastChanged indicates the sysUpTime for the last change to this entry.')
tMcMlpppEgrProfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 1), )
if mibBuilder.loadTexts: tMcMlpppEgrProfTable.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrProfTable.setDescription('The tMcMlpppEgrProfTable has an entry for each egress multi-class mlppp profile configured in the system.')
tMcMlpppEgrProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcMlpppEgrProfIndex"))
if mibBuilder.loadTexts: tMcMlpppEgrProfEntry.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrProfEntry.setDescription('Each row entry contains information about a particular egress multi-class mlppp profile. Multi-class mlppp egress profiles 1,2 and 3 are created by the agent. They cannot be deleted. Other entries are created by the user.')
tMcMlpppEgrProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 1, 1, 1), TMlpppQoSProfileId().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tMcMlpppEgrProfIndex.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrProfIndex.setDescription('The value of tMcMlpppEgrProfIndex specifies a specific multi-class egress profile.')
tMcMlpppEgrProfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 1, 1, 2), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcMlpppEgrProfDescription.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrProfDescription.setDescription('The value of tMcMlpppEgrProfDescription holds the description for this profile.')
tMcMlpppEgrProfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppEgrProfLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrProfLastChanged.setDescription('The value of tMcMlpppEgrProfLastChanged indicates the sysUpTime for the last change to this row.')
tMcMlpppEgrProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcMlpppEgrProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrProfRowStatus.setDescription('The value of tMcMlpppEgrProfRowStatus controls the creation and deletion of rows in this table.')
tMcMlpppEgrClassTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 3), )
if mibBuilder.loadTexts: tMcMlpppEgrClassTable.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassTable.setDescription('The tMcMlpppEgrClassTable has an entry for each multiclass mlppp egress profile in the system.')
tMcMlpppEgrClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcMlpppEgrProfIndex"), (0, "TIMETRA-QOS-MIB", "tMcMlpppEgrClassIndex"))
if mibBuilder.loadTexts: tMcMlpppEgrClassEntry.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassEntry.setDescription('Each entry contains information about a particular mlppp egress multi-class class per mlppp multi-class mlppp egress profile. Entries are created/destroyed as each tMcMlpppEgrProfEntry is created/destroyed.')
tMcMlpppEgrClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 3, 1, 1), TmnxMcMlpppClassIndex())
if mibBuilder.loadTexts: tMcMlpppEgrClassIndex.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassIndex.setDescription('The value of tMcMlpppEgrClassIndex specifies a specific mlppp egress class per multi-class mlppp egress profile.')
tMcMlpppEgrClassMir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 100), ))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcMlpppEgrClassMir.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassMir.setDescription('The value of tMcMlpppEgrClassMir specifies the Minimum Information Rate given as a percentage. A value of zero represents this object is not applicable for this class. The default Mir is determined by the tMcMlpppEgrClassIndex value. Currently only four multi-class classes are supported per profile. tMcMlpppEgrClassIndex Default Mir Value 0 100 1 85 2 0 3 0')
tMcMlpppEgrClassWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 100), ))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcMlpppEgrClassWeight.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassWeight.setDescription('The value of tMcMlpppEgrClassWeight specifies the weight of this multiclass class given as a percentage. A value of zero represents this object is not applicable for this class. The default Weight is determined by the tMcMlpppEgrClassIndex value. Currently only four multi-class classes are supported per profile. tMcMlpppEgrClassIndex Default Weight Value 0 0 1 0 2 66 3 33')
tMcMlpppEgrClassMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcMlpppEgrClassMaxSize.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassMaxSize.setDescription('The value of tMcMlpppEgrClassMaxSize specifies the buffer queue size. The default buffer size is determined by the tMcMlpppEgrClassIndex value. Currently only four multi-class classes are supported per profile. tMcMlpppEgrClassIndex Default Max Size 0 25 1 5 2 200 3 1000')
tMcMlpppEgrClassLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppEgrClassLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrClassLastChanged.setDescription('The value of tMcMlpppEgrClassLastChanged indicates the sysUpTime for the last change to this entry.')
tMcMlpppEgrFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 4), )
if mibBuilder.loadTexts: tMcMlpppEgrFCTable.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrFCTable.setDescription('The tMcMlpppEgrFCTable has an entry for all egress FC Mappings to multi-class mlppp classes.')
tMcMlpppEgrFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcMlpppEgrProfIndex"), (0, "TIMETRA-QOS-MIB", "tMcMlpppEgrFCName"))
if mibBuilder.loadTexts: tMcMlpppEgrFCEntry.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrFCEntry.setDescription('Each entry contains information about all egress FC Mappings to multi-class mlppp classes. Entries are created/destroyed as each tMcMlpppEgrProfEntry is created/destroyed.')
tMcMlpppEgrFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 4, 1, 1), TFCName())
if mibBuilder.loadTexts: tMcMlpppEgrFCName.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrFCName.setDescription('The value tMcMlpppEgrFCName specifies of the name of the forwarding class.')
tMcMlpppEgrFCClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcMlpppEgrFCClass.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrFCClass.setDescription('The value of tMcMlpppEgrFCClass specifies the mlppp multi-class class for the per-forwarding-class specified. The default class value is determined by the Forwarding Class Name. Forwarding Class Name Mlppp Class Value be 3 l2 2 af 2 l1 2 h2 2 ef 1 h1 0 nc 0')
tMcMlpppEgrFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 24, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcMlpppEgrFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcMlpppEgrFCLastChanged.setDescription('The value of tMcMlpppEgrFCLastChanged indicates the sysUpTime for the last change to this entry.')
tMcFrIngrProfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 1), )
if mibBuilder.loadTexts: tMcFrIngrProfTable.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrProfTable.setDescription('The tMcFrIngrProfTable has an entry for each ingress multi-class frame-relay profile configured in the system.')
tMcFrIngrProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcFrIngrProfIndex"))
if mibBuilder.loadTexts: tMcFrIngrProfEntry.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrProfEntry.setDescription('Each row entry contains information about a particular ingress multi-class frame-relay profile. Multi-class frame-relay ingress profile 1 is created by the agent. It cannot be modified/deleted. Other entries are created by the user.')
tMcFrIngrProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 1, 1, 1), TMcFrQoSProfileId().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tMcFrIngrProfIndex.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrProfIndex.setDescription('The value of tMcFrIngrProfIndex specifies a specific multi-class ingress profile.')
tMcFrIngrProfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 1, 1, 2), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcFrIngrProfDescription.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrProfDescription.setDescription('The value of tMcFrIngrProfDescription holds the description for this profile.')
tMcFrIngrProfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrIngrProfLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrProfLastChanged.setDescription('The value of tMcFrIngrProfTable indicates the sysUpTime for the last change to this row.')
tMcFrIngrProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcFrIngrProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrProfRowStatus.setDescription('The value of tMcFrIngrProfRowStatus controls the creation and deletion of rows in this table.')
tMcFrIngrClassTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 2), )
if mibBuilder.loadTexts: tMcFrIngrClassTable.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrClassTable.setDescription('The tMcFrIngrClassTable has an entry for each multi-class frame-relay ingress class per multi-class frame-relay ingress profile in the system.')
tMcFrIngrClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcFrIngrProfIndex"), (0, "TIMETRA-QOS-MIB", "tMcFrIngrClassIndex"))
if mibBuilder.loadTexts: tMcFrIngrClassEntry.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrClassEntry.setDescription('Each entry contains information about a particular frame-relay ingress multi-class class per frame-relay ingress profile. Entries are created/destroyed as each tMcFrIngrProfEntry is created/destroyed.')
tMcFrIngrClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 2, 1, 1), TmnxMcFrClassIndex())
if mibBuilder.loadTexts: tMcFrIngrClassIndex.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrClassIndex.setDescription('The value of tMcFrIngrClassIndex specifies a specific frame-relay ingress class per multi-class frame-relay ingress profile.')
tMcFrIngrClassReassemblyTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcFrIngrClassReassemblyTmout.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrClassReassemblyTmout.setDescription('The value of tMcFrIngrClassReassemblyTmout specifies the reassembly timeout for a specific frame-relay multi-class ingress class. Currently only four multi-class classes are supported per profile.')
tMcFrIngrClassLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 25, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrIngrClassLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrIngrClassLastChanged.setDescription('The value of tMcFrIngrClassLastChanged indicates the sysUpTime for the last change to this entry.')
tMcFrEgrProfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 1), )
if mibBuilder.loadTexts: tMcFrEgrProfTable.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrProfTable.setDescription('The tMcFrEgrProfTable has an entry for each egress multi-class frame-relay profile configured in the system.')
tMcFrEgrProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcFrEgrProfIndex"))
if mibBuilder.loadTexts: tMcFrEgrProfEntry.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrProfEntry.setDescription('Each row entry contains information about a particular egress multi-class frame-relay profile. Multi-class frame-relay egress profile 1 is created by the agent. It cannot be modified/deleted. Other entries are created by the user.')
tMcFrEgrProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 1, 1, 1), TMcFrQoSProfileId().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tMcFrEgrProfIndex.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrProfIndex.setDescription('The value of tMcFrEgrProfIndex specifies a specific multi-class egress profile.')
tMcFrEgrProfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 1, 1, 2), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcFrEgrProfDescription.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrProfDescription.setDescription('The value of tMcFrEgrProfDescription holds the description for this profile.')
tMcFrEgrProfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrEgrProfLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrProfLastChanged.setDescription('The value of tMcFrEgrProfLastChanged indicates the sysUpTime for the last change to this row.')
tMcFrEgrProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tMcFrEgrProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrProfRowStatus.setDescription('The value of tMcFrEgrProfRowStatus controls the creation and deletion of rows in this table.')
tMcFrEgrClassTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 3), )
if mibBuilder.loadTexts: tMcFrEgrClassTable.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassTable.setDescription('The tMcFrEgrClassTable has an entry for each multiclass mlppp egress profile in the system.')
tMcFrEgrClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tMcFrEgrProfIndex"), (0, "TIMETRA-QOS-MIB", "tMcFrEgrClassIndex"))
if mibBuilder.loadTexts: tMcFrEgrClassEntry.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassEntry.setDescription('Each entry contains information about a particular frame-relay egress multi-class class per multi-class frame-relay egress profile. Entries are created/destroyed as each tMcFrEgrProfEntry is created/destroyed.')
tMcFrEgrClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 3, 1, 1), TmnxMcFrClassIndex())
if mibBuilder.loadTexts: tMcFrEgrClassIndex.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassIndex.setDescription('The value of tMcFrEgrClassIndex specifies a specific frame-relay egress class per multi-class frame-relay egress profile.')
tMcFrEgrClassMir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 100), ))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcFrEgrClassMir.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassMir.setDescription('The value of tMcFrEgrClassMir specifies the Minimum Information Rate given as a percentage. A value of zero represents this object is not applicable for this class. Currently only four multi-class classes are supported per profile.')
tMcFrEgrClassWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 100), ))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcFrEgrClassWeight.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassWeight.setDescription('The value of tMcMlpppEgrClassWeight specifies the weight of this multiclass class given as a percentage. A value of zero represents this object is not applicable for this class. Currently only four multi-class classes are supported per profile.')
tMcFrEgrClassMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMcFrEgrClassMaxSize.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassMaxSize.setDescription('The value of tMcFrEgrClassMaxSize specifies the buffer queue size. The default buffer size is determined by the tMcFrEgrClassIndex value. Currently only four multi-class classes are supported per profile.')
tMcFrEgrClassLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 26, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMcFrEgrClassLastChanged.setStatus('current')
if mibBuilder.loadTexts: tMcFrEgrClassLastChanged.setDescription('The value of tMcFrEgrClassLastChanged indicates the sysUpTime for the last change to this entry.')
tQosPolicerCtrlPolTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 87), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosPolicerCtrlPolTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolTblLastChgd.setDescription('tQosPolicerCtrlPolTblLastChgd indicates the timestamp of last change to the tQosPolicerCtrlPolTable.')
tQosPolicerCtrlPolTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1), )
if mibBuilder.loadTexts: tQosPolicerCtrlPolTable.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolTable.setDescription('tQosPolicerCtrlPolTable defines all egress queues.')
tQosPolicerCtrlPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosPolicerCtrlPolName"))
if mibBuilder.loadTexts: tQosPolicerCtrlPolEntry.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolEntry.setDescription('tQosPolicerCtrlPolEntry defines a particular egress queue. Entries are created and deleted by user.')
tQosPolicerCtrlPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tQosPolicerCtrlPolName.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolName.setDescription('The value of tQosPolicerCtrlPolName identifies the name of the policer control policy.')
tQosPolicerCtrlPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerCtrlPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolRowStatus.setDescription('This is the Row Status of the entry. This allows creation/deletion of rows in this table.')
tQosPolicerCtrlPolLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosPolicerCtrlPolLastChgd.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolLastChgd.setDescription('The value of tQosPolicerCtrlPolLastChgd indicates the timestamp of last change to this row in tQosPolicerCtrlPolTable.')
tQosPolicerCtrlPolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerCtrlPolDescr.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolDescr.setDescription('The value of tQosPolicerCtrlPolDescr specifies the description for the policer control policy.')
tQosPolicerCtrlPolRootMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1, 5), THPolPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerCtrlPolRootMaxRate.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolRootMaxRate.setDescription('The value of tQosPolicerCtrlPolRootMaxRate specifies the maximum frame based bandwidth limit of this policer.')
tQosPolicerCtrlPolMinMBSSep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1, 6), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerCtrlPolMinMBSSep.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolMinMBSSep.setDescription('The value of tQosPolicerCtrlPolMinMBSSep specifies the minimum amount of seperation buffer space (in bytes) allowed by this policer.')
tQosPolicerCtrlPolProfPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerCtrlPolProfPref.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerCtrlPolProfPref.setDescription("The value of tQosPolicerCtrlPolProfPref specifies the minimum amount of seperation buffer space (in bytes) allowed by this policer. When the value of this object is set to 'true', preferred profile is applied to this policy. When the value is set to 'false', no preffered profile is set to this policy.")
tQosPolicerLevelTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 88), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosPolicerLevelTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerLevelTblLastChgd.setDescription('tQosPolicerLevelTblLastChgd indicates the timestamp of last change to the tQosPolicerLevelTable.')
tQosPolicerLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 2), )
if mibBuilder.loadTexts: tQosPolicerLevelTable.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerLevelTable.setDescription('tQosPolicerLevelTable defines all levels of QoS Policer control policy defined by tQosPolicerCtrlPolTable.')
tQosPolicerLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 2, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosPolicerCtrlPolName"), (0, "TIMETRA-QOS-MIB", "tQosPolicerLevel"))
if mibBuilder.loadTexts: tQosPolicerLevelEntry.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerLevelEntry.setDescription('tQosPolicerLevelEntry defines a specific level of QoS policer control policy defined by tQosPolicerCtrlPolTable. Entries are created and deleted by the system when QoS policer control policy is created and deleted.')
tQosPolicerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 2, 1, 1), TLevel())
if mibBuilder.loadTexts: tQosPolicerLevel.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerLevel.setDescription('The value of tQosPolicerLevel identifies the level of the policer control policy defined by tQosPolicerCtrlPolName.')
tQosPolicerLevelLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosPolicerLevelLastChgd.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerLevelLastChgd.setDescription('The value of tQosPolicerLevelLastChgd indicates the timestamp of last change to this row in tQosPolicerLevelTable.')
tQosPolicerLevelCumMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 2, 1, 3), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerLevelCumMBS.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerLevelCumMBS.setDescription('The value of tQosPolicerLevelCumMBS specifies the maximum amount of cumulative buffer space (in bytes) allowed for this level by this policer.')
tQosPolicerLevelFixedMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerLevelFixedMBS.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerLevelFixedMBS.setDescription("The value of tQosPolicerLevelFixedMBS specifies whether the cumulative buffer space is fixed for this level. When the value of this object is set to 'true', cumulative buffer space for this level is fixed. When the value is set to 'false', cumulative buffer space for this level is not fixed.")
tQosPolicerArbiterTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 89), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosPolicerArbiterTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterTblLastChgd.setDescription('tQosPolicerArbiterTblLastChgd indicates the timestamp of last change to the tQosPolicerArbiterTable.')
tQosPolicerArbiterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3), )
if mibBuilder.loadTexts: tQosPolicerArbiterTable.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterTable.setDescription('tQosPolicerArbiterTable defines policy arbiters for all policer control policies.')
tQosPolicerArbiterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosPolicerCtrlPolName"), (0, "TIMETRA-QOS-MIB", "tQosPolicerArbiterTier"), (0, "TIMETRA-QOS-MIB", "tQosPolicerArbiterName"))
if mibBuilder.loadTexts: tQosPolicerArbiterEntry.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterEntry.setDescription('tQosPolicerArbiterEntry defines a particular policy arbiter for a specific QoS policer control policy on a given tier. Entries are created and deleted by user.')
tQosPolicerArbiterTier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tier1", 1), ("tier2", 2))))
if mibBuilder.loadTexts: tQosPolicerArbiterTier.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterTier.setDescription('The value of tQosPolicerArbiterTier identifies the tier of the policer control policy arbiter.')
tQosPolicerArbiterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tQosPolicerArbiterName.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterName.setDescription('The value of tQosPolicerArbiterName identifies the name of the policer control policy arbiter.')
tQosPolicerArbiterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerArbiterRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterRowStatus.setDescription('This is the Row Status of the entry. This allows creation/deletion of rows in this table.')
tQosPolicerArbiterLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosPolicerArbiterLastChgd.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterLastChgd.setDescription('The value of tQosPolicerArbiterLastChgd indicates the timestamp of last change to this row in tQosPolicerArbiterTable.')
tQosPolicerArbiterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerArbiterDescr.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterDescr.setDescription('The value of tQosPolicerArbiterDescr specifies the description for the policer control policy arbiter for the given tier.')
tQosPolicerArbiterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 6), THPolPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerArbiterRate.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterRate.setDescription('The value of tQosPolicerArbiterRate specifies the maximum frame based bandwidth limit of this policer control policy arbiter for the given tier.')
tQosPolicerArbiterParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 7), TNamedItemOrEmpty().clone('root')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerArbiterParent.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterParent.setDescription('tQosPolicerArbiterParent specifies the scheduler to which this queue would be feeding.')
tQosPolicerArbiterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 8), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerArbiterLevel.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterLevel.setDescription('tQosPolicerArbiterLevel specifies the level of priority while feeding the parent.')
tQosPolicerArbiterWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 3, 1, 9), TPolicerWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosPolicerArbiterWeight.setStatus('current')
if mibBuilder.loadTexts: tQosPolicerArbiterWeight.setDescription('tQosPolicerArbiterWeight specifies the weight that needs to be used by the scheduler to which this queue would be feeding.')
tQosIngPolicerTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 97), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosIngPolicerTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerTableLastChanged.setDescription('tQosIngPolicerTableLastChanged indicates the timestamp of last change to the tQosIngPolicerTable.')
tQosIngPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4), )
if mibBuilder.loadTexts: tQosIngPolicerTable.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerTable.setDescription('tQosIngPolicerTable defines QOS Ingress Policer Table for providing, via SNMP, the capability of defining the policers in the ingress queue groups. tQosIngPolicerTable holds a list of all the policers configured in the managed system. Policers must exist in this table before being referenced by the forwarding class mappings within the Qos policies.')
tQosIngPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosIngQGroupName"), (0, "TIMETRA-QOS-MIB", "tQosIngPolicerId"))
if mibBuilder.loadTexts: tQosIngPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerEntry.setDescription('tQosIngPolicerEntry defines an entry in the tQosIngPolicerTable. Entries are created/deleted in this table by SNMP sets to tQosIngPolicerRowStatus.')
tQosIngPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tQosIngPolicerId.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerId.setDescription('tQosIngPolicerId defines the Ingress Queue Group Policer identifier. It identifies an ingress queue group policer in the managed system.')
tQosIngPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerRowStatus.setDescription('tQosIngPolicerRowStatus allows entries to be created and deleted in the tQosIngPolicerTable.')
tQosIngPolicerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosIngPolicerLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerLastChanged.setDescription('tQosIngPolicerLastChanged indicates the value of sysUpTime when the entry was last modified.')
tQosIngPolicerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerDescr.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerDescr.setDescription('tQosIngPolicerDescr specifies the description of the policer.')
tQosIngPolicerPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 5), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerPIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosIngPolicerCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 6), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosIngPolicerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerParent.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerParent.setDescription('tQosIngPolicerParent specifies the arbiter to which this policer would be feeding.')
tQosIngPolicerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 8), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerLevel.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerLevel.setDescription('tQosIngPolicerLevel specifies the level of priority while feeding the parent.')
tQosIngPolicerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 9), TPolicerWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerWeight.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerWeight.setDescription('tQosIngPolicerWeight specifies the weight that needs to be used by the arbiter to which this policer would be feeding')
tQosIngPolicerAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 10), THPolPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerAdminPIR.setDescription('tQosIngPolicerAdminPIR specifies the administrative PIR specified by the user.')
tQosIngPolicerAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 11), THPolCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerAdminCIR.setDescription('tQosIngPolicerAdminCIR specifies the administrative CIR specified by the user.')
tQosIngPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 12), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerCBS.setDescription("tQosIngPolicerCBS specifies the amount of reserved buffer space (in bytes) used to configure the policer's CIR leaky bucket's 'exceed' threshold.")
tQosIngPolicerMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 13), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerMBS.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerMBS.setDescription("tQosIngPolicerMBS specifies the maximum amount of buffer space (in bytes) used to configure the policer's PIR leaky bucket's high priority 'violate' threshold.")
tQosIngPolicerHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 14), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerHiPrioOnly.setDescription("tQosIngPolicerHiPrioOnly specifies the percentage of buffer space for the queue, used to configure the percentage of the policer's PIR leaky bucket's MBS (maximum burst size) that is reserved for high priority traffic.")
tQosIngPolicerPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 15), TPerPacketOffset()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerPktOffset.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerPktOffset.setDescription('tQosIngPolicerPktOffset specifies the packet byte offset for addition of policing information by this policer.')
tQosIngPolicerProfileCapped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerProfileCapped.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerProfileCapped.setDescription("The value of tQosIngPolicerProfileCapped specifies how the explicit in-profile and undetermined profile traffic should be handled at the ingress policer. When the value of tQosIngPolicerProfileCapped is set to 'true', both explicit in-profile and undetermined profile traffic is honored up to CIR, above which it marked as out-of-profile. If CIR is set to zero, then all explicit in-profile and undetermined profile packets, along with the explicit out-of-profile packets are marked as out-of-profile. The default behavior when tQosIngPolicerProfileCapped is set to 'false' is to ignore the CIR output state when an explicit in-profile packet is handled by an ingress policer.")
tQosIngPolicerStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 17), TmnxIngPolicerStatMode().clone('minimal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerStatMode.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerStatMode.setDescription('tQosIngPolicerStatMode specifies the mode of statistics collected by this policer.')
tQosIngPolicerSlopeStartDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerSlopeStartDepth.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerSlopeStartDepth.setDescription('The value of tQosIngPolicerSlopeStartDepth specifies the percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tQosIngPolicerSlopeMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerSlopeMaxDepth.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerSlopeMaxDepth.setDescription('The value of tQosIngPolicerSlopeMaxDepth specifies the percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tQosIngPolicerSlopeMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerSlopeMaxProb.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerSlopeMaxProb.setDescription('The value of tQosIngPolicerSlopeMaxProb specifies the drop probability, as a percentage, when the queue depth reaches tQosIngPolicerSlopeMaxDepth. The drop increases steadily from 0 at the tQosIngPolicerSlopeStartDepth up to the tQosIngPolicerSlopeMaxProb at the tQosIngPolicerSlopeMaxDepth.')
tQosIngPolicerSlopeMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 21), TmnxSlopeMap().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerSlopeMap.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerSlopeMap.setDescription('The value of tQosIngPolicerSlopeMap specifies the slope map to be used with this policer.')
tQosIngPolicerAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 4, 1, 22), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosIngPolicerAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tQosIngPolicerAdvCfgPolicy.setDescription('The value of tQosIngPolicerAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this policer.')
tQosEgrPolicerTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 98), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrPolicerTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerTableLastChanged.setDescription('tQosEgrPolicerTableLastChanged indicates the timestamp of last change to the tQosEgrPolicerTable.')
tQosEgrPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5), )
if mibBuilder.loadTexts: tQosEgrPolicerTable.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerTable.setDescription('tQosEgrPolicerTable defines QOS egress Policer Table for providing, via SNMP, the capability of defining the policers in the egress queue groups. tQosEgrPolicerTable holds a list of all the policers configured in the managed system. Policers must exist in this table before being referenced by the forwarding class mappings within Qos policies.')
tQosEgrPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tQosEgrQGroupName"), (0, "TIMETRA-QOS-MIB", "tQosEgrPolicerId"))
if mibBuilder.loadTexts: tQosEgrPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerEntry.setDescription('tQosEgrPolicerEntry defines an entry in the tQosEgrPolicerTable. Entries are created/deleted in this table by SNMP sets to tQosEgrPolicerRowStatus.')
tQosEgrPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 1), TEgrPolicerId())
if mibBuilder.loadTexts: tQosEgrPolicerId.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerId.setDescription('tQosEgrPolicerId defines the Egress Queue Group Policer identifier. It identifies an egress queue group policer in the managed system.')
tQosEgrPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerRowStatus.setDescription('tQosEgrPolicerRowStatus allows entries to be created and deleted in the tQosEgrPolicerTable.')
tQosEgrPolicerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosEgrPolicerLastChanged.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerLastChanged.setDescription('tQosEgrPolicerLastChanged indicates the value of sysUpTime when the entry was last modified.')
tQosEgrPolicerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerDescr.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerDescr.setDescription('tQosEgrPolicerDescr specifies the description of the policer.')
tQosEgrPolicerPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 5), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerPIRAdaptation.setDescription('The adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosEgrPolicerCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 6), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerCIRAdaptation.setDescription('The adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tQosEgrPolicerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerParent.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerParent.setDescription('tQosEgrPolicerParent specifies the arbiter to which this policer would be feeding')
tQosEgrPolicerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 8), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerLevel.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerLevel.setDescription('tQosEgrPolicerLevel specifies the level of priority while feeding the parent.')
tQosEgrPolicerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 9), TPolicerWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerWeight.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerWeight.setDescription('tQosEgrPolicerWeight specifies the weight that needs to be used by the scheduler to which this queue would be feeding.')
tQosEgrPolicerAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 10), THPolPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerAdminPIR.setDescription('tQosEgrPolicerAdminPIR specifies the administrative PIR specified by the user.')
tQosEgrPolicerAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 11), THPolCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerAdminCIR.setDescription('tQosEgrPolicerAdminCIR specifies the administrative CIR specified by the user.')
tQosEgrPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 12), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerCBS.setDescription("tQosEgrPolicerCBS specifies the amount of reserved buffer space (in bytes) used to configure the policer's CIR leaky bucket's 'exceed' threshold.")
tQosEgrPolicerMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 13), TPlcrBurstSizeBytes().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerMBS.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerMBS.setDescription("tQosEgrPolicerMBS specifies the maximum amount of buffer space (in bytes) used to configure the policer's PIR leaky bucket's high priority 'violate' threshold.")
tQosEgrPolicerHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 14), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerHiPrioOnly.setDescription("tQosEgrPolicerHiPrioOnly specifies the percentage of buffer space for the queue, used to configure the percentage of the policer's PIR leaky bucket's MBS (maximum burst size) that is reserved for high priority traffic.")
tQosEgrPolicerPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 15), TPerPacketOffset()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerPktOffset.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerPktOffset.setDescription('tQosEgrPolicerPktOffset specifies the packet byte offset for addition of policing information by this policer.')
tQosEgrPolicerProfileCapped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerProfileCapped.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerProfileCapped.setDescription("The value of tQosEgrPolicerProfileCapped specifies how the explicit in-profile and undetermined profile traffic should be handled at the egress policer. When the value of tQosEgrPolicerProfileCapped is set to 'true', both explicit in-profile and undetermined profile traffic is honored up to CIR, above which it is marked as out-of-profile. If CIR is set to zero, then all explicit in-profile and undetermined profile packets, along with the explicit out-of-profile packets are marked as out-of-profile. The default behavior when tQosEgrPolicerProfileCapped is set to 'false' is to ignore the CIR output state when an explicit in-profile packet is handled by an egress policer.")
tQosEgrPolicerStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 17), TmnxEgrPolicerStatMode().clone('minimal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerStatMode.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerStatMode.setDescription('tQosEgrPolicerStatMode specifies the mode of statistics collected by this policer.')
tQosEgrPolicerSlopeStartDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerSlopeStartDepth.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerSlopeStartDepth.setDescription('The value of tQosEgrPolicerSlopeStartDepth specifies the percentage of the buffer utilized after which the drop probability starts to rise above 0.')
tQosEgrPolicerSlopeMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerSlopeMaxDepth.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerSlopeMaxDepth.setDescription('The value of tQosEgrPolicerSlopeMaxDepth specifies the percentage of the buffer utilized after which the drop probability is 100 percent. This implies that all packets beyond this point will be dropped.')
tQosEgrPolicerSlopeMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerSlopeMaxProb.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerSlopeMaxProb.setDescription('The value of tQosEgrPolicerSlopeMaxProb specifies the drop probability, as a percentage, when the queue depth reaches tQosEgrPolicerSlopeMaxDepth. The drop increases steadily from 0 at the tQosEgrPolicerSlopeStartDepth up to the tQosEgrPolicerSlopeMaxProb at the tQosEgrPolicerSlopeMaxDepth.')
tQosEgrPolicerSlopeMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 22), TmnxSlopeMap().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerSlopeMap.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerSlopeMap.setDescription('The value of tQosEgrPolicerSlopeMap specifies the slope map to be used with this policer.')
tQosEgrPolicerAdvCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 5, 1, 23), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQosEgrPolicerAdvCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tQosEgrPolicerAdvCfgPolicy.setDescription('The value of tQosEgrPolicerAdvCfgPolicy specifies the name of the advanced configuration policy to be applied with this policer.')
tAdvCfgPolicyTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 100), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAdvCfgPolicyTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgPolicyTblLastChgd.setDescription('The value of tAdvCfgPolicyTblLastChgd indicates the timestamp of last change to the tAdvCfgPolicyTable.')
tAdvCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6), )
if mibBuilder.loadTexts: tAdvCfgPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgPolicyTable.setDescription('The tAdvCfgPolicyTable has an entry for each configuration policy for queue and policer parameters configured on this system.')
tAdvCfgPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tAdvCfgPolicyName"))
if mibBuilder.loadTexts: tAdvCfgPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgPolicyEntry.setDescription('Each row represents a particular configuration policy. Entries are created and deleted by the user.')
tAdvCfgPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tAdvCfgPolicyName.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgPolicyName.setDescription('The value of tAdvCfgPolicyName specifies the name of the advanced configuration policy.')
tAdvCfgPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgPolicyRowStatus.setDescription('The value of tAdvCfgPolicyRowStatus is used for the creation and deletion of advanced configuration policies.')
tAdvCfgLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAdvCfgLastChanged.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgLastChanged.setDescription('The value of tAdvCfgLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tAdvCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgDescription.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgDescription.setDescription('The value of tAdvCfgDescription specifies the description of this advanced configuration policy.')
tAdvCfgChildAdmnPirPrcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgChildAdmnPirPrcnt.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgChildAdmnPirPrcnt.setDescription("The value of tAdvCfgChildAdmnPirPrcnt specifies the percentage of the child's administrative PIR that should be added to the child's offered rate, capped by the child's PIR. When the value of tAdvCfgChildAdmnPirPrcnt is set to '0', offered rate increase from all child policers and queues specified by tAdvCfgPolicyName policy are removed.")
tAdvCfgChildAdminRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 6), TAdvCfgRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgChildAdminRate.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgChildAdminRate.setDescription("The value of tAdvCfgChildAdminRate specifies the explicit number of kilobits-per-second that should be added to the child's offered rate. When the value of tAdvCfgChildAdminRate is set to '0', offered rate increase from all child policers and queues specified by tAdvCfgPolicyName policy are removed.")
tAdvCfgOMGranPirPrcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgOMGranPirPrcnt.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgOMGranPirPrcnt.setDescription("The value of tAdvCfgOMGranPirPrcnt specifies the granularity percentage of the child's administrative PIR that should be used as the threshold sensitivity to offered rate. When the value of tAdvCfgOMGranPirPrcnt is set to '0', it restores the default offered rate sensitivity behavior to all child policers and queues associated with the policy specified by tAdvCfgPolicyName.")
tAdvCfgOMGranRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 8), TAdvCfgRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgOMGranRate.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgOMGranRate.setDescription("The value of tAdvCfgOMGranRate specifies the explicit number of kilobits-per-second that should be used as the child's offered rate change sensitivity value. When the value of tAdvCfgOMGranRate is set to '0', the default offered rate sensitivity behavior to all child policers and queues associated with the policy specified by tAdvCfgPolicyName are restored.")
tAdvCfgMaxDecPirPrcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgMaxDecPirPrcnt.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgMaxDecPirPrcnt.setDescription("The value of tAdvCfgMaxDecPirPrcnt specifies the percentage of the child's administrative PIR that should be used as the decrement limit to offered rate change. When the value of tAdvCfgMaxDecPirPrcnt is set to '10000', any currently configured maximum decrement limit for all child policers and queues associated with the policy specified by tAdvCfgPolicyName are removed.")
tAdvCfgMaxDecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 10), TMaxDecRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgMaxDecRate.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgMaxDecRate.setDescription("The value of tAdvCfgMaxDecRate specifies the explicit number of kilobits-per-second that should be used as the child's offered rate decrement limit value.")
tAdvCfgHiRateHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgHiRateHoldTime.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgHiRateHoldTime.setDescription("The value of tAdvCfgHiRateHoldTime specifies the time period that the current offered rate should be maintained for a child policer or queue. When tAdvCfgHiRateHoldTime is set to '0', any currently configured hold time for all child policers and queues associated with the policy specified by tAdvCfgPolicyName are removed.")
tAdvCfgTimeAvgFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgTimeAvgFactor.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgTimeAvgFactor.setDescription("The value of tAdvCfgTimeAvgFactor is used the weight the new offered rate with a portion of the pervious offered rate. When tAdvCfgTimeAvgFactor is set to '0', time average factor adjustments to new offered rate measurements specified by tAdvCfgPolicyName are removed.")
tAdvCfgSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgSampleInterval.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgSampleInterval.setDescription("The value of tAdvCfgSampleInterval specifies the interval for sampling the child's offered rate. A value of '1' of tAdvCfgSampleInterval represents fastest sampling rate available while a value of '8' represents slowest sampling period available. When tAdvCfgSampleInterval is set to '4', time average factor adjustments to new offered rate measurements specified by tAdvCfgPolicyName are removed.")
tAdvCfgFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgFastStart.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgFastStart.setDescription("The value of tAdvCfgFastStart specifies the whether fast detection of initial bandwidth on a child policer or queue associated with tAdvCfgPolicyName is enabled/disabled. When the tAdvCfgFastStart is set to 'false', the system uses the normal sampling interval behavior of both newly active and currently active children.")
tAdvCfgFastStop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgFastStop.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgFastStop.setDescription("The value of tAdvCfgFastStop specifies the whether fast detection of lack of offered rate on a child policer or queue associated with tAdvCfgPolicyName is enabled/disabled. When the tAdvCfgFastStop is set to 'false', the system uses the normal sampling interval behavior of both newly active and currently active children.")
tAdvCfgAbvOffCapPirPrcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(10000)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgAbvOffCapPirPrcnt.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgAbvOffCapPirPrcnt.setDescription("The value of tAdvCfgAbvOffCapPirPrcnt specifies the percentage of the child's administrative PIR that should be fair share increase limit, capped by the child's PIR. When the value of tAdvCfgAbvOffCapPirPrcnt is set to '0', the system disables the fair share increase function and configures the actual distribution rate. When the value of tAdvCfgAbvOffCapPirPrcnt is set to '10000', the fair share operational PIR rate increase limit from all child policers and queues associated with tAdvCfgPolicyName policy are removed.")
tAdvCfgAbvOffCapRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100000000), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgAbvOffCapRate.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgAbvOffCapRate.setDescription("The value of tAdvCfgAbvOffCapRate specifies the explicit number of kilobits-per-second that should be used as the limit to the child's fair share increase to the operational PIR. When the value of tAdvCfgAbvOffCapRate is set to '0', the system disables the fair share increase function and configures the actual distribution rate. When the value of tAdvCfgAbvOffCapRate is set to '-1', it means maximum rate.")
tAdvCfgBWDGranPirPrcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgBWDGranPirPrcnt.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgBWDGranPirPrcnt.setDescription("The value of tAdvCfgBWDGranPirPrcnt specifies the granularity percentage of the child's administrative PIR that should be used as the rounding step value. When the value of tAdvCfgBWDGranPirPrcnt is set to '0', the system removes the operational PIR rounding behavior from all child policers and queues associated with the policy specified by tAdvCfgPolicyName.")
tAdvCfgBWDGranRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 19), TAdvCfgRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgBWDGranRate.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgBWDGranRate.setDescription("The value of tAdvCfgBWDGranRate specifies the explicit number of kilobits-per-second that should be used as the child's rounding step value. When the value of tAdvCfgBWDGranRate is set to '0', the system removes the operational PIR rounding behavior from all child policers and queues associated with the policy specified by tAdvCfgPolicyName.")
tAdvCfgMinOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgMinOnly.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgMinOnly.setDescription("The value of tAdvCfgMinOnly specifies the system to interpret the increase in tAdvCfgChildAdminRate as a minimum offered rate. When the tAdvCfgFastStop is set to 'false', the system uses the specified increase in tAdvCfgChildAdmnPirPrcnt or tAdvCfgChildAdminRate as a minimum offered rate even for inactive queues or policers associated with tAdvCfgPolicyName.")
tAdvCfgDecOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 27, 6, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAdvCfgDecOnly.setStatus('current')
if mibBuilder.loadTexts: tAdvCfgDecOnly.setDescription("The value of tAdvCfgDecOnly specifies the tAdvCfgTimeAvgFactor adjustment to be applied if the new offered rate is decreasing compared to the previous offered rate. If the new offered rate is greater than the previous offered rate, the adjustment is not applied. When the tAdvCfgDecOnly is set to 'false', it has no impact on tAdvCfgTimeAvgFactor adjustment.")
tPortSchPlcyGrpTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 91), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortSchPlcyGrpTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpTblLastChgd.setDescription('tPortSchPlcyGrpTblLastChgd indicates the timestamp of last change to the tPortSchPlcyGrpTable.')
tPortSchPlcyGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 5), )
if mibBuilder.loadTexts: tPortSchPlcyGrpTable.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpTable.setDescription('The tPortSchPlcyGrpTable has an entry for each port scheduler group configured on this system.')
tPortSchPlcyGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 5, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tPortSchedulerPlcyName"), (0, "TIMETRA-QOS-MIB", "tPortSchPlcyGrpName"))
if mibBuilder.loadTexts: tPortSchPlcyGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpEntry.setDescription('Each row represents a particular port scheduler group. Entries are created and deleted by the user.')
tPortSchPlcyGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortSchPlcyGrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpName.setDescription('The value of tPortSchPlcyGrpName specifies the name of the port scheduler group.')
tPortSchPlcyGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpRowStatus.setDescription('The value of tPortSchPlcyGrpRowStatus is used for the creation and deletion of port scheduler policies.')
tPortSchPlcyGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortSchPlcyGrpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpLastChanged.setDescription('The value of tPortSchPlcyGrpLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tPortSchPlcyGrpAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 5, 1, 4), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyGrpAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpAdminPIR.setDescription('The value of tPortSchPlcyGrpAdminPIR specifies the total bandwidth limit, Admin PIR of this port scheduler group.')
tPortSchPlcyGrpAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 5, 1, 5), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyGrpAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyGrpAdminCIR.setDescription('The value of tPortSchPlcyGrpAdminCIR specifies the within-cir bandwidth limit of this port scheduler group.')
tPortSchPlcyLvlGrpTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 92), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpTblLastChgd.setDescription('tPortSchPlcyLvlGrpTblLastChgd indicates the timestamp of last change to the tPortSchPlcyLvlGrpTable.')
tPortSchPlcyLvlGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6), )
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpTable.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpTable.setDescription('The tPortSchPlcyLvlGrpTable has an entry for each port scheduler configured on this system for priority level group objects.')
tPortSchPlcyLvlGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1), )
tPortSchedulerPlcyEntry.registerAugmentions(("TIMETRA-QOS-MIB", "tPortSchPlcyLvlGrpEntry"))
tPortSchPlcyLvlGrpEntry.setIndexNames(*tPortSchedulerPlcyEntry.getIndexNames())
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpEntry.setDescription('Each row represents a particular port scheduler specific priority level group information.')
tPortSchPlcyLvlGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvlGrpLastChanged.setDescription('The value of tPortSchPlcyLvlGrpLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tPortSchPlcyLvl1GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 2), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl1GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl1GrpName.setDescription("The value of tPortSchPlcyLvl1GrpName specifies the group associated with this scheduler policy for priority level set to '1'.")
tPortSchPlcyLvl2GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl2GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl2GrpName.setDescription("The value of tPortSchPlcyLvl2GrpName specifies the group associated with this scheduler policy for priority level set to '2'.")
tPortSchPlcyLvl3GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl3GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl3GrpName.setDescription("The value of tPortSchPlcyLvl3GrpName specifies the group associated with this scheduler policy for priority level set to '3'.")
tPortSchPlcyLvl4GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl4GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl4GrpName.setDescription("The value of tPortSchPlcyLvl4GrpName specifies the group associated with this scheduler policy for priority level set to '4'.")
tPortSchPlcyLvl5GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 6), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl5GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl5GrpName.setDescription("The value of tPortSchPlcyLvl5GrpName specifies the group associated with this scheduler policy for priority level set to '5'.")
tPortSchPlcyLvl6GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl6GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl6GrpName.setDescription("The value of tPortSchPlcyLvl6GrpName specifies the group associated with this scheduler policy for priority level set to '6'.")
tPortSchPlcyLvl7GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl7GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl7GrpName.setDescription("The value of tPortSchPlcyLvl7GrpName specifies the group associated with this scheduler policy for priority level set to '7'.")
tPortSchPlcyLvl8GrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl8GrpName.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl8GrpName.setDescription("The value of tPortSchPlcyLvl8GrpName specifies the group associated with this scheduler policy for priority level set to '8'.")
tPortSchPlcyLvl1GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 10), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl1GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl1GrpWeight.setDescription("The value of tPortSchPlcyLvl1GrpWeight specifies the weight associated with the group tPortSchPlcyLvl1GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl1GrpName is set to a default value.")
tPortSchPlcyLvl2GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 11), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl2GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl2GrpWeight.setDescription("The value of tPortSchPlcyLvl2GrpWeight specifies the weight associated with the group tPortSchPlcyLvl2GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl2GrpName is set to a default value.")
tPortSchPlcyLvl3GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 12), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl3GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl3GrpWeight.setDescription("The value of tPortSchPlcyLvl1GrpWeight specifies the weight associated with the group tPortSchPlcyLvl3GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl3GrpName is set to a default value.")
tPortSchPlcyLvl4GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 13), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl4GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl4GrpWeight.setDescription("The value of tPortSchPlcyLvl4GrpWeight specifies the weight associated with the group tPortSchPlcyLvl4GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl4GrpName is set to a default value.")
tPortSchPlcyLvl5GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 14), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl5GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl5GrpWeight.setDescription("The value of tPortSchPlcyLvl5GrpWeight specifies the weight associated with the group tPortSchPlcyLvl5GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl5GrpName is set to a default value.")
tPortSchPlcyLvl6GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 15), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl6GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl6GrpWeight.setDescription("The value of tPortSchPlcyLvl6GrpWeight specifies the weight associated with the group tPortSchPlcyLvl6GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl6GrpName is set to a default value.")
tPortSchPlcyLvl7GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 16), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl7GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl7GrpWeight.setDescription("The value of tPortSchPlcyLvl7GrpWeight specifies the weight associated with the group tPortSchPlcyLvl7GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl7GrpName is set to a default value.")
tPortSchPlcyLvl8GrpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 6, 1, 17), TNonZeroWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchPlcyLvl8GrpWeight.setStatus('current')
if mibBuilder.loadTexts: tPortSchPlcyLvl8GrpWeight.setDescription("The value of tPortSchPlcyLvl8GrpWeight specifies the weight associated with the group tPortSchPlcyLvl8GrpName. An 'inconsistentValue' error is returned when this object is set to non-default value and tPortSchPlcyLvl8GrpName is set to a default value.")
tHsmdaWrrPolicyTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 93), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaWrrPolicyTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyTblLastChgd.setDescription('The value of tHsmdaWrrPolicyTblLastChgd indicates the timestamp of last change to the tHsmdaWrrPolicyTable.')
tHsmdaWrrPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1), )
if mibBuilder.loadTexts: tHsmdaWrrPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyTable.setDescription('The tHsmdaWrrPolicyTable contains the information of the Weighted Round Robin (WRR) policies configured on HSDMA queues.')
tHsmdaWrrPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tHsmdaWrrPolicyName"))
if mibBuilder.loadTexts: tHsmdaWrrPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyEntry.setDescription('Each row in tHsmdaWrrPolicyEntry represents a HSMDA Weighted Round Robin (WRR) policy specified by tHsmdaWrrPolicyName.')
tHsmdaWrrPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tHsmdaWrrPolicyName.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyName.setDescription('The value of tHsmdaWrrPolicyName specifies the name of the Weighted Round Robin (WRR) policy associated with this HSDMA queue.')
tHsmdaWrrPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaWrrPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyRowStatus.setDescription('The value of tHsmdaWrrPolicyRowStatus is used for the creation and deletion of entries in the tHsmdaWrrPolicyTable.')
tHsmdaWrrPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tHsmdaWrrPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyLastChanged.setDescription('The value of tHsmdaWrrPolicyLastChanged indicates the sysUpTime for the last change to this row.')
tHsmdaWrrPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaWrrPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyDescription.setDescription('The value of tHsmdaWrrPolicyDescription specifies the description of the Weighted Round Robin (WRR) policy on this HSMDA queue.')
tHsmdaWrrPolicyIncludeQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1, 5), THsmdaPolicyIncludeQueues().clone('q1to2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaWrrPolicyIncludeQueues.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyIncludeQueues.setDescription('The value of tHsmdaWrrPolicyIncludeQueues specifies the queues that can be scheduled in the same class in a Weighted Round Robin (WRR) fashion within the HSMDA scheduler.')
tHsmdaWrrPolicySchedUsingClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1, 6), THsmdaPolicyScheduleClass().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaWrrPolicySchedUsingClass.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicySchedUsingClass.setDescription('The value of tHsmdaWrrPolicySchedUsingClass specifies which class to schedule the queues specified by tHsmdaWrrPolicyIncludeQueues within the HSMDA scheduler.')
tHsmdaWrrPolicyAggWeightAtClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 28, 1, 1, 7), THsmdaWeightClass().clone('class1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tHsmdaWrrPolicyAggWeightAtClass.setStatus('current')
if mibBuilder.loadTexts: tHsmdaWrrPolicyAggWeightAtClass.setDescription('The value of tHsmdaWrrPolicyAggWeightAtClass specifies the weight assigned to the group of queues specified by tHsmdaWrrPolicyIncludeQueues within the HSMDA scheduler.')
tNetworkIngressFCTableLstChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 101), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressFCTableLstChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressFCTableLstChanged.setDescription('The value of tNetworkIngressFCTableLstChanged indicates the timestamp of last change to the tNetworkIngressFCTable.')
tNetworkIngressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 8), )
if mibBuilder.loadTexts: tNetworkIngressFCTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressFCTable.setDescription("Information about all network policies' ingress FC traffic disposition.")
tNetworkIngressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 8, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "TIMETRA-QOS-MIB", "tNetworkIngressFCName"))
if mibBuilder.loadTexts: tNetworkIngressFCEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressFCEntry.setDescription("Information about a particular network policy's ingress per-forwarding-class traffic disposition. Entries are created/deleted as an action of creating/deleting a row in the tNetworkPolicyTable. There is no StorageType object, entries have a presumed StorageType of nonVolatile.")
tNetworkIngressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 8, 1, 1), TFCName())
if mibBuilder.loadTexts: tNetworkIngressFCName.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressFCName.setDescription('The value of tNetworkIngressFCName specifies the name of the forwarding class (FC).')
tNetworkIngressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 8, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressFCLastChanged.setDescription('The value of tNetworkIngressFCLastChanged indicates the sysUpTime for the last change to this entry.')
tNetworkIngressFCMultiCastPlcr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 8, 1, 3), TIngPolicerIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkIngressFCMultiCastPlcr.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressFCMultiCastPlcr.setDescription('The value of tNetworkIngressFCMultiCastPlcr specifies the policer to be used for multicast traffic for this forwarding-class.')
tNetworkIngressFCUniCastPlcr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 8, 1, 4), TIngPolicerIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkIngressFCUniCastPlcr.setStatus('current')
if mibBuilder.loadTexts: tNetworkIngressFCUniCastPlcr.setDescription('The value of tNetworkIngressFCUniCastPlcr specifies the policer to be used for unicast traffic for this forwarding-class.')
tNetworkEgrDSCPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 102), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgrDSCPTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrDSCPTableLastChanged.setDescription('The value of tNetworkEgrDSCPTableLastChanged indicates the timestamp of last change to the tNetworkEgressDSCPTable.')
tNetworkEgressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 9), )
if mibBuilder.loadTexts: tNetworkEgressDSCPTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressDSCPTable.setDescription('tNetworkEgressDSCPTable lists all DSCP entries for all network egress policies.')
tNetworkEgressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 9, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "TIMETRA-QOS-MIB", "tNetworkEgressDSCP"))
if mibBuilder.loadTexts: tNetworkEgressDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressDSCPEntry.setDescription('The tNetworkEgressDSCPEntry defines a particular DSCP entry for a network egress policy. Some default entries are created by the agent for the default network policy (1). These cannot be deleted or modified. Other entries are created/deleted by user. In the event that one policy has multiple entries, and the tNetworkEgressDSCP values are the same, only one queue will be created (the queue for the lexicographically first tNetworkEgressDSCP).')
tNetworkEgressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 9, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tNetworkEgressDSCP.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressDSCP.setDescription('The value of tNetworkEgressDSCP indicates the DSCP value for which the mapping is done. It is used as a secondary index for tNetworkEgressDSCPTable.')
tNetworkEgressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkEgressDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressDSCPRowStatus.setDescription('The value of tNetworkEgressDSCPRowStatus is used for the creation and the deletion of rows in this table. The value of tNetworkEgressDSCPProfile must be specified when row is created.')
tNetworkEgressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressDSCPLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressDSCPLastChanged.setDescription('The value of tNetworkEgressDSCPLastChanged indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tNetworkEgressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 9, 1, 4), TFCName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkEgressDSCPFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressDSCPFC.setDescription('The value of tNetworkEgressDSCPFC will overwrite the forwarding class derived from ingress. The new forwarding class is used for egress remarking and queue mapping decisions.')
tNetworkEgressDSCPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 9, 1, 5), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkEgressDSCPProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressDSCPProfile.setDescription('The value of tNetworkEgressDSCPProfile specifies the egress classification rule that will overwrite the profile of the packet derived from the ingress. The new profile value is used for egress remarking and queue congestion behavior. There is no DEFVAL for tNetworkEgressDSCPProfile. It must be set at the time of row creation.')
tNetworkEgrPrecTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 103), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgrPrecTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgrPrecTableLastChanged.setDescription('The value of tNetworkEgrPrecTableLastChanged indicates the timestamp of last change to the tNetworkEgressPrecTable.')
tNetworkEgressPrecTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 10), )
if mibBuilder.loadTexts: tNetworkEgressPrecTable.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressPrecTable.setDescription('The tNetworkEgressPrecTable table maintains the mapping of a particular precedence value into a forwarding class')
tNetworkEgressPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 10, 1), ).setIndexNames((0, "TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "TIMETRA-QOS-MIB", "tNetworkEgressPrecValue"))
if mibBuilder.loadTexts: tNetworkEgressPrecEntry.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressPrecEntry.setDescription("The tNetworkEgressPrecEntry defines a particular network egress policy's IP precedence values to forwarding class mappings. Entries are created and deleted by user.")
tNetworkEgressPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 10, 1, 1), TPrecValue())
if mibBuilder.loadTexts: tNetworkEgressPrecValue.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressPrecValue.setDescription('The value of tNetworkEgressPrecValue indicates the precedence value for which the mapping is done. It is used as a secondary index for tNetworkEgressPrecTable.')
tNetworkEgressPrecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkEgressPrecRowStatus.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressPrecRowStatus.setDescription('The value of tNetworkEgressPrecRowStatus is used for the creation and the deletion of rows in this table. The value of tNetworkEgressPrecProfile must be specified when row is created.')
tNetworkEgressPrecLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressPrecLastChanged.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressPrecLastChanged.setDescription('The value of tNetworkEgressPrecLastChanged indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tNetworkEgressPrecFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 10, 1, 4), TFCName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkEgressPrecFC.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressPrecFC.setDescription('The value of tNetworkEgressPrecFC will overwrite the forwarding class derived from egress. The new forwarding class is used for egress remarking and queue mapping decisions.')
tNetworkEgressPrecProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 10, 1, 5), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkEgressPrecProfile.setStatus('current')
if mibBuilder.loadTexts: tNetworkEgressPrecProfile.setDescription('The value of tNetworkEgressPrecProfile specifies the egress classification rule that will overwrite the profile of the packet derived from the egress. The new profile value is used for egress remarking and queue congestion behavior. There is no DEFVAL for tNetworkEgressPrecProfile. It must be set at the time of row creation.')
tmnxQosCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1))
tmnxQosGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2))
tmnxQos7450V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 4)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressR2r1Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkR2r1Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V4v0Compliance = tmnxQos7450V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V4v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7450 ESS series systems release R4.0.')
tmnxQos7750V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 5)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressR2r1Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkR2r1Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerGroup"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV3v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V4v0Compliance = tmnxQos7750V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7750V4v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent SROS series systems release R4.0.')
tmnxQos7450V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 6)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V5v0Compliance = tmnxQos7450V5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V5v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7450 ESS series systems release R5.0.')
tmnxQos7750V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 7)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V5v0Compliance = tmnxQos7750V5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7750V5v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent SROS series systems release R5.0.')
tmnxQos7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 8)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V6v0Compliance = tmnxQos7450V6v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V6v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7450 ESS series systems release R6.0.')
tmnxQos7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 9)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V6v0Compliance = tmnxQos7750V6v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7750V6v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent SROS series systems release R6.0.')
tmnxQos7450V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 10)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V6v1Compliance = tmnxQos7450V6v1Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V6v1Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7450 ESS series systems release R6.1.')
tmnxQos77x0V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 11)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos77x0V6v1Compliance = tmnxQos77x0V6v1Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos77x0V6v1Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent SROS series systems release R6.1.')
tmnxQos7450V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 12)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueObjGroup"), ("TIMETRA-QOS-MIB", "tQosQGrpFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapAtmV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgrQWredGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V7v0Compliance = tmnxQos7450V7v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V7v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7450 ESS series systems release R6.1.')
tmnxQos77x0V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 13)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueObjGroup"), ("TIMETRA-QOS-MIB", "tQosQGrpFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapAtmV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgrQWredGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos77x0V7v0Compliance = tmnxQos77x0V7v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos77x0V7v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7750 SROS series systems release R6.1.')
tmnxQos7450V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 14)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueObjV8v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapAtmV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgrQWredGroup"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPortSchPlcyGrpGroup"), ("TIMETRA-QOS-MIB", "tmnxQosBurstLimitGroup"), ("TIMETRA-QOS-MIB", "tQosFCQGrpFC8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V8v0Compliance = tmnxQos7450V8v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos7450V8v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7450 ESS series systems release R8.0.')
tmnxQos77x0V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 15)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueObjV8v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapAtmV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgrQWredGroup"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerV8v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPortSchPlcyGrpGroup"), ("TIMETRA-QOS-MIB", "tmnxQosBurstLimitGroup"), ("TIMETRA-QOS-MIB", "tQosFCQGrpFC8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos77x0V8v0Compliance = tmnxQos77x0V8v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos77x0V8v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent SROS series systems release R8.0.')
tmnxQos77x0V9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 16)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueObjV8v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapAtmV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgrQWredGroup"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerV9v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPortSchPlcyGrpGroup"), ("TIMETRA-QOS-MIB", "tmnxQosBurstLimitGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMacCritVidFltrV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos77x0V9v0Compliance = tmnxQos77x0V9v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQos77x0V9v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent SROS series systems release R9.0.')
tmnxQos7450V10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 17)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueObjV8v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapAtmV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgrQWredGroup"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPortSchPlcyGrpGroup"), ("TIMETRA-QOS-MIB", "tmnxQosBurstLimitGroup"), ("TIMETRA-QOS-MIB", "tQosFCQGrpFC8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPolicyV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerSlopeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V10v0Compliance = tmnxQos7450V10v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxQos7450V10v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent 7450 ESS series systems release R10.0.')
tmnxQos77x0V10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 18)).setObjects(("TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSchedulerV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosAtmTdpV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcMlpppEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosQueueObjV8v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpFCGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapAtmV7v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrIngrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMcFrEgrGroup"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgrQWredGroup"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerV9v0Group"), ("TIMETRA-QOS-MIB", "tQosQGrpV8v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPortSchPlcyGrpGroup"), ("TIMETRA-QOS-MIB", "tmnxQosBurstLimitGroup"), ("TIMETRA-QOS-MIB", "tmnxQosMacCritVidFltrV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapEgressV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosSapIngressV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNamedPoolV9v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPolicyV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosQueueGrpPolcrV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosEgrReClassifyV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosPolicerSlopeGroup"), ("TIMETRA-QOS-MIB", "tmnxQosAdvConfigV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosHsmdaV10v0Group"), ("TIMETRA-QOS-MIB", "tmnxQosNetworkV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos77x0V10v0Compliance = tmnxQos77x0V10v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxQos77x0V10v0Compliance.setDescription('The compliance statement for management of QOS features on Alcatel-Lucent SROS series systems release R10.0.')
tmnxQosGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 1)).setObjects(("TIMETRA-QOS-MIB", "tQosDomainLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosGlobalGroup = tmnxQosGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosGlobalGroup.setDescription('The group of objects supporting general management of QOS features on Alcatel-Lucent SROS series systems.')
tmnxQosDSCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 2)).setObjects(("TIMETRA-QOS-MIB", "tDSCPNameRowStatus"), ("TIMETRA-QOS-MIB", "tDSCPNameStorageType"), ("TIMETRA-QOS-MIB", "tDSCPNameDscpValue"), ("TIMETRA-QOS-MIB", "tDSCPNameLastChanged"), ("TIMETRA-QOS-MIB", "tDSCPNameTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosDSCPGroup = tmnxQosDSCPGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosDSCPGroup.setDescription('The group of objects supporting management of Differential Services Code Points on Alcatel-Lucent SROS series systems.')
tmnxQosFCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 3)).setObjects(("TIMETRA-QOS-MIB", "tFCRowStatus"), ("TIMETRA-QOS-MIB", "tFCStorageType"), ("TIMETRA-QOS-MIB", "tFCValue"), ("TIMETRA-QOS-MIB", "tFCNameLastChanged"), ("TIMETRA-QOS-MIB", "tFCNameTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosFCGroup = tmnxQosFCGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosFCGroup.setDescription('The group of objects supporting management of Forwarding Classes on Alcatel-Lucent SROS series systems.')
tmnxQosSlopeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 7)).setObjects(("TIMETRA-QOS-MIB", "tSlopeRowStatus"), ("TIMETRA-QOS-MIB", "tSlopeDescription"), ("TIMETRA-QOS-MIB", "tSlopeHiAdminStatus"), ("TIMETRA-QOS-MIB", "tSlopeHiStartAverage"), ("TIMETRA-QOS-MIB", "tSlopeHiMaxAverage"), ("TIMETRA-QOS-MIB", "tSlopeHiMaxProbability"), ("TIMETRA-QOS-MIB", "tSlopeLoAdminStatus"), ("TIMETRA-QOS-MIB", "tSlopeLoStartAverage"), ("TIMETRA-QOS-MIB", "tSlopeLoMaxAverage"), ("TIMETRA-QOS-MIB", "tSlopeLoMaxProbability"), ("TIMETRA-QOS-MIB", "tSlopeTimeAvgFactor"), ("TIMETRA-QOS-MIB", "tSlopeLastChanged"), ("TIMETRA-QOS-MIB", "tSlopePolicyTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSlopeGroup = tmnxQosSlopeGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSlopeGroup.setDescription('The group of objects supporting management of Slope policies on Alcatel-Lucent SROS series systems.')
tmnxQosSchedulerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 8)).setObjects(("TIMETRA-QOS-MIB", "tSchedulerPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyDescription"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerRowStatus"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerDescription"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerParent"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerLevel"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerWeight"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIRLevel"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIRWeight"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerSummedCIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerLastChanged"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSchedulerGroup = tmnxQosSchedulerGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSchedulerGroup.setDescription('The group of objects supporting management of Scheduler policies on Alcatel-Lucent SROS series systems.')
tQosObsoleteObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 10)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressQueueOperPIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueOperCIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueOperPIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueOperCIR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tQosObsoleteObjectsGroup = tQosObsoleteObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: tQosObsoleteObjectsGroup.setDescription('The group of obsolete objects in the TIMETRA-QOS-MIB.')
tmnxQosSapEgressR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 12)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressScope"), ("TIMETRA-QOS-MIB", "tSapEgressDescription"), ("TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"), ("TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressR2r1Group = tmnxQosSapEgressR2r1Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapEgressR2r1Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosNetworkR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 13)).setObjects(("TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkR2r1Group = tmnxQosNetworkR2r1Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosNetworkR2r1Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosAtmTdpV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 15)).setObjects(("TIMETRA-QOS-MIB", "tAtmTdpSir"), ("TIMETRA-QOS-MIB", "tAtmTdpPir"), ("TIMETRA-QOS-MIB", "tAtmTdpMbs"), ("TIMETRA-QOS-MIB", "tAtmTdpMir"), ("TIMETRA-QOS-MIB", "tAtmTdpShaping"), ("TIMETRA-QOS-MIB", "tAtmTdpServCat"), ("TIMETRA-QOS-MIB", "tAtmTdpLastChanged"), ("TIMETRA-QOS-MIB", "tAtmTdpDescription"), ("TIMETRA-QOS-MIB", "tAtmTdpRowStatus"), ("TIMETRA-QOS-MIB", "tAtmTdpDescrType"), ("TIMETRA-QOS-MIB", "tAtmTdpCdvt"), ("TIMETRA-QOS-MIB", "tAtmTdpPolicing"), ("TIMETRA-QOS-MIB", "tAtmTdpIndexNext"), ("TIMETRA-QOS-MIB", "tAtmTdpsMaxSupported"), ("TIMETRA-QOS-MIB", "tAtmTdpsCurrentlyConfigured"), ("TIMETRA-QOS-MIB", "tAtmTdpTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAtmTdpV3v0Group = tmnxQosAtmTdpV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosAtmTdpV3v0Group.setDescription('The group of objects for ATM Traffic Descriptor Profiles on Alcatel-Lucent SROS series systems release 3.0.')
tmnxQosSapIpv6FilterR4r0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 16)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaNextHeader"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDSCP"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIpv6FilterR4r0Group = tmnxQosSapIpv6FilterR4r0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapIpv6FilterR4r0Group.setDescription('The group of objects for Qos Policies related to IPv6 on Alcatel-Lucent SROS series systems release 4.0.')
tmnxQosQueueV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 18)).setObjects(("TIMETRA-QOS-MIB", "tSharedQueuePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tSharedQueuePolicyDescription"), ("TIMETRA-QOS-MIB", "tSharedQueuePolicyLastChanged"), ("TIMETRA-QOS-MIB", "tSharedQueuePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tSharedQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSharedQueuePoolName"), ("TIMETRA-QOS-MIB", "tSharedQueueParent"), ("TIMETRA-QOS-MIB", "tSharedQueueLevel"), ("TIMETRA-QOS-MIB", "tSharedQueueWeight"), ("TIMETRA-QOS-MIB", "tSharedQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSharedQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSharedQueueExpedite"), ("TIMETRA-QOS-MIB", "tSharedQueueCIR"), ("TIMETRA-QOS-MIB", "tSharedQueuePIR"), ("TIMETRA-QOS-MIB", "tSharedQueueCBS"), ("TIMETRA-QOS-MIB", "tSharedQueueMBS"), ("TIMETRA-QOS-MIB", "tSharedQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSharedQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSharedQueueIsMultipoint"), ("TIMETRA-QOS-MIB", "tSharedQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSharedQueueFCRowStatus"), ("TIMETRA-QOS-MIB", "tSharedQueueFCQueue"), ("TIMETRA-QOS-MIB", "tSharedQueueFCLastChanged"), ("TIMETRA-QOS-MIB", "tSharedQueueFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSharedQueueFCMCastQueue"), ("TIMETRA-QOS-MIB", "tSharedQueueFCBCastQueue"), ("TIMETRA-QOS-MIB", "tSharedQueueFCUnknownQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosQueueV4v0Group = tmnxQosQueueV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosQueueV4v0Group.setDescription('The group of objects supporting management of QoS queue policies on Alcatel-Lucent SROS series systems release 4.0.')
tmnxQosSapIngressV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 19)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressScope"), ("TIMETRA-QOS-MIB", "tSapIngressDescription"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMBS"), ("TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV4v0Group = tmnxQosSapIngressV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapIngressV4v0Group.setDescription('The group of objects supporting management of SAP ingress QoS policies on Alcatel-Lucent SROS series systems release 4.0.')
tmnxQosSchedulerV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 20)).setObjects(("TIMETRA-QOS-MIB", "tSchedulerPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyDescription"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerRowStatus"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerDescription"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerParent"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerLevel"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerWeight"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIRLevel"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIRWeight"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerSummedCIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerLastChanged"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerUsePortParent"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortLvl"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortWght"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRLvl"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRWght"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerTableLastChanged"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyRowStatus"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyDescription"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLastChanged"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyMaxRate"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl1PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl1CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl2PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl2CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl3PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl3CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl4PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl4CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl5PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl5CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl6PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl6CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl7PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl7CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl8PIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl8CIR"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanLvl"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanWeight"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRLvl"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRWght"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSchedulerV5v0Group = tmnxQosSchedulerV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSchedulerV5v0Group.setDescription('The group of objects supporting management of Scheduler policies on Alcatel-Lucent SROS series systems.')
tmnxQosSapEgressV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 21)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressScope"), ("TIMETRA-QOS-MIB", "tSapEgressDescription"), ("TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"), ("TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortLvl"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortWght"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortAvgOverhead"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV5v0Group = tmnxQosSapEgressV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapEgressV5v0Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosNetworkV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 22)).setObjects(("TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortLvl"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortWght"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortAvgOverhead"), ("TIMETRA-QOS-MIB", "tNetworkQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV5v0Group = tmnxQosNetworkV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosNetworkV5v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosHsmdaV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 23)).setObjects(("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyDescription"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyMaxRate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp1Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp2Rate"), ("TIMETRA-QOS-MIB", "tSapEgressFCHsmdaQueue"), ("TIMETRA-QOS-MIB", "tSapEgressFCDot1PHsmdaProfile"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueCIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaPacketOffset"), ("TIMETRA-QOS-MIB", "tSapIngressDefFCHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaMCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaBCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressPrecHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueCIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePoliced"), ("TIMETRA-QOS-MIB", "tHsmdaPoolPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaPoolLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaPoolDescription"), ("TIMETRA-QOS-MIB", "tHsmdaPoolSystemReserve"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot1AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot2AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot3AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot4AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot5AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot6AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot7AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot8AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass1Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass1AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass2Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass2AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass3Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass3AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass4Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass4AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass5Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass5AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass6Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass6AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass7Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass7AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass8Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass8AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaSlopePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeDescription"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeQueueMbs"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiAdminStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiStartDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiMaxDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiMaxProbability"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoAdminStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoStartDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoMaxDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoMaxProbability"), ("TIMETRA-QOS-MIB", "tSapIngrHsmdaQueueTblLastChngd"), ("TIMETRA-QOS-MIB", "tSapEgrHsmdaQueueTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSchedPlcyTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSchedPlcyGrpTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaPoolPlcyTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSlopePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCritHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPHsmdaCntrOverride"), ("TIMETRA-QOS-MIB", "tSapEgressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressPrecHsmdaCntrOverride"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDescription"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritActionHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpAddrType"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpAddrType"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpMask"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritProtocol"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDSCP"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritFragment"), ("TIMETRA-QOS-MIB", "tSapEgressMatchCriteria"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaPacketOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosHsmdaV6v0Group = tmnxQosHsmdaV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosHsmdaV6v0Group.setDescription('The group of objects supporting management of QoS policies for HSMDA MDAs on Alcatel-Lucent SROS series systems release 6.0.')
tmnxQosAtmTdpV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 24)).setObjects(("TIMETRA-QOS-MIB", "tAtmTdpSir"), ("TIMETRA-QOS-MIB", "tAtmTdpPir"), ("TIMETRA-QOS-MIB", "tAtmTdpMbs"), ("TIMETRA-QOS-MIB", "tAtmTdpMir"), ("TIMETRA-QOS-MIB", "tAtmTdpShaping"), ("TIMETRA-QOS-MIB", "tAtmTdpServCat"), ("TIMETRA-QOS-MIB", "tAtmTdpLastChanged"), ("TIMETRA-QOS-MIB", "tAtmTdpDescription"), ("TIMETRA-QOS-MIB", "tAtmTdpRowStatus"), ("TIMETRA-QOS-MIB", "tAtmTdpDescrType"), ("TIMETRA-QOS-MIB", "tAtmTdpCdvt"), ("TIMETRA-QOS-MIB", "tAtmTdpPolicing"), ("TIMETRA-QOS-MIB", "tAtmTdpCLPTagging"), ("TIMETRA-QOS-MIB", "tAtmTdpIndexNext"), ("TIMETRA-QOS-MIB", "tAtmTdpsMaxSupported"), ("TIMETRA-QOS-MIB", "tAtmTdpsCurrentlyConfigured"), ("TIMETRA-QOS-MIB", "tAtmTdpTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAtmTdpV5v0Group = tmnxQosAtmTdpV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosAtmTdpV5v0Group.setDescription('The group of objects for ATM Traffic Descriptor Profiles on Alcatel-Lucent SROS series systems release 5.0.')
tmnxQosSapIngressV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 25)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressScope"), ("TIMETRA-QOS-MIB", "tSapIngressDescription"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMBS"), ("TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePoolName"), ("TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCDE1OutOfProfile"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV6v0Group = tmnxQosSapIngressV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapIngressV6v0Group.setDescription('The group of objects supporting management of SAP ingress QoS policies on Alcatel-Lucent SROS series systems release 6.0.')
tmnxQosSapEgressV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 26)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressScope"), ("TIMETRA-QOS-MIB", "tSapEgressDescription"), ("TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCDot1PInProfile"), ("TIMETRA-QOS-MIB", "tSapEgressFCDot1POutProfile"), ("TIMETRA-QOS-MIB", "tSapEgressFCForceDEValue"), ("TIMETRA-QOS-MIB", "tSapEgressFCDEMark"), ("TIMETRA-QOS-MIB", "tSapEgressFCInProfDscp"), ("TIMETRA-QOS-MIB", "tSapEgressFCOutProfDscp"), ("TIMETRA-QOS-MIB", "tSapEgressFCInProfPrec"), ("TIMETRA-QOS-MIB", "tSapEgressFCOutProfPrec"), ("TIMETRA-QOS-MIB", "tSapEgressQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortLvl"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortWght"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortAvgOverhead"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV6v0Group = tmnxQosSapEgressV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapEgressV6v0Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosNetworkV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 27)).setObjects(("TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCForceDEValue"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDEMark"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortLvl"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortWght"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortAvgOverhead"), ("TIMETRA-QOS-MIB", "tNetworkQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV6v0Group = tmnxQosNetworkV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosNetworkV6v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosFrameBasedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 28)).setObjects(("TIMETRA-QOS-MIB", "tSchedulerPolicyFrameBasedAccnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosFrameBasedV6v0Group = tmnxQosFrameBasedV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosFrameBasedV6v0Group.setDescription('The group of objects supporting management of frame-based queue accounting on Alcatel-Lucent SROS series systems release 6.0.')
tmnxQosObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 29)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosObsoletedV6v0Group = tmnxQosObsoletedV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosObsoletedV6v0Group.setDescription('The group of obsolete objects for the QoS on Alcatel-Lucent SROS series systems.')
tmnxQosNamedPoolPolicyV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 30)).setObjects(("TIMETRA-QOS-MIB", "tNamedPoolPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNamedPoolPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNamedPoolPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNamedPoolPolicyDescription"), ("TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1DefaultWeight"), ("TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1MdaWeight"), ("TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1PortWeight"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolTableLastChanged"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolRowStatus"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolLastChanged"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolDescription"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolNetworkAllocWeight"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolAccessAllocWeight"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolSlopePolicy"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolReservedCbs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNamedPoolPolicyV6v0Group = tmnxQosNamedPoolPolicyV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosNamedPoolPolicyV6v0Group.setDescription('The group of objects for the named pool policy on Alcatel-Lucent SROS series systems.')
tmnxQosMcMlpppIngrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 31)).setObjects(("TIMETRA-QOS-MIB", "tMcMlpppIngrProfDescription"), ("TIMETRA-QOS-MIB", "tMcMlpppIngrProfLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppIngrProfRowStatus"), ("TIMETRA-QOS-MIB", "tMcMlpppIngrProfTableLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppIngrClassReassemblyTmout"), ("TIMETRA-QOS-MIB", "tMcMlpppIngrClassLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppIngrClassTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosMcMlpppIngrGroup = tmnxQosMcMlpppIngrGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosMcMlpppIngrGroup.setDescription('The group of objects for the multi-class mlppp ingress information on Alcatel-Lucent SROS series systems.')
tmnxQosMcMlpppEgrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 32)).setObjects(("TIMETRA-QOS-MIB", "tMcMlpppEgrProfDescription"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrProfLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrProfRowStatus"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrProfTableLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrClassMir"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrClassWeight"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrClassMaxSize"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrClassLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrClassTableLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrFCClass"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrFCLastChanged"), ("TIMETRA-QOS-MIB", "tMcMlpppEgrFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosMcMlpppEgrGroup = tmnxQosMcMlpppEgrGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosMcMlpppEgrGroup.setDescription('The group of objects for the multi-class mlppp egress information on Alcatel-Lucent SROS series systems.')
tmnxQosQueueObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 33)).setObjects(("TIMETRA-QOS-MIB", "tQosEgrQGroupDescr"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupRowStatus"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tQosEgrQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCBS"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tQosEgrQueueExpedite"), ("TIMETRA-QOS-MIB", "tQosEgrQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tQosEgrQueueLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQueueLevel"), ("TIMETRA-QOS-MIB", "tQosEgrQueueMBS"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosEgrQueueParent"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePoolName"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortLvl"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortWght"), ("TIMETRA-QOS-MIB", "tQosEgrQueueRowStatus"), ("TIMETRA-QOS-MIB", "tQosEgrQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tQosEgrQueueWeight"), ("TIMETRA-QOS-MIB", "tQosIngQTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQGroupDescr"), ("TIMETRA-QOS-MIB", "tQosIngQGroupLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQGroupRowStatus"), ("TIMETRA-QOS-MIB", "tQosIngQGroupTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tQosIngQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tQosIngQueueCBS"), ("TIMETRA-QOS-MIB", "tQosIngQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosIngQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tQosIngQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tQosIngQueueExpedite"), ("TIMETRA-QOS-MIB", "tQosIngQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tQosIngQueueLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQueueLevel"), ("TIMETRA-QOS-MIB", "tQosIngQueueMBS"), ("TIMETRA-QOS-MIB", "tQosIngQueueMCast"), ("TIMETRA-QOS-MIB", "tQosIngQueueMode"), ("TIMETRA-QOS-MIB", "tQosIngQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosIngQueueParent"), ("TIMETRA-QOS-MIB", "tQosIngQueuePoliced"), ("TIMETRA-QOS-MIB", "tQosIngQueuePoolName"), ("TIMETRA-QOS-MIB", "tQosIngQueueRowStatus"), ("TIMETRA-QOS-MIB", "tQosIngQueueWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosQueueObjGroup = tmnxQosQueueObjGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosQueueObjGroup.setDescription('The group of objects for the multi-class mlppp egress information on Alcatel-Lucent SROS series systems.')
tQosQGrpFCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 34)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressFCQGrp"), ("TIMETRA-QOS-MIB", "tSapIngressFCQGrpMCast"), ("TIMETRA-QOS-MIB", "tSapIngressFCQGrpBCast"), ("TIMETRA-QOS-MIB", "tSapIngressFCQGrpUnknown"), ("TIMETRA-QOS-MIB", "tSapEgressFCQGrp"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCQGrpQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tQosQGrpFCGroup = tQosQGrpFCGroup.setStatus('current')
if mibBuilder.loadTexts: tQosQGrpFCGroup.setDescription('The group of objects for the multi-class mlppp egress information on Alcatel-Lucent SROS series systems.')
tmnxQosNetworkV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 35)).setObjects(("TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemarkDscp"), ("TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCForceDEValue"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCDEMark"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortLvl"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortWght"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tNetworkQueuePortAvgOverhead"), ("TIMETRA-QOS-MIB", "tNetworkQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tNetworkQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV7v0Group = tmnxQosNetworkV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosNetworkV7v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosHsmdaV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 36)).setObjects(("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyDescription"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyMaxRate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp1Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp2Rate"), ("TIMETRA-QOS-MIB", "tSapEgressFCHsmdaQueue"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueCIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaPacketOffset"), ("TIMETRA-QOS-MIB", "tSapIngressDefFCHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaMCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaBCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressPrecHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueCIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePoliced"), ("TIMETRA-QOS-MIB", "tHsmdaPoolPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaPoolLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaPoolDescription"), ("TIMETRA-QOS-MIB", "tHsmdaPoolSystemReserve"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot1AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot2AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot3AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot4AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot5AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot6AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot7AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot8AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass1Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass1AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass2Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass2AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass3Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass3AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass4Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass4AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass5Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass5AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass6Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass6AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass7Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass7AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass8Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass8AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaSlopePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeDescription"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeQueueMbs"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiAdminStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiStartDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiMaxDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiMaxProbability"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoAdminStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoStartDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoMaxDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoMaxProbability"), ("TIMETRA-QOS-MIB", "tSapIngrHsmdaQueueTblLastChngd"), ("TIMETRA-QOS-MIB", "tSapEgrHsmdaQueueTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSchedPlcyTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSchedPlcyGrpTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaPoolPlcyTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSlopePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCritHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPHsmdaCntrOverride"), ("TIMETRA-QOS-MIB", "tSapEgressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressPrecHsmdaCntrOverride"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDescription"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritActionHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpAddrType"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpAddrType"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpMask"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritProtocol"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDSCP"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritFragment"), ("TIMETRA-QOS-MIB", "tSapEgressMatchCriteria"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaPacketOffset"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritActionFC"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritActionProfile"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPfc"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPprofile"), ("TIMETRA-QOS-MIB", "tSapEgressPrecFC"), ("TIMETRA-QOS-MIB", "tSapEgressPrecProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosHsmdaV7v0Group = tmnxQosHsmdaV7v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosHsmdaV7v0Group.setDescription('The group of objects supporting management of QoS policies for QMDA MDAs on Alcatel-Lucent SROS series systems release 7.0.')
tmnxQosSapAtmV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 37)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaAtmVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapAtmV7v0Group = tmnxQosSapAtmV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapAtmV7v0Group.setDescription('The group of objects supporting management of SAP ATM related QoS policies for Alcatel-Lucent SROS series systems release 7.0.')
tmnxQosMcFrIngrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 38)).setObjects(("TIMETRA-QOS-MIB", "tMcFrIngrProfDescription"), ("TIMETRA-QOS-MIB", "tMcFrIngrProfLastChanged"), ("TIMETRA-QOS-MIB", "tMcFrIngrProfRowStatus"), ("TIMETRA-QOS-MIB", "tMcFrIngrProfTableLastChanged"), ("TIMETRA-QOS-MIB", "tMcFrIngrClassReassemblyTmout"), ("TIMETRA-QOS-MIB", "tMcFrIngrClassLastChanged"), ("TIMETRA-QOS-MIB", "tMcFrIngrClassTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosMcFrIngrGroup = tmnxQosMcFrIngrGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosMcFrIngrGroup.setDescription('The group of objects for the multi-class Fr ingress information on Alcatel-Lucent SROS series systems.')
tmnxQosMcFrEgrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 39)).setObjects(("TIMETRA-QOS-MIB", "tMcFrEgrProfDescription"), ("TIMETRA-QOS-MIB", "tMcFrEgrProfLastChanged"), ("TIMETRA-QOS-MIB", "tMcFrEgrProfRowStatus"), ("TIMETRA-QOS-MIB", "tMcFrEgrProfTableLastChanged"), ("TIMETRA-QOS-MIB", "tMcFrEgrClassMir"), ("TIMETRA-QOS-MIB", "tMcFrEgrClassWeight"), ("TIMETRA-QOS-MIB", "tMcFrEgrClassMaxSize"), ("TIMETRA-QOS-MIB", "tMcFrEgrClassLastChanged"), ("TIMETRA-QOS-MIB", "tMcFrEgrClassTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosMcFrEgrGroup = tmnxQosMcFrEgrGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosMcFrEgrGroup.setDescription('The group of objects for the multi-class Fr egress information on Alcatel-Lucent SROS series systems.')
tmnxQosSapEgrQWredGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 40)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressQueueXPWredQ"), ("TIMETRA-QOS-MIB", "tSapEgressQueueXPWredQSlope"), ("TIMETRA-QOS-MIB", "tQosEgrQueueXPWredQ"), ("TIMETRA-QOS-MIB", "tQosEgrQueueXPWredQSlope"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgrQWredGroup = tmnxQosSapEgrQWredGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapEgrQWredGroup.setDescription('The group of objects for the WRED specific SAP egress queue information on Alcatel-Lucent SROS series systems.')
tmnxQosSapIngressV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 41)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressScope"), ("TIMETRA-QOS-MIB", "tSapIngressDescription"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePoolName"), ("TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCDE1OutOfProfile"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpFC"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpTableLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV8v0Group = tmnxQosSapIngressV8v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosSapIngressV8v0Group.setDescription('The group of objects supporting management of SAP ingress QoS policies on Alcatel-Lucent SROS series systems release 8.0.')
tmnxQosPolicerV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 42)).setObjects(("TIMETRA-QOS-MIB", "tQosPolicerCtrlPolDescr"), ("TIMETRA-QOS-MIB", "tQosPolicerCtrlPolLastChgd"), ("TIMETRA-QOS-MIB", "tQosPolicerCtrlPolRowStatus"), ("TIMETRA-QOS-MIB", "tQosPolicerCtrlPolTblLastChgd"), ("TIMETRA-QOS-MIB", "tSapIngPolicerPktOffset"), ("TIMETRA-QOS-MIB", "tSapIngPolicerAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngPolicerAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngPolicerCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngPolicerDescr"), ("TIMETRA-QOS-MIB", "tSapIngPolicerHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapIngPolicerLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngPolicerLevel"), ("TIMETRA-QOS-MIB", "tSapIngPolicerPIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngPolicerParent"), ("TIMETRA-QOS-MIB", "tSapIngPolicerRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngPolicerStatMode"), ("TIMETRA-QOS-MIB", "tSapIngPolicerTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngPolicerCBS"), ("TIMETRA-QOS-MIB", "tSapIngPolicerMBS"), ("TIMETRA-QOS-MIB", "tSapIngPolicerWeight"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerPktOffset"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerAdminCIR"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerDescr"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerLevel"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerPIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerParent"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerStatMode"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerCBS"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerMBS"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerWeight"), ("TIMETRA-QOS-MIB", "tSapIngressFCBCastPolicer"), ("TIMETRA-QOS-MIB", "tSapIngressFCMCastPolicer"), ("TIMETRA-QOS-MIB", "tSapIngressFCPolicer"), ("TIMETRA-QOS-MIB", "tSapIngressFCUnknownPolicer"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterDescr"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterLastChgd"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterLevel"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterParent"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterRate"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterRowStatus"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterTblLastChgd"), ("TIMETRA-QOS-MIB", "tQosPolicerArbiterWeight"), ("TIMETRA-QOS-MIB", "tQosPolicerCtrlPolMinMBSSep"), ("TIMETRA-QOS-MIB", "tQosPolicerCtrlPolRootMaxRate"), ("TIMETRA-QOS-MIB", "tQosPolicerLevelCumMBS"), ("TIMETRA-QOS-MIB", "tQosPolicerLevelLastChgd"), ("TIMETRA-QOS-MIB", "tQosPolicerLevelTblLastChgd"), ("TIMETRA-QOS-MIB", "tSapEgressFCPolicer"), ("TIMETRA-QOS-MIB", "tQosPolicerLevelFixedMBS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosPolicerV8v0Group = tmnxQosPolicerV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosPolicerV8v0Group.setDescription('The group of objects supporting management of Policer specific objects on Alcatel-Lucent SROS series systems release 8.0.')
tQosQGrpV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 43)).setObjects(("TIMETRA-QOS-MIB", "tQosEgrQGroupFCRowStatus"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupFCLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupFCQueue"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQueueMBSBytes"), ("TIMETRA-QOS-MIB", "tQosEgrQueueMBSBytes"), ("TIMETRA-QOS-MIB", "tSapEgressQueueMBSBytes"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMBSBytes"), ("TIMETRA-QOS-MIB", "tQosEgrQueueAdminPIRPercent"), ("TIMETRA-QOS-MIB", "tQosEgrQueueAdminCIRPercent"), ("TIMETRA-QOS-MIB", "tQosEgrQueueRateType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tQosQGrpV8v0Group = tQosQGrpV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tQosQGrpV8v0Group.setDescription('The group of objects supporting the management of QOS Queue Groups on Alcatel-Lucent SROS series systems release 8.0.')
tQosFCQGrpFC8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 44)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressFCQGrpFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tQosFCQGrpFC8v0Group = tQosFCQGrpFC8v0Group.setStatus('current')
if mibBuilder.loadTexts: tQosFCQGrpFC8v0Group.setDescription('The group of objects for the SAP egress information on Alcatel-Lucent SROS series systems.')
tmnxQosSapEgressV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 45)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressScope"), ("TIMETRA-QOS-MIB", "tSapEgressDescription"), ("TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressFCDot1PInProfile"), ("TIMETRA-QOS-MIB", "tSapEgressFCDot1POutProfile"), ("TIMETRA-QOS-MIB", "tSapEgressFCForceDEValue"), ("TIMETRA-QOS-MIB", "tSapEgressFCDEMark"), ("TIMETRA-QOS-MIB", "tSapEgressFCInProfDscp"), ("TIMETRA-QOS-MIB", "tSapEgressFCOutProfDscp"), ("TIMETRA-QOS-MIB", "tSapEgressFCInProfPrec"), ("TIMETRA-QOS-MIB", "tSapEgressFCOutProfPrec"), ("TIMETRA-QOS-MIB", "tSapEgressQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortLvl"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortWght"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePortAvgOverhead"), ("TIMETRA-QOS-MIB", "tSapEgressQueuePoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV8v0Group = tmnxQosSapEgressV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapEgressV8v0Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel-Lucent SROS series systems.')
tmnxQosQueueObjV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 46)).setObjects(("TIMETRA-QOS-MIB", "tQosEgrQGroupDescr"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupRowStatus"), ("TIMETRA-QOS-MIB", "tQosEgrQGroupTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tQosEgrQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCBS"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tQosEgrQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tQosEgrQueueExpedite"), ("TIMETRA-QOS-MIB", "tQosEgrQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tQosEgrQueueLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQueueLevel"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosEgrQueueParent"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePoolName"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortCIRLvl"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortCIRWght"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortLvl"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePortWght"), ("TIMETRA-QOS-MIB", "tQosEgrQueueRowStatus"), ("TIMETRA-QOS-MIB", "tQosEgrQueueUsePortParent"), ("TIMETRA-QOS-MIB", "tQosEgrQueueWeight"), ("TIMETRA-QOS-MIB", "tQosIngQTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQGroupDescr"), ("TIMETRA-QOS-MIB", "tQosIngQGroupLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQGroupRowStatus"), ("TIMETRA-QOS-MIB", "tQosIngQGroupTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tQosIngQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tQosIngQueueCBS"), ("TIMETRA-QOS-MIB", "tQosIngQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosIngQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tQosIngQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tQosIngQueueExpedite"), ("TIMETRA-QOS-MIB", "tQosIngQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tQosIngQueueLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngQueueLevel"), ("TIMETRA-QOS-MIB", "tQosIngQueueMCast"), ("TIMETRA-QOS-MIB", "tQosIngQueueMode"), ("TIMETRA-QOS-MIB", "tQosIngQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosIngQueueParent"), ("TIMETRA-QOS-MIB", "tQosIngQueuePoliced"), ("TIMETRA-QOS-MIB", "tQosIngQueuePoolName"), ("TIMETRA-QOS-MIB", "tQosIngQueueRowStatus"), ("TIMETRA-QOS-MIB", "tQosIngQueueWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosQueueObjV8v0Group = tmnxQosQueueObjV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosQueueObjV8v0Group.setDescription('The group of objects for the multi-class mlppp egress information on Alcatel-Lucent SROS series systems.')
tmnxQosObsoletedV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 47)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressQueueMBS"), ("TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("TIMETRA-QOS-MIB", "tQosIngQueueMBS"), ("TIMETRA-QOS-MIB", "tQosEgrQueueMBS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosObsoletedV8v0Group = tmnxQosObsoletedV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosObsoletedV8v0Group.setDescription('The group of obsolete objects for the QoS on Alcatel-Lucent SROS series systems.')
tmnxQosPortSchPlcyGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 48)).setObjects(("TIMETRA-QOS-MIB", "tPortSchPlcyLvl1GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl1GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl2GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl2GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl3GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl3GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl4GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl4GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl5GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl5GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl6GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl6GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl7GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl7GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl8GrpName"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvl8GrpWeight"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvlGrpLastChanged"), ("TIMETRA-QOS-MIB", "tPortSchPlcyLvlGrpTblLastChgd"), ("TIMETRA-QOS-MIB", "tPortSchPlcyGrpAdminCIR"), ("TIMETRA-QOS-MIB", "tPortSchPlcyGrpAdminPIR"), ("TIMETRA-QOS-MIB", "tPortSchPlcyGrpLastChanged"), ("TIMETRA-QOS-MIB", "tPortSchPlcyGrpRowStatus"), ("TIMETRA-QOS-MIB", "tPortSchPlcyGrpTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosPortSchPlcyGrpGroup = tmnxQosPortSchPlcyGrpGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosPortSchPlcyGrpGroup.setDescription('The group of objects supporting Port Scheduler Policy Group objects for the QoS on Alcatel-Lucent SROS series systems.')
tmnxQosSchedulerV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 49)).setObjects(("TIMETRA-QOS-MIB", "tSchedulerPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyDescription"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tSchedulerPolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerRowStatus"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerDescription"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerParent"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerLevel"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerWeight"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIRLevel"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIRWeight"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerCIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerSummedCIR"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerLastChanged"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerUsePortParent"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortLvl"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortWght"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRLvl"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRWght"), ("TIMETRA-QOS-MIB", "tVirtualSchedulerTableLastChanged"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyRowStatus"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyDescription"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyLastChanged"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyMaxRate"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanLvl"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanWeight"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRLvl"), ("TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRWght"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSchedulerV8v0Group = tmnxQosSchedulerV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSchedulerV8v0Group.setDescription('The group of objects supporting management of Scheduler policies on Alcatel-Lucent SROS series systems.')
tmnxQosBurstLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 50)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressQueueBurstLimit"), ("TIMETRA-QOS-MIB", "tSapEgressQueueBurstLimit"), ("TIMETRA-QOS-MIB", "tQosIngQueueBurstLimit"), ("TIMETRA-QOS-MIB", "tQosEgrQueueBurstLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosBurstLimitGroup = tmnxQosBurstLimitGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosBurstLimitGroup.setDescription('The group of objects supporting Burst-size management objects for the QoS on Alcatel-Lucent SROS series systems.')
tmnxQosMacCritVidFltrV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 51)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressMacCritInnerTagValue"), ("TIMETRA-QOS-MIB", "tSapIngressMacCritInnerTagMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCritOuterTagValue"), ("TIMETRA-QOS-MIB", "tSapIngressMacCritOuterTagMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCritType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosMacCritVidFltrV9v0Group = tmnxQosMacCritVidFltrV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosMacCritVidFltrV9v0Group.setDescription('The group of objects supporting management of mac VID filtering objects on Alcatel-Lucent SROS series systems 9.0 release.')
tmnxQosSapEgressV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 52)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressQueuePktOffset"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIRPercent"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIRPercent"), ("TIMETRA-QOS-MIB", "tSapEgressQueueRateType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV9v0Group = tmnxQosSapEgressV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapEgressV9v0Group.setDescription('The group of objects supporting management of SAP egress QoS policies on Alcatel-Lucent SROS series systems 9.0 release.')
tmnxQosSapIngressV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 53)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIRPercent"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIRPercent"), ("TIMETRA-QOS-MIB", "tSapIngressQueueRateType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV9v0Group = tmnxQosSapIngressV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapIngressV9v0Group.setDescription('The group of objects supporting management of SAP ingress QoS policies on Alcatel-Lucent SROS series systems 9.0 release.')
tmnxQosPolicerV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 54)).setObjects(("TIMETRA-QOS-MIB", "tSapIngPolicerAdminCIRPercent"), ("TIMETRA-QOS-MIB", "tSapIngPolicerAdminPIRPercent"), ("TIMETRA-QOS-MIB", "tSapIngPolicerRateType"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerAdminCIRPercent"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerAdminPIRPercent"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerRateType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosPolicerV9v0Group = tmnxQosPolicerV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosPolicerV9v0Group.setDescription('The group of objects supporting management of Policer specific objects on Alcatel-Lucent SROS series systems release 9.0.')
tmnxQosAtmTdpV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 55)).setObjects(("TIMETRA-QOS-MIB", "tAtmTdpWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAtmTdpV9v0Group = tmnxQosAtmTdpV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosAtmTdpV9v0Group.setDescription('The group of objects for ATM Traffic Descriptor Profiles added in release 9.0 of SROS.')
tmnxQosHsmdaV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 56)).setObjects(("TIMETRA-QOS-MIB", "tHsmdaWrrPolicyTblLastChgd"), ("TIMETRA-QOS-MIB", "tHsmdaWrrPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaWrrPolicyLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaWrrPolicyDescription"), ("TIMETRA-QOS-MIB", "tHsmdaWrrPolicyIncludeQueues"), ("TIMETRA-QOS-MIB", "tHsmdaWrrPolicySchedUsingClass"), ("TIMETRA-QOS-MIB", "tHsmdaWrrPolicyAggWeightAtClass"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyEHWrrPlcy"), ("TIMETRA-QOS-MIB", "tNetworkQueuePolicyEHPktBOffst"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueueTblLastChgd"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueuePIRPercent"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueueWrrWeight"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueueMBS"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaLowBrstMaxCls"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaWrrPolicy"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueWrrWeight"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueMBS"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueBurstLimit"), ("TIMETRA-QOS-MIB", "tNetworkEgrHsmdaQueueBurstLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosHsmdaV9v0Group = tmnxQosHsmdaV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosHsmdaV9v0Group.setDescription('The group of objects supporting management of QoS policies for QMDA MDAs on Alcatel-Lucent SROS series systems release 9.0.')
tmnxQosNetworkV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 57)).setObjects(("TIMETRA-QOS-MIB", "tNetworkQueueFCEgrHsmdaQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV9v0Group = tmnxQosNetworkV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosNetworkV9v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems release 9.0.')
tmnxQosNamedPoolV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 58)).setObjects(("TIMETRA-QOS-MIB", "tQ1NamedPoolResvCbsAmbrAlrmStep"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolResvCbsAmbrAlrmMax"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolAmbrAlrmThresh"), ("TIMETRA-QOS-MIB", "tQ1NamedPoolRedAlrmThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNamedPoolV9v0Group = tmnxQosNamedPoolV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosNamedPoolV9v0Group.setDescription('The group of objects supporting management of Network Named Pool policies on Alcatel-Lucent SROS series systems release 9.0.')
tmnxQosHsmdaObsoletedV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 59)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressFCDot1PHsmdaProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosHsmdaObsoletedV9v0Group = tmnxQosHsmdaObsoletedV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosHsmdaObsoletedV9v0Group.setDescription('The group of objects obsoleted supporting management of QoS policies for HSMDA MDAs on Alcatel-Lucent SROS series systems release 9.0.')
tmnxQosPolicyV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 60)).setObjects(("TIMETRA-QOS-MIB", "tSapEgrPolicyNameId"), ("TIMETRA-QOS-MIB", "tSapEgrPolicyNameLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgrPolicyNameRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgrPolicyNameTableLastChgd"), ("TIMETRA-QOS-MIB", "tSapEgressPolicyName"), ("TIMETRA-QOS-MIB", "tSapIngPolicyNameId"), ("TIMETRA-QOS-MIB", "tSapIngPolicyNameLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngPolicyNameRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngPolicyNameTableLastChgd"), ("TIMETRA-QOS-MIB", "tSapIngressPolicyName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosPolicyV10v0Group = tmnxQosPolicyV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosPolicyV10v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosQueueGrpPolcrV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 61)).setObjects(("TIMETRA-QOS-MIB", "tQosIngPolicerTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngPolicerRowStatus"), ("TIMETRA-QOS-MIB", "tQosIngPolicerLastChanged"), ("TIMETRA-QOS-MIB", "tQosIngPolicerDescr"), ("TIMETRA-QOS-MIB", "tQosIngPolicerPIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosIngPolicerCIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosIngPolicerParent"), ("TIMETRA-QOS-MIB", "tQosIngPolicerLevel"), ("TIMETRA-QOS-MIB", "tQosIngPolicerWeight"), ("TIMETRA-QOS-MIB", "tQosIngPolicerAdminPIR"), ("TIMETRA-QOS-MIB", "tQosIngPolicerAdminCIR"), ("TIMETRA-QOS-MIB", "tQosIngPolicerCBS"), ("TIMETRA-QOS-MIB", "tQosIngPolicerMBS"), ("TIMETRA-QOS-MIB", "tQosIngPolicerHiPrioOnly"), ("TIMETRA-QOS-MIB", "tQosIngPolicerPktOffset"), ("TIMETRA-QOS-MIB", "tQosIngPolicerProfileCapped"), ("TIMETRA-QOS-MIB", "tQosIngPolicerStatMode"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerTableLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerRowStatus"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerDescr"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerPIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerCIRAdaptation"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerParent"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerLevel"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerWeight"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerAdminPIR"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerAdminCIR"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerCBS"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerMBS"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerHiPrioOnly"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerPktOffset"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerProfileCapped"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerStatMode"), ("TIMETRA-QOS-MIB", "tSapIngressFCPlcrFPQGrp"), ("TIMETRA-QOS-MIB", "tSapIngressFCMCastPlcrFPQGrp"), ("TIMETRA-QOS-MIB", "tSapIngressFCBCastPlcrFPQGrp"), ("TIMETRA-QOS-MIB", "tSapIngressFCUnknownPlcrFPQGrp"), ("TIMETRA-QOS-MIB", "tNetworkEgressFCQGrpPolicer"), ("TIMETRA-QOS-MIB", "tNetworkIngressFCTableLstChanged"), ("TIMETRA-QOS-MIB", "tNetworkIngressFCMultiCastPlcr"), ("TIMETRA-QOS-MIB", "tNetworkIngressFCUniCastPlcr"), ("TIMETRA-QOS-MIB", "tNetworkIngressFCLastChanged"), ("TIMETRA-QOS-MIB", "tQosEgrQueuePktOffset"), ("TIMETRA-QOS-MIB", "tQosPolicerCtrlPolProfPref"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerProfileCapped"), ("TIMETRA-QOS-MIB", "tSapIngPolicerProfileCapped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosQueueGrpPolcrV10v0Group = tmnxQosQueueGrpPolcrV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosQueueGrpPolcrV10v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosEgrReClassifyV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 62)).setObjects(("TIMETRA-QOS-MIB", "tSapEgressEthernetCtag"), ("TIMETRA-QOS-MIB", "tSapEgressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressDot1pFC"), ("TIMETRA-QOS-MIB", "tSapEgressDot1pProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosEgrReClassifyV10v0Group = tmnxQosEgrReClassifyV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosEgrReClassifyV10v0Group.setDescription('The group of objects supporting management of QoS Egress policies on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosPolicerSlopeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 63)).setObjects(("TIMETRA-QOS-MIB", "tQosEgrPolicerSlopeMap"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerSlopeMaxDepth"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerSlopeMaxProb"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerSlopeStartDepth"), ("TIMETRA-QOS-MIB", "tQosIngPolicerSlopeMap"), ("TIMETRA-QOS-MIB", "tQosIngPolicerSlopeMaxDepth"), ("TIMETRA-QOS-MIB", "tQosIngPolicerSlopeMaxProb"), ("TIMETRA-QOS-MIB", "tQosIngPolicerSlopeStartDepth"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerSlopeMap"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerSlopeMaxDepth"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerSlopeMaxProb"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerSlopeStartDepth"), ("TIMETRA-QOS-MIB", "tSapIngPolicerSlopeMap"), ("TIMETRA-QOS-MIB", "tSapIngPolicerSlopeMaxDepth"), ("TIMETRA-QOS-MIB", "tSapIngPolicerSlopeMaxProb"), ("TIMETRA-QOS-MIB", "tSapIngPolicerSlopeStartDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosPolicerSlopeGroup = tmnxQosPolicerSlopeGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosPolicerSlopeGroup.setDescription('The group of objects supporting management of QoS policer slope on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosAdvConfigV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 64)).setObjects(("TIMETRA-QOS-MIB", "tAdvCfgPolicyTblLastChgd"), ("TIMETRA-QOS-MIB", "tAdvCfgPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tAdvCfgLastChanged"), ("TIMETRA-QOS-MIB", "tAdvCfgDescription"), ("TIMETRA-QOS-MIB", "tAdvCfgChildAdmnPirPrcnt"), ("TIMETRA-QOS-MIB", "tAdvCfgChildAdminRate"), ("TIMETRA-QOS-MIB", "tAdvCfgOMGranPirPrcnt"), ("TIMETRA-QOS-MIB", "tAdvCfgOMGranRate"), ("TIMETRA-QOS-MIB", "tAdvCfgMaxDecPirPrcnt"), ("TIMETRA-QOS-MIB", "tAdvCfgMaxDecRate"), ("TIMETRA-QOS-MIB", "tAdvCfgHiRateHoldTime"), ("TIMETRA-QOS-MIB", "tAdvCfgTimeAvgFactor"), ("TIMETRA-QOS-MIB", "tAdvCfgSampleInterval"), ("TIMETRA-QOS-MIB", "tAdvCfgFastStart"), ("TIMETRA-QOS-MIB", "tAdvCfgFastStop"), ("TIMETRA-QOS-MIB", "tAdvCfgAbvOffCapPirPrcnt"), ("TIMETRA-QOS-MIB", "tAdvCfgAbvOffCapRate"), ("TIMETRA-QOS-MIB", "tAdvCfgBWDGranPirPrcnt"), ("TIMETRA-QOS-MIB", "tAdvCfgBWDGranRate"), ("TIMETRA-QOS-MIB", "tQosEgrPolicerAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tQosIngPolicerAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tQosEgrQueueAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tQosIngQueueAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tSapEgrPolicerAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tSapIngPolicerAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tSapEgressQueueAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdvCfgPolicy"), ("TIMETRA-QOS-MIB", "tAdvCfgMinOnly"), ("TIMETRA-QOS-MIB", "tAdvCfgDecOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAdvConfigV10v0Group = tmnxQosAdvConfigV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosAdvConfigV10v0Group.setDescription('The group of objects supporting management of QoS policer and queue advanced configuration parameters on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosHsmdaV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 65)).setObjects(("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyDescription"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyMaxRate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8GrpId"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8WgtInGrp"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp1Rate"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp2Rate"), ("TIMETRA-QOS-MIB", "tSapEgressFCHsmdaQueue"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueCIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePoliced"), ("TIMETRA-QOS-MIB", "tHsmdaPoolPolicyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaPoolLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaPoolDescription"), ("TIMETRA-QOS-MIB", "tHsmdaPoolSystemReserve"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot1AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot2AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot3AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot4AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot5AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot6AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot7AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolRoot8AllocWeight"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass1Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass1AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass2Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass2AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass3Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass3AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass4Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass4AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass5Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass5AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass6Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass6AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass7Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass7AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass8Parent"), ("TIMETRA-QOS-MIB", "tHsmdaPoolClass8AllocPercent"), ("TIMETRA-QOS-MIB", "tHsmdaSlopePolicyRowStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLastChanged"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeDescription"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiAdminStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiStartDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiMaxDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeHiMaxProbability"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoAdminStatus"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoStartDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoMaxDepth"), ("TIMETRA-QOS-MIB", "tHsmdaSlopeLoMaxProbability"), ("TIMETRA-QOS-MIB", "tSapEgrHsmdaQueueTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSchedPlcyTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSchedPlcyGrpTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaPoolPlcyTblLastChngd"), ("TIMETRA-QOS-MIB", "tHsmdaSlopePolicyTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPHsmdaCntrOverride"), ("TIMETRA-QOS-MIB", "tSapEgressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgressPrecHsmdaCntrOverride"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritRowStatus"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritLastChanged"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDescription"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritActionHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpAddrType"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpAddrType"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestIpMask"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritProtocol"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritDSCP"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritFragment"), ("TIMETRA-QOS-MIB", "tSapEgressMatchCriteria"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaPacketOffset"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritActionFC"), ("TIMETRA-QOS-MIB", "tSapEgrIPCritActionProfile"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPfc"), ("TIMETRA-QOS-MIB", "tSapEgressDSCPprofile"), ("TIMETRA-QOS-MIB", "tSapEgressPrecFC"), ("TIMETRA-QOS-MIB", "tSapEgressPrecProfile"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyBrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp1BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyGrp2BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl1BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl2BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl3BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl4BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl5BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl6BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl7BrstLimit"), ("TIMETRA-QOS-MIB", "tHsmdaSchedulerPlcyLvl8BrstLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosHsmdaV10v0Group = tmnxQosHsmdaV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosHsmdaV10v0Group.setDescription('The group of objects supporting management of QoS policies for QMDA MDAs on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosNetworkV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 66)).setObjects(("TIMETRA-QOS-MIB", "tNetworkEgressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkEgressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressDSCPFC"), ("TIMETRA-QOS-MIB", "tNetworkEgressDSCPProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tNetworkEgressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgressPrecFC"), ("TIMETRA-QOS-MIB", "tNetworkEgressPrecProfile"), ("TIMETRA-QOS-MIB", "tNetworkEgrDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tNetworkEgrPrecTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV10v0Group = tmnxQosNetworkV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosNetworkV10v0Group.setDescription('The group of objects supporting management of Network QoS policies on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosSapIngressV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 68)).setObjects(("TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressScope"), ("TIMETRA-QOS-MIB", "tSapIngressDescription"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePoolName"), ("TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCDE1OutOfProfile"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpFC"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpFCPriority"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpTableLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV10v0Group = tmnxQosSapIngressV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosSapIngressV10v0Group.setDescription('The group of objects supporting management of SAP ingress QoS policies on Alcatel-Lucent SROS series systems release 10.0.')
tmnxQosHsmdaObsoletedV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 69)).setObjects(("TIMETRA-QOS-MIB", "tHsmdaSlopeQueueMbs"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaPacketOffset"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaMCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressFCHsmdaBCastQueue"), ("TIMETRA-QOS-MIB", "tSapIngressDefFCHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressDot1pHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressPrecHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressDSCPHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressLspExpHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapIngressIPCritHsmdaCntrOvr"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueCIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapEgressHsmdaQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngrHsmdaQueueTblLastChngd"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueRowStatus"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueLastChanged"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueCIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePIRAdaptn"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminPIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueAdminCIR"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueueSlopePolicy"), ("TIMETRA-QOS-MIB", "tSapIngressHsmdaQueuePoliced"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosHsmdaObsoletedV10v0Group = tmnxQosHsmdaObsoletedV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxQosHsmdaObsoletedV10v0Group.setDescription('The group of objects obsoleted supporting management of QoS policies for HSMDA MDAs on Alcatel-Lucent SROS series systems release 10.0.')
mibBuilder.exportSymbols("TIMETRA-QOS-MIB", tSlopePolicyEntry=tSlopePolicyEntry, tSapIngressMacCriteriaEntry=tSapIngressMacCriteriaEntry, tQosIngPolicerSlopeStartDepth=tQosIngPolicerSlopeStartDepth, tSapIngressMacCriteriaAtmVci=tSapIngressMacCriteriaAtmVci, tMcFrEgrProfLastChanged=tMcFrEgrProfLastChanged, tSapIngPolicerStatMode=tSapIngPolicerStatMode, tNamedPoolPolicyQ1DefaultWeight=tNamedPoolPolicyQ1DefaultWeight, tSharedQueueCIRLevel=tSharedQueueCIRLevel, tSapIngPolicerId=tSapIngPolicerId, tHsmdaSchedulerPlcyRowStatus=tHsmdaSchedulerPlcyRowStatus, tHsmdaSchedulerPlcyLvl2WgtInGrp=tHsmdaSchedulerPlcyLvl2WgtInGrp, tSapIngressMacCriteriaLastChanged=tSapIngressMacCriteriaLastChanged, tNetworkQueuePolicyTableLastChanged=tNetworkQueuePolicyTableLastChanged, tSapIngressFCQGrp=tSapIngressFCQGrp, tQosIngQueueCBS=tQosIngQueueCBS, tHsmdaSchedulerPlcyLvl5Rate=tHsmdaSchedulerPlcyLvl5Rate, tmnxQosSapEgressV6v0Group=tmnxQosSapEgressV6v0Group, tSapIngressFCDE1OutOfProfile=tSapIngressFCDE1OutOfProfile, tSapIngressLspExpHsmdaCntrOvr=tSapIngressLspExpHsmdaCntrOvr, tQosEgrQueueCBS=tQosEgrQueueCBS, tAtmTdpTableLastChanged=tAtmTdpTableLastChanged, tSapIngressMacCriteriaSrcMacMask=tSapIngressMacCriteriaSrcMacMask, tmnxQos77x0V6v1Compliance=tmnxQos77x0V6v1Compliance, tPortSchPlcyLvl3GrpName=tPortSchPlcyLvl3GrpName, tSapEgrIPCritSourcePortOperator=tSapEgrIPCritSourcePortOperator, tmnxQosPortSchPlcyGrpGroup=tmnxQosPortSchPlcyGrpGroup, tHsmdaWrrPolicyIncludeQueues=tHsmdaWrrPolicyIncludeQueues, tQosEgrQueue=tQosEgrQueue, tNetworkIngressDot1pValue=tNetworkIngressDot1pValue, tQosEgrQGroupFCLastChanged=tQosEgrQGroupFCLastChanged, tQosPolicerCtrlPolRowStatus=tQosPolicerCtrlPolRowStatus, tQosPolicerLevelCumMBS=tQosPolicerLevelCumMBS, tmnxQosDSCPGroup=tmnxQosDSCPGroup, tMcFrIngrClassEntry=tMcFrIngrClassEntry, tNetworkEgressDSCP=tNetworkEgressDSCP, tSapIngressQueueLevel=tSapIngressQueueLevel, tSapIngPolicerParent=tSapIngPolicerParent, tQosEgrQueueAdminCIR=tQosEgrQueueAdminCIR, tMcFrEgrClassTableLastChanged=tMcFrEgrClassTableLastChanged, tSapIngressFCOutProfDscp=tSapIngressFCOutProfDscp, tSapEgrPolicyNameTable=tSapEgrPolicyNameTable, tSapEgrPolicerCIRAdaptation=tSapEgrPolicerCIRAdaptation, tQosEgrQueueEntry=tQosEgrQueueEntry, tSapIngressPolicyName=tSapIngressPolicyName, tNetworkEgressFCName=tNetworkEgressFCName, tSchedulerPolicyFrameBasedAccnt=tSchedulerPolicyFrameBasedAccnt, tQosIngPolicerId=tQosIngPolicerId, tSapIngPolicyNameTable=tSapIngPolicyNameTable, tSapEgrPolicerParent=tSapEgrPolicerParent, tHsmdaPoolRoot2AllocWeight=tHsmdaPoolRoot2AllocWeight, tSapEgressQueueIndex=tSapEgressQueueIndex, tNetworkEgressFCLastChanged=tNetworkEgressFCLastChanged, tMcMlpppIngrProfEntry=tMcMlpppIngrProfEntry, tHsmdaSchedulerPlcyLvl8BrstLimit=tHsmdaSchedulerPlcyLvl8BrstLimit, tQosPolicerCtrlPolTblLastChgd=tQosPolicerCtrlPolTblLastChgd, tQosPolicerArbiterDescr=tQosPolicerArbiterDescr, tQosPolicerArbiterParent=tQosPolicerArbiterParent, tSapIngressPrecLastChanged=tSapIngressPrecLastChanged, tSlopeLoMaxProbability=tSlopeLoMaxProbability, tQosIngQueueMBS=tQosIngQueueMBS, tSapEgressHsmdaQueueLastChanged=tSapEgressHsmdaQueueLastChanged, tMcFrIngrClassTableLastChanged=tMcFrIngrClassTableLastChanged, tQ1NamedPoolPolicyName=tQ1NamedPoolPolicyName, tmnxQosSchedulerV5v0Group=tmnxQosSchedulerV5v0Group, tSlopeHiMaxAverage=tSlopeHiMaxAverage, tMcMlpppEgrFCTableLastChanged=tMcMlpppEgrFCTableLastChanged, tQosPolicerObjects=tQosPolicerObjects, tmnxQosObsoletedV8v0Group=tmnxQosObsoletedV8v0Group, tSapIngressIPv6CriteriaSourcePortOperator=tSapIngressIPv6CriteriaSourcePortOperator, tSapIngPolicerSlopeStartDepth=tSapIngPolicerSlopeStartDepth, tHsmdaSlopePolicyTable=tHsmdaSlopePolicyTable, tFCNameTable=tFCNameTable, tSharedQueueParent=tSharedQueueParent, tSapEgrPolicyNameTableLastChgd=tSapEgrPolicyNameTableLastChgd, tSapEgressFCDEMark=tSapEgressFCDEMark, tNetworkEgrHsmdaQueueTblLastChgd=tNetworkEgrHsmdaQueueTblLastChgd, tQosEgrPolicerDescr=tQosEgrPolicerDescr, tmnxQosSapEgressV5v0Group=tmnxQosSapEgressV5v0Group, tFCStorageType=tFCStorageType, tSapEgressFCDot1PInProfile=tSapEgressFCDot1PInProfile, tMcMlpppEgrProfLastChanged=tMcMlpppEgrProfLastChanged, tSapIngressFCMCastPlcrFPQGrp=tSapIngressFCMCastPlcrFPQGrp, tSapIngressHsmdaQueueTable=tSapIngressHsmdaQueueTable, tQosIngQueueHiPrioOnly=tQosIngQueueHiPrioOnly, tmnxQosAtmTdpV5v0Group=tmnxQosAtmTdpV5v0Group, tNetworkQueuePolicyEHWrrPlcy=tNetworkQueuePolicyEHWrrPlcy, tQosPolicerCtrlPolDescr=tQosPolicerCtrlPolDescr, tNetworkIngressDSCPFC=tNetworkIngressDSCPFC, tNetworkQueuePIRAdaptation=tNetworkQueuePIRAdaptation, tNetworkQueueFCTableLastChanged=tNetworkQueueFCTableLastChanged, tmnxQos7750V6v0Compliance=tmnxQos7750V6v0Compliance, tSapIngPolicerAdminPIRPercent=tSapIngPolicerAdminPIRPercent, tSapEgressDSCPHsmdaCntrOverride=tSapEgressDSCPHsmdaCntrOverride, tSapIngressDSCPTable=tSapIngressDSCPTable, tSapEgrPolicerRowStatus=tSapEgrPolicerRowStatus, tSapEgressDot1pEntry=tSapEgressDot1pEntry, tSapEgrPolicerLevel=tSapEgrPolicerLevel, tNetworkPolicyIngressDefaultActionFC=tNetworkPolicyIngressDefaultActionFC, tSapIngressFCProfile=tSapIngressFCProfile, tMcFrEgrClassMaxSize=tMcFrEgrClassMaxSize, tQosQGrpFCGroup=tQosQGrpFCGroup, tSapIngressHsmdaQueueAdminCIR=tSapIngressHsmdaQueueAdminCIR, tHsmdaSlopeHiStartDepth=tHsmdaSlopeHiStartDepth, tVirtualSchedulerTable=tVirtualSchedulerTable, tSapIngPolicerProfileCapped=tSapIngPolicerProfileCapped, tNetworkQueuePolicyEntry=tNetworkQueuePolicyEntry, tQosPolicerLevelTable=tQosPolicerLevelTable, tHsmdaSchedulerPlcyLvl3WgtInGrp=tHsmdaSchedulerPlcyLvl3WgtInGrp, tQosIngPolicerPktOffset=tQosIngPolicerPktOffset, tDSCPNameTableLastChanged=tDSCPNameTableLastChanged, tmnxQosHsmdaV6v0Group=tmnxQosHsmdaV6v0Group, tQ1NamedPoolAccessAllocWeight=tQ1NamedPoolAccessAllocWeight, tHsmdaSchedulerPlcyLvl7GrpId=tHsmdaSchedulerPlcyLvl7GrpId, tSapEgrPolicerWeight=tSapEgrPolicerWeight, tSapEgressQueueCIRAdaptation=tSapEgressQueueCIRAdaptation, tSapIngressDot1pHsmdaCntrOvr=tSapIngressDot1pHsmdaCntrOvr, tNetworkIngressDot1pTable=tNetworkIngressDot1pTable, tSapIngressIPv6CriteriaRowStatus=tSapIngressIPv6CriteriaRowStatus, tSapIngressHsmdaQueueAdminPIR=tSapIngressHsmdaQueueAdminPIR, tSapEgressQueueBurstLimit=tSapEgressQueueBurstLimit, tHsmdaPoolRoot4AllocWeight=tHsmdaPoolRoot4AllocWeight, tmnxQosSapIngressV8v0Group=tmnxQosSapIngressV8v0Group, tVirtualSchedulerCIRWeight=tVirtualSchedulerCIRWeight, tSapIngressMacCriteriaDot1PValue=tSapIngressMacCriteriaDot1PValue, tSapIngressQueueHiPrioOnly=tSapIngressQueueHiPrioOnly, tNetworkQueuePoolName=tNetworkQueuePoolName, tNetworkQueuePortWght=tNetworkQueuePortWght, tQosEgrQTableLastChanged=tQosEgrQTableLastChanged, tSapIngressDot1pTableLastChanged=tSapIngressDot1pTableLastChanged, tDSCPObjects=tDSCPObjects, tSapIngressDefFCHsmdaCntrOvr=tSapIngressDefFCHsmdaCntrOvr, tPortSchedulerPlcyMaxRate=tPortSchedulerPlcyMaxRate, tSapEgressPrecLastChanged=tSapEgressPrecLastChanged, tSapIngressMacCriteriaDot1PMask=tSapIngressMacCriteriaDot1PMask, tNetworkEgrHsmdaQueueEntry=tNetworkEgrHsmdaQueueEntry, tAdvCfgPolicyTable=tAdvCfgPolicyTable, tSapEgressQueuePIRAdaptation=tSapEgressQueuePIRAdaptation, tSapIngressFCHsmdaMCastQueue=tSapIngressFCHsmdaMCastQueue, tQosEgrQueueLevel=tQosEgrQueueLevel, tSapIngressQueueTableLastChanged=tSapIngressQueueTableLastChanged, tQosEgrQueueTable=tQosEgrQueueTable, tPortSchPlcyLvlGrpLastChanged=tPortSchPlcyLvlGrpLastChanged, tmnxQos7750V5v0Compliance=tmnxQos7750V5v0Compliance, tPortSchPlcyLvl4GrpName=tPortSchPlcyLvl4GrpName, tNetworkQueueRowStatus=tNetworkQueueRowStatus, tNetworkQueueFCRowStatus=tNetworkQueueFCRowStatus, tQosIngQueueAdvCfgPolicy=tQosIngQueueAdvCfgPolicy, tQosIngQGroupName=tQosIngQGroupName, tSapEgressHsmdaQueueTable=tSapEgressHsmdaQueueTable, tSapIngressQueueAdminCIR=tSapIngressQueueAdminCIR, tHsmdaSchedulerPlcyLvl5GrpId=tHsmdaSchedulerPlcyLvl5GrpId, tNetworkQueueFCEgrHsmdaQueue=tNetworkQueueFCEgrHsmdaQueue, tNetworkQueueHiPrioOnly=tNetworkQueueHiPrioOnly, tSharedQueueRowStatus=tSharedQueueRowStatus, tQosEgrQGroupTableLastChanged=tQosEgrQGroupTableLastChanged, tSapIngressIPCriteriaDSCP=tSapIngressIPCriteriaDSCP, tQosIngQueueEntry=tQosIngQueueEntry, tSapEgrPolicerAdminCIRPercent=tSapEgrPolicerAdminCIRPercent, tSapEgressQueuePoolName=tSapEgressQueuePoolName, tAdvCfgLastChanged=tAdvCfgLastChanged, tSapIngressDot1pPriority=tSapIngressDot1pPriority, tSapIngPolicerEntry=tSapIngPolicerEntry, tMcFrIngrProfEntry=tMcFrIngrProfEntry, tHsmdaSchedulerPlcyLvl6Rate=tHsmdaSchedulerPlcyLvl6Rate, tMcFrIngrProfDescription=tMcFrIngrProfDescription, tNetworkEgressPrecLastChanged=tNetworkEgressPrecLastChanged, tSapEgressQueueAdminCIR=tSapEgressQueueAdminCIR, tSharedQueueCBS=tSharedQueueCBS, tHsmdaSlopeHiMaxDepth=tHsmdaSlopeHiMaxDepth, tAdvCfgFastStop=tAdvCfgFastStop, tNetworkEgressDSCPTable=tNetworkEgressDSCPTable, tSapIngressQueueAdvCfgPolicy=tSapIngressQueueAdvCfgPolicy, tSapIngPolicerLastChanged=tSapIngPolicerLastChanged, tmnxQos7450V5v0Compliance=tmnxQos7450V5v0Compliance, tmnxQosHsmdaV10v0Group=tmnxQosHsmdaV10v0Group, tSapIngPolicerAdminPIR=tSapIngPolicerAdminPIR, tQosEgrPolicerSlopeStartDepth=tQosEgrPolicerSlopeStartDepth, tQosPolicerCtrlPolProfPref=tQosPolicerCtrlPolProfPref, tSapEgressDSCPLastChanged=tSapEgressDSCPLastChanged, tQosIngPolicerParent=tQosIngPolicerParent, tSapEgressObjects=tSapEgressObjects, tSlopeLoAdminStatus=tSlopeLoAdminStatus, tSapIngPolicerPktOffset=tSapIngPolicerPktOffset, tSapEgressQueueTableLastChanged=tSapEgressQueueTableLastChanged, tSapEgressHsmdaQueueMBS=tSapEgressHsmdaQueueMBS, tSapIngPolicerTableLastChanged=tSapIngPolicerTableLastChanged, tQosEgrQueueAdminCIRPercent=tQosEgrQueueAdminCIRPercent, tMcMlpppEgrProfEntry=tMcMlpppEgrProfEntry, tSapIngressDot1pFC=tSapIngressDot1pFC, tSharedQueuePolicyLastChanged=tSharedQueuePolicyLastChanged, tSapIngressFCInProfRemark=tSapIngressFCInProfRemark, tQosEgrQueueRateType=tQosEgrQueueRateType, tSapIngressIPv6CriteriaLastChanged=tSapIngressIPv6CriteriaLastChanged, tHsmdaWrrPolicyName=tHsmdaWrrPolicyName, tSapEgressDot1pValue=tSapEgressDot1pValue, tMcFrEgressObjects=tMcFrEgressObjects, tmnxQosPolicerSlopeGroup=tmnxQosPolicerSlopeGroup, tMcMlpppEgrClassLastChanged=tMcMlpppEgrClassLastChanged, tSapIngressFCBCastQueue=tSapIngressFCBCastQueue, tSapIngressRowStatus=tSapIngressRowStatus, tQosPolicerCtrlPolName=tQosPolicerCtrlPolName, tQosEgrQueueAdminPIR=tQosEgrQueueAdminPIR, tSapIngressQueueOperPIR=tSapIngressQueueOperPIR, tNetworkQueuePIR=tNetworkQueuePIR, tMcFrEgrClassEntry=tMcFrEgrClassEntry, tNetworkQueueFCLastChanged=tNetworkQueueFCLastChanged, tSapIngressIPv6CriteriaIpPrecValue=tSapIngressIPv6CriteriaIpPrecValue, tQosPolicerCtrlPolLastChgd=tQosPolicerCtrlPolLastChgd, tmnxQosHsmdaV9v0Group=tmnxQosHsmdaV9v0Group, tHsmdaSchedulerPlcyLvl1GrpId=tHsmdaSchedulerPlcyLvl1GrpId, tSharedQueueFCLastChanged=tSharedQueueFCLastChanged, tMcFrEgrClassIndex=tMcFrEgrClassIndex, tQosPolicerArbiterTblLastChgd=tQosPolicerArbiterTblLastChgd, tSapIngressLspExpTableLastChange=tSapIngressLspExpTableLastChange, tmnxQosSapIngressV6v0Group=tmnxQosSapIngressV6v0Group, tSapIngressMacCritInnerTagMask=tSapIngressMacCritInnerTagMask, tPortSchedulerPlcyEntry=tPortSchedulerPlcyEntry, tMcFrEgrProfDescription=tMcFrEgrProfDescription, tPortSchPlcyLvl8GrpWeight=tPortSchPlcyLvl8GrpWeight, tmnxQosSapIngressV4v0Group=tmnxQosSapIngressV4v0Group, tSapIngressQueuePoliced=tSapIngressQueuePoliced, tMcMlpppEgrProfDescription=tMcMlpppEgrProfDescription, tSapIngressDot1pTable=tSapIngressDot1pTable, tQosIngQueuePoolName=tQosIngQueuePoolName, tmnxQosSapEgrQWredGroup=tmnxQosSapEgrQWredGroup, tSapIngressIPCriteriaIndex=tSapIngressIPCriteriaIndex, tSapEgrPolicerRateType=tSapEgrPolicerRateType, tSharedQueuePolicyTable=tSharedQueuePolicyTable, tAdvCfgBWDGranPirPrcnt=tAdvCfgBWDGranPirPrcnt, tSapIngressFCTableLastChanged=tSapIngressFCTableLastChanged, tSapIngPolicerWeight=tSapIngPolicerWeight, tNetworkPolicyLastChanged=tNetworkPolicyLastChanged, tDSCPName=tDSCPName, tDSCPNameLastChanged=tDSCPNameLastChanged, tNetworkQueueCIRWeight=tNetworkQueueCIRWeight, tSharedQueueExpedite=tSharedQueueExpedite, tSapEgrPolicerCBS=tSapEgrPolicerCBS, tmnxQosQueueGrpPolcrV10v0Group=tmnxQosQueueGrpPolcrV10v0Group, tQosEgrQueueCIRWeight=tQosEgrQueueCIRWeight, tMcMlpppEgrClassIndex=tMcMlpppEgrClassIndex, tSapEgrPolicyNameEntry=tSapEgrPolicyNameEntry, tPortSchPlcyLvlGrpEntry=tPortSchPlcyLvlGrpEntry, tHsmdaSchedulerPlcyLvl4GrpId=tHsmdaSchedulerPlcyLvl4GrpId, tNetworkQueueCIR=tNetworkQueueCIR, tSharedQueueWeight=tSharedQueueWeight, tHsmdaPoolClass4AllocPercent=tHsmdaPoolClass4AllocPercent, tSapIngressMacCriteriaRowStatus=tSapIngressMacCriteriaRowStatus, tQ1NamedPoolSlopePolicy=tQ1NamedPoolSlopePolicy, tSapIngressIndex=tSapIngressIndex, tSharedQueueIsMultipoint=tSharedQueueIsMultipoint, tSapIngressIPv6CriteriaDSCP=tSapIngressIPv6CriteriaDSCP, tSapIngPolicyNameLastChanged=tSapIngPolicyNameLastChanged, tSapEgressFCQueue=tSapEgressFCQueue, tSapIngressIPv6CriteriaIndex=tSapIngressIPv6CriteriaIndex)
mibBuilder.exportSymbols("TIMETRA-QOS-MIB", tVirtualSchedulerTableLastChanged=tVirtualSchedulerTableLastChanged, tSapEgrIPCritDestIpAddrType=tSapEgrIPCritDestIpAddrType, tQosIngPolicerTable=tQosIngPolicerTable, tQosEgrPolicerLevel=tQosEgrPolicerLevel, tNetworkQueuePolicy=tNetworkQueuePolicy, tVirtualSchedulerName=tVirtualSchedulerName, tQosEgrPolicerAdminCIR=tQosEgrPolicerAdminCIR, tNetworkIngressDot1pProfile=tNetworkIngressDot1pProfile, tAdvCfgMinOnly=tAdvCfgMinOnly, tPortSchPlcyGrpLastChanged=tPortSchPlcyGrpLastChanged, tSharedQueuePolicyTableLastChanged=tSharedQueuePolicyTableLastChanged, tNetworkQueuePolicyEHPktBOffst=tNetworkQueuePolicyEHPktBOffst, tNetworkEgrHsmdaQueueWrrWeight=tNetworkEgrHsmdaQueueWrrWeight, tSapEgressDot1pTableLastChanged=tSapEgressDot1pTableLastChanged, tQosPolicerArbiterName=tQosPolicerArbiterName, tQosNotifyPrefix=tQosNotifyPrefix, tMcMlpppEgrProfTableLastChanged=tMcMlpppEgrProfTableLastChanged, tSapIngressMacCriteriaActionPriority=tSapIngressMacCriteriaActionPriority, tQosEgrQueuePortLvl=tQosEgrQueuePortLvl, tSapIngressIPv6CriteriaDescription=tSapIngressIPv6CriteriaDescription, tVirtualSchedulerCIR=tVirtualSchedulerCIR, tSapEgressQueueRowStatus=tSapEgressQueueRowStatus, tSchedulerPolicyEntry=tSchedulerPolicyEntry, tmnxQos7450V10v0Compliance=tmnxQos7450V10v0Compliance, tSapEgressQueueRateType=tSapEgressQueueRateType, tQosEgrQueueRowStatus=tQosEgrQueueRowStatus, tHsmdaSlopeDescription=tHsmdaSlopeDescription, tHsmdaWrrPolicyDescription=tHsmdaWrrPolicyDescription, tSapEgressQueueOperCIR=tSapEgressQueueOperCIR, tSlopeObjects=tSlopeObjects, tSapEgressQueuePortCIRWght=tSapEgressQueuePortCIRWght, tQosEgrQueueMBS=tQosEgrQueueMBS, tNetworkQueueFCEntry=tNetworkQueueFCEntry, tSapEgrIPCritDestIpMask=tSapEgrIPCritDestIpMask, tHsmdaSchedulerPlcyLvl6WgtInGrp=tHsmdaSchedulerPlcyLvl6WgtInGrp, tMcFrEgrProfRowStatus=tMcFrEgrProfRowStatus, tPortSchedulerPlcyLvl2PIR=tPortSchedulerPlcyLvl2PIR, tQosPolicerArbiterLastChgd=tQosPolicerArbiterLastChgd, tPortSchPlcyGrpName=tPortSchPlcyGrpName, tSapEgressFCQGrpFC=tSapEgressFCQGrpFC, tHsmdaSchedulerPlcyDescription=tHsmdaSchedulerPlcyDescription, tNetworkQueuePortLvl=tNetworkQueuePortLvl, tSapIngressDot1pRowStatus=tSapIngressDot1pRowStatus, tSapIngressFCUnknownQueue=tSapIngressFCUnknownQueue, tSapIngressFCHsmdaQueue=tSapIngressFCHsmdaQueue, tSapEgrPolicerTable=tSapEgrPolicerTable, tHsmdaSlopeLoMaxProbability=tHsmdaSlopeLoMaxProbability, tNetworkPolicyScope=tNetworkPolicyScope, tSapIngressQueueWeight=tSapIngressQueueWeight, tSapIngPolicerSlopeMaxProb=tSapIngPolicerSlopeMaxProb, tQ1NamedPoolTableLastChanged=tQ1NamedPoolTableLastChanged, tSapIngressFCOutProfPrec=tSapIngressFCOutProfPrec, tAtmTdpLastChanged=tAtmTdpLastChanged, tSharedQueueCIR=tSharedQueueCIR, tPortSchedulerPlcyLvl4PIR=tPortSchedulerPlcyLvl4PIR, tmnxQosPolicerV9v0Group=tmnxQosPolicerV9v0Group, tSharedQueuePolicyRowStatus=tSharedQueuePolicyRowStatus, tSapIngressDefaultFCPriority=tSapIngressDefaultFCPriority, tSapIngressQueueCBS=tSapIngressQueueCBS, tSapEgrIPCritIndex=tSapEgrIPCritIndex, tNetworkQueueTableLastChanged=tNetworkQueueTableLastChanged, tQosIngQTableLastChanged=tQosIngQTableLastChanged, tSapIngressQueueTable=tSapIngressQueueTable, tSapIngressMacCriteriaTable=tSapIngressMacCriteriaTable, tVirtualSchedulerLastChanged=tVirtualSchedulerLastChanged, tFCRowStatus=tFCRowStatus, tQosIngQGroupEntry=tQosIngQGroupEntry, tNetworkIngressDot1pEntry=tNetworkIngressDot1pEntry, tDSCPNameRowStatus=tDSCPNameRowStatus, tSapIngressHsmdaQueue=tSapIngressHsmdaQueue, tHsmdaSlopePolicyRowStatus=tHsmdaSlopePolicyRowStatus, tHsmdaSlopeHiMaxProbability=tHsmdaSlopeHiMaxProbability, tVirtualSchedulerPortCIRWght=tVirtualSchedulerPortCIRWght, tPortSchedulerPlcyLvl4CIR=tPortSchedulerPlcyLvl4CIR, tmnxQosFCGroup=tmnxQosFCGroup, tSapEgressDSCPTable=tSapEgressDSCPTable, tSapEgressTableLastChanged=tSapEgressTableLastChanged, tHsmdaSlopeLoStartDepth=tHsmdaSlopeLoStartDepth, tSapIngressFCTable=tSapIngressFCTable, tSapEgrIPCritTable=tSapEgrIPCritTable, tHsmdaPoolClass1Parent=tHsmdaPoolClass1Parent, tQosIngQueueTable=tQosIngQueueTable, tSapIngPolicerMBS=tSapIngPolicerMBS, tQ1NamedPoolAmbrAlrmThresh=tQ1NamedPoolAmbrAlrmThresh, tSapIngressMacCriteriaIndex=tSapIngressMacCriteriaIndex, tAdvCfgDescription=tAdvCfgDescription, tAtmTdpPolicing=tAtmTdpPolicing, tNamedPoolPolicyDescription=tNamedPoolPolicyDescription, tDSCPNameDscpValue=tDSCPNameDscpValue, tSharedQueueFCEntry=tSharedQueueFCEntry, tHsmdaWrrPolicyTblLastChgd=tHsmdaWrrPolicyTblLastChgd, tSapIngressQueueCIRWeight=tSapIngressQueueCIRWeight, tSapIngressQueueCIRAdaptation=tSapIngressQueueCIRAdaptation, tAdvCfgChildAdminRate=tAdvCfgChildAdminRate, tMcFrEgrProfIndex=tMcFrEgrProfIndex, tNetworkQueuePolicyTable=tNetworkQueuePolicyTable, tHsmdaSlopePolicyEntry=tHsmdaSlopePolicyEntry, tHsmdaSlopeQueueMbs=tHsmdaSlopeQueueMbs, tHsmdaPoolPlcyTblLastChngd=tHsmdaPoolPlcyTblLastChngd, tNetworkPolicyIngressLerUseDscp=tNetworkPolicyIngressLerUseDscp, tQosIngPolicerTableLastChanged=tQosIngPolicerTableLastChanged, tHsmdaSchedulerPlcyLvl8GrpId=tHsmdaSchedulerPlcyLvl8GrpId, tMcMlpppEgrProfIndex=tMcMlpppEgrProfIndex, tQ1NamedPoolResvCbsAmbrAlrmStep=tQ1NamedPoolResvCbsAmbrAlrmStep, tVirtualSchedulerPIR=tVirtualSchedulerPIR, tQosEgrPolicerAdminPIR=tQosEgrPolicerAdminPIR, tNetworkIngressFCMultiCastPlcr=tNetworkIngressFCMultiCastPlcr, tSapIngressIPCritHsmdaCntrOvr=tSapIngressIPCritHsmdaCntrOvr, tSapIngressMacCriteriaDSAP=tSapIngressMacCriteriaDSAP, tHsmdaSchedulerPlcyGrp1BrstLimit=tHsmdaSchedulerPlcyGrp1BrstLimit, tQosIngQGroupTable=tQosIngQGroupTable, tVirtualSchedulerCIRLevel=tVirtualSchedulerCIRLevel, tHsmdaSlopeLoAdminStatus=tHsmdaSlopeLoAdminStatus, tQosEgrPolicerId=tQosEgrPolicerId, tSapIngressFCName=tSapIngressFCName, tSchedulerPolicyLastChanged=tSchedulerPolicyLastChanged, tMcMlpppEgrProfRowStatus=tMcMlpppEgrProfRowStatus, tQosEgrPolicerCBS=tQosEgrPolicerCBS, tSapIngressDSCPPriority=tSapIngressDSCPPriority, tSlopeLoStartAverage=tSlopeLoStartAverage, tQosEgrQGroupFCTableLastChanged=tQosEgrQGroupFCTableLastChanged, tMcFrIngrProfIndex=tMcFrIngrProfIndex, tHsmdaSchedPlcyGrpTblLastChngd=tHsmdaSchedPlcyGrpTblLastChngd, tQosEgrPolicerMBS=tQosEgrPolicerMBS, tNetworkQueueLastChanged=tNetworkQueueLastChanged, tPortSchPlcyGrpEntry=tPortSchPlcyGrpEntry, tPortSchPlcyLvl6GrpWeight=tPortSchPlcyLvl6GrpWeight, tmnxQosSapIngressV9v0Group=tmnxQosSapIngressV9v0Group, tHsmdaWrrPolicyEntry=tHsmdaWrrPolicyEntry, tSapIngressFCMCastPolicer=tSapIngressFCMCastPolicer, tSapEgrPolicerAdminCIR=tSapEgrPolicerAdminCIR, tNetworkEgressDSCPLastChanged=tNetworkEgressDSCPLastChanged, tSapIngressScope=tSapIngressScope, tDSCPNameEntry=tDSCPNameEntry, tSchedulerPolicyRowStatus=tSchedulerPolicyRowStatus, tNetworkIngressLSPEXPTable=tNetworkIngressLSPEXPTable, tQosIngQueuePoliced=tQosIngQueuePoliced, tSapEgressDot1pRowStatus=tSapEgressDot1pRowStatus, tSlopeTimeAvgFactor=tSlopeTimeAvgFactor, tSapEgressQueueHiPrioOnly=tSapEgressQueueHiPrioOnly, tSapIngressFCPolicer=tSapIngressFCPolicer, tmnxQosAtmTdpV3v0Group=tmnxQosAtmTdpV3v0Group, tmnxQosBurstLimitGroup=tmnxQosBurstLimitGroup, tNetworkIngressFCName=tNetworkIngressFCName, tNetworkEgressPrecValue=tNetworkEgressPrecValue, tSapIngressFCUnknownPlcrFPQGrp=tSapIngressFCUnknownPlcrFPQGrp, tSapEgressQueuePktOffset=tSapEgressQueuePktOffset, tSapEgrPolicerAdvCfgPolicy=tSapEgrPolicerAdvCfgPolicy, tmnxQosNetworkR2r1Group=tmnxQosNetworkR2r1Group, tQosEgrQueueLastChanged=tQosEgrQueueLastChanged, tPortSchPlcyLvl6GrpName=tPortSchPlcyLvl6GrpName, tQosIngPolicerCBS=tQosIngPolicerCBS, tQosIngQueueAdminCIR=tQosIngQueueAdminCIR, tHsmdaWrrPolicyLastChanged=tHsmdaWrrPolicyLastChanged, tSapEgressPrecHsmdaCntrOverride=tSapEgressPrecHsmdaCntrOverride, tQosPolicerCtrlPolEntry=tQosPolicerCtrlPolEntry, tHsmdaSchedulerPlcyLvl1Rate=tHsmdaSchedulerPlcyLvl1Rate, tMcMlpppIngrClassIndex=tMcMlpppIngrClassIndex, tSapEgressQueueXPWredQ=tSapEgressQueueXPWredQ, PYSNMP_MODULE_ID=timetraQosMIBModule, tmnxQosGroups=tmnxQosGroups, tSapEgrPolicerProfileCapped=tSapEgrPolicerProfileCapped, tPortSchedulerPlcyLvl8PIR=tPortSchedulerPlcyLvl8PIR, tAtmTdpIndex=tAtmTdpIndex, tQ1NamedPoolLastChanged=tQ1NamedPoolLastChanged, tPortSchPlcyLvl7GrpWeight=tPortSchPlcyLvl7GrpWeight, tHsmdaPoolRoot1AllocWeight=tHsmdaPoolRoot1AllocWeight, tQosEgrPolicerPIRAdaptation=tQosEgrPolicerPIRAdaptation, tNetworkQueueEntry=tNetworkQueueEntry, tNetworkEgrHsmdaQueueMBS=tNetworkEgrHsmdaQueueMBS, tmnxQos7450V4v0Compliance=tmnxQos7450V4v0Compliance, tmnxQosMcMlpppEgrGroup=tmnxQosMcMlpppEgrGroup, tNamedPoolPolicyRowStatus=tNamedPoolPolicyRowStatus, tSapEgressQueuePortWght=tSapEgressQueuePortWght, tQosPolicerCtrlPolMinMBSSep=tQosPolicerCtrlPolMinMBSSep, tNetworkQueue=tNetworkQueue, tNetworkIngressFCTable=tNetworkIngressFCTable, tNetworkQueueCBS=tNetworkQueueCBS, tSapEgressFCOutProfPrec=tSapEgressFCOutProfPrec, tNetworkIngressLSPEXP=tNetworkIngressLSPEXP, tSlopeLoMaxAverage=tSlopeLoMaxAverage, tQosIngQueueAdminPIR=tQosIngQueueAdminPIR, tHsmdaPoolClass3AllocPercent=tHsmdaPoolClass3AllocPercent, tAdvCfgPolicyName=tAdvCfgPolicyName, tNetworkIngressFCUniCastPlcr=tNetworkIngressFCUniCastPlcr, tNetworkQueuePortCIRWght=tNetworkQueuePortCIRWght, tNetworkEgrDSCPTableLastChanged=tNetworkEgrDSCPTableLastChanged, tmnxQosNamedPoolPolicyV6v0Group=tmnxQosNamedPoolPolicyV6v0Group, tWrrObjects=tWrrObjects, tSapIngPolicerTable=tSapIngPolicerTable, tQosFCQGrpFC8v0Group=tQosFCQGrpFC8v0Group, tHsmdaSchedulerPlcyLvl6BrstLimit=tHsmdaSchedulerPlcyLvl6BrstLimit, tNetworkPolicyTableLastChanged=tNetworkPolicyTableLastChanged, tDSCPNameStorageType=tDSCPNameStorageType, tHsmdaSchedulerPlcyLvl7WgtInGrp=tHsmdaSchedulerPlcyLvl7WgtInGrp, tSapEgressHsmdaQueueEntry=tSapEgressHsmdaQueueEntry, tPortSchPlcyLvl5GrpWeight=tPortSchPlcyLvl5GrpWeight, tNetworkEgressPrecTable=tNetworkEgressPrecTable, tNetworkIngressDot1pLastChanged=tNetworkIngressDot1pLastChanged, tSharedQueueTable=tSharedQueueTable, tSapEgressQueueExpedite=tSapEgressQueueExpedite, tQosIngQueueMBSBytes=tQosIngQueueMBSBytes, tMcMlpppEgrClassMir=tMcMlpppEgrClassMir, tNetworkQueuePolicyDescription=tNetworkQueuePolicyDescription, tQosEgrQGroupEntry=tQosEgrQGroupEntry, tmnxQosHsmdaObsoletedV10v0Group=tmnxQosHsmdaObsoletedV10v0Group, tNetworkQueuePortAvgOverhead=tNetworkQueuePortAvgOverhead, tPortSchedulerPlcyDescription=tPortSchedulerPlcyDescription, tHsmdaSchedulerPlcyGrp2Rate=tHsmdaSchedulerPlcyGrp2Rate, tSapIngressQueueParent=tSapIngressQueueParent, tMcFrEgrProfEntry=tMcFrEgrProfEntry, tSapEgressHsmdaQueueAdminPIR=tSapEgressHsmdaQueueAdminPIR, tQosPolicerArbiterLevel=tQosPolicerArbiterLevel, tSapEgressQueueEntry=tSapEgressQueueEntry, tQosEgrQGroupFCEntry=tQosEgrQGroupFCEntry, tVirtualSchedulerParent=tVirtualSchedulerParent, tHsmdaSchedulerPlcyLvl5BrstLimit=tHsmdaSchedulerPlcyLvl5BrstLimit, tMcMlpppIngrClassTableLastChanged=tMcMlpppIngrClassTableLastChanged, tQosIngPolicerLevel=tQosIngPolicerLevel, tSapEgrPolicerEntry=tSapEgrPolicerEntry, tNetworkIngressFCEntry=tNetworkIngressFCEntry, tNetworkPolicyEgressRemarkDscp=tNetworkPolicyEgressRemarkDscp, tSapEgressQueuePortAvgOverhead=tSapEgressQueuePortAvgOverhead, tNetworkEgressFCDSCPInProfile=tNetworkEgressFCDSCPInProfile, tSapEgrIPCritRowStatus=tSapEgrIPCritRowStatus, tSapIngressIPv6CriteriaActionFC=tSapIngressIPv6CriteriaActionFC, tMcFrIngrClassReassemblyTmout=tMcFrIngrClassReassemblyTmout, tHsmdaPoolRoot3AllocWeight=tHsmdaPoolRoot3AllocWeight, tQosEgrPolicerRowStatus=tQosEgrPolicerRowStatus, tPortSchedulerPlcyLvl6CIR=tPortSchedulerPlcyLvl6CIR, tSapIngressFCQGrpUnknown=tSapIngressFCQGrpUnknown, tSharedQueuePolicy=tSharedQueuePolicy, tSlopeRowStatus=tSlopeRowStatus, tSapIngressMacCriteriaTableLastChanged=tSapIngressMacCriteriaTableLastChanged, tAdvCfgPolicyTblLastChgd=tAdvCfgPolicyTblLastChgd, tMcMlpppIngressObjects=tMcMlpppIngressObjects, tSchedulerObjects=tSchedulerObjects, tNetworkQueueFCMCast=tNetworkQueueFCMCast, tQosEgrPolicerHiPrioOnly=tQosEgrPolicerHiPrioOnly, tSapEgressFCLastChanged=tSapEgressFCLastChanged, tSapIngressMacCriteriaFrameType=tSapIngressMacCriteriaFrameType, tNetworkEgrHsmdaQueuePIRPercent=tNetworkEgrHsmdaQueuePIRPercent, tSapEgressEthernetCtag=tSapEgressEthernetCtag, tNetworkIngressDot1pTableLastChanged=tNetworkIngressDot1pTableLastChanged, tSapEgressDescription=tSapEgressDescription, tHsmdaPoolPolicyName=tHsmdaPoolPolicyName, tQ1NamedPoolResvCbsAmbrAlrmMax=tQ1NamedPoolResvCbsAmbrAlrmMax, tNetworkQueueExpedite=tNetworkQueueExpedite, tQ1NamedPoolNetworkAllocWeight=tQ1NamedPoolNetworkAllocWeight, tAdvCfgMaxDecRate=tAdvCfgMaxDecRate, tVirtualSchedulerPortCIRLvl=tVirtualSchedulerPortCIRLvl, tHsmdaWrrPolicyTable=tHsmdaWrrPolicyTable, tSapEgrIPCritDSCP=tSapEgrIPCritDSCP, tPortSchPlcyLvlGrpTblLastChgd=tPortSchPlcyLvlGrpTblLastChgd)
mibBuilder.exportSymbols("TIMETRA-QOS-MIB", tAtmTdpSir=tAtmTdpSir, tMcFrIngrClassTable=tMcFrIngrClassTable, tSapIngressIPCriteriaIpPrecValue=tSapIngressIPCriteriaIpPrecValue, tQosIngQueueCIRLevel=tQosIngQueueCIRLevel, tSapIngressQueueCIRLevel=tSapIngressQueueCIRLevel, tNetworkIngressDSCP=tNetworkIngressDSCP, tSharedQueuePolicyDescription=tSharedQueuePolicyDescription, tVirtualSchedulerSummedCIR=tVirtualSchedulerSummedCIR, tPortSchedulerPlcyLvl8CIR=tPortSchedulerPlcyLvl8CIR, tmnxQosHsmdaV7v0Group=tmnxQosHsmdaV7v0Group, tSharedQueueFCUnknownQueue=tSharedQueueFCUnknownQueue, tNetworkPolicyIngressDefaultActionProfile=tNetworkPolicyIngressDefaultActionProfile, tSharedQueueId=tSharedQueueId, tSapIngressIPv6CriteriaDestPortOperator=tSapIngressIPv6CriteriaDestPortOperator, tPortSchedulerPlcyLvl3PIR=tPortSchedulerPlcyLvl3PIR, tQosQGrpV8v0Group=tQosQGrpV8v0Group, tQosIngQueueCIRWeight=tQosIngQueueCIRWeight, tSapEgressQueueCBS=tSapEgressQueueCBS, tSapIngPolicerRowStatus=tSapIngPolicerRowStatus, tSapEgressFCDot1PHsmdaProfile=tSapEgressFCDot1PHsmdaProfile, tHsmdaSchedulerPlcyBrstLimit=tHsmdaSchedulerPlcyBrstLimit, tSchedulerPolicyDescription=tSchedulerPolicyDescription, tHsmdaSchedulerPlcyLvl1BrstLimit=tHsmdaSchedulerPlcyLvl1BrstLimit, tNetworkIngressDot1pFC=tNetworkIngressDot1pFC, tmnxQosAdvConfigV10v0Group=tmnxQosAdvConfigV10v0Group, tPortSchedulerPlcyOrphanLvl=tPortSchedulerPlcyOrphanLvl, tHsmdaSchedulerPlcyLvl4WgtInGrp=tHsmdaSchedulerPlcyLvl4WgtInGrp, tSapIngressLspExpEntry=tSapIngressLspExpEntry, tSapIngressFCOutProfRemark=tSapIngressFCOutProfRemark, tSapIngPolicerHiPrioOnly=tSapIngPolicerHiPrioOnly, tHsmdaSchedulerPlcyLvl3GrpId=tHsmdaSchedulerPlcyLvl3GrpId, tSapIngressLspExpTable=tSapIngressLspExpTable, tHsmdaSchedulerPlcyGrp1Rate=tHsmdaSchedulerPlcyGrp1Rate, tNetworkIngressDSCPRowStatus=tNetworkIngressDSCPRowStatus, tHsmdaPoolSystemReserve=tHsmdaPoolSystemReserve, tSapEgressFCName=tSapEgressFCName, tQosEgrQueuePortCIRWght=tQosEgrQueuePortCIRWght, tVirtualSchedulerWeight=tVirtualSchedulerWeight, TmnxMcFrClassIndex=TmnxMcFrClassIndex, tAdvCfgPolicyEntry=tAdvCfgPolicyEntry, tSapEgrHsmdaQueueTblLastChngd=tSapEgrHsmdaQueueTblLastChngd, tSapIngressObjects=tSapIngressObjects, tPortSchPlcyLvl4GrpWeight=tPortSchPlcyLvl4GrpWeight, tPortSchedulerPlcyRowStatus=tPortSchedulerPlcyRowStatus, tHsmdaPoolClass2Parent=tHsmdaPoolClass2Parent, tQosIngPolicerLastChanged=tQosIngPolicerLastChanged, tNetworkIngressFCLastChanged=tNetworkIngressFCLastChanged, tSapIngPolicerLevel=tSapIngPolicerLevel, tHsmdaPoolClass5AllocPercent=tHsmdaPoolClass5AllocPercent, tQosDomainLastChanged=tQosDomainLastChanged, tSapIngressIPv6CriteriaIpPrecMask=tSapIngressIPv6CriteriaIpPrecMask, tPortSchPlcyGrpRowStatus=tPortSchPlcyGrpRowStatus, tMcMlpppEgrClassMaxSize=tMcMlpppEgrClassMaxSize, tmnxQosQueueObjV8v0Group=tmnxQosQueueObjV8v0Group, tmnxQosNetworkV9v0Group=tmnxQosNetworkV9v0Group, tSapEgrPolicerAdminPIR=tSapEgrPolicerAdminPIR, tSapEgressDSCPprofile=tSapEgressDSCPprofile, tMcMlpppIngrProfDescription=tMcMlpppIngrProfDescription, tNetworkPolicyEgressRemark=tNetworkPolicyEgressRemark, tNetworkEgressFCLspExpInProfile=tNetworkEgressFCLspExpInProfile, tQosEgrQGroupFCRowStatus=tQosEgrQGroupFCRowStatus, tNetworkEgressDSCPProfile=tNetworkEgressDSCPProfile, tmnxQosGlobalGroup=tmnxQosGlobalGroup, tmnxQosMacCritVidFltrV9v0Group=tmnxQosMacCritVidFltrV9v0Group, tSapIngressIPv6CriteriaSourceIpMask=tSapIngressIPv6CriteriaSourceIpMask, tSapEgressDot1pProfile=tSapEgressDot1pProfile, tNetworkIngressLSPEXPFC=tNetworkIngressLSPEXPFC, tSharedQueueFCBCastQueue=tSharedQueueFCBCastQueue, tQosPolicerArbiterEntry=tQosPolicerArbiterEntry, tSapEgressFCOutProfDscp=tSapEgressFCOutProfDscp, tSlopePolicy=tSlopePolicy, tSapIngressHsmdaQueuePoliced=tSapIngressHsmdaQueuePoliced, tQosPolicerArbiterTable=tQosPolicerArbiterTable, tQosEgrQueueExpedite=tQosEgrQueueExpedite, tSapIngPolicyNameId=tSapIngPolicyNameId, tSapEgrIPCritFragment=tSapEgrIPCritFragment, tSapIngressIPCriteriaActionPriority=tSapIngressIPCriteriaActionPriority, tQosPolicerLevelEntry=tQosPolicerLevelEntry, tSharedQueuePoolName=tSharedQueuePoolName, tSapIngressMacCriteriaEthernetType=tSapIngressMacCriteriaEthernetType, tSapIngressMatchCriteria=tSapIngressMatchCriteria, tNetworkQueueMCast=tNetworkQueueMCast, tAdvCfgOMGranPirPrcnt=tAdvCfgOMGranPirPrcnt, tAdvCfgAbvOffCapPirPrcnt=tAdvCfgAbvOffCapPirPrcnt, tSapIngressIPCriteriaActionFC=tSapIngressIPCriteriaActionFC, tSapIngressIPCriteriaSourceIpMask=tSapIngressIPCriteriaSourceIpMask, tSapEgressFCQGrp=tSapEgressFCQGrp, tQosIngPolicerAdminCIR=tQosIngPolicerAdminCIR, tAdvCfgOMGranRate=tAdvCfgOMGranRate, tNetworkQueueUsePortParent=tNetworkQueueUsePortParent, tAtmTdpCdvt=tAtmTdpCdvt, tPortSchedulerPlcyLvl1CIR=tPortSchedulerPlcyLvl1CIR, tQosEgrPolicerPktOffset=tQosEgrPolicerPktOffset, tSapIngressFCInProfDscp=tSapIngressFCInProfDscp, tHsmdaSchedulerPlcyLvl1WgtInGrp=tHsmdaSchedulerPlcyLvl1WgtInGrp, tSapIngressPrecValue=tSapIngressPrecValue, tNetworkIngressDSCPTableLastChanged=tNetworkIngressDSCPTableLastChanged, tSapIngressFCLastChanged=tSapIngressFCLastChanged, tHsmdaSchedulerPlcyLvl5WgtInGrp=tHsmdaSchedulerPlcyLvl5WgtInGrp, tSharedQueueHiPrioOnly=tSharedQueueHiPrioOnly, tVirtualSchedulerPortWght=tVirtualSchedulerPortWght, tmnxQosQueueObjGroup=tmnxQosQueueObjGroup, tQosIngQueueCIRAdaptation=tQosIngQueueCIRAdaptation, tAdvCfgTimeAvgFactor=tAdvCfgTimeAvgFactor, tSapIngressMacCritType=tSapIngressMacCritType, tSapIngressQueuePoolName=tSapIngressQueuePoolName, tMcMlpppIngrClassReassemblyTmout=tMcMlpppIngrClassReassemblyTmout, tQosIngQueueExpedite=tQosIngQueueExpedite, tSapIngressIPCriteriaRowStatus=tSapIngressIPCriteriaRowStatus, tSapEgressDSCPfc=tSapEgressDSCPfc, tSapEgressFCTable=tSapEgressFCTable, tPortSchedulerPlcyOrphanWeight=tPortSchedulerPlcyOrphanWeight, tSapEgressRowStatus=tSapEgressRowStatus, tMcFrIngrProfLastChanged=tMcFrIngrProfLastChanged, tSapEgressHsmdaQueueWrrWeight=tSapEgressHsmdaQueueWrrWeight, tQ1NamedPoolReservedCbs=tQ1NamedPoolReservedCbs, tSapEgressFCPolicer=tSapEgressFCPolicer, tQosEgrQueueCIRLevel=tQosEgrQueueCIRLevel, tSapEgrPolicerAdminPIRPercent=tSapEgrPolicerAdminPIRPercent, tSlopePolicyTable=tSlopePolicyTable, tSapEgressQueueMBS=tSapEgressQueueMBS, tNetworkIngressDSCPProfile=tNetworkIngressDSCPProfile, tHsmdaSchedulerPlcyLvl7Rate=tHsmdaSchedulerPlcyLvl7Rate, tPortSchPlcyLvl3GrpWeight=tPortSchPlcyLvl3GrpWeight, tDSCPNameTable=tDSCPNameTable, tMcFrIngrClassIndex=tMcFrIngrClassIndex, tAdvCfgDecOnly=tAdvCfgDecOnly, tSapEgressHsmdaQueueSlopePolicy=tSapEgressHsmdaQueueSlopePolicy, tMcMlpppIngrProfRowStatus=tMcMlpppIngrProfRowStatus, tmnxQos77x0V10v0Compliance=tmnxQos77x0V10v0Compliance, tSapIngressDSCPLastChanged=tSapIngressDSCPLastChanged, tSapIngressFCEntry=tSapIngressFCEntry, tSapEgressQueueXPWredQSlope=tSapEgressQueueXPWredQSlope, tQosIngQGroupDescr=tQosIngQGroupDescr, tMcMlpppEgrProfTable=tMcMlpppEgrProfTable, tSapEgressQueueWeight=tSapEgressQueueWeight, tmnxQosNetworkV6v0Group=tmnxQosNetworkV6v0Group, tNetworkEgressPrecProfile=tNetworkEgressPrecProfile, tNetworkEgressFCDSCPOutProfile=tNetworkEgressFCDSCPOutProfile, tNetworkEgrHsmdaQueuePIRAdaptn=tNetworkEgrHsmdaQueuePIRAdaptn, tSapEgressQueueCIRWeight=tSapEgressQueueCIRWeight, tSapEgressQueueOperPIR=tSapEgressQueueOperPIR, tSharedQueueFCRowStatus=tSharedQueueFCRowStatus, tVirtualSchedulerPortLvl=tVirtualSchedulerPortLvl, tPortSchedulerPlcyLvl2CIR=tPortSchedulerPlcyLvl2CIR, tNamedPoolPolicyTableLastChanged=tNamedPoolPolicyTableLastChanged, tHsmdaSchedulerPlcyLvl2BrstLimit=tHsmdaSchedulerPlcyLvl2BrstLimit, tSapIngPolicerSlopeMaxDepth=tSapIngPolicerSlopeMaxDepth, tPortSchedulerPlcyLvl5PIR=tPortSchedulerPlcyLvl5PIR, tQosObjects=tQosObjects, tNetworkObjects=tNetworkObjects, tQ1NamedPoolName=tQ1NamedPoolName, tQosPolicerCtrlPolTable=tQosPolicerCtrlPolTable, tQosIngQueuePIRAdaptation=tQosIngQueuePIRAdaptation, tSapIngressIPv6CriteriaDestIpAddr=tSapIngressIPv6CriteriaDestIpAddr, tAtmTdpsCurrentlyConfigured=tAtmTdpsCurrentlyConfigured, tmnxQosPolicerV8v0Group=tmnxQosPolicerV8v0Group, tAtmTdpIndexNext=tAtmTdpIndexNext, tHsmdaPoolPolicyTable=tHsmdaPoolPolicyTable, tPortSchPlcyLvl8GrpName=tPortSchPlcyLvl8GrpName, tSapEgressHsmdaPacketOffset=tSapEgressHsmdaPacketOffset, tQ1NamedPoolDescription=tQ1NamedPoolDescription, tHsmdaPoolClass8Parent=tHsmdaPoolClass8Parent, tNetworkIngressLSPEXPProfile=tNetworkIngressLSPEXPProfile, tSapIngressPrecEntry=tSapIngressPrecEntry, tSapIngressDSCPTableLastChanged=tSapIngressDSCPTableLastChanged, tPortSchedulerPlcyOrphanCIRWght=tPortSchedulerPlcyOrphanCIRWght, tSapIngressQueueRowStatus=tSapIngressQueueRowStatus, tSapIngressLspExpFC=tSapIngressLspExpFC, tSlopeHiStartAverage=tSlopeHiStartAverage, tAtmTdpPir=tAtmTdpPir, tQosIngQueue=tQosIngQueue, tMcMlpppIngrClassTable=tMcMlpppIngrClassTable, tHsmdaWrrPolicyAggWeightAtClass=tHsmdaWrrPolicyAggWeightAtClass, tSapEgrPolicerPIRAdaptation=tSapEgrPolicerPIRAdaptation, tSapIngressEntry=tSapIngressEntry, tSapIngressIPv6CriteriaEntry=tSapIngressIPv6CriteriaEntry, tQosEgrQGroupRowStatus=tQosEgrQGroupRowStatus, tSapIngressQueueRateType=tSapIngressQueueRateType, tSlopePolicyTableLastChanged=tSlopePolicyTableLastChanged, tSapIngressIPCriteriaProtocol=tSapIngressIPCriteriaProtocol, tSharedQueueFCName=tSharedQueueFCName, tSapEgressHsmdaQueue=tSapEgressHsmdaQueue, tSapEgressQueueLastChanged=tSapEgressQueueLastChanged, tNetworkIngressLSPEXPLastChanged=tNetworkIngressLSPEXPLastChanged, tSapIngressQueuePIRAdaptation=tSapIngressQueuePIRAdaptation, tSapEgressMatchCriteria=tSapEgressMatchCriteria, tNetworkQueueObjects=tNetworkQueueObjects, tSapIngressIPCriteriaDestPortValue2=tSapIngressIPCriteriaDestPortValue2, tSapIngressDSCPRowStatus=tSapIngressDSCPRowStatus, tSapIngressIPv6CriteriaTableLastChanged=tSapIngressIPv6CriteriaTableLastChanged, tMcMlpppIngrClassEntry=tMcMlpppIngrClassEntry, tNetworkEgressPrecFC=tNetworkEgressPrecFC, tAdvCfgHiRateHoldTime=tAdvCfgHiRateHoldTime, tmnxQosMcFrIngrGroup=tmnxQosMcFrIngrGroup, tNetworkQueueMBS=tNetworkQueueMBS, tQosEgrQGroupFCName=tQosEgrQGroupFCName, tAtmTdpObjects=tAtmTdpObjects, tSapEgressHsmdaQueueAdminCIR=tSapEgressHsmdaQueueAdminCIR, tVirtualSchedulerDescription=tVirtualSchedulerDescription, tSapIngressMacCriteriaSSAPMask=tSapIngressMacCriteriaSSAPMask, tSapIngressLspExpValue=tSapIngressLspExpValue, tAtmTdpShaping=tAtmTdpShaping, tNetworkEgressFCQGrpQueue=tNetworkEgressFCQGrpQueue, tHsmdaSchedulerPlcyLastChanged=tHsmdaSchedulerPlcyLastChanged, tNamedPoolPolicyQ1PortWeight=tNamedPoolPolicyQ1PortWeight, tmnxQosMcMlpppIngrGroup=tmnxQosMcMlpppIngrGroup, tSapIngressHsmdaPacketOffset=tSapIngressHsmdaPacketOffset, tNetworkIngressLSPEXPRowStatus=tNetworkIngressLSPEXPRowStatus, tHsmdaSlopePolicyName=tHsmdaSlopePolicyName, tSapIngressIPCriteriaDescription=tSapIngressIPCriteriaDescription, tSapEgrIPCritDestIpAddr=tSapEgrIPCritDestIpAddr, tQosIngPolicerCIRAdaptation=tQosIngPolicerCIRAdaptation, tSapEgrPolicyNameId=tSapEgrPolicyNameId, tNetworkIngressLSPEXPTableLastChanged=tNetworkIngressLSPEXPTableLastChanged, tQosPolicerLevelTblLastChgd=tQosPolicerLevelTblLastChgd, tSapIngressPrecFCPriority=tSapIngressPrecFCPriority, tAdvCfgFastStart=tAdvCfgFastStart, tSapIngPolicerSlopeMap=tSapIngPolicerSlopeMap, tSapEgrPolicerHiPrioOnly=tSapEgrPolicerHiPrioOnly, tNetworkQueuePolicyRowStatus=tNetworkQueuePolicyRowStatus, tQosIngPolicerProfileCapped=tQosIngPolicerProfileCapped, tQosEgrPolicerTableLastChanged=tQosEgrPolicerTableLastChanged, tSapIngressMacCriteriaSrcMacAddr=tSapIngressMacCriteriaSrcMacAddr, tSapEgrPolicerTableLastChanged=tSapEgrPolicerTableLastChanged, tQ1NamedPoolTable=tQ1NamedPoolTable, tPortSchPlcyLvlGrpTable=tPortSchPlcyLvlGrpTable, tSapIngressMacCriteriaSSAP=tSapIngressMacCriteriaSSAP, tSapIngressQueueOperCIR=tSapIngressQueueOperCIR, tSapEgressFCInProfPrec=tSapEgressFCInProfPrec, tQosIngQueueBurstLimit=tQosIngQueueBurstLimit, tPortSchedulerPlcyOrphanCIRLvl=tPortSchedulerPlcyOrphanCIRLvl, tmnxQosSapAtmV7v0Group=tmnxQosSapAtmV7v0Group, tSchedulerPolicyName=tSchedulerPolicyName, tNetworkEgressDSCPRowStatus=tNetworkEgressDSCPRowStatus, tHsmdaPoolPolicyEntry=tHsmdaPoolPolicyEntry, tQosEgrQGroupFCQueue=tQosEgrQGroupFCQueue, tmnxQosAtmTdpV9v0Group=tmnxQosAtmTdpV9v0Group, tPortSchPlcyLvl1GrpName=tPortSchPlcyLvl1GrpName, tSapIngressMacCriteriaActionFC=tSapIngressMacCriteriaActionFC, tSapEgrIPCritEntry=tSapEgrIPCritEntry, tQosEgrQGroupDescr=tQosEgrQGroupDescr, tPortSchPlcyGrpTblLastChgd=tPortSchPlcyGrpTblLastChgd, tSapEgrPolicyNameLastChanged=tSapEgrPolicyNameLastChanged, tmnxQosSapEgressV8v0Group=tmnxQosSapEgressV8v0Group, tSapEgressFCDot1POutProfile=tSapEgressFCDot1POutProfile, tMcMlpppEgrClassTableLastChanged=tMcMlpppEgrClassTableLastChanged, tSapEgressPolicyName=tSapEgressPolicyName, tNetworkEgressFCDot1pInProfile=tNetworkEgressFCDot1pInProfile, tQosPolicerLevel=tQosPolicerLevel, tSapEgressHsmdaQueuePIRAdaptn=tSapEgressHsmdaQueuePIRAdaptn, tSapEgressPrecFC=tSapEgressPrecFC, tQosEgrQueueCIRAdaptation=tQosEgrQueueCIRAdaptation, tHsmdaSlopeLastChanged=tHsmdaSlopeLastChanged)
mibBuilder.exportSymbols("TIMETRA-QOS-MIB", tPortSchedulerPlcyLvl5CIR=tPortSchedulerPlcyLvl5CIR, tmnxQosSapIpv6FilterR4r0Group=tmnxQosSapIpv6FilterR4r0Group, tAtmTdpServCat=tAtmTdpServCat, tSapEgrIPCritAddrType=tSapEgrIPCritAddrType, tSapIngressIPCriteriaFragment=tSapIngressIPCriteriaFragment, tNetworkEgrHsmdaQueueTable=tNetworkEgrHsmdaQueueTable, tAtmTdpsMaxSupported=tAtmTdpsMaxSupported, tHsmdaPoolRoot8AllocWeight=tHsmdaPoolRoot8AllocWeight, tQosIngQGroupRowStatus=tQosIngQGroupRowStatus, tHsmdaPoolPolicyRowStatus=tHsmdaPoolPolicyRowStatus, tSapEgrIPCritActionProfile=tSapEgrIPCritActionProfile, tMcMlpppEgrFCLastChanged=tMcMlpppEgrFCLastChanged, tAdvCfgSampleInterval=tAdvCfgSampleInterval, tHsmdaSchedulerPlcyName=tHsmdaSchedulerPlcyName, tQosEgrPolicerEntry=tQosEgrPolicerEntry, tSapEgrIPCritProtocol=tSapEgrIPCritProtocol, tHsmdaSchedulerPlcyLvl3Rate=tHsmdaSchedulerPlcyLvl3Rate, tQosEgrQueueWeight=tQosEgrQueueWeight, tmnxQosEgrReClassifyV10v0Group=tmnxQosEgrReClassifyV10v0Group, tNetworkQueueParent=tNetworkQueueParent, tQosPolicerArbiterRowStatus=tQosPolicerArbiterRowStatus, tmnxQosNetworkV7v0Group=tmnxQosNetworkV7v0Group, tSapIngressLspExpFCPriority=tSapIngressLspExpFCPriority, tHsmdaSchedulerPlcyLvl6GrpId=tHsmdaSchedulerPlcyLvl6GrpId, tSapEgrPolicerSlopeMap=tSapEgrPolicerSlopeMap, tSlopeHiMaxProbability=tSlopeHiMaxProbability, tHsmdaPoolClass7Parent=tHsmdaPoolClass7Parent, tQosIngPolicerRowStatus=tQosIngPolicerRowStatus, tQosEgrQueueBurstLimit=tQosEgrQueueBurstLimit, tmnxQosSapEgressR2r1Group=tmnxQosSapEgressR2r1Group, tSapEgrPolicerStatMode=tSapEgrPolicerStatMode, tHsmdaSchedulerPlcyLvl4BrstLimit=tHsmdaSchedulerPlcyLvl4BrstLimit, tSapEgressQueueAdminCIRPercent=tSapEgressQueueAdminCIRPercent, tSapIngressIPCriteriaIpPrecMask=tSapIngressIPCriteriaIpPrecMask, tQosIngPolicerSlopeMap=tQosIngPolicerSlopeMap, tSapEgrIPCritDestPortOperator=tSapEgrIPCritDestPortOperator, tSapEgressHsmdaLowBrstMaxCls=tSapEgressHsmdaLowBrstMaxCls, tSapEgressHsmdaWrrPolicy=tSapEgressHsmdaWrrPolicy, tSapEgressQueueAdvCfgPolicy=tSapEgressQueueAdvCfgPolicy, tNetworkIngressDSCPTable=tNetworkIngressDSCPTable, tNetworkIngressLSPEXPEntry=tNetworkIngressLSPEXPEntry, tSharedQueueLastChanged=tSharedQueueLastChanged, tHsmdaPoolClass5Parent=tHsmdaPoolClass5Parent, tSapIngressQueueMode=tSapIngressQueueMode, tSapEgrIPCritDestPortValue2=tSapEgrIPCritDestPortValue2, tVirtualSchedulerTier=tVirtualSchedulerTier, tSapIngressIPv6CriteriaDestIpMask=tSapIngressIPv6CriteriaDestIpMask, tNetworkEgressFCLspExpOutProfile=tNetworkEgressFCLspExpOutProfile, tNetworkQueueTable=tNetworkQueueTable, tSapIngressQueueMBSBytes=tSapIngressQueueMBSBytes, tSapEgressQueueAdminPIRPercent=tSapEgressQueueAdminPIRPercent, tSapIngressIPv6CriteriaDestPortValue2=tSapIngressIPv6CriteriaDestPortValue2, tSapEgressPrecEntry=tSapEgressPrecEntry, tMcMlpppIngrProfIndex=tMcMlpppIngrProfIndex, tAdvCfgAbvOffCapRate=tAdvCfgAbvOffCapRate, tmnxQosPolicyV10v0Group=tmnxQosPolicyV10v0Group, tSapEgressQueueCIRLevel=tSapEgressQueueCIRLevel, tSchedulerPolicyTable=tSchedulerPolicyTable, tAtmTdpRowStatus=tAtmTdpRowStatus, tHsmdaPoolClass6Parent=tHsmdaPoolClass6Parent, tNamedPoolPolicyEntry=tNamedPoolPolicyEntry, tSapEgressQueuePortLvl=tSapEgressQueuePortLvl, tNetworkQueueLevel=tNetworkQueueLevel, tSharedQueueCIRWeight=tSharedQueueCIRWeight, tSapIngressQueueEntry=tSapIngressQueueEntry, tPortSchedulerPlcyLvl7CIR=tPortSchedulerPlcyLvl7CIR, tQosEgrQueuePIRAdaptation=tQosEgrQueuePIRAdaptation, tMcFrEgrClassTable=tMcFrEgrClassTable, tSapEgressQueueUsePortParent=tSapEgressQueueUsePortParent, tMcMlpppIngrProfTable=tMcMlpppIngrProfTable, tSapIngressIPv6CriteriaTable=tSapIngressIPv6CriteriaTable, tSapIngressIPCriteriaDestPortOperator=tSapIngressIPCriteriaDestPortOperator, tQosIngPolicerWeight=tQosIngPolicerWeight, tQosIngQueueLevel=tQosIngQueueLevel, tSapEgressHsmdaQueueBurstLimit=tSapEgressHsmdaQueueBurstLimit, tVirtualSchedulerEntry=tVirtualSchedulerEntry, tHsmdaSlopeLoMaxDepth=tHsmdaSlopeLoMaxDepth, tSapEgressDSCPRowStatus=tSapEgressDSCPRowStatus, tmnxQosConformance=tmnxQosConformance, tSapIngressMacCritOuterTagMask=tSapIngressMacCritOuterTagMask, tSharedQueueMBS=tSharedQueueMBS, tSapIngressQueue=tSapIngressQueue, tSapEgressPrecTable=tSapEgressPrecTable, tMcMlpppIngrProfTableLastChanged=tMcMlpppIngrProfTableLastChanged, tMcFrEgrClassWeight=tMcFrEgrClassWeight, tPortSchPlcyLvl5GrpName=tPortSchPlcyLvl5GrpName, tNetworkIngressDSCPEntry=tNetworkIngressDSCPEntry, tSapIngressFCBCastPlcrFPQGrp=tSapIngressFCBCastPlcrFPQGrp, tSapIngressIPv6CriteriaDestPortValue1=tSapIngressIPv6CriteriaDestPortValue1, tSapEgrIPCritActionHsmdaCntrOvr=tSapEgrIPCritActionHsmdaCntrOvr, tSapEgressFCRowStatus=tSapEgressFCRowStatus, tSapEgressPrecRowStatus=tSapEgressPrecRowStatus, tSapIngressQueueBurstLimit=tSapIngressQueueBurstLimit, tQosObsoleteObjectsGroup=tQosObsoleteObjectsGroup, tQosEgrQGroupName=tQosEgrQGroupName, tmnxQosSlopeGroup=tmnxQosSlopeGroup, tmnxQosCompliances=tmnxQosCompliances, tSapEgressQueueLevel=tSapEgressQueueLevel, tVirtualSchedulerRowStatus=tVirtualSchedulerRowStatus, tQosPolicerLevelLastChgd=tQosPolicerLevelLastChgd, tmnxQos7450V8v0Compliance=tmnxQos7450V8v0Compliance, tSharedQueueTableLastChanged=tSharedQueueTableLastChanged, tSapIngressHsmdaQueueLastChanged=tSapIngressHsmdaQueueLastChanged, tSapIngPolicerRateType=tSapIngPolicerRateType, tSapIngressFCQGrpBCast=tSapIngressFCQGrpBCast, tHsmdaPoolClass3Parent=tHsmdaPoolClass3Parent, tSharedQueueObjects=tSharedQueueObjects, tQosIngPolicerHiPrioOnly=tQosIngPolicerHiPrioOnly, tSapEgressQueuePortCIRLvl=tSapEgressQueuePortCIRLvl, tmnxQos7450V7v0Compliance=tmnxQos7450V7v0Compliance, tQosIngQGroupTableLastChanged=tQosIngQGroupTableLastChanged, tSapIngPolicyNameEntry=tSapIngPolicyNameEntry, tSapEgressDSCP=tSapEgressDSCP, tSapEgressIndex=tSapEgressIndex, tNetworkPolicyTable=tNetworkPolicyTable, tAtmTdpDescrType=tAtmTdpDescrType, tNetworkIngressDot1pRowStatus=tNetworkIngressDot1pRowStatus, tQosEgrQGroupTable=tQosEgrQGroupTable, tAdvCfgChildAdmnPirPrcnt=tAdvCfgChildAdmnPirPrcnt, tSapEgrPolicerPktOffset=tSapEgrPolicerPktOffset, tPortSchPlcyGrpAdminCIR=tPortSchPlcyGrpAdminCIR, tSapIngressDSCPHsmdaCntrOvr=tSapIngressDSCPHsmdaCntrOvr, tNetworkIngressDSCPLastChanged=tNetworkIngressDSCPLastChanged, tNetworkQueueWeight=tNetworkQueueWeight, tHsmdaSchedulerPlcyLvl2Rate=tHsmdaSchedulerPlcyLvl2Rate, tNetworkQueueFCName=tNetworkQueueFCName, tMcFrIngrProfTableLastChanged=tMcFrIngrProfTableLastChanged, tQosIngPolicerDescr=tQosIngPolicerDescr, tSapEgressHsmdaQueueRowStatus=tSapEgressHsmdaQueueRowStatus, tQosIngQueueRowStatus=tQosIngQueueRowStatus, tHsmdaPoolClass8AllocPercent=tHsmdaPoolClass8AllocPercent, tSapEgressDot1pTable=tSapEgressDot1pTable, tSchedulerPolicyTableLastChanged=tSchedulerPolicyTableLastChanged, tFCNameTableLastChanged=tFCNameTableLastChanged, tQosEgrQueueAdminPIRPercent=tQosEgrQueueAdminPIRPercent, tMcMlpppEgressObjects=tMcMlpppEgressObjects, tSapEgrIPCritSourcePortValue1=tSapEgrIPCritSourcePortValue1, tSapEgressFCForceDEValue=tSapEgressFCForceDEValue, tmnxQosNamedPoolV9v0Group=tmnxQosNamedPoolV9v0Group, tSapIngressFCQueue=tSapIngressFCQueue, tSlopeHiAdminStatus=tSlopeHiAdminStatus, tSapEgrIPCritSourceIpAddrType=tSapEgrIPCritSourceIpAddrType, tPortSchedulerPlcyLvl3CIR=tPortSchedulerPlcyLvl3CIR, tSapIngressQueueMCast=tSapIngressQueueMCast, tSapEgrPolicerDescr=tSapEgrPolicerDescr, tQosPolicerArbiterTier=tQosPolicerArbiterTier, tNetworkEgressDSCPFC=tNetworkEgressDSCPFC, tSapEgressFCDot1PValue=tSapEgressFCDot1PValue, tVirtualSchedulerUsePortParent=tVirtualSchedulerUsePortParent, tFCNameEntry=tFCNameEntry, tHsmdaSchedulerPlcyEntry=tHsmdaSchedulerPlcyEntry, tNetworkEgrPrecTableLastChanged=tNetworkEgrPrecTableLastChanged, tQosIngPolicerPIRAdaptation=tQosIngPolicerPIRAdaptation, tSharedQueueFCTable=tSharedQueueFCTable, tSapIngressHsmdaQueueRowStatus=tSapIngressHsmdaQueueRowStatus, tHsmdaSchedulerPlcyLvl4Rate=tHsmdaSchedulerPlcyLvl4Rate, tSapEgressDot1pFC=tSapEgressDot1pFC, tSapIngressIPCriteriaTableLastChanged=tSapIngressIPCriteriaTableLastChanged, tQosEgrQueuePortCIRLvl=tQosEgrQueuePortCIRLvl, tSapIngrHsmdaQueueTblLastChngd=tSapIngrHsmdaQueueTblLastChngd, tHsmdaPoolRoot7AllocWeight=tHsmdaPoolRoot7AllocWeight, tMcMlpppEgrClassEntry=tMcMlpppEgrClassEntry, tSapIngressFCRowStatus=tSapIngressFCRowStatus, tQosEgrPolicerTable=tQosEgrPolicerTable, tSapIngressDSCP=tSapIngressDSCP, timetraQosMIBModule=timetraQosMIBModule, tHsmdaSchedulerPlcyMaxRate=tHsmdaSchedulerPlcyMaxRate, tSapIngressMacCritOuterTagValue=tSapIngressMacCritOuterTagValue, tPortSchedulerPlcyLastChanged=tPortSchedulerPlcyLastChanged, tQosPolicerLevelFixedMBS=tQosPolicerLevelFixedMBS, tSharedQueuePIR=tSharedQueuePIR, tSapEgrIPCritDescription=tSapEgrIPCritDescription, tHsmdaSchedPlcyTblLastChngd=tHsmdaSchedPlcyTblLastChngd, tSapIngPolicerCBS=tSapIngPolicerCBS, tQosIngPolicerStatMode=tQosIngPolicerStatMode, tMcFrIngrProfTable=tMcFrIngrProfTable, tSapEgressPrecProfile=tSapEgressPrecProfile, tSapIngressQueueMBS=tSapIngressQueueMBS, tSapIngressQueueAdminPIRPercent=tSapIngressQueueAdminPIRPercent, tmnxQosObsoletedV6v0Group=tmnxQosObsoletedV6v0Group, tQosEgrQueueAdvCfgPolicy=tQosEgrQueueAdvCfgPolicy, tNamedPoolPolicyName=tNamedPoolPolicyName, tSapIngressIPv6CriteriaActionPriority=tSapIngressIPv6CriteriaActionPriority, tSapIngPolicyNameTableLastChgd=tSapIngPolicyNameTableLastChgd, tNetworkPolicyIndex=tNetworkPolicyIndex, tMcFrIngrClassLastChanged=tMcFrIngrClassLastChanged, tFCObjects=tFCObjects, tNetworkPolicyRowStatus=tNetworkPolicyRowStatus, tSapIngressMacCriteriaDstMacMask=tSapIngressMacCriteriaDstMacMask, tSapIngressIPv6CriteriaSourceIpAddr=tSapIngressIPv6CriteriaSourceIpAddr, tQosIngPolicerSlopeMaxProb=tQosIngPolicerSlopeMaxProb, tQosEgrQueueMBSBytes=tQosEgrQueueMBSBytes, tPortSchedulerPlcyLvl1PIR=tPortSchedulerPlcyLvl1PIR, tSapIngressTable=tSapIngressTable, tSharedQueueFCQueue=tSharedQueueFCQueue, tHsmdaSchedulerPlcyLvl7BrstLimit=tHsmdaSchedulerPlcyLvl7BrstLimit, tSapIngressFCBCastPolicer=tSapIngressFCBCastPolicer, tSapIngressMacCriteriaDSAPMask=tSapIngressMacCriteriaDSAPMask, tSapEgressFCInProfDscp=tSapEgressFCInProfDscp, tFCNameLastChanged=tFCNameLastChanged, tNetworkQueueFCTable=tNetworkQueueFCTable, tSapEgressHsmdaQueueCIRAdaptn=tSapEgressHsmdaQueueCIRAdaptn, tMcMlpppEgrClassWeight=tMcMlpppEgrClassWeight, tPortSchPlcyLvl2GrpName=tPortSchPlcyLvl2GrpName, tmnxQos77x0V8v0Compliance=tmnxQos77x0V8v0Compliance, tAtmTdpCLPTagging=tAtmTdpCLPTagging, tmnxQos77x0V9v0Compliance=tmnxQos77x0V9v0Compliance, tSapIngressQueueAdminCIRPercent=tSapIngressQueueAdminCIRPercent, tSapEgrIPCritSourceIpMask=tSapEgrIPCritSourceIpMask, tMcFrIngressObjects=tMcFrIngressObjects, tQosIngQueueMode=tQosIngQueueMode, tSapEgrIPCritSourcePortValue2=tSapEgrIPCritSourcePortValue2, tHsmdaPoolClass4Parent=tHsmdaPoolClass4Parent, tMcFrEgrProfTable=tMcFrEgrProfTable, tQosIngPolicerMBS=tQosIngPolicerMBS, tNetworkIngressFCTableLstChanged=tNetworkIngressFCTableLstChanged, tmnxQosSapEgressV9v0Group=tmnxQosSapEgressV9v0Group, tSapIngressHsmdaQueueEntry=tSapIngressHsmdaQueueEntry, tSapEgressQueueAdminPIR=tSapEgressQueueAdminPIR, tNetworkEgressFCEntry=tNetworkEgressFCEntry, tSapIngressLastChanged=tSapIngressLastChanged, tNetworkEgressDSCPEntry=tNetworkEgressDSCPEntry, tSapIngressQueueAdminPIR=tSapIngressQueueAdminPIR, tNetworkEgrHsmdaQueue=tNetworkEgrHsmdaQueue, tSapIngressMacCriteriaSnapOui=tSapIngressMacCriteriaSnapOui, tSharedQueueFCMCastQueue=tSharedQueueFCMCastQueue, tAtmTdpMir=tAtmTdpMir, tQosEgrQueueXPWredQSlope=tQosEgrQueueXPWredQSlope, tSapEgressQueueTable=tSapEgressQueueTable, tHsmdaPoolRoot5AllocWeight=tHsmdaPoolRoot5AllocWeight, tQosIngPolicerAdvCfgPolicy=tQosIngPolicerAdvCfgPolicy, tSapEgressQueueMBSBytes=tSapEgressQueueMBSBytes, tSapIngressMacCriteriaDstMacAddr=tSapIngressMacCriteriaDstMacAddr, tNetworkEgressFCForceDEValue=tNetworkEgressFCForceDEValue, tHsmdaSchedulerPlcyLvl8Rate=tHsmdaSchedulerPlcyLvl8Rate, tQosEgrPolicerAdvCfgPolicy=tQosEgrPolicerAdvCfgPolicy, tSapIngressFCQGrpMCast=tSapIngressFCQGrpMCast, tSapIngressIPCriteriaDestIpAddr=tSapIngressIPCriteriaDestIpAddr, tNetworkEgressFCQGrpPolicer=tNetworkEgressFCQGrpPolicer, tQosEgrQueueHiPrioOnly=tQosEgrQueueHiPrioOnly, tHsmdaSchedulerPlcyLvl2GrpId=tHsmdaSchedulerPlcyLvl2GrpId, tSapEgressDSCPEntry=tSapEgressDSCPEntry, tMcMlpppEgrFCClass=tMcMlpppEgrFCClass, tSapIngressIPv6CriteriaSourcePortValue2=tSapIngressIPv6CriteriaSourcePortValue2, tQosEgrPolicerCIRAdaptation=tQosEgrPolicerCIRAdaptation, tNamedPoolPolicyTable=tNamedPoolPolicyTable, tQosIngQueueParent=tQosIngQueueParent, tMcFrIngrProfRowStatus=tMcFrIngrProfRowStatus, tmnxQosMcFrEgrGroup=tmnxQosMcFrEgrGroup, tSapEgressFCEntry=tSapEgressFCEntry, tQosEgrQueuePoolName=tQosEgrQueuePoolName, tSapIngressIPCriteriaSourcePortOperator=tSapIngressIPCriteriaSourcePortOperator, tSharedQueuePolicyEntry=tSharedQueuePolicyEntry, tPortSchedulerPlcyLvl7PIR=tPortSchedulerPlcyLvl7PIR)
mibBuilder.exportSymbols("TIMETRA-QOS-MIB", tPortSchPlcyGrpTable=tPortSchPlcyGrpTable, tSharedQueueEntry=tSharedQueueEntry, tmnxQosQueueV4v0Group=tmnxQosQueueV4v0Group, tSharedQueueLevel=tSharedQueueLevel, tmnxQosNetworkV5v0Group=tmnxQosNetworkV5v0Group, tSapEgressPrecValue=tSapEgressPrecValue, tmnxQosHsmdaObsoletedV9v0Group=tmnxQosHsmdaObsoletedV9v0Group, tSapIngPolicyNameRowStatus=tSapIngPolicyNameRowStatus, tSapEgrPolicerSlopeMaxProb=tSapEgrPolicerSlopeMaxProb, tMcMlpppIngrClassLastChanged=tMcMlpppIngrClassLastChanged, tSapIngPolicerAdminCIRPercent=tSapIngPolicerAdminCIRPercent, tMcMlpppEgrFCEntry=tMcMlpppEgrFCEntry, tQosPolicerArbiterRate=tQosPolicerArbiterRate, tHsmdaPoolClass7AllocPercent=tHsmdaPoolClass7AllocPercent, tSapIngressIPv6CriteriaNextHeader=tSapIngressIPv6CriteriaNextHeader, tMcFrEgrProfTableLastChanged=tMcFrEgrProfTableLastChanged, tmnxQosSchedulerGroup=tmnxQosSchedulerGroup, tSapIngressDot1pValue=tSapIngressDot1pValue, tSapEgrIPCritActionFC=tSapEgrIPCritActionFC, tSapIngressDSCPEntry=tSapIngressDSCPEntry, tSapIngressHsmdaQueueSlopePolicy=tSapIngressHsmdaQueueSlopePolicy, tSapEgressFCHsmdaQueue=tSapEgressFCHsmdaQueue, tAtmTdpMbs=tAtmTdpMbs, tNetworkEgressPrecRowStatus=tNetworkEgressPrecRowStatus, tQ1NamedPoolRowStatus=tQ1NamedPoolRowStatus, tQosEgrPolicerWeight=tQosEgrPolicerWeight, tSapIngressPrecRowStatus=tSapIngressPrecRowStatus, tPortSchedulerPlcyName=tPortSchedulerPlcyName, tSapIngressIPCriteriaDestPortValue1=tSapIngressIPCriteriaDestPortValue1, tSapIngressIPCriteriaDestIpMask=tSapIngressIPCriteriaDestIpMask, tQosTimeStampObjects=tQosTimeStampObjects, tHsmdaSchedulerPlcyGrp2BrstLimit=tHsmdaSchedulerPlcyGrp2BrstLimit, tHsmdaPoolDescription=tHsmdaPoolDescription, tPortSchPlcyLvl1GrpWeight=tPortSchPlcyLvl1GrpWeight, tPoolObjects=tPoolObjects, tNetworkEgrHsmdaQueueSlopePolicy=tNetworkEgrHsmdaQueueSlopePolicy, tNetworkEgrHsmdaQueueBurstLimit=tNetworkEgrHsmdaQueueBurstLimit, tSapIngressFCInProfPrec=tSapIngressFCInProfPrec, tmnxQosSchedulerV8v0Group=tmnxQosSchedulerV8v0Group, tMcFrEgrClassMir=tMcFrEgrClassMir, tNetworkPolicyDescription=tNetworkPolicyDescription, tQ1NamedPoolRedAlrmThresh=tQ1NamedPoolRedAlrmThresh, tNetworkEgressFCDot1pOutProfile=tNetworkEgressFCDot1pOutProfile, tNamedPoolPolicyQ1MdaWeight=tNamedPoolPolicyQ1MdaWeight, tMcFrEgrClassLastChanged=tMcFrEgrClassLastChanged, tSapIngPolicerDescr=tSapIngPolicerDescr, tSapIngressIPCriteriaEntry=tSapIngressIPCriteriaEntry, tSapIngressIPCriteriaTable=tSapIngressIPCriteriaTable, tHsmdaPoolClass6AllocPercent=tHsmdaPoolClass6AllocPercent, tSapIngressDot1pEntry=tSapIngressDot1pEntry, tNetworkPolicyEntry=tNetworkPolicyEntry, tSapIngressHsmdaQueueCIRAdaptn=tSapIngressHsmdaQueueCIRAdaptn, tQosEgrPolicerParent=tQosEgrPolicerParent, tQosEgrPolicerProfileCapped=tQosEgrPolicerProfileCapped, tSapEgrPolicerSlopeStartDepth=tSapEgrPolicerSlopeStartDepth, tSapEgressLastChanged=tSapEgressLastChanged, tQosEgrPolicerStatMode=tQosEgrPolicerStatMode, tQosIngQueueMCast=tQosIngQueueMCast, tSapIngressFCUnknownPolicer=tSapIngressFCUnknownPolicer, tMcMlpppEgrFCName=tMcMlpppEgrFCName, tHsmdaPoolClass2AllocPercent=tHsmdaPoolClass2AllocPercent, tQosIngPolicerEntry=tQosIngPolicerEntry, tmnxQos7750V4v0Compliance=tmnxQos7750V4v0Compliance, tHsmdaSchedulerPlcyLvl3BrstLimit=tHsmdaSchedulerPlcyLvl3BrstLimit, tSapIngressQueueLastChanged=tSapIngressQueueLastChanged, tSapIngressIPv6CriteriaSourcePortValue1=tSapIngressIPv6CriteriaSourcePortValue1, tNetworkQueueFC=tNetworkQueueFC, tSapEgrPolicyNameRowStatus=tSapEgrPolicyNameRowStatus, tHsmdaSlopeHiAdminStatus=tHsmdaSlopeHiAdminStatus, tSapIngressIPCriteriaSourceIpAddr=tSapIngressIPCriteriaSourceIpAddr, tSapIngressMacCriteriaDescription=tSapIngressMacCriteriaDescription, tSapIngressHsmdaQueuePIRAdaptn=tSapIngressHsmdaQueuePIRAdaptn, tNetworkQueueCIRLevel=tNetworkQueueCIRLevel, tMcMlpppEgrClassTable=tMcMlpppEgrClassTable, tQosPolicerCtrlPolRootMaxRate=tQosPolicerCtrlPolRootMaxRate, tSapEgrPolicerLastChanged=tSapEgrPolicerLastChanged, tAdvCfgMaxDecPirPrcnt=tAdvCfgMaxDecPirPrcnt, tQosEgrQueueParent=tQosEgrQueueParent, tSapEgrIPCritSourceIpAddr=tSapEgrIPCritSourceIpAddr, tQosIngPolicerAdminPIR=tQosIngPolicerAdminPIR, tNetworkQueuePortCIRLvl=tNetworkQueuePortCIRLvl, tSapIngressQueueExpedite=tSapIngressQueueExpedite, tQ1NamedPoolEntry=tQ1NamedPoolEntry, tSapIngressIPCriteriaLastChanged=tSapIngressIPCriteriaLastChanged, tAdvCfgBWDGranRate=tAdvCfgBWDGranRate, tQosEgrPolicerSlopeMaxProb=tQosEgrPolicerSlopeMaxProb, tFCName=tFCName, tQosIngQGroupLastChanged=tQosIngQGroupLastChanged, tAtmTdpEntry=tAtmTdpEntry, tSapIngPolicerCIRAdaptation=tSapIngPolicerCIRAdaptation, tVirtualSchedulerLevel=tVirtualSchedulerLevel, tNetworkEgrHsmdaQueueLastChanged=tNetworkEgrHsmdaQueueLastChanged, tSapIngressPrecTable=tSapIngressPrecTable, tSapIngressLspExpLastChanged=tSapIngressLspExpLastChanged, tNamedPoolPolicyLastChanged=tNamedPoolPolicyLastChanged, tHsmdaWrrPolicyRowStatus=tHsmdaWrrPolicyRowStatus, tmnxQos7450V6v1Compliance=tmnxQos7450V6v1Compliance, tMcMlpppEgrFCTable=tMcMlpppEgrFCTable, tSapIngressDot1pLastChanged=tSapIngressDot1pLastChanged, tAtmTdpDescription=tAtmTdpDescription, tFCValue=tFCValue, tAtmTdpWeight=tAtmTdpWeight, tSapEgressEntry=tSapEgressEntry, tPortSchedulerPlcyLvl6PIR=tPortSchedulerPlcyLvl6PIR, tHsmdaPoolLastChanged=tHsmdaPoolLastChanged, tSlopeDescription=tSlopeDescription, tSapIngressPrecTableLastChanged=tSapIngressPrecTableLastChanged, tQosNotifications=tQosNotifications, tQosEgrPolicerSlopeMap=tQosEgrPolicerSlopeMap, tSapIngressLspExpRowStatus=tSapIngressLspExpRowStatus, tHsmdaSlopePolicyTableLastChanged=tHsmdaSlopePolicyTableLastChanged, tNetworkEgressFCTableLastChanged=tNetworkEgressFCTableLastChanged, tSapIngPolicerPIRAdaptation=tSapIngPolicerPIRAdaptation, tQosEgrPolicerLastChanged=tQosEgrPolicerLastChanged, tSapIngressPrecFC=tSapIngressPrecFC, tSapEgressScope=tSapEgressScope, tSlopeLastChanged=tSlopeLastChanged, tHsmdaSchedulerPlcyLvl8WgtInGrp=tHsmdaSchedulerPlcyLvl8WgtInGrp, tQosEgrQGroupFCTable=tQosEgrQGroupFCTable, tNetworkEgressPrecEntry=tNetworkEgressPrecEntry, tmnxQos7450V6v0Compliance=tmnxQos7450V6v0Compliance, tmnxQosNetworkV10v0Group=tmnxQosNetworkV10v0Group, tQosEgrQueuePktOffset=tQosEgrQueuePktOffset, tPortSchedulerPlcyTable=tPortSchedulerPlcyTable, tSapEgressDot1pLastChanged=tSapEgressDot1pLastChanged, tSapEgressFCTableLastChanged=tSapEgressFCTableLastChanged, tQosIngPolicerSlopeMaxDepth=tQosIngPolicerSlopeMaxDepth, tQosEgrQueueXPWredQ=tQosEgrQueueXPWredQ, tHsmdaWrrPolicySchedUsingClass=tHsmdaWrrPolicySchedUsingClass, tSapIngressIPCriteriaSourcePortValue2=tSapIngressIPCriteriaSourcePortValue2, tSapEgrPolicerMBS=tSapEgrPolicerMBS, tSapIngressDSCPFC=tSapIngressDSCPFC, tSapIngressFCPlcrFPQGrp=tSapIngressFCPlcrFPQGrp, tQosPolicerArbiterWeight=tQosPolicerArbiterWeight, tMcMlpppIngrProfLastChanged=tMcMlpppIngrProfLastChanged, tHsmdaPoolRoot6AllocWeight=tHsmdaPoolRoot6AllocWeight, tmnxQosSapIngressV10v0Group=tmnxQosSapIngressV10v0Group, tQosEgrQueueUsePortParent=tQosEgrQueueUsePortParent, tSapIngressTableLastChanged=tSapIngressTableLastChanged, tNetworkEgressFCDEMark=tNetworkEgressFCDEMark, tSapEgrPolicerSlopeMaxDepth=tSapEgrPolicerSlopeMaxDepth, tSapIngPolicerAdminCIR=tSapIngPolicerAdminCIR, tSapEgressQueueParent=tSapEgressQueueParent, tHsmdaSchedulerPlcyTable=tHsmdaSchedulerPlcyTable, tSharedQueueFCTableLastChanged=tSharedQueueFCTableLastChanged, tPortSchPlcyLvl7GrpName=tPortSchPlcyLvl7GrpName, tSapIngressMacCritInnerTagValue=tSapIngressMacCritInnerTagValue, tSapIngressDescription=tSapIngressDescription, tQosIngQueueWeight=tQosIngQueueWeight, tQosEgrPolicerSlopeMaxDepth=tQosEgrPolicerSlopeMaxDepth, tNetworkQueuePolicyLastChanged=tNetworkQueuePolicyLastChanged, tPortSchPlcyLvl2GrpWeight=tPortSchPlcyLvl2GrpWeight, tmnxQosFrameBasedV6v0Group=tmnxQosFrameBasedV6v0Group, tSapIngressPrecHsmdaCntrOvr=tSapIngressPrecHsmdaCntrOvr, tAtmTdpTable=tAtmTdpTable, tSapEgressTable=tSapEgressTable, tQosEgrQGroupLastChanged=tQosEgrQGroupLastChanged, tPortSchPlcyGrpAdminPIR=tPortSchPlcyGrpAdminPIR, tQosIngQueueLastChanged=tQosIngQueueLastChanged, tSapIngPolicerAdvCfgPolicy=tSapIngPolicerAdvCfgPolicy, tHsmdaPoolClass1AllocPercent=tHsmdaPoolClass1AllocPercent, tSapIngressMacCriteriaSnapPid=tSapIngressMacCriteriaSnapPid, tNetworkQueueCIRAdaptation=tNetworkQueueCIRAdaptation, tSapIngressDefaultFC=tSapIngressDefaultFC, tNetworkEgressFCTable=tNetworkEgressFCTable, tAdvCfgPolicyRowStatus=tAdvCfgPolicyRowStatus, tmnxQos77x0V7v0Compliance=tmnxQos77x0V7v0Compliance, tQosEgrQueuePortWght=tQosEgrQueuePortWght, tSapEgrIPCritLastChanged=tSapEgrIPCritLastChanged, tSapIngressFCMCastQueue=tSapIngressFCMCastQueue, tSapIngressIPCriteriaSourcePortValue1=tSapIngressIPCriteriaSourcePortValue1, tSapEgrIPCritDestPortValue1=tSapEgrIPCritDestPortValue1, tSapIngressFCHsmdaBCastQueue=tSapIngressFCHsmdaBCastQueue, tSapEgrPolicerId=tSapEgrPolicerId)
