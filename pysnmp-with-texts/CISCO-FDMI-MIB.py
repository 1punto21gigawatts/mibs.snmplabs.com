#
# PySNMP MIB module CISCO-FDMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FDMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcNameId, = mibBuilder.importSymbols("CISCO-ST-TC", "FcNameId")
vsanIndex, notifyVsanIndex = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex", "notifyVsanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, ObjectIdentity, Gauge32, ModuleIdentity, IpAddress, MibIdentifier, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "ObjectIdentity", "Gauge32", "ModuleIdentity", "IpAddress", "MibIdentifier", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Bits", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoFdmiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 373))
ciscoFdmiMIB.setRevisions(('2003-11-07 00:00', '2003-08-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFdmiMIB.setRevisionsDescriptions(('Updated with the mib number got from CANA.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFdmiMIB.setLastUpdated('200311070000Z')
if mibBuilder.loadTexts: ciscoFdmiMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoFdmiMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFdmiMIB.setDescription('Fabric Device Management Interface (FDMI) MIB. This MIB module defines objects for managing the devices such as HBA (Host Bus Adapter). It provides device information which have registered with an FC fabric using FDMI. For more information on FDMI, refer to Fibre Channel Generic Services-4 Section 6.7 : Fabric Device Management Interface.')
ciscoFdmiMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 0))
ciscoFdmiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 1))
ciscoFdmiMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 2))
cfdmiConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 1))
cfdmiInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2))
cfdmiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 3))
class CFdmiRejectReasonCode(TextualConvention, Integer32):
    reference = 'Fibre Channel Generic Services-4 Section 6.7.4.6 : Reason Code Explanation.'
    description = 'The reason codes for FDMI rejects for HBA requests. invalidCommandCode (1) - invalid command code in the request unableToPerformCmdReq (2) - FDMI not able to perform the command requested invalidSize (3) - invalid size .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalidCommandCode", 1), ("unableToPerformCmdReq", 2), ("invalidSize", 3))

class CFdmiRejectReasonCodeExpl(TextualConvention, Integer32):
    reference = 'Fibre Channel Generic Services-4 Section 6.7.4.6 : Reason Code Explanation.'
    description = 'The explanations for reason codes for FDMI rejects for HBA requests. noAdditionalExpl (1) - No Additional Explanation hbaAlreadyRegistered (2) - HBA already registered attrForSpecifiedHbaNotReg (3) - Attributes for specified HBA not registered hbaAttrMultiAttribSameType (4) - HBA attributes block contains multiple attributes of same type invalidHbaAttrBlockLen (5) - Invalid HBA attribute block length reqdHbaAttrNotPresent (6) - Required HBA attributes not present origPortNotInRegPortList (7) - Originating port not in registered Port list hbaIdNotInRegPortList (8) - HBA Id is not registered port list portAttrNotRegistered (9) - Port attributes not registered portNotRegistered (10) - port not registered portAttrMultiAttrSameType (11) - port attribute block contains multiple attributes of same type invalidPortAttrBlockLen (12) - Invalid port attribute block length none (13) - not known or reserved .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("noAdditionalExpl", 1), ("hbaAlreadyRegistered", 2), ("attrForSpecifiedHbaNotReg", 3), ("hbaAttrMultiAttribSameType", 4), ("invalidHbaAttrBlockLen", 5), ("reqdHbaAttrNotPresent", 6), ("origPortNotInRegPortList", 7), ("hbaIdNotInRegPortList", 8), ("portAttrNotRegistered", 9), ("portNotRegistered", 10), ("portAttrMultiAttrSameType", 11), ("invalidPortAttrBlockLen", 12), ("none", 13))

cfdmiRejectRegNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfdmiRejectRegNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cfdmiRejectRegNotifyEnable.setDescription("This object specifies if the FDMI should generate 'cfdmiRejectRegNotify' notifications. If value of this object is 'true', then the notification is generated when a registration request is rejected. If it is 'false', the notification is not generated.")
cfdmiHbaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1), )
if mibBuilder.loadTexts: cfdmiHbaInfoTable.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoTable.setDescription('This table lists all the HBAs registered with the Fabric Device Management Interface.')
cfdmiHbaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FDMI-MIB", "cfdmiHbaInfoId"))
if mibBuilder.loadTexts: cfdmiHbaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoEntry.setDescription('An entry (conceptual row) in the cfdmiHbaInfoTable. It provides information that has been registered with FDMI by a HBA, identified by cfdmiHbaInfoId, where the registration was received on the VSAN identified by vsanIndex. If the HBA has registered some but not all of the information represented by the columnar objects in this table, then the value of the unregistered objects will be either: the zero-length string (for string-based objects) or the zero value (for interger-based objects).')
cfdmiHbaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 1), FcNameId())
if mibBuilder.loadTexts: cfdmiHbaInfoId.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.5.1 .')
if mibBuilder.loadTexts: cfdmiHbaInfoId.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoId.setDescription('The WWN of this HBA.')
cfdmiHbaInfoNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoNodeName.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.6 .')
if mibBuilder.loadTexts: cfdmiHbaInfoNodeName.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoNodeName.setDescription('The WWN of the node containing this HBA. ')
cfdmiHbaInfoMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoMfg.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.2 .')
if mibBuilder.loadTexts: cfdmiHbaInfoMfg.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoMfg.setDescription('The name of the manufacturer of this HBA.')
cfdmiHbaInfoSn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoSn.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.3 .')
if mibBuilder.loadTexts: cfdmiHbaInfoSn.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoSn.setDescription('The serial number of this HBA.')
cfdmiHbaInfoModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoModel.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.4 .')
if mibBuilder.loadTexts: cfdmiHbaInfoModel.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoModel.setDescription('The model of this HBA.')
cfdmiHbaInfoModelDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoModelDescr.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.5 .')
if mibBuilder.loadTexts: cfdmiHbaInfoModelDescr.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoModelDescr.setDescription('The string that describes the model of this HBA.')
cfdmiHbaInfoHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoHwVer.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.8 .')
if mibBuilder.loadTexts: cfdmiHbaInfoHwVer.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoHwVer.setDescription('The hardware version of this HBA.')
cfdmiHbaInfoDriverVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoDriverVer.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.9 .')
if mibBuilder.loadTexts: cfdmiHbaInfoDriverVer.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoDriverVer.setDescription('The version level of the driver software controlling this HBA.')
cfdmiHbaInfoOptROMVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoOptROMVer.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.10 .')
if mibBuilder.loadTexts: cfdmiHbaInfoOptROMVer.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoOptROMVer.setDescription('The version of the Option ROM or the BIOS of this HBA.')
cfdmiHbaInfoFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoFwVer.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.11 .')
if mibBuilder.loadTexts: cfdmiHbaInfoFwVer.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoFwVer.setDescription('The version of the firmware executed by this HBA.')
cfdmiHbaInfoOSInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoOSInfo.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.12 .')
if mibBuilder.loadTexts: cfdmiHbaInfoOSInfo.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoOSInfo.setDescription('The type and version of the operating system controlling this HBA.')
cfdmiHbaInfoMaxCTPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 1, 1, 12), Unsigned32()).setUnits('32-bit words').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaInfoMaxCTPayload.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.2.13 .')
if mibBuilder.loadTexts: cfdmiHbaInfoMaxCTPayload.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInfoMaxCTPayload.setDescription('The maximum size of the Common Transport (CT) payload including all CT headers but no FC frame header(s), that may be send or received by application software resident in the host containing this HBA.')
cfdmiHbaPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2), )
if mibBuilder.loadTexts: cfdmiHbaPortTable.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortTable.setDescription('List of ports registered with Fibre Channel Device Management Interface.')
cfdmiHbaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FDMI-MIB", "cfdmiHbaInfoId"), (0, "CISCO-FDMI-MIB", "cfdmiHbaPortId"))
if mibBuilder.loadTexts: cfdmiHbaPortEntry.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortEntry.setDescription('An entry (conceptual row) in the cfdmiHbaPortTable. It contains information about the Nx_port, on this HBA, identified by cfdmiHbaInfoId, where the registration of the HBA with FDMI was received on the VSAN identified by vsanIndex. If the HBA has registered some but not all of the information represented by the columnar objects in this table, then the value of the unregistered objects will be either: the zero-length string (for string-based objects) or the zero value (for interger-based objects).')
cfdmiHbaPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1, 1), FcNameId())
if mibBuilder.loadTexts: cfdmiHbaPortId.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.3.3 .')
if mibBuilder.loadTexts: cfdmiHbaPortId.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortId.setDescription('The WWN of this port.')
cfdmiHbaPortSupportedFC4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaPortSupportedFC4Type.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.3.6 and Section 5.2.3.8 . ')
if mibBuilder.loadTexts: cfdmiHbaPortSupportedFC4Type.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortSupportedFC4Type.setDescription('The supported FC-4 types attribute registered for this port on this VSAN.')
cfdmiHbaPortSupportedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaPortSupportedSpeed.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.3.8 .')
if mibBuilder.loadTexts: cfdmiHbaPortSupportedSpeed.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortSupportedSpeed.setDescription('The supported speed registered for this port on this VSAN. ')
cfdmiHbaPortCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaPortCurrentSpeed.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.3.9 .')
if mibBuilder.loadTexts: cfdmiHbaPortCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortCurrentSpeed.setDescription('The current speed registered for this port on this VSAN. ')
cfdmiHbaPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaPortMaxFrameSize.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.3.10 .')
if mibBuilder.loadTexts: cfdmiHbaPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortMaxFrameSize.setDescription('The maximum frame size attribute registered for this port on this VSAN.')
cfdmiHbaPortOsDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaPortOsDevName.setReference('Fibre Channel Generic Services-4 Rev 7.6 Section 6.7.4.4.3.11 .')
if mibBuilder.loadTexts: cfdmiHbaPortOsDevName.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortOsDevName.setDescription('The OS Device Name attribute registered for this port on this VSAN.')
cfdmiHbaPortHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdmiHbaPortHostName.setReference('Fibre Channel Generic Services-4, Late Comment Section 6.7.4.4.3.12 .')
if mibBuilder.loadTexts: cfdmiHbaPortHostName.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortHostName.setDescription('The name of the host associated with this port.')
cfdmiRejectReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 3), CFdmiRejectReasonCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfdmiRejectReasonCode.setStatus('current')
if mibBuilder.loadTexts: cfdmiRejectReasonCode.setDescription('The registration reject reason code. This object contains the reason code corresponding to the most recent FDMI Registration request failure.')
cfdmiRejectReasonCodeExpl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 4), CFdmiRejectReasonCodeExpl()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfdmiRejectReasonCodeExpl.setStatus('current')
if mibBuilder.loadTexts: cfdmiRejectReasonCodeExpl.setDescription("The registration reject reason code explanation. This object contains the reason code explanation if the above object has a reason code corresponding to 'Unable to perform command request'. This object like the one above, corresponds to the most recent FDMI Registration request rejection.")
cfdmiNotifyRegOperType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("regHBA", 1), ("regHAT", 2), ("regPRT", 3), ("regPA", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfdmiNotifyRegOperType.setStatus('current')
if mibBuilder.loadTexts: cfdmiNotifyRegOperType.setDescription("The type of registration operation. 'regHBA' - register HBA. 'regHAT' - register HBA attributes. 'regPRT' - register port. 'regPA' - register port attributes. ")
cfdmiNotifyHBAPortId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 373, 1, 2, 6), FcNameId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfdmiNotifyHBAPortId.setStatus('current')
if mibBuilder.loadTexts: cfdmiNotifyHBAPortId.setDescription("The identifier to be sent in cfdmiRejectRegNotify. The value of this object would be HBA identifier if the value of 'notifyRegOperType' is either 'regHBA' or 'regHAT'. The value of this object would be port identifier if the value of 'notifyRegOperType' is either 'regPRT' or 'regPA'. ")
cfdmiRejectRegNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 373, 0, 1)).setObjects(("CISCO-VSAN-MIB", "notifyVsanIndex"), ("CISCO-FDMI-MIB", "cfdmiNotifyRegOperType"), ("CISCO-FDMI-MIB", "cfdmiNotifyHBAPortId"), ("CISCO-FDMI-MIB", "cfdmiRejectReasonCode"), ("CISCO-FDMI-MIB", "cfdmiRejectReasonCodeExpl"))
if mibBuilder.loadTexts: cfdmiRejectRegNotify.setStatus('current')
if mibBuilder.loadTexts: cfdmiRejectRegNotify.setDescription("This notification is generated by the FDMI whenever it rejects a registration request. The FDMI should update the 'cfdmiRejectReasonCode' and 'cfdmiRejectReasonCodeExpl' objects with the corresponding reason code and reason code explanation before sending the notification. These two objects are also included along with the notification to provide the reason for the reject.")
ciscoFdmiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 2, 1))
ciscoFdmiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 373, 2, 2))
ciscoFdmiMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 373, 2, 1, 1)).setObjects(("CISCO-FDMI-MIB", "cfdmiConfigGroup"), ("CISCO-FDMI-MIB", "cfdmiHbaInformationGroup"), ("CISCO-FDMI-MIB", "cfdmiHbaPortInformationGroup"), ("CISCO-FDMI-MIB", "cfdmiNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFdmiMIBCompliance = ciscoFdmiMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoFdmiMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-FDMI-MIB.')
cfdmiConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 373, 2, 2, 1)).setObjects(("CISCO-FDMI-MIB", "cfdmiRejectRegNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfdmiConfigGroup = cfdmiConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cfdmiConfigGroup.setDescription('A collection of objects for configuring FDMI.')
cfdmiHbaInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 373, 2, 2, 2)).setObjects(("CISCO-FDMI-MIB", "cfdmiHbaInfoNodeName"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoMfg"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoSn"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoModel"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoModelDescr"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoHwVer"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoDriverVer"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoOptROMVer"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoFwVer"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoOSInfo"), ("CISCO-FDMI-MIB", "cfdmiHbaInfoMaxCTPayload"), ("CISCO-FDMI-MIB", "cfdmiRejectReasonCode"), ("CISCO-FDMI-MIB", "cfdmiRejectReasonCodeExpl"), ("CISCO-FDMI-MIB", "cfdmiNotifyRegOperType"), ("CISCO-FDMI-MIB", "cfdmiNotifyHBAPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfdmiHbaInformationGroup = cfdmiHbaInformationGroup.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaInformationGroup.setDescription('A collection of objects for HBA Information.')
cfdmiHbaPortInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 373, 2, 2, 3)).setObjects(("CISCO-FDMI-MIB", "cfdmiHbaPortSupportedFC4Type"), ("CISCO-FDMI-MIB", "cfdmiHbaPortSupportedSpeed"), ("CISCO-FDMI-MIB", "cfdmiHbaPortCurrentSpeed"), ("CISCO-FDMI-MIB", "cfdmiHbaPortMaxFrameSize"), ("CISCO-FDMI-MIB", "cfdmiHbaPortOsDevName"), ("CISCO-FDMI-MIB", "cfdmiHbaPortHostName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfdmiHbaPortInformationGroup = cfdmiHbaPortInformationGroup.setStatus('current')
if mibBuilder.loadTexts: cfdmiHbaPortInformationGroup.setDescription('A collection of objects for HBA port information.')
cfdmiNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 373, 2, 2, 4)).setObjects(("CISCO-FDMI-MIB", "cfdmiRejectRegNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfdmiNotificationGroup = cfdmiNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cfdmiNotificationGroup.setDescription('A collection of notifications for managing FDMI.')
mibBuilder.exportSymbols("CISCO-FDMI-MIB", cfdmiRejectRegNotify=cfdmiRejectRegNotify, cfdmiHbaPortEntry=cfdmiHbaPortEntry, cfdmiHbaPortId=cfdmiHbaPortId, cfdmiHbaPortInformationGroup=cfdmiHbaPortInformationGroup, CFdmiRejectReasonCodeExpl=CFdmiRejectReasonCodeExpl, cfdmiNotificationGroup=cfdmiNotificationGroup, CFdmiRejectReasonCode=CFdmiRejectReasonCode, PYSNMP_MODULE_ID=ciscoFdmiMIB, cfdmiHbaPortHostName=cfdmiHbaPortHostName, cfdmiHbaInfoModel=cfdmiHbaInfoModel, cfdmiHbaInfoOptROMVer=cfdmiHbaInfoOptROMVer, cfdmiHbaPortTable=cfdmiHbaPortTable, cfdmiHbaInfoTable=cfdmiHbaInfoTable, cfdmiNotifyRegOperType=cfdmiNotifyRegOperType, cfdmiHbaPortOsDevName=cfdmiHbaPortOsDevName, cfdmiStatistics=cfdmiStatistics, ciscoFdmiMIBNotifications=ciscoFdmiMIBNotifications, cfdmiHbaInfoMfg=cfdmiHbaInfoMfg, cfdmiHbaPortSupportedSpeed=cfdmiHbaPortSupportedSpeed, ciscoFdmiMIB=ciscoFdmiMIB, cfdmiHbaInfoSn=cfdmiHbaInfoSn, cfdmiConfigGroup=cfdmiConfigGroup, cfdmiHbaInfoFwVer=cfdmiHbaInfoFwVer, cfdmiHbaInfoId=cfdmiHbaInfoId, cfdmiHbaInformationGroup=cfdmiHbaInformationGroup, ciscoFdmiMIBCompliances=ciscoFdmiMIBCompliances, cfdmiHbaInfoModelDescr=cfdmiHbaInfoModelDescr, cfdmiHbaInfoDriverVer=cfdmiHbaInfoDriverVer, cfdmiHbaInfoMaxCTPayload=cfdmiHbaInfoMaxCTPayload, cfdmiHbaPortCurrentSpeed=cfdmiHbaPortCurrentSpeed, ciscoFdmiMIBConformance=ciscoFdmiMIBConformance, cfdmiHbaPortMaxFrameSize=cfdmiHbaPortMaxFrameSize, cfdmiRejectRegNotifyEnable=cfdmiRejectRegNotifyEnable, cfdmiHbaInfoHwVer=cfdmiHbaInfoHwVer, ciscoFdmiMIBGroups=ciscoFdmiMIBGroups, cfdmiRejectReasonCode=cfdmiRejectReasonCode, ciscoFdmiMIBCompliance=ciscoFdmiMIBCompliance, cfdmiHbaInfoOSInfo=cfdmiHbaInfoOSInfo, cfdmiConfig=cfdmiConfig, cfdmiHbaInfoNodeName=cfdmiHbaInfoNodeName, ciscoFdmiMIBObjects=ciscoFdmiMIBObjects, cfdmiHbaInfoEntry=cfdmiHbaInfoEntry, cfdmiNotifyHBAPortId=cfdmiNotifyHBAPortId, cfdmiRejectReasonCodeExpl=cfdmiRejectReasonCodeExpl, cfdmiHbaPortSupportedFC4Type=cfdmiHbaPortSupportedFC4Type, cfdmiInfo=cfdmiInfo)
