#
# PySNMP MIB module CISCO-VDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VDC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Cisco2KVlanList, = mibBuilder.importSymbols("CISCO-TC", "Cisco2KVlanList")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Unsigned32, NotificationType, Counter32, MibIdentifier, Integer32, TimeTicks, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "NotificationType", "Counter32", "MibIdentifier", "Integer32", "TimeTicks", "Gauge32", "Bits")
TextualConvention, RowStatus, DisplayString, MacAddress, TruthValue, DateAndTime, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "MacAddress", "TruthValue", "DateAndTime", "StorageType")
ciscoVdcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 774))
ciscoVdcMIB.setRevisions(('2016-11-03 00:00', '2016-01-19 00:00', '2013-09-24 00:00', '2013-07-02 00:00', '2013-06-08 00:00', '2011-05-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVdcMIB.setRevisionsDescriptions(('Add the following new enumerations for object ciscoVdcFeatureSetList - virtualization(5) - fabric(6) - fcoeNpv(7)', "Added 'm3' enumerator for ciscoVdcModuleCapList.", "Added 'f3' enumerator for ciscoVdcModuleCapList.", 'Added MIN-ACCESS statement for the following objects: - ciscoVdcCombinedHostnameEnabled - ciscoVdcName - ciscoVdcRowStatus - ciscoVdcAdminStatus - ciscoVdcIfMembershipStorageType - ciscoVdcIfMembershipStatus - ciscoVdcFCoEVlansSecond2K - ciscoVdcFCoEVlansFirst2K - ciscoVdcFCoEVlansFromVdc - ciscoVdcSharedInterfaceStorageType - ciscoVdcSharedInterfaceRowStatus.', 'Added following OBJECT-GROUP: - ciscoVdcExtGroup - ciscoVdcGlobalResUsageGroup - ciscoVdcResUsageGroup - ciscoVdcResTemplateGroup - ciscoVdcGlobalGroup - ciscoVdcIfMembershipGroup - ciscoVdcFCoEVlansGroup - ciscoVdcSharedInterfaceGroup Added new compliance - ciscoVdcMIBCompliance1.', 'Initial version',))
if mibBuilder.loadTexts: ciscoVdcMIB.setLastUpdated('201611030000Z')
if mibBuilder.loadTexts: ciscoVdcMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVdcMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-nexus7000@cisco.com')
if mibBuilder.loadTexts: ciscoVdcMIB.setDescription('This MIB module defines the objects that describes virtual devices. VDCs are a feature of Nexus series switches from Cisco Systems that allow users to create virtual switches and partition the physical hardware across said virtual switches. This is commonly used to provide management separation without the extra overhead of additional physical hardware. Glossary of the terms used in this MIB: VDC - Virtual Device Context HA - High Availability')
ciscoVdcMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 0))
ciscoVdcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1))
ciscoVdcMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 2))
ciscoVdcGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 2))
ciscoVdcExt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3))
ciscoVdcResource = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4))
ciscoVdcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5))
class CiscoVdcHaPolicy(TextualConvention, Integer32):
    description = 'The High Availability policy for VDC. reload - reload the supervisor module restart - take down the VDC and recreate it using the startup configuration bringDown - put the VDC in failed state. To recover from failed state, the physical device must be reloaded switchOver - initiate a supervisor module switchover'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("reload", 0), ("restart", 1), ("bringDown", 2), ("switchOver", 3))

class CiscoVdcPercentOrMinusOne(TextualConvention, Integer32):
    description = 'An integer that is in the range of a percent value. A value of -1 means that the percentage is not available.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )
ciscoVdcMaxNumberVdcAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcMaxNumberVdcAllowed.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcMaxNumberVdcAllowed.setDescription('This object indicates the maximum number of VDC instances that can be created in the device.')
ciscoVdcCombinedHostnameEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcCombinedHostnameEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcCombinedHostnameEnabled.setDescription('This object specifies whether the combined hostname functionality is enabled or not. When the combined hostname functionality is enabled, the hostname of non-default VDCs will be <default VDC name>-<nondefault VDC name>.')
ciscoVdcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1), )
if mibBuilder.loadTexts: ciscoVdcTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcTable.setDescription('This table contains entries representing a VDC instance. There will be an entry for each VDC instance created in the system.')
ciscoVdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"))
if mibBuilder.loadTexts: ciscoVdcEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcEntry.setDescription("An entry representing the information pertaining to a virtual device instance. A peer SNMP entity may create a virtual device instance by setting an instance of ciscoVdcRowStatus to 'createAndWait' or 'createAndGo'. Observe that an implementation that does not support these options must specify these limitations in an agent capabilities statement. Other management entities (e.g., the local console) may perform actions resulting in the creation of a virtual device instance. In these cases, the system must automatically create a row in the ciscoVdcTable. A peer SNMP entity may destroy a virtual device instance by setting the corresponding instance of ciscoVdcRowStatus to 'destroy'. Observe that an implementation that does not support this option must specify this limitation in an agent capabilities statement. Other management entities may perform actions resulting in the destruction of a virtual device instance. In these cases, the system must automatically destroy the corresponding row in the ciscoVdcTable.")
ciscoVdcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: ciscoVdcId.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies a virtual device instance.')
ciscoVdcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcName.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcName.setDescription('The human-readable name of the VDC instance. This name uniquely identifies the VDC instance in the system.')
ciscoVdcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("active", 1), ("suspended", 2), ("nonconfigured", 3), ("configured", 4), ("creating", 5), ("deleting", 6), ("failed", 7), ("pending", 8), ("updating", 9), ("restarting", 10), ("suspending", 11), ("resuming", 12), ("failing", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcState.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcState.setDescription('This object indicates the current operational state of the virtual device.')
ciscoVdcFcoeCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disallowed", 1), ("allowed", 2), ("installed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcFcoeCapable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFcoeCapable.setDescription('This object indicates the FCoE capabilities of the virtual device.')
ciscoVdcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcMac.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcMac.setDescription('This object indicates the router MAC address of the virtual device.')
ciscoVdcSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcSwitchId.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSwitchId.setDescription('This object indicates the MAC address of the device where the virtual device instance is created.')
ciscoVdcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcRowStatus.setDescription('This object is used to create, modify, and/or delete a row in this table. In particular, a newly created row cannot be made active until the ciscoVdcName value is set. ciscoVdcName may not be modified while the value of this object is active(1). An attempt to set ciscoVdcName while the value of RowStatus is active(1) will result in an inconsistentValue error. Agent may delete any virtual device which has ciscoVdcState of active(1) and ciscoVdcRowStatus of Active.')
ciscoVdcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 1, 1, 8), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcStorageType.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcStorageType.setDescription('This object specifies the storage type for this conceptual row. The following columnar objects are allowed to be writable when the storageType of this conceptual row is permanent(4): none')
ciscoVdcExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoVdcExtTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcExtTable.setDescription('This table contains additional information of a VDC instance. There will be an entry for each VDC instance created in the system.')
ciscoVdcExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"))
if mibBuilder.loadTexts: ciscoVdcExtEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcExtEntry.setDescription('Each row contains additional information of a VDC instance.')
ciscoVdcSingleSupHaPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 1), CiscoVdcHaPolicy().clone('restart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcSingleSupHaPolicy.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSingleSupHaPolicy.setDescription('This object specifies the High Availability policy of a particular VDC when there is only one supervisor on the device.')
ciscoVdcDualSupHaPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 2), CiscoVdcHaPolicy().clone('switchOver')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcDualSupHaPolicy.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcDualSupHaPolicy.setDescription('This object specifies the High Availability policy of a particular VDC when both the active supervisor and standby supervisor are present on the device.')
ciscoVdcBootOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcBootOrder.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcBootOrder.setDescription('This object specifies the boot order value for this particular VDC. The VDCs with the lowest boot order will boot first.')
ciscoVdcTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcTimeCreated.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcTimeCreated.setDescription('This object indicates the time at which a particular VDC was created.')
ciscoVdcReloadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcReloadCount.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcReloadCount.setDescription('This object indicates the number of times a particular VDC has been reloaded.')
ciscoVdcRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcRestartCount.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcRestartCount.setDescription('This object indicates the number of times a VDC identified by ciscoVdcId has been restarted.')
ciscoVdcRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcRestartTime.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcRestartTime.setDescription("This object indicates the most recent restart time of the VDC instance. This object contains value 0x0000010100000000 when the corresponding instance value of ciscoVdcRestartCount is '0'.")
ciscoVdcRestartReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcRestartReason.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcRestartReason.setDescription('This object indicates the reason of the most recent restart of the VDC.')
ciscoVdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admin", 1), ("ethernet", 2), ("storage", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcType.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcType.setDescription('This object specifies the type of the VDC.')
ciscoVdcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("suspended", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcAdminStatus.setDescription('This object indicates the administrative status of the VDC. active -- the VDC will be put into active state. suspended -- the VDC will be put into paused state. When the suspended VDC is bening resumed, it will come up with its startup configuration.')
ciscoVdcFromUnallocatedIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("allocate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFromUnallocatedIntf.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFromUnallocatedIntf.setDescription("This object specifies the way that interfaces are allocated from the unallocated interface pool. When the value of this object is set to 'allocate', interfaces in the unallocated interface pool will be allocated to a particular VDC on a best-efforts basis. This object always has the value 'noOp' when read.")
ciscoVdcFeatureSetList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 12), Bits().clone(namedValues=NamedValues(("fcoe", 0), ("fabricPath", 1), ("fex", 2), ("mpls", 3), ("ethernet", 4), ("virtualization", 5), ("fabric", 6), ("fcoeNpv", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFeatureSetList.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFeatureSetList.setDescription('This object specifies whether a specified feature set is enabled for a VDC. If a bit corresponding to a feature set is set to 1, then the specified feature set is enabled. fcoe -- fiber channel over ethernet feature set. fabricPath -- fabric path feature set. fex -- fabric extender feature set. mpls -- multiprotocol label switching feature set. ethernet -- ethernet feature set. virtualization -- virtual machine feature set. fabric -- fabric feature set. fcoeNpv -- fcoe Edge N-Port virtualizer feature set.')
ciscoVdcResourceTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcResourceTemplate.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResourceTemplate.setDescription('This object specifies the name of the resource template of the VDC.')
ciscoVdcModuleCapList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 14), Bits().clone(namedValues=NamedValues(("m1", 0), ("f1", 1), ("m1xl", 2), ("f2", 3), ("m2xl", 4), ("fc", 5), ("f2e", 6), ("f3", 7), ("m3", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcModuleCapList.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcModuleCapList.setDescription('This object specifies type of modules which are allowed in this VDC. If a bit corresponding to a module type is set to 1, then the specified module type is allowed in the VDC. m1 -- M1 series modules. f1 -- F1 series modules. m1xl -- M1XL series modules. f2 -- F2 series modules. m2xl -- M2XL series modules fc -- Fiber Channel modules f2e -- F2E series modules f3 -- F3 series modules. m3 -- M3 series modules.')
ciscoVdcCpuPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcCpuPriority.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcCpuPriority.setDescription('This object specifies the CPU priority/share for a particular VDC. A value of -1 means this information is not available.')
ciscoVdcCpuSharePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 3, 1, 1, 16), CiscoVdcPercentOrMinusOne()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcCpuSharePercent.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcCpuSharePercent.setDescription('This object indicates the CPU share percentage for a particular VDC.')
ciscoVdcGlobalResUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1), )
if mibBuilder.loadTexts: ciscoVdcGlobalResUsageTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResUsageTable.setDescription('This table contains information regarding global resource usage and utilization on the device.')
ciscoVdcGlobalResUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcGlobalResID"))
if mibBuilder.loadTexts: ciscoVdcGlobalResUsageEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResUsageEntry.setDescription('Each row contains information regarding global usage and utilization for a particular resource.')
ciscoVdcGlobalResID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ciscoVdcGlobalResID.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResID.setDescription('A unique value, greater than zero, that uniquely identifies a type of resource.')
ciscoVdcGlobalResName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResName.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResName.setDescription('This object indicates the name of the resource on the device.')
ciscoVdcGlobalResUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResUsed.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResUsed.setDescription('This object indicates the number of instances of a particular resource that are currently in use.')
ciscoVdcGlobalResUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResUnused.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResUnused.setDescription('This object indicates the number of instances of a particular resource that are reserved, and currently not in use.')
ciscoVdcGlobalResFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResFree.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResFree.setDescription('This object indicates the number of instances of a particular resource that still remain to be used.')
ciscoVdcGlobalResAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResAvail.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResAvail.setDescription('This object indicates the number of instances of a particular resource that are available to be allocated.')
ciscoVdcGlobalResTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcGlobalResTotal.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResTotal.setDescription('This object indicates the total number of a particular resource.')
ciscoVdcResUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2), )
if mibBuilder.loadTexts: ciscoVdcResUsageTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResUsageTable.setDescription('This table contains information regarding resource usage and utilization for a particular VDC.')
ciscoVdcResUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"), (0, "CISCO-VDC-MIB", "ciscoVdcResID"))
if mibBuilder.loadTexts: ciscoVdcResUsageEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResUsageEntry.setDescription('Each row contains information regarding the usage and utilization of a particular resource for a particular VDC.')
ciscoVdcResID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ciscoVdcResID.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResID.setDescription('A unique value, greater than zero, that uniquely identifies a type of resource.')
ciscoVdcResMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcResMin.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResMin.setDescription('This object specifies the minimum number of instances of a particular resource that needs to be allocated to a particular VDC.')
ciscoVdcResMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcResMax.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResMax.setDescription('This object specifies the maximum number of instances of a particular resource that allow to be allocated to a particular VDC.')
ciscoVdcResUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcResUsed.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResUsed.setDescription('This object indicates the number of instances of a particular resource that are currently in use for a particular VDC.')
ciscoVdcResUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcResUnused.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResUnused.setDescription('This object indicates the number of instances of a particular resource that are reserved, and currently not in use for a particular VDC.')
ciscoVdcResAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoVdcResAvail.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResAvail.setDescription('This object indicates the number of instances of a particular resource that are available to be allocated for a particular VDC.')
ciscoVdcResTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3), )
if mibBuilder.loadTexts: ciscoVdcResTemplateTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateTable.setDescription('This table contains information regarding the resource allocation for VDC resource template.')
ciscoVdcResTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcResTemplateName"), (0, "CISCO-VDC-MIB", "ciscoVdcResTemplateResID"))
if mibBuilder.loadTexts: ciscoVdcResTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateEntry.setDescription('Each row contains information regarding the allocation of a particluar resource for a particular VDC resource template.')
ciscoVdcResTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ciscoVdcResTemplateName.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateName.setDescription('This object indicates the name of the resource template.')
ciscoVdcResTemplateResID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ciscoVdcResTemplateResID.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateResID.setDescription('A unique value, greater than zero, that can identify a type of resource.')
ciscoVdcResTemplateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateMin.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateMin.setDescription('This object specified the minimum number of instances of a particular resource that are allocated to this VDC template.')
ciscoVdcResTemplateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateMax.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateMax.setDescription('This object specifies the maximum number of instances of a particular resource that are allocated to this VDC template.')
ciscoVdcResTemplateStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateStorageType.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateStorageType.setDescription('This object specifies the storage type of a conceptual row in this table.')
ciscoVdcResTemplateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 4, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcResTemplateStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateStatus.setDescription('This object specifies the status of a conceptual row in this table.All writable objects in this row may be modified at any time.')
ciscoVdcIfMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1), )
if mibBuilder.loadTexts: ciscoVdcIfMembershipTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcIfMembershipTable.setDescription('This table contains information about VDC interface membership.')
ciscoVdcIfMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"), (0, "CISCO-VDC-MIB", "ciscoVdcIfMembershipifIndex"))
if mibBuilder.loadTexts: ciscoVdcIfMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcIfMembershipEntry.setDescription('A conceptual row containing information about VDC interface membership.')
ciscoVdcIfMembershipifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ciscoVdcIfMembershipifIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcIfMembershipifIndex.setDescription('ifIndex of the interface membership of this VDC.')
ciscoVdcIfMembershipStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcIfMembershipStorageType.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcIfMembershipStorageType.setDescription('This object specifies the storage type of a conceptual row in this table.')
ciscoVdcIfMembershipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcIfMembershipStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcIfMembershipStatus.setDescription('This object specifies the row status of a conceptual row in this table.')
ciscoVdcFCoEVlansTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2), )
if mibBuilder.loadTexts: ciscoVdcFCoEVlansTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFCoEVlansTable.setDescription('This table contains information regarding allocation of VLANs that can be used for FCoE.')
ciscoVdcFCoEVlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"))
if mibBuilder.loadTexts: ciscoVdcFCoEVlansEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFCoEVlansEntry.setDescription('A conceptual row containing information regarding allocation of VLANs that can be used for FCoE.')
ciscoVdcFCoEVlansFirst2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1, 1), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFCoEVlansFirst2K.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFCoEVlansFirst2K.setDescription("A string of octets containing one bit per VLAN for VLANs 0 to 2047 that are reserved for FCoE. If the bit corresponding to a VLAN is set to '1', then the VLAN is reserved for FCoE. If the bit is set to '0', then the VLAN is not reserved for FCoE")
ciscoVdcFCoEVlansSecond2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1, 2), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFCoEVlansSecond2K.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFCoEVlansSecond2K.setDescription("A string of octets containing one bit per VLAN for VLANs 2048 to 4095 that are reserved for FCoE. If the bit corresponding to a VLAN is set to '1', then the VLAN is reserved for FCoE. If the bit is set to '0', then the VLAN is not reserved for FCoE")
ciscoVdcFCoEVlansFromVdc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoVdcFCoEVlansFromVdc.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFCoEVlansFromVdc.setDescription('This object specifies which VDCs are going to share ports with the storage VDC.')
ciscoVdcSharedInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3), )
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceTable.setDescription('This table contains information about VDC shared interface membership.')
ciscoVdcSharedInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-VDC-MIB", "ciscoVdcId"), (0, "CISCO-VDC-MIB", "ciscoVdcSharedInterfaceifIndex"))
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceEntry.setDescription('A conceptual row containing information about VDC shared interface membership.')
ciscoVdcSharedInterfaceifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceifIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceifIndex.setDescription('A unique value, greater than zero, for each interface.')
ciscoVdcSharedInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceStorageType.setDescription('This object specifies the storage type of a conceptual row in this table')
ciscoVdcSharedInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 774, 1, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceRowStatus.setDescription('This object specifies the row status of a conceptual row in this table.')
ciscoVdcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 1))
ciscoVdcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2))
ciscoVdcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 1, 1)).setObjects(("CISCO-VDC-MIB", "ciscoVdcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcMIBCompliance = ciscoVdcMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVdcMIBCompliance.setDescription('This compliance statement specifies the minimal requirements an implementation must meet in order to claim full compliance with the definition of the CISCO-VDC-MIB.')
ciscoVdcMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 1, 2)).setObjects(("CISCO-VDC-MIB", "ciscoVdcGroup"), ("CISCO-VDC-MIB", "ciscoVdcExtGroup"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResUsageGroup"), ("CISCO-VDC-MIB", "ciscoVdcResUsageGroup"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateGroup"), ("CISCO-VDC-MIB", "ciscoVdcGlobalGroup"), ("CISCO-VDC-MIB", "ciscoVdcIfMembershipGroup"), ("CISCO-VDC-MIB", "ciscoVdcFCoEVlansGroup"), ("CISCO-VDC-MIB", "ciscoVdcSharedInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcMIBCompliance1 = ciscoVdcMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcMIBCompliance1.setDescription('This compliance statement specifies the minimal requirements an implementation must meet in order to claim full compliance with the definition of the CISCO-VDC-MIB.')
ciscoVdcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 1)).setObjects(("CISCO-VDC-MIB", "ciscoVdcName"), ("CISCO-VDC-MIB", "ciscoVdcState"), ("CISCO-VDC-MIB", "ciscoVdcFcoeCapable"), ("CISCO-VDC-MIB", "ciscoVdcMac"), ("CISCO-VDC-MIB", "ciscoVdcSwitchId"), ("CISCO-VDC-MIB", "ciscoVdcRowStatus"), ("CISCO-VDC-MIB", "ciscoVdcStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcGroup = ciscoVdcGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGroup.setDescription('This group contains the objects describing virtual device instances.')
ciscoVdcExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 2)).setObjects(("CISCO-VDC-MIB", "ciscoVdcSingleSupHaPolicy"), ("CISCO-VDC-MIB", "ciscoVdcDualSupHaPolicy"), ("CISCO-VDC-MIB", "ciscoVdcBootOrder"), ("CISCO-VDC-MIB", "ciscoVdcTimeCreated"), ("CISCO-VDC-MIB", "ciscoVdcReloadCount"), ("CISCO-VDC-MIB", "ciscoVdcRestartCount"), ("CISCO-VDC-MIB", "ciscoVdcRestartTime"), ("CISCO-VDC-MIB", "ciscoVdcRestartReason"), ("CISCO-VDC-MIB", "ciscoVdcType"), ("CISCO-VDC-MIB", "ciscoVdcAdminStatus"), ("CISCO-VDC-MIB", "ciscoVdcFromUnallocatedIntf"), ("CISCO-VDC-MIB", "ciscoVdcFeatureSetList"), ("CISCO-VDC-MIB", "ciscoVdcResourceTemplate"), ("CISCO-VDC-MIB", "ciscoVdcModuleCapList"), ("CISCO-VDC-MIB", "ciscoVdcCpuPriority"), ("CISCO-VDC-MIB", "ciscoVdcCpuSharePercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcExtGroup = ciscoVdcExtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcExtGroup.setDescription('This group contains the additional objects describing virtual device instances.')
ciscoVdcGlobalResUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 3)).setObjects(("CISCO-VDC-MIB", "ciscoVdcGlobalResName"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResUsed"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResUnused"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResFree"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResAvail"), ("CISCO-VDC-MIB", "ciscoVdcGlobalResTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcGlobalResUsageGroup = ciscoVdcGlobalResUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalResUsageGroup.setDescription('This group contains the objects regarding global resource usage and utilization on the device.')
ciscoVdcResUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 4)).setObjects(("CISCO-VDC-MIB", "ciscoVdcResMin"), ("CISCO-VDC-MIB", "ciscoVdcResMax"), ("CISCO-VDC-MIB", "ciscoVdcResUsed"), ("CISCO-VDC-MIB", "ciscoVdcResUnused"), ("CISCO-VDC-MIB", "ciscoVdcResAvail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcResUsageGroup = ciscoVdcResUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResUsageGroup.setDescription('This group contains the objects regarding resource usage and utilization for a particular VDC.')
ciscoVdcResTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 5)).setObjects(("CISCO-VDC-MIB", "ciscoVdcResTemplateMin"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateMax"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateStatus"), ("CISCO-VDC-MIB", "ciscoVdcResTemplateStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcResTemplateGroup = ciscoVdcResTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcResTemplateGroup.setDescription('This group contains the objects regarding the resource allocation information for VDC resource template.')
ciscoVdcGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 6)).setObjects(("CISCO-VDC-MIB", "ciscoVdcMaxNumberVdcAllowed"), ("CISCO-VDC-MIB", "ciscoVdcCombinedHostnameEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcGlobalGroup = ciscoVdcGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcGlobalGroup.setDescription('This group contains the objets regarding global information for VDC.')
ciscoVdcIfMembershipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 7)).setObjects(("CISCO-VDC-MIB", "ciscoVdcIfMembershipStatus"), ("CISCO-VDC-MIB", "ciscoVdcIfMembershipStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcIfMembershipGroup = ciscoVdcIfMembershipGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcIfMembershipGroup.setDescription('This group contains the object about VDC interface membership.')
ciscoVdcFCoEVlansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 8)).setObjects(("CISCO-VDC-MIB", "ciscoVdcFCoEVlansFirst2K"), ("CISCO-VDC-MIB", "ciscoVdcFCoEVlansSecond2K"), ("CISCO-VDC-MIB", "ciscoVdcFCoEVlansFromVdc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcFCoEVlansGroup = ciscoVdcFCoEVlansGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcFCoEVlansGroup.setDescription('This group contains the objects regarding allocation of VLANs that can be used for FCoE.')
ciscoVdcSharedInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 774, 2, 2, 9)).setObjects(("CISCO-VDC-MIB", "ciscoVdcSharedInterfaceRowStatus"), ("CISCO-VDC-MIB", "ciscoVdcSharedInterfaceStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVdcSharedInterfaceGroup = ciscoVdcSharedInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVdcSharedInterfaceGroup.setDescription('This group contains object about VDC interface shared membership.')
mibBuilder.exportSymbols("CISCO-VDC-MIB", ciscoVdcRestartTime=ciscoVdcRestartTime, ciscoVdcGlobal=ciscoVdcGlobal, ciscoVdcFcoeCapable=ciscoVdcFcoeCapable, ciscoVdcMIB=ciscoVdcMIB, ciscoVdcResTemplateStatus=ciscoVdcResTemplateStatus, ciscoVdcSharedInterfaceGroup=ciscoVdcSharedInterfaceGroup, ciscoVdcGlobalResFree=ciscoVdcGlobalResFree, ciscoVdcResUsageEntry=ciscoVdcResUsageEntry, ciscoVdcIfMembershipStorageType=ciscoVdcIfMembershipStorageType, ciscoVdcResMax=ciscoVdcResMax, ciscoVdcMIBNotifs=ciscoVdcMIBNotifs, ciscoVdcSharedInterfaceifIndex=ciscoVdcSharedInterfaceifIndex, ciscoVdcModuleCapList=ciscoVdcModuleCapList, ciscoVdcIfMembershipStatus=ciscoVdcIfMembershipStatus, ciscoVdcRestartReason=ciscoVdcRestartReason, ciscoVdcGlobalResUsed=ciscoVdcGlobalResUsed, ciscoVdcResUsageTable=ciscoVdcResUsageTable, PYSNMP_MODULE_ID=ciscoVdcMIB, ciscoVdcResTemplateMax=ciscoVdcResTemplateMax, ciscoVdcId=ciscoVdcId, ciscoVdcMIBConform=ciscoVdcMIBConform, ciscoVdcRowStatus=ciscoVdcRowStatus, ciscoVdcFCoEVlansFromVdc=ciscoVdcFCoEVlansFromVdc, ciscoVdcTimeCreated=ciscoVdcTimeCreated, ciscoVdcGlobalResUsageTable=ciscoVdcGlobalResUsageTable, ciscoVdcGlobalResUsageGroup=ciscoVdcGlobalResUsageGroup, ciscoVdcMIBObjects=ciscoVdcMIBObjects, ciscoVdcGlobalResAvail=ciscoVdcGlobalResAvail, ciscoVdcGlobalGroup=ciscoVdcGlobalGroup, ciscoVdcGlobalResUnused=ciscoVdcGlobalResUnused, ciscoVdcReloadCount=ciscoVdcReloadCount, ciscoVdcResTemplateMin=ciscoVdcResTemplateMin, ciscoVdcResTemplateEntry=ciscoVdcResTemplateEntry, ciscoVdcFCoEVlansTable=ciscoVdcFCoEVlansTable, ciscoVdcResourceTemplate=ciscoVdcResourceTemplate, CiscoVdcHaPolicy=CiscoVdcHaPolicy, ciscoVdcMIBCompliances=ciscoVdcMIBCompliances, ciscoVdcSwitchId=ciscoVdcSwitchId, ciscoVdcExtTable=ciscoVdcExtTable, ciscoVdcSingleSupHaPolicy=ciscoVdcSingleSupHaPolicy, ciscoVdcGlobalResID=ciscoVdcGlobalResID, ciscoVdcRestartCount=ciscoVdcRestartCount, ciscoVdcSharedInterfaceTable=ciscoVdcSharedInterfaceTable, ciscoVdcExtEntry=ciscoVdcExtEntry, ciscoVdcFCoEVlansGroup=ciscoVdcFCoEVlansGroup, ciscoVdcResTemplateResID=ciscoVdcResTemplateResID, ciscoVdcGlobalResUsageEntry=ciscoVdcGlobalResUsageEntry, ciscoVdcResTemplateName=ciscoVdcResTemplateName, ciscoVdcFCoEVlansSecond2K=ciscoVdcFCoEVlansSecond2K, ciscoVdcInterface=ciscoVdcInterface, ciscoVdcCombinedHostnameEnabled=ciscoVdcCombinedHostnameEnabled, ciscoVdcIfMembershipEntry=ciscoVdcIfMembershipEntry, ciscoVdcMaxNumberVdcAllowed=ciscoVdcMaxNumberVdcAllowed, ciscoVdcStorageType=ciscoVdcStorageType, ciscoVdcResUsageGroup=ciscoVdcResUsageGroup, ciscoVdcSharedInterfaceRowStatus=ciscoVdcSharedInterfaceRowStatus, ciscoVdcFeatureSetList=ciscoVdcFeatureSetList, ciscoVdcMac=ciscoVdcMac, ciscoVdcState=ciscoVdcState, ciscoVdcExtGroup=ciscoVdcExtGroup, ciscoVdcIfMembershipifIndex=ciscoVdcIfMembershipifIndex, ciscoVdcEntry=ciscoVdcEntry, ciscoVdcDualSupHaPolicy=ciscoVdcDualSupHaPolicy, ciscoVdcTable=ciscoVdcTable, ciscoVdcMIBGroups=ciscoVdcMIBGroups, ciscoVdcMIBCompliance=ciscoVdcMIBCompliance, CiscoVdcPercentOrMinusOne=CiscoVdcPercentOrMinusOne, ciscoVdcAdminStatus=ciscoVdcAdminStatus, ciscoVdcType=ciscoVdcType, ciscoVdcMIBCompliance1=ciscoVdcMIBCompliance1, ciscoVdcResUsed=ciscoVdcResUsed, ciscoVdcSharedInterfaceEntry=ciscoVdcSharedInterfaceEntry, ciscoVdcResource=ciscoVdcResource, ciscoVdcResUnused=ciscoVdcResUnused, ciscoVdcResMin=ciscoVdcResMin, ciscoVdcIfMembershipTable=ciscoVdcIfMembershipTable, ciscoVdcBootOrder=ciscoVdcBootOrder, ciscoVdcGroup=ciscoVdcGroup, ciscoVdcSharedInterfaceStorageType=ciscoVdcSharedInterfaceStorageType, ciscoVdcExt=ciscoVdcExt, ciscoVdcName=ciscoVdcName, ciscoVdcFromUnallocatedIntf=ciscoVdcFromUnallocatedIntf, ciscoVdcCpuSharePercent=ciscoVdcCpuSharePercent, ciscoVdcFCoEVlansFirst2K=ciscoVdcFCoEVlansFirst2K, ciscoVdcResTemplateTable=ciscoVdcResTemplateTable, ciscoVdcGlobalResTotal=ciscoVdcGlobalResTotal, ciscoVdcResAvail=ciscoVdcResAvail, ciscoVdcIfMembershipGroup=ciscoVdcIfMembershipGroup, ciscoVdcResTemplateGroup=ciscoVdcResTemplateGroup, ciscoVdcResID=ciscoVdcResID, ciscoVdcCpuPriority=ciscoVdcCpuPriority, ciscoVdcGlobalResName=ciscoVdcGlobalResName, ciscoVdcFCoEVlansEntry=ciscoVdcFCoEVlansEntry, ciscoVdcResTemplateStorageType=ciscoVdcResTemplateStorageType)
