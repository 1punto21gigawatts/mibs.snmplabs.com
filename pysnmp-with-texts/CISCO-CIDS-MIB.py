#
# PySNMP MIB module CISCO-CIDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CIDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned64, CiscoIpProtocol = mibBuilder.importSymbols("CISCO-TC", "Unsigned64", "CiscoIpProtocol")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Gauge32, ObjectIdentity, Counter64, MibIdentifier, TimeTicks, iso, Unsigned32, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Gauge32", "ObjectIdentity", "Counter64", "MibIdentifier", "TimeTicks", "iso", "Unsigned32", "Integer32", "Counter32")
DisplayString, TruthValue, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "DateAndTime")
ciscoCidsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 383))
ciscoCidsMIB.setRevisions(('2013-08-08 00:00', '2008-06-26 00:00', '2006-03-02 00:00', '2005-10-10 00:00', '2003-12-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCidsMIB.setRevisionsDescriptions(('Added the following TEXTUAL-CONVENTIONS: CidsApplicationStatus CidsHealthStatusColor Added the following health group: ciscoCidsHealthObjectGroupRev1 Added the following TRAP notifications group: ciscoCidsNotificationsGroupRev1 Deprecated cidsAlertInterfaceGroup to replace it with cidsAlertVirtualSensor since the datatype is incorrect (CSCsv26568).', 'Added the following alert action objects: cidsAlertDenyPacket, cidsAlertBlockHost, cidsAlertTcpOneWayResetSent. Added ciscoCidsOptionalObjectGroupRev2, ciscoCidsMIBComplianceRev3.', 'Added the CidsTargetValue and CidsAttackRelevance textual conventions. Added the following alert objects: cidsAlertThreatValueRating cidsAlertRiskRatingTargetValue cidsAlertRiskRatingRelevance cidsAlertRiskRatingWatchList', 'Added errEngineBuildFailed to the CidsErrorCode textual convention. Added the following alert action objects: cidsAlertDeniedAttacker cidsAlertDeniedFlow cidsAlertDenyPacketReqNotPerf cidsAlertDenyFlowReqNotPerf cidsAlertDenyAttackerReqNotPerf cidsAlertBlockConnectionReq cidsAlertLogAttackerPacketsAct cidsAlertLogVictimPacketsAct cidsAlertLogPairPacketsActivated cidsAlertRateLimitRequested cidsAlertDeniedAttackVictimPair cidsAlertDeniedAttackSericePair cidsAlertDenyAttackVicReqNotPerf cidsAlertDenyAttackSerReqNotPerf Added the cidsAlertIfIndex and cidsAlertProtocol objects.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCidsMIB.setLastUpdated('201308090000Z')
if mibBuilder.loadTexts: ciscoCidsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCidsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-netranger@cisco.com')
if mibBuilder.loadTexts: ciscoCidsMIB.setDescription('Cisco Intrusion Detection System MIB. Provides trap definitions for the evAlert and evError elements of the IDIOM (Intrusion Detection and Operations Messages) document and read support for the Intrusion Detection System (sensor) health information, such as if the sensor is in a memory critical stage.')
ciscoCidsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 0))
ciscoCidsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 1))
ciscoCidsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 2))
cidsGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1))
cidsAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2))
cidsError = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 3))
class CidsHealthStatusColor(TextualConvention, Integer32):
    description = 'An enumerated value which identifies the status colors for health related statistics. The colors are chosen since they are commonly used in health dashboards when visualizing the status of a component and should generally be understood. green Indicates sensor health status is good and currently no issues. yellow Indicates degrade in health status. please monitor closely until the status changes back to green. red A problem has occurred and the status is unhealthy immediate attention is needed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("green", 1), ("yellow", 2), ("red", 3))

class CidsApplicationStatus(TextualConvention, Integer32):
    description = 'An enumerated value which identifies the status values that are possible for a process. notResponding The process is no longer responding and may be down. notRunning The process is not currently running. processingTransaction The process is currently processing a control transaction. reconfiguring The configuration for this process is being changed. running The process is up and running. starting The process is starting and will be up and running momentarily. stopping The process is currently being shut down. unknown Unable to determine the current process status. upgradeInprogress The process is currently being upgraded.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notResponding", 1), ("notRunning", 2), ("processingTransaction", 3), ("reconfiguring", 4), ("running", 5), ("starting", 6), ("stopping", 7), ("unknown", 8), ("upgradeInprogress", 9))

cidsHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4))
class CidsErrorCode(TextualConvention, Integer32):
    description = "An enumerated value which identifies the general category of error that occurred. errAuthenticationTokenExpired The requested action could not be carried out because the requestor has provided an authentication token (e.g. password) that has expired. errConfigCollision The value of the config-token request parameter in a setComponentConfig control transaction request does not match the current configuration document on the target host. Typically this indicates that the configuration on the target host has been modified by another user. errInUse The requested action could not be completed because it requires access to a resource that is in use. errInvalidDocument The request contained a document that was not well-formed, contained an incorrect root element, or contained additional elements or attributes that are not permitted by the lax IDIOM schema. errLimitExceeded The requested action could not be completed because it would create a resource that would exceed a system resource limit. errNotAvailable The requested action is supported but cannot be performed due to the current configuration of the target host. errNotFound A resource specified in the request does not exist. errNotSupported The requested action is not supported on the target host. errPermissionDenied The requestor does not have a sufficiently high authorization level to perform the requested action. errSyslog Used to convey messages of interest from the host system's syslog. errSystemError A system error occurred, such as an out-of-memory condition, disk access error, etc. errTransport The requested action could not be carried out because of a communications failure with another host that is involved in the action. errUnacceptableValue The request document was valid but contained one or more values that could not be accepted because they either: (1) conflict with other values in the same document or (2) are not acceptable due to the current state of the system. errUnclassified Used to convey an unclassified error condition. errWarning Used to convey a software warning condition detected by an application running on the host system. errEngineBuildFailed The system failed to build an intrusion detection engine."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("errAuthenticationTokenExpired", 1), ("errConfigCollision", 2), ("errInUse", 3), ("errInvalidDocument", 4), ("errLimitExceeded", 5), ("errNotAvailable", 6), ("errNotFound", 7), ("errNotSupported", 8), ("errPermissionDenied", 9), ("errSyslog", 10), ("errSystemError", 11), ("errTransport", 12), ("errUnacceptableValue", 13), ("errUnclassified", 14), ("errWarning", 15), ("errEngineBuildFailed", 16))

class CidsTargetValue(TextualConvention, Integer32):
    description = 'An enumerated value which identifies the asset value associated with a target. zeroValue Target has zero perceived value to the network. low Target has low perceived value to the network. medium Target has medium perceived value to the network. high Target has high perceived value to the network. missionCritical Target is a mission critical component in the network.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("zeroValue", 1), ("low", 2), ("medium", 3), ("high", 4), ("missionCritical", 5))

class CidsAttackRelevance(TextualConvention, Integer32):
    description = "An enumerated value which identifies an attack's relevance to its target. relevant The attack is relevant to the target. notRelevant The attack is not relevant to the target. unknown The relevancy of the attack is unknown."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("relevant", 1), ("notRelevant", 2), ("unknown", 3))

cidsGeneralEventId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1, 1), Unsigned64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsGeneralEventId.setStatus('current')
if mibBuilder.loadTexts: cidsGeneralEventId.setDescription('Identifies the sequence number of an event. This value needs to be unique within the scope of the originating host.')
cidsGeneralLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsGeneralLocalTime.setStatus('current')
if mibBuilder.loadTexts: cidsGeneralLocalTime.setDescription('The local time on the Cisco intrusion detection system sensor when the alert was generated.')
cidsGeneralUTCTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsGeneralUTCTime.setStatus('current')
if mibBuilder.loadTexts: cidsGeneralUTCTime.setDescription('The UTC time on the Cisco intrusion detection system sensor when the alert was generated.')
cidsGeneralOriginatorHostId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsGeneralOriginatorHostId.setStatus('current')
if mibBuilder.loadTexts: cidsGeneralOriginatorHostId.setDescription('A globally unique identifier for a Cids host. Could be a host name or an IP address.')
cidsGeneralOriginatorAppName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1, 5), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsGeneralOriginatorAppName.setStatus('current')
if mibBuilder.loadTexts: cidsGeneralOriginatorAppName.setDescription('The optional generic name of a Cids application.')
cidsGeneralOriginatorAppId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1, 6), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsGeneralOriginatorAppId.setStatus('current')
if mibBuilder.loadTexts: cidsGeneralOriginatorAppId.setDescription('The optional id of this instance of the application. Typically the process id (pid).')
cidsNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cidsNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: cidsNotificationsEnabled.setDescription('Indicates whether notifications will or will not be sent when an event is generated by the device.')
cidsAlertSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSeverity.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSeverity.setDescription('The severity associated with a Cids signature (informational, low, medium or high for example).')
cidsAlertAlarmTraits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertAlarmTraits.setStatus('current')
if mibBuilder.loadTexts: cidsAlertAlarmTraits.setDescription('The alarm traits is an unsigned 16-bit integer representing the value of the 16 user-defined alarm traits specified in the configuration for the signature that triggered the alert. The alarmTraits bits are used to classify signatures into user-defined categories or groups.')
cidsAlertSignature = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSignature.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSignature.setDescription('Content is a string containing details about the signature that fired, without any specifics tied to this instance of the alert. The cidsAlertSignatureSigName, cidsAlertSignatureSigId and cidsAlertSignatureSubSigId attributes define the signature that triggered this Alert.')
cidsAlertSignatureSigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSignatureSigName.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSignatureSigName.setDescription('The name of the Intrusion detection signature that triggered this event.')
cidsAlertSignatureSigId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSignatureSigId.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSignatureSigId.setDescription('The ID of the Intrusion detection signature that triggered this event. The ID combines with the cidsAlertSignatureSubSigId to create a unique key that identifies the signature that generated this event.')
cidsAlertSignatureSubSigId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSignatureSubSigId.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSignatureSubSigId.setDescription('The optional Sub ID of the Intrusion detection signature that triggered this event. The Sub ID combines with the cidsAlertSignatureSigId to create a unique key that identifies the signature that generated this event.')
cidsAlertSignatureVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSignatureVersion.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSignatureVersion.setDescription('The optional version attribute defines the version number of the signature update in which the triggering signature was introduced or was last modified. Example: 4.1(1.1)S47(0.1)')
cidsAlertSummary = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSummary.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSummary.setDescription("Optional, if present, specifies that this is a summary alert, representing one or more alerts with common characteristics. The numeric value indicates the number of times the signature fired since the last summary alert with a matching 'initialAlert' attribute value. The first and all subsequent summary alerts in a sequence will use the eventId of a previous non-summary evAlert in the initialAlert attribute value. All alerts represented by the summary alert share the same signature and sub-signature id. The summaryType attribute defines the common characteristic(s) of all alerts in the summary. The 'final' attribute indicates whether this is the last evAlert containing the same value in the 'initialAlert' attribute. The 'final' attribute may be omitted if and only if its value is false.")
cidsAlertSummaryType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSummaryType.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSummaryType.setDescription('Common characteristics shared by all non-summary alerts included in a summary alert.')
cidsAlertSummaryFinal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 10), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSummaryFinal.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSummaryFinal.setDescription("The optional 'final' attribute indicates whether this is the last evAlert containing the same value in the 'initialAlert' attribute. The 'final' attribute may be omitted if and only if its value is false.")
cidsAlertSummaryInitialAlert = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 11), Unsigned64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertSummaryInitialAlert.setStatus('current')
if mibBuilder.loadTexts: cidsAlertSummaryInitialAlert.setDescription('Serial number for the initial alert, which is guaranteed unique within the scope of the originating host.')
cidsAlertInterfaceGroup = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertInterfaceGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cidsAlertInterfaceGroup.setDescription('This object indicates an optional numeric identifier for a sniffing interface group on this host.')
cidsAlertVlan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertVlan.setStatus('current')
if mibBuilder.loadTexts: cidsAlertVlan.setDescription('An optional numeric identifier for a vlan. Identifies the vlan that uses the number in ISL or 802.3.1q headers.')
cidsAlertVictimContext = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 14), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertVictimContext.setStatus('current')
if mibBuilder.loadTexts: cidsAlertVictimContext.setDescription('Optional Base64-encoded representation of the stream data that was sourced by the victim.')
cidsAlertAttackerContext = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 15), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertAttackerContext.setStatus('current')
if mibBuilder.loadTexts: cidsAlertAttackerContext.setDescription('Optional Base64-encoded representation of the stream data that was sourced by the Attacker.')
cidsAlertAttackerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 16), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertAttackerAddress.setStatus('current')
if mibBuilder.loadTexts: cidsAlertAttackerAddress.setDescription("Optional IP address and ports on a monitored interface. The 'locality' attribute is a string that indicates the relative location of the IP address within the network mapping, such as whether the address falls within the address range of a protected network. The optional 'proxy' attribute is 'true' if the sensor has reason to suspect that the address given is not the address of the true attacker. This could be a the result of address spoofing or because the host has been compromised and is acting as a 'zombie'. The 'proxy' attribute may be omitted if and only if its value is false.")
cidsAlertVictimAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 17), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertVictimAddress.setStatus('current')
if mibBuilder.loadTexts: cidsAlertVictimAddress.setDescription("Optional IP address and ports on a monitored interface. The 'locality' attribute is a string that indicates the relative location of the IP address within the network mapping, such as whether the address falls within the address range of a protected network. The 'osIdSource' attribute represents the method that the operating system of the victim was identified. The 'osType' attribute represents the operating system of the target system. The 'osRelevance' attribute represents the relevance of an attack on the operating system.")
cidsAlertIpLoggingActivated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 18), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertIpLoggingActivated.setStatus('current')
if mibBuilder.loadTexts: cidsAlertIpLoggingActivated.setDescription('Indicates whether IP logging has been activated as the result of the alert. A separate evIpLogStatus event will be generated when logging has been completed. The evIpLogStatus event contains the URL where the log results may be obtained. This element may be omitted if and only if its value is false.')
cidsAlertTcpResetSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 19), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertTcpResetSent.setStatus('current')
if mibBuilder.loadTexts: cidsAlertTcpResetSent.setDescription('Indicates whether a attempt was made to reset a tcp connection as the result of the alert. The addresses and ports affected must be implied from the information contained in the participant elements of the evAlert. This element may be omitted if and only if its value is false.')
cidsAlertShunRequested = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 20), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertShunRequested.setStatus('current')
if mibBuilder.loadTexts: cidsAlertShunRequested.setDescription('Indicates whether an IP address or tcp connection has been requested to be shunned as a result of the alert. Details about the addresses and ports involved in the shun can be obtained from evNacStatus events sent by the Network Access Controller application. This element may be omitted if and only if its value is false.')
cidsAlertDetails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 21), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDetails.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDetails.setDescription('Textual details about the specific alert instance, not just the signature.')
cidsAlertIpLogId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 22), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertIpLogId.setStatus('current')
if mibBuilder.loadTexts: cidsAlertIpLogId.setDescription('IP log identifiers for IP logs that were added as the result of this alert.')
cidsThreatResponseStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 23), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsThreatResponseStatus.setStatus('current')
if mibBuilder.loadTexts: cidsThreatResponseStatus.setDescription('A brief textual description of the status of the alarm given by the Cisco Systems Threat Response engine.')
cidsThreatResponseSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsThreatResponseSeverity.setStatus('current')
if mibBuilder.loadTexts: cidsThreatResponseSeverity.setDescription('The alarm severity as assigned by the Cisco Systems Threat Response engine.')
cidsAlertEventRiskRating = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 25), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertEventRiskRating.setStatus('current')
if mibBuilder.loadTexts: cidsAlertEventRiskRating.setDescription('A risk factor that incorporates several additional pieces of information beyond the detection of a potentially malicious action. The factors that characterize this risk are the severity of the attack if it were to succeed, the fidelity of the signature, the relevance of the potential attack with respect to the target host, and the overall value of the target host to the customer.')
cidsAlertIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 26), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertIfIndex.setStatus('current')
if mibBuilder.loadTexts: cidsAlertIfIndex.setDescription('The ifIndex on which the activity was detected.')
cidsAlertProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 27), CiscoIpProtocol()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertProtocol.setStatus('current')
if mibBuilder.loadTexts: cidsAlertProtocol.setDescription('Identifies the IP protocol associated with the alert.')
cidsAlertDeniedAttacker = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 28), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDeniedAttacker.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDeniedAttacker.setDescription('Indicates that the traffic from originating from the attacker is being blocked as a result of the alert. This element may be omitted if and only if its value is false.')
cidsAlertDeniedFlow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 29), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDeniedFlow.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDeniedFlow.setDescription('Indicates that the traffic on the TCP connection being blocked as a result of the alert. This element may be omitted if and only if its value is false.')
cidsAlertDenyPacketReqNotPerf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 30), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDenyPacketReqNotPerf.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDenyPacketReqNotPerf.setDescription('Indicates whether the packet that triggered the alert would have been denied as a result of the alert if the intrusion prevention system was operating in inline mode. However, the packet was not actually denied because the intrusion prevention system was operating in promiscuous mode. This element may be omitted if and only if its value is false.')
cidsAlertDenyFlowReqNotPerf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 31), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDenyFlowReqNotPerf.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDenyFlowReqNotPerf.setDescription('Indicates whether the flow that triggered the alert would have been denied as a result of the alert if the intrusion prevention system was operating in inline mode. However, this action was not actually taken because the intrusion prevention system was operating in promiscuous mode. This element may be omitted if and only if its value is false.')
cidsAlertDenyAttackerReqNotPerf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 32), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDenyAttackerReqNotPerf.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDenyAttackerReqNotPerf.setDescription('Indicates whether the traffic from the attacker that triggered the alert would have been denied as a result of the alert if the intrusion prevention system was operating in inline mode. However, this action was not actually taken because the intrusion prevention system was operating in promiscuous mode. This element may be omitted if and only if its value is false.')
cidsAlertBlockConnectionReq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 33), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertBlockConnectionReq.setStatus('current')
if mibBuilder.loadTexts: cidsAlertBlockConnectionReq.setDescription('Indicates that a TCP connection has been requested to be blocked as a result of the alert. This element may be omitted if and only if its value is false.')
cidsAlertLogAttackerPacketsAct = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 34), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertLogAttackerPacketsAct.setStatus('current')
if mibBuilder.loadTexts: cidsAlertLogAttackerPacketsAct.setDescription('Indicates that packets associated with the attacker(s) identified by this alert are being logged. This element may be omitted if and only if its value is false.')
cidsAlertLogVictimPacketsAct = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 35), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertLogVictimPacketsAct.setStatus('current')
if mibBuilder.loadTexts: cidsAlertLogVictimPacketsAct.setDescription('Indicates that packets associated with the victim(s) identified by this alert are being logged. This element may be omitted if and only if its value is false.')
cidsAlertLogPairPacketsActivated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 36), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertLogPairPacketsActivated.setStatus('current')
if mibBuilder.loadTexts: cidsAlertLogPairPacketsActivated.setDescription('Indicates that packets associated with the attacker/victim pair(s) identified by this alert are being logged. This element may be omitted if and only if its value is false.')
cidsAlertRateLimitRequested = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 37), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertRateLimitRequested.setStatus('current')
if mibBuilder.loadTexts: cidsAlertRateLimitRequested.setDescription('Indicates that traffic rate limiting based on the source address and protocol associated with the alert has been requested on external network devices. This element may be omitted if and only if its value is false.')
cidsAlertDeniedAttackVictimPair = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 38), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDeniedAttackVictimPair.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDeniedAttackVictimPair.setDescription('Indicates that traffic from originating from the attackers address and destined for the victims address identified in the alert is being denied as a result of the alert. This element may be omitted if and only if its value is false.')
cidsAlertDeniedAttackSericePair = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 39), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDeniedAttackSericePair.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDeniedAttackSericePair.setDescription('Indicates that traffic from originating from the attackers address and destined for the destination service port identified in the alert is being denied as a result of the alert. This element may be omitted if and only if its value is false.')
cidsAlertDenyAttackVicReqNotPerf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 40), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDenyAttackVicReqNotPerf.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDenyAttackVicReqNotPerf.setDescription('Indicates that traffic from originating from the attackers address and destined for the victims address identified in the alert would have been denied as a result of the alert if the intrusion prevention system was operating in inline mode. However, this action was not actually taken because the intrusion prevention system was operating in promiscuous mode. This element may be omitted if and only if its value is false.')
cidsAlertDenyAttackSerReqNotPerf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 41), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDenyAttackSerReqNotPerf.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDenyAttackSerReqNotPerf.setDescription('Indicates that traffic from originating from the attackers address and destined for the destination service port identified in the alert would have been denied as a result of the alert if the intrusion prevention system was operating in inline mode. However, this action was not actually taken because the intrusion prevention system was operating in promiscuous mode. This element may be omitted if and only if its value is false.')
cidsAlertThreatValueRating = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 42), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertThreatValueRating.setStatus('current')
if mibBuilder.loadTexts: cidsAlertThreatValueRating.setDescription('Value that represents the calculated threat associated with the detected activity. The threat value consists of the cidsAlertEventRiskRating adjusted for the mitigation action performed. The threat value has a range between 0 and 100 (inclusive), where a value of 0 represents the lowest threat and 100 the greatest threat.')
cidsAlertRiskRatingTargetValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 43), CidsTargetValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertRiskRatingTargetValue.setStatus('current')
if mibBuilder.loadTexts: cidsAlertRiskRatingTargetValue.setDescription('Represents the asset value associated with a target identified in the alert.')
cidsAlertRiskRatingRelevance = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 44), CidsAttackRelevance()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertRiskRatingRelevance.setStatus('current')
if mibBuilder.loadTexts: cidsAlertRiskRatingRelevance.setDescription("Value that represents an attack's relevance to the destination target of this alert.")
cidsAlertRiskRatingWatchList = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 45), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertRiskRatingWatchList.setStatus('current')
if mibBuilder.loadTexts: cidsAlertRiskRatingWatchList.setDescription('Value that represents the amount that the risk rating value was increased due to the source of the activity associated with the alert being on a watchlist.')
cidsAlertDenyPacket = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 46), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertDenyPacket.setStatus('current')
if mibBuilder.loadTexts: cidsAlertDenyPacket.setDescription("This object indicates that the traffic originating from the attacker is being blocked as a result of the alert. This element may be omitted if and only if its value is 'false'.")
cidsAlertBlockHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 47), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertBlockHost.setStatus('current')
if mibBuilder.loadTexts: cidsAlertBlockHost.setDescription("This object indicates that a host has been requested to be blocked as a result of the alert. This element may be omitted if and only if its value is 'false'.")
cidsAlertTcpOneWayResetSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 48), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertTcpOneWayResetSent.setStatus('current')
if mibBuilder.loadTexts: cidsAlertTcpOneWayResetSent.setDescription("This object indicates an attempt to reset one side of the connection (the victim side). The victim address and ports affected must be implied from the information contained in the participant elements of the alert. This element may be omitted if and only if its value is 'false'.")
cidsAlertVirtualSensor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 2, 49), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsAlertVirtualSensor.setStatus('current')
if mibBuilder.loadTexts: cidsAlertVirtualSensor.setDescription('This object represents the name of the virtual sensor associated with an Intrusion Prevention System alert. From the virtual sensor name one can correlate which signature set and configuration to look at to trouble shoot or tune the behavior of the sensor. The virtual sensor name with the signature ID should help in identifying the correct instance of the signature that fired the alert.')
cidsErrorSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 3, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsErrorSeverity.setStatus('current')
if mibBuilder.loadTexts: cidsErrorSeverity.setDescription('Severity of an error (warning, error or fatal for example). An example of a type of error that could occur would be when a requested action could not be completed because it would create a resource that would exceed a system resource limit.')
cidsErrorName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 3, 2), CidsErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsErrorName.setStatus('current')
if mibBuilder.loadTexts: cidsErrorName.setDescription('An enumerated error code, which identifies a general class of errors.')
cidsErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 3, 3), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsErrorMessage.setStatus('current')
if mibBuilder.loadTexts: cidsErrorMessage.setDescription('A textual description of the error that occurred.')
cidsHealthPacketLoss = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthPacketLoss.setStatus('current')
if mibBuilder.loadTexts: cidsHealthPacketLoss.setDescription('The percentage of packets lost at the device interface level.')
cidsHealthPacketDenialRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthPacketDenialRate.setStatus('current')
if mibBuilder.loadTexts: cidsHealthPacketDenialRate.setDescription('The percentage of packets denied due to protocol and security violations.')
cidsHealthAlarmsGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthAlarmsGenerated.setStatus('current')
if mibBuilder.loadTexts: cidsHealthAlarmsGenerated.setDescription('The number of alarms generated, includes all currently defined alarm severities.')
cidsHealthFragmentsInFRU = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthFragmentsInFRU.setStatus('current')
if mibBuilder.loadTexts: cidsHealthFragmentsInFRU.setDescription('The number of fragments currently queued in the fragment reassembly unit.')
cidsHealthDatagramsInFRU = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthDatagramsInFRU.setStatus('current')
if mibBuilder.loadTexts: cidsHealthDatagramsInFRU.setDescription('The number of datagrams currently queued in the fragment reassembly unit.')
cidsHealthTcpEmbryonicStreams = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthTcpEmbryonicStreams.setStatus('current')
if mibBuilder.loadTexts: cidsHealthTcpEmbryonicStreams.setDescription('The number of embryonic TCP streams currently queued in the device. TCP streams are considered embryonic if they have not completed the TCP three-way handshake.')
cidsHealthTCPEstablishedStreams = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthTCPEstablishedStreams.setStatus('current')
if mibBuilder.loadTexts: cidsHealthTCPEstablishedStreams.setDescription('The number of established TCP streams currently queued in the device. Once a stream has completed a TCP three-way handshake it will move to the established state.')
cidsHealthTcpClosingStreams = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthTcpClosingStreams.setStatus('current')
if mibBuilder.loadTexts: cidsHealthTcpClosingStreams.setDescription('The number of closing TCP streams currently queued in the device. A stream will move from the established state to closing when a valid FIN or RST flag is received.')
cidsHealthTcpStreams = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthTcpStreams.setStatus('current')
if mibBuilder.loadTexts: cidsHealthTcpStreams.setDescription('The number of TCP streams (embryonic, established and closing) currently queued in the device.')
cidsHealthActiveNodes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthActiveNodes.setStatus('current')
if mibBuilder.loadTexts: cidsHealthActiveNodes.setDescription('The number of active nodes currently queued in the device.')
cidsHealthTcpDualIpAndPorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthTcpDualIpAndPorts.setStatus('current')
if mibBuilder.loadTexts: cidsHealthTcpDualIpAndPorts.setDescription('The number TCP nodes keyed on both IP addresses and both ports currently queued in the device.')
cidsHealthUdpDualIpAndPorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthUdpDualIpAndPorts.setStatus('current')
if mibBuilder.loadTexts: cidsHealthUdpDualIpAndPorts.setDescription('The number UDP nodes keyed on both IP addresses and both ports currently queued in the device.')
cidsHealthIpDualIp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthIpDualIp.setStatus('current')
if mibBuilder.loadTexts: cidsHealthIpDualIp.setDescription('The number IP nodes keyed on both IP addresses currently queued in the device.')
cidsHealthIsSensorMemoryCritical = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthIsSensorMemoryCritical.setStatus('current')
if mibBuilder.loadTexts: cidsHealthIsSensorMemoryCritical.setDescription('A value between 0 and 10 that should rarely get above 3. If this is non-zero the sensor has stopped enforcing policy on some traffic in order to keep up with the current traffic load; the sensor is oversubscribed. The higher the number the more oversubscribed the sensor. It could be oversubscribed from a memory prospective and not traffic speed. For example on a 200 Mbit sensor this number might be 3 if the sensor was only seeing 100Mbit of traffic but 6000 connections per second which is over the rated capacity of the sensor. When the sensor is in Memory Critical state then a ciscoCidsError trap will be sent accordingly.')
cidsHealthIsSensorActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthIsSensorActive.setStatus('current')
if mibBuilder.loadTexts: cidsHealthIsSensorActive.setDescription('Indicates the failover status of the device. True indicates the device is currently active. False indicates it is in a standby mode.')
cidsHealthCommandAndControlPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthCommandAndControlPort.setStatus('current')
if mibBuilder.loadTexts: cidsHealthCommandAndControlPort.setDescription('The status and network statistics of the currently configured Command and Control interface on the device. The Command and Control interface is where all of the communications for command and control of the sensor occurs. This is important to identify what interface a user will communicate with to control the sensor remotely and general health statistics for that interface.')
cidsHealthSensorStatsResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSensorStatsResetTime.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSensorStatsResetTime.setDescription('The value of SNMPv2-MIB::sysUpTime when the Sensor specific statistics was reset. The reset time is collectively for the following objects: cidsHealthPacketLoss, cidsHealthPacketDenies, cidsHealthAlarmsGenerated, cidsHealthFragmentsInFRU, cidsHealthDatagramsInFRU, cidsHealthTcpEmbryonicStreams, cidsHealthTcpEstablishedStreams, cidsHealthTcpClosingStreams, cidsHealthTcpStreams')
cidsHealthSecMonAvailability = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonAvailability.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonAvailability.setDescription('This object indicates the availability of health and security monitor statistics. If the IPS health and security monitoring service is disabled, it will return false.')
cidsHealthSecMonOverallHealth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 19), CidsHealthStatusColor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonOverallHealth.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonOverallHealth.setDescription("This object indicates IPS sensor's overall health value - green, yellow or red. The overall health status is set to the highest severity of all metrics that are configured to be applied to the IPS's health determination. For example, if the IPS is configured to use eight metrics to determine its health and seven of eight metrics are green while one of the metrics is red then the overall IPS health will be red. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonSoftwareVersion.setDescription("This object indicates the IPS software version number (e.g., 6.2(1)E3). This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonSignatureVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonSignatureVersion.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonSignatureVersion.setDescription("This object indicates IPS signature version (e.g., 365.0). This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonLicenseStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonLicenseStatus.setDescription("This object indicates IPS license status along with expiration date. For example it will contain the following possible values: - signatureUpdateKey: Not expired until: <timestamp> - trialKey: Not expired until: <timestamp> - expiredLicense - noLicense - invalidLicense - unknown The timestamp will be in the format: MM/DD/YYYY HH:MM:SS This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonOverallAppColor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 23), CidsHealthStatusColor()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsHealthSecMonOverallAppColor.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonOverallAppColor.setDescription('This object indicates the aggregate health status of the applications - Main, Analysis Engine, Collaboration - where the status is equal to the most severe status of all three applications. It is used in both the heart beat and the metric change health traps.')
cidsHealthSecMonMainAppStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 24), CidsApplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonMainAppStatus.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonMainAppStatus.setDescription("This object indicates the running status for the control plane. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonAnalysisEngineStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 25), CidsApplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonAnalysisEngineStatus.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonAnalysisEngineStatus.setDescription("This object indicates the running status for the Analysis Engine. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonCollaborationAppStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 26), CidsApplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonCollaborationAppStatus.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonCollaborationAppStatus.setDescription("This object indicates the running status for the Collaboration Application. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonByPassMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 27), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsHealthSecMonByPassMode.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonByPassMode.setDescription("This object indicates the bypass mode. A value of 'true' indicates bypass mode is on and a value of 'false' indicates it is off. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonMissedPktPctAndThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonMissedPktPctAndThresh.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonMissedPktPctAndThresh.setDescription("This object indicates the missed packet percentage and missed packets percentage threshold aggregated for all interfaces. For example, 'missedPacketPercentage=1 redThreshold=6 yellowThreshold=1'. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonAnalysisEngMemPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonAnalysisEngMemPercent.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonAnalysisEngMemPercent.setDescription("This object indicates the percentage of memory used by Analysis Engine. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonSensorLoad = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonSensorLoad.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonSensorLoad.setDescription("This object indicates sensor inspection load. This object is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonSensorLoadColor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 31), CidsHealthStatusColor()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cidsHealthSecMonSensorLoadColor.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonSensorLoadColor.setDescription('This object indicates the status of current sensor load, indicated using status colors. The color is determined based on the sensor load percentage and configured threshold value.')
cidsHealthSecMonVirtSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 32), )
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorStatusTable.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorStatusTable.setDescription("This table contains the status of each virtual sensor. There will be one entry per virtual sensor in the system. This is the status of the network that the virtual sensor is monitoring. A virtual sensor can be added either through the configuration CLI or through a management application such as IME/CSM; once it is added to the system it will appear in this table. If a virtual sensor is removed from the system through one of the management interfaces it will no longer appear in this table. This table is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonVirtSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 32, 1), ).setIndexNames((0, "CISCO-CIDS-MIB", "cidsHealthSecMonVirtSensorName"))
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorStatusEntry.setDescription('An entry (conceptual row) in the cidsHealthSecMonVirtSensorStatusTable. There will be one per virtual sensor on the system. A virtual sensor allows one to logically separate their sensor configuration for different sets of interfaces. For example virtual sensor vs0 may apply to one set of interfaces and vs1 would apply to another set of interfaces. This table allows someone to get the status of each of the virtual sensors to determine the health of the associated networks. For example you could have vs0 monitoring your finance networks and vs1 monitoring your engineering networks and track the health of each of these networks independently.')
cidsHealthSecMonVirtSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 32, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorName.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorName.setDescription('This object represents the name of the virtual sensor. Through the IPS configuration the sensor name can be correlated with the sensor configuration and the associated interfaces to identify which networks are having good or bad health status. The reason there are multiple virtual sensor configurations is to allow different configurations for different sets of network interfaces.')
cidsHealthSecMonVirtSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 32, 1, 2), CidsHealthStatusColor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorStatus.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonVirtSensorStatus.setDescription('This object represents the virtual sensor network status level. From the color rating associated with the virtual sensor you can determine the overall health of the attached networks. If the color is green everything is fine, the IPS is not indicating a problem. If the color is yellow you should check as there maybe issues occuring on the attached network. If the status is red the network needs attention as problems are detected and network security is critical.')
cidsHealthSecMonDataStorageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 33), )
if mibBuilder.loadTexts: cidsHealthSecMonDataStorageTable.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonDataStorageTable.setDescription("This is the table of disk partition details: Partition Name Total Space In Partition Utilized Space This table tells how each of the file systems are utilized on the IPS. If the file systems approach 100% utilization that may indicate a problem. This table should remain fixed size unless an upgrade/install changes the partition count. The user does not have control over the number of partitions or the ability to add and remove partitions. This table is instantiated only if the value of cidsHealthSecMonAvailability is set to 'true'.")
cidsHealthSecMonDataStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 33, 1), ).setIndexNames((0, "CISCO-CIDS-MIB", "cidsHealthSecMonPartitionName"))
if mibBuilder.loadTexts: cidsHealthSecMonDataStorageEntry.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonDataStorageEntry.setDescription('An entry (conceptual row) in the cidsHealthSecMonDataStorageTable. There will be one row per partition. This table is here to track the health of the storage on the IPS sensor. The following partitions will have their status displayed as part of the data storage table: system This is the root file system on the sensor; this file system should not change too much over time and should not be full. application-data This is the main file system where application binaries, application logs and configuration data is stored. This file system will change due to logging and configuration changes; if this file system is full it will present stability problems. This partition is the most important in the system to monitor. boot Kernel/boot data storage partition; this should not change much other than during an image upgrade. application-log This partition has fixed sized files to store IPLOG data. This will likely run near full capacity without being a problem. The most important partition to monitor over time is the application-data partition; if it runs to capacity problems will occur as processes will no longer be able to write data to the file system. Note: File system setup and utilization will vary per platform model; there are no perfect rules for monitoring these across all platforms however you should be able to use trends over time to indicate if you are going to fill up a file system that should not run at capacity such as the application-data partition.')
cidsHealthSecMonPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 33, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cidsHealthSecMonPartitionName.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonPartitionName.setDescription('Name of the disk partition. For example: system application-data boot application-log')
cidsHealthSecMonTotalPartitionSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 33, 1, 2), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonTotalPartitionSpace.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonTotalPartitionSpace.setDescription('This object represents the total disk space on the partition in megabytes.')
cidsHealthSecMonUtilizedPartitionSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 383, 1, 4, 33, 1, 3), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cidsHealthSecMonUtilizedPartitionSpace.setStatus('current')
if mibBuilder.loadTexts: cidsHealthSecMonUtilizedPartitionSpace.setDescription('This object represents the total amount of utilized disk space in megabytes.')
ciscoCidsAlert = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 383, 0, 1)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralEventId"), ("CISCO-CIDS-MIB", "cidsGeneralLocalTime"), ("CISCO-CIDS-MIB", "cidsGeneralUTCTime"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorHostId"), ("CISCO-CIDS-MIB", "cidsAlertSeverity"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSigName"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSigId"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSubSigId"), ("CISCO-CIDS-MIB", "cidsAlertAlarmTraits"), ("CISCO-CIDS-MIB", "cidsAlertAttackerAddress"), ("CISCO-CIDS-MIB", "cidsAlertVictimAddress"))
if mibBuilder.loadTexts: ciscoCidsAlert.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsAlert.setDescription('Event indicating that some suspicious or malicious activity has been detected on a monitored network.')
ciscoCidsError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 383, 0, 2)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralEventId"), ("CISCO-CIDS-MIB", "cidsGeneralLocalTime"), ("CISCO-CIDS-MIB", "cidsGeneralUTCTime"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorHostId"), ("CISCO-CIDS-MIB", "cidsErrorSeverity"), ("CISCO-CIDS-MIB", "cidsErrorName"), ("CISCO-CIDS-MIB", "cidsErrorMessage"))
if mibBuilder.loadTexts: ciscoCidsError.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsError.setDescription('Event indicating that an error has occurred.')
ciscoCidsHealthHeartBeat = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 383, 0, 3)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralEventId"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorHostId"), ("CISCO-CIDS-MIB", "cidsGeneralLocalTime"), ("CISCO-CIDS-MIB", "cidsGeneralUTCTime"), ("CISCO-CIDS-MIB", "cidsHealthSecMonOverallAppColor"), ("CISCO-CIDS-MIB", "cidsHealthSecMonSensorLoadColor"), ("CISCO-CIDS-MIB", "cidsHealthSecMonOverallHealth"))
if mibBuilder.loadTexts: ciscoCidsHealthHeartBeat.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsHealthHeartBeat.setDescription('This notification is triggered by the heart beat events (evStatus). The heartbeat is configured to run on a periodic basis and can be enabled/disabled through heart beat configuration under the health service. If the heart beat is disabled these notification events will not be sent. This notification is supposed to mirror the heart beat evStatus message however it is a subset of the most critical pieces of data. Namely this will include the following pieces of data: - Event ID - Host ID - Local Time - UTC Time - Overall Application Color - Sensor/Inspection Load Color - Overall Health')
ciscoCidsHealthMetricChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 383, 0, 4)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralEventId"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorHostId"), ("CISCO-CIDS-MIB", "cidsGeneralLocalTime"), ("CISCO-CIDS-MIB", "cidsGeneralUTCTime"), ("CISCO-CIDS-MIB", "cidsHealthSecMonOverallAppColor"), ("CISCO-CIDS-MIB", "cidsHealthSecMonSensorLoadColor"), ("CISCO-CIDS-MIB", "cidsHealthSecMonOverallHealth"))
if mibBuilder.loadTexts: ciscoCidsHealthMetricChange.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsHealthMetricChange.setDescription('This notification notifies the recipient of health and security status changes. This notification is triggered when there is a change in the value of monitored metrics as indicated by evStatus message. This notification will include the following important subset of attributes from evStatus message: - Event ID - Host ID - Local Time - UTC Time - Overall Application Color - Sensor/Inspection Load Color - Overall Health This is similar to the heart beat, however the triggering condition is different. The heart beat fires on a regular interval and this is sent immediately after a change in a monitored metric. Metric change notifications can be enabled while the heart beat is disabled.')
ciscoCidsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 1))
ciscoCidsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2))
ciscoCidsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 1, 1)).setObjects(("CISCO-CIDS-MIB", "ciscoCidsGeneralObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsAlertObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsErrorObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsHealthObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsMIBCompliance = ciscoCidsMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCidsMIBCompliance.setDescription('The compliance statement for entities which implement the Cids MIB')
ciscoCidsMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 1, 2)).setObjects(("CISCO-CIDS-MIB", "ciscoCidsGeneralObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsAlertObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsErrorObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsHealthObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsNotificationsGroup"), ("CISCO-CIDS-MIB", "ciscoCidsOptionalObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsMIBComplianceRev1 = ciscoCidsMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCidsMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cids MIB')
ciscoCidsMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 1, 3)).setObjects(("CISCO-CIDS-MIB", "ciscoCidsGeneralObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsAlertObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsErrorObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsHealthObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsNotificationsGroup"), ("CISCO-CIDS-MIB", "ciscoCidsOptionalObjectGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsMIBComplianceRev2 = ciscoCidsMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCidsMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cids MIB')
ciscoCidsMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 1, 4)).setObjects(("CISCO-CIDS-MIB", "ciscoCidsGeneralObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsAlertObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsErrorObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsHealthObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsNotificationsGroup"), ("CISCO-CIDS-MIB", "ciscoCidsOptionalObjectGroupRev2"), ("CISCO-CIDS-MIB", "ciscoCidsOptionalObjectGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsMIBComplianceRev3 = ciscoCidsMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCidsMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cids MIB')
ciscoCidsMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 1, 5)).setObjects(("CISCO-CIDS-MIB", "ciscoCidsErrorObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsGeneralObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsAlertObjectGroupRev2"), ("CISCO-CIDS-MIB", "ciscoCidsHealthObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsNotificationsGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsHealthObjectGroup"), ("CISCO-CIDS-MIB", "ciscoCidsNotificationsGroup"), ("CISCO-CIDS-MIB", "ciscoCidsAlertObjectGroupRev1"), ("CISCO-CIDS-MIB", "ciscoCidsOptionalObjectGroupRev3"), ("CISCO-CIDS-MIB", "ciscoCidsOptionalObjectGroupRev2"), ("CISCO-CIDS-MIB", "ciscoCidsOptionalObjectGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsMIBComplianceRev4 = ciscoCidsMIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cids MIB')
ciscoCidsGeneralObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 1)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralEventId"), ("CISCO-CIDS-MIB", "cidsGeneralLocalTime"), ("CISCO-CIDS-MIB", "cidsGeneralUTCTime"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorHostId"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorAppName"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorAppId"), ("CISCO-CIDS-MIB", "cidsNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsGeneralObjectGroup = ciscoCidsGeneralObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCidsGeneralObjectGroup.setDescription('General Objects.')
ciscoCidsAlertObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 2)).setObjects(("CISCO-CIDS-MIB", "cidsAlertSeverity"), ("CISCO-CIDS-MIB", "cidsAlertAlarmTraits"), ("CISCO-CIDS-MIB", "cidsAlertSignature"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSigName"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSigId"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSubSigId"), ("CISCO-CIDS-MIB", "cidsAlertSignatureVersion"), ("CISCO-CIDS-MIB", "cidsAlertSummary"), ("CISCO-CIDS-MIB", "cidsAlertSummaryType"), ("CISCO-CIDS-MIB", "cidsAlertSummaryFinal"), ("CISCO-CIDS-MIB", "cidsAlertSummaryInitialAlert"), ("CISCO-CIDS-MIB", "cidsAlertInterfaceGroup"), ("CISCO-CIDS-MIB", "cidsAlertVlan"), ("CISCO-CIDS-MIB", "cidsAlertVictimContext"), ("CISCO-CIDS-MIB", "cidsAlertAttackerContext"), ("CISCO-CIDS-MIB", "cidsAlertVictimAddress"), ("CISCO-CIDS-MIB", "cidsAlertAttackerAddress"), ("CISCO-CIDS-MIB", "cidsAlertIpLoggingActivated"), ("CISCO-CIDS-MIB", "cidsAlertTcpResetSent"), ("CISCO-CIDS-MIB", "cidsAlertShunRequested"), ("CISCO-CIDS-MIB", "cidsAlertDetails"), ("CISCO-CIDS-MIB", "cidsAlertIpLogId"), ("CISCO-CIDS-MIB", "cidsThreatResponseStatus"), ("CISCO-CIDS-MIB", "cidsThreatResponseSeverity"), ("CISCO-CIDS-MIB", "cidsAlertEventRiskRating"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsAlertObjectGroup = ciscoCidsAlertObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCidsAlertObjectGroup.setDescription('Alert Objects.')
ciscoCidsErrorObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 3)).setObjects(("CISCO-CIDS-MIB", "cidsErrorSeverity"), ("CISCO-CIDS-MIB", "cidsErrorName"), ("CISCO-CIDS-MIB", "cidsErrorMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsErrorObjectGroup = ciscoCidsErrorObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsErrorObjectGroup.setDescription('Error Objects.')
ciscoCidsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 4)).setObjects(("CISCO-CIDS-MIB", "ciscoCidsAlert"), ("CISCO-CIDS-MIB", "ciscoCidsError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsNotificationsGroup = ciscoCidsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsNotificationsGroup.setDescription('The notifications which are required.')
ciscoCidsHealthObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 5)).setObjects(("CISCO-CIDS-MIB", "cidsHealthPacketLoss"), ("CISCO-CIDS-MIB", "cidsHealthPacketDenialRate"), ("CISCO-CIDS-MIB", "cidsHealthAlarmsGenerated"), ("CISCO-CIDS-MIB", "cidsHealthFragmentsInFRU"), ("CISCO-CIDS-MIB", "cidsHealthDatagramsInFRU"), ("CISCO-CIDS-MIB", "cidsHealthTcpEmbryonicStreams"), ("CISCO-CIDS-MIB", "cidsHealthTCPEstablishedStreams"), ("CISCO-CIDS-MIB", "cidsHealthTcpClosingStreams"), ("CISCO-CIDS-MIB", "cidsHealthTcpStreams"), ("CISCO-CIDS-MIB", "cidsHealthActiveNodes"), ("CISCO-CIDS-MIB", "cidsHealthTcpDualIpAndPorts"), ("CISCO-CIDS-MIB", "cidsHealthUdpDualIpAndPorts"), ("CISCO-CIDS-MIB", "cidsHealthIpDualIp"), ("CISCO-CIDS-MIB", "cidsHealthIsSensorMemoryCritical"), ("CISCO-CIDS-MIB", "cidsHealthIsSensorActive"), ("CISCO-CIDS-MIB", "cidsHealthCommandAndControlPort"), ("CISCO-CIDS-MIB", "cidsHealthSensorStatsResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsHealthObjectGroup = ciscoCidsHealthObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsHealthObjectGroup.setDescription('Health Objects.')
ciscoCidsGeneralObjectGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 6)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralEventId"), ("CISCO-CIDS-MIB", "cidsGeneralLocalTime"), ("CISCO-CIDS-MIB", "cidsGeneralUTCTime"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorHostId"), ("CISCO-CIDS-MIB", "cidsNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsGeneralObjectGroupRev1 = ciscoCidsGeneralObjectGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsGeneralObjectGroupRev1.setDescription('General Objects.')
ciscoCidsAlertObjectGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 7)).setObjects(("CISCO-CIDS-MIB", "cidsAlertSeverity"), ("CISCO-CIDS-MIB", "cidsAlertAlarmTraits"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSigName"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSigId"), ("CISCO-CIDS-MIB", "cidsAlertSignatureSubSigId"), ("CISCO-CIDS-MIB", "cidsAlertVictimAddress"), ("CISCO-CIDS-MIB", "cidsAlertAttackerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsAlertObjectGroupRev1 = ciscoCidsAlertObjectGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsAlertObjectGroupRev1.setDescription('Alert Objects.')
ciscoCidsOptionalObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 8)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralOriginatorAppName"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorAppId"), ("CISCO-CIDS-MIB", "cidsAlertSignature"), ("CISCO-CIDS-MIB", "cidsAlertSignatureVersion"), ("CISCO-CIDS-MIB", "cidsAlertSummary"), ("CISCO-CIDS-MIB", "cidsAlertSummaryType"), ("CISCO-CIDS-MIB", "cidsAlertSummaryFinal"), ("CISCO-CIDS-MIB", "cidsAlertSummaryInitialAlert"), ("CISCO-CIDS-MIB", "cidsAlertInterfaceGroup"), ("CISCO-CIDS-MIB", "cidsAlertVlan"), ("CISCO-CIDS-MIB", "cidsAlertVictimContext"), ("CISCO-CIDS-MIB", "cidsAlertAttackerContext"), ("CISCO-CIDS-MIB", "cidsAlertIpLoggingActivated"), ("CISCO-CIDS-MIB", "cidsAlertTcpResetSent"), ("CISCO-CIDS-MIB", "cidsAlertShunRequested"), ("CISCO-CIDS-MIB", "cidsAlertDetails"), ("CISCO-CIDS-MIB", "cidsAlertIpLogId"), ("CISCO-CIDS-MIB", "cidsThreatResponseStatus"), ("CISCO-CIDS-MIB", "cidsThreatResponseSeverity"), ("CISCO-CIDS-MIB", "cidsAlertEventRiskRating"), ("CISCO-CIDS-MIB", "cidsAlertIfIndex"), ("CISCO-CIDS-MIB", "cidsAlertProtocol"), ("CISCO-CIDS-MIB", "cidsAlertDeniedAttacker"), ("CISCO-CIDS-MIB", "cidsAlertDeniedFlow"), ("CISCO-CIDS-MIB", "cidsAlertDenyPacketReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertDenyFlowReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertDenyAttackerReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertBlockConnectionReq"), ("CISCO-CIDS-MIB", "cidsAlertLogAttackerPacketsAct"), ("CISCO-CIDS-MIB", "cidsAlertLogVictimPacketsAct"), ("CISCO-CIDS-MIB", "cidsAlertLogPairPacketsActivated"), ("CISCO-CIDS-MIB", "cidsAlertRateLimitRequested"), ("CISCO-CIDS-MIB", "cidsAlertDeniedAttackVictimPair"), ("CISCO-CIDS-MIB", "cidsAlertDeniedAttackSericePair"), ("CISCO-CIDS-MIB", "cidsAlertDenyAttackVicReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertDenyAttackSerReqNotPerf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsOptionalObjectGroup = ciscoCidsOptionalObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCidsOptionalObjectGroup.setDescription('Optional Objects.')
ciscoCidsOptionalObjectGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 9)).setObjects(("CISCO-CIDS-MIB", "cidsGeneralOriginatorAppName"), ("CISCO-CIDS-MIB", "cidsGeneralOriginatorAppId"), ("CISCO-CIDS-MIB", "cidsAlertSignature"), ("CISCO-CIDS-MIB", "cidsAlertSignatureVersion"), ("CISCO-CIDS-MIB", "cidsAlertSummary"), ("CISCO-CIDS-MIB", "cidsAlertSummaryType"), ("CISCO-CIDS-MIB", "cidsAlertSummaryFinal"), ("CISCO-CIDS-MIB", "cidsAlertSummaryInitialAlert"), ("CISCO-CIDS-MIB", "cidsAlertInterfaceGroup"), ("CISCO-CIDS-MIB", "cidsAlertVlan"), ("CISCO-CIDS-MIB", "cidsAlertVictimContext"), ("CISCO-CIDS-MIB", "cidsAlertAttackerContext"), ("CISCO-CIDS-MIB", "cidsAlertIpLoggingActivated"), ("CISCO-CIDS-MIB", "cidsAlertTcpResetSent"), ("CISCO-CIDS-MIB", "cidsAlertShunRequested"), ("CISCO-CIDS-MIB", "cidsAlertDetails"), ("CISCO-CIDS-MIB", "cidsAlertIpLogId"), ("CISCO-CIDS-MIB", "cidsThreatResponseStatus"), ("CISCO-CIDS-MIB", "cidsThreatResponseSeverity"), ("CISCO-CIDS-MIB", "cidsAlertEventRiskRating"), ("CISCO-CIDS-MIB", "cidsAlertIfIndex"), ("CISCO-CIDS-MIB", "cidsAlertProtocol"), ("CISCO-CIDS-MIB", "cidsAlertDeniedAttacker"), ("CISCO-CIDS-MIB", "cidsAlertDeniedFlow"), ("CISCO-CIDS-MIB", "cidsAlertDenyPacketReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertDenyFlowReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertDenyAttackerReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertBlockConnectionReq"), ("CISCO-CIDS-MIB", "cidsAlertLogAttackerPacketsAct"), ("CISCO-CIDS-MIB", "cidsAlertLogVictimPacketsAct"), ("CISCO-CIDS-MIB", "cidsAlertLogPairPacketsActivated"), ("CISCO-CIDS-MIB", "cidsAlertRateLimitRequested"), ("CISCO-CIDS-MIB", "cidsAlertDeniedAttackVictimPair"), ("CISCO-CIDS-MIB", "cidsAlertDeniedAttackSericePair"), ("CISCO-CIDS-MIB", "cidsAlertDenyAttackVicReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertDenyAttackSerReqNotPerf"), ("CISCO-CIDS-MIB", "cidsAlertThreatValueRating"), ("CISCO-CIDS-MIB", "cidsAlertRiskRatingTargetValue"), ("CISCO-CIDS-MIB", "cidsAlertRiskRatingRelevance"), ("CISCO-CIDS-MIB", "cidsAlertRiskRatingWatchList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsOptionalObjectGroupRev1 = ciscoCidsOptionalObjectGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsOptionalObjectGroupRev1.setDescription('Optional Objects.')
ciscoCidsOptionalObjectGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 10)).setObjects(("CISCO-CIDS-MIB", "cidsAlertDenyPacket"), ("CISCO-CIDS-MIB", "cidsAlertBlockHost"), ("CISCO-CIDS-MIB", "cidsAlertTcpOneWayResetSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsOptionalObjectGroupRev2 = ciscoCidsOptionalObjectGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsOptionalObjectGroupRev2.setDescription('A collection of optional objects which provide sensor events and alerts information.')
ciscoCidsAlertObjectGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 11)).setObjects(("CISCO-CIDS-MIB", "cidsAlertSignature"), ("CISCO-CIDS-MIB", "cidsAlertSignatureVersion"), ("CISCO-CIDS-MIB", "cidsAlertSummary"), ("CISCO-CIDS-MIB", "cidsAlertSummaryType"), ("CISCO-CIDS-MIB", "cidsAlertSummaryFinal"), ("CISCO-CIDS-MIB", "cidsAlertSummaryInitialAlert"), ("CISCO-CIDS-MIB", "cidsAlertVlan"), ("CISCO-CIDS-MIB", "cidsAlertVictimContext"), ("CISCO-CIDS-MIB", "cidsAlertAttackerContext"), ("CISCO-CIDS-MIB", "cidsAlertIpLoggingActivated"), ("CISCO-CIDS-MIB", "cidsAlertTcpResetSent"), ("CISCO-CIDS-MIB", "cidsAlertShunRequested"), ("CISCO-CIDS-MIB", "cidsAlertDetails"), ("CISCO-CIDS-MIB", "cidsAlertIpLogId"), ("CISCO-CIDS-MIB", "cidsThreatResponseStatus"), ("CISCO-CIDS-MIB", "cidsThreatResponseSeverity"), ("CISCO-CIDS-MIB", "cidsAlertEventRiskRating"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsAlertObjectGroupRev2 = ciscoCidsAlertObjectGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsAlertObjectGroupRev2.setDescription('A collection of objects that provide sensor alert information.')
ciscoCidsHealthObjectGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 12)).setObjects(("CISCO-CIDS-MIB", "cidsHealthSecMonAvailability"), ("CISCO-CIDS-MIB", "cidsHealthSecMonOverallHealth"), ("CISCO-CIDS-MIB", "cidsHealthSecMonSoftwareVersion"), ("CISCO-CIDS-MIB", "cidsHealthSecMonSignatureVersion"), ("CISCO-CIDS-MIB", "cidsHealthSecMonLicenseStatus"), ("CISCO-CIDS-MIB", "cidsHealthSecMonMainAppStatus"), ("CISCO-CIDS-MIB", "cidsHealthSecMonAnalysisEngineStatus"), ("CISCO-CIDS-MIB", "cidsHealthSecMonByPassMode"), ("CISCO-CIDS-MIB", "cidsHealthSecMonMissedPktPctAndThresh"), ("CISCO-CIDS-MIB", "cidsHealthSecMonAnalysisEngMemPercent"), ("CISCO-CIDS-MIB", "cidsHealthSecMonSensorLoad"), ("CISCO-CIDS-MIB", "cidsHealthSecMonVirtSensorStatus"), ("CISCO-CIDS-MIB", "cidsHealthSecMonCollaborationAppStatus"), ("CISCO-CIDS-MIB", "cidsHealthSecMonTotalPartitionSpace"), ("CISCO-CIDS-MIB", "cidsHealthSecMonUtilizedPartitionSpace"), ("CISCO-CIDS-MIB", "cidsHealthSecMonOverallAppColor"), ("CISCO-CIDS-MIB", "cidsHealthSecMonSensorLoadColor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsHealthObjectGroupRev1 = ciscoCidsHealthObjectGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsHealthObjectGroupRev1.setDescription('A collection of objects that provide sensor health status.')
ciscoCidsOptionalObjectGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 13)).setObjects(("CISCO-CIDS-MIB", "cidsAlertVirtualSensor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsOptionalObjectGroupRev3 = ciscoCidsOptionalObjectGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsOptionalObjectGroupRev3.setDescription('A collection of optional objects which provide sensor events and alerts information.')
ciscoCidsNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 383, 2, 2, 14)).setObjects(("CISCO-CIDS-MIB", "ciscoCidsHealthHeartBeat"), ("CISCO-CIDS-MIB", "ciscoCidsHealthMetricChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCidsNotificationsGroupRev1 = ciscoCidsNotificationsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCidsNotificationsGroupRev1.setDescription('A collection of objects that provide sensor health and metric change related trap information.')
mibBuilder.exportSymbols("CISCO-CIDS-MIB", cidsGeneralOriginatorAppId=cidsGeneralOriginatorAppId, ciscoCidsMIB=ciscoCidsMIB, ciscoCidsNotificationsGroupRev1=ciscoCidsNotificationsGroupRev1, cidsErrorMessage=cidsErrorMessage, cidsHealthSecMonVirtSensorStatusTable=cidsHealthSecMonVirtSensorStatusTable, cidsHealthSecMonVirtSensorStatus=cidsHealthSecMonVirtSensorStatus, ciscoCidsMIBComplianceRev4=ciscoCidsMIBComplianceRev4, CidsAttackRelevance=CidsAttackRelevance, cidsHealthCommandAndControlPort=cidsHealthCommandAndControlPort, CidsHealthStatusColor=CidsHealthStatusColor, ciscoCidsOptionalObjectGroup=ciscoCidsOptionalObjectGroup, cidsHealthAlarmsGenerated=cidsHealthAlarmsGenerated, cidsHealthSecMonSensorLoadColor=cidsHealthSecMonSensorLoadColor, ciscoCidsAlertObjectGroup=ciscoCidsAlertObjectGroup, cidsAlertSignatureSigName=cidsAlertSignatureSigName, cidsErrorName=cidsErrorName, cidsHealthSecMonOverallHealth=cidsHealthSecMonOverallHealth, ciscoCidsOptionalObjectGroupRev1=ciscoCidsOptionalObjectGroupRev1, ciscoCidsHealthHeartBeat=ciscoCidsHealthHeartBeat, cidsAlertIpLoggingActivated=cidsAlertIpLoggingActivated, cidsHealthSecMonTotalPartitionSpace=cidsHealthSecMonTotalPartitionSpace, cidsAlertThreatValueRating=cidsAlertThreatValueRating, CidsApplicationStatus=CidsApplicationStatus, cidsHealthSecMonVirtSensorName=cidsHealthSecMonVirtSensorName, cidsAlertSignatureSigId=cidsAlertSignatureSigId, cidsHealthPacketLoss=cidsHealthPacketLoss, ciscoCidsHealthObjectGroup=ciscoCidsHealthObjectGroup, cidsGeneralLocalTime=cidsGeneralLocalTime, ciscoCidsOptionalObjectGroupRev3=ciscoCidsOptionalObjectGroupRev3, cidsAlertDenyAttackSerReqNotPerf=cidsAlertDenyAttackSerReqNotPerf, cidsErrorSeverity=cidsErrorSeverity, cidsHealthTcpStreams=cidsHealthTcpStreams, cidsThreatResponseStatus=cidsThreatResponseStatus, cidsAlertBlockHost=cidsAlertBlockHost, cidsAlertDeniedFlow=cidsAlertDeniedFlow, ciscoCidsHealthObjectGroupRev1=ciscoCidsHealthObjectGroupRev1, cidsAlertSignature=cidsAlertSignature, ciscoCidsMIBComplianceRev2=ciscoCidsMIBComplianceRev2, cidsAlertDenyPacketReqNotPerf=cidsAlertDenyPacketReqNotPerf, ciscoCidsHealthMetricChange=ciscoCidsHealthMetricChange, cidsAlertBlockConnectionReq=cidsAlertBlockConnectionReq, cidsAlertAttackerContext=cidsAlertAttackerContext, cidsAlertSummary=cidsAlertSummary, cidsGeneralUTCTime=cidsGeneralUTCTime, cidsHealthSecMonCollaborationAppStatus=cidsHealthSecMonCollaborationAppStatus, cidsGeneralOriginatorAppName=cidsGeneralOriginatorAppName, cidsHealthUdpDualIpAndPorts=cidsHealthUdpDualIpAndPorts, cidsAlertRiskRatingWatchList=cidsAlertRiskRatingWatchList, cidsHealthSecMonSensorLoad=cidsHealthSecMonSensorLoad, cidsHealth=cidsHealth, ciscoCidsMIBCompliance=ciscoCidsMIBCompliance, cidsHealthSecMonSoftwareVersion=cidsHealthSecMonSoftwareVersion, cidsHealthTCPEstablishedStreams=cidsHealthTCPEstablishedStreams, cidsAlertLogVictimPacketsAct=cidsAlertLogVictimPacketsAct, cidsAlertLogAttackerPacketsAct=cidsAlertLogAttackerPacketsAct, cidsHealthSecMonDataStorageTable=cidsHealthSecMonDataStorageTable, cidsAlertDenyPacket=cidsAlertDenyPacket, cidsHealthSecMonVirtSensorStatusEntry=cidsHealthSecMonVirtSensorStatusEntry, cidsHealthSecMonAnalysisEngineStatus=cidsHealthSecMonAnalysisEngineStatus, ciscoCidsGeneralObjectGroupRev1=ciscoCidsGeneralObjectGroupRev1, cidsAlertIpLogId=cidsAlertIpLogId, cidsAlertRiskRatingRelevance=cidsAlertRiskRatingRelevance, CidsTargetValue=CidsTargetValue, cidsAlertInterfaceGroup=cidsAlertInterfaceGroup, cidsGeneral=cidsGeneral, CidsErrorCode=CidsErrorCode, cidsHealthPacketDenialRate=cidsHealthPacketDenialRate, ciscoCidsOptionalObjectGroupRev2=ciscoCidsOptionalObjectGroupRev2, cidsHealthSecMonSignatureVersion=cidsHealthSecMonSignatureVersion, cidsHealthSecMonPartitionName=cidsHealthSecMonPartitionName, ciscoCidsMIBObjects=ciscoCidsMIBObjects, cidsAlertDenyFlowReqNotPerf=cidsAlertDenyFlowReqNotPerf, cidsAlertIfIndex=cidsAlertIfIndex, ciscoCidsMIBCompliances=ciscoCidsMIBCompliances, cidsHealthSecMonLicenseStatus=cidsHealthSecMonLicenseStatus, ciscoCidsMIBNotifs=ciscoCidsMIBNotifs, cidsHealthIpDualIp=cidsHealthIpDualIp, cidsAlertVlan=cidsAlertVlan, ciscoCidsNotificationsGroup=ciscoCidsNotificationsGroup, cidsAlertVirtualSensor=cidsAlertVirtualSensor, cidsAlertDeniedAttackVictimPair=cidsAlertDeniedAttackVictimPair, cidsAlertSummaryFinal=cidsAlertSummaryFinal, cidsGeneralEventId=cidsGeneralEventId, cidsHealthSecMonAnalysisEngMemPercent=cidsHealthSecMonAnalysisEngMemPercent, cidsHealthDatagramsInFRU=cidsHealthDatagramsInFRU, cidsAlertDenyAttackerReqNotPerf=cidsAlertDenyAttackerReqNotPerf, cidsAlertAlarmTraits=cidsAlertAlarmTraits, cidsHealthSecMonMissedPktPctAndThresh=cidsHealthSecMonMissedPktPctAndThresh, ciscoCidsErrorObjectGroup=ciscoCidsErrorObjectGroup, cidsHealthTcpEmbryonicStreams=cidsHealthTcpEmbryonicStreams, cidsAlertVictimAddress=cidsAlertVictimAddress, cidsHealthSecMonUtilizedPartitionSpace=cidsHealthSecMonUtilizedPartitionSpace, cidsAlertTcpResetSent=cidsAlertTcpResetSent, ciscoCidsAlertObjectGroupRev2=ciscoCidsAlertObjectGroupRev2, cidsAlertSummaryType=cidsAlertSummaryType, ciscoCidsGeneralObjectGroup=ciscoCidsGeneralObjectGroup, cidsAlertSignatureSubSigId=cidsAlertSignatureSubSigId, cidsHealthIsSensorActive=cidsHealthIsSensorActive, cidsHealthSecMonMainAppStatus=cidsHealthSecMonMainAppStatus, cidsAlertEventRiskRating=cidsAlertEventRiskRating, cidsGeneralOriginatorHostId=cidsGeneralOriginatorHostId, ciscoCidsMIBGroups=ciscoCidsMIBGroups, cidsHealthSecMonDataStorageEntry=cidsHealthSecMonDataStorageEntry, cidsAlertLogPairPacketsActivated=cidsAlertLogPairPacketsActivated, cidsError=cidsError, cidsAlertSummaryInitialAlert=cidsAlertSummaryInitialAlert, cidsAlertDeniedAttackSericePair=cidsAlertDeniedAttackSericePair, cidsHealthSecMonAvailability=cidsHealthSecMonAvailability, cidsHealthFragmentsInFRU=cidsHealthFragmentsInFRU, cidsHealthActiveNodes=cidsHealthActiveNodes, cidsAlertSeverity=cidsAlertSeverity, cidsAlertAttackerAddress=cidsAlertAttackerAddress, cidsAlertTcpOneWayResetSent=cidsAlertTcpOneWayResetSent, cidsHealthSecMonOverallAppColor=cidsHealthSecMonOverallAppColor, cidsAlertDetails=cidsAlertDetails, cidsHealthTcpClosingStreams=cidsHealthTcpClosingStreams, cidsAlertShunRequested=cidsAlertShunRequested, cidsAlertDeniedAttacker=cidsAlertDeniedAttacker, cidsHealthSecMonByPassMode=cidsHealthSecMonByPassMode, cidsNotificationsEnabled=cidsNotificationsEnabled, cidsAlertProtocol=cidsAlertProtocol, cidsHealthIsSensorMemoryCritical=cidsHealthIsSensorMemoryCritical, cidsAlertDenyAttackVicReqNotPerf=cidsAlertDenyAttackVicReqNotPerf, ciscoCidsAlertObjectGroupRev1=ciscoCidsAlertObjectGroupRev1, cidsHealthTcpDualIpAndPorts=cidsHealthTcpDualIpAndPorts, cidsAlertRiskRatingTargetValue=cidsAlertRiskRatingTargetValue, cidsAlert=cidsAlert, cidsAlertVictimContext=cidsAlertVictimContext, cidsThreatResponseSeverity=cidsThreatResponseSeverity, ciscoCidsMIBComplianceRev3=ciscoCidsMIBComplianceRev3, ciscoCidsMIBConform=ciscoCidsMIBConform, cidsAlertSignatureVersion=cidsAlertSignatureVersion, ciscoCidsAlert=ciscoCidsAlert, PYSNMP_MODULE_ID=ciscoCidsMIB, ciscoCidsMIBComplianceRev1=ciscoCidsMIBComplianceRev1, cidsHealthSensorStatsResetTime=cidsHealthSensorStatsResetTime, ciscoCidsError=ciscoCidsError, cidsAlertRateLimitRequested=cidsAlertRateLimitRequested)
