#
# PySNMP MIB module CISCO-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, TimeIntervalMin, TimeIntervalSec = mibBuilder.importSymbols("CISCO-TC", "CiscoPort", "TimeIntervalMin", "TimeIntervalSec")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter64, Bits, Gauge32, Counter32, Integer32, iso, IpAddress, ObjectIdentity, TimeTicks, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter64", "Bits", "Gauge32", "Counter32", "Integer32", "iso", "IpAddress", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibIdentifier")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
ciscoRadiusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 288))
ciscoRadiusMIB.setRevisions(('2009-02-06 00:00', '2007-07-22 00:00', '2007-01-03 00:00', '2004-03-03 00:00', '2002-11-09 00:00', '2002-10-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoRadiusMIB.setRevisionsDescriptions(('The following objects have been added [1] crRadiusServerRTTThldNorm [2] crRadiusServerRTTThldHi [3] crRadiusServerRetransThldNorm [4] crRadiusServerRetransThldHi [5] crRadiusServerRTTNormNotifEnable [6] crRadiusServerRTTHiNotifEnable [7] crRadiusServerRetransNormNotifEnable [8] crRadiusServerRetransHiNotifEnable The following notifications have been added [1] crRadiusServerRTTNormNotif [2] crRadiusServerRTTHiNotif [3] crRadiusServerRetransNormNotif [4] crRadiusServerRetransHiNotif The following object-groups have been added [1] crmRadiusServerNotifGroup [2] crmNotificationControlGroup [3] crmRadiusServerNotifCntlGroup The compliance statement ciscoRadiusMIBCompliance3 has been deprecated by ciscoRadiusMIBCompliance4.', 'Added support of crmRadiusKeepAliveUserGroup.', 'Added support of crmKeepAliveGroup, crmAutoInitializeConfigGroup, and crmAttributesGroup2.', 'Added support of crRadiusFramedIpAddrIncluded, crRadiusVlanAssignmentEnabled, crVlanGroupTable. Added http(2) bit to crRadiusLoginAuthentication.', 'Removed the TC CiscoRadiusAuthKeyType. Added new TC CiscoRadiusAuthKey. Removed the objects crRadiusAuthKeyType and crRadiusServerKeyType. Changed the SYNTAX of objects crRadiusAuthKey and crRadiusServerKey.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoRadiusMIB.setLastUpdated('200902060000Z')
if mibBuilder.loadTexts: ciscoRadiusMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoRadiusMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoRadiusMIB.setDescription('MIB module for monitoring and configuring authentication and logging services using RADIUS (Remote Authentication Dial In User Service) related objects. The RADIUS (RFC2865) framework consists of clients and servers. A client is responsible for passing user information to designated RADIUS servers, and then acting on the response which is returned. RADIUS server is responsible for receiving user connection requests, authenticating the user, and then returning all configuration information necessary for the client to deliver service to the user. This MIB module also contains objects for enabling/disabling telnet and SSH (Secure Shell) authentication. Secure Shell is program which is used to log into another machine over a secured session.')
ciscoRadiusMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 1))
ciscoRadiusMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 2))
crRadiusGenericConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1))
crRadiusServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2))
crRadiusAttributesConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 3))
crRadiusVlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4))
crRadiusKeepAliveConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5))
crRadiusServerNotifCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 6))
ciscoRadiusMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 3))
class CiscoRadiusAuthKey(TextualConvention, OctetString):
    description = "The authentication key of a radius server. The first octet of this object contains the the type of key. The octets following the first octet contain the key. If the value of the first object is ascii value 'p', then the key is in plain text. If the value of first object is ascii value 'e', the key is encrypted. Note that this object has same format as TC DisplayString."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 65)

class CiscoRadiusRoundTripTimePercent(TextualConvention, Unsigned32):
    description = 'This textual convention represents a round-trip time per session expressed as a percent of the round-trip time configured for the RADIUS server.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class CiscoRadiusRetransPercent(TextualConvention, Unsigned32):
    description = 'This textual convention represents the number of retransmisions per session expressed as a percent of the retransmissions configured for the RADIUS server.'
    status = 'current'
    displayHint = 'd-2'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

crRadiusLoginAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1, 1), Bits().clone(namedValues=NamedValues(("telnet", 0), ("console", 1), ("http", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusLoginAuthentication.setStatus('current')
if mibBuilder.loadTexts: crRadiusLoginAuthentication.setDescription("The login authentication using RADIUS feature is enabled for telnet/SSH sessions if the 'telnet (0) ' bit is set, and disabled if this bit is reset. The login authentication using RADIUS feature is enabled for console sessions if the 'console (1) ' bit is set, and disabled if this bit is reset. The login authentication using RADIUS feature is enabled for remote web sessions if the 'http (2) ' bit is set, and disabled if this bit is reset.")
crRadiusDeadtime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1, 2), TimeIntervalMin().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusDeadtime.setStatus('current')
if mibBuilder.loadTexts: crRadiusDeadtime.setDescription('Indicates the length of time in minutes that the system will mark the server dead when a RADIUS server does not respond to an authentication request. During the interval of the dead time, any authentication request that comes up would not be sent to that RADIUS server that was marked as dead. The default value of 0 means that the RADIUS servers will not be marked dead if they do not respond.')
crRadiusAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1, 3), CiscoRadiusAuthKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusAuthKey.setStatus('current')
if mibBuilder.loadTexts: crRadiusAuthKey.setDescription('The key used in encrypting the packets passed between the RADIUS server and the client. This key must match the one configured on the server. A zero-length string is always returned when this object is read.')
crRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1, 4), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: crRadiusTimeout.setDescription('This is the time in seconds between retransmissions to the RADIUS server.')
crRadiusRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setUnits('retransmits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusRetransmits.setStatus('current')
if mibBuilder.loadTexts: crRadiusRetransmits.setDescription('The additional number of times the RADIUS server should be tried by the RADIUS client before giving up on the server.')
crRadiusAccountingLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000)).clone(30000)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusAccountingLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: crRadiusAccountingLogMaxSize.setDescription('The maximum size of the accounting log file in bytes. The log file is stored on local persistent storage at the device. If the size is set to a smaller value than the existing one, then smaller log will be available for view by the user.')
crRadiusAccountingMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 1, 7), Bits().clone(namedValues=NamedValues(("radius", 0), ("local", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusAccountingMethod.setStatus('current')
if mibBuilder.loadTexts: crRadiusAccountingMethod.setDescription('The accounting method on the device. If bit 0 is set, the accounting method is RADIUS. If bit 1 is set, then the accounting method is local. It is possible for the user to set both the bits so that both the RADIUS as well as local accounting methods are used. It is also possible to set none of the methods; in this case the switch will not do any accounting.')
crRadiusFramedIpAddrIncluded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusFramedIpAddrIncluded.setStatus('current')
if mibBuilder.loadTexts: crRadiusFramedIpAddrIncluded.setDescription('Specifies if Access-Request packets will include Framed-IP-Address attributes.')
crRadiusFramedMtu = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusFramedMtu.setReference('RFC2865: Section 5.12')
if mibBuilder.loadTexts: crRadiusFramedMtu.setStatus('current')
if mibBuilder.loadTexts: crRadiusFramedMtu.setDescription('Specifies the Framed-MTU attribute value to be sent to the RADIUS server.')
crRadiusServerTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crRadiusServerTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerTableMaxEntries.setDescription('The maximum number of entries that the agent supports in the crRadiusServerTable.')
crRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2), )
if mibBuilder.loadTexts: crRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerTable.setDescription('This table lists RADIUS servers.')
crRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-RADIUS-MIB", "crRadiusServerIndex"))
if mibBuilder.loadTexts: crRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerEntry.setDescription("A RADIUS server table entry. Users can add/delete entries in this table using object 'crRadiusServerRowStatus'. An entry cannot be created until following objects are instantiated : - crRadiusServerAddrType - crRadiusServerAddr Also, following objects cannot be modified when 'crRadiusServerRowStatus' is 'active' : - crRadiusServerAddrType - crRadiusServerAddr To modify above objects, the entry must be deleted and re-created with new values of above objects. If 'crRadiusServerKey' is not instantiated or is a zero-length string, then value of the object 'crRadiusAuthkey' is used as the key to communicate with the corresponding RADIUS server.")
crRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: crRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerIndex.setDescription('An arbitrary integer value, greater than zero, and less than and equal to crRadiusServerTableMaxEntries, which identifies a RADIUS Server in this table. The value of this object must be persistent across reboots/reinitialization of the device.')
crRadiusServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerAddrType.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerAddrType.setDescription("The type of address of the RADIUS Server as specified by object 'crRadiusServerAddr'.")
crRadiusServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerAddr.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerAddr.setDescription('The address of the RADIUS Server.')
crRadiusServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 4), CiscoPort().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerAuthPort.setDescription('This is the destination UDP port number to which RADIUS authentication messages should be sent. The RADIUS server will not be used for authentication if this port number is 0.')
crRadiusServerAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 5), CiscoPort().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerAcctPort.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerAcctPort.setDescription('This is the destination UDP port number to which RADIUS accounting messages should be sent.')
crRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 6), CiscoRadiusAuthKey().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerKey.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerKey.setDescription("The key used in encrypting the packets passed between the RADIUS server and the client. This key must match the one configured on the server. A zero-length string is always returned when this object is read. Note that if this object is a zero length string, then 'crRadiusAuthKey' is used as the key for this server.")
crRadiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("primary", 2))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerType.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerType.setDescription('Type of the RADIUS server. other (1), - a lower priority server primary (2) - the primary server which is tried first by the RADIUS client.')
crRadiusServerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("authAndAcct", 2), ("authOnly", 3), ("acctOnly", 4))).clone('authAndAcct')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerMode.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerMode.setDescription('Mode of the RADIUS server. none (1) - neither authentication nor accounting authAndAcct (2) - both authentication and accounting authOnly (3) - only for authentication acctOnly (4) - only for accounting.')
crRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRowStatus.setDescription('Status of this row.')
crRadiusServerRTTThldNorm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 10), CiscoRadiusRoundTripTimePercent()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerRTTThldNorm.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRTTThldNorm.setDescription('This object represents the normal threshold on the round-trip time of RADIUS authentication messages. This is measured as a percentage of configured round-trip time as per RFC-2865. If the round-trip time is less than or equal to this threshold, the agent generates the crRadiusServerRTTNormNotif notification. The value configured through this object should never be greater than that configured through crRadiusServerRTTThldHi.')
crRadiusServerRTTThldHi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 11), CiscoRadiusRoundTripTimePercent()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerRTTThldHi.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRTTThldHi.setDescription('This object represents the high threshold on the round-trip time of RADIUS authentication messages. This is measured as a percentage of configured round-trip time as per RFC-2865. If the round-trip time is greater than or equal to this threshold, the agent generates the crRadiusServerRTTHiNotif notification. The value configured through this object should never be smaller than that configured through crRadiusServerRTTThldNorm.')
crRadiusServerRetransThldNorm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 12), CiscoRadiusRetransPercent()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerRetransThldNorm.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRetransThldNorm.setDescription('This object represents the normal threshold on the retransmitted RADIUS authentication messages per session. This is measured as a percentage of crRadiusRetransmits. If the number of retransmits is less than or equal to this threshold, the agent generates the crRadiusServerRetransNormNotif notification. The value configured through this object should never be greater than that configured through crRadiusServerRetransThldHi.')
crRadiusServerRetransThldHi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 2, 2, 1, 13), CiscoRadiusRetransPercent()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: crRadiusServerRetransThldHi.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRetransThldHi.setDescription('This object represents the high threshold on the retransmitted RADIUS authentication messages per session. This is measured as a percentage of crRadiusRetransmits. If the number of retransmits is greater than or equal to this threshold, the agent generates the crRadiusServerRetransHiNotif notification. The value configured through this object should never be smaller than that configured through crRadiusServerRetransThldNorm.')
crRadiusVlanAssignmentEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusVlanAssignmentEnabled.setStatus('current')
if mibBuilder.loadTexts: crRadiusVlanAssignmentEnabled.setDescription('Specifies if VLANs will be assigned by RADIUS server via the tunnel attribute during the authentication.')
crVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4, 2), )
if mibBuilder.loadTexts: crVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: crVlanGroupTable.setDescription('A table containing VLAN Group Mapping information for the purpose of distributing users across multiple VLANs which have the same group name.')
crVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-RADIUS-MIB", "crVlanGroupName"))
if mibBuilder.loadTexts: crVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: crVlanGroupEntry.setDescription('An entry containing an VLAN Group Mapping information applicable to a particular VLAN. Entries in this table can be created or deleted using cpaeVlanGroupRowStatus object.')
crVlanGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4, 2, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: crVlanGroupName.setStatus('current')
if mibBuilder.loadTexts: crVlanGroupName.setDescription('Specifies the name of the VLAN group.')
crVlanGroupVlansLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crVlanGroupVlansLow.setStatus('current')
if mibBuilder.loadTexts: crVlanGroupVlansLow.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndex value of 0 to 2047. Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 0 through 7, the second octet specifying VLANs 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered VLAN, and the least significant bit represents the highest numbered VLAN. Thus, each VLAN of the device is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is included in the group; the VLAN is not mapped to the group if its bit has a value of '0'.")
crVlanGroupVlansHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crVlanGroupVlansHigh.setStatus('current')
if mibBuilder.loadTexts: crVlanGroupVlansHigh.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndex value of 2048 to 4095. Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2048 through 2055, the second octet specifying VLANs 2056 through 2063, etc. Within each octet, the most significant bit represents the lowest numbered VLAN, and the least significant bit represents the highest numbered VLAN. Thus, each VLAN of the device is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is included in the group; the VLAN is not mapped to the group if its bit has a value of '0'.")
crVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: crVlanGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: crVlanGroupRowStatus.setDescription('This object is used to manage the creation and deletion of rows in this table. The only way to create an entry is by setting the value createAndGo(4), and the only way to delete an entry is by setting the value destroy(6) to this object.')
crRadiusKeepAliveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusKeepAliveEnabled.setStatus('current')
if mibBuilder.loadTexts: crRadiusKeepAliveEnabled.setDescription('Specifies whether RADIUS keep-alive feature is enabled or not.')
crRadiusKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: crRadiusKeepAliveInterval.setDescription("Specifies the RADIUS keep-alive interval value. When the object value of crRadiusKeepAliveEnabled is 'true', a tracking message is sent to every configured RADIUS server at the interval of crRadiusKeepAliveInterval to query the status of the server.")
crRadiusKeepAliveServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5, 3), )
if mibBuilder.loadTexts: crRadiusKeepAliveServerTable.setStatus('current')
if mibBuilder.loadTexts: crRadiusKeepAliveServerTable.setDescription('This table contains the keep-alive information on every RADIUS server configured on the system.')
crRadiusKeepAliveServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-RADIUS-MIB", "crRadiusServerIndex"))
if mibBuilder.loadTexts: crRadiusKeepAliveServerEntry.setStatus('current')
if mibBuilder.loadTexts: crRadiusKeepAliveServerEntry.setDescription('An entry containing keep-alive information of a corresponding RADIUS server configured in crRadiusServerTable.')
crRadiusKeepAliveServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("init", 2), ("active", 3), ("checkup", 4), ("dead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crRadiusKeepAliveServerStatus.setStatus('current')
if mibBuilder.loadTexts: crRadiusKeepAliveServerStatus.setDescription("Indicates the current keep-alive status of the RADIUS server. other : none of the following. init : the server is in init state. active : the server is in active state. checkup: the server is in checkup state. dead : the server is in dead state. This object is only instantiated when the corresponding instance value of crRadiusServerRowStatus is 'active' and the object value of crRadiusKeepAliveEnabled is 'true'.")
crRadiusPortAutoInitialize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusPortAutoInitialize.setStatus('current')
if mibBuilder.loadTexts: crRadiusPortAutoInitialize.setDescription("Specifies whether a port's state machines will be re- initialized if their state machines are in 'aaaFail' when a RADIUS server becomes available.")
crRadiusKeepAliveUserName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 5, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusKeepAliveUserName.setStatus('current')
if mibBuilder.loadTexts: crRadiusKeepAliveUserName.setDescription('Specifies the user name used in keep-alive communication with RADIUS server.')
crRadiusServerRTTNormNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 6, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusServerRTTNormNotifEnable.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRTTNormNotifEnable.setDescription("This object is used to control the generation of crRadiusServerRTTNormNotif notification. A value of 'true' indicates that the notification will be generated when the current server round-trip time is less than or equal to crRadiusServerRTTThldNorm.")
crRadiusServerRTTHiNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 6, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusServerRTTHiNotifEnable.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRTTHiNotifEnable.setDescription("This object is used to control the generation of crRadiusServerRTTHiNotif notification. A value of 'true' indicates that the notification will be generated when the current server round-trip time is greater than or equal to crRadiusServerRTTThldHi.")
crRadiusServerRetransNormNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusServerRetransNormNotifEnable.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRetransNormNotifEnable.setDescription("This object is used to control the generation of crRadiusServerRetransNormNotif notification. A value of 'true' indicates that the notification will be generated when the current number of server retransmissions are less than or equal to crRadiusServerRetransThldNorm.")
crRadiusServerRetransHiNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 288, 1, 6, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crRadiusServerRetransHiNotifEnable.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRetransHiNotifEnable.setDescription("This object is used to control the generation of crRadiusServerRetransHiNotif notification. A value of 'true' indicates that the notification will be generated when the current number of server retransmissions are greater than or equal to crRadiusServerRetransThldHi.")
crRadiusServerRTTNormNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 288, 3, 1)).setObjects(("CISCO-RADIUS-MIB", "crRadiusServerRTTThldNorm"), ("CISCO-RADIUS-MIB", "crRadiusServerAddr"), ("CISCO-RADIUS-MIB", "crRadiusServerAuthPort"))
if mibBuilder.loadTexts: crRadiusServerRTTNormNotif.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRTTNormNotif.setDescription('This notification indicates that the current server round-trip time is less than or equal to crRadiusServerRTTThldNorm. Once sent, this notification will be disarmed until the round-trip time exceeds the value configured through crRadiusServerRTTThldHi.')
crRadiusServerRTTHiNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 288, 3, 2)).setObjects(("CISCO-RADIUS-MIB", "crRadiusServerRTTThldHi"), ("CISCO-RADIUS-MIB", "crRadiusServerAddr"), ("CISCO-RADIUS-MIB", "crRadiusServerAuthPort"))
if mibBuilder.loadTexts: crRadiusServerRTTHiNotif.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRTTHiNotif.setDescription('This notification indicates that the current server round-trip time is greater than or equal to crRadiusServerRTTThldHi. Once sent, this notification will be disarmed until the round-trip time falls below the value configured through crRadiusServerRTTThldNorm.')
crRadiusServerRetransNormNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 288, 3, 3)).setObjects(("CISCO-RADIUS-MIB", "crRadiusServerRetransThldNorm"), ("CISCO-RADIUS-MIB", "crRadiusServerAddr"), ("CISCO-RADIUS-MIB", "crRadiusServerAuthPort"))
if mibBuilder.loadTexts: crRadiusServerRetransNormNotif.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRetransNormNotif.setDescription('This notification indicates that the current number of server retransmissions are less than or equal to crRadiusServerRetransThldNorm. Once sent, this notification will be disarmed until the number of retransmissions exceed the value configured through crRadiusServerRetransThldHi.')
crRadiusServerRetransHiNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 288, 3, 4)).setObjects(("CISCO-RADIUS-MIB", "crRadiusServerRetransThldHi"), ("CISCO-RADIUS-MIB", "crRadiusServerAddr"), ("CISCO-RADIUS-MIB", "crRadiusServerAuthPort"))
if mibBuilder.loadTexts: crRadiusServerRetransHiNotif.setStatus('current')
if mibBuilder.loadTexts: crRadiusServerRetransHiNotif.setDescription('This notification indicates that the current number of server retransmissions are greater than or equal to crRadiusServerRetransThldHi. Once sent, this notification will be disarmed until the number of retransmissions falls below the value configured through crRadiusServerRetransThldNorm.')
ciscoRadiusMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 1))
ciscoRadiusMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2))
ciscoRadiusMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 1, 1)).setObjects(("CISCO-RADIUS-MIB", "crmConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRadiusMIBCompliance = ciscoRadiusMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoRadiusMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-RADIUS-MIB.')
ciscoRadiusMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 1, 2)).setObjects(("CISCO-RADIUS-MIB", "crmConfigurationGroup"), ("CISCO-RADIUS-MIB", "crmAttributesGroup"), ("CISCO-RADIUS-MIB", "crmKeepAliveGroup"), ("CISCO-RADIUS-MIB", "crmAutoInitializeConfigGroup"), ("CISCO-RADIUS-MIB", "crmAttributesGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRadiusMIBCompliance2 = ciscoRadiusMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoRadiusMIBCompliance2.setDescription('The compliance statement for entities which implement the CISCO-RADIUS-MIB.')
ciscoRadiusMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 1, 3)).setObjects(("CISCO-RADIUS-MIB", "crmConfigurationGroup"), ("CISCO-RADIUS-MIB", "crmAttributesGroup"), ("CISCO-RADIUS-MIB", "crmKeepAliveGroup"), ("CISCO-RADIUS-MIB", "crmAutoInitializeConfigGroup"), ("CISCO-RADIUS-MIB", "crmAttributesGroup2"), ("CISCO-RADIUS-MIB", "crmVlanConfigGroup"), ("CISCO-RADIUS-MIB", "crmRadiusKeepAliveUserGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRadiusMIBCompliance3 = ciscoRadiusMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoRadiusMIBCompliance3.setDescription('The compliance statement for entities which implement the CISCO-RADIUS-MIB.')
ciscoRadiusMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 1, 4)).setObjects(("CISCO-RADIUS-MIB", "crmConfigurationGroup"), ("CISCO-RADIUS-MIB", "crmConfigurationGroupSup1"), ("CISCO-RADIUS-MIB", "crmRadiusServerNotifGroup"), ("CISCO-RADIUS-MIB", "crmRadiusServerNotifCntlGroup"), ("CISCO-RADIUS-MIB", "crmAttributesGroup"), ("CISCO-RADIUS-MIB", "crmKeepAliveGroup"), ("CISCO-RADIUS-MIB", "crmAutoInitializeConfigGroup"), ("CISCO-RADIUS-MIB", "crmAttributesGroup2"), ("CISCO-RADIUS-MIB", "crmVlanConfigGroup"), ("CISCO-RADIUS-MIB", "crmRadiusKeepAliveUserGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRadiusMIBCompliance4 = ciscoRadiusMIBCompliance4.setStatus('current')
if mibBuilder.loadTexts: ciscoRadiusMIBCompliance4.setDescription('The compliance statement for entities which implement the CISCO-RADIUS-MIB.')
crmConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 1)).setObjects(("CISCO-RADIUS-MIB", "crRadiusLoginAuthentication"), ("CISCO-RADIUS-MIB", "crRadiusAuthKey"), ("CISCO-RADIUS-MIB", "crRadiusTimeout"), ("CISCO-RADIUS-MIB", "crRadiusRetransmits"), ("CISCO-RADIUS-MIB", "crRadiusDeadtime"), ("CISCO-RADIUS-MIB", "crRadiusAccountingLogMaxSize"), ("CISCO-RADIUS-MIB", "crRadiusAccountingMethod"), ("CISCO-RADIUS-MIB", "crRadiusServerTableMaxEntries"), ("CISCO-RADIUS-MIB", "crRadiusServerAddrType"), ("CISCO-RADIUS-MIB", "crRadiusServerAddr"), ("CISCO-RADIUS-MIB", "crRadiusServerAuthPort"), ("CISCO-RADIUS-MIB", "crRadiusServerAcctPort"), ("CISCO-RADIUS-MIB", "crRadiusServerKey"), ("CISCO-RADIUS-MIB", "crRadiusServerType"), ("CISCO-RADIUS-MIB", "crRadiusServerMode"), ("CISCO-RADIUS-MIB", "crRadiusServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmConfigurationGroup = crmConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: crmConfigurationGroup.setDescription('A collection of objects for RADIUS configuration.')
crmAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 2)).setObjects(("CISCO-RADIUS-MIB", "crRadiusFramedIpAddrIncluded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmAttributesGroup = crmAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: crmAttributesGroup.setDescription('A collection of objects for RADIUS attributes configuration.')
crmVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 3)).setObjects(("CISCO-RADIUS-MIB", "crRadiusVlanAssignmentEnabled"), ("CISCO-RADIUS-MIB", "crVlanGroupVlansLow"), ("CISCO-RADIUS-MIB", "crVlanGroupVlansHigh"), ("CISCO-RADIUS-MIB", "crVlanGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmVlanConfigGroup = crmVlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: crmVlanConfigGroup.setDescription('A collection of objects for RADIUS Vlans assignment configuration.')
crmKeepAliveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 4)).setObjects(("CISCO-RADIUS-MIB", "crRadiusKeepAliveEnabled"), ("CISCO-RADIUS-MIB", "crRadiusKeepAliveInterval"), ("CISCO-RADIUS-MIB", "crRadiusKeepAliveServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmKeepAliveGroup = crmKeepAliveGroup.setStatus('current')
if mibBuilder.loadTexts: crmKeepAliveGroup.setDescription('A collection of objects for RADIUS keep-alive information.')
crmAutoInitializeConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 5)).setObjects(("CISCO-RADIUS-MIB", "crRadiusPortAutoInitialize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmAutoInitializeConfigGroup = crmAutoInitializeConfigGroup.setStatus('current')
if mibBuilder.loadTexts: crmAutoInitializeConfigGroup.setDescription('A collection of objects for RADIUS auto initialize configuration.')
crmAttributesGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 6)).setObjects(("CISCO-RADIUS-MIB", "crRadiusFramedMtu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmAttributesGroup2 = crmAttributesGroup2.setStatus('current')
if mibBuilder.loadTexts: crmAttributesGroup2.setDescription('A collection of additional objects for RADIUS attributes configuration.')
crmRadiusKeepAliveUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 7)).setObjects(("CISCO-RADIUS-MIB", "crRadiusKeepAliveUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmRadiusKeepAliveUserGroup = crmRadiusKeepAliveUserGroup.setStatus('current')
if mibBuilder.loadTexts: crmRadiusKeepAliveUserGroup.setDescription('A collection of objects for RADIUS keep-alive user configuration.')
crmRadiusServerNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 8)).setObjects(("CISCO-RADIUS-MIB", "crRadiusServerRTTNormNotif"), ("CISCO-RADIUS-MIB", "crRadiusServerRTTHiNotif"), ("CISCO-RADIUS-MIB", "crRadiusServerRetransNormNotif"), ("CISCO-RADIUS-MIB", "crRadiusServerRetransHiNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmRadiusServerNotifGroup = crmRadiusServerNotifGroup.setStatus('current')
if mibBuilder.loadTexts: crmRadiusServerNotifGroup.setDescription('This collection of notifications is used to monitor the responsiveness of the RADIUS server.')
crmConfigurationGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 9)).setObjects(("CISCO-RADIUS-MIB", "crRadiusServerRTTThldNorm"), ("CISCO-RADIUS-MIB", "crRadiusServerRTTThldHi"), ("CISCO-RADIUS-MIB", "crRadiusServerRetransThldNorm"), ("CISCO-RADIUS-MIB", "crRadiusServerRetransThldHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmConfigurationGroupSup1 = crmConfigurationGroupSup1.setStatus('current')
if mibBuilder.loadTexts: crmConfigurationGroupSup1.setDescription('This group supplements crmConfigurationGroup, to configure the thresholds on the round-trip times and retransmission counts.')
crmRadiusServerNotifCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 288, 2, 2, 10)).setObjects(("CISCO-RADIUS-MIB", "crRadiusServerRTTNormNotifEnable"), ("CISCO-RADIUS-MIB", "crRadiusServerRTTHiNotifEnable"), ("CISCO-RADIUS-MIB", "crRadiusServerRetransNormNotifEnable"), ("CISCO-RADIUS-MIB", "crRadiusServerRetransHiNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    crmRadiusServerNotifCntlGroup = crmRadiusServerNotifCntlGroup.setStatus('current')
if mibBuilder.loadTexts: crmRadiusServerNotifCntlGroup.setDescription('This collection of objects control the generation of notifications related to RADIUS server.')
mibBuilder.exportSymbols("CISCO-RADIUS-MIB", CiscoRadiusAuthKey=CiscoRadiusAuthKey, ciscoRadiusMIBNotifications=ciscoRadiusMIBNotifications, crRadiusAttributesConfig=crRadiusAttributesConfig, crRadiusFramedMtu=crRadiusFramedMtu, crRadiusServerRTTThldHi=crRadiusServerRTTThldHi, crRadiusServerIndex=crRadiusServerIndex, crmKeepAliveGroup=crmKeepAliveGroup, crRadiusServerAcctPort=crRadiusServerAcctPort, crRadiusAuthKey=crRadiusAuthKey, crRadiusVlanConfigGroup=crRadiusVlanConfigGroup, crVlanGroupRowStatus=crVlanGroupRowStatus, crRadiusServerKey=crRadiusServerKey, crRadiusServerRTTThldNorm=crRadiusServerRTTThldNorm, crRadiusServerRetransThldNorm=crRadiusServerRetransThldNorm, crmVlanConfigGroup=crmVlanConfigGroup, PYSNMP_MODULE_ID=ciscoRadiusMIB, crVlanGroupName=crVlanGroupName, crmAttributesGroup=crmAttributesGroup, crRadiusKeepAliveEnabled=crRadiusKeepAliveEnabled, ciscoRadiusMIBGroups=ciscoRadiusMIBGroups, crRadiusServerRetransHiNotif=crRadiusServerRetransHiNotif, crRadiusServerRTTNormNotif=crRadiusServerRTTNormNotif, crRadiusKeepAliveInterval=crRadiusKeepAliveInterval, crmRadiusServerNotifCntlGroup=crmRadiusServerNotifCntlGroup, crVlanGroupVlansHigh=crVlanGroupVlansHigh, crRadiusServerRetransNormNotifEnable=crRadiusServerRetransNormNotifEnable, ciscoRadiusMIBCompliance3=ciscoRadiusMIBCompliance3, ciscoRadiusMIBCompliance2=ciscoRadiusMIBCompliance2, crRadiusServerConfig=crRadiusServerConfig, crRadiusAccountingLogMaxSize=crRadiusAccountingLogMaxSize, crRadiusDeadtime=crRadiusDeadtime, crRadiusServerTable=crRadiusServerTable, ciscoRadiusMIBConformance=ciscoRadiusMIBConformance, crRadiusServerMode=crRadiusServerMode, crRadiusServerRTTNormNotifEnable=crRadiusServerRTTNormNotifEnable, ciscoRadiusMIB=ciscoRadiusMIB, crRadiusServerRetransNormNotif=crRadiusServerRetransNormNotif, CiscoRadiusRetransPercent=CiscoRadiusRetransPercent, crRadiusKeepAliveUserName=crRadiusKeepAliveUserName, crVlanGroupTable=crVlanGroupTable, crmConfigurationGroup=crmConfigurationGroup, crRadiusServerType=crRadiusServerType, crmConfigurationGroupSup1=crmConfigurationGroupSup1, crRadiusKeepAliveServerStatus=crRadiusKeepAliveServerStatus, crRadiusServerAddrType=crRadiusServerAddrType, crRadiusLoginAuthentication=crRadiusLoginAuthentication, crRadiusServerRetransHiNotifEnable=crRadiusServerRetransHiNotifEnable, crRadiusPortAutoInitialize=crRadiusPortAutoInitialize, crRadiusGenericConfig=crRadiusGenericConfig, crRadiusServerRTTHiNotif=crRadiusServerRTTHiNotif, crmAttributesGroup2=crmAttributesGroup2, crRadiusServerRTTHiNotifEnable=crRadiusServerRTTHiNotifEnable, crRadiusRetransmits=crRadiusRetransmits, crVlanGroupEntry=crVlanGroupEntry, CiscoRadiusRoundTripTimePercent=CiscoRadiusRoundTripTimePercent, crRadiusServerEntry=crRadiusServerEntry, crRadiusServerTableMaxEntries=crRadiusServerTableMaxEntries, crmRadiusServerNotifGroup=crmRadiusServerNotifGroup, ciscoRadiusMIBCompliances=ciscoRadiusMIBCompliances, ciscoRadiusMIBObjects=ciscoRadiusMIBObjects, crRadiusAccountingMethod=crRadiusAccountingMethod, ciscoRadiusMIBCompliance=ciscoRadiusMIBCompliance, crVlanGroupVlansLow=crVlanGroupVlansLow, crRadiusServerRowStatus=crRadiusServerRowStatus, crmRadiusKeepAliveUserGroup=crmRadiusKeepAliveUserGroup, crRadiusKeepAliveServerTable=crRadiusKeepAliveServerTable, crRadiusServerAddr=crRadiusServerAddr, crmAutoInitializeConfigGroup=crmAutoInitializeConfigGroup, crRadiusFramedIpAddrIncluded=crRadiusFramedIpAddrIncluded, crRadiusServerAuthPort=crRadiusServerAuthPort, crRadiusVlanAssignmentEnabled=crRadiusVlanAssignmentEnabled, crRadiusKeepAliveConfig=crRadiusKeepAliveConfig, crRadiusKeepAliveServerEntry=crRadiusKeepAliveServerEntry, crRadiusServerNotifCntl=crRadiusServerNotifCntl, crRadiusTimeout=crRadiusTimeout, ciscoRadiusMIBCompliance4=ciscoRadiusMIBCompliance4, crRadiusServerRetransThldHi=crRadiusServerRetransThldHi)
