#
# PySNMP MIB module CISCO-WWNMGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WWNMGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcNameId, = mibBuilder.importSymbols("CISCO-ST-TC", "FcNameId")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Unsigned32, ModuleIdentity, ObjectIdentity, Gauge32, TimeTicks, MibIdentifier, Bits, IpAddress, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Gauge32", "TimeTicks", "MibIdentifier", "Bits", "IpAddress", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64")
StorageType, DisplayString, RowStatus, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "RowStatus", "TextualConvention", "MacAddress")
ciscoWwnmgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 286))
ciscoWwnmgrMIB.setRevisions(('2006-02-06 00:00', '2002-10-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWwnmgrMIB.setRevisionsDescriptions(("Added a new table 'wwnmVsanWwnTable' to configure user specific WWN for VSANs.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWwnmgrMIB.setLastUpdated('200602060000Z')
if mibBuilder.loadTexts: ciscoWwnmgrMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoWwnmgrMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoWwnmgrMIB.setDescription('The World Wide Name (WWN) in the fibre channel networking technology is equivalent to the MAC address in Ethernet. There are six different types of WWNs defined in ANSI Standard for Fibre Channel Framing and Signalling (FC-FS) Spec Rev 1.4. This mib provides the mechanism to configure and report WWNs for the fibre channel devices connected to a fibre channel switch. GLOSSARY : NAA Network Address Authority (NAA) address formats for WWN. OUI Organization Unique Identifier. VSAN Virtual Storage Area Network, similar to a VLAN.')
ciscoWwnmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 1))
wwnmConfigurationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1))
wwnmNotificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 2))
wwnmNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 2, 1))
wwnmNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 2, 1, 0))
wwnmSecondaryBaseMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnmSecondaryBaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: wwnmSecondaryBaseMacAddress.setDescription('The first MAC address used for generating World Wide Names (WWNs) when the default range of WWNs generated from supervisor MAC address are exhausted.')
wwnmSecondaryMacAddressRange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwnmSecondaryMacAddressRange.setStatus('current')
if mibBuilder.loadTexts: wwnmSecondaryMacAddressRange.setDescription('The number of secondary MAC Addresses starting from and including the wwnmSecondayBaseMacAddress.')
wwnmType1MaxWwns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnmType1MaxWwns.setReference('FC-FS-2 Rev 1.70, Section 14 Name Identifier Formats.')
if mibBuilder.loadTexts: wwnmType1MaxWwns.setStatus('current')
if mibBuilder.loadTexts: wwnmType1MaxWwns.setDescription('Maximum number of NAA Type 1 WWNs that are available for assignment to internal entities.')
wwnmType1AvailableWwns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnmType1AvailableWwns.setReference('FC-FS-2 Rev 1.70, Section 14 Name Identifier Formats.')
if mibBuilder.loadTexts: wwnmType1AvailableWwns.setStatus('current')
if mibBuilder.loadTexts: wwnmType1AvailableWwns.setDescription('Number of NAA Type 1 WWNs that are currently available for assignment to internal entities.')
wwnmTypeOtherMaxWwns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnmTypeOtherMaxWwns.setReference('FC-FS-2 Rev 1.70, Section 14 Name Identifier Formats.')
if mibBuilder.loadTexts: wwnmTypeOtherMaxWwns.setStatus('current')
if mibBuilder.loadTexts: wwnmTypeOtherMaxWwns.setDescription('Maximum number of total WWNs of types NAA Type 2 and Type 5 WWNs available for assignment to internal entities.')
wwnmTypeOtherAvailableWwns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnmTypeOtherAvailableWwns.setReference('FC-FS-2 Rev 1.70, Section 14 Name Identifier Formats.')
if mibBuilder.loadTexts: wwnmTypeOtherAvailableWwns.setStatus('current')
if mibBuilder.loadTexts: wwnmTypeOtherAvailableWwns.setDescription('Sum of number of NAA Type 2 and Type 5 WWNs currently available for assignment to the internal entities.')
wwnmType1ReservedWwns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnmType1ReservedWwns.setReference('FC-FS-2 Rev 1.70, Section 14 Name Identifier Formats.')
if mibBuilder.loadTexts: wwnmType1ReservedWwns.setStatus('current')
if mibBuilder.loadTexts: wwnmType1ReservedWwns.setDescription('Number of NAA Type 1 WWNs that are reserved for internal purposes.')
wwnmTypeOtherReservedWwns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnmTypeOtherReservedWwns.setReference('FC-FS-2 Rev 1.70, Section 14 Name Identifier Formats.')
if mibBuilder.loadTexts: wwnmTypeOtherReservedWwns.setStatus('current')
if mibBuilder.loadTexts: wwnmTypeOtherReservedWwns.setDescription('Number of total WWNs of types NAA Type 2 and Type 5 WWNs reserved for internal purposes.')
wwnmVsanWwnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 9), )
if mibBuilder.loadTexts: wwnmVsanWwnTable.setReference('vsanTable, vsanAdminState, vsanInterOperValue in CISCO-VSAN-MIB')
if mibBuilder.loadTexts: wwnmVsanWwnTable.setStatus('current')
if mibBuilder.loadTexts: wwnmVsanWwnTable.setDescription("This table provides an option to configure user specified WWN for the VSANs. To enable the fibre channel switch to interoperate with other vendor switches on a VSAN, user needs to configure a WWN (based on the other vendor switch OUI) for the corresponding VSAN. To create a new entry in this table for a VSAN, a corresponding entry for that VSAN should exists in the vsanTable. Also, the value of the corresponding instance of vsanAdminState should be in 'suspended' state and the VSAN should interoperate in mode 4 (represented by vsanInterOperValue '4'). An entry from this table can be removed by any one of the following ways, a. Setting the corresponding instance wwnmVsanWwnRowStatus value to 'destroy'. b. Deleting the corresponding VSAN from vsanTable. c. Changing the corresponding VSAN configuration from interoperate mode 4 (represented by vsanInterOperValue '4') to any other value.")
wwnmVsanWwnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: wwnmVsanWwnEntry.setStatus('current')
if mibBuilder.loadTexts: wwnmVsanWwnEntry.setDescription('An entry (conceptual row) in this table. Each entry of this table represents the WWN configuration set for a VSAN.')
wwnmVsanWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 9, 1, 1), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwnmVsanWwn.setStatus('current')
if mibBuilder.loadTexts: wwnmVsanWwn.setDescription('The user configurable WWN for a VSAN. For row creation, it is mandatory to set the value of this object to a valid value.')
wwnmVsanWwnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 9, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwnmVsanWwnStorageType.setStatus('current')
if mibBuilder.loadTexts: wwnmVsanWwnStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
wwnmVsanWwnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 1, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwnmVsanWwnRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwnmVsanWwnRowStatus.setDescription("The status of this conceptual row. The value of this object cannot be 'active' unless the value of the corresponding instance of 'wwnmVsanWwn' is set to a valid value.")
wwnmType1WwnShortageNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 2, 1, 0, 1)).setObjects(("CISCO-WWNMGR-MIB", "wwnmType1AvailableWwns"))
if mibBuilder.loadTexts: wwnmType1WwnShortageNotify.setStatus('current')
if mibBuilder.loadTexts: wwnmType1WwnShortageNotify.setDescription("A WWN shortage notification is generated whenever the number of available Type 1 WWNs 'wwnmType1AvailableWwns' reduces to either 20% or 10% or 0% of the maximum number of Type 1 WWNs 'wwnmType1MaxWwns'. After a shortage event is generated for a threshhold (say 20%), another such event will not be generated until after an availability event (see wwnmType1WwnAvailableNotify) is generated for the same threshold.")
wwnmType1WwnAvailableNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 2, 1, 0, 2)).setObjects(("CISCO-WWNMGR-MIB", "wwnmType1AvailableWwns"))
if mibBuilder.loadTexts: wwnmType1WwnAvailableNotify.setStatus('current')
if mibBuilder.loadTexts: wwnmType1WwnAvailableNotify.setDescription('An availability notification is generated whenever the number of available Type 1 WWNs (wwnmType1AvailableWwns) increases to either 25% or 15% or 5% of the maximum number of Type 1 WWNs (wwnmType1MaxWwns) after a wwnmType1WwnShortageNotify notification has been generated for either 20% or 10% or 5% respectively.')
wwnmTypeOtherWwnShortageNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 2, 1, 0, 3)).setObjects(("CISCO-WWNMGR-MIB", "wwnmTypeOtherAvailableWwns"))
if mibBuilder.loadTexts: wwnmTypeOtherWwnShortageNotify.setStatus('current')
if mibBuilder.loadTexts: wwnmTypeOtherWwnShortageNotify.setDescription("A WWN shortage notification is generated whenever the number of available Type Other WWNs 'wwnmTypeOtherAvailableWwns' reduces to either 20% or 10% or 0% of the maximum number of Type Other WWNs 'wwnmTypeOtherMaxWwns'. After a shortage event is generated for a threshhold (say 20%), another such event will not be generated until after an availability event (see wwnmType1WwnAvailableNotify) is generated for the same threshold.")
wwnmTypeOtherWwnAvailableNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 286, 1, 2, 1, 0, 4)).setObjects(("CISCO-WWNMGR-MIB", "wwnmTypeOtherAvailableWwns"))
if mibBuilder.loadTexts: wwnmTypeOtherWwnAvailableNotify.setStatus('current')
if mibBuilder.loadTexts: wwnmTypeOtherWwnAvailableNotify.setDescription('An availability notification is generated whenever the number of available Type Other WWNs (wwnmTypeOtherAvailableWwns) increases to either 25% or 15% or 5% of the maximum number of Type Other WWNs (wwnmTypeOtherMaxWwns) after a wwnmTypeOtherWwnShortageNotify notification has been generated for either 20% or 10% or 5% respectively.')
ciscoWwnmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 2))
ciscoWwnmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 2, 1))
ciscoWwnmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 286, 2, 2))
ciscoWwnmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 286, 2, 1, 1)).setObjects(("CISCO-WWNMGR-MIB", "cwmWwnmConfigurationGroup"), ("CISCO-WWNMGR-MIB", "cwmWwnmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWwnmMIBCompliance = ciscoWwnmMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWwnmMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-WWNMGR-MIB.')
ciscoWwnmMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 286, 2, 1, 2)).setObjects(("CISCO-WWNMGR-MIB", "cwmWwnmConfigurationGroup"), ("CISCO-WWNMGR-MIB", "cwmWwnmVsanWwnGroup"), ("CISCO-WWNMGR-MIB", "cwmWwnmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWwnmMIBCompliance1 = ciscoWwnmMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: ciscoWwnmMIBCompliance1.setDescription('The compliance statement for entities which implement the CISCO-WWNMGR-MIB.')
cwmWwnmConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 286, 2, 2, 6)).setObjects(("CISCO-WWNMGR-MIB", "wwnmSecondaryBaseMacAddress"), ("CISCO-WWNMGR-MIB", "wwnmSecondaryMacAddressRange"), ("CISCO-WWNMGR-MIB", "wwnmType1MaxWwns"), ("CISCO-WWNMGR-MIB", "wwnmType1AvailableWwns"), ("CISCO-WWNMGR-MIB", "wwnmTypeOtherMaxWwns"), ("CISCO-WWNMGR-MIB", "wwnmTypeOtherAvailableWwns"), ("CISCO-WWNMGR-MIB", "wwnmType1ReservedWwns"), ("CISCO-WWNMGR-MIB", "wwnmTypeOtherReservedWwns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwmWwnmConfigurationGroup = cwmWwnmConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: cwmWwnmConfigurationGroup.setDescription('A collection of objects for WWN Manager.')
cwmWwnmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 286, 2, 2, 8)).setObjects(("CISCO-WWNMGR-MIB", "wwnmType1WwnShortageNotify"), ("CISCO-WWNMGR-MIB", "wwnmType1WwnAvailableNotify"), ("CISCO-WWNMGR-MIB", "wwnmTypeOtherWwnShortageNotify"), ("CISCO-WWNMGR-MIB", "wwnmTypeOtherWwnAvailableNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwmWwnmNotificationGroup = cwmWwnmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cwmWwnmNotificationGroup.setDescription('A collection of notifications for the WWN assignment.')
cwmWwnmVsanWwnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 286, 2, 2, 9)).setObjects(("CISCO-WWNMGR-MIB", "wwnmVsanWwn"), ("CISCO-WWNMGR-MIB", "wwnmVsanWwnStorageType"), ("CISCO-WWNMGR-MIB", "wwnmVsanWwnRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwmWwnmVsanWwnGroup = cwmWwnmVsanWwnGroup.setStatus('current')
if mibBuilder.loadTexts: cwmWwnmVsanWwnGroup.setDescription('A collection of objects to represent the configured WWN for the VSANs.')
mibBuilder.exportSymbols("CISCO-WWNMGR-MIB", ciscoWwnmMIBGroups=ciscoWwnmMIBGroups, wwnmType1AvailableWwns=wwnmType1AvailableWwns, wwnmNotificationGroup=wwnmNotificationGroup, wwnmVsanWwn=wwnmVsanWwn, ciscoWwnmgrMIB=ciscoWwnmgrMIB, wwnmNotificationPrefix=wwnmNotificationPrefix, cwmWwnmNotificationGroup=cwmWwnmNotificationGroup, ciscoWwnmMIBObjects=ciscoWwnmMIBObjects, ciscoWwnmMIBCompliances=ciscoWwnmMIBCompliances, wwnmSecondaryBaseMacAddress=wwnmSecondaryBaseMacAddress, wwnmNotification=wwnmNotification, cwmWwnmConfigurationGroup=cwmWwnmConfigurationGroup, wwnmVsanWwnStorageType=wwnmVsanWwnStorageType, wwnmTypeOtherMaxWwns=wwnmTypeOtherMaxWwns, wwnmVsanWwnRowStatus=wwnmVsanWwnRowStatus, wwnmType1WwnAvailableNotify=wwnmType1WwnAvailableNotify, wwnmTypeOtherWwnShortageNotify=wwnmTypeOtherWwnShortageNotify, wwnmVsanWwnEntry=wwnmVsanWwnEntry, wwnmType1WwnShortageNotify=wwnmType1WwnShortageNotify, ciscoWwnmMIBCompliance=ciscoWwnmMIBCompliance, ciscoWwnmMIBConformance=ciscoWwnmMIBConformance, wwnmSecondaryMacAddressRange=wwnmSecondaryMacAddressRange, wwnmTypeOtherWwnAvailableNotify=wwnmTypeOtherWwnAvailableNotify, wwnmConfigurationGroup=wwnmConfigurationGroup, cwmWwnmVsanWwnGroup=cwmWwnmVsanWwnGroup, wwnmVsanWwnTable=wwnmVsanWwnTable, wwnmTypeOtherReservedWwns=wwnmTypeOtherReservedWwns, wwnmType1MaxWwns=wwnmType1MaxWwns, PYSNMP_MODULE_ID=ciscoWwnmgrMIB, ciscoWwnmMIBCompliance1=ciscoWwnmMIBCompliance1, wwnmType1ReservedWwns=wwnmType1ReservedWwns, wwnmTypeOtherAvailableWwns=wwnmTypeOtherAvailableWwns)
