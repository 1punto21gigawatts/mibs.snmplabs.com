#
# PySNMP MIB module HH3C-FC-ZONE-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-FC-ZONE-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
Hh3cFcNameId, = mibBuilder.importSymbols("HH3C-FC-TC-MIB", "Hh3cFcNameId")
hh3cSan, hh3cVsanIndex = mibBuilder.importSymbols("HH3C-VSAN-MIB", "hh3cSan", "hh3cVsanIndex")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, ModuleIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, NotificationType, Unsigned32, Counter64, Counter32, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "ModuleIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "NotificationType", "Unsigned32", "Counter64", "Counter32", "ObjectIdentity", "Integer32")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
t11ZsActiveZoneIndex, t11ZsActiveZoneMemberIndex = mibBuilder.importSymbols("T11-FC-ZONE-SERVER-MIB", "t11ZsActiveZoneIndex", "t11ZsActiveZoneMemberIndex")
hh3cFcZoneServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9))
hh3cFcZoneServer.setRevisions(('2013-12-25 15:07',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cFcZoneServer.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cFcZoneServer.setLastUpdated('201312251507Z')
if mibBuilder.loadTexts: hh3cFcZoneServer.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cFcZoneServer.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cFcZoneServer.setDescription('This MIB module is intended for management of FC(Fibre Channel) Zoning entities, including Basic Zoning Management and Enhanced Zoning Management.')
class Hh3cFcZsGenName(TextualConvention, OctetString):
    description = 'Represents the general names for a Zone Set, Zone or Zone alias object. Each octet in this string is an ASCII code for an English letter, digit, or special character such as the dollar sign ($), minus sign (-), caret (^), or underscores (_). This string must contain at least one character and must start with an English letter.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class Hh3cFcZsGenNameOrZero(TextualConvention, OctetString):
    description = 'Represents the general names for a Zone Set, Zone or Zone alias object. Each octet in this string is an ASCII code for an English letter, digit, or special character such as the dollar sign ($), minus sign (-), caret (^), or underscores (_). This string must start with an English letter.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class Hh3cFcZsZoneMemberType(TextualConvention, Integer32):
    description = "Represents the addressing mechanism by which a member is identified: 'fcid' - FC ID of N_Port. 'fwwn' - WWN(World Wide Name) of F_Port. 'pwwn' - WWN(World Wide Name) of N_Port. 'aliasName' - Zone alias name. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fcid", 1), ("fwwn", 2), ("pwwn", 3), ("aliasName", 4))

hh3cFcZoneMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1))
hh3cFcZsConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1))
hh3cFcZsServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cFcZsServerTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsServerTable.setDescription('A table that contains information about the Zone Servers in each VSAN and provides the capability to perform operations on their Zone Server databases.')
hh3cFcZsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cFcZsServerEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsServerEntry.setDescription('Each entry contains information specific to a Zone Server for a particular VSAN.')
hh3cFcZsZoneModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("enhanced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsZoneModeCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneModeCfg.setDescription("The operational mode of the Zone Server. Setting this object to 'enhanced' is a request to set the operational mode of the Zone Server to Enhanced mode. This is possible only if all switches in the Fibre Channel Fabric are capable of working in Enhanced mode. Setting this object to 'basic' is a request to set the operational mode of the Zone Server to Basic mode.")
hh3cFcZsHardZoneEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsHardZoneEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsHardZoneEnable.setDescription('This object indicates whether this switch, no matter in Basic or Enhanced mode, enforces Hard Zoning in this VSAN.')
hh3cFcZsDistributeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("activeOnly", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsDistributeRule.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDistributeRule.setDescription("This object specifies whether a complete distribution (or merge) will be applied when an activation(or merge) happened in Basic mode. If this object is set to 'full', both the Active Zone Set and Zone Set Database will be distributed (or merged) when an activation operation(or merge) is performed. If this object is set to 'activeOnly', only the Active Zone Set will be distributed(or merged) when an activation operation(or merge) is performed. The value 'none' is meaningless and can be used only in Enhanced mode.")
hh3cFcZsDefaultZoneSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsDefaultZoneSetting.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDefaultZoneSetting.setDescription("This object controls the Zoning flag that governs the behavior of the Default Zone in this VSAN. If this object is set to 'permit', the members of the Default Zone in this VSAN can communicate with each other. If this object is set to 'deny', the members of the Default Zone in this VSAN cannot communicate with each other.")
hh3cFcZsMergeControlSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("allow", 2), ("restrict", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsMergeControlSetting.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsMergeControlSetting.setDescription("This object controls the Enhanced Zoning flag that indicates the Merge Control Setting for this VSAN. It is meaningful only in Enhanced mode: 'none' - This value is meaningless and only can be used in Basic mode. 'allow' - A switch may join the Fabric only if its Zoning Database is able to merge with the Fabric's Zoning Database. 'restrict' - A switch may join the Fabric only if its Zoning Database is equal to the Fabric's Zoning Database.")
hh3cFcZsServerLastResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("busy", 3), ("noSupportInFabric", 4), ("noSupportInBasic", 5), ("noSupportInEnhanced", 6), ("activeZoneSetTooBig", 7), ("otherFault", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsServerLastResult.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsServerLastResult.setDescription("Current operational status of the latest configuration in this VSAN: 'none' - No corresponding operation has been performed yet. 'success' - The configuration was performed successfully. 'busy' - The configuration was performed unsuccessfully, because the system is busy with another zoning operation. 'noSupportInFabric' - The configuration was performed unsuccessfully, because one or more switches in this Fabric don't support Enhanced zoning. 'noSupportInBasic' - The configuration was performed unsuccessfully, because it is not supported in Basic mode. 'noSupportInEnhanced' - The configuration was performed unsuccessfully, because it is not supported in Enhanced mode. 'activeZoneSetTooBig' - The configuration was performed unsuccessfully, because the Active Zone Set is too large to be supported. 'otherFault' - The configuration was performed unsuccessfully for other reasons.")
hh3cFcZsZonesetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cFcZsZonesetTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonesetTable.setDescription('A table that contains information about each Zone Set in the Zone Set Database of the Zone Servers in a specified VSAN.')
hh3cFcZsZonesetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 2, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZonesetIndex"))
if mibBuilder.loadTexts: hh3cFcZsZonesetEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonesetEntry.setDescription('Each entry contains the information of a Zone Set configured in a specified VSAN.')
hh3cFcZsZonesetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cFcZsZonesetIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonesetIndex.setDescription('The index of a Zone Set, which uniquely identifies a Zone Set in the Zone Set Database on local switch.')
hh3cFcZsZonesetName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 2, 1, 2), Hh3cFcZsGenName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZonesetName.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonesetName.setDescription('The name of this Zone Set, which should be unique within a VSAN. The Zone Set can be renamed by setting this object to a new value.')
hh3cFcZsZonesetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZonesetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonesetRowStatus.setDescription('The status of this conceptual row.')
hh3cFcZsZoneTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 3), )
if mibBuilder.loadTexts: hh3cFcZsZoneTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneTable.setDescription('This table contains information about all the Zones in the Zone Set Database of the Zone Servers in each VSAN.')
hh3cFcZsZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 3, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneIndex"))
if mibBuilder.loadTexts: hh3cFcZsZoneEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneEntry.setDescription('Each entry contains information about a Zone in the Zone Set Database in a specified VSAN.')
hh3cFcZsZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cFcZsZoneIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneIndex.setDescription('An index value that uniquely identifies this Zone in the Zone Set Database on local switch.')
hh3cFcZsZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 3, 1, 2), Hh3cFcZsGenName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneName.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneName.setDescription('The name of this Zone, which should be unique within a VSAN. The Zone can be renamed by setting this object to a new value.')
hh3cFcZsZonePairwiseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZonePairwiseEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonePairwiseEnable.setDescription("This object specifies whether Pairwise Zoning is enabled in this Zone. When Pairwise Zoning is enabled in a Zone, the behaviors of members in this Zone will be controlled through their roles. The members with the same role ('initiator' or 'target') can't communicate with each other, but those with different roles or with the same role 'both' can communicate with each other. When Pairwise Zoning is disabled in a Zone, the behaviors of members in this Zone will not be affected by their roles.")
hh3cFcZsZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneRowStatus.setDescription('The status of this conceptual row.')
hh3cFcZsSetZoneTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 4), )
if mibBuilder.loadTexts: hh3cFcZsSetZoneTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsSetZoneTable.setDescription('This table specifies which Zone belongs to which Zone Set in the Zone Set Database of the Zone Servers.')
hh3cFcZsSetZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 4, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZonesetIndex"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneIndex"))
if mibBuilder.loadTexts: hh3cFcZsSetZoneEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsSetZoneEntry.setDescription("Each entry specifies that a particular Zone is one of the Zones that form a particular Zone Set in the Zone Set database of a specified VSAN. When a row in this table exists, it references one row in the hh3cFcZsZonesetTable and one row in the hh3cFcZsZoneTable. The agent must ensure that both such rows when referenced by an active row in this table, do exist and have a status of 'active'.")
hh3cFcZsSetZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsSetZoneRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsSetZoneRowStatus.setDescription('The status of this conceptual row.')
hh3cFcZsZoneAliasTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 5), )
if mibBuilder.loadTexts: hh3cFcZsZoneAliasTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneAliasTable.setDescription('This table contains information about the Zone aliases in the Zone Set Database of the Zone Server in each VSAN.')
hh3cFcZsZoneAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 5, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneAliasIndex"))
if mibBuilder.loadTexts: hh3cFcZsZoneAliasEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneAliasEntry.setDescription('Each entry contains information about a Zone alias in the Zone Set Database of a particular VSAN.')
hh3cFcZsZoneAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cFcZsZoneAliasIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneAliasIndex.setDescription('An index value that uniquely identifies this Zone alias within the Zone Set Database.')
hh3cFcZsZoneAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 5, 1, 2), Hh3cFcZsGenName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneAliasName.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneAliasName.setDescription('The name of this Zone alias, which should be unique within a VSAN. The Zone alias can be renamed by setting this object to a new value.')
hh3cFcZsZoneAliasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneAliasRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneAliasRowStatus.setDescription('The status of this conceptual row.')
hh3cFcZsZoneMemberTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6), )
if mibBuilder.loadTexts: hh3cFcZsZoneMemberTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberTable.setDescription('This table contains all members of a Zone/Zone alias and information about those members in the Zone Set Database of the Zone Server in each VSAN.')
hh3cFcZsZoneMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneMemberParentType"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneMemberParentIndex"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneMemberIndex"))
if mibBuilder.loadTexts: hh3cFcZsZoneMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberEntry.setDescription("Each entry represents the relationship between a member and (one of) its 'parent(s)', i.e., a Zone or Zone alias the member belongs, within a particular VSAN.")
hh3cFcZsZoneMemberParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("zone", 1), ("alias", 2))))
if mibBuilder.loadTexts: hh3cFcZsZoneMemberParentType.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberParentType.setDescription('This object determines whether this member belongs to a Zone or Zone alias.')
hh3cFcZsZoneMemberParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cFcZsZoneMemberParentIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberParentIndex.setDescription("This object contains the index value of the Zone or Zone alias to which this member belongs. If the value of the corresponding instance of hh3cFcZsZoneMemberParentType is 'zone', this object will contain the value of the hh3cFcZsZoneIndex object of the Zone to which this member belongs. If the value of the corresponding instance of hh3cFcZsZoneMemberParentType is 'alias', this object will contain the value of the hh3cFcZsAliasIndex object of the Zone alias to which this member belongs.")
hh3cFcZsZoneMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cFcZsZoneMemberIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberIndex.setDescription('An index value that uniquely identifies this Zone member among all Zone members in the Zone or Zone alias they belongs to.')
hh3cFcZsZoneMemberFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1, 4), Hh3cFcZsZoneMemberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneMemberFormat.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberFormat.setDescription("This object identifies the format of the Zone/Zone alias member's identifier that is contained in hh3cFcZsZoneMemberIdentifier. This object cannot be modified while the value of the hh3cFcZsZoneMemberRowStatus object is 'active'.")
hh3cFcZsZoneMemberIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneMemberIdentifier.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberIdentifier.setDescription("This object contains the Member Identifier of the Zone or Zone alias. The interpretation of this object depends on the value of the corresponding instance of hh3cFcZsZoneMemberFormat: - if hh3cFcZsZoneMemberFormat is 'fcid', this object contains the 3-octet N_Port FC ID. - if hh3cFcZsZoneMemberFormat is 'fwwn', this object contains an 8-octet F_Port WWN. - if hh3cFcZsZoneMemberFormat is 'pwwn', this object contains an 8-octet N_Port WWN. - if hh3cFcZsZoneMemberFormat is 'aliasName', this object contains the value of hh3cFcZsZoneAliasName for some Zone alias in the same Zone Set Database. This object cannot be modified while the value of the hh3cFcZsZoneMemberRowStatus object is 'active'.")
hh3cFcZsZoneMemberPairwiseRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("both", 2), ("initiator", 3), ("target", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneMemberPairwiseRole.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberPairwiseRole.setDescription("This object identifies the Pairwise role of the Zone/Zone alias member. If hh3cFcZsZoneMemberFormat is 'aliasName', the value of this object can only be 'none'. If hh3cFcZsZoneMemberFormat is not 'aliasName', the value of this object can't be 'none', and the default value is 'both' (including both 'initiator' and 'target' role). This object can be modified while the value of the hh3cFcZsZoneMemberRowStatus object is 'active'. The Pairwise role of a port member takes effect only when the hh3cFcZsZonePairwiseEnable of the Zone to which the port member belongs is set to 'true'.")
hh3cFcZsZoneMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcZsZoneMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberRowStatus.setDescription('The status of this conceptual row.')
hh3cFcZsOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2))
hh3cFcZsActivateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cFcZsActivateTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActivateTable.setDescription('This table provides a mechanism to allow a Zone Set to be activated.')
hh3cFcZsActivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 1, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cFcZsActivateEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActivateEntry.setDescription('An entry contains information of the activation about a Zone Set.')
hh3cFcZsActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 1, 1, 1), Hh3cFcZsGenNameOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsActivate.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActivate.setDescription('Name of the Zone Set that needs to be activated. The value of this object when read is always zero-length.')
hh3cFcZsDeactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOper", 1), ("deactivate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsDeactivate.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDeactivate.setDescription("A request to deactivate the currently active Zone Set. The value of this object when read is always 'noOper'. 'noOper' - Specifies no operation. 'deactivate' - Specifies the deactivate operation.")
hh3cFcZsActivateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("activateSuccess", 3), ("activateFailure", 4), ("deactivateSuccess", 5), ("deactivateFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsActivateResult.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActivateResult.setDescription("As a result of the most recent activation/deactivation. 'none' - No activation/deactivation invoked since the last restart of the management system. 'inProcess' - Activation/deactivation is still in progress. 'activateSuccess' - Activation completed successfully. 'activateFailure' - Activation failed due to some reason. 'deactivateSuccess' - Deactivation completed successfully. 'deactivateFailure' - Deactivation failed due to some reason.")
hh3cFcZsActivateFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("busy", 2), ("activeZoneSetTooBig", 3), ("noZoneSet", 4), ("noMember", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsActivateFailReason.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActivateFailReason.setDescription("The reason for the most recent failure of a Zone Set activation or deactivation. 'none' - No activation/deactivation invoked or the result of activation/deactivation is success. 'busy' - The management system is busy in some other process. 'activeZoneSetTooBig' - The Active Zone Set size in packet reached the maximum limit in Basic mode. 'noZoneSet' - No specified Zone Set found. 'noMember' - No port member found in the specified Zone Set.")
hh3cFcZsDistributeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cFcZsDistributeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDistributeTable.setDescription('This table provides an operational object to trigger a distribution for each existing VSAN.')
hh3cFcZsDistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cFcZsDistributeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDistributeEntry.setDescription('This entry provides an operational object to trigger a distribution for a specified VSAN.')
hh3cFcZsDistribute = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOper", 1), ("distribute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsDistribute.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDistribute.setDescription("Specifies the operation of triggering a distribution in this VSAN. 'noOper' - Specifies no operation. 'distribute' - Specifies the distribute operation.")
hh3cFcZsDistributeLastResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("rejectFailure", 4), ("otherFault", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsDistributeLastResult.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDistributeLastResult.setDescription("Specifies the result of triggering a distribution for VSAN. 'none' - No distribution invoked via the corresponding instance of distribution. 'success' - Distribution completed successfully. 'inProgress' - Distribution is still in progress. 'rejectFailure' - Distribution failed due to an SW_RJT. 'otherFault' - Distribution/commit failed for some other reason.")
hh3cFcZsDistributeReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsDistributeReasonCode.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDistributeReasonCode.setDescription("The reason code in the SW_RJT packet received in the most recent distribution. This object is meaningful only when the value of hh3cFcZsDistributeLastResult is 'rejectFailure'.")
hh3cFcZsDistributeExplainCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsDistributeExplainCode.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDistributeExplainCode.setDescription("This object contains the corresponding reason code explanation for hh3cFcZsDistributeReasonCode, and is meaningful only when the value of hh3cFcZsDistributeLastResult is 'rejectFailure'.")
hh3cFcZsClearDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cFcZsClearDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsClearDatabaseTable.setDescription('This table provides an operational object to clear the local Zone Set Database for each existing VSAN.')
hh3cFcZsClearDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 3, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cFcZsClearDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsClearDatabaseEntry.setDescription('An entry provides an operational object to clear the local Zone Set Database for a specified VSAN.')
hh3cFcZsClearDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOper", 1), ("clearDb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsClearDatabase.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsClearDatabase.setDescription("Specify the operation of clearing local Zone Set Database in this VSAN. 'noOper' - Specifies no operation. 'clearDb' - Specifies clear operation.")
hh3cFcZsClearPktStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 4), )
if mibBuilder.loadTexts: hh3cFcZsClearPktStatsTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsClearPktStatsTable.setDescription('This table provides an operational object to clear the statistics on packets for each existing VSAN.')
hh3cFcZsClearPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 4, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cFcZsClearPktStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsClearPktStatsEntry.setDescription('An entry provides an operational object to clear the statistics on packets for a specified VSAN.')
hh3cFcZsClearPktStats = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOper", 1), ("clearStats", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsClearPktStats.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsClearPktStats.setDescription("Specify the operation of clearing the statistics on packets in this VSAN. 'noOper' - Specifies no operation. 'clearStats' - Specifies the clear operation.")
hh3cFcZsClearAllPktStats = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOper", 1), ("clearStats", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsClearAllPktStats.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsClearAllPktStats.setDescription("An operational object to clear the statistics on packets for all existing VSANs. 'noOper' - Specifies no operation. 'clearStats' - Specifies the clear operation.")
hh3cFcZsInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3))
hh3cFcZsActiveZoneTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cFcZsActiveZoneTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActiveZoneTable.setDescription('This table contains information about Active Zone in each existing VSAN.')
hh3cFcZsActiveZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 1, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "T11-FC-ZONE-SERVER-MIB", "t11ZsActiveZoneIndex"))
if mibBuilder.loadTexts: hh3cFcZsActiveZoneEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActiveZoneEntry.setDescription('An entry contains information about Active Zone in a specified VSAN.')
hh3cFcZsActiveZonePairwiseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsActiveZonePairwiseEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActiveZonePairwiseEnable.setDescription('Indicates whether Pairwise Zoning of an Active Zone is enabled.')
hh3cFcZsActiveMemberTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 2), )
if mibBuilder.loadTexts: hh3cFcZsActiveMemberTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActiveMemberTable.setDescription('This table contains information about Active Zone members in each existing VSAN.')
hh3cFcZsActiveMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 2, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "T11-FC-ZONE-SERVER-MIB", "t11ZsActiveZoneIndex"), (0, "T11-FC-ZONE-SERVER-MIB", "t11ZsActiveZoneMemberIndex"))
if mibBuilder.loadTexts: hh3cFcZsActiveMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActiveMemberEntry.setDescription('An entry contains information about Active Zone members in a specified VSAN.')
hh3cFcZsActiveMemberPairwiseRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("initiator", 2), ("target", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsActiveMemberPairwiseRole.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActiveMemberPairwiseRole.setDescription('Indicates which role the Active Zone member is playing.')
hh3cFcZsServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 3), )
if mibBuilder.loadTexts: hh3cFcZsServerStatusTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsServerStatusTable.setDescription('This table contains the configuration and running state of each existing VSAN.')
hh3cFcZsServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 3, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cFcZsServerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsServerStatusEntry.setDescription('An entry contains the configuration and running state of a specified VSAN.')
hh3cFcZsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("free", 1), ("distribute", 2), ("merge", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsServerStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsServerStatus.setDescription("The current status of Zone Server. 'free' - The Zone Server is now free. 'distribute' - The Zone Server is now busy distributing. 'merge' - The Zone Server is now busy merging.")
hh3cFcZsHardZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("adminDisable", 2), ("noResourceDisable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsHardZoneStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsHardZoneStatus.setDescription("The current status of Hard Zone Server. 'enable' - Hard Zone Server is enabled. 'adminDisable' - Hard Zone Server is disabled administratively. 'noResourceDisable' - Hard Zone Server is disabled due to lack of hardware resource.")
hh3cFcZsAliasCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsAliasCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsAliasCount.setDescription('Number of Zone aliases that exist in the specified VSAN.')
hh3cFcZsZoneCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsZoneCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneCount.setDescription('Number of Zones that exist in the specified VSAN.')
hh3cFcZsZonesetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsZonesetCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonesetCount.setDescription('Number of Zone Sets that exist in the specified VSAN.')
hh3cFcZsPktStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4), )
if mibBuilder.loadTexts: hh3cFcZsPktStatsTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktStatsTable.setDescription('Packet statistic table of Zone Servers.')
hh3cFcZsPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cFcZsPktStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktStatsEntry.setDescription('An entry contains the statistics on packets of Zone Servers.')
hh3cFcZsPktInMergeReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktInMergeReqCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktInMergeReqCount.setDescription('Number of Merge Request Frames received by local Zone Server from other Zone Servers.')
hh3cFcZsPktOutMergeReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktOutMergeReqCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktOutMergeReqCount.setDescription('Number of Merge Request Frames sent by local Zone Server to other Zone Servers.')
hh3cFcZsPktInMergeAccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktInMergeAccCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktInMergeAccCount.setDescription('Number of Merge Accept Frames received by local Zone Server from other Zone Servers.')
hh3cFcZsPktOutMergeAccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktOutMergeAccCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktOutMergeAccCount.setDescription('Number of Merge Accept Frames sent by local Zone Server to other Zone Servers.')
hh3cFcZsPktInMergeRjtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktInMergeRjtCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktInMergeRjtCount.setDescription('Number of Merge Reject Frames received by local Zone Server from other Zone Servers.')
hh3cFcZsPktOutMergeRjtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktOutMergeRjtCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktOutMergeRjtCount.setDescription('Number of Merge Reject Frames sent by local Zone Server to other Zone Servers.')
hh3cFcZsPktInChangeReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktInChangeReqCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktInChangeReqCount.setDescription('Number of change requests received by local Zone Server from other Zone Servers.')
hh3cFcZsPktOutChangeReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktOutChangeReqCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktOutChangeReqCount.setDescription('Number of change requests sent by local Zone Server to other Zone Servers.')
hh3cFcZsPktInChangeAccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktInChangeAccCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktInChangeAccCount.setDescription('Number of Accept messages received from other Zone Servers in response to change request sent by local Zone Server.')
hh3cFcZsPktOutChangeAccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktOutChangeAccCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktOutChangeAccCount.setDescription('Number of Accept messages sent to other Zone Servers in response to change request received by local Zone Server.')
hh3cFcZsPktInChangeRjtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktInChangeRjtCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktInChangeRjtCount.setDescription('Number of Reject messages received from other Zone Servers in response to change request sent by local Zone Server.')
hh3cFcZsPktOutChangeRjtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsPktOutChangeRjtCount.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPktOutChangeRjtCount.setDescription('Number of Reject messages sent to other Zone Servers in response to change request received by local Zone Server.')
hh3cFcZsNextFreeIndexInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 5))
hh3cFcZsZonesetNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsZonesetNextFreeIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZonesetNextFreeIndex.setDescription('Specifies the latest available index of hh3cFcZsZonesetIndex that can be used to identify a new Zone Set.')
hh3cFcZsZoneNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsZoneNextFreeIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneNextFreeIndex.setDescription('Specifies the latest available index of hh3cFcZsZoneIndex that can be used to identify a new Zone.')
hh3cFcZsZoneAliasNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsZoneAliasNextFreeIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneAliasNextFreeIndex.setDescription('Specifies the latest available index of hh3cFcZsZoneAliasIndex that can be used to identify a new Zone alias.')
hh3cFcZsZoneMemberNextFreeIndexTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 5, 4), )
if mibBuilder.loadTexts: hh3cFcZsZoneMemberNextFreeIndexTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberNextFreeIndexTable.setDescription('This table contains the information of the latest available index that can be used to identify a new member in each Zone or Zone alias.')
hh3cFcZsZoneMemberNextFreeIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 5, 4, 1), ).setIndexNames((0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneMemberParentType"), (0, "HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsZoneMemberParentIndex"))
if mibBuilder.loadTexts: hh3cFcZsZoneMemberNextFreeIndexEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberNextFreeIndexEntry.setDescription('An entry contains the information of the latest available index that can be used to identify a new member in a Zone or Zone alias.')
hh3cFcZsZoneMemberNextFreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 3, 5, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcZsZoneMemberNextFreeIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsZoneMemberNextFreeIndex.setDescription('Specifies the latest available index of hh3cFcZsZoneMemberIndex that can be used to identify a new member in a Zone or Zone alias.')
hh3cFcZsNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4))
hh3cFcZsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 0))
hh3cFcZsDefaultZoneChangedNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 0, 1)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsLocalSwitchWWN"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsDefaultZoneSetting"))
if mibBuilder.loadTexts: hh3cFcZsDefaultZoneChangedNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDefaultZoneChangedNotify.setDescription('A hh3cFcZsDefaultZoneChangedNotify notification is sent when the Default Zone setting of a specified VSAN is changed.')
hh3cFcZsHardZoneChangedNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 0, 2)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsLocalSwitchWWN"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsHardZoneStatus"))
if mibBuilder.loadTexts: hh3cFcZsHardZoneChangedNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsHardZoneChangedNotify.setDescription('A hh3cFcZsHardZoneChangedNotify notification is sent when the hard Zone configuration of a specified VSAN is changed.')
hh3cFcZsMergeFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsLocalSwitchWWN"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsPeerSwitchWWN"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsMergeFailCause"))
if mibBuilder.loadTexts: hh3cFcZsMergeFailedNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsMergeFailedNotify.setDescription('A hh3cFcZsMergeFailedNotify notification is sent when a Zone merge failure occurs.')
hh3cFcZsMergeSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsLocalSwitchWWN"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsPeerSwitchWWN"))
if mibBuilder.loadTexts: hh3cFcZsMergeSucceededNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsMergeSucceededNotify.setDescription('A hh3cFcZsMergeSucceededNotify notification is sent when a successful Zone merge occurs.')
hh3cFcZsActivationCompletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 0, 5)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsLocalSwitchWWN"), ("HH3C-FC-ZONE-SERVER-MIB", "hh3cFcZsActivateResult"))
if mibBuilder.loadTexts: hh3cFcZsActivationCompletedNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActivationCompletedNotify.setDescription('A hh3cFcZsActivationCompletedNotify notification is sent whenever a activation/deactivation is completed.')
hh3cFcZsNotificationSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 1))
hh3cFcZsDefaultZoneChangedEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsDefaultZoneChangedEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsDefaultZoneChangedEnable.setDescription('Indicates whether the module will generate traps for Default Zone setting change events.')
hh3cFcZsHardZoneChangedEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsHardZoneChangedEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsHardZoneChangedEnable.setDescription('Indicates whether the module will generate traps for hard Zone change events.')
hh3cFcZsMergeFailedEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsMergeFailedEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsMergeFailedEnable.setDescription('Indicates whether the module will generate traps for Zone merge failure events.')
hh3cFcZsMergeSucceededEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsMergeSucceededEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsMergeSucceededEnable.setDescription('Indicates whether the module will generate traps for Zone merge success events.')
hh3cFcZsActivationCompletedEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcZsActivationCompletedEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsActivationCompletedEnable.setDescription('Indicates whether the module will generate traps for activation/deactivation-completed events.')
hh3cFcZsObjsForNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 2))
hh3cFcZsLocalSwitchWWN = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 2, 1), Hh3cFcNameId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cFcZsLocalSwitchWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsLocalSwitchWWN.setDescription('This object indicates the WWN of the local switch.')
hh3cFcZsPeerSwitchWWN = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 2, 2), Hh3cFcNameId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cFcZsPeerSwitchWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsPeerSwitchWWN.setDescription('This object indicates the WWN of the peer switch.')
hh3cFcZsMergeFailCause = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 9, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("zoneModeInconsistent", 1), ("zonePolicyNotEqual", 2), ("hardZoneInconsistent", 3), ("dataNotEqualInRestrict", 4), ("activeZoneSetMergeFailed", 5), ("zoneMergeDataTooBig", 6), ("zoningObjectNumberTooBig", 7), ("zoneDbMergeFaildInBasic", 8), ("zoneDbMergeFaildInEnhanced", 9), ("other", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cFcZsMergeFailCause.setStatus('current')
if mibBuilder.loadTexts: hh3cFcZsMergeFailCause.setDescription("Indicates the reason of a Zone merge failure. 'zoneModeInconsistent' - The zone mode is inconsistent. 'zonePolicyNotEqual' - Zone Merge-Control setting or Default-Zone doesn't match. 'hardZoneInconsistent' - The Hard Zone Attribute is inconsistent. 'dataNotEqualInRestrict' - The Merge-Control setting is Restrict and the peer zoning database is not equal. 'activeZoneSetMergeFailed' - The Active Zone Set merge failed. 'zoneMergeDataTooBig' - The merged packet was too large. 'zoningObjectNumberTooBig' - The number of zoning objects exceeded the limit. 'zoneDbMergeFaildInBasic' - The database merge failed in Basic mode. 'zoneDbMergeFaildInEnhanced' - The database merge failed in Enhanced mode. 'other' - Unknown reason.")
mibBuilder.exportSymbols("HH3C-FC-ZONE-SERVER-MIB", hh3cFcZsMergeSucceededNotify=hh3cFcZsMergeSucceededNotify, hh3cFcZsActivateTable=hh3cFcZsActivateTable, hh3cFcZsZoneAliasTable=hh3cFcZsZoneAliasTable, hh3cFcZsHardZoneChangedEnable=hh3cFcZsHardZoneChangedEnable, hh3cFcZsActiveMemberEntry=hh3cFcZsActiveMemberEntry, hh3cFcZsDefaultZoneSetting=hh3cFcZsDefaultZoneSetting, hh3cFcZsPktOutChangeRjtCount=hh3cFcZsPktOutChangeRjtCount, hh3cFcZsServerStatusTable=hh3cFcZsServerStatusTable, hh3cFcZsAliasCount=hh3cFcZsAliasCount, hh3cFcZsPktInChangeAccCount=hh3cFcZsPktInChangeAccCount, hh3cFcZsZoneMemberIndex=hh3cFcZsZoneMemberIndex, hh3cFcZsZoneName=hh3cFcZsZoneName, hh3cFcZsMergeFailCause=hh3cFcZsMergeFailCause, hh3cFcZsClearDatabase=hh3cFcZsClearDatabase, hh3cFcZsZoneMemberTable=hh3cFcZsZoneMemberTable, hh3cFcZsPktOutMergeReqCount=hh3cFcZsPktOutMergeReqCount, hh3cFcZsNotificationSwitch=hh3cFcZsNotificationSwitch, hh3cFcZsClearDatabaseEntry=hh3cFcZsClearDatabaseEntry, hh3cFcZsClearPktStats=hh3cFcZsClearPktStats, hh3cFcZsPktOutChangeAccCount=hh3cFcZsPktOutChangeAccCount, hh3cFcZsZoneMemberFormat=hh3cFcZsZoneMemberFormat, hh3cFcZsDefaultZoneChangedNotify=hh3cFcZsDefaultZoneChangedNotify, Hh3cFcZsGenNameOrZero=Hh3cFcZsGenNameOrZero, hh3cFcZsZoneTable=hh3cFcZsZoneTable, hh3cFcZsZoneMemberNextFreeIndexEntry=hh3cFcZsZoneMemberNextFreeIndexEntry, hh3cFcZsNotification=hh3cFcZsNotification, hh3cFcZsClearPktStatsEntry=hh3cFcZsClearPktStatsEntry, hh3cFcZsZonesetNextFreeIndex=hh3cFcZsZonesetNextFreeIndex, hh3cFcZsDistributeExplainCode=hh3cFcZsDistributeExplainCode, Hh3cFcZsGenName=Hh3cFcZsGenName, hh3cFcZsZonesetTable=hh3cFcZsZonesetTable, hh3cFcZsZoneIndex=hh3cFcZsZoneIndex, hh3cFcZsZoneMemberEntry=hh3cFcZsZoneMemberEntry, hh3cFcZsZoneAliasEntry=hh3cFcZsZoneAliasEntry, hh3cFcZsActiveZonePairwiseEnable=hh3cFcZsActiveZonePairwiseEnable, hh3cFcZsHardZoneStatus=hh3cFcZsHardZoneStatus, hh3cFcZsOperation=hh3cFcZsOperation, hh3cFcZsZoneMemberIdentifier=hh3cFcZsZoneMemberIdentifier, hh3cFcZsZonesetEntry=hh3cFcZsZonesetEntry, hh3cFcZsNotificationPrefix=hh3cFcZsNotificationPrefix, hh3cFcZsZoneMemberNextFreeIndex=hh3cFcZsZoneMemberNextFreeIndex, hh3cFcZsConfiguration=hh3cFcZsConfiguration, hh3cFcZsInformation=hh3cFcZsInformation, hh3cFcZsMergeSucceededEnable=hh3cFcZsMergeSucceededEnable, hh3cFcZsServerLastResult=hh3cFcZsServerLastResult, hh3cFcZsDistribute=hh3cFcZsDistribute, hh3cFcZsServerStatus=hh3cFcZsServerStatus, hh3cFcZsSetZoneRowStatus=hh3cFcZsSetZoneRowStatus, hh3cFcZsMergeFailedEnable=hh3cFcZsMergeFailedEnable, hh3cFcZsClearPktStatsTable=hh3cFcZsClearPktStatsTable, hh3cFcZsZoneMemberRowStatus=hh3cFcZsZoneMemberRowStatus, hh3cFcZsDistributeReasonCode=hh3cFcZsDistributeReasonCode, hh3cFcZsServerTable=hh3cFcZsServerTable, hh3cFcZsDeactivate=hh3cFcZsDeactivate, hh3cFcZsZoneAliasIndex=hh3cFcZsZoneAliasIndex, hh3cFcZsNextFreeIndexInfo=hh3cFcZsNextFreeIndexInfo, hh3cFcZsDistributeRule=hh3cFcZsDistributeRule, hh3cFcZoneMibObjects=hh3cFcZoneMibObjects, hh3cFcZoneServer=hh3cFcZoneServer, hh3cFcZsPktInChangeRjtCount=hh3cFcZsPktInChangeRjtCount, hh3cFcZsZoneMemberNextFreeIndexTable=hh3cFcZsZoneMemberNextFreeIndexTable, hh3cFcZsDefaultZoneChangedEnable=hh3cFcZsDefaultZoneChangedEnable, hh3cFcZsPktInMergeRjtCount=hh3cFcZsPktInMergeRjtCount, hh3cFcZsActiveMemberPairwiseRole=hh3cFcZsActiveMemberPairwiseRole, hh3cFcZsPktOutChangeReqCount=hh3cFcZsPktOutChangeReqCount, hh3cFcZsZoneEntry=hh3cFcZsZoneEntry, hh3cFcZsMergeFailedNotify=hh3cFcZsMergeFailedNotify, hh3cFcZsClearAllPktStats=hh3cFcZsClearAllPktStats, hh3cFcZsZoneAliasRowStatus=hh3cFcZsZoneAliasRowStatus, hh3cFcZsSetZoneEntry=hh3cFcZsSetZoneEntry, hh3cFcZsActiveMemberTable=hh3cFcZsActiveMemberTable, hh3cFcZsActivationCompletedNotify=hh3cFcZsActivationCompletedNotify, hh3cFcZsZonesetRowStatus=hh3cFcZsZonesetRowStatus, hh3cFcZsActivateEntry=hh3cFcZsActivateEntry, hh3cFcZsZonePairwiseEnable=hh3cFcZsZonePairwiseEnable, hh3cFcZsZoneNextFreeIndex=hh3cFcZsZoneNextFreeIndex, hh3cFcZsPktOutMergeAccCount=hh3cFcZsPktOutMergeAccCount, hh3cFcZsZoneMemberPairwiseRole=hh3cFcZsZoneMemberPairwiseRole, hh3cFcZsActivate=hh3cFcZsActivate, hh3cFcZsClearDatabaseTable=hh3cFcZsClearDatabaseTable, PYSNMP_MODULE_ID=hh3cFcZoneServer, hh3cFcZsZoneRowStatus=hh3cFcZsZoneRowStatus, hh3cFcZsZonesetCount=hh3cFcZsZonesetCount, hh3cFcZsPktStatsEntry=hh3cFcZsPktStatsEntry, hh3cFcZsPktStatsTable=hh3cFcZsPktStatsTable, hh3cFcZsZoneCount=hh3cFcZsZoneCount, hh3cFcZsZonesetIndex=hh3cFcZsZonesetIndex, hh3cFcZsZoneAliasName=hh3cFcZsZoneAliasName, hh3cFcZsActivateResult=hh3cFcZsActivateResult, hh3cFcZsLocalSwitchWWN=hh3cFcZsLocalSwitchWWN, hh3cFcZsZoneMemberParentType=hh3cFcZsZoneMemberParentType, hh3cFcZsPeerSwitchWWN=hh3cFcZsPeerSwitchWWN, hh3cFcZsDistributeTable=hh3cFcZsDistributeTable, hh3cFcZsHardZoneEnable=hh3cFcZsHardZoneEnable, hh3cFcZsMergeControlSetting=hh3cFcZsMergeControlSetting, hh3cFcZsPktOutMergeRjtCount=hh3cFcZsPktOutMergeRjtCount, hh3cFcZsZonesetName=hh3cFcZsZonesetName, hh3cFcZsPktInChangeReqCount=hh3cFcZsPktInChangeReqCount, Hh3cFcZsZoneMemberType=Hh3cFcZsZoneMemberType, hh3cFcZsZoneAliasNextFreeIndex=hh3cFcZsZoneAliasNextFreeIndex, hh3cFcZsActivationCompletedEnable=hh3cFcZsActivationCompletedEnable, hh3cFcZsZoneMemberParentIndex=hh3cFcZsZoneMemberParentIndex, hh3cFcZsPktInMergeReqCount=hh3cFcZsPktInMergeReqCount, hh3cFcZsHardZoneChangedNotify=hh3cFcZsHardZoneChangedNotify, hh3cFcZsObjsForNotification=hh3cFcZsObjsForNotification, hh3cFcZsActivateFailReason=hh3cFcZsActivateFailReason, hh3cFcZsZoneModeCfg=hh3cFcZsZoneModeCfg, hh3cFcZsSetZoneTable=hh3cFcZsSetZoneTable, hh3cFcZsDistributeEntry=hh3cFcZsDistributeEntry, hh3cFcZsActiveZoneTable=hh3cFcZsActiveZoneTable, hh3cFcZsActiveZoneEntry=hh3cFcZsActiveZoneEntry, hh3cFcZsServerStatusEntry=hh3cFcZsServerStatusEntry, hh3cFcZsDistributeLastResult=hh3cFcZsDistributeLastResult, hh3cFcZsServerEntry=hh3cFcZsServerEntry, hh3cFcZsPktInMergeAccCount=hh3cFcZsPktInMergeAccCount)
