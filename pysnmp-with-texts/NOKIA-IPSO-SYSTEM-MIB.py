#
# PySNMP MIB module NOKIA-IPSO-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOKIA-IPSO-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
hrPartitionSize, hrPartitionLabel, hrFSMountPoint, hrPartitionIndex = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrPartitionSize", "hrPartitionLabel", "hrFSMountPoint", "hrPartitionIndex")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Bits, Unsigned32, MibIdentifier, IpAddress, Counter64, Integer32, Gauge32, Counter32, enterprises, TimeTicks, ObjectIdentity, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Unsigned32", "MibIdentifier", "IpAddress", "Counter64", "Integer32", "Gauge32", "Counter32", "enterprises", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
ipsoSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 94, 1, 21, 1))
ipsoSystem.setRevisions(('1999-10-20 00:00', '1900-01-11 00:00', '1970-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ipsoSystem.setRevisionsDescriptions(('Author: Shoba Narasimhan Panappakkam Revision 1.03 Added ipsoNotificationGroup. Added 5 system traps. - 10.20.1999', 'Author: Kripakaran karlekar Revision 1.04 SMIv1 to SMIv2 MIB conversion - 11.01.2000', 'Author: Rupa Bose Revision 1.05 Added Asset Mib - 7.16.01',))
if mibBuilder.loadTexts: ipsoSystem.setLastUpdated('0001300000Z')
if mibBuilder.loadTexts: ipsoSystem.setOrganization('Nokia')
if mibBuilder.loadTexts: ipsoSystem.setContactInfo('Alan Fransisco Shoba Narasimhan Panappakkam Kripakaran Karlekar Postal: 313 Fairchild Drive Mountain View, California, 94043')
if mibBuilder.loadTexts: ipsoSystem.setDescription('Author: Alan Fransisco Revision 1.02 changed ipsoChassisMBType to DisplayString - 09.11.1998 removed ipsoChassisType - 20.08.1998 removed ipsoFanSpeed - 19.08.1998 removed ipsoCardStorageCapacity and made other corrections - 12.08.1998 Added Nokia Telecommunications header - 03.08.1998')
nokia = MibIdentifier((1, 3, 6, 1, 4, 1, 94))
nokiaProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1))
ipsoProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 21))
ipsoChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoChassisSerialNumber"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoChassisMBType"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoChassisMBRevNumber"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoChassisMBSerialNumber"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoChassisTemperature"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoCardIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoCardOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoChassisGroup = ipsoChassisGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoChassisGroup.setDescription('A collection of objects providing the instrumentation of ipsoChassis')
ipsoChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ipsoChassisSerialNumber.setDescription('The serial number of this device. ')
ipsoChassisMBType = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoChassisMBType.setStatus('current')
if mibBuilder.loadTexts: ipsoChassisMBType.setDescription('An string value representing the type of motherboard populating this device. ')
ipsoChassisMBRevNumber = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoChassisMBRevNumber.setStatus('current')
if mibBuilder.loadTexts: ipsoChassisMBRevNumber.setDescription('The revision number for the motherboard of this chassis. ')
ipsoChassisMBSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoChassisMBSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ipsoChassisMBSerialNumber.setDescription('The serial number for the motherboard of this chassis. ')
ipsoChassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("overTemperature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoChassisTemperature.setStatus('current')
if mibBuilder.loadTexts: ipsoChassisTemperature.setDescription('An indication of whether or not the internal temperature reading of this chassis is higher than the recommended operating temperature.')
ipsoCardTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 6), )
if mibBuilder.loadTexts: ipsoCardTable.setStatus('current')
if mibBuilder.loadTexts: ipsoCardTable.setDescription('A table of slots or onboard network interfaces in the chassis. ')
ipsoCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 6, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoCardIndex"))
if mibBuilder.loadTexts: ipsoCardEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoCardEntry.setDescription("A sequence of slot entries containing the operational status, and ifType (if applicable) of the slot's module.")
ipsoCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoCardIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoCardIndex.setDescription('The number of the slot in which this card is plugged. ')
ipsoCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoCardOperStatus.setStatus('current')
if mibBuilder.loadTexts: ipsoCardOperStatus.setDescription('The operational status of this card. ')
ipsoFanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 2)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoFanIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoFanOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoFanGroup = ipsoFanGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoFanGroup.setDescription('A collection of objects providing the instrumentation of ipsoFanGroup')
ipsoFanTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 2, 1), )
if mibBuilder.loadTexts: ipsoFanTable.setStatus('current')
if mibBuilder.loadTexts: ipsoFanTable.setDescription('A listing of fans which are present in this chassis. ')
ipsoFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 2, 1, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoFanIndex"))
if mibBuilder.loadTexts: ipsoFanEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoFanEntry.setDescription('A grouping of objects displaying certain characteristics of each fan present in the chassis.')
ipsoFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoFanIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoFanIndex.setDescription('A unique index for this particular fan. ')
ipsoFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoFanOperStatus.setStatus('current')
if mibBuilder.loadTexts: ipsoFanOperStatus.setDescription('The operational status of this fan. ')
ipsoPowerSupplyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 3)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoPowerSupplyIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoPowerSupplyOverTemperature"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoPowerSupplyOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoPowerSupplyGroup = ipsoPowerSupplyGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoPowerSupplyGroup.setDescription('A collection of objects providing the instrumentation of ipsoPowerSupply')
ipsoPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 3, 1), )
if mibBuilder.loadTexts: ipsoPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: ipsoPowerSupplyTable.setDescription('A table of all power supplies installed in this chassis. ')
ipsoPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 3, 1, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoPowerSupplyIndex"))
if mibBuilder.loadTexts: ipsoPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoPowerSupplyEntry.setDescription('A list of characteristics of each power supply. ')
ipsoPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoPowerSupplyIndex.setDescription('A unique index representing this power supply.')
ipsoPowerSupplyOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("overTemperature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPowerSupplyOverTemperature.setStatus('current')
if mibBuilder.loadTexts: ipsoPowerSupplyOverTemperature.setDescription("An indication of whether or not this power supply's internal temperature is over the recommended operation temperature limit. ")
ipsoPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPowerSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: ipsoPowerSupplyOperStatus.setDescription('The operational status of this power supply. ')
ipsoConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigFilePath"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigFileDateAndTime"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigLogSize"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigLogIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigLogDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoConfigGroup = ipsoConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigGroup.setDescription('A collection of objects providing the instrumentation of ipsoConfigGroup')
ipsoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 1), )
if mibBuilder.loadTexts: ipsoConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigTable.setDescription('A table of available configurations for this system. ')
ipsoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 1, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigIndex"))
if mibBuilder.loadTexts: ipsoConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigEntry.setDescription('A list of attributes for each available configuration on this system. ')
ipsoConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoConfigIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigIndex.setDescription('The index for this configuration, with 1 representing the currently running database and traversing from newest to oldest. ')
ipsoConfigFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoConfigFilePath.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigFilePath.setDescription('The absolute pathname and filename which holds a record of this configuration, truncated to within 255 characters. ')
ipsoConfigFileDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoConfigFileDateAndTime.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigFileDateAndTime.setDescription('The date and time of the last time this file was changed. ')
ipsoConfigLogSize = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsoConfigLogSize.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigLogSize.setDescription('A maximum limit on the number of entries which may be recorded in the ipsoConfigLogTable. ')
ipsoConfigLogTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 3), )
if mibBuilder.loadTexts: ipsoConfigLogTable.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigLogTable.setDescription('A log of the most recent configuration changes on this system. ')
ipsoConfigLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 3, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigLogIndex"))
if mibBuilder.loadTexts: ipsoConfigLogEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigLogEntry.setDescription('A listing of attributes for a configuration change. This table lists the oldest configuration change in the table and proceeds toward the most recent configuration change. ')
ipsoConfigLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoConfigLogIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigLogIndex.setDescription('The unique index of this configuration change entry. ')
ipsoConfigLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoConfigLogDescr.setStatus('current')
if mibBuilder.loadTexts: ipsoConfigLogDescr.setDescription('A synopsis of the nature of the configuration change. ')
ipsoImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 5)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoImageIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoImageVersionNumber"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoImageSerialNumber"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoImageTimeOfLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoImageGroup = ipsoImageGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoImageGroup.setDescription('A collection of objects providing the instrumentation of ipsoImage Group')
ipsoImageTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 5, 1), )
if mibBuilder.loadTexts: ipsoImageTable.setStatus('current')
if mibBuilder.loadTexts: ipsoImageTable.setDescription('A table of resident kernel images on this system, including the currently up-and-running kernel. ')
ipsoImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 5, 1, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoImageIndex"))
if mibBuilder.loadTexts: ipsoImageEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoImageEntry.setDescription('A series of attributes for each image including date loaded, version number, serial number, etc. ')
ipsoImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoImageIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoImageIndex.setDescription('A unique index for the image represented by this entry. The currently running image has a index value of 1, and subsequent images are indexed from earliest loaded image to most recently loaded image. ')
ipsoImageVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoImageVersionNumber.setStatus('current')
if mibBuilder.loadTexts: ipsoImageVersionNumber.setDescription('The version number of this image. ')
ipsoImageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoImageSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ipsoImageSerialNumber.setDescription('The serial number of this image. ')
ipsoImageTimeOfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 5, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoImageTimeOfLoad.setStatus('current')
if mibBuilder.loadTexts: ipsoImageTimeOfLoad.setDescription('The date and time when this instance of the image had been first transferred onto this device. ')
ipsoStorageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 6)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoSIMMTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoStorageGroup = ipsoStorageGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoStorageGroup.setDescription('A collection of objects providing the instrumentation of ipsoStorage Group')
ipsoSIMMTotal = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoSIMMTotal.setStatus('current')
if mibBuilder.loadTexts: ipsoSIMMTotal.setDescription('The total memory capacity in megabytes contained in the SIMM sockets. ')
ipsoProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoProcessorUtilization"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoProcessID"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoProcessParentID"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoProcessOwner"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoProcessMemory"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoProcessPercentCPU"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoProcessGroup = ipsoProcessGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessGroup.setDescription('A collection of objects providing the instrumentation of ipsoProcessor Group')
ipsoProcessorUtilization = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoProcessorUtilization.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessorUtilization.setDescription('The current percentage of CPU utilization. ')
ipsoProcessTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 2), )
if mibBuilder.loadTexts: ipsoProcessTable.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessTable.setDescription('A table of all processes currently running on this system. ')
ipsoProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 2, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoProcessID"))
if mibBuilder.loadTexts: ipsoProcessEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessEntry.setDescription("A sequence of objects describing each process's execution. ")
ipsoProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoProcessID.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessID.setDescription("This process's ID. ")
ipsoProcessParentID = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoProcessParentID.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessParentID.setDescription("The ID of this process's parent process. ")
ipsoProcessOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoProcessOwner.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessOwner.setDescription('The name of the user who is given execution of this process. ')
ipsoProcessMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoProcessMemory.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessMemory.setDescription('The amount of memory in kilobytes which this process is utilizing in its current execution state. ')
ipsoProcessPercentCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoProcessPercentCPU.setStatus('current')
if mibBuilder.loadTexts: ipsoProcessPercentCPU.setDescription('The percentage of the CPU cycle which this process is utilizing in its current execution state. ')
ipsoDiskMirrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoTotalDiskMirrorSets"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoMirrorSetIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoMirrorSetSourceDrive"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoMirrorSetDestinationDrive"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoMirrorSetSyncPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoDiskMirrorGroup = ipsoDiskMirrorGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskMirrorGroup.setDescription('A collection of objects providing the instrumentation of ipsoDiskMirroring')
ipsoTotalDiskMirrorSets = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoTotalDiskMirrorSets.setStatus('current')
if mibBuilder.loadTexts: ipsoTotalDiskMirrorSets.setDescription('The total number of mirror sets currently configured on the system.')
ipsoDiskMirrorSetTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9, 2), )
if mibBuilder.loadTexts: ipsoDiskMirrorSetTable.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskMirrorSetTable.setDescription('A table of all mirror sets currently on this system. ')
ipsoDiskMirrorSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9, 2, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetIndex"))
if mibBuilder.loadTexts: ipsoDiskMirrorSetEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskMirrorSetEntry.setDescription('A sequence of objects describing each mirror set.')
ipsoDiskMirrorSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskMirrorSetIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskMirrorSetIndex.setDescription('The mirror set index used to identify a mirror set present on the system. ')
ipsoDiskMirrorSetSourceDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskMirrorSetSourceDriveIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskMirrorSetSourceDriveIndex.setDescription('The source drive of the mirror set. ')
ipsoDiskMirrorSetDestinationDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskMirrorSetDestinationDriveIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskMirrorSetDestinationDriveIndex.setDescription('The destination drive of the mirror set. ')
ipsoDiskMirrorSetSyncPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskMirrorSetSyncPercent.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskMirrorSetSyncPercent.setDescription('The percentage of the space in sync of source drive with the destination drive. ')
ipsoAssetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoAssetChassisSerialNumber"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoCPUModel"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoCPUMfr"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoCPUFreq"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoKernMaxMem"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoMotherBoardSerNum"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoMotherBoardRev"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoMotherBoardModel"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoOSRelease"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoOSVersion"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoProductModel"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoPkgIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoPkgName"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoPkgMajorVersion"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoPkgMinorVersion"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoPkgLicense"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskSysDriveIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveModel"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveCapacity"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoAssetGroup = ipsoAssetGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoAssetGroup.setDescription('A collection of objects representing some of the basic assets of the IPSO system.')
ipsoAssetChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoAssetChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ipsoAssetChassisSerialNumber.setDescription('The serial number of this device. ')
ipsoCPUModel = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoCPUModel.setStatus('current')
if mibBuilder.loadTexts: ipsoCPUModel.setDescription('The CPU model of this device. ')
ipsoCPUMfr = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoCPUMfr.setStatus('current')
if mibBuilder.loadTexts: ipsoCPUMfr.setDescription('The CPU manufacturer of this device. ')
ipsoCPUFreq = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoCPUFreq.setStatus('current')
if mibBuilder.loadTexts: ipsoCPUFreq.setDescription('The CPU frequency. ')
ipsoKernMaxMem = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoKernMaxMem.setStatus('current')
if mibBuilder.loadTexts: ipsoKernMaxMem.setDescription('The maximum amount of kernel memory. ')
ipsoMotherBoardSerNum = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoMotherBoardSerNum.setStatus('current')
if mibBuilder.loadTexts: ipsoMotherBoardSerNum.setDescription('The serial number of the motherboard. ')
ipsoMotherBoardRev = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoMotherBoardRev.setStatus('current')
if mibBuilder.loadTexts: ipsoMotherBoardRev.setDescription('The revision number of the motherboard. ')
ipsoMotherBoardModel = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoMotherBoardModel.setStatus('current')
if mibBuilder.loadTexts: ipsoMotherBoardModel.setDescription('The model number of the motherboard. ')
ipsoOSRelease = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoOSRelease.setStatus('current')
if mibBuilder.loadTexts: ipsoOSRelease.setDescription('The release number current IPSO OS. ')
ipsoOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoOSVersion.setStatus('current')
if mibBuilder.loadTexts: ipsoOSVersion.setDescription('The version number of the current IPSO OS. ')
ipsoProductModel = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoProductModel.setStatus('current')
if mibBuilder.loadTexts: ipsoProductModel.setDescription('The product model number of the current system.')
ipsoAssetTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 12), )
if mibBuilder.loadTexts: ipsoAssetTable.setStatus('current')
if mibBuilder.loadTexts: ipsoAssetTable.setDescription('A table of currently installed packages and their relevant information.')
ipsoAssetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 12, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoPkgIndex"))
if mibBuilder.loadTexts: ipsoAssetEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoAssetEntry.setDescription('A sequence of package entries containing the version number, license information and policy type for the particular package.')
ipsoPkgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPkgIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoPkgIndex.setDescription('The index used to iterate through all packages which are installed and currently running, ie, Checkpoint, ISS, etc.')
ipsoPkgName = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPkgName.setStatus('current')
if mibBuilder.loadTexts: ipsoPkgName.setDescription('The package name.')
ipsoPkgMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPkgMajorVersion.setStatus('current')
if mibBuilder.loadTexts: ipsoPkgMajorVersion.setDescription('The major version number of the package. For FireWall NG, this displays the Build and Feature Pack information.')
ipsoPkgMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPkgMinorVersion.setStatus('current')
if mibBuilder.loadTexts: ipsoPkgMinorVersion.setDescription('The minor version number of the package. For Firewall NG, this is not applicable.')
ipsoPkgLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoPkgLicense.setStatus('current')
if mibBuilder.loadTexts: ipsoPkgLicense.setDescription('The license information of the package.')
ipsoDiskDriveTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 13), )
if mibBuilder.loadTexts: ipsoDiskDriveTable.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskDriveTable.setDescription('A table of all disk drives currently on this system. ')
ipsoDiskDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 13, 1), ).setIndexNames((0, "NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveIndex"))
if mibBuilder.loadTexts: ipsoDiskDriveEntry.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskDriveEntry.setDescription('A sequence of objects describing each disk drive. ')
ipsoDiskDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskDriveIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskDriveIndex.setDescription('The drive index used to identify a particular row in table. ')
ipsoSysDiskDriveIndex = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoSysDiskDriveIndex.setStatus('current')
if mibBuilder.loadTexts: ipsoSysDiskDriveIndex.setDescription('The drive index used internally by the system to identify a disk. ')
ipsoDiskDriveModel = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskDriveModel.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskDriveModel.setDescription('The model of the disk drive. ')
ipsoDiskDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskDriveCapacity.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskDriveCapacity.setDescription('The total data holding capacity of the disk drive. ')
ipsoDiskDriveLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 10, 13, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDiskDriveLocation.setStatus('current')
if mibBuilder.loadTexts: ipsoDiskDriveLocation.setDescription('The location of the disk drive. ')
ipsoLicenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 11)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsofeaturename"), ("NOKIA-IPSO-SYSTEM-MIB", "noofdaystoexpire"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoLicenseGroup = ipsoLicenseGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoLicenseGroup.setDescription('A collection of objects sent as a part of license trap.')
ipsoFeatureName = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoFeatureName.setStatus('current')
if mibBuilder.loadTexts: ipsoFeatureName.setDescription('The feature name that is licensed.')
ipsoDaysToExpire = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsoDaysToExpire.setStatus('current')
if mibBuilder.loadTexts: ipsoDaysToExpire.setDescription('Number of Day(s) for the license to expire, the value of this object is zero, if the license for feature has expired.')
ipsoNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "systemTrapConfigurationChange"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapConfigurationFileChange"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapConfigurationSaveChange"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapLowDiskSpace"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapNoDiskSpace"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapDiskFailure"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapDiskMirrorSetCreate"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapDiskMirrorSetDelete"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapDiskMirrorSyncFailure"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapDiskMirrorSyncSuccess"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapSnmpProcessShutdown"), ("NOKIA-IPSO-SYSTEM-MIB", "systemTrapLicense"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsoNotificationGroup = ipsoNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ipsoNotificationGroup.setDescription('A collection of notifications providing the instrumentation of ipsoNotification')
systemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1))
systemTrapConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 1))
if mibBuilder.loadTexts: systemTrapConfigurationChange.setStatus('current')
if mibBuilder.loadTexts: systemTrapConfigurationChange.setDescription('The trap which indicates a temporary configuration change.')
systemTrapConfigurationFileChange = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 2)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigFilePath"))
if mibBuilder.loadTexts: systemTrapConfigurationFileChange.setStatus('current')
if mibBuilder.loadTexts: systemTrapConfigurationFileChange.setDescription('The trap which indicates a change in the configuration file.')
systemTrapConfigurationSaveChange = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 3)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoConfigFilePath"))
if mibBuilder.loadTexts: systemTrapConfigurationSaveChange.setStatus('current')
if mibBuilder.loadTexts: systemTrapConfigurationSaveChange.setDescription('The trap which indicates a permanent configuration change which is written to the configuration file.')
systemTrapLowDiskSpace = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 4)).setObjects(("HOST-RESOURCES-MIB", "hrPartitionIndex"), ("HOST-RESOURCES-MIB", "hrPartitionLabel"), ("HOST-RESOURCES-MIB", "hrPartitionSize"), ("HOST-RESOURCES-MIB", "hrFSMountPoint"))
if mibBuilder.loadTexts: systemTrapLowDiskSpace.setStatus('current')
if mibBuilder.loadTexts: systemTrapLowDiskSpace.setDescription('The trap which indicates if the disk space is low.')
systemTrapNoDiskSpace = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 5)).setObjects(("HOST-RESOURCES-MIB", "hrPartitionIndex"), ("HOST-RESOURCES-MIB", "hrPartitionLabel"), ("HOST-RESOURCES-MIB", "hrPartitionSize"), ("HOST-RESOURCES-MIB", "hrFSMountPoint"))
if mibBuilder.loadTexts: systemTrapNoDiskSpace.setStatus('current')
if mibBuilder.loadTexts: systemTrapNoDiskSpace.setDescription('The trap which indicates that there is no more disk space available.')
systemTrapDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 6)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveIndex"))
if mibBuilder.loadTexts: systemTrapDiskFailure.setStatus('current')
if mibBuilder.loadTexts: systemTrapDiskFailure.setDescription('The trap which indicates that a particular disk drive has failed , means giving no response for read/write operation. ')
systemTrapDiskMirrorSetCreate = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 7)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetSourceDriveIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetDestinationDriveIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveLocation"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveLocation"))
if mibBuilder.loadTexts: systemTrapDiskMirrorSetCreate.setStatus('current')
if mibBuilder.loadTexts: systemTrapDiskMirrorSetCreate.setDescription('The trap which indicates that a particular mirror set has been created on the system. ')
systemTrapDiskMirrorSetDelete = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 8)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetSourceDriveIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetDestinationDriveIndex"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveLocation"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskDriveLocation"))
if mibBuilder.loadTexts: systemTrapDiskMirrorSetDelete.setStatus('current')
if mibBuilder.loadTexts: systemTrapDiskMirrorSetDelete.setDescription('The trap which indicates that a particular mirror set has been deleted from the system. ')
systemTrapSnmpProcessShutdown = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 9))
if mibBuilder.loadTexts: systemTrapSnmpProcessShutdown.setStatus('current')
if mibBuilder.loadTexts: systemTrapSnmpProcessShutdown.setDescription('The trap which indicates that the snmp process is going down.')
systemTrapDiskMirrorSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 10)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetIndex"))
if mibBuilder.loadTexts: systemTrapDiskMirrorSyncFailure.setStatus('current')
if mibBuilder.loadTexts: systemTrapDiskMirrorSyncFailure.setDescription('The trap which indicates that a particular mirror set sync has failed.')
systemTrapDiskMirrorSyncSuccess = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 11)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoDiskMirrorSetIndex"))
if mibBuilder.loadTexts: systemTrapDiskMirrorSyncSuccess.setStatus('current')
if mibBuilder.loadTexts: systemTrapDiskMirrorSyncSuccess.setDescription('The trap which indicates that a particular mirror set sync has succeeded.')
systemTrapLicense = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 21, 1, 8, 1, 16)).setObjects(("NOKIA-IPSO-SYSTEM-MIB", "ipsoFeatureName"), ("NOKIA-IPSO-SYSTEM-MIB", "ipsoDaysToExpire"))
if mibBuilder.loadTexts: systemTrapLicense.setStatus('current')
if mibBuilder.loadTexts: systemTrapLicense.setDescription('The trap indicates the product is about to expire/expired. A zero value for the NoOfDays means the product has expired.')
mibBuilder.exportSymbols("NOKIA-IPSO-SYSTEM-MIB", ipsoConfigLogTable=ipsoConfigLogTable, ipsoDiskDriveIndex=ipsoDiskDriveIndex, ipsoCardOperStatus=ipsoCardOperStatus, systemTrapSnmpProcessShutdown=systemTrapSnmpProcessShutdown, ipsoConfigGroup=ipsoConfigGroup, ipsoAssetChassisSerialNumber=ipsoAssetChassisSerialNumber, systemTrapConfigurationChange=systemTrapConfigurationChange, ipsoDiskMirrorSetSyncPercent=ipsoDiskMirrorSetSyncPercent, ipsoAssetTable=ipsoAssetTable, ipsoDiskMirrorSetDestinationDriveIndex=ipsoDiskMirrorSetDestinationDriveIndex, ipsoSIMMTotal=ipsoSIMMTotal, systemTrapLowDiskSpace=systemTrapLowDiskSpace, systemTrapConfigurationSaveChange=systemTrapConfigurationSaveChange, ipsoMotherBoardSerNum=ipsoMotherBoardSerNum, systemTrapDiskMirrorSetDelete=systemTrapDiskMirrorSetDelete, ipsoImageTimeOfLoad=ipsoImageTimeOfLoad, systemTrapDiskFailure=systemTrapDiskFailure, nokia=nokia, ipsoProcessPercentCPU=ipsoProcessPercentCPU, ipsoMotherBoardModel=ipsoMotherBoardModel, ipsoPkgLicense=ipsoPkgLicense, ipsoConfigLogEntry=ipsoConfigLogEntry, ipsoConfigLogSize=ipsoConfigLogSize, ipsoDiskMirrorGroup=ipsoDiskMirrorGroup, ipsoChassisMBRevNumber=ipsoChassisMBRevNumber, ipsoPkgMajorVersion=ipsoPkgMajorVersion, ipsoConfigLogDescr=ipsoConfigLogDescr, ipsoDiskDriveLocation=ipsoDiskDriveLocation, ipsoDiskDriveModel=ipsoDiskDriveModel, ipsoPowerSupplyEntry=ipsoPowerSupplyEntry, ipsoCardEntry=ipsoCardEntry, ipsoProcessMemory=ipsoProcessMemory, ipsoLicenseGroup=ipsoLicenseGroup, systemTrapDiskMirrorSyncFailure=systemTrapDiskMirrorSyncFailure, ipsoConfigLogIndex=ipsoConfigLogIndex, systemTrapConfigurationFileChange=systemTrapConfigurationFileChange, ipsoPowerSupplyOperStatus=ipsoPowerSupplyOperStatus, systemTrapDiskMirrorSetCreate=systemTrapDiskMirrorSetCreate, ipsoNotificationGroup=ipsoNotificationGroup, systemTrapLicense=systemTrapLicense, ipsoFanOperStatus=ipsoFanOperStatus, ipsoCPUMfr=ipsoCPUMfr, ipsoProcessEntry=ipsoProcessEntry, ipsoCPUModel=ipsoCPUModel, ipsoDaysToExpire=ipsoDaysToExpire, ipsoConfigIndex=ipsoConfigIndex, systemTraps=systemTraps, ipsoProducts=ipsoProducts, ipsoStorageGroup=ipsoStorageGroup, ipsoDiskMirrorSetTable=ipsoDiskMirrorSetTable, ipsoPkgIndex=ipsoPkgIndex, systemTrapDiskMirrorSyncSuccess=systemTrapDiskMirrorSyncSuccess, ipsoDiskMirrorSetSourceDriveIndex=ipsoDiskMirrorSetSourceDriveIndex, ipsoChassisMBSerialNumber=ipsoChassisMBSerialNumber, PYSNMP_MODULE_ID=ipsoSystem, ipsoFeatureName=ipsoFeatureName, ipsoImageIndex=ipsoImageIndex, ipsoOSRelease=ipsoOSRelease, nokiaProducts=nokiaProducts, ipsoSystem=ipsoSystem, ipsoCardTable=ipsoCardTable, ipsoDiskMirrorSetIndex=ipsoDiskMirrorSetIndex, ipsoImageSerialNumber=ipsoImageSerialNumber, ipsoImageGroup=ipsoImageGroup, ipsoFanIndex=ipsoFanIndex, ipsoChassisSerialNumber=ipsoChassisSerialNumber, ipsoMotherBoardRev=ipsoMotherBoardRev, ipsoCardIndex=ipsoCardIndex, ipsoConfigFilePath=ipsoConfigFilePath, ipsoChassisTemperature=ipsoChassisTemperature, ipsoPowerSupplyOverTemperature=ipsoPowerSupplyOverTemperature, ipsoProcessID=ipsoProcessID, systemTrapNoDiskSpace=systemTrapNoDiskSpace, ipsoKernMaxMem=ipsoKernMaxMem, ipsoProcessGroup=ipsoProcessGroup, ipsoFanGroup=ipsoFanGroup, ipsoCPUFreq=ipsoCPUFreq, ipsoDiskDriveEntry=ipsoDiskDriveEntry, ipsoPowerSupplyTable=ipsoPowerSupplyTable, ipsoPkgMinorVersion=ipsoPkgMinorVersion, ipsoChassisMBType=ipsoChassisMBType, ipsoChassisGroup=ipsoChassisGroup, ipsoImageVersionNumber=ipsoImageVersionNumber, ipsoConfigEntry=ipsoConfigEntry, ipsoTotalDiskMirrorSets=ipsoTotalDiskMirrorSets, ipsoAssetGroup=ipsoAssetGroup, ipsoConfigFileDateAndTime=ipsoConfigFileDateAndTime, ipsoProcessorUtilization=ipsoProcessorUtilization, ipsoFanTable=ipsoFanTable, ipsoImageEntry=ipsoImageEntry, ipsoProcessOwner=ipsoProcessOwner, ipsoConfigTable=ipsoConfigTable, ipsoPowerSupplyGroup=ipsoPowerSupplyGroup, ipsoDiskMirrorSetEntry=ipsoDiskMirrorSetEntry, ipsoFanEntry=ipsoFanEntry, ipsoDiskDriveCapacity=ipsoDiskDriveCapacity, ipsoOSVersion=ipsoOSVersion, ipsoSysDiskDriveIndex=ipsoSysDiskDriveIndex, ipsoDiskDriveTable=ipsoDiskDriveTable, ipsoPkgName=ipsoPkgName, ipsoProcessParentID=ipsoProcessParentID, ipsoPowerSupplyIndex=ipsoPowerSupplyIndex, ipsoImageTable=ipsoImageTable, ipsoProductModel=ipsoProductModel, ipsoProcessTable=ipsoProcessTable, ipsoAssetEntry=ipsoAssetEntry)
