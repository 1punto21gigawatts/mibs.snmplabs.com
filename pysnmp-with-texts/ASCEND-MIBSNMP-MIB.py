#
# PySNMP MIB module ASCEND-MIBSNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBSNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, ModuleIdentity, NotificationType, iso, Bits, Integer32, MibIdentifier, Gauge32, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "ModuleIdentity", "NotificationType", "iso", "Bits", "Integer32", "MibIdentifier", "Gauge32", "Unsigned32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibusmUserProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 115))
mibsnmpManagerProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 118))
mibsnmpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 114))
mibsnmpv3NotifyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 117))
mibsnmpv3TargetParamProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 116))
mibusmUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 115, 1), )
if mibBuilder.loadTexts: mibusmUserProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibusmUserProfileTable.setDescription('A list of mibusmUserProfile profile entries.')
mibusmUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1), ).setIndexNames((0, "ASCEND-MIBSNMP-MIB", "usmUserProfile-Name"))
if mibBuilder.loadTexts: mibusmUserProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibusmUserProfileEntry.setDescription('A mibusmUserProfile entry containing objects that maps to the parameters of mibusmUserProfile profile.')
usmUserProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 1), OctetString()).setLabel("usmUserProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: usmUserProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_Name.setDescription('The user (principal) on whose behalf the message is being exchange.')
usmUserProfile_ActiveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("usmUserProfile-ActiveEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmUserProfile_ActiveEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_ActiveEnabled.setDescription('TRUE if this user is enabled for message exchange.')
usmUserProfile_ReadWriteAccess = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("usmUserProfile-ReadWriteAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmUserProfile_ReadWriteAccess.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_ReadWriteAccess.setDescription('TRUE if this user is configured for read-write access to MIB view.')
usmUserProfile_AuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuth", 1), ("md5Auth", 2), ("shaAuth", 3)))).setLabel("usmUserProfile-AuthProtocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmUserProfile_AuthProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_AuthProtocol.setDescription('Indicate whether messages sent on behalf of this user to/from the SNMP engine can be authenticated and,if so, the type of authentication protocol to be used.')
usmUserProfile_PrivProtocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPriv", 1), ("desPriv", 2)))).setLabel("usmUserProfile-PrivProtocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmUserProfile_PrivProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_PrivProtocol.setDescription('Indicate whether messages sent on behalf of this user to/from the SNMP engine can be protected by encryption and,if so, the type of privacy protocol to be used.')
usmUserProfile_AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 6), OctetString()).setLabel("usmUserProfile-AuthKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmUserProfile_AuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_AuthKey.setDescription("The user's authkey: calculated based on password and auth protocol. This can be set using snmpAuthPass command")
usmUserProfile_PrivKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 7), OctetString()).setLabel("usmUserProfile-PrivKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmUserProfile_PrivKey.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_PrivKey.setDescription("The user's privacy: key calculated based on priv-password and auth protocol. This can be set using snmpPrivPass command")
usmUserProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 115, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("usmUserProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: usmUserProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: usmUserProfile_Action_o.setDescription('')
mibsnmpManagerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 118, 1), )
if mibBuilder.loadTexts: mibsnmpManagerProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpManagerProfileTable.setDescription('A list of mibsnmpManagerProfile profile entries.')
mibsnmpManagerProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 118, 1, 1), ).setIndexNames((0, "ASCEND-MIBSNMP-MIB", "snmpManagerProfile-Name"))
if mibBuilder.loadTexts: mibsnmpManagerProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpManagerProfileEntry.setDescription('A mibsnmpManagerProfile entry containing objects that maps to the parameters of mibsnmpManagerProfile profile.')
snmpManagerProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 118, 1, 1, 1), DisplayString()).setLabel("snmpManagerProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpManagerProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerProfile_Name.setDescription('The name or the ip-address in dot format of the SNMP Manager (host) to send SNMP requests to the TAOS SNMP Agent. When DNS or YP/NIS is supported this name will be used to look up the LAN address.')
snmpManagerProfile_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 118, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpManagerProfile-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerProfile_Active.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerProfile_Active.setDescription('TRUE if SNMP messages from a particular SNMP Manager should be processed. This implies read-access for SNMPv1.')
snmpManagerProfile_WriteAccess = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 118, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpManagerProfile-WriteAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerProfile_WriteAccess.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerProfile_WriteAccess.setDescription("When set to `no' (its default value), the SNMP agent only allows read requests. When set to 'yes', the SNMP agent allows write requests in addition to read requests.")
snmpManagerProfile_SnmpMessageType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 118, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1AndV3", 1), ("v1Only", 2), ("v3Only", 3)))).setLabel("snmpManagerProfile-SnmpMessageType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerProfile_SnmpMessageType.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerProfile_SnmpMessageType.setDescription('Indicate the message type that the SNMP agent should allow for this SNMP Manager.')
snmpManagerProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 118, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("snmpManagerProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerProfile_Action_o.setDescription('')
mibsnmpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 114, 1), )
if mibBuilder.loadTexts: mibsnmpProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpProfileTable.setDescription('A list of mibsnmpProfile profile entries.')
mibsnmpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1), ).setIndexNames((0, "ASCEND-MIBSNMP-MIB", "snmpProfile-Index-o"))
if mibBuilder.loadTexts: mibsnmpProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpProfileEntry.setDescription('A mibsnmpProfile entry containing objects that maps to the parameters of mibsnmpProfile profile.')
snmpProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 1), Integer32()).setLabel("snmpProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpProfile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_Index_o.setDescription('')
snmpProfile_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpProfile-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_Enabled.setDescription("When set to `no' (its default value), the unit cannot be accessed via SNMP.")
snmpProfile_ReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 3), DisplayString()).setLabel("snmpProfile-ReadCommunity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_ReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_ReadCommunity.setDescription('The SNMP community name for read access.')
snmpProfile_ReadWriteEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpProfile-ReadWriteEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_ReadWriteEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_ReadWriteEnabled.setDescription("When set to `no' (its default value), the write community cannot be accessed via SNMP.")
snmpProfile_ReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 5), DisplayString()).setLabel("snmpProfile-ReadWriteCommunity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_ReadWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_ReadWriteCommunity.setDescription('The SNMP community name for read/write access.')
snmpProfile_EnforceAddressSecurity = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpProfile-EnforceAddressSecurity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_EnforceAddressSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_EnforceAddressSecurity.setDescription("When set to `no' (its default value), we will allow access to all SNMP managers that know the community string. When set to `yes', we will check the source IP address against the ones that are defined in the SNMP-MANAGER profiles before allowing access.")
snmpProfile_EarlyQueueDiscard = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpProfile-EarlyQueueDiscard").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_EarlyQueueDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_EarlyQueueDiscard.setDescription('If this parameter is set to yes, the system will filter and discard the requests from unauthorized host before queuing to the SNMP UDP port 161. If this parameter is set to no, the system will queue all incoming SNMP requests to SNMP layer which will discard the requests later if they are from unauthorized host.')
snmpProfile_Contact = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 7), DisplayString()).setLabel("snmpProfile-Contact").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_Contact.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_Contact.setDescription('The name of the contact for this device. SNMP readable and settable.')
snmpProfile_Location = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 8), DisplayString()).setLabel("snmpProfile-Location").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_Location.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_Location.setDescription('The location of this device. SNMP readable and settable.')
snmpProfile_QueueDepth = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 9), Integer32()).setLabel("snmpProfile-QueueDepth").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_QueueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_QueueDepth.setDescription("The maximum number of SNMP packets waiting to be serviced. Additional packets will be dropped. When setting this value, you're trading memory resources versus SNMP retries (only when the box is busy and gets behind on servicing the SNMP packets). Zero indicates there is no limit. ")
snmpProfile_CsmModemDiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpProfile-CsmModemDiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_CsmModemDiag.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_CsmModemDiag.setDescription("When set to `no' (its default value), SNMP CSM modem card diag is disabled. A JEDEC card is required to turn on this feature. ")
snmpProfile_SnmpMessageType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1AndV3", 1), ("v1Only", 2), ("v3Only", 3)))).setLabel("snmpProfile-SnmpMessageType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_SnmpMessageType.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_SnmpMessageType.setDescription('Indicate the message type that the SNMP agent should handle.')
snmpProfile_SecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("authNopriv", 2), ("authPriv", 3)))).setLabel("snmpProfile-SecurityLevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_SecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_SecurityLevel.setDescription('Indicate the security level of the SNMP agent. Applicable only if SNMPv3 message handling enabled')
snmpProfile_EnableVacm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpProfile-EnableVacm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_EnableVacm.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_EnableVacm.setDescription('If set to TRUE, View Based Access Control Model (VACM) would be enabled, otherwise VACM is disabled.')
snmpProfile_NotificationLogAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 15), Integer32()).setLabel("snmpProfile-NotificationLogAgeOut").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_NotificationLogAgeOut.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_NotificationLogAgeOut.setDescription('The number of minutes a Notification SHOULD be kept in a log before it is automatically removed. A value of 0 means no age out.')
snmpProfile_BitStringsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpProfile-BitStringsAllowed").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_BitStringsAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_BitStringsAllowed.setDescription('If enabled, TAOS agent responds to BITS data type in bit string format. If disabled, TAOS agent responds in numeric format.')
snmpProfile_AlarmClearTableLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 18), Integer32()).setLabel("snmpProfile-AlarmClearTableLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_AlarmClearTableLimit.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_AlarmClearTableLimit.setDescription('The maximum number of alarmCleared entries that can be held in the alarmCleared table.')
snmpProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 114, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("snmpProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: snmpProfile_Action_o.setDescription('')
mibsnmpv3NotifyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 117, 1), )
if mibBuilder.loadTexts: mibsnmpv3NotifyProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpv3NotifyProfileTable.setDescription('A list of mibsnmpv3NotifyProfile profile entries.')
mibsnmpv3NotifyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 117, 1, 1), ).setIndexNames((0, "ASCEND-MIBSNMP-MIB", "snmpv3NotifyProfile-Name"))
if mibBuilder.loadTexts: mibsnmpv3NotifyProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpv3NotifyProfileEntry.setDescription('A mibsnmpv3NotifyProfile entry containing objects that maps to the parameters of mibsnmpv3NotifyProfile profile.')
snmpv3NotifyProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 117, 1, 1, 1), OctetString()).setLabel("snmpv3NotifyProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3NotifyProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3NotifyProfile_Name.setDescription('Any arbitrary, but unique identifier associated with this profile')
snmpv3NotifyProfile_ActiveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 117, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpv3NotifyProfile-ActiveEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3NotifyProfile_ActiveEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3NotifyProfile_ActiveEnabled.setDescription('TRUE if this profile is enabled for generation of SNMP messages')
snmpv3NotifyProfile_Tag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 117, 1, 1, 3), OctetString()).setLabel("snmpv3NotifyProfile-Tag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3NotifyProfile_Tag.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3NotifyProfile_Tag.setDescription("Single tag value that is used to select entries in the snmpTargetAddrTable ( 'trap' profile). If this contains a string of zero length, no entries are selected.")
snmpv3NotifyProfile_Type = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 117, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("trap", 2), ("inform", 3)))).setLabel("snmpv3NotifyProfile-Type").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3NotifyProfile_Type.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3NotifyProfile_Type.setDescription('Type of notification to be generated, i.e., Trap (unconfirmed class) or Inform (confirmed class). This field is for future use. Agent does not generate INFORM pdus.')
snmpv3NotifyProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 117, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("snmpv3NotifyProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3NotifyProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3NotifyProfile_Action_o.setDescription('')
mibsnmpv3TargetParamProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 116, 1), )
if mibBuilder.loadTexts: mibsnmpv3TargetParamProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpv3TargetParamProfileTable.setDescription('A list of mibsnmpv3TargetParamProfile profile entries.')
mibsnmpv3TargetParamProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1), ).setIndexNames((0, "ASCEND-MIBSNMP-MIB", "snmpv3TargetParamProfile-Name"))
if mibBuilder.loadTexts: mibsnmpv3TargetParamProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsnmpv3TargetParamProfileEntry.setDescription('A mibsnmpv3TargetParamProfile entry containing objects that maps to the parameters of mibsnmpv3TargetParamProfile profile.')
snmpv3TargetParamProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1, 1), OctetString()).setLabel("snmpv3TargetParamProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetParamProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3TargetParamProfile_Name.setDescription('Any arbitrary, but unique identifier associated with this profile')
snmpv3TargetParamProfile_ActiveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("snmpv3TargetParamProfile-ActiveEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TargetParamProfile_ActiveEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3TargetParamProfile_ActiveEnabled.setDescription('TRUE if this profile is enabled for generation of SNMP messages')
snmpv3TargetParamProfile_MsgProcModel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("v1", 1), ("v3", 4)))).setLabel("snmpv3TargetParamProfile-MsgProcModel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TargetParamProfile_MsgProcModel.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3TargetParamProfile_MsgProcModel.setDescription('Message processing model used when generating SNMP messages using this entry')
snmpv3TargetParamProfile_SecurityModel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("v1", 2), ("v3Usm", 4)))).setLabel("snmpv3TargetParamProfile-SecurityModel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TargetParamProfile_SecurityModel.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3TargetParamProfile_SecurityModel.setDescription('Security model to be used when generating SNMP messages using this entry')
snmpv3TargetParamProfile_SecurityName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1, 5), OctetString()).setLabel("snmpv3TargetParamProfile-SecurityName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TargetParamProfile_SecurityName.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3TargetParamProfile_SecurityName.setDescription('Security name which identifies the principal on whose behalf SNMP messages will be generated using this entry. This name should be a valid snmpv3-usm-user')
snmpv3TargetParamProfile_SecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("authNopriv", 2), ("authPriv", 3)))).setLabel("snmpv3TargetParamProfile-SecurityLevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TargetParamProfile_SecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3TargetParamProfile_SecurityLevel.setDescription('Level of security to be used when generating messages using this entry.')
snmpv3TargetParamProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 116, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("snmpv3TargetParamProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TargetParamProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3TargetParamProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBSNMP-MIB", mibusmUserProfileEntry=mibusmUserProfileEntry, usmUserProfile_PrivKey=usmUserProfile_PrivKey, snmpProfile_CsmModemDiag=snmpProfile_CsmModemDiag, mibsnmpv3TargetParamProfile=mibsnmpv3TargetParamProfile, snmpProfile_EnableVacm=snmpProfile_EnableVacm, usmUserProfile_Action_o=usmUserProfile_Action_o, snmpManagerProfile_WriteAccess=snmpManagerProfile_WriteAccess, mibsnmpv3NotifyProfile=mibsnmpv3NotifyProfile, snmpv3TargetParamProfile_SecurityName=snmpv3TargetParamProfile_SecurityName, usmUserProfile_AuthKey=usmUserProfile_AuthKey, mibsnmpManagerProfile=mibsnmpManagerProfile, snmpv3TargetParamProfile_MsgProcModel=snmpv3TargetParamProfile_MsgProcModel, mibsnmpv3NotifyProfileEntry=mibsnmpv3NotifyProfileEntry, snmpv3NotifyProfile_Name=snmpv3NotifyProfile_Name, snmpProfile_EarlyQueueDiscard=snmpProfile_EarlyQueueDiscard, snmpProfile_ReadWriteCommunity=snmpProfile_ReadWriteCommunity, snmpProfile_AlarmClearTableLimit=snmpProfile_AlarmClearTableLimit, mibsnmpv3NotifyProfileTable=mibsnmpv3NotifyProfileTable, mibsnmpProfileEntry=mibsnmpProfileEntry, snmpv3NotifyProfile_Type=snmpv3NotifyProfile_Type, snmpProfile_Enabled=snmpProfile_Enabled, mibsnmpv3TargetParamProfileTable=mibsnmpv3TargetParamProfileTable, snmpManagerProfile_Action_o=snmpManagerProfile_Action_o, snmpv3TargetParamProfile_Name=snmpv3TargetParamProfile_Name, snmpProfile_ReadCommunity=snmpProfile_ReadCommunity, snmpProfile_SnmpMessageType=snmpProfile_SnmpMessageType, usmUserProfile_ReadWriteAccess=usmUserProfile_ReadWriteAccess, snmpManagerProfile_SnmpMessageType=snmpManagerProfile_SnmpMessageType, snmpProfile_Index_o=snmpProfile_Index_o, snmpv3TargetParamProfile_ActiveEnabled=snmpv3TargetParamProfile_ActiveEnabled, snmpv3NotifyProfile_Tag=snmpv3NotifyProfile_Tag, DisplayString=DisplayString, mibsnmpManagerProfileTable=mibsnmpManagerProfileTable, mibusmUserProfile=mibusmUserProfile, snmpProfile_Contact=snmpProfile_Contact, usmUserProfile_PrivProtocol=usmUserProfile_PrivProtocol, snmpProfile_ReadWriteEnabled=snmpProfile_ReadWriteEnabled, mibsnmpProfile=mibsnmpProfile, usmUserProfile_ActiveEnabled=usmUserProfile_ActiveEnabled, snmpv3NotifyProfile_ActiveEnabled=snmpv3NotifyProfile_ActiveEnabled, snmpv3NotifyProfile_Action_o=snmpv3NotifyProfile_Action_o, snmpProfile_EnforceAddressSecurity=snmpProfile_EnforceAddressSecurity, snmpManagerProfile_Name=snmpManagerProfile_Name, snmpv3TargetParamProfile_SecurityModel=snmpv3TargetParamProfile_SecurityModel, mibsnmpProfileTable=mibsnmpProfileTable, mibusmUserProfileTable=mibusmUserProfileTable, usmUserProfile_Name=usmUserProfile_Name, snmpProfile_BitStringsAllowed=snmpProfile_BitStringsAllowed, snmpProfile_QueueDepth=snmpProfile_QueueDepth, snmpProfile_NotificationLogAgeOut=snmpProfile_NotificationLogAgeOut, snmpProfile_Location=snmpProfile_Location, snmpv3TargetParamProfile_Action_o=snmpv3TargetParamProfile_Action_o, snmpManagerProfile_Active=snmpManagerProfile_Active, snmpProfile_SecurityLevel=snmpProfile_SecurityLevel, snmpProfile_Action_o=snmpProfile_Action_o, snmpv3TargetParamProfile_SecurityLevel=snmpv3TargetParamProfile_SecurityLevel, mibsnmpManagerProfileEntry=mibsnmpManagerProfileEntry, mibsnmpv3TargetParamProfileEntry=mibsnmpv3TargetParamProfileEntry, usmUserProfile_AuthProtocol=usmUserProfile_AuthProtocol)
