#
# PySNMP MIB module H3C-DISK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-DISK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
H3cStorageActionType, H3cStorageEnableState, h3cStorageRef = mibBuilder.importSymbols("H3C-STORAGE-REF-MIB", "H3cStorageActionType", "H3cStorageEnableState", "h3cStorageRef")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, ObjectIdentity, Gauge32, Counter64, MibIdentifier, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, iso, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "ObjectIdentity", "Gauge32", "Counter64", "MibIdentifier", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "iso", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cDisk = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3))
if mibBuilder.loadTexts: h3cDisk.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: h3cDisk.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cDisk.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cDisk.setDescription('This MIB describes the general information of disk device, include the running status, disk interface, and chche management.')
h3cDiskMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1))
h3cDiskTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1), )
if mibBuilder.loadTexts: h3cDiskTable.setStatus('current')
if mibBuilder.loadTexts: h3cDiskTable.setDescription('This table contains some entity extend information of the disk.')
h3cDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1), ).setIndexNames((0, "H3C-DISK-MIB", "h3cDiskIndex"))
if mibBuilder.loadTexts: h3cDiskEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDiskEntry.setDescription('An entry containing management information applicable to the disk.')
h3cDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cDiskIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDiskIndex.setDescription('This object identifies the entity index of disk. The object identified by this index is the same object as identified by the same value of entPhysicalIndex.')
h3cDiskPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sata", 1), ("pata", 2), ("sas", 3), ("scsi", 4), ("ieee1394", 5), ("fcal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskPortType.setStatus('current')
if mibBuilder.loadTexts: h3cDiskPortType.setDescription("This object describes the interface type of disk. The value 'sata' means serial advanced technology attachment. The value 'pata' means parallel advanced technology attachment. The value 'sas' means serial attached SCSI. The value 'scsi' means small computer system interface. The value 'ieee1394' means a type of bus standard. The value 'fcal' means fiber channel arbitrated loop.")
h3cDiskPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 3), Integer32()).setUnits('MB/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskPortSpeed.setStatus('current')
if mibBuilder.loadTexts: h3cDiskPortSpeed.setDescription('This object identifies the speed of disk interface. The units is million bytes per second.')
h3cDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskSize.setStatus('current')
if mibBuilder.loadTexts: h3cDiskSize.setDescription("This object describes the size of disk's total space. The units is million bytes.")
h3cDiskFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskFreeSpace.setStatus('current')
if mibBuilder.loadTexts: h3cDiskFreeSpace.setDescription('This object describes the size of spare space of the disk. The units is million bytes.')
h3cDiskLocationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 6), H3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDiskLocationState.setStatus('current')
if mibBuilder.loadTexts: h3cDiskLocationState.setDescription('This object identifies if the led used to confirm the position of disk is enable.')
h3cDiskRunLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("blink", 2), ("fastblink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskRunLedState.setStatus('current')
if mibBuilder.loadTexts: h3cDiskRunLedState.setDescription("This object identifies the runing state of the disk. The value of 'on' means the blue led is on, and the disk works well. The value of 'blink' means the blue led is blinking, and the disk is being readed or writed. The value of 'fastblink' means the blue led is blinking very fast, and the disk is being located. This object can not be 'fastblink' when the value of associated h3cDiskLocationState object is equal to 'disable'.")
h3cDiskFaultLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("blink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskFaultLedState.setStatus('current')
if mibBuilder.loadTexts: h3cDiskFaultLedState.setDescription("This object identifies the fault state of the disk. The value of 'off' means the yellow led is go out, and the disk works well. The value of 'on' means the yellow led is on, and the disk break down. The value of 'blink' means the yellow led is blinking, and a group of raid disk is being synchronized.")
h3cDiskInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 9), H3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDiskInitialize.setStatus('current')
if mibBuilder.loadTexts: h3cDiskInitialize.setDescription("The operation of initialize the disk. When the value of this object is set to 'action', the operation of disk initialize are touched off.")
h3cDiskGlobalSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("globalSpare", 1), ("nonglobalSpare", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDiskGlobalSpare.setStatus('current')
if mibBuilder.loadTexts: h3cDiskGlobalSpare.setDescription("This object identifies if the disk is a global hot spare disk. The value 'globalSpare' means it is a global spare disk, and the value 'nonglobalSpare' means not.")
h3cDiskLocalSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localSpare", 1), ("nonlocalSpare", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskLocalSpare.setStatus('current')
if mibBuilder.loadTexts: h3cDiskLocalSpare.setDescription("This object identifies if the disk is a specific hot spare disk. The value 'localSpare' means it is a local spare disk, and 'nonlocalSpare' means not.")
h3cDiskReadCache = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 12), H3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDiskReadCache.setStatus('current')
if mibBuilder.loadTexts: h3cDiskReadCache.setDescription('This object identifies the state of read cache.')
h3cDiskWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 13), H3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDiskWriteCache.setStatus('current')
if mibBuilder.loadTexts: h3cDiskWriteCache.setDescription('This object identifies the state of write cache.')
h3cDiskPowerOffReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("environmentUnstable", 1), ("mediumError", 2), ("smartCheckError", 3), ("generalError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDiskPowerOffReason.setStatus('current')
if mibBuilder.loadTexts: h3cDiskPowerOffReason.setDescription("This object describes the reason of disk poweroff. The value 'environmentUnstable' means disk poweroff and may poweron again. The value 'mediumError' means disk poweroff and never poweron. The value 'smartCheckError' means disk's SMART check failed and poweroff. The value 'generalError' means disk poweroff because of general error.")
mibBuilder.exportSymbols("H3C-DISK-MIB", h3cDiskPortSpeed=h3cDiskPortSpeed, h3cDiskRunLedState=h3cDiskRunLedState, PYSNMP_MODULE_ID=h3cDisk, h3cDiskGlobalSpare=h3cDiskGlobalSpare, h3cDiskWriteCache=h3cDiskWriteCache, h3cDiskPortType=h3cDiskPortType, h3cDiskLocationState=h3cDiskLocationState, h3cDiskPowerOffReason=h3cDiskPowerOffReason, h3cDiskIndex=h3cDiskIndex, h3cDiskLocalSpare=h3cDiskLocalSpare, h3cDiskEntry=h3cDiskEntry, h3cDiskFreeSpace=h3cDiskFreeSpace, h3cDiskReadCache=h3cDiskReadCache, h3cDiskInitialize=h3cDiskInitialize, h3cDisk=h3cDisk, h3cDiskFaultLedState=h3cDiskFaultLedState, h3cDiskTable=h3cDiskTable, h3cDiskMibObjects=h3cDiskMibObjects, h3cDiskSize=h3cDiskSize)
