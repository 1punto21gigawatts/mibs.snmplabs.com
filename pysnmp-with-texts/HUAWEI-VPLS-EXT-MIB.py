#
# PySNMP MIB module HUAWEI-VPLS-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-VPLS-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndexOrZero, ifName, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifName", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
IpAddress, NotificationType, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, ObjectIdentity, Counter64, ModuleIdentity, Bits, TimeTicks, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "ObjectIdentity", "Counter64", "ModuleIdentity", "Bits", "TimeTicks", "Integer32", "Counter32")
TruthValue, DateAndTime, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "RowStatus", "DisplayString", "TextualConvention")
VrId, = mibBuilder.importSymbols("VRRP-MIB", "VrId")
hwL2VpnVplsExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1))
if mibBuilder.loadTexts: hwL2VpnVplsExt.setLastUpdated('200704122100Z')
if mibBuilder.loadTexts: hwL2VpnVplsExt.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwL2VpnVplsExt.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwL2VpnVplsExt.setDescription('The HUAWEI-VPLS-EXT-MIB contains objects to manage VPLS.')
class HWL2VpnVcEncapsType(TextualConvention, Integer32):
    description = "An indication of the L2Vpn's VC encapsulation type: Frame Relay DLCI ( Martini Mode ) (1) ATM AAL5 SDU VCC transport (2) ATM transparent cell transport (3) Vlan (4) Ethernet (5) HDLC (6) PPP (7) SONET/SDH Circuit Emulation Service Over MPLS (CEM) (8) ATM n-to-one VCC cell transport (9) ATM n-to-one VPC cell transport (10) IP Layer2 Transport (11) ATM one-to-one VCC Cell Mode (12) ATM one-to-one VPC Cell Mode (13) ATM AAL5 PDU VCC transport (14) Frame-Relay Port mode (15) SONET/SDH Circuit Emulation over Packet (CEP) (16) Structure-agnostic E1 over Packet (SAE1oP) (17) Structure-agnostic T1 (DS1) over Packet (SAT1oP) (18) Structure-agnostic E3 over Packet (SAE3oP) (19) Structure-agnostic T3 (DS3) over Packet (SAT3oP) (20) CESoPSN basic mode (21) TDMoIP basic mode (22) CESoPSN TDM with CAS (23) TDMoIP TDM with CAS (24) Frame Relay DLCI (25) IP-interworking (64) unknown (255) "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 255))
    namedValues = NamedValues(("frameRelayDlciMartini", 1), ("atmAal5SduVccTransport", 2), ("atmTransparentCellTransport", 3), ("vlan", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("cem", 8), ("atmN2OneVccCellTransport", 9), ("atmN2OneVpcCellTransport", 10), ("ipLayer2Transport", 11), ("atmOne2OneVccCellMode", 12), ("atmOne2OneVpcCellMode", 13), ("atmAal5PduVccTransport", 14), ("frameRelayPortMode", 15), ("cep", 16), ("saE1oP", 17), ("saT1oP", 18), ("saE3oP", 19), ("saT3oP", 20), ("cESoPsnBasicMode", 21), ("tDMoIPbasicMode", 22), ("l2VpnCESoPSNTDMwithCAS", 23), ("l2VpnTDMoIPTDMwithCAS", 24), ("frameRelayDlci", 25), ("ipInterworking", 64), ("unknown", 255))

class HWEnableValue(TextualConvention, Integer32):
    description = 'Represents a boolean value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class HWL2VpnStateChangeReason(TextualConvention, Integer32):
    description = "The type indicates the reason of VC's or VSI's status change: Invalid reason type (1) VC Created (2) VC Deleted (3) LDP Session Down (4) LDP Session Up (5) LDP Same Mapping Received with different label or MTU (6) LDP Same Mapping Received Interface Parameter matching (7) LDP Mapping Received Inteface Parameter UnMatched(8) LDP Mapping Received UnPass CBit Check(9) LDP Mapping Received UnPass PW Loop Check(10) LDP New Mapping Received (11) LDP New Mapping Received but Remote VC Down(12) LDP Withdrawn Received (13) LDP Release Received (14) LDP Request Received (15) LDP GR End processing (16) RSVP message received (17) Interface Up (18) Interface Down (19) Interface encapsulation changed (20) Refresh (21) Download Again (22) Tunnel Up (23) Tunnel Down (24) VC state change when New RLB Received (25) RLB Deleted (26) VC created or turned to another remote CE (27) Out Interface in Invalid state (28) Out Interface in Valid now (29) LDP Notification Forwarding (30) LDP Notification Not-Forwarding (31) PW Restart (32) Download FTN&ILM for EthernetTrunk(33) AC OAM Fault Detect Disable(34) Remote AC Fault(35) Remote AC Fault Resume(36) Local AC Fault(37) Local AC Fault Resume(38) Remote PSN Fault(39) Remote PSN Fault Resume(40) Local PSN Fault(41) Local PSN Fault Resume(42) BFD for PW State Change to:Down(43) BFD for PW State Change to:Up(44) BFD for PW State Change to:Admin Down(45) BFD for PW Disable(46) Manual Set Enable(47) Manual Set Disable(48) Delay Time Out(49) Resume Time Out(50) VRRP Master(51) VRRP Backup(52) VRRP Init(53) VRRP Delete(54) Track VRRP(55) Undo track VRRP(56) Lsp Ping Time Out(57) VC State Down when New RLB was Received(58) MTU Matched(59) MTU Unmatched(60) VSI was shuted(61) VSI was resumed(62) Set Admin VSI(63) Undo set Admin VSI(64) "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64))
    namedValues = NamedValues(("invalidReason", 1), ("vcCreated", 2), ("vcDeleted", 3), ("ldpSessionDown", 4), ("ldpSessionUp", 5), ("receivedDifLabelOrMtu", 6), ("receivedIntfParaMatching", 7), ("receivedIntfParaUnMatched", 8), ("receivedUnPassCbitCheck", 9), ("receivedUnPassPwLoopCheck", 10), ("receivedNewMapping", 11), ("receivedNewMappingButRemoteVcDown", 12), ("receivedWithdrawn", 13), ("receivedLdpRelease", 14), ("receivedLdpRequest", 15), ("ldpGrEndProcessing", 16), ("receivedRsvpMessage", 17), ("interfaceUp", 18), ("interfaceDown", 19), ("interfaceEncapChanged", 20), ("refresh", 21), ("downloadAgain", 22), ("tunnelUp", 23), ("tunnelDown", 24), ("receivedNewRlb", 25), ("deletedRlb", 26), ("vcCreatedOrTurnedToAnother", 27), ("outInterInInvalidState", 28), ("outInterInValidNow", 29), ("ldpNotifiForward", 30), ("ldpNotifiNotForward", 31), ("pwRestart", 32), ("downloadFtnAndIlmForEthTrunk", 33), ("acOamFaultDetectDisable", 34), ("remoteAcFault", 35), ("remoteAcFaultResume", 36), ("localAcFault", 37), ("localAcFaultResume", 38), ("remotePsnFault", 39), ("remotePsnFaultResume", 40), ("localPsnFault", 41), ("localPsnFaultResume", 42), ("bfdForPwStateChangeToDown", 43), ("bfdForPwStateChangeToUp", 44), ("bfdForPwStateChangeToAdminDown", 45), ("bfdForPwDisable", 46), ("manualSetEnable", 47), ("manualSetDisable", 48), ("delayTimeOut", 49), ("resumeTimeOut", 50), ("vrrpMaster", 51), ("vrrpBackup", 52), ("vrrpInit", 53), ("vrrpDelete", 54), ("vrrpTrack", 55), ("undoVrrpTrack", 56), ("lspPingTimeOut", 57), ("vcDownWhenReceivedNewRLB", 58), ("mtuMatched", 59), ("mtuUnmatched", 60), ("vsiShut", 61), ("vsiResume", 62), ("setAdminVSI", 63), ("undosetAdminVSI", 64))

hwL2Vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119))
hwVplsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1))
hwVplsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1), )
if mibBuilder.loadTexts: hwVplsTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsTable.setDescription("This table is the VPLS's configuration table. Users can create or delete the VSI by it.")
hwVplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"))
if mibBuilder.loadTexts: hwVplsEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsEntry.setDescription('Provides the information of a VPLS entry.')
hwVplsVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwVplsVsiName.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiName.setDescription("This object indicates the VSI's name.")
hwVplsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ldp", 1), ("bgp", 2), ("unknown", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsSignal.setStatus('current')
if mibBuilder.loadTexts: hwVplsSignal.setDescription('This object indicates the signal type. If the signal type is LDP, VSI-ID must be designated. If the signal type is BGP, RD must be designated. The default value is unknown(255).')
hwVplsRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 21), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsRD.setStatus('current')
if mibBuilder.loadTexts: hwVplsRD.setDescription('This object indicates the Route Distinguisher.')
hwVplsVsiID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsVsiID.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiID.setDescription('This object indicates the VSI id. The default value is 0.')
hwVplsVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 5), HWL2VpnVcEncapsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsVcType.setStatus('current')
if mibBuilder.loadTexts: hwVplsVcType.setDescription("This object indicates the VC's encapsulation type.")
hwVplsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("admindown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatus.setDescription("This object indicates the VPLS's status.")
hwVplsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(328, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsMtu.setStatus('current')
if mibBuilder.loadTexts: hwVplsMtu.setDescription("This object indicates the VPLS's MTU.The default value is 1500.")
hwVplsTunnelPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsTunnelPolicy.setStatus('current')
if mibBuilder.loadTexts: hwVplsTunnelPolicy.setDescription('This object indicates the tunnel policy.')
hwVplsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsDescription.setStatus('current')
if mibBuilder.loadTexts: hwVplsDescription.setDescription('This object indicates the description information.')
hwVplsLearnStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qualify", 1), ("unqualify", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLearnStyle.setStatus('current')
if mibBuilder.loadTexts: hwVplsLearnStyle.setDescription('This object indicates the style of learning the MAC address.')
hwVplsMacLearnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 11), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsMacLearnEnable.setStatus('current')
if mibBuilder.loadTexts: hwVplsMacLearnEnable.setDescription('This object indicates the enable sign of learning the MAC address.')
hwVplsMacLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 12), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsMacLimitEnable.setStatus('current')
if mibBuilder.loadTexts: hwVplsMacLimitEnable.setDescription('This object indicates the enable sign of the MAC addresses number limit.')
hwVplsStatisticsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 13), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsStatisticsEnable.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatisticsEnable.setDescription('This object indicates the enable sign of statistics.')
hwVplsUnknowMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("drop", 2), ("localHandle", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsUnknowMulticast.setStatus('current')
if mibBuilder.loadTexts: hwVplsUnknowMulticast.setDescription('This object indicates the processing mode when the multicast MAC entry not found in FDB.')
hwVplsUnknowUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("drop", 2), ("localHandle", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsUnknowUnicast.setStatus('current')
if mibBuilder.loadTexts: hwVplsUnknowUnicast.setDescription('This object indicates the processing mode when the unicast MAC entry not found in FDB.')
hwVplsPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsPreference.setStatus('current')
if mibBuilder.loadTexts: hwVplsPreference.setDescription('This object indicates the preference.The default value is 0.')
hwVplsVsiType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operationVsi", 1), ("adminVsi", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsVsiType.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiType.setDescription("This object indicates the VSI's type.")
hwVplsAdminVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsAdminVsiName.setStatus('current')
if mibBuilder.loadTexts: hwVplsAdminVsiName.setDescription("This object indicates the AdminVsi's name this VSI binding to")
hwVplsAcIsolateFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 19), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsAcIsolateFlag.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcIsolateFlag.setDescription('This object indicates whether the AC in the VSI is isolated')
hwVplsDiffServMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pipe", 1), ("shortpipe", 2), ("uniform", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsDiffServMode.setStatus('current')
if mibBuilder.loadTexts: hwVplsDiffServMode.setDescription('Different service mode of the interface binding of vsi , default is uniform.')
hwVplsDiffServServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8), ("invalidClass", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsDiffServServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwVplsDiffServServiceClass.setDescription('PHB in the ingress PE, the value must be be,f1,af2,af3,af4,ef,cs6,cs7.The default value is invalidClass(255).')
hwVplsDiffServColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3), ("invalidColor", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsDiffServColor.setStatus('current')
if mibBuilder.loadTexts: hwVplsDiffServColor.setDescription('Remarked color of packet in the ingress PE, the value must be green,yellow,red.The default value is invalidColor(255).')
hwVplsDiffServDSName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsDiffServDSName.setStatus('current')
if mibBuilder.loadTexts: hwVplsDiffServDSName.setDescription('Name of different service domain')
hwVplsInterfaceWithdraw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 24), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsInterfaceWithdraw.setStatus('current')
if mibBuilder.loadTexts: hwVplsInterfaceWithdraw.setDescription('Enable VSI send LDP mac-withdraw when VSI receive interface status changes event.')
hwVplsUpe2NpeWithdraw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 25), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsUpe2NpeWithdraw.setStatus('current')
if mibBuilder.loadTexts: hwVplsUpe2NpeWithdraw.setDescription('VSI forward message to all the NPE when VSI receive message from UPE.')
hwVplsUpe2UpeWithdraw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 26), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsUpe2UpeWithdraw.setStatus('current')
if mibBuilder.loadTexts: hwVplsUpe2UpeWithdraw.setDescription('VSI forward message to all the other UPE when VSI receive message from UPE.')
hwVplsNpe2UpeWithdraw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 27), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsNpe2UpeWithdraw.setStatus('current')
if mibBuilder.loadTexts: hwVplsNpe2UpeWithdraw.setDescription('VSI forward message to all the UPE when VSI receive message from NPE.')
hwVplsDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("auto", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsDiscovery.setStatus('current')
if mibBuilder.loadTexts: hwVplsDiscovery.setDescription('This object indicates the discovery type. If the discovery type is static, the signal must be LDP. If the discovery type is auto, the signal must be BGP.')
hwVplsMacWithdrawEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 29), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsMacWithdrawEnable.setStatus('current')
if mibBuilder.loadTexts: hwVplsMacWithdrawEnable.setDescription('This object indicates the enable sign of the MAC address withdraw.')
hwVplsVsiCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 30), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsVsiCir.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiCir.setDescription('This object indicates the committed information rate, based on VSI.')
hwVplsVsiPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsVsiPir.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiPir.setDescription('This object indicates the peak information rate, based on VSI.')
hwVplsVsiQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsVsiQosProfileName.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiQosProfileName.setDescription("This object indicates the QoS profile's name, based on VSI.")
hwVplsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsAdminStatus.setDescription("This object indicates the VSI's admin status.")
hwVplsIgnoreAcState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 34), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsIgnoreAcState.setStatus('current')
if mibBuilder.loadTexts: hwVplsIgnoreAcState.setDescription('This object indicates the enable sign of the ignorer of AC state.')
hwVplsEnableStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 35), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsEnableStatistic.setStatus('current')
if mibBuilder.loadTexts: hwVplsEnableStatistic.setDescription("The enable sign of VSI's traffic statistics.")
hwVplsResetStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetStatistic", 1), ("unknownStatus", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsResetStatistic.setStatus('current')
if mibBuilder.loadTexts: hwVplsResetStatistic.setDescription('Reset traffic statistics of VSI.')
hwVplsResetStatisticTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsResetStatisticTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsResetStatisticTime.setDescription('Last time of clean out.')
hwVplsAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsAgingTime.setDescription('The aging time of the VSI MAC address.')
hwVplsUnknowUnicastMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 39), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsUnknowUnicastMacLearning.setStatus('current')
if mibBuilder.loadTexts: hwVplsUnknowUnicastMacLearning.setDescription('The value of this object identifies whether the MAC address learning function for the discarded unknown unicast packets is enabled.')
hwVplsFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 40), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsFlowLabel.setStatus('current')
if mibBuilder.loadTexts: hwVplsFlowLabel.setDescription('The value of this object identifies whether the PW FlowLabel is enabled.')
hwVplsServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsServiceName.setStatus('current')
if mibBuilder.loadTexts: hwVplsServiceName.setDescription('The service name of the VSI')
hwVplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsRowStatus.setDescription('RowStatus for this Table. Restriction: After the signal type, VSI ID and RD are configured, the configuration can not be modify or delete.')
hwVplsRtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 2), )
if mibBuilder.loadTexts: hwVplsRtTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsRtTable.setDescription('This table is the configuration table of VPN Target. Users can create or delete the VPN Target of a VSI.')
hwVplsRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsRtType"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsRtName"))
if mibBuilder.loadTexts: hwVplsRtEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsRtEntry.setDescription('Provides the information of a RT entry.')
hwVplsRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2))))
if mibBuilder.loadTexts: hwVplsRtType.setStatus('current')
if mibBuilder.loadTexts: hwVplsRtType.setDescription("This object indicates the VC's encapsulation type.")
hwVplsRtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 21)))
if mibBuilder.loadTexts: hwVplsRtName.setStatus('current')
if mibBuilder.loadTexts: hwVplsRtName.setDescription('This object indicates the RT.')
hwVplsRtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsRtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsRtRowStatus.setDescription('RowStatus for this Table. The max number of entries supported is 16. Not support modifying configuration.')
hwVplsAcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 3), )
if mibBuilder.loadTexts: hwVplsAcTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcTable.setDescription('This table is the configuration table of AC. Users can create or delete the AC of a VSI.')
hwVplsAcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsAcIfIndex"))
if mibBuilder.loadTexts: hwVplsAcEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcEntry.setDescription('Provides the information of a AC entry.')
hwVplsAcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwVplsAcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcIfIndex.setDescription('This object indicates the interface index. There is only one VSI that can be created in one interface.')
hwVplsAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsAcStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcStatus.setDescription("This object indicates the AC's status.")
hwVplsAcUpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsAcUpStartTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcUpStartTime.setDescription('Specifies the time this AC status has been Up(1).')
hwVplsAcUpSumTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsAcUpSumTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcUpSumTime.setDescription('Specifies the cumulate time this AC status has been Up(1).')
hwVplsAcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 3, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsAcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcRowStatus.setDescription('RowStatus for this Table. Not support modifying configuration.')
hwVplsBgpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 4), )
if mibBuilder.loadTexts: hwVplsBgpInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpInfoTable.setDescription('This table is the configuration table of BGP information. Users can create or delete the BgpInfo entry.')
hwVplsBgpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsBgpInfoSiteID"))
if mibBuilder.loadTexts: hwVplsBgpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpInfoEntry.setDescription('Provides the information of a BgpInfo entry.')
hwVplsBgpInfoSiteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hwVplsBgpInfoSiteID.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpInfoSiteID.setDescription('This object indicates the site ID.')
hwVplsBgpInfoRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsBgpInfoRange.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpInfoRange.setDescription('This object indicates the range.')
hwVplsBgpInfoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsBgpInfoOffset.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpInfoOffset.setDescription('Default original CE offset, default value is 0, calculate the VC in/out label.')
hwVplsBgpInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsBgpInfoRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpInfoRowStatus.setDescription("RowStatus for this Table. Restriction: Support creating only one entry currently. Before creating, the corresponding VSI's RD and signal type must be designated. The signal type must be BGP. Site can not be modified. Range can increase, but can't decrease.")
hwVplsPwTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5), )
if mibBuilder.loadTexts: hwVplsPwTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwTable.setDescription('This table is the configuration table of PW. Users can create or delete the PW entry.')
hwVplsPwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsPwID"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsPwRemoteIp"))
if mibBuilder.loadTexts: hwVplsPwEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwEntry.setDescription('Provides the information of a PW entry.')
hwVplsPwID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwVplsPwID.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwID.setDescription('This object indicates the PW ID.')
hwVplsPwRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwVplsPwRemoteIp.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwRemoteIp.setDescription('This object indicates the IP address of the remote end.')
hwVplsPwTnlPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsPwTnlPolicy.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwTnlPolicy.setDescription('This object indicates the tunnel policy.')
hwVplsPwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("other", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsPwType.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwType.setDescription('This object indicates the PW type.')
hwVplsPwIsUpe = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsPwIsUpe.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwIsUpe.setDescription('This object indicates the VPLS is UPE or not.')
hwVplsPwInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsPwInboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwInboundLabel.setDescription('This object indicates the inbound label.')
hwVplsPwOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsPwOutboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwOutboundLabel.setDescription('This object indicates the outbound label.')
hwVplsPwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("plugout", 3), ("backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsPwStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwStatus.setDescription("This object indicates the PW's status.")
hwVplsPwVrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 9), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsPwVrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwVrIfIndex.setDescription('This object indicates the VRRP interface this PW binding to.')
hwVplsPwVrID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsPwVrID.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwVrID.setDescription('This object indicates the VrID this PW binding to.')
hwVplsPwUpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsPwUpStartTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwUpStartTime.setDescription('Specifies the time this PW status was Up(1).')
hwVplsPwUpSumTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsPwUpSumTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwUpSumTime.setDescription('Specifies the cumulate time this PW status has been Up(1).')
hwVplsPwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 5, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsPwRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwRowStatus.setDescription('RowStatus for this Table. Restriction: Not support creating or modifying entry currently. If the signal type is LDP, we can delete PW by deleting Peer. If the signal type is BGP, we can delete PW by configuring RD. If the signal type is LDP, we need import PW ID value. If the signal type is BGP, we can import 0 as PW ID value.')
hwVplsStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 6), )
if mibBuilder.loadTexts: hwVplsStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatisticsTable.setDescription("This table contains the VPLS's packets Statistic.")
hwVplsStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"))
if mibBuilder.loadTexts: hwVplsStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatisticsEntry.setDescription("Provides the information of the VPLS's packets statistic.")
hwVplsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsOutFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsOutFrames.setDescription('The total number of frames transmitted out of the VSI.')
hwVplsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsInFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsInFrames.setDescription('The total number of frames received on the VSI.')
hwVplsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwVplsOutBytes.setDescription('The total number of bytes transmitted out of the VSI.')
hwVplsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsInBytes.setStatus('current')
if mibBuilder.loadTexts: hwVplsInBytes.setDescription('The total number of bytes received on the VSI.')
hwVplsInDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsInDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsInDiscardFrames.setDescription('The total number of frames received and then discarded on the VSI.')
hwVplsUpDownNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 7), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVplsUpDownNotifEnable.setStatus('obsolete')
if mibBuilder.loadTexts: hwVplsUpDownNotifEnable.setDescription('This object indicates the enable sign of VPLS notification. The default value is disable (2).')
hwVplsStateChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 8), HWL2VpnStateChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVplsStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: hwVplsStateChangeReason.setDescription('This object indicates the reason of VC state change.')
hwVplsLdpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9), )
if mibBuilder.loadTexts: hwVplsLdpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatisticsTable.setDescription("This table contains the VPLS-PW's Traffic Statistic.")
hwVplsLdpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatPwID"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatRemoteIpAddr"))
if mibBuilder.loadTexts: hwVplsLdpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatisticsEntry.setDescription("Provides the information of the VPLS-PW's Traffic Statistic.")
hwVplsLdpStatPwID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwVplsLdpStatPwID.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatPwID.setDescription('This object indicates the PW ID.')
hwVplsLdpStatRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwVplsLdpStatRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatRemoteIpAddr.setDescription('This object indicates the IP address of the remote end.')
hwVplsLdpStatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 3), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVplsLdpStatEnable.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatEnable.setDescription("This object indicates the enable sign of LDP VPLS-PW's traffic statistics.")
hwVplsLdpStatInTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInTrafficRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInTrafficRate.setDescription('The traffic rate received on the PW.')
hwVplsLdpStatOutTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutTrafficRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutTrafficRate.setDescription('The traffic rate transmitted out of the PW.')
hwVplsLdpStatInFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInFrameRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInFrameRate.setDescription('The rate of Frames received on the PW.')
hwVplsLdpStatOutFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutFrameRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutFrameRate.setDescription('The rate of Frames transmitted out of the PW.')
hwVplsLdpStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInBytes.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInBytes.setDescription('The total number of bytes received on the PW.')
hwVplsLdpStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutBytes.setDescription('The total number of bytes transmitted out of the PW.')
hwVplsLdpStatInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInFrames.setDescription('The total number of frames received on the PW.')
hwVplsLdpStatOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutFrames.setDescription('The total number of frames transmitted out of the PW.')
hwVplsLdpStatInUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInUnicastFrames.setDescription('The total number of unicast frames received on the PW.')
hwVplsLdpStatOutUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutUnicastFrames.setDescription('The total number of unicast frames transmitted out of the PW.')
hwVplsLdpStatInMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInMulticastFrames.setDescription('The total number of multicast frames received on the PW.')
hwVplsLdpStatOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutMulticastFrames.setDescription('The total number of multicast frames transmitted out of the PW.')
hwVplsLdpStatInBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInBroadcastFrames.setDescription('The total number of broadcast frames received on the PW.')
hwVplsLdpStatOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutBroadcastFrames.setDescription('The total number of broadcast frames transmitted out of the PW.')
hwVplsLdpStatInDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInDiscardFrames.setDescription('The total number of frames received and then discarded on the PW.')
hwVplsLdpStatOutDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutDiscardFrames.setDescription('The total number of frames transmitted out and then discarded on the PW.')
hwVplsLdpStatInErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInErrorFrames.setDescription('The total number of error frames received on the PW.')
hwVplsLdpStatOutErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatOutErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatOutErrorFrames.setDescription('The total number of error frames transmitted out of the PW.')
hwVplsLdpStatInUnknowFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatInUnknowFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatInUnknowFrames.setDescription('The total number of unknown frames received on the PW.')
hwVplsLdpStatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpStatResetTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatResetTime.setDescription('Last time of clean out.')
hwVplsLdpStatResetStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVplsLdpStatResetStatistic.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatResetStatistic.setDescription("Reset traffic statistics of VSI's LDP peer.")
hwVplsBgpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10), )
if mibBuilder.loadTexts: hwVplsBgpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatisticsTable.setDescription("This table contains the VPLS-PW's Traffic Statistic.")
hwVplsBgpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatSiteID"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatRemoteIpAddr"))
if mibBuilder.loadTexts: hwVplsBgpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatisticsEntry.setDescription("Provides the information of the VPLS-PW's Traffic Statistic.")
hwVplsBgpStatSiteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwVplsBgpStatSiteID.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatSiteID.setDescription('This object indicates the Site ID.')
hwVplsBgpStatRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwVplsBgpStatRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatRemoteIpAddr.setDescription('This object indicates the IP address of the remote end.')
hwVplsBgpStatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 3), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVplsBgpStatEnable.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatEnable.setDescription("This object indicates the enable sign of BGP VPLS-PW's traffic statistics.")
hwVplsBgpStatInTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInTrafficRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInTrafficRate.setDescription('The traffic rate received on the PW.')
hwVplsBgpStatOutTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutTrafficRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutTrafficRate.setDescription('The traffic rate transmitted out of the PW.')
hwVplsBgpStatInFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInFrameRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInFrameRate.setDescription('The rate of Frames received on the PW.')
hwVplsBgpStatOutFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutFrameRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutFrameRate.setDescription('The rate of Frames transmitted out of the PW.')
hwVplsBgpStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInBytes.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInBytes.setDescription('The total number of bytes received on the PW.')
hwVplsBgpStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutBytes.setDescription('The total number of bytes transmitted out of the PW.')
hwVplsBgpStatInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInFrames.setDescription('The total number of frames received on the PW.')
hwVplsBgpStatOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutFrames.setDescription('The total number of frames transmitted out of the PW.')
hwVplsBgpStatInUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInUnicastFrames.setDescription('The total number of unicast frames received on the PW.')
hwVplsBgpStatOutUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutUnicastFrames.setDescription('The total number of unicast frames transmitted out of the PW.')
hwVplsBgpStatInMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInMulticastFrames.setDescription('The total number of multicast frames received on the PW.')
hwVplsBgpStatOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutMulticastFrames.setDescription('The total number of multicast frames transmitted out of the PW.')
hwVplsBgpStatInBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInBroadcastFrames.setDescription('The total number of broadcast frames received on the PW.')
hwVplsBgpStatOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutBroadcastFrames.setDescription('The total number of broadcast frames transmitted out of the PW.')
hwVplsBgpStatInDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInDiscardFrames.setDescription('The total number of frames received and then discarded on the PW.')
hwVplsBgpStatOutDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutDiscardFrames.setDescription('The total number of frames transmitted out and then discarded on the PW.')
hwVplsBgpStatInErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInErrorFrames.setDescription('The total number of error frames received on the PW.')
hwVplsBgpStatOutErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatOutErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatOutErrorFrames.setDescription('The total number of error frames transmitted out of the PW.')
hwVplsBgpStatInUnknowFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatInUnknowFrames.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatInUnknowFrames.setDescription('The total number of unknown frames received on the PW.')
hwVplsBgpStatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 10, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsBgpStatResetTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatResetTime.setDescription('Last time of clean out.')
hwVplsLdpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11), )
if mibBuilder.loadTexts: hwVplsLdpPeerTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerTable.setDescription("This table is the configuration table of VPLS's LDP peer. Users can create or delete the LDP peer entry.")
hwVplsLdpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerRouterID"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerPwId"))
if mibBuilder.loadTexts: hwVplsLdpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerEntry.setDescription('Provides the information of a LDP peer entry.')
hwVplsLdpPeerRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwVplsLdpPeerRouterID.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerRouterID.setDescription('This object indicates the IP address of the LDP peer.')
hwVplsLdpPeerPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwVplsLdpPeerPwId.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerPwId.setDescription('This object indicates the PW ID.')
hwVplsLdpPeerTnlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerTnlPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerTnlPolicyName.setDescription('This object indicates the name of tunnel policy.')
hwVplsLdpPeerUpeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upe", 1), ("staticupe", 2), ("unknown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerUpeType.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerUpeType.setDescription('This object indicates the VPLS is UPE , static UPE or not.')
hwVplsLdpPeerTransLable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerTransLable.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerTransLable.setDescription('This object indicates the transmitted label.')
hwVplsLdpPeerRecvLable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerRecvLable.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerRecvLable.setDescription('This object indicates the received label.')
hwVplsLdpPeerVrrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerVrrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerVrrpIfIndex.setDescription('This object indicates the VRRP interface this PW binding to.')
hwVplsLdpPeerVirtualRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerVirtualRouterId.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerVirtualRouterId.setDescription('This object indicates the virtual router ID this PW binding to.')
hwVplsLdpPeerCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerCir.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerCir.setDescription('This object indicates the committed information rate, based on the LDP peer.')
hwVplsLdpPeerPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerPir.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerPir.setDescription('This object indicates the peak information rate, based on the LDP peer.')
hwVplsLdpPeerQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerQosProfileName.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerQosProfileName.setDescription("This object indicates the QoS profile's name, based on the LDP peer.")
hwVplsLdpPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("plugout", 3), ("backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpPeerStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerStatus.setDescription("This object indicates the LDP peer's status.")
hwVplsLdpPeerPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerPwName.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerPwName.setDescription('This object indicates the name of PW.')
hwVplsLdpPeerIgnoreStpLoopCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 14), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerIgnoreStpLoopCheck.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerIgnoreStpLoopCheck.setDescription('This object indicates the enable sign of the ignorer of STP loop check.')
hwVplsLdpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 11, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsLdpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerRowStatus.setDescription('Row status for this Table.')
hwVplsLdpQosStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12), )
if mibBuilder.loadTexts: hwVplsLdpQosStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatisticTable.setDescription("This table contains the VPLS LDP's traffic statistic, based on VSI LDP's peer and QoS.")
hwVplsLdpQosStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatPwId"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatRemoteIpAddr"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatQueueId"))
if mibBuilder.loadTexts: hwVplsLdpQosStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatisticEntry.setDescription("Provides the information of the VPLS LDP's traffic statistic.")
hwVplsLdpQosStatPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwVplsLdpQosStatPwId.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatPwId.setDescription('The PW ID.')
hwVplsLdpQosStatRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwVplsLdpQosStatRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatRemoteIpAddr.setDescription('The IP address of the remote end.')
hwVplsLdpQosStatQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwVplsLdpQosStatQueueId.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatQueueId.setDescription("The queue's ID. The value must be be,af1,af2,af3,af4,ef,cs6,cs7.")
hwVplsLdpQosStatTotalPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalPassPacket.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalPassPacket.setDescription('Number of total passed packets, based on LDP peer and QoS.')
hwVplsLdpQosStatTotalPassByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalPassByte.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalPassByte.setDescription('Number of total passed bytes, based on LDP peer and QoS.')
hwVplsLdpQosStatTotalDiscardPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalDiscardPacket.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalDiscardPacket.setDescription('Number of total discarded packets, based on LDP peer and QoS.')
hwVplsLdpQosStatTotalDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalDiscardByte.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatTotalDiscardByte.setDescription('Number of total discarded bytes, based on LDP peer and QoS.')
hwVplsLdpQosStatPassPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatPassPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatPassPacketRate.setDescription('Rate of passed packets for the last 30 seconds, based on LDP peer and QoS. Unit: pps')
hwVplsLdpQosStatPassByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatPassByteRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatPassByteRate.setDescription('Rate of passed bytes for the last 30 seconds, based on LDP peer and QoS. Unit: bps')
hwVplsLdpQosStatDiscardPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatDiscardPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatDiscardPacketRate.setDescription('Rate of discarded packets for the last 30 seconds, based on LDP peer and QoS. Unit: pps')
hwVplsLdpQosStatDiscardByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 12, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLdpQosStatDiscardByteRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatDiscardByteRate.setDescription('Rate of discarded bytes for the last 30 seconds, based on LDP peer and QoS. Unit: bps')
hwVplsStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13), )
if mibBuilder.loadTexts: hwVplsStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatisticTable.setDescription("This table contains the VPLS's traffic statistic, based on VSI.")
hwVplsStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"))
if mibBuilder.loadTexts: hwVplsStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatisticEntry.setDescription("Provides the information of the VPLS's traffic statistic.")
hwVplsStatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVplsStatEnable.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatEnable.setDescription("This object indicates the enable sign of VSI's traffic statistics.")
hwVplsStatResetStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVplsStatResetStatistic.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatResetStatistic.setDescription('Reset traffic statistics of VSI.')
hwVplsStatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsStatResetTime.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatResetTime.setDescription('Last time of clean out.')
hwVplsStatQosPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsStatQosPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatQosPacketRate.setDescription('The rate of packets received on the VSI.')
hwVplsStatQosByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsStatQosByteRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatQosByteRate.setDescription('The rate of bytes received on the VSI.')
hwVplsStatQosPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsStatQosPacket.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatQosPacket.setDescription('The total number of packets received on the VSI.')
hwVplsStatQosByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsStatQosByte.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatQosByte.setDescription('The total number of bytes received on the VSI.')
hwVplsQosStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14), )
if mibBuilder.loadTexts: hwVplsQosStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatisticTable.setDescription("This table contains the VPLS's traffic statistic, based on VSI and QoS.")
hwVplsQosStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1), ).setIndexNames((0, "HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatQueueId"))
if mibBuilder.loadTexts: hwVplsQosStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatisticEntry.setDescription("Provides the information of the VPLS's traffic statistics.")
hwVplsQosStatQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwVplsQosStatQueueId.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatQueueId.setDescription("The queue's ID. The value must be be,af1,af2,af3,af4,ef,cs6,cs7.")
hwVplsQosStatTotalPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatTotalPassPacket.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatTotalPassPacket.setDescription('Number of total passed packets, based on VSI and QoS.')
hwVplsQosStatTotalPassByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatTotalPassByte.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatTotalPassByte.setDescription('Number of total passed bytes, based on VSI and QoS.')
hwVplsQosStatTotalDiscardPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatTotalDiscardPacket.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatTotalDiscardPacket.setDescription('Number of total discarded packets, based on VSI and QoS.')
hwVplsQosStatTotalDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatTotalDiscardByte.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatTotalDiscardByte.setDescription('Number of total discarded bytes, based on VSI and QoS.')
hwVplsQosStatPassPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatPassPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatPassPacketRate.setDescription('Rate of passed packets for the last 30 seconds, based on VSI and QoS. Unit: pps')
hwVplsQosStatPassByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatPassByteRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatPassByteRate.setDescription('Rate of passed bytes for the last 30 seconds, based on VSI and QoS. Unit: bps')
hwVplsQosStatDiscardPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatDiscardPacketRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatDiscardPacketRate.setDescription('Rate of discarded packets for the last 30 seconds, based on VSI and QoS. Unit: pps')
hwVplsQosStatDiscardByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 1, 14, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsQosStatDiscardByteRate.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatDiscardByteRate.setDescription('Rate of discarded bytes for the last 30 seconds, based on VSI and QoS. Unit: bps')
hwVplsMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2))
hwVplsVcDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2, 1)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsPwType"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStateChangeReason"), ("SNMPv2-MIB", "sysUpTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwTnlPolicy"))
if mibBuilder.loadTexts: hwVplsVcDown.setStatus('current')
if mibBuilder.loadTexts: hwVplsVcDown.setDescription("This notification indicates the VC's state changes to down.")
hwVplsVcUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2, 2)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsPwType"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStateChangeReason"), ("SNMPv2-MIB", "sysUpTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwTnlPolicy"))
if mibBuilder.loadTexts: hwVplsVcUp.setStatus('current')
if mibBuilder.loadTexts: hwVplsVcUp.setDescription("This notification indicates the VC's state changes to up.")
hwVplsVsiDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2, 3)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiID"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStateChangeReason"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwVplsVsiDown.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiDown.setDescription("This notification indicates the VSI's state changes to down.")
hwVplsVsiUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2, 4)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiID"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStateChangeReason"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwVplsVsiUp.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiUp.setDescription("This notification indicates the VSI's state changes to up.")
hwVplsVcBackup = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2, 5)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsPwType"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStateChangeReason"), ("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: hwVplsVcBackup.setStatus('current')
if mibBuilder.loadTexts: hwVplsVcBackup.setDescription("This notification indicates the VC's state changes to backup.")
hwVplsVsiDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2, 6)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiID"))
if mibBuilder.loadTexts: hwVplsVsiDeleted.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiDeleted.setDescription('This notification indicates the VSI is deleted.')
hwVplsVcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 2, 7)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsPwType"))
if mibBuilder.loadTexts: hwVplsVcDeleted.setStatus('current')
if mibBuilder.loadTexts: hwVplsVcDeleted.setDescription('This notification indicates the VC is deleted.')
hwVplsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3))
hwVplsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 1))
hwVplsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 1, 1)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsRtGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAcGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpInfoGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatisticsGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsNotificationControlGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStateReasonGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsNotificationGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatisticsGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatisticsGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatisticGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatisticGroup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatisticGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsMIBCompliance = hwVplsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwVplsMIBCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-VPLS-EXT-MIB.')
hwVplsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2))
hwVplsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 1)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsSignal"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsRD"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiID"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVcType"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatus"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsMtu"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsTunnelPolicy"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsDescription"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLearnStyle"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsMacLearnEnable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsMacLimitEnable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatisticsEnable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsUnknowMulticast"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsUnknowUnicast"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPreference"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiType"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAdminVsiName"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAcIsolateFlag"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsDiffServMode"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsDiffServServiceClass"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsDiffServColor"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsDiffServDSName"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsInterfaceWithdraw"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsUpe2NpeWithdraw"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsUpe2UpeWithdraw"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsNpe2UpeWithdraw"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsDiscovery"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsMacWithdrawEnable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiCir"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiPir"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiQosProfileName"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAdminStatus"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsIgnoreAcState"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsEnableStatistic"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsResetStatistic"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsResetStatisticTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAgingTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsUnknowUnicastMacLearning"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsFlowLabel"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsServiceName"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsGroup = hwVplsGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsGroup.setDescription('The VPLS group.')
hwVplsRtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 2)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsRtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsRtGroup = hwVplsRtGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsRtGroup.setDescription("The VPLS's RT group.")
hwVplsAcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 3)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsAcStatus"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAcUpStartTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAcUpSumTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsAcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsAcGroup = hwVplsAcGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsAcGroup.setDescription("The VPLS's AC group.")
hwVplsBgpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 4)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpInfoRange"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpInfoOffset"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpInfoRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsBgpInfoGroup = hwVplsBgpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpInfoGroup.setDescription("The VPLS's BGP information group.")
hwVplsPwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 5)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsPwTnlPolicy"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwType"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwIsUpe"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwInboundLabel"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwOutboundLabel"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwStatus"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwVrIfIndex"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwVrID"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwUpStartTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwUpSumTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsPwRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsPwGroup = hwVplsPwGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsPwGroup.setDescription("The VPLS's PW group.")
hwVplsStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 6)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsOutFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsInFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsOutBytes"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsInBytes"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsInDiscardFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsStatisticsGroup = hwVplsStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatisticsGroup.setDescription("The VPLS's Statistic group.")
hwVplsNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 7)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsUpDownNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsNotificationControlGroup = hwVplsNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsNotificationControlGroup.setDescription("The VPLS's Notification Control group.")
hwVplsStateReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 8)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsStateChangeReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsStateReasonGroup = hwVplsStateReasonGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsStateReasonGroup.setDescription("The VPLS's VC and VSI State Change Reason group.")
hwVplsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 9)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsVcDown"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVcUp"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiDown"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiUp"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVcBackup"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiDeleted"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsVcDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsNotificationGroup = hwVplsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsNotificationGroup.setDescription('The VPLS Notification group.')
hwVplsLdpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 10)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatEnable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInTrafficRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutTrafficRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInFrameRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutFrameRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInBytes"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutBytes"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInUnicastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutUnicastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInMulticastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutMulticastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInBroadcastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutBroadcastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInDiscardFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutDiscardFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInErrorFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatOutErrorFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatInUnknowFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatResetTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpStatResetStatistic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsLdpStatisticsGroup = hwVplsLdpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpStatisticsGroup.setDescription("The VPLS Ldp's Statistic group.")
hwVplsBgpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 11)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatEnable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInTrafficRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutTrafficRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInFrameRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutFrameRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInBytes"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutBytes"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInUnicastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutUnicastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInMulticastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutMulticastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInBroadcastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutBroadcastFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInDiscardFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutDiscardFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInErrorFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatOutErrorFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatInUnknowFrames"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsBgpStatResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsBgpStatisticsGroup = hwVplsBgpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsBgpStatisticsGroup.setDescription("The VPLS Bgp's Statistic group.")
hwVplsLdpPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 12)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerTnlPolicyName"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerUpeType"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerTransLable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerRecvLable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerVrrpIfIndex"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerVirtualRouterId"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerCir"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerPir"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerQosProfileName"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerStatus"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerPwName"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerIgnoreStpLoopCheck"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpPeerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsLdpPeerGroup = hwVplsLdpPeerGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpPeerGroup.setDescription("The VPLS LDP's peer group.")
hwVplsLdpQosStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 13)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatTotalPassPacket"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatTotalPassByte"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatTotalDiscardPacket"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatTotalDiscardByte"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatPassPacketRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatPassByteRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatDiscardPacketRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsLdpQosStatDiscardByteRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsLdpQosStatisticGroup = hwVplsLdpQosStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsLdpQosStatisticGroup.setDescription("The VPLS's QoS statistic group.")
hwVplsStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 14)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsStatEnable"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatResetStatistic"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatResetTime"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatQosPacketRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatQosByteRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatQosPacket"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsStatQosByte"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsStatisticGroup = hwVplsStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsStatisticGroup.setDescription("The VPLS's QoS statistic group.")
hwVplsQosStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 1, 3, 2, 15)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatTotalPassPacket"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatTotalPassByte"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatTotalDiscardPacket"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatTotalDiscardByte"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatPassPacketRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatPassByteRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatDiscardPacketRate"), ("HUAWEI-VPLS-EXT-MIB", "hwVplsQosStatDiscardByteRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsQosStatisticGroup = hwVplsQosStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsQosStatisticGroup.setDescription("The VPLS's QoS statistic group.")
mibBuilder.exportSymbols("HUAWEI-VPLS-EXT-MIB", hwVplsTunnelPolicy=hwVplsTunnelPolicy, hwVplsDiffServMode=hwVplsDiffServMode, hwVplsVsiPir=hwVplsVsiPir, hwVplsLdpStatOutBroadcastFrames=hwVplsLdpStatOutBroadcastFrames, hwVplsLdpStatInUnknowFrames=hwVplsLdpStatInUnknowFrames, hwVplsLdpQosStatTotalDiscardPacket=hwVplsLdpQosStatTotalDiscardPacket, hwVplsMIBConformance=hwVplsMIBConformance, hwVplsStatisticsGroup=hwVplsStatisticsGroup, hwVplsBgpStatOutUnicastFrames=hwVplsBgpStatOutUnicastFrames, hwVplsBgpStatOutFrames=hwVplsBgpStatOutFrames, hwVplsBgpInfoRowStatus=hwVplsBgpInfoRowStatus, hwVplsPwUpSumTime=hwVplsPwUpSumTime, hwVplsLdpPeerRouterID=hwVplsLdpPeerRouterID, hwVplsBgpStatInFrames=hwVplsBgpStatInFrames, hwVplsVcBackup=hwVplsVcBackup, hwVplsLdpStatInMulticastFrames=hwVplsLdpStatInMulticastFrames, hwVplsRtRowStatus=hwVplsRtRowStatus, hwVplsBgpStatOutErrorFrames=hwVplsBgpStatOutErrorFrames, hwVplsUpDownNotifEnable=hwVplsUpDownNotifEnable, hwVplsRtGroup=hwVplsRtGroup, hwVplsQosStatDiscardByteRate=hwVplsQosStatDiscardByteRate, hwVplsVsiDeleted=hwVplsVsiDeleted, hwVplsStatisticsEnable=hwVplsStatisticsEnable, hwVplsQosStatTotalPassByte=hwVplsQosStatTotalPassByte, hwVplsEnableStatistic=hwVplsEnableStatistic, hwVplsLdpQosStatTotalPassPacket=hwVplsLdpQosStatTotalPassPacket, hwVplsLdpStatisticsEntry=hwVplsLdpStatisticsEntry, hwVplsGroup=hwVplsGroup, hwVplsAcIfIndex=hwVplsAcIfIndex, hwVplsBgpStatResetTime=hwVplsBgpStatResetTime, hwVplsRtTable=hwVplsRtTable, hwVplsLdpPeerTnlPolicyName=hwVplsLdpPeerTnlPolicyName, hwVplsStatQosByteRate=hwVplsStatQosByteRate, hwVplsBgpInfoGroup=hwVplsBgpInfoGroup, hwVplsLdpPeerPwName=hwVplsLdpPeerPwName, hwVplsBgpInfoTable=hwVplsBgpInfoTable, hwVplsLdpPeerGroup=hwVplsLdpPeerGroup, HWL2VpnVcEncapsType=HWL2VpnVcEncapsType, hwVplsMIBTraps=hwVplsMIBTraps, hwVplsUpe2UpeWithdraw=hwVplsUpe2UpeWithdraw, hwVplsSignal=hwVplsSignal, hwVplsLdpStatOutBytes=hwVplsLdpStatOutBytes, hwVplsStateChangeReason=hwVplsStateChangeReason, hwVplsPwType=hwVplsPwType, hwVplsUnknowUnicastMacLearning=hwVplsUnknowUnicastMacLearning, hwVplsPwVrIfIndex=hwVplsPwVrIfIndex, hwVplsIgnoreAcState=hwVplsIgnoreAcState, hwVplsLdpQosStatTotalDiscardByte=hwVplsLdpQosStatTotalDiscardByte, hwVplsLdpQosStatTotalPassByte=hwVplsLdpQosStatTotalPassByte, hwVplsTable=hwVplsTable, hwVplsVsiID=hwVplsVsiID, hwVplsInBytes=hwVplsInBytes, hwVplsQosStatQueueId=hwVplsQosStatQueueId, hwVplsLdpQosStatDiscardByteRate=hwVplsLdpQosStatDiscardByteRate, hwVplsResetStatisticTime=hwVplsResetStatisticTime, hwVplsVsiCir=hwVplsVsiCir, hwL2VpnVplsExt=hwL2VpnVplsExt, hwVplsAcTable=hwVplsAcTable, hwVplsBgpStatOutDiscardFrames=hwVplsBgpStatOutDiscardFrames, hwVplsQosStatPassPacketRate=hwVplsQosStatPassPacketRate, hwVplsLdpQosStatQueueId=hwVplsLdpQosStatQueueId, hwVplsLdpQosStatDiscardPacketRate=hwVplsLdpQosStatDiscardPacketRate, hwVplsStatQosPacket=hwVplsStatQosPacket, hwVplsRtName=hwVplsRtName, hwVplsInterfaceWithdraw=hwVplsInterfaceWithdraw, hwVplsQosStatPassByteRate=hwVplsQosStatPassByteRate, hwVplsVsiQosProfileName=hwVplsVsiQosProfileName, hwVplsLdpStatOutErrorFrames=hwVplsLdpStatOutErrorFrames, hwVplsDiffServColor=hwVplsDiffServColor, hwVplsBgpInfoEntry=hwVplsBgpInfoEntry, hwVplsUnknowMulticast=hwVplsUnknowMulticast, hwVplsAcStatus=hwVplsAcStatus, hwVplsAcGroup=hwVplsAcGroup, hwVplsMIBCompliances=hwVplsMIBCompliances, hwVplsPwUpStartTime=hwVplsPwUpStartTime, HWEnableValue=HWEnableValue, hwVplsLdpPeerUpeType=hwVplsLdpPeerUpeType, hwVplsBgpStatInFrameRate=hwVplsBgpStatInFrameRate, hwVplsDiscovery=hwVplsDiscovery, hwVplsLdpStatInBytes=hwVplsLdpStatInBytes, hwVplsUnknowUnicast=hwVplsUnknowUnicast, PYSNMP_MODULE_ID=hwL2VpnVplsExt, hwVplsPwTnlPolicy=hwVplsPwTnlPolicy, hwVplsBgpStatOutMulticastFrames=hwVplsBgpStatOutMulticastFrames, hwVplsBgpStatOutFrameRate=hwVplsBgpStatOutFrameRate, hwVplsLdpStatOutFrameRate=hwVplsLdpStatOutFrameRate, hwVplsBgpStatInTrafficRate=hwVplsBgpStatInTrafficRate, hwVplsStateReasonGroup=hwVplsStateReasonGroup, hwVplsLdpQosStatisticGroup=hwVplsLdpQosStatisticGroup, hwVplsDiffServServiceClass=hwVplsDiffServServiceClass, hwVplsRtType=hwVplsRtType, hwVplsLdpStatResetTime=hwVplsLdpStatResetTime, hwVplsBgpStatisticsEntry=hwVplsBgpStatisticsEntry, hwVplsLdpPeerVrrpIfIndex=hwVplsLdpPeerVrrpIfIndex, hwVplsVsiName=hwVplsVsiName, hwVplsQosStatTotalDiscardByte=hwVplsQosStatTotalDiscardByte, hwVplsLdpPeerStatus=hwVplsLdpPeerStatus, hwVplsLdpPeerPir=hwVplsLdpPeerPir, hwVplsNotificationGroup=hwVplsNotificationGroup, hwVplsPwID=hwVplsPwID, hwVplsAdminVsiName=hwVplsAdminVsiName, hwVplsLdpStatInDiscardFrames=hwVplsLdpStatInDiscardFrames, hwVplsStatResetTime=hwVplsStatResetTime, hwVplsRowStatus=hwVplsRowStatus, hwVplsStatisticsEntry=hwVplsStatisticsEntry, hwVplsStatisticTable=hwVplsStatisticTable, hwVplsLdpStatisticsGroup=hwVplsLdpStatisticsGroup, hwVplsLdpStatInFrameRate=hwVplsLdpStatInFrameRate, hwVplsPwRowStatus=hwVplsPwRowStatus, hwVplsAcRowStatus=hwVplsAcRowStatus, hwVplsOutBytes=hwVplsOutBytes, hwVplsLdpPeerRowStatus=hwVplsLdpPeerRowStatus, hwVplsRtEntry=hwVplsRtEntry, hwVplsOutFrames=hwVplsOutFrames, hwVplsBgpStatOutBroadcastFrames=hwVplsBgpStatOutBroadcastFrames, hwVplsLdpStatResetStatistic=hwVplsLdpStatResetStatistic, hwVplsLdpPeerQosProfileName=hwVplsLdpPeerQosProfileName, hwVplsRD=hwVplsRD, hwVplsBgpStatInMulticastFrames=hwVplsBgpStatInMulticastFrames, hwVplsBgpStatInDiscardFrames=hwVplsBgpStatInDiscardFrames, hwVplsAcIsolateFlag=hwVplsAcIsolateFlag, hwVplsFlowLabel=hwVplsFlowLabel, hwVplsLdpStatOutMulticastFrames=hwVplsLdpStatOutMulticastFrames, hwVplsBgpInfoOffset=hwVplsBgpInfoOffset, hwVplsBgpStatOutTrafficRate=hwVplsBgpStatOutTrafficRate, hwVplsStatQosPacketRate=hwVplsStatQosPacketRate, hwVplsAcUpSumTime=hwVplsAcUpSumTime, hwVplsLdpStatisticsTable=hwVplsLdpStatisticsTable, hwVplsLdpPeerRecvLable=hwVplsLdpPeerRecvLable, hwVplsLdpPeerVirtualRouterId=hwVplsLdpPeerVirtualRouterId, hwVplsLdpPeerPwId=hwVplsLdpPeerPwId, hwVplsLdpPeerTransLable=hwVplsLdpPeerTransLable, hwVplsNotificationControlGroup=hwVplsNotificationControlGroup, hwVplsMacLimitEnable=hwVplsMacLimitEnable, hwVplsLdpStatInUnicastFrames=hwVplsLdpStatInUnicastFrames, hwVplsLdpStatPwID=hwVplsLdpStatPwID, hwVplsPwVrID=hwVplsPwVrID, hwVplsPwEntry=hwVplsPwEntry, hwVplsLdpStatInFrames=hwVplsLdpStatInFrames, hwVplsBgpStatisticsTable=hwVplsBgpStatisticsTable, hwVplsLdpQosStatRemoteIpAddr=hwVplsLdpQosStatRemoteIpAddr, hwVplsBgpStatInUnicastFrames=hwVplsBgpStatInUnicastFrames, hwVplsLdpPeerIgnoreStpLoopCheck=hwVplsLdpPeerIgnoreStpLoopCheck, hwVplsLdpPeerEntry=hwVplsLdpPeerEntry, hwVplsLdpQosStatPassByteRate=hwVplsLdpQosStatPassByteRate, hwVplsBgpInfoSiteID=hwVplsBgpInfoSiteID, hwVplsQosStatisticGroup=hwVplsQosStatisticGroup, hwVplsVcUp=hwVplsVcUp, hwVplsLearnStyle=hwVplsLearnStyle, hwVplsPwInboundLabel=hwVplsPwInboundLabel, hwVplsMtu=hwVplsMtu, hwVplsUpe2NpeWithdraw=hwVplsUpe2NpeWithdraw, hwVplsLdpStatOutTrafficRate=hwVplsLdpStatOutTrafficRate, hwVplsBgpStatRemoteIpAddr=hwVplsBgpStatRemoteIpAddr, hwVplsMacLearnEnable=hwVplsMacLearnEnable, hwVplsLdpStatEnable=hwVplsLdpStatEnable, hwVplsStatisticEntry=hwVplsStatisticEntry, hwVplsBgpStatisticsGroup=hwVplsBgpStatisticsGroup, hwVplsQosStatisticTable=hwVplsQosStatisticTable, hwVplsAcUpStartTime=hwVplsAcUpStartTime, hwVplsPwStatus=hwVplsPwStatus, hwVplsLdpStatOutUnicastFrames=hwVplsLdpStatOutUnicastFrames, hwVplsVcDown=hwVplsVcDown, hwVplsStatus=hwVplsStatus, hwVplsLdpStatInErrorFrames=hwVplsLdpStatInErrorFrames, hwVplsEntry=hwVplsEntry, hwVplsAdminStatus=hwVplsAdminStatus, hwVplsPreference=hwVplsPreference, hwVplsBgpStatInUnknowFrames=hwVplsBgpStatInUnknowFrames, hwVplsStatResetStatistic=hwVplsStatResetStatistic, hwVplsQosStatDiscardPacketRate=hwVplsQosStatDiscardPacketRate, HWL2VpnStateChangeReason=HWL2VpnStateChangeReason, hwVplsLdpStatRemoteIpAddr=hwVplsLdpStatRemoteIpAddr, hwVplsMacWithdrawEnable=hwVplsMacWithdrawEnable, hwVplsVcType=hwVplsVcType, hwVplsLdpStatInTrafficRate=hwVplsLdpStatInTrafficRate, hwVplsBgpStatInErrorFrames=hwVplsBgpStatInErrorFrames, hwVplsStatisticGroup=hwVplsStatisticGroup, hwVplsMIBObjects=hwVplsMIBObjects, hwVplsBgpInfoRange=hwVplsBgpInfoRange, hwVplsInDiscardFrames=hwVplsInDiscardFrames, hwL2Vpn=hwL2Vpn, hwVplsVsiDown=hwVplsVsiDown, hwVplsStatisticsTable=hwVplsStatisticsTable, hwVplsLdpPeerTable=hwVplsLdpPeerTable, hwVplsInFrames=hwVplsInFrames, hwVplsStatQosByte=hwVplsStatQosByte, hwVplsMIBCompliance=hwVplsMIBCompliance, hwVplsVsiType=hwVplsVsiType, hwVplsLdpStatInBroadcastFrames=hwVplsLdpStatInBroadcastFrames, hwVplsLdpQosStatPwId=hwVplsLdpQosStatPwId, hwVplsAcEntry=hwVplsAcEntry, hwVplsLdpStatOutFrames=hwVplsLdpStatOutFrames, hwVplsQosStatisticEntry=hwVplsQosStatisticEntry, hwVplsMIBGroups=hwVplsMIBGroups, hwVplsLdpPeerCir=hwVplsLdpPeerCir, hwVplsQosStatTotalPassPacket=hwVplsQosStatTotalPassPacket, hwVplsResetStatistic=hwVplsResetStatistic, hwVplsBgpStatEnable=hwVplsBgpStatEnable, hwVplsPwGroup=hwVplsPwGroup, hwVplsPwIsUpe=hwVplsPwIsUpe, hwVplsStatEnable=hwVplsStatEnable, hwVplsDiffServDSName=hwVplsDiffServDSName, hwVplsBgpStatInBytes=hwVplsBgpStatInBytes, hwVplsDescription=hwVplsDescription, hwVplsNpe2UpeWithdraw=hwVplsNpe2UpeWithdraw, hwVplsLdpQosStatisticTable=hwVplsLdpQosStatisticTable, hwVplsBgpStatSiteID=hwVplsBgpStatSiteID, hwVplsLdpQosStatisticEntry=hwVplsLdpQosStatisticEntry, hwVplsVcDeleted=hwVplsVcDeleted, hwVplsBgpStatOutBytes=hwVplsBgpStatOutBytes, hwVplsPwOutboundLabel=hwVplsPwOutboundLabel, hwVplsPwRemoteIp=hwVplsPwRemoteIp, hwVplsBgpStatInBroadcastFrames=hwVplsBgpStatInBroadcastFrames, hwVplsServiceName=hwVplsServiceName, hwVplsLdpStatOutDiscardFrames=hwVplsLdpStatOutDiscardFrames, hwVplsAgingTime=hwVplsAgingTime, hwVplsQosStatTotalDiscardPacket=hwVplsQosStatTotalDiscardPacket, hwVplsLdpQosStatPassPacketRate=hwVplsLdpQosStatPassPacketRate, hwVplsVsiUp=hwVplsVsiUp, hwVplsPwTable=hwVplsPwTable)
