#
# PySNMP MIB module STN-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Gauge32, TimeTicks, iso, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Counter64, ObjectIdentity, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "TimeTicks", "iso", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Counter64", "ObjectIdentity", "MibIdentifier", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stnNotification, stnSystems = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification", "stnSystems")
StnHardwareSubModuleType, StnEngineOperStatus, StnPowerStatus, StnEngineAdminStatus, StnBatteryStatus, StnModuleAdminStatus, StnHardwareModuleType, StnLedStatus, StnFlashStatus, StnResourceStatus, StnModuleOperStatus = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-TC", "StnHardwareSubModuleType", "StnEngineOperStatus", "StnPowerStatus", "StnEngineAdminStatus", "StnBatteryStatus", "StnModuleAdminStatus", "StnHardwareModuleType", "StnLedStatus", "StnFlashStatus", "StnResourceStatus", "StnModuleOperStatus")
stnChassis = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 1))
if mibBuilder.loadTexts: stnChassis.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnChassis.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnChassis.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnChassis.setDescription('This MIB module describes the managed objects of the Spring Tide Networks chassis.')
stnChassisObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1))
stnChassisMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2))
stnChassisVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1))
stnModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2))
stnLeds = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3))
stnPower = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4))
stnResource = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5))
stnChassisTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100))
stnChassisSysType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("stn5000", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnChassisSysType.setStatus('current')
if mibBuilder.loadTexts: stnChassisSysType.setDescription('The system type.')
stnChassisSysDescr = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnChassisSysDescr.setStatus('current')
if mibBuilder.loadTexts: stnChassisSysDescr.setDescription('The system description.')
stnChassisId = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnChassisId.setStatus('current')
if mibBuilder.loadTexts: stnChassisId.setDescription('The system ID.')
stnSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: stnSlotTable.setStatus('current')
if mibBuilder.loadTexts: stnSlotTable.setDescription('A list of slot and installed module type entries.')
stnSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnSlotIndex"))
if mibBuilder.loadTexts: stnSlotEntry.setStatus('current')
if mibBuilder.loadTexts: stnSlotEntry.setDescription('Entry contains information about a particular slot.')
stnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: stnSlotIndex.setDescription('The slot in which the physical module exists.')
stnModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 2), StnHardwareModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleType.setStatus('current')
if mibBuilder.loadTexts: stnModuleType.setDescription('The type of module installed in the slot.')
stnModulePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModulePeer.setStatus('current')
if mibBuilder.loadTexts: stnModulePeer.setDescription('Peer module in redundant configuration.')
stnModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 4), StnModuleAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: stnModuleAdminStatus.setDescription('Administrative status of the module.')
stnModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 5), StnModuleOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnModuleOperStatus.setDescription('Operational status of the module.')
stnModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleDescr.setStatus('current')
if mibBuilder.loadTexts: stnModuleDescr.setDescription('A descriptive string used to describe the module type.')
stnModuleLed = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 7), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleLed.setStatus('current')
if mibBuilder.loadTexts: stnModuleLed.setDescription('Primary LED status of the module.')
stnSubModules = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModules.setStatus('current')
if mibBuilder.loadTexts: stnSubModules.setDescription('The number of sub-modules attached to this module.')
stnSubModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: stnSubModuleTable.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleTable.setDescription('A list of installed sub-module type entries.')
stnSubModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnSubModuleSlot"), (0, "STN-CHASSIS-MIB", "stnSubModuleIndex"))
if mibBuilder.loadTexts: stnSubModuleEntry.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleEntry.setDescription('Entry contains information about a particular slot sub-module.')
stnSubModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleSlot.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleSlot.setDescription('The chassis slot in which the sub-module is installed.')
stnSubModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleIndex.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleIndex.setDescription('The engine adapter in which the sub-module is installed.')
stnSubModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 3), StnHardwareSubModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleType.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleType.setDescription('The type of sub-module installed in the slot.')
stnSubModulePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModulePeer.setStatus('current')
if mibBuilder.loadTexts: stnSubModulePeer.setDescription('Peer sub-module in redundant configuration.')
stnSubModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 5), StnModuleAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleAdminStatus.setDescription('Administrative status of the sub-module.')
stnSubModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 6), StnModuleOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleOperStatus.setDescription('Operational status of the sub-module.')
stnSubModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleDescr.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleDescr.setDescription('A descriptive string used to describe the sub-module type.')
stnEngineTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: stnEngineTable.setStatus('current')
if mibBuilder.loadTexts: stnEngineTable.setDescription('A list of engine entries.')
stnEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnEngineIndex"))
if mibBuilder.loadTexts: stnEngineEntry.setStatus('current')
if mibBuilder.loadTexts: stnEngineEntry.setDescription('Entry contains information about a particular engine.')
stnEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineIndex.setStatus('current')
if mibBuilder.loadTexts: stnEngineIndex.setDescription('A sequence number that identifies a particular engine in the chassis.')
stnEngineSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineSlot.setStatus('current')
if mibBuilder.loadTexts: stnEngineSlot.setDescription('The slot/module in which the engine exists.')
stnEngineCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineCpu.setStatus('current')
if mibBuilder.loadTexts: stnEngineCpu.setDescription('The cpu ID associated with the engine.')
stnEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("swc", 2), ("rpe", 3), ("ecf", 4), ("ecf2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineType.setStatus('current')
if mibBuilder.loadTexts: stnEngineType.setDescription('The type of engine.')
stnEnginePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEnginePeer.setStatus('current')
if mibBuilder.loadTexts: stnEnginePeer.setDescription('Peer engine in redundant configuration.')
stnEngineAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 6), StnEngineAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineAdminStatus.setStatus('current')
if mibBuilder.loadTexts: stnEngineAdminStatus.setDescription('Administrative status of the engine.')
stnEngineOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 7), StnEngineOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnEngineOperStatus.setDescription('Operational status of the engine.')
stnEngineDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineDescr.setStatus('current')
if mibBuilder.loadTexts: stnEngineDescr.setDescription('A descriptive string used to describe the engine type.')
stnLedFanTray = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 1), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedFanTray.setStatus('current')
if mibBuilder.loadTexts: stnLedFanTray.setDescription('Current status of the chassis fan tray LED.')
stnLedPowerA = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 2), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedPowerA.setStatus('current')
if mibBuilder.loadTexts: stnLedPowerA.setDescription('Current status of the chassis PowerA LED.')
stnLedPowerB = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 3), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedPowerB.setStatus('current')
if mibBuilder.loadTexts: stnLedPowerB.setDescription('Current status of the chassis PowerB LED.')
stnLedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 4), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedAlarm.setStatus('current')
if mibBuilder.loadTexts: stnLedAlarm.setDescription('Current status of the chassis Alarm LED.')
stnFanTrayLedTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5), )
if mibBuilder.loadTexts: stnFanTrayLedTable.setStatus('current')
if mibBuilder.loadTexts: stnFanTrayLedTable.setDescription('A list of Fan Tray LED entries.')
stnFanTrayLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnFanTrayLedIndex"))
if mibBuilder.loadTexts: stnFanTrayLedEntry.setStatus('current')
if mibBuilder.loadTexts: stnFanTrayLedEntry.setDescription('An entry containing information about a particular Fan Tray LED.')
stnFanTrayLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnFanTrayLedIndex.setStatus('current')
if mibBuilder.loadTexts: stnFanTrayLedIndex.setDescription('A sequence number that identifies a particular Fan Tray LED.')
stnFanTrayLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnFanTrayLedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: stnFanTrayLedSlotIndex.setDescription('The chassis slot number associated with this Fan Tray LED.')
stnFanTrayLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1, 3), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnFanTrayLedStatus.setStatus('current')
if mibBuilder.loadTexts: stnFanTrayLedStatus.setDescription('The current state of the particular Fan Tray LED.')
stnPortLedTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6), )
if mibBuilder.loadTexts: stnPortLedTable.setStatus('current')
if mibBuilder.loadTexts: stnPortLedTable.setDescription('A list of Port LED entries.')
stnPortLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnPortLedSlotIndex"), (0, "STN-CHASSIS-MIB", "stnPortLedPortIndex"), (0, "STN-CHASSIS-MIB", "stnPortLedIndex"))
if mibBuilder.loadTexts: stnPortLedEntry.setStatus('current')
if mibBuilder.loadTexts: stnPortLedEntry.setDescription('An entry containing information about a particular port LED.')
stnPortLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: stnPortLedSlotIndex.setDescription('The chassis slot number associated with this port LED.')
stnPortLedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedPortIndex.setStatus('current')
if mibBuilder.loadTexts: stnPortLedPortIndex.setDescription('The chassis port number associated with this port LED.')
stnPortLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedIndex.setStatus('current')
if mibBuilder.loadTexts: stnPortLedIndex.setDescription('The index of this port LED.')
stnPortLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 4), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedStatus.setStatus('current')
if mibBuilder.loadTexts: stnPortLedStatus.setDescription('The current state of the port LED.')
stnPortLedDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedDescr.setStatus('current')
if mibBuilder.loadTexts: stnPortLedDescr.setDescription('A descriptive string or label associated with the port LED.')
stnPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: stnPowerTable.setStatus('current')
if mibBuilder.loadTexts: stnPowerTable.setDescription('A list of power entries.')
stnPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnPowerIndex"))
if mibBuilder.loadTexts: stnPowerEntry.setStatus('current')
if mibBuilder.loadTexts: stnPowerEntry.setDescription('An entry containing information about a particular power connector.')
stnPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPowerIndex.setStatus('current')
if mibBuilder.loadTexts: stnPowerIndex.setDescription('The id associated with this power connector.')
stnPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1, 2), StnPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPowerStatus.setStatus('current')
if mibBuilder.loadTexts: stnPowerStatus.setDescription('The current state of the power source attached to this power connector.')
stnPowerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPowerDescr.setStatus('current')
if mibBuilder.loadTexts: stnPowerDescr.setDescription('A descriptive string or label associated with the power connector.')
stnBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: stnBatteryTable.setStatus('current')
if mibBuilder.loadTexts: stnBatteryTable.setDescription('A list of battery entries.')
stnBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnBatterySlotIndex"))
if mibBuilder.loadTexts: stnBatteryEntry.setStatus('current')
if mibBuilder.loadTexts: stnBatteryEntry.setDescription('An entry containing information about a particular battery.')
stnBatterySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatterySlotIndex.setStatus('current')
if mibBuilder.loadTexts: stnBatterySlotIndex.setDescription('The chassis slot number associated with this battery.')
stnBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatteryType.setStatus('current')
if mibBuilder.loadTexts: stnBatteryType.setDescription('The physical component using the battery. real-time-clock(1), nvram(2) ')
stnBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 3), StnBatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: stnBatteryStatus.setDescription('The current state of the battery. unknown(1), -- none of the following ok(2), -- battery power is within the acceptable range low(3) -- battery power is below the recommended range ')
stnBatteryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatteryDescr.setStatus('current')
if mibBuilder.loadTexts: stnBatteryDescr.setDescription('A descriptive string or label associated with the battery.')
stnCpuUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: stnCpuUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: stnCpuUtilizationTable.setDescription('A list of CPU utilization entries.')
stnCpuUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnCpuUtilizationIndex"))
if mibBuilder.loadTexts: stnCpuUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: stnCpuUtilizationEntry.setDescription('An entry containing CPU Utilization.')
stnCpuUtilizationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilizationIndex.setStatus('current')
if mibBuilder.loadTexts: stnCpuUtilizationIndex.setDescription('The engine id associated with each CPU.')
stnCpuUtilizationCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilizationCurrent.setStatus('current')
if mibBuilder.loadTexts: stnCpuUtilizationCurrent.setDescription('The current utilization (%) of the CPU.')
stnCpuUtilization5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilization5Min.setStatus('current')
if mibBuilder.loadTexts: stnCpuUtilization5Min.setDescription('The past 5 minute utilization (%) of the CPU.')
stnCpuUtilization15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilization15Min.setStatus('current')
if mibBuilder.loadTexts: stnCpuUtilization15Min.setDescription('The past 15 minute utilization (%) of the CPU.')
stnCpuUtilization30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilization30Min.setStatus('current')
if mibBuilder.loadTexts: stnCpuUtilization30Min.setDescription('The past 30 minute utilization (%) of the CPU.')
stnCpuIpTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2), )
if mibBuilder.loadTexts: stnCpuIpTable.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpTable.setDescription('A list of entries describing IP resources on each cpu.')
stnCpuIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnCpuIpIndex"))
if mibBuilder.loadTexts: stnCpuIpEntry.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpEntry.setDescription('An entry describing IP resources on each cpu.')
stnCpuIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpIndex.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpIndex.setDescription('The engine id associated with each CPU.')
stnCpuIpRouteLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRouteLimit.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpRouteLimit.setDescription('The maximum number of ip routes allowed on this cpu.')
stnCpuIpRoutesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRoutesInUse.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpRoutesInUse.setDescription('The number of ip routes currently allocated on this cpu.')
stnCpuIpRoutesBooked = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRoutesBooked.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpRoutesBooked.setDescription('The sum of all maximum routing table sizes for all routers on this cpu. Note that when over-subsciption is allowed this number may exceed the actual route limit on this engine.')
stnCpuIpFwdProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpFwdProcesses.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpFwdProcesses.setDescription('The number of ip forwarding processes on this engine.')
stnCpuIpRoutingProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRoutingProcesses.setStatus('current')
if mibBuilder.loadTexts: stnCpuIpRoutingProcesses.setDescription('The number of ip routing processes on this engine.')
stnNotificationCfgChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationCfgChangeTime.setStatus('current')
if mibBuilder.loadTexts: stnNotificationCfgChangeTime.setDescription('The time (in hundredths of a second) since the configuration of the system was last changed.')
stnNotificationFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 2), StnFlashStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationFlashStatus.setStatus('current')
if mibBuilder.loadTexts: stnNotificationFlashStatus.setDescription('The status of the chassis flash module.')
stnNotificationModuleTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationModuleTemperature.setStatus('current')
if mibBuilder.loadTexts: stnNotificationModuleTemperature.setDescription('The temperature of a specific module.')
stnNotificationResourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 4), StnResourceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationResourceStatus.setStatus('current')
if mibBuilder.loadTexts: stnNotificationResourceStatus.setDescription('The status of the chassis resources.')
stnRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 1)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"))
if mibBuilder.loadTexts: stnRedundant.setStatus('current')
if mibBuilder.loadTexts: stnRedundant.setDescription('A stnRedundant trap signifies that the agent entity has detected that the stnModuleOperStatus object in the STN-CHASSIS-MIB has transitioned to the up-primary(8) state for one of its modules. The generation of this trap can be controlled by the RedundancyTraps configuration object.')
stnNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 2)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"))
if mibBuilder.loadTexts: stnNotRedundant.setStatus('current')
if mibBuilder.loadTexts: stnNotRedundant.setDescription('A stnNotRedundant trap signifies that the agent entity has detected that the stnModuleOperStatus object in the STN-CHASSIS-MIB has transitioned to the up-standalone(6) state for one of its modules. The generation of this trap can be controlled by the RedundancyTraps configuration object.')
stnModuleUp = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 3)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"), ("STN-CHASSIS-MIB", "stnModuleDescr"), ("STN-CHASSIS-MIB", "stnSubModules"))
if mibBuilder.loadTexts: stnModuleUp.setStatus('current')
if mibBuilder.loadTexts: stnModuleUp.setDescription('A stnModuleUp trap signifies that the agent entity has detected that the stnModuleOperStatus object in the STN-CHASSIS-MIB has transitioned to up-standalone(6), up-standby(7), or up-primary(8) state for one of its modules. The generation of this trap can be controlled by the ModuleUpTraps configuration object.')
stnModuleDown = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 4)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"), ("STN-CHASSIS-MIB", "stnModuleDescr"), ("STN-CHASSIS-MIB", "stnSubModules"))
if mibBuilder.loadTexts: stnModuleDown.setStatus('current')
if mibBuilder.loadTexts: stnModuleDown.setDescription('A stnModuleDown trap signifies that the agent entity has detected that the stnModuleOperStatus object in the STN-CHASSIS-MIB has transitioned to the down(3) state for one of its modules. The generation of this trap can be controlled by the ModuleDownTraps configuration object.')
stnSubModuleUp = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 5)).setObjects(("STN-CHASSIS-MIB", "stnSubModuleSlot"), ("STN-CHASSIS-MIB", "stnSubModuleIndex"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnSubModuleOperStatus"), ("STN-CHASSIS-MIB", "stnSubModuleDescr"))
if mibBuilder.loadTexts: stnSubModuleUp.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleUp.setDescription('A stnSubModuleUp trap signifies that the agent entity has detected that the stnSubModuleOperStatus object in the STN-CHASSIS-MIB has transitioned to up-standalone(6), up-standby(7), or up-primary(8) state for one of its sub-modules. The generation of this trap can be controlled by the SubModuleUpTraps configuration object.')
stnSubModuleDown = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 6)).setObjects(("STN-CHASSIS-MIB", "stnSubModuleSlot"), ("STN-CHASSIS-MIB", "stnSubModuleIndex"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnSubModuleOperStatus"), ("STN-CHASSIS-MIB", "stnSubModuleDescr"))
if mibBuilder.loadTexts: stnSubModuleDown.setStatus('current')
if mibBuilder.loadTexts: stnSubModuleDown.setDescription('A stnModuleDown trap signifies that the agent entity has detected that the stnModuleOperStatus object in the STN-CHASSIS-MIB has transitioned to the down(3) state for one of its modules. The generation of this trap can be controlled by the SubModuleDownTraps configuration object.')
stnEngineUp = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 7)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-CHASSIS-MIB", "stnEngineOperStatus"))
if mibBuilder.loadTexts: stnEngineUp.setStatus('current')
if mibBuilder.loadTexts: stnEngineUp.setDescription('A stnEngineUp trap signifies that the agent entity has detected that the stnEngineOperStatus object in the STN-CHASSIS-MIB has transitioned to up-standalone(6), up-standby(7), or up-primary(8) state for one of its engines. The generation of this trap can be controlled by the EngineUpTraps configuration object.')
stnEngineDown = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 8)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-CHASSIS-MIB", "stnEngineOperStatus"))
if mibBuilder.loadTexts: stnEngineDown.setStatus('current')
if mibBuilder.loadTexts: stnEngineDown.setDescription('A stnEngineDown trap signifies that the agent entity has detected that the stnEngineOperStatus object in the STN-CHASSIS-MIB has transitioned to the down(3) state for one of its engines. The generation of this trap can be controlled by the EngineDownTraps configuration object.')
stnBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 9)).setObjects(("STN-CHASSIS-MIB", "stnBatterySlotIndex"), ("STN-CHASSIS-MIB", "stnBatteryType"), ("STN-CHASSIS-MIB", "stnBatteryStatus"))
if mibBuilder.loadTexts: stnBatteryLow.setStatus('current')
if mibBuilder.loadTexts: stnBatteryLow.setDescription('A stnBatteryLow trap signifies that the agent entity has detected that the stnBatteryStatus object in the STN-CHASSIS-MIB has transitioned to the low(3) state for one of its batteries. The generation of this trap can be controlled by the BatteryTraps configuration object.')
stnFlashFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 10)).setObjects(("STN-CHASSIS-MIB", "stnNotificationFlashStatus"))
if mibBuilder.loadTexts: stnFlashFailure.setStatus('current')
if mibBuilder.loadTexts: stnFlashFailure.setDescription('A stnFlashFailure trap signifies that the agent entity has detected that the stnFlashStatus object in the STN-CHASSIS-MIB has transitioned out of the ok(2) state to one of the disfunctional states. The generation of this trap can be controlled by the FlashTraps configuration object.')
stnResourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 11)).setObjects(("STN-CHASSIS-MIB", "stnNotificationResourceStatus"))
if mibBuilder.loadTexts: stnResourceFailure.setStatus('current')
if mibBuilder.loadTexts: stnResourceFailure.setDescription('A stnResourceFailure trap signifies that the agent entity has detected that a chassis resource object has transitioned out of the ok(2) state to one of the alarm states. The generation of this trap can be controlled by the ResourceTraps configuration object.')
stnFailover = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 12)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"))
if mibBuilder.loadTexts: stnFailover.setStatus('current')
if mibBuilder.loadTexts: stnFailover.setDescription('A stnFailover trap signifies that the agent entity has detected that a stnModule has transitioned to its redundant stnModule. The generation of this trap can be controlled by the FailoverTraps configuration object.')
stnCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 19)).setObjects(("STN-CHASSIS-MIB", "stnNotificationCfgChangeTime"))
if mibBuilder.loadTexts: stnCfgChange.setStatus('current')
if mibBuilder.loadTexts: stnCfgChange.setDescription('A stnCfgChange trap signifies that the agent entity has detected that a configuration modification has been applied to the device. The generation of this trap can be controlled by the ConfigTraps configuration object.')
stnPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 55)).setObjects(("STN-CHASSIS-MIB", "stnPowerIndex"), ("STN-CHASSIS-MIB", "stnPowerStatus"))
if mibBuilder.loadTexts: stnPowerFailure.setStatus('current')
if mibBuilder.loadTexts: stnPowerFailure.setDescription('A stnPowerFailure trap signifies that the agent entity has detected that the stnPowerStatus object in the STN-CHASSIS-MIB has transitioned out of present(2) state for one of its connections. The generation of this trap can be controlled by the PowerTraps configuration object.')
stnTemperatureFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 56)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnNotificationModuleTemperature"))
if mibBuilder.loadTexts: stnTemperatureFailure.setStatus('current')
if mibBuilder.loadTexts: stnTemperatureFailure.setDescription('A stnTemperatureFailure trap signifies that the agent entity has detected that a temperature fault has occurred on the indicated module/sub-module. The generation of this trap can be controlled by the TemperatureTraps configuration object.')
stnChassisMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 1))
stnChassisMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 2))
stnChassisMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 1, 1)).setObjects(("STN-CHASSIS-MIB", "stnChassisMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnChassisMibComplianceRev1 = stnChassisMibComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: stnChassisMibComplianceRev1.setDescription('The compliance statement for entities which implement the Spring Tide Networks Chassis MIB.')
stnChassisMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 2, 1)).setObjects(("STN-CHASSIS-MIB", "stnChassisSysType"), ("STN-CHASSIS-MIB", "stnChassisSysDescr"), ("STN-CHASSIS-MIB", "stnChassisId"), ("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModulePeer"), ("STN-CHASSIS-MIB", "stnModuleAdminStatus"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"), ("STN-CHASSIS-MIB", "stnModuleDescr"), ("STN-CHASSIS-MIB", "stnModuleLed"), ("STN-CHASSIS-MIB", "stnSubModules"), ("STN-CHASSIS-MIB", "stnSubModuleSlot"), ("STN-CHASSIS-MIB", "stnSubModuleIndex"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnSubModulePeer"), ("STN-CHASSIS-MIB", "stnSubModuleAdminStatus"), ("STN-CHASSIS-MIB", "stnSubModuleOperStatus"), ("STN-CHASSIS-MIB", "stnSubModuleDescr"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-CHASSIS-MIB", "stnEnginePeer"), ("STN-CHASSIS-MIB", "stnEngineAdminStatus"), ("STN-CHASSIS-MIB", "stnEngineOperStatus"), ("STN-CHASSIS-MIB", "stnEngineDescr"), ("STN-CHASSIS-MIB", "stnLedFanTray"), ("STN-CHASSIS-MIB", "stnLedPowerA"), ("STN-CHASSIS-MIB", "stnLedPowerB"), ("STN-CHASSIS-MIB", "stnLedAlarm"), ("STN-CHASSIS-MIB", "stnFanTrayLedIndex"), ("STN-CHASSIS-MIB", "stnFanTrayLedSlotIndex"), ("STN-CHASSIS-MIB", "stnFanTrayLedStatus"), ("STN-CHASSIS-MIB", "stnPortLedSlotIndex"), ("STN-CHASSIS-MIB", "stnPortLedPortIndex"), ("STN-CHASSIS-MIB", "stnPortLedIndex"), ("STN-CHASSIS-MIB", "stnPortLedStatus"), ("STN-CHASSIS-MIB", "stnPortLedDescr"), ("STN-CHASSIS-MIB", "stnPowerIndex"), ("STN-CHASSIS-MIB", "stnPowerStatus"), ("STN-CHASSIS-MIB", "stnPowerDescr"), ("STN-CHASSIS-MIB", "stnBatterySlotIndex"), ("STN-CHASSIS-MIB", "stnBatteryType"), ("STN-CHASSIS-MIB", "stnBatteryStatus"), ("STN-CHASSIS-MIB", "stnBatteryDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnChassisMibGroup = stnChassisMibGroup.setStatus('current')
if mibBuilder.loadTexts: stnChassisMibGroup.setDescription('A collection of STN objects providing chassis information.')
mibBuilder.exportSymbols("STN-CHASSIS-MIB", stnBatterySlotIndex=stnBatterySlotIndex, stnBatteryEntry=stnBatteryEntry, stnBatteryLow=stnBatteryLow, stnModuleAdminStatus=stnModuleAdminStatus, PYSNMP_MODULE_ID=stnChassis, stnSubModuleSlot=stnSubModuleSlot, stnPowerDescr=stnPowerDescr, stnEngineDown=stnEngineDown, stnEngineTable=stnEngineTable, stnLedPowerA=stnLedPowerA, stnChassisMibComplianceRev1=stnChassisMibComplianceRev1, stnCpuUtilization30Min=stnCpuUtilization30Min, stnPortLedStatus=stnPortLedStatus, stnSubModuleIndex=stnSubModuleIndex, stnResource=stnResource, stnCpuIpFwdProcesses=stnCpuIpFwdProcesses, stnEngineDescr=stnEngineDescr, stnPowerIndex=stnPowerIndex, stnCpuIpRoutesInUse=stnCpuIpRoutesInUse, stnFanTrayLedSlotIndex=stnFanTrayLedSlotIndex, stnChassisVars=stnChassisVars, stnNotificationResourceStatus=stnNotificationResourceStatus, stnCpuIpRoutingProcesses=stnCpuIpRoutingProcesses, stnNotRedundant=stnNotRedundant, stnSlotEntry=stnSlotEntry, stnCpuUtilizationTable=stnCpuUtilizationTable, stnPowerEntry=stnPowerEntry, stnSubModuleUp=stnSubModuleUp, stnCpuUtilization15Min=stnCpuUtilization15Min, stnModuleOperStatus=stnModuleOperStatus, stnFanTrayLedStatus=stnFanTrayLedStatus, stnModuleDown=stnModuleDown, stnLedAlarm=stnLedAlarm, stnSubModuleDescr=stnSubModuleDescr, stnCpuUtilizationIndex=stnCpuUtilizationIndex, stnLeds=stnLeds, stnEngineAdminStatus=stnEngineAdminStatus, stnCpuIpTable=stnCpuIpTable, stnChassisMibGroups=stnChassisMibGroups, stnModuleType=stnModuleType, stnPowerFailure=stnPowerFailure, stnEngineSlot=stnEngineSlot, stnChassisTrapVars=stnChassisTrapVars, stnFailover=stnFailover, stnEnginePeer=stnEnginePeer, stnModuleUp=stnModuleUp, stnFanTrayLedIndex=stnFanTrayLedIndex, stnPowerStatus=stnPowerStatus, stnNotificationCfgChangeTime=stnNotificationCfgChangeTime, stnModulePeer=stnModulePeer, stnSlotIndex=stnSlotIndex, stnPortLedPortIndex=stnPortLedPortIndex, stnBatteryTable=stnBatteryTable, stnEngineIndex=stnEngineIndex, stnCpuIpRoutesBooked=stnCpuIpRoutesBooked, stnCpuUtilizationEntry=stnCpuUtilizationEntry, stnPortLedTable=stnPortLedTable, stnModules=stnModules, stnFanTrayLedEntry=stnFanTrayLedEntry, stnEngineUp=stnEngineUp, stnChassisId=stnChassisId, stnCpuUtilization5Min=stnCpuUtilization5Min, stnChassisSysType=stnChassisSysType, stnCpuIpEntry=stnCpuIpEntry, stnEngineOperStatus=stnEngineOperStatus, stnBatteryType=stnBatteryType, stnModuleDescr=stnModuleDescr, stnCfgChange=stnCfgChange, stnSubModuleDown=stnSubModuleDown, stnChassisMibCompliances=stnChassisMibCompliances, stnBatteryDescr=stnBatteryDescr, stnSlotTable=stnSlotTable, stnLedFanTray=stnLedFanTray, stnSubModuleAdminStatus=stnSubModuleAdminStatus, stnPortLedEntry=stnPortLedEntry, stnPowerTable=stnPowerTable, stnSubModuleEntry=stnSubModuleEntry, stnSubModuleOperStatus=stnSubModuleOperStatus, stnLedPowerB=stnLedPowerB, stnRedundant=stnRedundant, stnPortLedIndex=stnPortLedIndex, stnChassisObjects=stnChassisObjects, stnPortLedDescr=stnPortLedDescr, stnChassisMibGroup=stnChassisMibGroup, stnPortLedSlotIndex=stnPortLedSlotIndex, stnSubModules=stnSubModules, stnNotificationModuleTemperature=stnNotificationModuleTemperature, stnChassisMibConformance=stnChassisMibConformance, stnSubModuleType=stnSubModuleType, stnPower=stnPower, stnModuleLed=stnModuleLed, stnChassis=stnChassis, stnNotificationFlashStatus=stnNotificationFlashStatus, stnFanTrayLedTable=stnFanTrayLedTable, stnSubModuleTable=stnSubModuleTable, stnCpuIpIndex=stnCpuIpIndex, stnChassisSysDescr=stnChassisSysDescr, stnTemperatureFailure=stnTemperatureFailure, stnEngineCpu=stnEngineCpu, stnEngineEntry=stnEngineEntry, stnResourceFailure=stnResourceFailure, stnCpuUtilizationCurrent=stnCpuUtilizationCurrent, stnCpuIpRouteLimit=stnCpuIpRouteLimit, stnEngineType=stnEngineType, stnBatteryStatus=stnBatteryStatus, stnFlashFailure=stnFlashFailure, stnSubModulePeer=stnSubModulePeer)
