#
# PySNMP MIB module LANCITY-MCNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANCITY-MCNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:05:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
dot1dTpPort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dTpPort")
docsDevNmAccessEntry, docsDevEvText = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessEntry", "docsDevEvText")
TenthdBmV, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdBmV")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
lancity, = mibBuilder.importSymbols("LANCITY-MIB", "lancity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, Counter32, NotificationType, ObjectIdentity, Unsigned32, TimeTicks, Gauge32, NotificationType, iso, Counter64, Integer32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks", "Gauge32", "NotificationType", "iso", "Counter64", "Integer32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, MacAddress, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "RowStatus", "TruthValue")
lancityMcnsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 482, 60))
if mibBuilder.loadTexts: lancityMcnsMib.setLastUpdated('9903302222Z')
if mibBuilder.loadTexts: lancityMcnsMib.setOrganization('Bay Networks Broadband Technologies Division')
if mibBuilder.loadTexts: lancityMcnsMib.setContactInfo('Dale Hokanson Postal: Bay Networks Broadband Technologies Division 200 Bulfinch Drive Andover, MA 01810 U.S.A. Phone: +1 978 682 1600 E-mail: support@lancity.com')
if mibBuilder.loadTexts: lancityMcnsMib.setDescription('This is the portion of the Lancity enterprise MIB that applies to MCNS cable modems and related devices.')
lancityMcnsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 1))
lancityMcnsProdIdCMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 1, 1))
lancityMcnsProdIdCM = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 1, 2))
lccmtsif = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 2))
lccmif = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 3))
lcifcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 4))
lccmtsdevice = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5))
lccmdevice = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 6))
lcdevicecommon = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 7))
lctrapvars = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 7, 4))
lcCmtsUpstreamTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 1), )
if mibBuilder.loadTexts: lcCmtsUpstreamTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpstreamTable.setDescription('Defines properties of upstream channels, from the CMTS.')
lcCmtsUpstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lcCmtsUpstreamEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpstreamEntry.setDescription('Defines properties of an upstream channel, from the CMTS.')
lcCmtsUpMinimumMapSize = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpMinimumMapSize.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpMinimumMapSize.setDescription('Minimum number of slots to be mapped in each Map PDU.')
lcCmtsUpMaximumMapSize = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpMaximumMapSize.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpMaximumMapSize.setDescription('Maximum number of slots to be mapped in each Map PDU.')
lcCmtsUpContentionPerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpContentionPerMap.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpContentionPerMap.setDescription('The number of mini-slots allotted to contention (REQ or REQ-DATA) per MAP PDU.')
lcCmtsUpRequestDataAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allowed", 1), ("disallowed", 2), ("adaptive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpRequestDataAllowed.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpRequestDataAllowed.setDescription('Specifies whether or not the CMTS will allow contention data on this upstream interface.')
lcCmtsUpMaxDataInContention = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpMaxDataInContention.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpMaxDataInContention.setDescription('The number of mini-slots that may be used for a single upstream contention transmission.')
lcCmtsUpInitialRangingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 6), Integer32()).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpInitialRangingInterval.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpInitialRangingInterval.setDescription('The duration, in microseconds, of the initial ranging interval. This interval is used by unranged modems to enter the network, and so must be long enough to admit the most distant modem.')
lcCmtsUpHighPriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpHighPriorityThreshold.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpHighPriorityThreshold.setDescription('Weighting of high priority queue is-a-vis normal priority queue.')
lcCmtsUpGuaranteedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpGuaranteedThreshold.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpGuaranteedThreshold.setDescription('Permitted aggregate CIR, as a percentage of the overall channel bandwidth.')
lcCmtsUpPublicationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsUpPublicationDelay.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpPublicationDelay.setDescription('A sum of architectural constants, parameters, and network status (RTD) that governs the difference between the publication time of the MAP and its effectiveness.')
lcCmtsUpNFlowControlledMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsUpNFlowControlledMaps.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpNFlowControlledMaps.setDescription('The number of Map PDUs that were generated under flow-controlled (prioritized) conditions.')
lcCmtsUpNNonFlowControlledMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsUpNNonFlowControlledMaps.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpNNonFlowControlledMaps.setDescription('The number of Map PDUs that were generated under FIFO conditions.')
lcCmtsUpChannelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 12), TenthdBmV()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpChannelPower.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpChannelPower.setDescription("The CMTS receiver input power level, which is the nominal receive power level for upstream data. This value will be automatically scaled by the CMTS if the channel's width is changed.")
lcCmtsUpInputPowerWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 1, 1, 13), TenthdBmV()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsUpInputPowerWindow.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpInputPowerWindow.setDescription('The CMTS receiver input power window (+/- tenths dB) at which a CM is allowed to operated in. This value has the range of 20 -150 tenths of dB which represents windows +/- 2 dB to a window of +/- 15 dB. The theoretical upper limit of this range is 9 dB.')
lcCmtsCurrentTemp = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: lcCmtsCurrentTemp.setDescription('Current temperature of a CMTS device in degrees Celsius.')
lcCmtsHighTempThreshold = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsHighTempThreshold.setStatus('current')
if mibBuilder.loadTexts: lcCmtsHighTempThreshold.setDescription("High temperature threshold limit of a CMTS device in degrees Celsius, above which an event occurs to signal that the threshold has been exceeded. The device temperature is read once per minute and compared to this threshold value. A trap is sent out if the event's priority indicates that a trap is to be sent (refer to the docsDevEvControlTable object in DOCS-CABLE-DEVICE-MIB). The priority of this event is critical(3).")
lccmtsUpstreamIngressAvoidance = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 2, 4))
lcCmtsUpstreamIngressAvoidanceEnableTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 1), )
if mibBuilder.loadTexts: lcCmtsUpstreamIngressAvoidanceEnableTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpstreamIngressAvoidanceEnableTable.setDescription('Defines which upstreams are enabling this feature and which metrics to use.')
lcCmtsIngressAvoidanceEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceEnableEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceEnableEntry.setDescription('Defines which upstreams are enabling this feature and which metrics to use.')
lcCmtsIngressAvoidanceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceEnable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceEnable.setDescription('Enable Ingress Avoidance for the Upstream.')
lcCmtsMetric1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsMetric1Enable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMetric1Enable.setDescription('Enable the metric associated with Ingress Avoidance.')
lcCmtsIngressAvoidanceFrequencyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 2), )
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFrequencyConfigTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFrequencyConfigTable.setDescription('Defines the provisioned frequencies per carrier path.')
lcCmtsIngressAvoidanceFrequencyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 2, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcCmtsCarrierPathIndex"), (0, "LANCITY-MCNS-MIB", "lcCmtsFreqConfigIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFrequencyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFrequencyConfigEntry.setDescription('Defines which upstreams are enabling this feature and which metrics to use.')
lcCmtsCarrierPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: lcCmtsCarrierPathIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsCarrierPathIndex.setDescription('Carrier path index for the frequency ranges.')
lcCmtsFreqConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: lcCmtsFreqConfigIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqConfigIndex.setDescription('Index for frequency ranges for each carrier path.')
lcCmtsFreqAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsFreqAvailable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqAvailable.setDescription('Allow frequency range to be used for the carrier path.')
lcCmtsStartFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsStartFrequency.setStatus('current')
if mibBuilder.loadTexts: lcCmtsStartFrequency.setDescription('Beginning frequency in the frequency range (Hz). Range must be within the 5-42 MHz range and start must be less than or equal to stop frequency.')
lcCmtsStopFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsStopFrequency.setStatus('current')
if mibBuilder.loadTexts: lcCmtsStopFrequency.setDescription('End frequency in the frequency range (Hz). Range must be within the 5-42 MHz range and start must be less than or equal to stop frequency.')
lcCmtsIngressAvoidanceChangePrefTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 3), )
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceChangePrefTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceChangePrefTable.setDescription('Defines carrier paths (Physical Connectivity) and channel groups for each upstream.')
lcCmtsIngressAvoidanceChangePrefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceChangePrefEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceChangePrefEntry.setDescription('Defines carrier paths (Physical Connectivity) and channel groups for each upstream.')
lcCmtsChangePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("profile", 1), ("frequency", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsChangePreference.setStatus('current')
if mibBuilder.loadTexts: lcCmtsChangePreference.setDescription('Defines which type of change is the prefered change if ingress avoidance detects a problem in the current configuration.')
lcCmtsIngressAvoidanceThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 4), )
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceThresholdTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceThresholdTable.setDescription('Defines threshold for each of the ingress avoidance available metrics.')
lcCmtsIngressAvoidanceThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceThresholdEntry.setDescription('Defines threshold for each of the ingress avoidance available metrics.')
lcCmtsMetric1GreenToYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsMetric1GreenToYellow.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMetric1GreenToYellow.setDescription('Defines the green to yellow threshold for a particular metric.')
lcCmtsMetric1YellowToRed = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsMetric1YellowToRed.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMetric1YellowToRed.setDescription('Defines the yellow to red threshold for a particular metric. A drop below this level will cause an ingress avoidance action if the metric is enabled.')
lcCmtsIngressAvoidanceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 5), )
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceProfileTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceProfileTable.setDescription('Defines with profile in the Tranmission table will be used for ingress avoidance. The order from 1-3 is the desired order for profile use.')
lcCmtsIngressAvoidanceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 5, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcCmtsProfileCarrierPathIndex"), (0, "LANCITY-MCNS-MIB", "lcCmtsProfilePreference"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceProfileEntry.setDescription('Defines with profile in the Tranmission table will be used for ingress avoidance. The order from 1-3 is the desired order for profile use.')
lcCmtsProfileCarrierPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: lcCmtsProfileCarrierPathIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsProfileCarrierPathIndex.setDescription('Carrier path index for the profile table.')
lcCmtsProfilePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: lcCmtsProfilePreference.setStatus('current')
if mibBuilder.loadTexts: lcCmtsProfilePreference.setDescription('Profile index per carrier path.')
lcCmtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsStatus.setStatus('current')
if mibBuilder.loadTexts: lcCmtsStatus.setDescription('Defines whether or not the particular profile is enabled for use in ingress avoidance.')
lcCmtsTransmissionProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsTransmissionProfileIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsTransmissionProfileIndex.setDescription('Describes the index into the transmission profile table.')
lcCmtsIngressAvoidanceTxProfileTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 6), )
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceTxProfileTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceTxProfileTable.setDescription('Defines Modulation Profile and Bandwidth. Coding Efficiency is calculated based on the entries.')
lcCmtsIngressAvoidanceTxProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 6, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcCmtsTxProfileIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceTxProfileEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceTxProfileEntry.setDescription('Defines with profile in the Tranmission table will be used for ingress avoidance. The order from 1-3 is the desired order for profile use.')
lcCmtsTxProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: lcCmtsTxProfileIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsTxProfileIndex.setDescription('Index for the transmission profile table.')
lcCmtsModulationProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsModulationProfileIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsModulationProfileIndex.setDescription('Index into the MCNS Upstream Modulation Table.')
lcCmtsBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsBandwidth.setStatus('current')
if mibBuilder.loadTexts: lcCmtsBandwidth.setDescription('Bandwidth to be used with the modulation profile selected.')
lcCmtsCodingEfficiency = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsCodingEfficiency.setStatus('current')
if mibBuilder.loadTexts: lcCmtsCodingEfficiency.setDescription('Coding efficiency is calculated based on the modulation profile and bandwidth selected. This number represents information bytes/second for the given settings. This calculation in based on short and long data grants and a min and max size packet transmitted for each type of grant.')
lcCmtsIngressAvoidanceMetricConfigTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 7), )
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceMetricConfigTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceMetricConfigTable.setDescription('Defines the aging multipliers and calculation timers for each metric.')
lcCmtsIngressAvoidanceMetricConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 7, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcCmtsMetricIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceMetricConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceMetricConfigEntry.setDescription('Defines the aging multipliers and calculation timers for each metric.')
lcCmtsMetricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: lcCmtsMetricIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMetricIndex.setDescription('Metric Index.')
lcCmtsAgingMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsAgingMultiplier.setStatus('current')
if mibBuilder.loadTexts: lcCmtsAgingMultiplier.setDescription('Metric aging multilpler in hundreths.')
lcCmtsCalculationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsCalculationTimer.setStatus('current')
if mibBuilder.loadTexts: lcCmtsCalculationTimer.setDescription('Frequency at which metrics should be calculated in milliseconds.')
lcCmtsIngressAvoidanceFreqStatusTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8), )
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFreqStatusTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFreqStatusTable.setDescription('This table is a status table for all frequency ranges allowed per carrier path.')
lcCmtsIngressAvoidanceFreqStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcCmtsFreqStatusCarrierPathIndex"), (0, "LANCITY-MCNS-MIB", "lcCmtsFreqStatusFreqIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFreqStatusEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceFreqStatusEntry.setDescription('This table is a status table for all frequency ranges allowed per carrier path.')
lcCmtsFreqStatusCarrierPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: lcCmtsFreqStatusCarrierPathIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusCarrierPathIndex.setDescription('Carrier Paths for each frequency.')
lcCmtsFreqStatusFreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 2), Integer32())
if mibBuilder.loadTexts: lcCmtsFreqStatusFreqIndex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusFreqIndex.setDescription('Frequency index for carrier path.')
lcCmtsFreqStatusFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsFreqStatusFreq.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusFreq.setDescription('Frequency in Hz.')
lcCmtsFreqStatusFc = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsFreqStatusFc.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusFc.setDescription('Denotes whether or not this is a center frequency.')
lcCmtsFreqStatusAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("inuse", 2), ("reserved", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsFreqStatusAvailable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusAvailable.setDescription('Denotes whether or not this is available. no - frequency is not available for ingress avoidance. yes - frequency is not being used and is available for ingress avoidance. inuse - frequency is actively being used by an upstream. reserved - frequency is reserved by an upstream channel which is currently down.')
lcCmtsFreqStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("unk", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsFreqStatusStatus.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusStatus.setDescription('Denotes status of frequency. Large integers represents the channel is extremely bad. Zero/UNK represents a Good frequency to try.')
lcCmtsFreqStatusTimeLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsFreqStatusTimeLastUsed.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusTimeLastUsed.setDescription('Denotes time since this frequency was last used.')
lcCmtsFreqStatusUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 8, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsFreqStatusUpTime.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFreqStatusUpTime.setDescription('Denotes up time last time used or current up time on this frequency.')
lcCmtsUpstreamIngressAvoidanceHealthTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 9), )
if mibBuilder.loadTexts: lcCmtsUpstreamIngressAvoidanceHealthTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsUpstreamIngressAvoidanceHealthTable.setDescription('Displays the health of each upstream channel.')
lcCmtsIngressAvoidanceHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceHealthEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsIngressAvoidanceHealthEntry.setDescription('Displays the health of each upstream channel.')
lcCmtsHealthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsHealthProfile.setStatus('current')
if mibBuilder.loadTexts: lcCmtsHealthProfile.setDescription('Upstream Ingress Avoidance Profile Index.')
lcCmtsHealthFc = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsHealthFc.setStatus('current')
if mibBuilder.loadTexts: lcCmtsHealthFc.setDescription('Center frequency for the upstream channel.')
lcCmtsHealthUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 9, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsHealthUpTime.setStatus('current')
if mibBuilder.loadTexts: lcCmtsHealthUpTime.setDescription('Time the channel has been up in this configuration.')
lcCmtsMetric1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("red", 0), ("yellow", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsMetric1Status.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMetric1Status.setDescription('Current state of the upstream channel using the thresholds set in the threshold table.')
lcCmtsMetric1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 4, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsMetric1Value.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMetric1Value.setDescription('Current value for the metric.')
lcCmtsMultiUsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 5), )
if mibBuilder.loadTexts: lcCmtsMultiUsConfigTable.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMultiUsConfigTable.setDescription('Defines carrier paths (Physical Connectivity) and channel groups for each upstream.')
lcCmtsMultiUsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lcCmtsMultiUsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMultiUsConfigEntry.setDescription('Defines carrier paths (Physical Connectivity) and channel groups for each upstream.')
lcCmtsCarrierPath = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsCarrierPath.setStatus('current')
if mibBuilder.loadTexts: lcCmtsCarrierPath.setDescription('Defines physical connectivity to each upstream receiver ifIndexes with the same carrier path cannot operate on the same frequencies.')
lcCmtsChannelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsChannelGroup.setStatus('current')
if mibBuilder.loadTexts: lcCmtsChannelGroup.setDescription('Defines which upstreams must operate on the same frequencies. Value of zero means that a given upstream is independant of all other upstream channels. Any upstream with the same value must operate on the same frequency.')
lcCmtsFrontFanOn = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsFrontFanOn.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFrontFanOn.setDescription('Current on/off state of the CMTS fan closest to the front of the chassis. If the fan is on, true is returned. If the fan is off, false is returned.')
lcCmtsMiddleFanOn = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsMiddleFanOn.setStatus('current')
if mibBuilder.loadTexts: lcCmtsMiddleFanOn.setDescription('Current on/off state of the CMTS fan closest to the middle of the chassis. If the fan is on, true is returned. If the fan is off, false is returned.')
lcCmtsBackFanOn = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmtsBackFanOn.setStatus('current')
if mibBuilder.loadTexts: lcCmtsBackFanOn.setDescription('Current on/off state of the CMTS fan closest to the back of the chassis. If the fan is on, true is returned. If the fan is off, false is returned.')
lccmtsifconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 2, 9))
lcCmtsAnnex = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("annexA", 0), ("annexB", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsAnnex.setStatus('current')
if mibBuilder.loadTexts: lcCmtsAnnex.setDescription('FEC mode - Default is Annex B which is the North American Standard Annex A is used for Euro DOCSIS.')
lcCmtsFrequencySplit = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("euroDOCSIS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcCmtsFrequencySplit.setStatus('current')
if mibBuilder.loadTexts: lcCmtsFrequencySplit.setDescription('Upstream/Downstream Frequency Split. The standard North American split is 5-42/50-862 MHz. Euro DOCSIS Split is 5-65/100-862 MHz.')
lcEvSyslog2 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcEvSyslog2.setStatus('current')
if mibBuilder.loadTexts: lcEvSyslog2.setDescription('The IP address of a 2nd Syslog server. If 0.0.0.0, syslog transmission is inhibited.')
lcEvSyslog3 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcEvSyslog3.setStatus('current')
if mibBuilder.loadTexts: lcEvSyslog3.setDescription('The IP address of a 3rd Syslog server. If 0.0.0.0, syslog transmission is inhibited.')
lcCpeMacToCmMacTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 16), )
if mibBuilder.loadTexts: lcCpeMacToCmMacTable.setStatus('current')
if mibBuilder.loadTexts: lcCpeMacToCmMacTable.setDescription('This is a table to provide a mechanism for finding the MAC address of the CM to which a CPE device is connected. The table is indexed by the MAC address of the device whose associated CM is being sought. There is exactly one row in this table for each MAC address learned by the CMTS. It is possible to have entries in this table that have no associated CM MAC address and those entries are denoted by a CM MAC address of 00 00 00 00 00 00.')
lcCpeMacToCmMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 16, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcCpeMac"))
if mibBuilder.loadTexts: lcCpeMacToCmMacEntry.setStatus('current')
if mibBuilder.loadTexts: lcCpeMacToCmMacEntry.setDescription('A row in the lcCpeMacToCmMacTable. An entry in this table exists for each MAC address that has been learned by the CMTS and is present in it Forwarding Database.')
lcCpeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 16, 1, 1), MacAddress())
if mibBuilder.loadTexts: lcCpeMac.setStatus('current')
if mibBuilder.loadTexts: lcCpeMac.setDescription('A MAC address in the CMTS Forwarding Database. This is the index into the lcCpeMacToCmMacTable.')
lcCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 16, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcCmMac.setStatus('current')
if mibBuilder.loadTexts: lcCmMac.setDescription('The MAC address of the CM to which the index MAC address is connected. For entries learned on the Ethernet side of the CMTS bridge this value will be 00 00 00 00 00 00 which indicates no CM associativity. For a CM MAC entry this value will be the same as the index, that is the MAC address of the CM itself. For a CPE device on the Cable side of the CMTS bridge this value will be the MAC address of the CM to which that CPE device is connected.')
lcCmCountsTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 2, 19), )
if mibBuilder.loadTexts: lcCmCountsTable.setStatus('current')
if mibBuilder.loadTexts: lcCmCountsTable.setDescription('This is a table to provide the number of active and registered modems on each upstream and for the entire system. Active modems are those that have performed at least an initial ranging and have not yet been ranging-aborted, ranging-timedout, or de-registered. This table is populated from the Registrar CM entries functions.')
lcCmCountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 2, 19, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcCmCountsRowNum"))
if mibBuilder.loadTexts: lcCmCountsEntry.setStatus('current')
if mibBuilder.loadTexts: lcCmCountsEntry.setDescription('A row in the lcCmCountsTable. An entry in this table exists for each upstream channel on the CMTS (1-8) and for the system totals.')
lcCmCountsRowNum = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 19, 1, 1), Counter32())
if mibBuilder.loadTexts: lcCmCountsRowNum.setStatus('current')
if mibBuilder.loadTexts: lcCmCountsRowNum.setDescription('A row index into the lcCmCountsTable. Indices 1 through 8 correspond to upstream channels and index 9 corresponds to the system totals.')
lcActiveCmCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcActiveCmCounts.setStatus('current')
if mibBuilder.loadTexts: lcActiveCmCounts.setDescription('The number of CMs on this channel that have performed an initial ranging and are still marked as operational by the CMTS.')
lcRegisteredCmCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 2, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcRegisteredCmCounts.setStatus('current')
if mibBuilder.loadTexts: lcRegisteredCmCounts.setDescription('The number of CMs on this channel that are currently registered with the CMTS.')
lccmtsProvisioning = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 1))
lcProvisioningControl = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("use-dhcp-and-tftp", 1), ("use-dhcp", 2), ("use-tftp", 3), ("use-nvram", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcProvisioningControl.setStatus('current')
if mibBuilder.loadTexts: lcProvisioningControl.setDescription("Controls the use of file-based provisioning by the CMTS. If set to: use-dhcp-and-tftp(1) the CMTS will use DHCP to find its IP address, subnet mask, default router, and TFTP server. Configuration parameters will be provisioned from a TFTP'ed parameter file, use-dhcp (2) DHCP will be used to find the IP address, subnet mask, and defaultrouter, but all other parameters will come from NVRAM, use-tftp (3) The CMTS will use NVRAM for its IP address, but other configured parameters will be loaded via TFTP, use-nvram (4) All operational parameters are taken from nonvolatile RAM.")
lcConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigIpAddress.setStatus('current')
if mibBuilder.loadTexts: lcConfigIpAddress.setDescription('The IP address of the CMTS; provides a writable equivalent of ipAdEntAddr. If set to null (0.0.0.0), the address must be provided through DHCP.')
lcConfigIpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigIpSubnet.setStatus('current')
if mibBuilder.loadTexts: lcConfigIpSubnet.setDescription('The subnet mask corresponding to lcConfigIpAddress; provides a writable equivalent of ipAdEntNetMask.')
lcConfigIpGateway = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigIpGateway.setStatus('current')
if mibBuilder.loadTexts: lcConfigIpGateway.setDescription('The Gateway address defines the next hop router (forwarder) destination for non-local IP packets.')
lcConfigTftpAddress = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigTftpAddress.setStatus('current')
if mibBuilder.loadTexts: lcConfigTftpAddress.setDescription('The IP address of the TFTP Server supplying provisioning configuration data.')
lcConfigTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigTftpFilename.setStatus('current')
if mibBuilder.loadTexts: lcConfigTftpFilename.setDescription('The default filename on the TFTP Server for acquiring provisioning configuration data (may be overridden by DHCP).')
lcConfigTimeServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigTimeServerAddress.setStatus('current')
if mibBuilder.loadTexts: lcConfigTimeServerAddress.setDescription('The IP address of the Time Server (RFC868) supplying provisioning time.')
lcConfigTimeoffset = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigTimeoffset.setStatus('current')
if mibBuilder.loadTexts: lcConfigTimeoffset.setDescription('Time offset in seconds to apply to provisioned GMT time')
lcConfigSNTPAddress = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConfigSNTPAddress.setStatus('current')
if mibBuilder.loadTexts: lcConfigSNTPAddress.setDescription('The IP Address of the SNTP Timer Server supplying provisioning time')
lcSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 5, 2), )
if mibBuilder.loadTexts: lcSerialPortTable.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortTable.setDescription('Configuration of system serial port(s)')
lcSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 5, 2, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcSerialPortNumber"))
if mibBuilder.loadTexts: lcSerialPortEntry.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortEntry.setDescription('Information for each serial port.')
lcSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: lcSerialPortNumber.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortNumber.setDescription('Index for this table.')
lcSerialPortBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200, 2400, 4800, 7200, 9600, 12000, 14400, 19200, 28800, 38400, 57600, 64000, 76800, 96000, 115200))).clone(namedValues=NamedValues(("baudrate1200b", 1200), ("baudrate2400b", 2400), ("baudrate4800b", 4800), ("baudrate7200b", 7200), ("baudrate9600b", 9600), ("baudrate12000b", 12000), ("baudrate14400b", 14400), ("baudrate19200b", 19200), ("baudrate28800b", 28800), ("baudrate38k", 38400), ("baudrate56k", 57600), ("baudrate64k", 64000), ("baudrate76k", 76800), ("baudrate96k", 96000), ("baudrate115k", 115200))).clone('baudrate9600b')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcSerialPortBaudRate.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortBaudRate.setDescription('Baud rate configured on this Serial Port')
lcSerialPortDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 2, 1, 3), Integer32().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcSerialPortDataBits.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortDataBits.setDescription('Number of data bits configured on this Serial Port')
lcSerialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcSerialPortParity.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortParity.setDescription('Type of parity configured on this Serial Port')
lcSerialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s1bit", 1), ("s15bit", 2), ("s2bit", 3))).clone('s1bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcSerialPortStopBits.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortStopBits.setDescription('Number of stop bits configured on this Serial Port')
lcSerialPortModemEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcSerialPortModemEnable.setStatus('current')
if mibBuilder.loadTexts: lcSerialPortModemEnable.setDescription('Enable the Serial Port to run with modem leads enabled')
lcModemVendorTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 5, 3), )
if mibBuilder.loadTexts: lcModemVendorTable.setStatus('current')
if mibBuilder.loadTexts: lcModemVendorTable.setDescription('This table defines modems that are allowed to register with this CMTS. Modem vendors are identified by the OUI portion of the MAC address used by the modem for registration. In order to allow further differentiation based on particular models, the entire MAC address may be masked and used to screen registrations.')
lcModemVendorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 5, 3, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcModemVendorIndex"))
if mibBuilder.loadTexts: lcModemVendorEntry.setStatus('current')
if mibBuilder.loadTexts: lcModemVendorEntry.setDescription('This entry identifies a class of modems which are allowed to register with this CMTS.')
lcModemVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: lcModemVendorIndex.setStatus('current')
if mibBuilder.loadTexts: lcModemVendorIndex.setDescription('An arbitrary index defining an instance of this entry. Ordering is not meaningful.')
lcModemVendorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcModemVendorControl.setStatus('current')
if mibBuilder.loadTexts: lcModemVendorControl.setDescription('This object controls the creation and deletion of rows in this table.')
lcModemVendorMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 3, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcModemVendorMacAddress.setStatus('current')
if mibBuilder.loadTexts: lcModemVendorMacAddress.setDescription('When masked, identifies a group of modems that are allowed to register at this CMTS. Note that the LSB of the first octet is the multicast bit; since it cannot identify a modem, it is defined to be zero.')
lcModemVendorMask = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 3, 1, 4), MacAddress().clone(hexValue="ffffff000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcModemVendorMask.setStatus('current')
if mibBuilder.loadTexts: lcModemVendorMask.setDescription('Applied to the MAC address to identify which modems are allowed to register at this CMTS. Ordinarily, the OUI portion is used to identify particular vendors, but arbitrary masks can be used. The LSB of the first octet is the multicast bit and is defined to be zero.')
lccmtsDPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 4))
lcDPStatisticsInterval = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcDPStatisticsInterval.setStatus('current')
if mibBuilder.loadTexts: lcDPStatisticsInterval.setDescription('Controls the interval at which data rates are calculated on the CMTS.')
lcDPStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 5, 4, 2), )
if mibBuilder.loadTexts: lcDPStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: lcDPStatisticsTable.setDescription('The table contains the last calculated statistics for data rates for each port on the CMTS.')
lcDPStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 5, 4, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dTpPort"))
if mibBuilder.loadTexts: lcDPStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: lcDPStatisticsEntry.setDescription('The Entry contains the last calculated statistics for data rates for one port on the CMTS.')
lcDPStatisticsTxFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcDPStatisticsTxFrameRate.setStatus('current')
if mibBuilder.loadTexts: lcDPStatisticsTxFrameRate.setDescription('The last calculated frames per second transmitted on this port.')
lcDPStatisticsRxFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcDPStatisticsRxFrameRate.setStatus('current')
if mibBuilder.loadTexts: lcDPStatisticsRxFrameRate.setDescription('The last calculated frames per second received on this port.')
lcDPStatisticsTxOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcDPStatisticsTxOctetRate.setStatus('current')
if mibBuilder.loadTexts: lcDPStatisticsTxOctetRate.setDescription('The last calculated octets per second transmitted on this port.')
lcDPStatisticsRxOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcDPStatisticsRxOctetRate.setStatus('current')
if mibBuilder.loadTexts: lcDPStatisticsRxOctetRate.setDescription('The last calculated octets per second received on this port.')
lccmtsDPConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 5))
lcForwardingMode = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp-arp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcForwardingMode.setStatus('current')
if mibBuilder.loadTexts: lcForwardingMode.setDescription('Controls the Forwarding Data Base Learning Mode. If set to none(1), the CMTS uses transparent learning. If set to dhcp-arp(2), the CMTS uses Layer-3 switching based on DHCP and ARP. Mode dhcp-arp(2) is not allowed if FunnelMode is enabled(2). The default is none(1).')
lcProxyArp = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcProxyArp.setStatus('current')
if mibBuilder.loadTexts: lcProxyArp.setDescription('Controls Proxy ARP on the CMTS when it is in transparent learning mode. If set to enable(1), the CMTS responds to an ARP received from the Cable when the IP Address is known and responds to an ARP received from the Ethernet when the IP Address in known to be on the Cable. If set to disable(2), CMTS does not respond to any ARPs. Proxy ARP cannot be enabled if FunnelMode is enabled(2). The default is disabled(2).')
lcProxyArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcProxyArpTimeout.setStatus('current')
if mibBuilder.loadTexts: lcProxyArpTimeout.setDescription('Controls the timeout (in seconds) of the Proxy Arp cache entries.')
lcArpSpoofingProtection = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcArpSpoofingProtection.setStatus('current')
if mibBuilder.loadTexts: lcArpSpoofingProtection.setDescription("Controls ARP Spoofing Protection on the CMTS when it is in layer-3 switching mode (Mode B). CMTS must be in MODE B for ARP Spoofing Protection to work. If set to enable(1), the CMTS will not forward or glean information from ARP packets received from the Cable interface whose sender's IP address does not match the IP address for the sender's hardware address as learned from DHCP gleaning. If set to disable(2), the CMTS will forward the ARP packet and will update its ARP cache with the IP address in the ARP.")
lcFunnelMode = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcFunnelMode.setStatus('current')
if mibBuilder.loadTexts: lcFunnelMode.setDescription('Controls whether or not the CMTS is in Funnel Mode. If set to enable(1), all upstream data packets are sent out the ethernet port. If set to disable(2), all packets are processed normally. Funnel mode is not allowed if ProxyArp is enabled(1) or ForwardingMode is not none(1). The default is disabled(2).')
lcDeregCmAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 432000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcDeregCmAgeTime.setStatus('current')
if mibBuilder.loadTexts: lcDeregCmAgeTime.setDescription('The time-to-live of a CM entry in the FDB for a CM that has been de-registered. This interval is expressed as the number of seconds between de-registration and removal from the FDB. If the CM ranges during this time interval aging is cancelled. The default interval is 172800 seconds (48 hours).')
lcRngNotRegCmAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 432000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcRngNotRegCmAgeTime.setStatus('current')
if mibBuilder.loadTexts: lcRngNotRegCmAgeTime.setDescription('The time-to-live of a CM entry in the FDB for a CM that has performed an initial ranging request but has not yet completed registration. This interval is expressed as the number of seconds between receipt of the initial ranging request and removal from the FDB. If the CM registers this time interval is cancelled. The default interval is 120 seconds.')
lcUsedot1dTpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUsedot1dTpAgingTime.setStatus('current')
if mibBuilder.loadTexts: lcUsedot1dTpAgingTime.setDescription('This object determines whether the default time-to-live of an entry in the FDB as specified by the dot1dTpAgingTime object is to be used or not. This setting is only meaningful for FDB entries learned on the Cable interface when Mode B (DHCP-ARP) forwarding is enabled. If enabled in Mode B, then the DHCP lease time is NOT used to specify the aging time for entries, but rather the setting for dot1dTpAgingTime is used. This object has no effect in Mode A (transparent) bridging mode. The default is disable (do NOT use dot1dTpAgingTime).')
lccmtsHwRevisions = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 6))
lccmtsHwRevArbCPLD = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevArbCPLD.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevArbCPLD.setDescription('The hardware revision number for the Arb CPLD chip.')
lccmtsHwRevTxCPLD = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevTxCPLD.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevTxCPLD.setDescription('The hardware revision number for the Tx CPLD chip.')
lccmtsHwRevAFFPGA = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevAFFPGA.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevAFFPGA.setDescription('The hardware revision number for the AFFPGA chip.')
lccmtsHwRevGT64010 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevGT64010.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevGT64010.setDescription('The hardware revision number for the Galileo GT-64010 chip.')
lccmtsHwRevPLX9080 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevPLX9080.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevPLX9080.setDescription('The hardware revision number for the PLX PCI 9080 chip.')
lccmtsHwRevBCM3210 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevBCM3210.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevBCM3210.setDescription('The hardware revision number for the Broadcom 3210 chip.')
lccmtsHwRevBCM3033 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevBCM3033.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevBCM3033.setDescription('The hardware revision number for the Broadcom 3033 chip.')
lccmtsHwRevSunset = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevSunset.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevSunset.setDescription('The hardware revision number for the Sunset transmitter.')
lccmtsHwRevDEC21143 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevDEC21143.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevDEC21143.setDescription('The hardware revision number for the DEC 21143 Ethernet chip.')
lccmtsHwRevLXT970A = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevLXT970A.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevLXT970A.setDescription('The hardware revision number for the LXT970 Ethernet PHY A chip.')
lccmtsHwRevLXT970B = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevLXT970B.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevLXT970B.setDescription('The hardware revision number for the LXT970 Ethernet PHY B chip.')
lccmtsHwRevRfRxTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 12), )
if mibBuilder.loadTexts: lccmtsHwRevRfRxTable.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevRfRxTable.setDescription('The table contains hardware revision numbers for the chips of each upstream RF receiver channel in the CMTS.')
lccmtsHwRevRfRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lccmtsHwRevRfRxEntry.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevRfRxEntry.setDescription('The table contains hardware revision numbers for the chips of one upstream RF receiver channel in the CMTS.')
lccmtsHwRevBCM3137 = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevBCM3137.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevBCM3137.setDescription('The hardware revision number for this Broadcom 3033 chip.')
lccmtsHwRevRipsaw = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsHwRevRipsaw.setStatus('current')
if mibBuilder.loadTexts: lccmtsHwRevRipsaw.setDescription('The hardware revision number for this Ripsaw receiver.')
lccmtsPoliceTolerance = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 7))
lccmtsUpPolice = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsUpPolice.setStatus('current')
if mibBuilder.loadTexts: lccmtsUpPolice.setDescription('The tolerance percentage to apply to configured maximum Upstream bit rate. This allows for minor differences in shaping algoithms by not policing to the edge. The default valued is 0% which will police to the edge.')
lccmtsDnPolice = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsDnPolice.setStatus('current')
if mibBuilder.loadTexts: lccmtsDnPolice.setDescription('The tolerance percentage to apply to configured maximum Downstream bit rate. This allows for minor differences in shaping algoithms by not policing to the edge. The default valued is 0% which will police to the edge.')
lccmtsBOOTPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 8))
lccmtsBOOTPRelayControl = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-relay-only", 2), ("enabled-relay-tagging", 3), ("enabled-cm-only-relay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsBOOTPRelayControl.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayControl.setDescription('Controls the operation of the CMTS BOOTP Relay function as listed. If set to: disabled(1) The CMTS will process BOOTP/DHCP packets without special relay processing (this is the boot-time default), enabled-relay-only(2) BOOTP/DHCP packets will be intercepted using the relay function described in RFC-1542, and server targets will be selected based not only on non-zero IP addresses in the server target table, but also based on whether the client is a registered CM, or unregistered and assumed to be a CPE host; That is, requests from CMs and CPE hosts may be sent to different servers, if desired. enabled-relay-tagging(3) BOOTP/DHCP packets will be tagged with Agent info containing the MAC address of the modem through which this request originated, in Remote ID format. enabled-cm-only-relay(4) BOOTP/DHCP packets will be intercepted using the relay function described in RFC-1542, and server targets will be selected based on non-zero IP addresses in the server target table for CM hosts ONLY. Requests from CPE hosts will be handled without special relay processing.')
lccmtsBOOTPRelaySvrTargetTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 2), )
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetTable.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetTable.setDescription('The table contains BOOTP Server target addresses, and discrimination parameters for selective targeting based upon registered CM addresses.')
lccmtsBOOTPRelaySvrTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 2, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lccmtsBOOTPRelayIndex"))
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetEntry.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetEntry.setDescription('Each entry contains one BOOTP Server target IP address, which can be unicast, multicast or broadcast, and, optionally, discrimination parameters for selective targeting based upon registered CM addresses.')
lccmtsBOOTPRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: lccmtsBOOTPRelayIndex.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayIndex.setDescription('The index value which uniquely identifies an entry in the lccmtsBOOTPRelayTable.')
lccmtsBOOTPRelaySvrTargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetIP.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetIP.setDescription('The IP (uni/multi/broad)cast address of targeted BOOTP server(s). If row is notInService(2), this entry is ignored.')
lccmtsBOOTPRelayClntSelectionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("target-handles-CM-only", 1), ("target-handles-CPE-only", 2), ("target-handles-any", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccmtsBOOTPRelayClntSelectionMask.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayClntSelectionMask.setDescription('Controls the selection of BOOTP Servers based upon client status. If set to: target-handles-CM-only(1) Client BOOTP/DHCP packets will be sent to this server address *ONLY* if client is a registered CM, target-handles-CPE-only(2) Client BOOTP/DHCP packets will be sent to this server address *ONLY* if client is NOT a registered CM, i.e presumed to be a CPE/host on the far side of a CM, target-handles-any(3) Any client (CM or CPE) BOOTP/DHCP request will be sent to this server address.')
lccmtsBOOTPRelaySvrTargetHits = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetHits.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelaySvrTargetHits.setDescription('Counts # times a client request was copied to this target, regardless of CM discrimintation.')
lccmtsBOOTPRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lccmtsBOOTPRelayRowStatus.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayRowStatus.setDescription('Controls and reflects the status of rows in this table. Only notInService(2) and active(1) states are supported - default is notInService.')
lccmtsBOOTPRelayBadLengthDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayBadLengthDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayBadLengthDiscards.setDescription('Counts # times an outgoing packet was silently dropped, due to having a miscalculated length value.')
lccmtsBOOTPRelayLocalOriginDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayLocalOriginDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayLocalOriginDiscards.setDescription('Counts # times an outgoing packet was silently dropped, due to originating in the CMTS (should never happen!).')
lccmtsBOOTPRelayExcessiveHopsDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayExcessiveHopsDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayExcessiveHopsDiscards.setDescription('Counts # times an outgoing packet was silently dropped, due to an excessive hop count before increment.')
lccmtsBOOTPRelayGatewayAddrCopies = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayGatewayAddrCopies.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayGatewayAddrCopies.setDescription('Counts # times an incoming packet had our (CMTS) address copied into the giaddr field.')
lccmtsBOOTPRelayLocalAddrSinks = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayLocalAddrSinks.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayLocalAddrSinks.setDescription('Counts # times an incoming packet was selected for local processing, due to having a CMTS CHADDR.')
lccmtsBOOTPRelayWrongGatewayAddrDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayWrongGatewayAddrDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayWrongGatewayAddrDiscards.setDescription('Counts # times an incoming packet was silently dropped, due to server inserting the wrong gateway addr (i.e. not ours).')
lccmtsBOOTPRelayNoCopyBufDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayNoCopyBufDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayNoCopyBufDiscards.setDescription("Counts # times a packet was silently dropped, due to lack of a malloc'd copy buffer.")
lccmtsBOOTPRelayMiscSilentDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayMiscSilentDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayMiscSilentDiscards.setDescription('Counts # times an outgoing packet was silently dropped, due to a variety of reasons not specifically tracked.')
lccmtsBOOTPRelayNoEpilBufDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayNoEpilBufDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayNoEpilBufDiscards.setDescription('Counts # times an outgoing packet was dropped, due to a lack of Epilogue UDP/IP buffers.')
lccmtsBOOTPRelayClntDstPortDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayClntDstPortDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayClntDstPortDiscards.setDescription('Counts # times an incoming packet was dropped, due to a destination port of BOOTP CLIENT.')
lccmtsBOOTPRelayRawRequests = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayRawRequests.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayRawRequests.setDescription('Counts # times an incoming packet was processed as a raw request (subject to further filtering).')
lccmtsBOOTPRelayRawReplies = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayRawReplies.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayRawReplies.setDescription('Counts # times an incoming packet was processed as a raw reply (subject to further filtering).')
lccmtsBOOTPRelayRqstFromCM = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayRqstFromCM.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayRqstFromCM.setDescription('Counts # times an incoming request came from a modem.')
lccmtsBOOTPRelayRqstFromCPE = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayRqstFromCPE.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayRqstFromCPE.setDescription('Counts # times an incoming request came from Customer Premises Equipment.')
lccmtsBOOTPRelayDPCATVPuts = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayDPCATVPuts.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayDPCATVPuts.setDescription('Counts # times an outgoing packet was sent to the cable DP_put routine.')
lccmtsBOOTPRelayDPEnetPuts = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayDPEnetPuts.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayDPEnetPuts.setDescription('Counts # times an outgoing packet was sent to the ethernet DP_put routine.')
lccmtsBOOTPRelayEpilUDPBufSends = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayEpilUDPBufSends.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayEpilUDPBufSends.setDescription('Counts # times an outgoing packet was sent to the Epilogue UDP_send routine.')
lccmtsBOOTPRelayNullMACTags = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayNullMACTags.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayNullMACTags.setDescription('Counts # times an outgoing packet was tagged with a null CM macaddress.')
lccmtsBOOTPRelayNonNullMACTags = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayNonNullMACTags.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayNonNullMACTags.setDescription('Counts # times an outgoing packet was tagged with a non-null CM macaddress.')
lccmtsBOOTPRelayWrongPortRqstDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayWrongPortRqstDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayWrongPortRqstDiscards.setDescription('Counts # times an incoming request packet was discarded due to originating on a port other than cable.')
lccmtsBOOTPRelayWrongPortReplyDiscards = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 8, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsBOOTPRelayWrongPortReplyDiscards.setStatus('current')
if mibBuilder.loadTexts: lccmtsBOOTPRelayWrongPortReplyDiscards.setDescription('Counts # times an incoming reply packet was discarded due to originating on a port other than enet.')
lccmtsDNSResolver = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 9))
lccmtsDNSResolverControl = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsDNSResolverControl.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverControl.setDescription('Controls the operation of the DNS Resolver function as listed. If set to: disabled(1) The CMTS will not resolve names into addresses using DNS, returning a blank record for all lookups, enabled(2) DNS reply packets will be processed and the results returned in the response record.')
lccmtsDNSResolverServiceType = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("recursiveOnly", 1), ("iterativeOnly", 2), ("recursiveAndIterative", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsDNSResolverServiceType.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverServiceType.setDescription('Kind of DNS resolution service provided: recursiveOnly(1) indicates a stub resolver. iterativeOnly(2) indicates a normal full service resolver. recursiveAndIterative(3) indicates a full-service resolver which performs a mix of recursive and iterative queries.')
lccmtsDNSResolverServersCfgd = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsDNSResolverServersCfgd.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverServersCfgd.setDescription('The numbers indicates the total number of enabled servers configured by the operator.')
lccmtsDNSResolverServerTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 4), )
if mibBuilder.loadTexts: lccmtsDNSResolverServerTable.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverServerTable.setDescription('This table contains DNS Server addresses, and hierarchical selection parameters for Name Server lookups.')
lccmtsDNSResolverServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 4, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lccmtsDNSResolverIndex"))
if mibBuilder.loadTexts: lccmtsDNSResolverServerEntry.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverServerEntry.setDescription('Each entry contains one DNS Server target IP address, its dot notation name, and its status (active or notInService).')
lccmtsDNSResolverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: lccmtsDNSResolverIndex.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverIndex.setDescription('The index value which uniquely identifies an entry in the lccmtsDNSResolverTable.')
lccmtsDNSResolverServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsDNSResolverServerIP.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverServerIP.setDescription('The IP address of a DNS server. If row status is notInService(2), this entry is ignored.')
lccmtsDNSResolverServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsDNSResolverServerPriority.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverServerPriority.setDescription('Precedence (priority) ordering of this entry in the server lookup hierarchy. Highest legal number is highest priority, lowest number is lowest priority.')
lccmtsDNSResolverServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsDNSResolverServerName.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverServerName.setDescription('The dot notation name of the DNS server.')
lccmtsDNSResolverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 5, 9, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmtsDNSResolverRowStatus.setStatus('current')
if mibBuilder.loadTexts: lccmtsDNSResolverRowStatus.setDescription('Controls and reflects the status of rows in this table. Only notInService(2) and active(1) states are supported - default is notInService.')
lccmtsDevServer = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 5, 10))
lccmtsDevServerBootState = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("operational", 1), ("disabled", 2), ("waitingForDhcpOffer", 3), ("waitingForDhcpResponse", 4), ("waitingForTimeServer", 5), ("waitingForTftp", 6), ("refusedByCmts", 7), ("forwardingDenied", 8), ("other", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsDevServerBootState.setStatus('current')
if mibBuilder.loadTexts: lccmtsDevServerBootState.setDescription('If operational(1), the device has completed loading and processing of configuration parameters and the CMTS has completed the Registration exchange. If disabled(2) then the device was administratively disabled, possibly by being refused network access in the configuration file. If waitingForDhcpOffer(3) then a DHCP Discover has been transmitted and no offer has yet been received. If waitingForDhcpResponse(4) then a DHCP Request has been transmitted and no response has yet been received. If waitingForTimeServer(5) then a Time Request has been transmitted and no response has yet been received. If waitingForTftp(6) then a request to the TFTP parameter server has been made and no response received. If refusedByCmts(7) then the Registration Request/Response exchange with the CMTS failed. If forwardingDenied(8) then the registration process completed, but the network access option in the received configuration file prohibits forwarding. ')
lccmtsDevServerDhcp = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 10, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsDevServerDhcp.setStatus('current')
if mibBuilder.loadTexts: lccmtsDevServerDhcp.setDescription('The IP address of the DHCP server that assigned an IP address to this device. Returns 0.0.0.0 if DHCP was not used for IP address assignment.')
lccmtsDevServerTime = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 10, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsDevServerTime.setStatus('current')
if mibBuilder.loadTexts: lccmtsDevServerTime.setDescription('The IP address of the Time server (RFC-868).')
lccmtsDevServerTftp = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 10, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsDevServerTftp.setStatus('current')
if mibBuilder.loadTexts: lccmtsDevServerTftp.setDescription('The IP address of the TFTP server responsible for downloading provisioning and configuration parameters to this device.')
lccmtsDevServerConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 5, 10, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lccmtsDevServerConfigFile.setStatus('current')
if mibBuilder.loadTexts: lccmtsDevServerConfigFile.setDescription('The name of the device configuration file read from the TFTP server.')
lcScanningFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 6, 1), )
if mibBuilder.loadTexts: lcScanningFrequencyTable.setStatus('current')
if mibBuilder.loadTexts: lcScanningFrequencyTable.setDescription('Defines the frequencies and scanning order used by the modem to find the downstream channel.')
lcScanningFrequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcScanIndex"))
if mibBuilder.loadTexts: lcScanningFrequencyEntry.setStatus('current')
if mibBuilder.loadTexts: lcScanningFrequencyEntry.setDescription('Defines a range of channels to be used by the modem to find the downstream channel.')
lcScanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcScanControl.setStatus('current')
if mibBuilder.loadTexts: lcScanControl.setDescription('Controls the creation and deletion of rows in this table. See RFC-1903 for definition of enumeration.')
lcScanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcScanIndex.setStatus('current')
if mibBuilder.loadTexts: lcScanIndex.setDescription('An ad-hoc index for defining the scanning order for this table.')
lcScanFreqStart = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1, 3), Integer32()).setUnits('kilohertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcScanFreqStart.setStatus('current')
if mibBuilder.loadTexts: lcScanFreqStart.setDescription('The center frequency of the first channel to scan in this range.')
lcScanFreqEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1, 4), Integer32()).setUnits('kilohertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcScanFreqEnd.setStatus('current')
if mibBuilder.loadTexts: lcScanFreqEnd.setDescription('The center frequency of the last channel to scan in this range. This may be higher or lower than lcScanFreqStart.')
lcScanUseHrc = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1, 5), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcScanUseHrc.setStatus('current')
if mibBuilder.loadTexts: lcScanUseHrc.setDescription('If TRUE then the range is to use the HRC channels which correspond to the Std/IRC channels whose center frequencies are defined by FreqStart and FreqEnd (i.e. offset the values in FreqStart and FreqEnd before using them).')
lcScanStep = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1, 6), Integer32()).setUnits('kilohertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcScanStep.setStatus('current')
if mibBuilder.loadTexts: lcScanStep.setDescription('The absolute value of the increment (or decrement) to use in stepping through this range.')
lcScanChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 6, 1, 1, 7), Integer32().clone(6000)).setUnits('kilohertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcScanChannelWidth.setStatus('current')
if mibBuilder.loadTexts: lcScanChannelWidth.setDescription('The channel width to use for this range. Only 6000 and 8000 are allowed.')
lccmAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 6, 2))
lccmIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 6, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmIpAddress.setStatus('current')
if mibBuilder.loadTexts: lccmIpAddress.setDescription('The IP address of the CM; provides a writable equivalent of ipAdEntAddr. If set to null (0.0.0.0), the address must be provided through DHCP.')
lccmIpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 6, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lccmIpSubnet.setStatus('current')
if mibBuilder.loadTexts: lccmIpSubnet.setDescription('The subnet mask corresponding to lcCMIpAddress; provides a writable equivalent of ipAdEntNetMask.')
lcTrapTypeTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 7, 1), )
if mibBuilder.loadTexts: lcTrapTypeTable.setStatus('current')
if mibBuilder.loadTexts: lcTrapTypeTable.setDescription('The trap type control table contains an entry for each type of trap supported by the system.')
lcTrapTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 7, 1, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcTrapTypeIndex"))
if mibBuilder.loadTexts: lcTrapTypeEntry.setStatus('current')
if mibBuilder.loadTexts: lcTrapTypeEntry.setDescription('An entry in this table defines a particular trap type supported by the system.')
lcTrapTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("coldstartTrap", 1), ("warmstartTrap", 2), ("linkUpTrap", 3), ("linkDownTrap", 4), ("authenticationFailureTrap", 5), ("topologyChangeTrap", 6), ("newRootTrap", 7), ("lcMcastJoinTrap", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcTrapTypeIndex.setStatus('current')
if mibBuilder.loadTexts: lcTrapTypeIndex.setDescription('The variable is the index of this entry in the lcTrapTypeTable.')
lcTrapTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sendTrap", 1), ("noTrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcTrapTypeStatus.setStatus('current')
if mibBuilder.loadTexts: lcTrapTypeStatus.setDescription('This variable controls whether this type of trap is generated by this device.')
lcBootedAlbumFilename = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcBootedAlbumFilename.setStatus('current')
if mibBuilder.loadTexts: lcBootedAlbumFilename.setDescription('The filename that is embedded in the flash album header of the currently booted album software image')
lcBootedAlbumSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcBootedAlbumSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: lcBootedAlbumSequenceNumber.setDescription('The sequence number of the currently loaded software image.')
lcIpFiltSendDu = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcIpFiltSendDu.setStatus('current')
if mibBuilder.loadTexts: lcIpFiltSendDu.setDescription("This variable specifies whether a 'destination unreachable' ICMP message is sent when a packet is filtered due to IP protocol filtering.")
lcIpFiltIcmp9 = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcIpFiltIcmp9.setStatus('current')
if mibBuilder.loadTexts: lcIpFiltIcmp9.setDescription('This variable specifies whether ICMP Type 9 packets are forwarded or filtered on all interfaces.')
lcMulticastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 7, 6))
lcMcastControl = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("discard", 2), ("igmp", 3), ("trap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcMcastControl.setStatus('current')
if mibBuilder.loadTexts: lcMcastControl.setDescription('Action to take on receiving an IP multicast packet bound for the subscriber network. If pass(1), the CM acts as a bridge, transparently forwarding all multicast packets. If filter(2), all IP multicast packets are discarded. If igmp(3) then the CM acts as an IGMP proxy and only forwards packets whose addresses were requested by the subscriber. If trap(4) then the CM transmits IGMP queries on the subscriber side. On receiving Reports, it transmits an SNMP trap. Multicast packets are forwarded, and presumably blocked by SNMP- managed filters.')
lcMcastAddressTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 2), )
if mibBuilder.loadTexts: lcMcastAddressTable.setStatus('current')
if mibBuilder.loadTexts: lcMcastAddressTable.setDescription('Describes the current state of multicast address filtering being performed by the IGMP proxy.')
lcMcastAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 2, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcMcastAddress"))
if mibBuilder.loadTexts: lcMcastAddressEntry.setStatus('current')
if mibBuilder.loadTexts: lcMcastAddressEntry.setDescription('Describes the current state of a multicast address controlled by the IGMP proxy.')
lcMcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: lcMcastAddress.setStatus('current')
if mibBuilder.loadTexts: lcMcastAddress.setDescription('The IP multicast address being managed.')
lcMcastAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcMcastAdminState.setStatus('current')
if mibBuilder.loadTexts: lcMcastAdminState.setDescription('Controls addition of static entries or deletion of any entries in this table.')
lcMcastOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonmember", 1), ("delaying", 2), ("idle", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcMcastOperState.setStatus('current')
if mibBuilder.loadTexts: lcMcastOperState.setDescription('Reflects the IGMP state of this address. If static(4), the entry was created as a result of management action, and the entry is not subject to the IGMP protocol.')
lcMcastTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcMcastTtl.setStatus('current')
if mibBuilder.loadTexts: lcMcastTtl.setDescription('Time-to-live for this entry. Will return zero for static entries.')
lcMcastTrapAddress = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 6, 3), IpAddress())
if mibBuilder.loadTexts: lcMcastTrapAddress.setStatus('current')
if mibBuilder.loadTexts: lcMcastTrapAddress.setDescription('The IP multicast address that is included in the lcMcastJoin trap. This object only exists for purposes of inclusion in the trap message.')
lcRestartFromFactoryDefaults = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcRestartFromFactoryDefaults.setStatus('current')
if mibBuilder.loadTexts: lcRestartFromFactoryDefaults.setDescription('Setting this object to true(1) causes the device to reset. When restarting, it will have forgotten all configuration parameters that are normally stored in nonvolatile memory. The device will start up as if delivered from the factory. Reading this object always returns false(2).')
lcPhyTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 7, 8), )
if mibBuilder.loadTexts: lcPhyTable.setStatus('current')
if mibBuilder.loadTexts: lcPhyTable.setDescription('Determines how the ETHERNET PHYs are configured and operating')
lcPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 7, 8, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcPhyIndex"))
if mibBuilder.loadTexts: lcPhyEntry.setStatus('current')
if mibBuilder.loadTexts: lcPhyEntry.setDescription('Determines how an ETHERNET PHYs is configured and operating')
lcPhyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("aux1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcPhyIndex.setStatus('current')
if mibBuilder.loadTexts: lcPhyIndex.setDescription('Name/Index for each ETHERNET PHY')
lcPhyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 8, 1, 2), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcPhyEnable.setStatus('current')
if mibBuilder.loadTexts: lcPhyEnable.setDescription('If true, this PHY may be used. If false, this will not be used.')
lcPhyAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 8, 1, 3), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcPhyAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: lcPhyAutoNegotiate.setDescription('If true, this PHY autonegotiates if active. If false, this PHY is manually configured if active.')
lcPhyActive = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcPhyActive.setStatus('current')
if mibBuilder.loadTexts: lcPhyActive.setDescription('If true, this PHY is the one being used. If false, this PHY is not being used.')
lcPhySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 8, 1, 5), Integer32().clone(10000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcPhySpeed.setStatus('current')
if mibBuilder.loadTexts: lcPhySpeed.setDescription('Determines the speed for this PHY. If lcPhyAutoNegotiate is true, writes to this value are prohibited. If lcPhyAutoNegotiate is false, this PHY will be force to this speed. Valid values are 10000000 and 100000000')
lcPhyFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 8, 1, 6), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcPhyFullDuplex.setStatus('current')
if mibBuilder.loadTexts: lcPhyFullDuplex.setDescription('Determines the duplex mode for this PHY. If lcPhyAutoNegotiate is true, writes to this value are prohibited. If lcPhyAutoNegotiate is false, this PHY will be force to this duplex mode')
lcStickyYellowTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 7, 9), )
if mibBuilder.loadTexts: lcStickyYellowTable.setStatus('current')
if mibBuilder.loadTexts: lcStickyYellowTable.setDescription('This table provides a maintenance-history area where notes about the device may be stored. The contents of this table are entirely for human benefit and have no effect on the operation of the device. Up to 8 entries of up to 80 characters each may be stored.')
lcStickyYellowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 7, 9, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcStickyYellowIndex"))
if mibBuilder.loadTexts: lcStickyYellowEntry.setStatus('current')
if mibBuilder.loadTexts: lcStickyYellowEntry.setDescription('Each entry provides a line of text of maintenance history.')
lcStickyYellowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: lcStickyYellowIndex.setStatus('current')
if mibBuilder.loadTexts: lcStickyYellowIndex.setDescription('Provides an index by which to distinguish up to 8 lines of text.')
lcStickyYellowPad = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 9, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcStickyYellowPad.setStatus('current')
if mibBuilder.loadTexts: lcStickyYellowPad.setDescription("Contents of this object are for the benefit of a human operator and may be used for any information, such as maintenance history, that the operator wishes to associate with the device. Contents of this object have no effect on the operation of the device. Setting this object to any non-null value either creates the row or overwrites previous text. Setting to the the null string deletes the row. Set's longer than 80 characters are truncated.")
lcResetFilters = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcResetFilters.setStatus('current')
if mibBuilder.loadTexts: lcResetFilters.setDescription('Setting this object to true(1) causes the device to reset the following Docsis MIB objects as follows, so that filters are no longer applied to traffic: docsDevFilterLLCDefault is set to accept(2). docsDevFilterIpDefault is set to accept(2). All entries in the docsDevFilterLLCTable are destroyed. All entries in the docsDevFilterIpTable are destroyed. Note that the device is not reset; filters are destroyed on the fly. Reading this object always returns false(2). This object can be used to clear out previously set filters without having to know all the instances of existing entries.')
lcResetNmAccessTable = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcResetNmAccessTable.setStatus('current')
if mibBuilder.loadTexts: lcResetNmAccessTable.setDescription('Setting this object to true(1) causes the device to destroy all docsDevNmAccessTable entries, such that the table is empty. The DOCSIS Cable Device MIB specifies that it the table is empty, access to SNMP objects is unrestricted. Note that the device is not reset; entries are destroyed on the fly. Reading this object always returns false(2). This object can be used to clear out previously set entries in the docsDevNmAccessTable without having to know all the instances of existing entries.')
lcFlashPersistenceSwitch = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 12), Bits().clone(namedValues=NamedValues(("nmAccess", 0), ("llcIpFilters", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcFlashPersistenceSwitch.setStatus('current')
if mibBuilder.loadTexts: lcFlashPersistenceSwitch.setDescription('Specifies the flash persistence behavior of the associated MIB objects. lcFlashPersistenceSwitch MIB object is itself saved to flash. At modem startup, the value of lcFlashPersistenceSwitch is read from flash and used to determine how to initialize the associated MIB objects. At runtime, lcFlashPersistenceSwitch is used to determine whether or not modifications made to the enumerated MIB objects are saved to flash. The factory default is no bits set; thus, none of the enumerated MIB objects are initialized from flash, and subsequent modifications to the enumerated MIB objects are not saved to flash. If a bit value is set at startup, the associated MIB object will be initialized from flash memory, and subsequent modifications will be saved to flash. If a bit is set at runtime, the associated MIB object is immediately written to flash, and subsequent modifications will be saved to flash. If a bit value is not set at startup, factory default values will be used to initialize the associated MIB object, and subsequent modifications will not be saved to flash memory. If a bit is cleared during runtime, subsequent modifications to the associated MIB object will not be saved to flash. The nmAccess(0) bit effects the docsDevNmAccessTable. The llcIpFilters(1) bit effects docsDevFilterLLCDefault, docsDevFilterLLCTable, docsDevFilterIpDefault, and docsDevFilterIpTable. ')
lcConcatenationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcConcatenationEnabled.setStatus('current')
if mibBuilder.loadTexts: lcConcatenationEnabled.setDescription('For modem, this determines if concatenation should be turned on or not, when it is supported by the headend. For headend, this determines if concatenation support is desirable and possible (only possible on 3210B or later chips).')
lcConsoleAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 482, 60, 7, 14))
lcConsoleUserTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 1), )
if mibBuilder.loadTexts: lcConsoleUserTable.setStatus('current')
if mibBuilder.loadTexts: lcConsoleUserTable.setDescription('Defines user names, passwords, and access privileges for console and telnet access to the device. This table is primarily a repository for user names and passwords, as the accesss rights are actually defined in other tables. This table points to the lcConsoleLevelTable, which in turn may point to docsDevNmAccessTable. Access to this table itself is restricted in the same manner as docsDevNmAccessTable; that is, the operator must have write privileges to be able to read this table (with exception of being able to read their own entry).')
lcConsoleUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 1, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcConsoleUserIndex"))
if mibBuilder.loadTexts: lcConsoleUserEntry.setStatus('current')
if mibBuilder.loadTexts: lcConsoleUserEntry.setDescription('Describes the attributes of a single user login.')
lcConsoleUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lcConsoleUserIndex.setStatus('current')
if mibBuilder.loadTexts: lcConsoleUserIndex.setDescription('Provides an index to this table. Provides no semantics.')
lcConsoleUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleUserStatus.setStatus('current')
if mibBuilder.loadTexts: lcConsoleUserStatus.setDescription('Controls additions and deletions from this table. May only be set to createAndGo or destroy.')
lcConsoleUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 1, 1, 3), DisplayString().clone('root')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleUserName.setStatus('current')
if mibBuilder.loadTexts: lcConsoleUserName.setDescription('User login name, as used for the console or telnet. Deletion of the currently logged in account results in being logged out.')
lcConsoleUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleUserPassword.setStatus('current')
if mibBuilder.loadTexts: lcConsoleUserPassword.setDescription("The user's password, as used for the console or telnet. This is an MD5 hashed string, and returns a 32 character ASCII representation of the hex 16 byte value when a get is attempted. For set operations, the value for the set must be the 32 byte ASCII representation of the 16 byte hex MD5 hash value. See RFC 1321 for MD5 hash operations. The default value is the MD5 hash of the null string.")
lcConsoleUserLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleUserLevel.setStatus('current')
if mibBuilder.loadTexts: lcConsoleUserLevel.setDescription('The index of a row in lcConsoleLevelTable which defines the access privileges for this user. If the referenced row does not exist then access is not allowed.')
lcConsoleLevelTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 2), )
if mibBuilder.loadTexts: lcConsoleLevelTable.setStatus('current')
if mibBuilder.loadTexts: lcConsoleLevelTable.setDescription('Defines access privilege levels for the console and for telnet. Entries in this table are referenced by the lcConsoleUserTable. This table, in turn, will reference docsDevNmAccessTable.')
lcConsoleLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 2, 1), ).setIndexNames((0, "LANCITY-MCNS-MIB", "lcConsoleLevelIndex"))
if mibBuilder.loadTexts: lcConsoleLevelEntry.setStatus('current')
if mibBuilder.loadTexts: lcConsoleLevelEntry.setDescription('Defines a specific console privilege level in terms of access method and access name.')
lcConsoleLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: lcConsoleLevelIndex.setStatus('current')
if mibBuilder.loadTexts: lcConsoleLevelIndex.setDescription('Provides an index to this table, referenced by lcConsoleUserLevel. Provides no ordering or other semantics.')
lcConsoleLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleLevelStatus.setStatus('current')
if mibBuilder.loadTexts: lcConsoleLevelStatus.setDescription('Controls additions and deletions from this table. May only be set to createAndGo or destroy.')
lcConsoleLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleLevelName.setStatus('current')
if mibBuilder.loadTexts: lcConsoleLevelName.setDescription('A label which can be attached to this access Level as a mnemonic aid. Not used operationally.')
lcConsoleLevelMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("snmpv1", 1))).clone('snmpv1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleLevelMethod.setStatus('current')
if mibBuilder.loadTexts: lcConsoleLevelMethod.setDescription('Defines which SNMP access method is used to validate requests from this level. If snmpv1(1), then read-only, read-write, and sundry other privileges are derived from docsDevNmAccessTable and lcNmAccessExtensionTable.')
lcConsoleLevelSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 2, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcConsoleLevelSecurityName.setStatus('current')
if mibBuilder.loadTexts: lcConsoleLevelSecurityName.setDescription('If snmpv1 access is used, this value supplies the community string. ')
lcNmAccessExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 482, 60, 7, 15), )
if mibBuilder.loadTexts: lcNmAccessExtensionTable.setStatus('current')
if mibBuilder.loadTexts: lcNmAccessExtensionTable.setDescription('Further qualifies the privileges accorded to each row of the docsDevNmAccessTable. This table provides a set of specific privileges for users who are either using SNMPv1 directly or who are using SNMPv1-based access through the console.')
lcNmAccessExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 482, 60, 7, 15, 1), )
docsDevNmAccessEntry.registerAugmentions(("LANCITY-MCNS-MIB", "lcNmAccessExtensionEntry"))
lcNmAccessExtensionEntry.setIndexNames(*docsDevNmAccessEntry.getIndexNames())
if mibBuilder.loadTexts: lcNmAccessExtensionEntry.setStatus('current')
if mibBuilder.loadTexts: lcNmAccessExtensionEntry.setDescription('Qualifies the privileges accorded to a row of docsDevNmAccessTable.')
lcNmAccessAdditionalPrivileges = MibTableColumn((1, 3, 6, 1, 4, 1, 482, 60, 7, 15, 1, 1), Bits().clone(namedValues=NamedValues(("resetAllowed", 0), ("accountManager", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lcNmAccessAdditionalPrivileges.setStatus('current')
if mibBuilder.loadTexts: lcNmAccessAdditionalPrivileges.setDescription("Defines additional privileges allowed a user. The resetAllowed bit (value 0x80) allows an operator with a read-only account the privilege of resetting the CMTS from either a telnet or console session using the CLI reset command, in addition to all other privileges allowed by the docsDevNmAccessTable for a read/only account. The resetAllowed bit does not allow the user to use the 'factory' option of the reset command. The resetAllowed bit does not allow the user remote SNMP write access to either the docsDevResetNow or the lcRestartFromFactoryDefault MIBs. A read/write entry gets reset ability automatically, so setting resetAllowed for read/write entries is not necessary. The accountManager bit (value 0x40) allows a read/write account to perform the additional account management function of creation, modification, and deletion of accounts, in addition to any other privileges accorded by docsDevNmAccessTable. Read/only accounts do not access the accountManager bit.")
lcTelnetAllowedSessions = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 3), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcTelnetAllowedSessions.setStatus('current')
if mibBuilder.loadTexts: lcTelnetAllowedSessions.setDescription('Indicates the number of remote telnet access sessions allowed. A value of 0 indicates remote telnet access is denied. A maximum of 5 is allowed.')
lcSessionInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcSessionInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: lcSessionInactivityTimeout.setDescription('The session inactivity timeout value in minutes. A value of 0 indicates no session timeout. The maximum timeout is one week. Applies to all sessions (both Command line and Telnet sessions), but each session maintains a separate inactivity timer. This timer starts after a successful login, and is restarted every time a command is entered. If this timer expires, the associated session is terminated. Termination of the console results in a user logout. Termination of a telnet session results in a user logout and a telnet disconnect process.')
lcAuthFailErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nmAccessTableRestriction", 1), ("noWriteAccessToMibVar", 2), ("other", 3))))
if mibBuilder.loadTexts: lcAuthFailErrorStatus.setStatus('current')
if mibBuilder.loadTexts: lcAuthFailErrorStatus.setDescription("The reason for failure to validate the SNMP request. nmAccessTableRestriction(1) indicates that the requesting network management station (NMS) does not have appropriate permission to perform the SNMP request, because it either does not match an ip address in the docsDevNmAccessTable, or the community string in the SNMP request did not match the community string in docsDevNmAccessTable for the requesting NMS, or the docsDevNmAccessControl value specified in the docsDevNmAccessTable for this NMS was not sufficient to allow access for the SNMP request type (either 'get' or 'set'), or finally the SNMP request from this NMS is not accepted on the interface (ethernet or CATV) that the request was received. noWriteAccessToMibVar(2) indicates that an SNMP set request was received for a mib variable whose write access control is set. other(3) indicates an nonspecific error.")
lcAuthFailCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: lcAuthFailCommunityString.setStatus('current')
if mibBuilder.loadTexts: lcAuthFailCommunityString.setDescription('This the community string received in a Get/Set SNMP request that did not pass authentication tests. This object is returned in the authenticationFailure trap.')
lcAuthFailIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 4, 3), IpAddress())
if mibBuilder.loadTexts: lcAuthFailIpAddr.setStatus('current')
if mibBuilder.loadTexts: lcAuthFailIpAddr.setDescription('This is the source address of a Get/Set SNMP request that did not pass authentication tests. This object is returned in the authenticationFailure trap.')
lcAuthFailInterface = MibScalar((1, 3, 6, 1, 4, 1, 482, 60, 7, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("catv", 2), ("other", 3))))
if mibBuilder.loadTexts: lcAuthFailInterface.setStatus('current')
if mibBuilder.loadTexts: lcAuthFailInterface.setDescription('This is the interface port on which was received a Get/Set SNMP request that did not pass authentication tests. This object is returned in the authenticationFailure trap.')
lcMcastJoin = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1850)).setObjects(("LANCITY-MCNS-MIB", "lcMcastTrapAddress"))
if mibBuilder.loadTexts: lcMcastJoin.setDescription('Generated when lcMcastControl is set to trap(4) and an initial IGMP Report is received from the subscriber network.')
lcErrKernelFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,100)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrKernelFailure.setDescription(' System tasking failure')
lcErrNuSendItemFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,101)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrNuSendItemFailure.setDescription(' NU_Send_Item failed but task will try to send again')
lcErrUnknown = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,200)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrUnknown.setDescription(' Unknown error SNMP Trap')
lcErrSystemError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,201)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSystemError.setDescription(' System error, some sort of exception. Displayed are the EPC, Cause, BadVaddr and Status registers.')
lcErrTest = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,202)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTest.setDescription(' Testing error handling')
lcErrAssert = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,203)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrAssert.setDescription(' Assertion failed')
lcErrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,204)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrShutdown.setDescription(' Shutdown initiated')
lcErrFshReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,205)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrFshReset.setDescription(' Event log was cleared.')
lcErrRptReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,206)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRptReset.setDescription(' Event reporting set to default values.')
lcErrSystemError2 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,207)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSystemError2.setDescription(' System error, some sort of exception, further details for the 4700 processor, specifically the ErrorEPC and CacheError registers.')
lcErrWatchdogReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,208)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrWatchdogReset.setDescription(' The system was reset because the watchdog timer fired. This means the software was not operating normally, in that the watchdog timer should be periodically cleared to prevent this reset from occurring.')
lcMsgBacktrace = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,209)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcMsgBacktrace.setDescription(' Info about a system error: calling stack display, helpful for problem analysis.')
lcMsgBacktraceEnded = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,210)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcMsgBacktraceEnded.setDescription(' Info about a system error: calling stack display reached the top and further info is displayed as to whether this was a normal or unexpected termination.')
lcMsgBacktrace2 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,211)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcMsgBacktrace2.setDescription(' Info about a system error: called routine arguments display, helpful for problem analysis.')
lcMsgDSMakeHistoryEntry = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,212)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcMsgDSMakeHistoryEntry.setDescription(' Nuke history trace.')
lcMsgPowerSwitchCrash = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,213)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcMsgPowerSwitchCrash.setDescription(' helpful for problem analysis.')
lcMsgNullEvent = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,214)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcMsgNullEvent.setDescription(' helpful for problem analysis.')
lcErrRegMemory = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,300)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegMemory.setDescription(' Unable to allocate memory for initial ranging')
lcErrRegRestartRegistration = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,301)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegRestartRegistration.setDescription(' Re-starting registration for modem')
lcErrRegNoInitSid = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,302)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegNoInitSid.setDescription(' Unable to allocate initial service ID for modem')
lcErrRegRangingFailed = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,303)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegRangingFailed.setDescription(' Ranging retries exceeded for modem')
lcErrRegInvalidRanging = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,304)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegInvalidRanging.setDescription(' Invalid ranging request received from modem')
lcErrRegRangingTimeout = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,305)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegRangingTimeout.setDescription(' Ranging timed out for modem')
lcErrRegInvalidRegistration = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,306)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegInvalidRegistration.setDescription(' Invalid registration request received from modem')
lcErrRegNoModemIp = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,307)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegNoModemIp.setDescription(' Registration request from modem did not have Modem IP Address TLV (12).')
lcErrRegNoIpAtAll = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,308)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegNoIpAtAll.setDescription(' Registration request from modem did not have Modem IP Address TLV (12) or TFTP Server Provisioned Modem Address (20) so IP address 0.0.0.0 was assigned.')
lcErrRegUnpackingFail = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,309)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegUnpackingFail.setDescription(' Unable to unpack the TLV data in the registration request received from modem')
lcErrRegRegisteredAlready = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,310)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegRegisteredAlready.setDescription(' Modem is already registered as another SID')
lcErrRegValidationFail = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,311)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegValidationFail.setDescription(' Registration request data in error, failed validation test.')
lcErrRegNoRegSid = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,312)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRegNoRegSid.setDescription(' Registration request failed because no SID was available.')
lcErrCmctrlGenericEmergency = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,400)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCmctrlGenericEmergency.setDescription(' Control Task fatal error is reported ')
lcErrCmctrlGenericDebug = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,401)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCmctrlGenericDebug.setDescription(' Control Task fatal error is reported ')
lcErrCmctrlUccNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,402)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCmctrlUccNotSupported.setDescription(' Upstream Change Channel not currently supported.')
lcErrCtInvalidEvent = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,403)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCtInvalidEvent.setDescription(' Invalid ITM type received.')
lcErrLossOfSynch = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,404)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrLossOfSynch.setDescription(' Synchronization Lost.')
lcErrAcquiredSynch = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,405)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrAcquiredSynch.setDescription(' Synchronization acquired on frequency.')
lcErrCmctrlUcdComplete = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,406)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCmctrlUcdComplete.setDescription(' UCD Complete.')
lcErrCmctrlUccRx = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,407)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCmctrlUccRx.setDescription(' UCC received for channel.')
lcErrRescan = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,408)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrRescan.setDescription(' Rescan cause.')
lcErrLostPulse = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,409)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrLostPulse.setDescription(' Lost Pulse.')
lcErrLostSynch = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,410)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrLostSynch.setDescription(' Lost Synch.')
lcErrIrqPhy1 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,411)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrIrqPhy1.setDescription(' FEC Lost Lock.')
lcErrIrqPhy2 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,412)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrIrqPhy2.setDescription(' Phy2 IRQ.')
lcErrCtRangeAbort = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,413)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCtRangeAbort.setDescription(' Ranging aborted by CMTS ')
lcErrCtTxAdjustments = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,414)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCtTxAdjustments.setDescription(' TX adjusted by CMTS ')
lcErrCtRangingComplete = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,415)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCtRangingComplete.setDescription(' Ranging Complete ')
lcErrUnexpectedBpdu = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,500)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrUnexpectedBpdu.setDescription(' Unexpected spanning tree packet format received')
lcErrAllocatorInternal = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,600)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrAllocatorInternal.setDescription(' Internal inconsistency in Upstream Scheduler due to CMTS malfunction. Contact Customer Support.')
lcErrAllocatorResource = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,601)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrAllocatorResource.setDescription(' Downstream transmitter hang reported by scheduler. CMTS is reset to clear transmittter problem. If this happens repeatedly, contact Customer Support.')
lcErrHedpBufCountError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,700)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpBufCountError.setDescription(' Initialization Mismatched Buffer Counts')
lcErrHedpIpSecurityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,701)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpIpSecurityAlarm.setDescription(' IP Address moved from MAC addresss ... to MAC address ....')
lcErrHedpMacSecurityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,702)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpMacSecurityAlarm.setDescription(' MAC Address moved from port & said to port & said')
lcErrHedpHashResources = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,703)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpHashResources.setDescription(' Address Hash Table resource exhausted')
lcErrHedpHashLookup = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,704)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpHashLookup.setDescription(' Address Hash Table lookup failed')
lcErrHedpInvalidMacFrame = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,705)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpInvalidMacFrame.setDescription(' Data Path received an Invalid MAC Header')
lcErrHedpNonsupportedEhdr = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,706)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpNonsupportedEhdr.setDescription(' Data Path received Extended Header that is not supported')
lcErrHedpInvalidEhdr = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,707)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpInvalidEhdr.setDescription(' Data Path received invalid or note supported Extended Header')
lcErrHedpLookupFailed = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,708)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpLookupFailed.setDescription("MAC Address was not found when DP was informed of CM's registration/inoperability")
lcErrHedpMtdDebug = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,709)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpMtdDebug.setDescription('DP MTD found null buffer address in enet_tx_desc_get or mac_tx_desc_get')
lcErrHedpInvalidEhdr28 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,710)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpInvalidEhdr28.setDescription(' Data Path received invalid Extended Header')
lcErrHedpInvalidEhdr56 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,711)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpInvalidEhdr56.setDescription(' Data Path received invalid Extended Header')
lcErrHedpInvalidEhdr84 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,712)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpInvalidEhdr84.setDescription(' Data Path received invalid Extended Header')
lcErrHedpInvalidEhdr112 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,713)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpInvalidEhdr112.setDescription(' Data Path received invalid Extended Header')
lcErrHedpMtdOccurred = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,714)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpMtdOccurred.setDescription('DP MTD occurred debug message')
lcErrHedpMtdOccurred2 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,715)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpMtdOccurred2.setDescription('DP MTD occurred debug message#2')
lcErrHedpMtdOccurred3 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,716)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpMtdOccurred3.setDescription('DP MTD occurred debug message#3')
lcErrHedpDhcpTrace = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,717)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpDhcpTrace.setDescription('DP DHCP Trace encountered error: invalid ethernet length ')
lcErrHedpDescNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,718)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpDescNotSupported.setDescription('CATV/Ethernet Rx descriptor received with FIRST + LAST not set ')
lcErrHedpRxTooLong = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,719)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpRxTooLong.setDescription('CATV/Ethernet Rx descriptor received with FIRST + LAST not set ')
lcErrHedpDump1 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,720)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpDump1.setDescription(' dump data ')
lcErrHedpDump2 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,721)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHedpDump2.setDescription(' dump data ')
lcErrSmGenericEmergency = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,800)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmGenericEmergency.setDescription(' System Manager fatal error is reported. Contact Customer Support. ')
lcErrSmGenericDebug = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,801)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmGenericDebug.setDescription(' System Manager debug information is reported ')
lcErrSmMallocFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,802)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmMallocFailure.setDescription(' System Manager reports: SM_alloc() memory allocation failed')
lcErrSmFreeFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,803)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmFreeFailure.setDescription(' System Manager reports: SM_free() memory release failed')
lcErrSmRestart = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,804)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmRestart.setDescription(' System Manager reports: Restart')
lcErrSmTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,805)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmTempTooHigh.setDescription(' Device Temperature Exceeded Specified Temperature Threshold')
lcErrSmProcSpeedNotice = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,806)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmProcSpeedNotice.setDescription(' CPU speed detected to be: %d ')
lcSmProcNoTimeServerDhcp = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,807)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcSmProcNoTimeServerDhcp.setDescription(' Time server not specified in DHCP offer')
lcSmProcTimeServerDhcp = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,808)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcSmProcTimeServerDhcp.setDescription(' Time server specified in DHCP offer')
lcSmProcTimeServerContacted = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,809)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcSmProcTimeServerContacted.setDescription(' Time server contacted')
lcSmProcTimeServerNotContacted = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,810)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcSmProcTimeServerNotContacted.setDescription(' Time server not contacted')
lcErrSmBadTrapType = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,811)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmBadTrapType.setDescription(' A trap was requested specifying an unknown trap type')
lcErrSmBadTrapMsgCreation = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,812)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmBadTrapMsgCreation.setDescription(' Error creating trap packet for a particular trap type')
lcErrSmMibPrvsnError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,813)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmMibPrvsnError.setDescription(' System Manager reports: Error processing a provisioned SNMP object')
lcDhcpMissingBasic = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,814)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcDhcpMissingBasic.setDescription(' A DHCP offer was received which is unacceptable because it lacks either yiaddr, siaddr, or filename. The filename is always needed at the CM; it appears at the CMTS only if TFTP provisioning is required.')
lcDhcpMissingRequired = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,815)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcDhcpMissingRequired.setDescription(' A DHCP offer was received which is unacceptable because it lacks an option required by the device. The tag is from RFC2132.')
lcDhcpMissingRouter = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,816)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcDhcpMissingRouter.setDescription(' A DHCP offer was received which lacks a gateway address.')
lcSmTimeserverIcmp = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,817)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcSmTimeserverIcmp.setDescription(' An ICMP message (probably destination unreachable) was received when attempting to query the time server.')
lcErrPrvsnGenericError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,819)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrPrvsnGenericError.setDescription(' System Manager reports: Error processing a provisioned SNMP object')
lcErrSmGenericInformation = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,820)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmGenericInformation.setDescription(' System Manager reports information')
lcErrSmTftpFileTooBig = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,821)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmTftpFileTooBig.setDescription(' TFTP get of Provisioning file failed because the file size received exceeds the receive buffer size')
lcErrSmDhcpGotNak = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,822)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmDhcpGotNak.setDescription(' DHCP received a NAK from the server and the offer is rejected')
lcErrSmDhcpIncompleteOffer = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,823)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmDhcpIncompleteOffer.setDescription(' The DHCP OFFER from the specified server does not have all required fields and is being ignored. A previous log entry will have the specific error describing which entry was missing.')
lcErrSmDhcpNoOffer = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,824)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmDhcpNoOffer.setDescription(' DHCP discover received no offers or offers that were silently ignored')
lcErrSmDhcpSentDecline = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,825)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmDhcpSentDecline.setDescription(' DHCP offer declined because it contained an IP address that is in used by another station')
lcErrSmBootpRelayCantWork = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,826)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmBootpRelayCantWork.setDescription(' No IP address is assigned so BOOTP Relay functionality cannot work. This means that CMs behind this CMTS will not register')
lcErrSmBootpRelayNowWorks = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,827)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmBootpRelayNowWorks.setDescription(' IP address is assigned so BOOTP Relay functionality can now work')
lcErrFiltGenericDebug = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1200)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrFiltGenericDebug.setDescription(' Filter Module reports debug information')
lcErrFiltInvalidFlashValue = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1201)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrFiltInvalidFlashValue.setDescription(' Filter Module reports an invalid flash value was read')
lcErrFiltIpTblEntryNotActive = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1202)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrFiltIpTblEntryNotActive.setDescription(' Error attempting to remove IP table entry which is not active')
lcErrFiltLlcTblEntryNotActive = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1203)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrFiltLlcTblEntryNotActive.setDescription(' Error attempting to remove LLC table entry which is not active')
lcErrFiltGenericInformation = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1204)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrFiltGenericInformation.setDescription(' Filter Module reports information')
lcErrSmSwUpgradeGenericNotice = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1300)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeGenericNotice.setDescription(' Software upgrade reports information')
lcErrSmSwUpgradeFail = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1301)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeFail.setDescription(' Software upgrade failure notice')
lcErrSmSwUpgradeFailReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1302)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeFailReset.setDescription(' Software upgrade failure occured resulting in a reset')
lcErrSmSwUpgradeCompletion = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1303)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeCompletion.setDescription(' Software Upgrade Succeeded')
lcErrSmSwUpgradeCancelled = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1304)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeCancelled.setDescription(' Software upgrade was cancelled ')
lcErrSmSwUpgradeOverride = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1305)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeOverride.setDescription(' Software Upgrade was cancelled by a new request')
lcErrSmFlashProgrammingError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1306)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmFlashProgrammingError.setDescription(' Software upgrade flash programming failure')
lcErrSmFlashProgrammingErrorReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1307)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmFlashProgrammingErrorReset.setDescription(' Software upgrade flash programming failure resulting in a reset')
lcErrSmFlashEraseFail = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1308)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmFlashEraseFail.setDescription(' Software upgrade flash erase failure')
lcErrSmFlashEraseFailReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1309)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmFlashEraseFailReset.setDescription(' Software upgrade flash erase failure resulting in a reset')
lcErrSmFlashCorruptionReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1310)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmFlashCorruptionReset.setDescription(' Software Upgrade: unknown flash id')
lcErrSmFlashBlockInvalidReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1311)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmFlashBlockInvalidReset.setDescription(' Software Upgrade: invalid flash runtime info block')
lcErrSmSwUpgradeTftpError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1312)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeTftpError.setDescription(' Software upgrade failed, tftp error, upgrade is aborted')
lcErrSmSwUpgradeTftpErrorReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1313)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeTftpErrorReset.setDescription(' Software upgrade failed due to a tftp error, system is reset to retry')
lcErrSmSwUpgradeAllocFail = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1314)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeAllocFail.setDescription(' Software upgrade NU_Alloc_Memory failure')
lcErrSmSwUpgradeGenericError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1315)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeGenericError.setDescription(' Software Upgrade error reported')
lcErrSmSwUpgradeProductError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1316)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeProductError.setDescription(' Product code in software upgrade file is not correct for the system being upgraded')
lcErrSmSwUpgradeTftpMsg = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1317)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrSmSwUpgradeTftpMsg.setDescription(' There was a TFTP error during software upgrade. Possible errors are that the upgrade file does not exist, or the docsDevSwServer address is not correct, or the transfer failed in the middle of the transfer.')
lcErrScnBadFrequency = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1400)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrScnBadFrequency.setDescription(' Directed by provisioning to unreachable downstream frequency')
lcScnTunerBroken = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1401)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcScnTunerBroken.setDescription(' Tuner Failure')
lcScnTunerHung = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1402)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcScnTunerHung.setDescription(' Tuner is not responding')
lcScnStartUp = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1403)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcScnStartUp.setDescription(' Begin Scanning')
lcErrCliGeneral = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1500)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCliGeneral.setDescription(' Console Interface failure')
lcInfoCliLogin = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1501)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcInfoCliLogin.setDescription(' Console Interface user logged in')
lcInfoCliLogout = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1502)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcInfoCliLogout.setDescription(' Console Interface user logged out')
lcInfoCliLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1503)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcInfoCliLoginFail.setDescription(' Console Interface user login fail')
lcInfoCliSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1504)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcInfoCliSessionTimeout.setDescription(' Console Interface user timed out')
lcInfoCliCommand = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1505)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcInfoCliCommand.setDescription(' Console Interface command')
lcInfoCliConsoleSnmpSet = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1506)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcInfoCliConsoleSnmpSet.setDescription(' Console Interface user snmp set')
lcInfoCliTelnetSnmpSet = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1507)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcInfoCliTelnetSnmpSet.setDescription(' Telnet Interface user snmp set')
lcErrBcmInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1600)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrBcmInitFailure.setDescription(' Could not initialize network interface parts')
lcMsgNoPowerTables = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1601)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcMsgNoPowerTables.setDescription(' Power/correction tables for the BCM3037 were not found in the manufacturing block as expected. The power and correction were estimated instead.')
lcErrBcmReceiverHwRev = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1602)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrBcmReceiverHwRev.setDescription(' The receiver has an improper hardware revision.')
lcErrCmMtd = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1700)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCmMtd.setDescription(' MAX Transit Delay on CATV')
lcErrCmPciParity = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1701)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCmPciParity.setDescription(' PCI Parity Error')
lcErrMibSnmpReset = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1800)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrMibSnmpReset.setDescription(' System Reset by docsDevResetNow MIB variable')
lcErrGalPciParity = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,1900)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrGalPciParity.setDescription(' PCI parity error detected')
lcErrBpEnabled = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2000)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrBpEnabled.setDescription(' Baseline Privacy configuration settings are present.')
lcErrBpHardwareInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2001)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrBpHardwareInitFailure.setDescription(' Failure initializing hardware.')
lcErrBpKeyWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2002)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrBpKeyWriteFailure.setDescription(' Failure writing traffic key to hardware.')
lcErrBpVectWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2003)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrBpVectWriteFailure.setDescription(' Failure writing initialization vector to hardware.')
lcErrBpHardcodedRsaKeyPair = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2004)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrBpHardcodedRsaKeyPair.setDescription(' Using hardcoded RSA key pair since flash key invalid.')
lcErrHebpAuthEncryptFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2100)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHebpAuthEncryptFailure.setDescription(' Failure encrypting authorization key.')
lcErrHebpHardwareInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2101)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHebpHardwareInitFailure.setDescription(' Failure initializing hardware.')
lcErrHebpKeyWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2102)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHebpKeyWriteFailure.setDescription(' Failure writing traffic key to hardware.')
lcErrHebpVectWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2103)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHebpVectWriteFailure.setDescription(' Failure writing initialization vector to hardware.')
lcErrHebpMacsDontMatch = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2104)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHebpMacsDontMatch.setDescription(" The Source MAC Address of a BP Key Management message is not equivalent to the MAC Address passed in the message's CM identification field.")
lcErrHebpAttemptedPubKeyChange = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2105)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrHebpAttemptedPubKeyChange.setDescription(' A CM has made a BP Authorization Request but a CM with the same MAC address, and different public key, is already authorized.')
lcErrCruInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2200)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCruInitFailure.setDescription(' The CMTS hardware could not be initialized due to an FPGA programming failure.')
lcErrMfgTlvReadError = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2300)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrMfgTlvReadError.setDescription(' Error reading TLV type from flash.')
lcErrUcNoHw = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2400)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrUcNoHw.setDescription(' The CMTS hardware could not be initialized because the up-converter was not detected.')
lcErrUcNoCal = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2401)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrUcNoCal.setDescription(' The CMTS hardware could not be initialized because the up-converter calibration data could not be found.')
lcErrUcNoLock = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2402)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrUcNoLock.setDescription(' The CMTS hardware could not lock onto the downstream frequency.')
lcErrUcPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2403)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrUcPowerSupply.setDescription(' The CMTS up-converter power supply failed')
lcErrUcOutputPower = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2404)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrUcOutputPower.setDescription(' The CMTS downstream output power could not reach the desired level')
lcErrPacDsConfigFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2500)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrPacDsConfigFailure.setDescription('The downstream channel configuration is incompatible with the CMTS hardware; the downstream channel is disabled')
lcErrPacUsConfigFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2501)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrPacUsConfigFailure.setDescription('The upstream channel configuration is incompatible with the CMTS hardware; the upstream channel is disabled')
lcPacDsCenterFreqChange = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2502)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcPacDsCenterFreqChange.setDescription('Downstream Center Frequency has been changed')
lcPacDsBandwidthChange = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2503)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcPacDsBandwidthChange.setDescription('Downstream Channel Width has been changed')
lcPacDsModulationChange = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2504)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcPacDsModulationChange.setDescription('Downstream Modulation Type has been changed')
lcPacDsInterleaveChange = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2505)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcPacDsInterleaveChange.setDescription('Downstream Interleave has been changed')
lcPacDsPowerChange = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2506)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcPacDsPowerChange.setDescription('Downstream Channel Power has been changed')
lcErrTestMacHeader = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2600)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTestMacHeader.setDescription('Test being run - MAC Header')
lcErrTestEhdr20 = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2601)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTestEhdr20.setDescription('Test being run - Extended Header')
lcIngressAvoidanceActionTaken = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2700)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcIngressAvoidanceActionTaken.setDescription('The ingress avoidance feature has automatically changed frequency, modulation profile and bandwidth')
lcErrCruFrontFanStatusOff = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2800)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCruFrontFanStatusOff.setDescription(' Front fan is not functioning properly or is powered down.')
lcErrCruFrontFanStatusOn = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2801)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCruFrontFanStatusOn.setDescription(' Front fan is now functioning properly.')
lcErrCruMiddleFanStatusOff = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2802)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCruMiddleFanStatusOff.setDescription(' Middle fan is not functioning properly or is powered down.')
lcErrCruMiddleFanStatusOn = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2803)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCruMiddleFanStatusOn.setDescription(' Middle fan is now functioning properly.')
lcErrCruBackFanStatusOff = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2804)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCruBackFanStatusOff.setDescription(' Back fan is not functioning properly or is powered down.')
lcErrCruBackFanStatusOn = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,2805)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrCruBackFanStatusOn.setDescription(' Back fan is now functioning properly.')
lcErrTelnetMallocFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,3000)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTelnetMallocFailure.setDescription(' Telnet reports: TELNET_malloc() memory allocation failed')
lcErrTelnetFreeFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,3001)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTelnetFreeFailure.setDescription(' Telnet reports: TELNET_free() memory release failed')
lcErrTelnetTcbCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,3002)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTelnetTcbCreateFailure.setDescription(' Telnet reports: TELNET_Init() tcb_create() failed')
lcErrTelnetTnCreateListenerFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,3003)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTelnetTnCreateListenerFailure.setDescription(' Telnet reports: TELNET_Init() tn_create_listener() failed')
lcErrTelnetTcpStartFailure = NotificationType((1, 3, 6, 1, 4, 1, 482) + (0,3004)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: lcErrTelnetTcpStartFailure.setDescription(' Telnet reports: TELNET_Init() tcp_start() failed')
mibBuilder.exportSymbols("LANCITY-MCNS-MIB", lcCpeMacToCmMacTable=lcCpeMacToCmMacTable, lcErrRegNoIpAtAll=lcErrRegNoIpAtAll, lcCmtsUpNNonFlowControlledMaps=lcCmtsUpNNonFlowControlledMaps, lcNmAccessAdditionalPrivileges=lcNmAccessAdditionalPrivileges, lcCmtsModulationProfileIndex=lcCmtsModulationProfileIndex, lcErrSmBadTrapMsgCreation=lcErrSmBadTrapMsgCreation, lcCmtsUpstreamIngressAvoidanceEnableTable=lcCmtsUpstreamIngressAvoidanceEnableTable, lccmtsBOOTPRelaySvrTargetEntry=lccmtsBOOTPRelaySvrTargetEntry, lcCmtsMetric1Status=lcCmtsMetric1Status, lcSessionInactivityTimeout=lcSessionInactivityTimeout, lcErrHebpAuthEncryptFailure=lcErrHebpAuthEncryptFailure, lccmtsHwRevBCM3137=lccmtsHwRevBCM3137, lcErrFiltGenericInformation=lcErrFiltGenericInformation, lcScanFreqEnd=lcScanFreqEnd, lcConfigTftpFilename=lcConfigTftpFilename, lcCmtsCarrierPath=lcCmtsCarrierPath, lccmtsBOOTPRelaySvrTargetTable=lccmtsBOOTPRelaySvrTargetTable, lcErrSmSwUpgradeTftpErrorReset=lcErrSmSwUpgradeTftpErrorReset, lcSerialPortDataBits=lcSerialPortDataBits, lcCmtsMetric1GreenToYellow=lcCmtsMetric1GreenToYellow, lcErrAllocatorResource=lcErrAllocatorResource, lcStickyYellowTable=lcStickyYellowTable, lcSerialPortNumber=lcSerialPortNumber, lcErrHedpMtdOccurred=lcErrHedpMtdOccurred, lcUsedot1dTpAgingTime=lcUsedot1dTpAgingTime, lcConsoleUserStatus=lcConsoleUserStatus, lcErrSmSwUpgradeOverride=lcErrSmSwUpgradeOverride, lcErrSmFlashCorruptionReset=lcErrSmFlashCorruptionReset, lcErrSmGenericEmergency=lcErrSmGenericEmergency, lcConsoleUserEntry=lcConsoleUserEntry, lcCmtsMultiUsConfigEntry=lcCmtsMultiUsConfigEntry, lcScnTunerBroken=lcScnTunerBroken, lcCmCountsTable=lcCmCountsTable, lcSerialPortTable=lcSerialPortTable, lcMsgNoPowerTables=lcMsgNoPowerTables, lcCmtsTxProfileIndex=lcCmtsTxProfileIndex, lcModemVendorMacAddress=lcModemVendorMacAddress, lcErrSmDhcpIncompleteOffer=lcErrSmDhcpIncompleteOffer, lancityMcnsMib=lancityMcnsMib, lcErrSmSwUpgradeGenericNotice=lcErrSmSwUpgradeGenericNotice, lcInfoCliLogout=lcInfoCliLogout, lcSerialPortParity=lcSerialPortParity, lcErrSmSwUpgradeTftpError=lcErrSmSwUpgradeTftpError, lcErrHedpInvalidEhdr=lcErrHedpInvalidEhdr, lccmtsBOOTPRelayRqstFromCM=lccmtsBOOTPRelayRqstFromCM, lccmtsBOOTPRelayRowStatus=lccmtsBOOTPRelayRowStatus, lcAuthFailErrorStatus=lcAuthFailErrorStatus, lcEvSyslog3=lcEvSyslog3, lcErrAllocatorInternal=lcErrAllocatorInternal, lcDPStatisticsRxOctetRate=lcDPStatisticsRxOctetRate, lcErrRegNoRegSid=lcErrRegNoRegSid, lcCmtsIngressAvoidanceChangePrefEntry=lcCmtsIngressAvoidanceChangePrefEntry, lcConsoleUserTable=lcConsoleUserTable, lcScanControl=lcScanControl, lcErrUcOutputPower=lcErrUcOutputPower, lccmdevice=lccmdevice, lccmtsBOOTPRelayWrongPortReplyDiscards=lccmtsBOOTPRelayWrongPortReplyDiscards, lccmtsDnPolice=lccmtsDnPolice, lccmtsDevServerTftp=lccmtsDevServerTftp, lcTrapTypeTable=lcTrapTypeTable, lcErrHebpMacsDontMatch=lcErrHebpMacsDontMatch, lccmtsDevServerDhcp=lccmtsDevServerDhcp, lctrapvars=lctrapvars, lccmtsHwRevPLX9080=lccmtsHwRevPLX9080, lccmtsHwRevRipsaw=lccmtsHwRevRipsaw, lcErrCruMiddleFanStatusOn=lcErrCruMiddleFanStatusOn, lcErrSmFlashEraseFail=lcErrSmFlashEraseFail, lcErrRegMemory=lcErrRegMemory, lcErrAssert=lcErrAssert, lcErrSmSwUpgradeFailReset=lcErrSmSwUpgradeFailReset, lcTelnetAllowedSessions=lcTelnetAllowedSessions, lccmtsBOOTPRelayDPCATVPuts=lccmtsBOOTPRelayDPCATVPuts, lccmtsDPConfiguration=lccmtsDPConfiguration, lccmtsUpPolice=lccmtsUpPolice, lcScanStep=lcScanStep, lccmtsHwRevBCM3210=lccmtsHwRevBCM3210, lcPacDsInterleaveChange=lcPacDsInterleaveChange, lcFunnelMode=lcFunnelMode, lcErrHedpDescNotSupported=lcErrHedpDescNotSupported, lcScanIndex=lcScanIndex, lcErrHedpDump1=lcErrHedpDump1, lcCmtsIngressAvoidanceTxProfileEntry=lcCmtsIngressAvoidanceTxProfileEntry, lcMsgBacktraceEnded=lcMsgBacktraceEnded, lcErrUcNoLock=lcErrUcNoLock, lcModemVendorMask=lcModemVendorMask, lcInfoCliConsoleSnmpSet=lcInfoCliConsoleSnmpSet, lcScanningFrequencyEntry=lcScanningFrequencyEntry, lcMsgDSMakeHistoryEntry=lcMsgDSMakeHistoryEntry, lcErrSmFlashProgrammingError=lcErrSmFlashProgrammingError, lcCmtsProfileCarrierPathIndex=lcCmtsProfileCarrierPathIndex, lcErrUnknown=lcErrUnknown, lcErrHedpMtdOccurred3=lcErrHedpMtdOccurred3, lcSmProcTimeServerDhcp=lcSmProcTimeServerDhcp, lcCmtsTransmissionProfileIndex=lcCmtsTransmissionProfileIndex, lcStickyYellowPad=lcStickyYellowPad, lcCmtsCodingEfficiency=lcCmtsCodingEfficiency, lcCmtsIngressAvoidanceProfileEntry=lcCmtsIngressAvoidanceProfileEntry, lcPhyTable=lcPhyTable, lcifcommon=lcifcommon, lcAuthFailInterface=lcAuthFailInterface, lcCmtsAgingMultiplier=lcCmtsAgingMultiplier, lcErrSmGenericDebug=lcErrSmGenericDebug, lccmtsProvisioning=lccmtsProvisioning, lcPacDsCenterFreqChange=lcPacDsCenterFreqChange, lcConsoleUserName=lcConsoleUserName, lcCmtsUpstreamIngressAvoidanceHealthTable=lcCmtsUpstreamIngressAvoidanceHealthTable, lcPacDsBandwidthChange=lcPacDsBandwidthChange, lccmtsDNSResolverServersCfgd=lccmtsDNSResolverServersCfgd, lcErrSmRestart=lcErrSmRestart, lcCmtsCarrierPathIndex=lcCmtsCarrierPathIndex, lccmtsHwRevAFFPGA=lccmtsHwRevAFFPGA, lcDPStatisticsRxFrameRate=lcDPStatisticsRxFrameRate, lcConsoleUserPassword=lcConsoleUserPassword, lcResetNmAccessTable=lcResetNmAccessTable, lcErrLossOfSynch=lcErrLossOfSynch, lccmtsHwRevBCM3033=lccmtsHwRevBCM3033, lcErrHedpMacSecurityAlarm=lcErrHedpMacSecurityAlarm, lcCmtsIngressAvoidanceFreqStatusEntry=lcCmtsIngressAvoidanceFreqStatusEntry, lcSerialPortStopBits=lcSerialPortStopBits, lcPhyActive=lcPhyActive, lcProxyArp=lcProxyArp, lcCmtsFreqAvailable=lcCmtsFreqAvailable, lcNmAccessExtensionEntry=lcNmAccessExtensionEntry, lcCmtsUpNFlowControlledMaps=lcCmtsUpNFlowControlledMaps, lcErrRegRegisteredAlready=lcErrRegRegisteredAlready, lccmtsBOOTPRelayLocalAddrSinks=lccmtsBOOTPRelayLocalAddrSinks, lcConsoleLevelTable=lcConsoleLevelTable, lcSmTimeserverIcmp=lcSmTimeserverIcmp, lcErrHedpMtdDebug=lcErrHedpMtdDebug, lcInfoCliLoginFail=lcInfoCliLoginFail, lcCmtsUpPublicationDelay=lcCmtsUpPublicationDelay, lccmtsDevServerTime=lccmtsDevServerTime, lccmtsBOOTPRelayClntSelectionMask=lccmtsBOOTPRelayClntSelectionMask, lccmtsUpstreamIngressAvoidance=lccmtsUpstreamIngressAvoidance, lcDeregCmAgeTime=lcDeregCmAgeTime, lcErrCmPciParity=lcErrCmPciParity, lcCmtsStartFrequency=lcCmtsStartFrequency, lccmtsBOOTPRelayControl=lccmtsBOOTPRelayControl, lcErrCtInvalidEvent=lcErrCtInvalidEvent, lccmtsBOOTPRelayLocalOriginDiscards=lccmtsBOOTPRelayLocalOriginDiscards, lccmtsBOOTPRelayBadLengthDiscards=lccmtsBOOTPRelayBadLengthDiscards, lcErrCtTxAdjustments=lcErrCtTxAdjustments, lcMcastAddress=lcMcastAddress, lcConsoleLevelMethod=lcConsoleLevelMethod, lccmtsDNSResolverServerIP=lccmtsDNSResolverServerIP, lcFlashPersistenceSwitch=lcFlashPersistenceSwitch, lcErrSmProcSpeedNotice=lcErrSmProcSpeedNotice, lccmtsBOOTPRelay=lccmtsBOOTPRelay, lcCmtsHealthProfile=lcCmtsHealthProfile, lcConfigTimeServerAddress=lcConfigTimeServerAddress, lccmtsdevice=lccmtsdevice, lcErrRegUnpackingFail=lcErrRegUnpackingFail, lcCmtsIngressAvoidanceHealthEntry=lcCmtsIngressAvoidanceHealthEntry, lcErrRegRestartRegistration=lcErrRegRestartRegistration, lcErrCmctrlUccNotSupported=lcErrCmctrlUccNotSupported, lcSmProcTimeServerNotContacted=lcSmProcTimeServerNotContacted, lcErrKernelFailure=lcErrKernelFailure, lcCmtsFrequencySplit=lcCmtsFrequencySplit, lcCmtsUpGuaranteedThreshold=lcCmtsUpGuaranteedThreshold, lcCpeMacToCmMacEntry=lcCpeMacToCmMacEntry, lcErrLostSynch=lcErrLostSynch, lcErrSmBootpRelayNowWorks=lcErrSmBootpRelayNowWorks, lcErrPacDsConfigFailure=lcErrPacDsConfigFailure, lccmtsBOOTPRelayRawReplies=lccmtsBOOTPRelayRawReplies, lcErrBcmReceiverHwRev=lcErrBcmReceiverHwRev, lcErrSystemError2=lcErrSystemError2, lcCmtsBackFanOn=lcCmtsBackFanOn, lcErrCtRangeAbort=lcErrCtRangeAbort, lccmtsBOOTPRelayWrongGatewayAddrDiscards=lccmtsBOOTPRelayWrongGatewayAddrDiscards, lcErrSmBadTrapType=lcErrSmBadTrapType, lccmtsBOOTPRelayWrongPortRqstDiscards=lccmtsBOOTPRelayWrongPortRqstDiscards, lancityMcnsProducts=lancityMcnsProducts, lcPacDsPowerChange=lcPacDsPowerChange, lcErrCruFrontFanStatusOff=lcErrCruFrontFanStatusOff, lccmtsBOOTPRelaySvrTargetIP=lccmtsBOOTPRelaySvrTargetIP, lcCmtsHealthFc=lcCmtsHealthFc, lcMcastJoin=lcMcastJoin, lccmtsDNSResolverIndex=lccmtsDNSResolverIndex, lcPhyAutoNegotiate=lcPhyAutoNegotiate, lcErrCruInitFailure=lcErrCruInitFailure, lcErrHedpInvalidMacFrame=lcErrHedpInvalidMacFrame, lcErrRescan=lcErrRescan, lcErrTest=lcErrTest, lcErrSmTempTooHigh=lcErrSmTempTooHigh, lcTrapTypeStatus=lcTrapTypeStatus, lcErrRegRangingTimeout=lcErrRegRangingTimeout, lccmtsBOOTPRelayIndex=lccmtsBOOTPRelayIndex, lcErrHedpLookupFailed=lcErrHedpLookupFailed, lcCmtsFreqStatusFreq=lcCmtsFreqStatusFreq, lcCmtsMiddleFanOn=lcCmtsMiddleFanOn, lccmtsif=lccmtsif, lcMsgBacktrace=lcMsgBacktrace, lccmtsDNSResolverServerEntry=lccmtsDNSResolverServerEntry, lccmtsDPStatistics=lccmtsDPStatistics, lcDPStatisticsTxOctetRate=lcDPStatisticsTxOctetRate, lcCmtsMetricIndex=lcCmtsMetricIndex, lcConsoleUserLevel=lcConsoleUserLevel, lcErrRegInvalidRanging=lcErrRegInvalidRanging, lcCmtsIngressAvoidanceEnable=lcCmtsIngressAvoidanceEnable, lcCmtsUpMinimumMapSize=lcCmtsUpMinimumMapSize, lcErrSmMallocFailure=lcErrSmMallocFailure, lcErrFiltGenericDebug=lcErrFiltGenericDebug, lcIpFiltSendDu=lcIpFiltSendDu, lcMulticastGroup=lcMulticastGroup, lcModemVendorTable=lcModemVendorTable, lcSmProcTimeServerContacted=lcSmProcTimeServerContacted, lcArpSpoofingProtection=lcArpSpoofingProtection, lcTrapTypeEntry=lcTrapTypeEntry, lcCmtsUpChannelPower=lcCmtsUpChannelPower, lccmAddress=lccmAddress, lcConcatenationEnabled=lcConcatenationEnabled, lcCmtsFreqStatusAvailable=lcCmtsFreqStatusAvailable, lcErrCmctrlGenericEmergency=lcErrCmctrlGenericEmergency, lcCmtsMetric1Enable=lcCmtsMetric1Enable, lcConfigTftpAddress=lcConfigTftpAddress, lcProxyArpTimeout=lcProxyArpTimeout, lcErrMfgTlvReadError=lcErrMfgTlvReadError, lcIpFiltIcmp9=lcIpFiltIcmp9, lccmtsHwRevRfRxEntry=lccmtsHwRevRfRxEntry, lcErrSmDhcpGotNak=lcErrSmDhcpGotNak, lcErrHebpHardwareInitFailure=lcErrHebpHardwareInitFailure, lcCmtsUpInputPowerWindow=lcCmtsUpInputPowerWindow, lcPhyEnable=lcPhyEnable, lcErrBpVectWriteFailure=lcErrBpVectWriteFailure, lcConsoleLevelSecurityName=lcConsoleLevelSecurityName, lcErrHedpNonsupportedEhdr=lcErrHedpNonsupportedEhdr, lcErrHebpKeyWriteFailure=lcErrHebpKeyWriteFailure, lcErrLostPulse=lcErrLostPulse, lccmtsDNSResolverServiceType=lccmtsDNSResolverServiceType, lcErrRegValidationFail=lcErrRegValidationFail, lcForwardingMode=lcForwardingMode, lcMcastControl=lcMcastControl, lcErrRegNoModemIp=lcErrRegNoModemIp, lcPhyFullDuplex=lcPhyFullDuplex, lcErrHedpInvalidEhdr28=lcErrHedpInvalidEhdr28, lcErrSmGenericInformation=lcErrSmGenericInformation, lccmtsifconfig=lccmtsifconfig, lcConsoleLevelName=lcConsoleLevelName, lcMsgNullEvent=lcMsgNullEvent, lcCmtsUpMaximumMapSize=lcCmtsUpMaximumMapSize, lccmtsHwRevRfRxTable=lccmtsHwRevRfRxTable, lcErrSmTftpFileTooBig=lcErrSmTftpFileTooBig, lcSerialPortModemEnable=lcSerialPortModemEnable, lcConfigTimeoffset=lcConfigTimeoffset, lcInfoCliSessionTimeout=lcInfoCliSessionTimeout, lcErrSmMibPrvsnError=lcErrSmMibPrvsnError, lcErrScnBadFrequency=lcErrScnBadFrequency, lcErrSmFreeFailure=lcErrSmFreeFailure, lcErrRegInvalidRegistration=lcErrRegInvalidRegistration, lcDPStatisticsTable=lcDPStatisticsTable, lcErrFiltLlcTblEntryNotActive=lcErrFiltLlcTblEntryNotActive, lcErrCruBackFanStatusOn=lcErrCruBackFanStatusOn, lccmtsDNSResolverServerTable=lccmtsDNSResolverServerTable, lcdevicecommon=lcdevicecommon)
mibBuilder.exportSymbols("LANCITY-MCNS-MIB", lcErrFiltInvalidFlashValue=lcErrFiltInvalidFlashValue, lcErrCmMtd=lcErrCmMtd, lcCmtsIngressAvoidanceMetricConfigEntry=lcCmtsIngressAvoidanceMetricConfigEntry, lcCmtsMetric1YellowToRed=lcCmtsMetric1YellowToRed, lcErrFshReset=lcErrFshReset, lcErrSmDhcpSentDecline=lcErrSmDhcpSentDecline, lccmtsBOOTPRelayMiscSilentDiscards=lccmtsBOOTPRelayMiscSilentDiscards, lcCmtsIngressAvoidanceTxProfileTable=lcCmtsIngressAvoidanceTxProfileTable, lcCmtsChangePreference=lcCmtsChangePreference, lcErrUcPowerSupply=lcErrUcPowerSupply, lccmtsPoliceTolerance=lccmtsPoliceTolerance, lcCmtsFrontFanOn=lcCmtsFrontFanOn, lcCmtsIngressAvoidanceProfileTable=lcCmtsIngressAvoidanceProfileTable, lcModemVendorEntry=lcModemVendorEntry, lcCmtsUpMaxDataInContention=lcCmtsUpMaxDataInContention, lcScanUseHrc=lcScanUseHrc, lcErrSmFlashProgrammingErrorReset=lcErrSmFlashProgrammingErrorReset, lcRegisteredCmCounts=lcRegisteredCmCounts, lccmtsBOOTPRelayNonNullMACTags=lccmtsBOOTPRelayNonNullMACTags, lcBootedAlbumSequenceNumber=lcBootedAlbumSequenceNumber, lcErrHebpVectWriteFailure=lcErrHebpVectWriteFailure, lcCmtsIngressAvoidanceFrequencyConfigEntry=lcCmtsIngressAvoidanceFrequencyConfigEntry, lccmtsBOOTPRelaySvrTargetHits=lccmtsBOOTPRelaySvrTargetHits, lcErrSmSwUpgradeCompletion=lcErrSmSwUpgradeCompletion, lcErrHedpDump2=lcErrHedpDump2, lcCmtsIngressAvoidanceFreqStatusTable=lcCmtsIngressAvoidanceFreqStatusTable, lcErrTelnetTcpStartFailure=lcErrTelnetTcpStartFailure, lcErrSmBootpRelayCantWork=lcErrSmBootpRelayCantWork, lccmtsDNSResolver=lccmtsDNSResolver, lcErrCtRangingComplete=lcErrCtRangingComplete, lancityMcnsProdIdCM=lancityMcnsProdIdCM, lcErrBcmInitFailure=lcErrBcmInitFailure, lcMcastAddressTable=lcMcastAddressTable, lcErrHedpMtdOccurred2=lcErrHedpMtdOccurred2, lcErrFiltIpTblEntryNotActive=lcErrFiltIpTblEntryNotActive, lcErrSmSwUpgradeCancelled=lcErrSmSwUpgradeCancelled, lccmtsHwRevTxCPLD=lccmtsHwRevTxCPLD, lcCmCountsEntry=lcCmCountsEntry, lcCmtsAnnex=lcCmtsAnnex, lcConfigSNTPAddress=lcConfigSNTPAddress, lcErrGalPciParity=lcErrGalPciParity, lcCmtsCalculationTimer=lcCmtsCalculationTimer, lcErrTelnetTnCreateListenerFailure=lcErrTelnetTnCreateListenerFailure, lcCmtsUpInitialRangingInterval=lcCmtsUpInitialRangingInterval, lccmtsHwRevLXT970B=lccmtsHwRevLXT970B, lcErrWatchdogReset=lcErrWatchdogReset, lcAuthFailIpAddr=lcAuthFailIpAddr, lcErrHedpInvalidEhdr56=lcErrHedpInvalidEhdr56, lcErrTestEhdr20=lcErrTestEhdr20, lcCmtsHighTempThreshold=lcCmtsHighTempThreshold, lcErrCruBackFanStatusOff=lcErrCruBackFanStatusOff, lccmtsBOOTPRelayRqstFromCPE=lccmtsBOOTPRelayRqstFromCPE, lcIngressAvoidanceActionTaken=lcIngressAvoidanceActionTaken, lcCmtsUpstreamEntry=lcCmtsUpstreamEntry, lcRngNotRegCmAgeTime=lcRngNotRegCmAgeTime, lcErrHedpHashLookup=lcErrHedpHashLookup, lcErrSmFlashBlockInvalidReset=lcErrSmFlashBlockInvalidReset, lcErrHedpInvalidEhdr84=lcErrHedpInvalidEhdr84, lcCmtsFreqStatusFreqIndex=lcCmtsFreqStatusFreqIndex, lcErrTelnetTcbCreateFailure=lcErrTelnetTcbCreateFailure, lcErrBpHardwareInitFailure=lcErrBpHardwareInitFailure, lcPacDsModulationChange=lcPacDsModulationChange, lcErrShutdown=lcErrShutdown, lcProvisioningControl=lcProvisioningControl, lcAuthFailCommunityString=lcAuthFailCommunityString, lcDhcpMissingRequired=lcDhcpMissingRequired, lcCmtsStatus=lcCmtsStatus, lcMcastTtl=lcMcastTtl, lcErrIrqPhy2=lcErrIrqPhy2, lcScnTunerHung=lcScnTunerHung, lcErrHedpDhcpTrace=lcErrHedpDhcpTrace, lccmtsHwRevSunset=lccmtsHwRevSunset, lccmIpSubnet=lccmIpSubnet, lcDPStatisticsEntry=lcDPStatisticsEntry, lccmtsBOOTPRelayNoEpilBufDiscards=lccmtsBOOTPRelayNoEpilBufDiscards, lcErrHedpHashResources=lcErrHedpHashResources, lcErrAcquiredSynch=lcErrAcquiredSynch, lccmtsDevServer=lccmtsDevServer, lcErrBpHardcodedRsaKeyPair=lcErrBpHardcodedRsaKeyPair, lcCmtsFreqConfigIndex=lcCmtsFreqConfigIndex, lcErrUnexpectedBpdu=lcErrUnexpectedBpdu, lcMcastTrapAddress=lcMcastTrapAddress, lcErrHedpBufCountError=lcErrHedpBufCountError, lccmtsDNSResolverControl=lccmtsDNSResolverControl, lcModemVendorControl=lcModemVendorControl, lancityMcnsProdIdCMTS=lancityMcnsProdIdCMTS, lcErrCliGeneral=lcErrCliGeneral, lcCmtsIngressAvoidanceEnableEntry=lcCmtsIngressAvoidanceEnableEntry, lcErrPacUsConfigFailure=lcErrPacUsConfigFailure, lcCmtsFreqStatusFc=lcCmtsFreqStatusFc, lcDhcpMissingBasic=lcDhcpMissingBasic, lccmtsBOOTPRelayRawRequests=lccmtsBOOTPRelayRawRequests, lcErrTestMacHeader=lcErrTestMacHeader, lccmtsBOOTPRelayClntDstPortDiscards=lccmtsBOOTPRelayClntDstPortDiscards, lcCmCountsRowNum=lcCmCountsRowNum, lcCmtsIngressAvoidanceThresholdEntry=lcCmtsIngressAvoidanceThresholdEntry, lcMcastAddressEntry=lcMcastAddressEntry, lcErrSmSwUpgradeTftpMsg=lcErrSmSwUpgradeTftpMsg, lcScanFreqStart=lcScanFreqStart, lcErrNuSendItemFailure=lcErrNuSendItemFailure, lcErrRegNoInitSid=lcErrRegNoInitSid, lcErrIrqPhy1=lcErrIrqPhy1, lcCmtsChannelGroup=lcCmtsChannelGroup, lcConsoleLevelEntry=lcConsoleLevelEntry, lcErrRptReset=lcErrRptReset, lcStickyYellowEntry=lcStickyYellowEntry, lcCmtsBandwidth=lcCmtsBandwidth, lccmtsDevServerBootState=lccmtsDevServerBootState, lcDhcpMissingRouter=lcDhcpMissingRouter, lccmtsBOOTPRelayGatewayAddrCopies=lccmtsBOOTPRelayGatewayAddrCopies, lccmtsDNSResolverServerPriority=lccmtsDNSResolverServerPriority, lcMcastAdminState=lcMcastAdminState, lcErrUcNoHw=lcErrUcNoHw, lcSmProcNoTimeServerDhcp=lcSmProcNoTimeServerDhcp, lcRestartFromFactoryDefaults=lcRestartFromFactoryDefaults, lcConsoleLevelStatus=lcConsoleLevelStatus, lcInfoCliCommand=lcInfoCliCommand, lcErrSmSwUpgradeGenericError=lcErrSmSwUpgradeGenericError, lcErrCmctrlGenericDebug=lcErrCmctrlGenericDebug, lccmtsHwRevDEC21143=lccmtsHwRevDEC21143, lcConfigIpSubnet=lcConfigIpSubnet, lcPhyEntry=lcPhyEntry, lcCmtsHealthUpTime=lcCmtsHealthUpTime, lccmtsHwRevisions=lccmtsHwRevisions, lccmtsDevServerConfigFile=lccmtsDevServerConfigFile, lcErrSystemError=lcErrSystemError, lccmtsBOOTPRelayDPEnetPuts=lccmtsBOOTPRelayDPEnetPuts, lcMsgPowerSwitchCrash=lcMsgPowerSwitchCrash, lccmtsBOOTPRelayNullMACTags=lccmtsBOOTPRelayNullMACTags, lcErrSmSwUpgradeFail=lcErrSmSwUpgradeFail, lcErrCruMiddleFanStatusOff=lcErrCruMiddleFanStatusOff, lccmtsDNSResolverRowStatus=lccmtsDNSResolverRowStatus, lcErrHedpRxTooLong=lcErrHedpRxTooLong, lcConfigIpAddress=lcConfigIpAddress, lccmtsBOOTPRelayNoCopyBufDiscards=lccmtsBOOTPRelayNoCopyBufDiscards, lcErrCmctrlUccRx=lcErrCmctrlUccRx, lcActiveCmCounts=lcActiveCmCounts, lcCmtsIngressAvoidanceFrequencyConfigTable=lcCmtsIngressAvoidanceFrequencyConfigTable, lccmtsHwRevGT64010=lccmtsHwRevGT64010, lcErrMibSnmpReset=lcErrMibSnmpReset, lcConfigIpGateway=lcConfigIpGateway, lcCmtsIngressAvoidanceChangePrefTable=lcCmtsIngressAvoidanceChangePrefTable, lcNmAccessExtensionTable=lcNmAccessExtensionTable, lcErrTelnetMallocFailure=lcErrTelnetMallocFailure, lcCmtsIngressAvoidanceThresholdTable=lcCmtsIngressAvoidanceThresholdTable, lcTrapTypeIndex=lcTrapTypeIndex, lcPhySpeed=lcPhySpeed, lcErrHebpAttemptedPubKeyChange=lcErrHebpAttemptedPubKeyChange, lcMcastOperState=lcMcastOperState, lcScanningFrequencyTable=lcScanningFrequencyTable, lcInfoCliTelnetSnmpSet=lcInfoCliTelnetSnmpSet, lcCmtsIngressAvoidanceMetricConfigTable=lcCmtsIngressAvoidanceMetricConfigTable, lcCmtsFreqStatusUpTime=lcCmtsFreqStatusUpTime, lcErrHedpIpSecurityAlarm=lcErrHedpIpSecurityAlarm, lcModemVendorIndex=lcModemVendorIndex, lccmtsBOOTPRelayExcessiveHopsDiscards=lccmtsBOOTPRelayExcessiveHopsDiscards, lcCmtsFreqStatusTimeLastUsed=lcCmtsFreqStatusTimeLastUsed, PYSNMP_MODULE_ID=lancityMcnsMib, lcConsoleLevelIndex=lcConsoleLevelIndex, lcCmtsMetric1Value=lcCmtsMetric1Value, lcErrBpKeyWriteFailure=lcErrBpKeyWriteFailure, lcCmtsUpContentionPerMap=lcCmtsUpContentionPerMap, lcErrPrvsnGenericError=lcErrPrvsnGenericError, lcErrHedpInvalidEhdr112=lcErrHedpInvalidEhdr112, lcCmtsFreqStatusCarrierPathIndex=lcCmtsFreqStatusCarrierPathIndex, lcSerialPortEntry=lcSerialPortEntry, lcErrSmSwUpgradeProductError=lcErrSmSwUpgradeProductError, lcDPStatisticsTxFrameRate=lcDPStatisticsTxFrameRate, lcSerialPortBaudRate=lcSerialPortBaudRate, lcCmtsUpRequestDataAllowed=lcCmtsUpRequestDataAllowed, lcStickyYellowIndex=lcStickyYellowIndex, lccmif=lccmif, lccmtsDNSResolverServerName=lccmtsDNSResolverServerName, lcMsgBacktrace2=lcMsgBacktrace2, lcErrTelnetFreeFailure=lcErrTelnetFreeFailure, lcCmtsFreqStatusStatus=lcCmtsFreqStatusStatus, lcBootedAlbumFilename=lcBootedAlbumFilename, lcCmMac=lcCmMac, lcCpeMac=lcCpeMac, lcPhyIndex=lcPhyIndex, lcCmtsMultiUsConfigTable=lcCmtsMultiUsConfigTable, lcErrUcNoCal=lcErrUcNoCal, lcErrBpEnabled=lcErrBpEnabled, lccmtsBOOTPRelayEpilUDPBufSends=lccmtsBOOTPRelayEpilUDPBufSends, lcErrSmDhcpNoOffer=lcErrSmDhcpNoOffer, lcErrCmctrlUcdComplete=lcErrCmctrlUcdComplete, lcScanChannelWidth=lcScanChannelWidth, lcConsoleAccess=lcConsoleAccess, lcEvSyslog2=lcEvSyslog2, lcCmtsStopFrequency=lcCmtsStopFrequency, lcCmtsCurrentTemp=lcCmtsCurrentTemp, lcDPStatisticsInterval=lcDPStatisticsInterval, lcCmtsUpHighPriorityThreshold=lcCmtsUpHighPriorityThreshold, lcCmtsUpstreamTable=lcCmtsUpstreamTable, lcCmtsProfilePreference=lcCmtsProfilePreference, lcErrRegRangingFailed=lcErrRegRangingFailed, lcConsoleUserIndex=lcConsoleUserIndex, lcResetFilters=lcResetFilters, lcErrSmSwUpgradeAllocFail=lcErrSmSwUpgradeAllocFail, lcInfoCliLogin=lcInfoCliLogin, lcErrCruFrontFanStatusOn=lcErrCruFrontFanStatusOn, lccmtsHwRevArbCPLD=lccmtsHwRevArbCPLD, lcErrSmFlashEraseFailReset=lcErrSmFlashEraseFailReset, lccmtsHwRevLXT970A=lccmtsHwRevLXT970A, lcScnStartUp=lcScnStartUp, lccmIpAddress=lccmIpAddress)
