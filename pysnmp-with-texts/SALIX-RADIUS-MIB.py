#
# PySNMP MIB module SALIX-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SALIX-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
atmfM4TrapAlarmSeverity, = mibBuilder.importSymbols("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity")
salixGeneric, = mibBuilder.importSymbols("SALIX-MIB", "salixGeneric")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, ObjectIdentity, Unsigned32, Integer32, Counter32, NotificationType, TimeTicks, iso, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "Counter32", "NotificationType", "TimeTicks", "iso", "Bits", "IpAddress")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
salixRadiusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2158, 2, 8))
if mibBuilder.loadTexts: salixRadiusMIB.setLastUpdated('0004050000Z')
if mibBuilder.loadTexts: salixRadiusMIB.setOrganization('SALIX Technologies')
if mibBuilder.loadTexts: salixRadiusMIB.setContactInfo('904 Wind River Lane Suite 101 Gaithersburg, MD 20878 (301)-417-0017')
if mibBuilder.loadTexts: salixRadiusMIB.setDescription('This MIB describes objects relating to RADIUS protocol support in SALIX products that is not described in RFC 2618.')
salixRadiusMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1))
salixRadiusMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 8, 2))
salixRadiusMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 8, 3))
salixRadiusMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 8, 2, 0))
salixRadiusServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 1), )
if mibBuilder.loadTexts: salixRadiusServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: salixRadiusServerConfigTable.setDescription('The RADIUS server configuration table. This table provides a mechanism for configuring RADIUS servers.')
salixRadiusServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 1, 1), ).setIndexNames((0, "SALIX-RADIUS-MIB", "salixRadiusServerIndex"))
if mibBuilder.loadTexts: salixRadiusServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: salixRadiusServerConfigEntry.setDescription('An entry in the salixRadiusServerConfigTable that identifies the parameters necessary to download announcements to the system.')
salixRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: salixRadiusServerIndex.setDescription('The unique index for the RADIUS server. Servers are queried in order. E.g. the server at index 1 is tried first and if it times out, the server at index 2 tried.')
salixRadiusServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixRadiusServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: salixRadiusServerIpAddress.setDescription('The IP address of the RADIUS server.')
salixRadiusServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixRadiusServerUdpPort.setStatus('current')
if mibBuilder.loadTexts: salixRadiusServerUdpPort.setDescription('The UDP port number that the RADIUS server listens on for Access-Requests.')
salixRadiusServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixRadiusServerSharedSecret.setStatus('current')
if mibBuilder.loadTexts: salixRadiusServerSharedSecret.setDescription('The shared secret that will be used when communicating with this server. For security reasons, reading this field will return an empty string.')
salixRadiusServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixRadiusServerEnabled.setStatus('current')
if mibBuilder.loadTexts: salixRadiusServerEnabled.setDescription('This value indicates whether requests should be sent to this server.')
salixUserAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 0), ("radius", 1), ("tacacs", 2), ("xtacacs", 3), ("tacacsplus", 4))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixUserAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: salixUserAuthenticationMethod.setDescription('The user authentication method for all logins into the system. The following choices are available: internal(0) - The system stores the username/password pairs in its nonvolatile memory. radius(1) - Authenticate using the RADIUS protocol. tacacs(2) - Authenticate using TACACS protocol. xtacacs(3) - Authenticate using the XTACACS protocol. tacacsplus(4) - Authenticate using the TACACS+ protocol.')
salixRadiusAccessRequestTimeout = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 8, 2, 0, 1)).setObjects(("SALIX-RADIUS-MIB", "salixRadiusServerIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: salixRadiusAccessRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: salixRadiusAccessRequestTimeout.setDescription("Indicates that an Access Request to the specified server has timed out. The default alarm severity for this alarm is 'minor'.")
salixRadiusAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 8, 2, 0, 2)).setObjects(("SALIX-RADIUS-MIB", "salixRadiusServerIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: salixRadiusAccessDenied.setStatus('current')
if mibBuilder.loadTexts: salixRadiusAccessDenied.setDescription("Indicates that a login attempt was denied by the specified server. This could be due to someone trying to gain unauthorized access or due to a misconfiguration of the server. The default alarm severity for this alarm is 'minor'.")
salixRadiusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 8, 3, 1))
salixRadiusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 8, 3, 2))
salixRadiusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 2, 8, 3, 1, 1)).setObjects(("SALIX-RADIUS-MIB", "salixRadiusServerIndex"), ("SALIX-RADIUS-MIB", "salixRadiusServerIpAddress"), ("SALIX-RADIUS-MIB", "salixRadiusServerUdpPort"), ("SALIX-RADIUS-MIB", "salixRadiusServerSharedSecret"), ("SALIX-RADIUS-MIB", "salixRadiusServerEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    salixRadiusGroup = salixRadiusGroup.setStatus('current')
if mibBuilder.loadTexts: salixRadiusGroup.setDescription('Salix RADIUS Objects Group')
salixRadiusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2158, 2, 8, 3, 2, 1)).setObjects(("SALIX-RADIUS-MIB", "salixRadiusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    salixRadiusCompliance = salixRadiusCompliance.setStatus('current')
if mibBuilder.loadTexts: salixRadiusCompliance.setDescription('The basic implementation requirements for the SALIX-RADIUS-MIB.')
mibBuilder.exportSymbols("SALIX-RADIUS-MIB", salixRadiusMIBTraps=salixRadiusMIBTraps, salixRadiusMIBTrapPrefix=salixRadiusMIBTrapPrefix, salixRadiusServerSharedSecret=salixRadiusServerSharedSecret, salixRadiusServerEnabled=salixRadiusServerEnabled, salixRadiusAccessRequestTimeout=salixRadiusAccessRequestTimeout, salixRadiusServerIpAddress=salixRadiusServerIpAddress, salixRadiusAccessDenied=salixRadiusAccessDenied, salixRadiusServerIndex=salixRadiusServerIndex, salixRadiusServerConfigEntry=salixRadiusServerConfigEntry, salixRadiusServerUdpPort=salixRadiusServerUdpPort, salixRadiusMIBCompliance=salixRadiusMIBCompliance, salixUserAuthenticationMethod=salixUserAuthenticationMethod, salixRadiusMIB=salixRadiusMIB, salixRadiusServerConfigTable=salixRadiusServerConfigTable, salixRadiusGroup=salixRadiusGroup, salixRadiusMIBObjects=salixRadiusMIBObjects, salixRadiusCompliances=salixRadiusCompliances, salixRadiusGroups=salixRadiusGroups, salixRadiusCompliance=salixRadiusCompliance, PYSNMP_MODULE_ID=salixRadiusMIB)
