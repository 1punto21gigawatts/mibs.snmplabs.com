#
# PySNMP MIB module HH3C-CATV-TRANSCEIVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-CATV-TRANSCEIVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:25:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, Unsigned32, Gauge32, TimeTicks, NotificationType, Bits, IpAddress, MibIdentifier, ModuleIdentity, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Unsigned32", "Gauge32", "TimeTicks", "NotificationType", "Bits", "IpAddress", "MibIdentifier", "ModuleIdentity", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hh3cCATVTransceiver = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 94))
if mibBuilder.loadTexts: hh3cCATVTransceiver.setLastUpdated('200807251008Z')
if mibBuilder.loadTexts: hh3cCATVTransceiver.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cCATVTransceiver.setContactInfo('SMB BG Team H3C Technologies Co., Ltd. 310 Liuhe Road, Zhijiang Science Park, Hangzhou, P.R.China http://www.h3c.com Zip:310053.')
if mibBuilder.loadTexts: hh3cCATVTransceiver.setDescription(' The objects in this MIB module are used to manage and display common configuration for CATV(Community Antenna Television) transceiver module. ')
hh3cCATVTransStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 94, 1))
hh3cCATVTransStatusScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 94, 1, 1))
hh3cCATVTransState = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 94, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCATVTransState.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransState.setDescription(' The state of CATV transceiver. ')
hh3cCATVTransInputPwr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 94, 1, 1, 2), Integer32()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCATVTransInputPwr.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransInputPwr.setDescription(' The input power of CATV transceiver. If transceiver is not on site, the value should be zero. ')
hh3cCATVTransOutputLevel = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 94, 1, 1, 3), Integer32()).setUnits('dbuv').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCATVTransOutputLevel.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransOutputLevel.setDescription(' The output level of CATV transceiver. If transceiver is not on site, the value should be zero. ')
hh3cCATVTransTemperature = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 94, 1, 1, 4), Integer32()).setUnits('centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCATVTransTemperature.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransTemperature.setDescription(' The temperature of CATV transceiver. If transceiver is not on site, the value should be zero. ')
hh3cCATVTransceiverMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 94, 2))
hh3cCATVTransCtrlScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 94, 2, 1))
hh3cCATVTransInputPwrLowerThr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 94, 2, 1, 1), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cCATVTransInputPwrLowerThr.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransInputPwrLowerThr.setDescription(" A threshold for the CATV transceiver's input power. When the input power of CATV transceiver is lower than threshold, a trap should be generated. ")
hh3cCATVTransOutputLvlLowerThr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 94, 2, 1, 2), Integer32()).setUnits('dbuv').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cCATVTransOutputLvlLowerThr.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransOutputLvlLowerThr.setDescription(" A threshold for the CATV transceiver's output level. When the output level of CATV transceiver is lower than threshold, a trap should be generated. ")
hh3cCATVTransTempratureUpperThr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 94, 2, 1, 3), Integer32()).setUnits('').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cCATVTransTempratureUpperThr.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransTempratureUpperThr.setDescription(" A threshold for the CATV transceiver's temperature. When the temperature of CATV transceiver is higher than threshold, a trap should be generated. ")
hh3cCATVTansTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3))
hh3cCATVTransTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3, 0))
hh3cCATVTransInputPwrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3, 0, 1)).setObjects(("HH3C-CATV-TRANSCEIVER-MIB", "hh3cCATVTransInputPwr"))
if mibBuilder.loadTexts: hh3cCATVTransInputPwrTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransInputPwrTrap.setDescription(' A hh3cCATVTransInputPwrTrap notification is sent when the input power of CATV transceiver is lower than the threshold. ')
hh3cCATVTransInputPwrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3, 0, 2)).setObjects(("HH3C-CATV-TRANSCEIVER-MIB", "hh3cCATVTransInputPwr"))
if mibBuilder.loadTexts: hh3cCATVTransInputPwrReTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransInputPwrReTrap.setDescription(' A hh3cCATVTransInputPwrReTrap notification is sent when the input power of CATV transceiver recovered from the last trap. ')
hh3cCATVTransOutputLvlTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3, 0, 3)).setObjects(("HH3C-CATV-TRANSCEIVER-MIB", "hh3cCATVTransOutputLevel"))
if mibBuilder.loadTexts: hh3cCATVTransOutputLvlTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransOutputLvlTrap.setDescription(' A hh3cCATVTransOutputLvlTrap notification is sent when the output level of CATV transceiver is lower than the threshold. ')
hh3cCATVTransOutputLvlReTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3, 0, 4)).setObjects(("HH3C-CATV-TRANSCEIVER-MIB", "hh3cCATVTransOutputLevel"))
if mibBuilder.loadTexts: hh3cCATVTransOutputLvlReTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransOutputLvlReTrap.setDescription(' A hh3cCATVTransOutputLvlReTrap notification is sent when the output level of CATV transceiver recovered from the last trap. ')
hh3cCATVTransTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3, 0, 5)).setObjects(("HH3C-CATV-TRANSCEIVER-MIB", "hh3cCATVTransTemperature"))
if mibBuilder.loadTexts: hh3cCATVTransTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransTemperatureTrap.setDescription(' A hh3cCATVTransTemperatureTrap notification is sent when the temperature of CATV transceiver is higher than the threshold. ')
hh3cCATVTransTemperatureReTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 94, 3, 0, 6)).setObjects(("HH3C-CATV-TRANSCEIVER-MIB", "hh3cCATVTransTemperature"))
if mibBuilder.loadTexts: hh3cCATVTransTemperatureReTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cCATVTransTemperatureReTrap.setDescription(' A hh3cCATVTransTemperatureReTrap notification is sent when the temperature of CATV transceiver recovered from the last trap. ')
mibBuilder.exportSymbols("HH3C-CATV-TRANSCEIVER-MIB", hh3cCATVTransState=hh3cCATVTransState, hh3cCATVTransTemperatureTrap=hh3cCATVTransTemperatureTrap, hh3cCATVTransInputPwr=hh3cCATVTransInputPwr, hh3cCATVTransceiver=hh3cCATVTransceiver, hh3cCATVTransceiverMan=hh3cCATVTransceiverMan, hh3cCATVTransInputPwrReTrap=hh3cCATVTransInputPwrReTrap, hh3cCATVTransOutputLvlLowerThr=hh3cCATVTransOutputLvlLowerThr, hh3cCATVTransInputPwrLowerThr=hh3cCATVTransInputPwrLowerThr, hh3cCATVTransStatus=hh3cCATVTransStatus, hh3cCATVTansTrap=hh3cCATVTansTrap, hh3cCATVTransStatusScalarObjects=hh3cCATVTransStatusScalarObjects, hh3cCATVTransTemperatureReTrap=hh3cCATVTransTemperatureReTrap, hh3cCATVTransCtrlScalarObjects=hh3cCATVTransCtrlScalarObjects, hh3cCATVTransOutputLevel=hh3cCATVTransOutputLevel, hh3cCATVTransTrapPrefix=hh3cCATVTransTrapPrefix, hh3cCATVTransOutputLvlTrap=hh3cCATVTransOutputLvlTrap, PYSNMP_MODULE_ID=hh3cCATVTransceiver, hh3cCATVTransTempratureUpperThr=hh3cCATVTransTempratureUpperThr, hh3cCATVTransInputPwrTrap=hh3cCATVTransInputPwrTrap, hh3cCATVTransOutputLvlReTrap=hh3cCATVTransOutputLvlReTrap, hh3cCATVTransTemperature=hh3cCATVTransTemperature)
