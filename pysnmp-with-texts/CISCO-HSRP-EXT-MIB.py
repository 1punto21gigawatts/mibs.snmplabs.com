#
# PySNMP MIB module CISCO-HSRP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-HSRP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
cHsrpGrpNumber, = mibBuilder.importSymbols("CISCO-HSRP-MIB", "cHsrpGrpNumber")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, iso, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Bits, IpAddress, Counter32, ObjectIdentity, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "iso", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Bits", "IpAddress", "Counter32", "ObjectIdentity", "TimeTicks", "Unsigned32")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoHsrpExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 107))
ciscoHsrpExtMIB.setRevisions(('2010-09-02 00:00', '2010-02-05 00:00', '2006-02-15 00:00', '1998-08-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoHsrpExtMIB.setRevisionsDescriptions(('The following changes have been made. [1] Objects cHsrpExtIfTrackedIpNone has been deprecated. [2] Deprecates object group cHsrpExtIfTrackedGroupSup1, which supplementary to cHsrpExtIfTrackedGroup. [3] Added new compliance cHsrpExtComplianceRev2, which deprecates cHsrpExtComplianceRev1.', 'Added cHsrpExtIfTrackedIpNone to cHsrpExtIfTrackedTable Added new table cHsrpExtIfStandbyTable. Added OBJECT-GROUP cHsrpExtIfStandbyGroup91. Added OBJECT-GROUP cHsrpExtIfTrackedGroupSup1, which supplementary to cHsrpExtIfTrackedGroup. Added MODULE-COMPLIANCE cHsrpExtComplianceRev1, which deprecates cHsrpExtCompliance.', 'Updated the imports such that Unsigned32 is imported from SNMPv2-SMI instead of CISCO-TC. Updated the module description. Also updated the descriptions of cHsrpExtIfTrackedEntry and cHsrpExtIfTracked. Formatted the complete MIB.', 'Initial version of this mib.',))
if mibBuilder.loadTexts: ciscoHsrpExtMIB.setLastUpdated('201009020000Z')
if mibBuilder.loadTexts: ciscoHsrpExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoHsrpExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-hsrp@cisco.com')
if mibBuilder.loadTexts: ciscoHsrpExtMIB.setDescription("The Extension MIB module for the CISCO-HSRP-MIB which is based on RFC2281. This MIB provides an extension to the CISCO-HSRP-MIB which defines Cisco's proprietary Hot Standby Routing Protocol (HSRP), defined in RFC2281. The extensions cover assigning of secondary HSRP ip addresses, modifying an HSRP Group's priority by tracking the operational status of interfaces, etc. Terminology: HSRP is a protocol used amoung a group of routers for the purpose of selecting an active router and a standby router. An active router is the router of choice for routing packets. A standby router is a router that takes over the routing duties when an active router fails, or when preset conditions have been met. A HSRP group or a standby group is a set of routers which communicate using HSRP. An HSRP group has a group MAC address and a group IP address. These are the designated addresses. The active router assumes (i.e. inherits) these group addresses. An HSRP group is identified by a ( ifIndex, cHsrpGrpNumber ) pair. BIA stands for Burned In Address.")
ciscoHsrpExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 107, 1))
cHsrpExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1))
cHsrpExtIfBIA = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 2))
cHsrpExtIfTrackedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 1), )
if mibBuilder.loadTexts: cHsrpExtIfTrackedTable.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedTable.setDescription('A table containing information about tracked interfaces per HSRP group.')
cHsrpExtIfTrackedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-HSRP-MIB", "cHsrpGrpNumber"), (0, "CISCO-HSRP-EXT-MIB", "cHsrpExtIfTracked"))
if mibBuilder.loadTexts: cHsrpExtIfTrackedEntry.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedEntry.setDescription("Each row of this table allows the tracking of one interface of the HSRP group which is identified by the (ifIndex, cHsrpGrpNumber) values in this table's INDEX clause. Weight(priority) is given to each and every interface tracked. When a tracked interface is unavailable, the HSRP priority of the router is decreased. i.e cHsrpGrpPriority value assigned to an HSRP group will reduce by the value assigned to cHsrpExtIfTrackedPriority. This reduces the likelihood of a router with a failed key interface becoming the active router. Setting cHsrpExtIfTrackedRowStatus to active starts the tracking of cHsrpExtIfTracked by the HSRP group. The value of cHsrpExtIfTrackedRowStatus may be set to destroy at any time. Entries may not be created via SNMP without explicitly setting cHsrpExtIfTrackedRowStatus to either 'createAndGo' or 'createAndWait'. Entries can be created and modified via the management protocol or by the device's local management interface. If the row is not active, and a local management interface command modifies that row, the row may transition to active state. A row entry in the cHsrpExtIfTrackedTable can not be created unless the corresponding row in the cHsrpGrpTable has been created. If that corresponding row in cHsrpGrpTable is deleted, the interfaces it tracks also get deleted. A row which is not in active state will timeout after a configurable period (five minutes by default). This timeout period can be changed by setting cHsrpConfigTimeout.")
cHsrpExtIfTracked = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cHsrpExtIfTracked.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTracked.setDescription('The ifIndex value of the tracked interface.')
cHsrpExtIfTrackedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfTrackedPriority.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedPriority.setDescription("Priority of the tracked interface for the corresponding { ifIndex, cHsrpGrpNumber } pair. In the range of 0 to 255, 0 is the lowest priority and 255 is the highest. When a tracked interface is unavailable, the cHsrpGrpPriority of the router is decreased by the value of this object instance (If the cHsrpGrpPriority is less than the cHsrpExtIfTrackedPriority, then the HSRP priority becomes 0). This allows a standby router to be configured with a priority such that if the currently active router's priority is lowered because the tracked interface goes down, the standby router can takeover.")
cHsrpExtIfTrackedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfTrackedRowStatus.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedRowStatus.setDescription('The control that allows modification, creation, and deletion of entries. For detailed rules see the DESCRIPTION for cHsrpExtIfTrackedEntry.')
cHsrpExtIfTrackedIpNone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfTrackedIpNone.setStatus('deprecated')
if mibBuilder.loadTexts: cHsrpExtIfTrackedIpNone.setDescription('This object specifies the disable HSRP IPv4 virtual IP address.')
cHsrpExtSecAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 2), )
if mibBuilder.loadTexts: cHsrpExtSecAddrTable.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrTable.setDescription('A table containing information about secondary HSRP IP Addresses per interface and group.')
cHsrpExtSecAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-HSRP-MIB", "cHsrpGrpNumber"), (0, "CISCO-HSRP-EXT-MIB", "cHsrpExtSecAddrAddress"))
if mibBuilder.loadTexts: cHsrpExtSecAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrEntry.setDescription("The CHsrpExtSecAddrEntry allows creation of secondary IP Addresses for each cHsrpGrpEntry row. Secondary addresses can be added by setting cHsrpExtSecAddrRowStatus to be active. The value of cHsrpExtSecAddrRowStatus may be set to destroy at any time. Entries may not be created via SNMP without explicitly setting cHsrpExtSecAddrRowStatus to either 'createAndGo' or 'createAndWait'. Entries can be created and modified via the management protocol or by the device's local management interface. If the row is not active, and a local management interface command modifies that row, the row may transition to active state. A row which is not in active state will timeout after a configurable period (five minutes by default). This timeout period can be changed by setting cHsrpConfigTimeout. Before creation of a cHsrpExtSecAddrEntry row, either cHsrpGrpConfiguredVirtualIpAddr or cHsrpGrpLearnedVirtualIpAddr must have a valid IP Address. This is because a secondary ip address cannot be created unless the primary ip address has already been set. To create a new cHsrpExtSecAddrEntry row, a management station should choose the ifIndex of the interface which is to be added as part of an HSRP group. Also, an HSRP group number and a cHsrpExtSecAddrAddress should be chosen. Deleting a {ifIndex, cHsrpGrpNumber} row in the cHsrpGrpTable will delete all corresponding rows in the cHsrpExtSecAddrTable. Deleting a primary address value in the cHsrpGrpEntry row will delete all secondary addresses for the same {ifIndex, cHsrpGrpNumber} pair.")
cHsrpExtSecAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cHsrpExtSecAddrAddress.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrAddress.setDescription('A secondary IpAddress for the {ifIndex, cHsrpGrpNumber} pair. As explained in the DESCRIPTION for cHsrpExtSecAddrEntry, a primary address must exist before a secondary address for the same {ifIndex, cHsrpGrpNumber} pair can be created.')
cHsrpExtSecAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtSecAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrRowStatus.setDescription('The control that allows modification, creation, and deletion of entries. For detailed rules see the DESCRIPTION for cHsrpExtSecAddrEntry.')
cHsrpExtIfStandbyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3), )
if mibBuilder.loadTexts: cHsrpExtIfStandbyTable.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbyTable.setDescription('A table containing information about standby interfaces per HSRP group.')
cHsrpExtIfStandbyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-HSRP-MIB", "cHsrpGrpNumber"), (0, "CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbyIndex"))
if mibBuilder.loadTexts: cHsrpExtIfStandbyEntry.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbyEntry.setDescription('The cHsrpExtIfStandbyEntry allows an HSRP group interface to track one or more standby interfaces. To create a new cHsrpExtIfStandbyEntry row, a management station should choose the ifIndex of the interface which is to be added as part of an HSRP group. Also, an HSRP group number and a cHsrpExtIfStandbyIndex should be chosen.')
cHsrpExtIfStandbyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cHsrpExtIfStandbyIndex.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbyIndex.setDescription('This object defines the index of the standby table.')
cHsrpExtIfStandbyDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfStandbyDestAddrType.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbyDestAddrType.setDescription('This object specifies the type of Internet address denoted by cHsrpExtIfStandbyDestAddr.')
cHsrpExtIfStandbyDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfStandbyDestAddr.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbyDestAddr.setDescription('This object specifies the destination IP address of the standby router.')
cHsrpExtIfStandbySourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfStandbySourceAddrType.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbySourceAddrType.setDescription('This object specifies the type of Internet address denoted by cHsrpExtIfStandbySourceAddr.')
cHsrpExtIfStandbySourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfStandbySourceAddr.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbySourceAddr.setDescription('This object specifies the source IP address of the standby router.')
cHsrpExtIfStandbyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfStandbyRowStatus.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbyRowStatus.setDescription("The control that allows modification, creation, and deletion of entries. Entries may not be created via SNMP without explicitly setting cHsrpExtIfStandbyRowStatus to either 'createAndGo' or 'createAndWait'.")
cHsrpExtIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 2, 1), )
if mibBuilder.loadTexts: cHsrpExtIfTable.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTable.setDescription('HSRP-specific configurations for each physical interface.')
cHsrpExtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cHsrpExtIfEntry.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfEntry.setDescription("If HSRP entries on this interface must use the BIA (Burned In Address), there must be an entry for the interface in this table. Entries of this table are only accessible if HSRP has been enabled i.e entries can not be created if HSRP is not enabled. Also, the interfaces should be of IEEE 802 ones (Ethernet, Token Ring, FDDI,VLAN, LANE, TR-LANE). Setting cHsrpExtIfRowStatus to active initiates the entry with default value for cHsrpExtIfUseBIA as FALSE. The value of cHsrpExtIfRowStatus may be set to destroy at any time. If the row is not initiated, it is similar to having cHsrpExtIfUseBIA as FALSE. Entries may not be created via SNMP without explicitly setting cHsrpExtIfRowStatus to either 'createAndGo' or 'createAndWait'. Entries can be created and modified via the management protocol or by the device's local management interface. If the row is not active, and a local management interface command modifies that row, the row may transition to active state. A row which is not in active state will timeout after a configurable period (five minutes by default). This timeout period can be changed by setting cHsrpConfigTimeout.")
cHsrpExtIfUseBIA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfUseBIA.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfUseBIA.setDescription('If set to TRUE, the HSRP Group MAC Address for all groups on this interface will be the burned-in-address. Otherwise, this will be determined by ciscoHsrpGroupNumber. In case of sub-interfaces, UseBIA applies to all sub-interfaces on an interface and to all groups on those sub-interfaces.')
cHsrpExtIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 107, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfRowStatus.setDescription('The control that allows modification, creation, and deletion of entries. For detailed rules see the DESCRIPTION for cHsrpExtIfEntry.')
cHsrpExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 107, 3))
cHsrpExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 1))
cHsrpExtComplianceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 2))
cHsrpExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 1, 1)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtIfTrackedGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtSecAddrGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtCompliance = cHsrpExtCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cHsrpExtCompliance.setDescription('The compliance statement for entities which implement the CISCO-HSRP-EXT-MIB. This is deprecated by cHsrpExtComplianceRev1.')
cHsrpExtComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 1, 2)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtIfTrackedGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtSecAddrGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbyGroup91"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfTrackedGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtComplianceRev1 = cHsrpExtComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cHsrpExtComplianceRev1.setDescription('the compliance statement for entities which implement the CISCO-HSRP-EXT-MIB.This is deprecated by cHsrpExtComplianceRev2.')
cHsrpExtComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 1, 3)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtIfTrackedGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtSecAddrGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfGroup"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbyGroup91"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtComplianceRev2 = cHsrpExtComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtComplianceRev2.setDescription('the compliance statement for entities which implement the CISCO-HSRP-EXT-MIB.')
cHsrpExtIfTrackedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 2, 1)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtIfTrackedPriority"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfTrackedRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtIfTrackedGroup = cHsrpExtIfTrackedGroup.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedGroup.setDescription('The collection of objects used to add, delete and retrieve the interfaces getting tracked for HSRP groups.')
cHsrpExtSecAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 2, 2)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtSecAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtSecAddrGroup = cHsrpExtSecAddrGroup.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrGroup.setDescription('The collection of objects used to add, delete and retrieve primary and secondary Ip Addresses for HSRP groups.')
cHsrpExtIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 2, 3)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtIfUseBIA"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtIfGroup = cHsrpExtIfGroup.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfGroup.setDescription('Object which tells if HSRP entries on this interface must use BIA or not.')
cHsrpExtIfStandbyGroup91 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 2, 4)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbyDestAddrType"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbyDestAddr"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbySourceAddrType"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbySourceAddr"), ("CISCO-HSRP-EXT-MIB", "cHsrpExtIfStandbyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtIfStandbyGroup91 = cHsrpExtIfStandbyGroup91.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfStandbyGroup91.setDescription('The collection of objects used to add, delete and retrieve the interfaces getting standby for HSRP groups.')
cHsrpExtIfTrackedGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 107, 3, 2, 5)).setObjects(("CISCO-HSRP-EXT-MIB", "cHsrpExtIfTrackedIpNone"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cHsrpExtIfTrackedGroupSup1 = cHsrpExtIfTrackedGroupSup1.setStatus('deprecated')
if mibBuilder.loadTexts: cHsrpExtIfTrackedGroupSup1.setDescription('The collection of HSRP interface tracked objects which suppliments cHsrpExtIfTrackedGroup.')
mibBuilder.exportSymbols("CISCO-HSRP-EXT-MIB", cHsrpExtCompliance=cHsrpExtCompliance, cHsrpExtIfStandbyIndex=cHsrpExtIfStandbyIndex, cHsrpExtIfBIA=cHsrpExtIfBIA, cHsrpExtIfEntry=cHsrpExtIfEntry, cHsrpExtIfTrackedEntry=cHsrpExtIfTrackedEntry, cHsrpExtIfTable=cHsrpExtIfTable, PYSNMP_MODULE_ID=ciscoHsrpExtMIB, cHsrpExtConformance=cHsrpExtConformance, ciscoHsrpExtMIB=ciscoHsrpExtMIB, cHsrpExtIfTrackedRowStatus=cHsrpExtIfTrackedRowStatus, cHsrpExtIfTracked=cHsrpExtIfTracked, cHsrpExtSecAddrTable=cHsrpExtSecAddrTable, cHsrpExtIfStandbyGroup91=cHsrpExtIfStandbyGroup91, cHsrpExtIfTrackedGroupSup1=cHsrpExtIfTrackedGroupSup1, cHsrpExtSecAddrAddress=cHsrpExtSecAddrAddress, cHsrpExtIfTrackedTable=cHsrpExtIfTrackedTable, cHsrpExtIfUseBIA=cHsrpExtIfUseBIA, cHsrpExtComplianceRev2=cHsrpExtComplianceRev2, cHsrpExtIfStandbyRowStatus=cHsrpExtIfStandbyRowStatus, cHsrpExtIfStandbySourceAddrType=cHsrpExtIfStandbySourceAddrType, cHsrpExtIfStandbySourceAddr=cHsrpExtIfStandbySourceAddr, cHsrpExtSecAddrRowStatus=cHsrpExtSecAddrRowStatus, ciscoHsrpExtMIBObjects=ciscoHsrpExtMIBObjects, cHsrpExtIfStandbyEntry=cHsrpExtIfStandbyEntry, cHsrpExtSecAddrGroup=cHsrpExtSecAddrGroup, cHsrpExtIfTrackedPriority=cHsrpExtIfTrackedPriority, cHsrpExtIfTrackedIpNone=cHsrpExtIfTrackedIpNone, cHsrpExtIfStandbyDestAddrType=cHsrpExtIfStandbyDestAddrType, cHsrpExtIfRowStatus=cHsrpExtIfRowStatus, cHsrpExtComplianceGroups=cHsrpExtComplianceGroups, cHsrpExtGroup=cHsrpExtGroup, cHsrpExtSecAddrEntry=cHsrpExtSecAddrEntry, cHsrpExtComplianceRev1=cHsrpExtComplianceRev1, cHsrpExtIfGroup=cHsrpExtIfGroup, cHsrpExtIfStandbyDestAddr=cHsrpExtIfStandbyDestAddr, cHsrpExtIfTrackedGroup=cHsrpExtIfTrackedGroup, cHsrpExtIfStandbyTable=cHsrpExtIfStandbyTable, cHsrpExtCompliances=cHsrpExtCompliances)
