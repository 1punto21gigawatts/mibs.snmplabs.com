#
# PySNMP MIB module CPQCLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQCLUSTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Gauge32, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Integer32, TimeTicks, iso, Counter32, MibIdentifier, Bits, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Integer32", "TimeTicks", "iso", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15))
cpqClusterMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 1))
cpqClusterComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2))
cpqClusterTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 3))
cpqClusterInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 1))
cpqClusterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 2))
cpqClusterNode = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 3))
cpqClusterResource = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 4))
cpqClusterInterconnect = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 5))
cpqClusterNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 6))
cpqClusterOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4))
cpqClusterMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterMibRevMajor.setDescription('The Major Revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information. Correct interpretation of data may require a MIB document with the same major revision level.')
cpqClusterMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterMibRevMinor.setDescription('The Minor Revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqClusterMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterMibCondition.setDescription('The overall condition of the cluster represented by this MIB. This variable is the same as cpqClusterCondition in the Cluster Info Group. It is a combination of the Cluster node conditions, the resource conditions, and the network conditions as defined later in the Cluster Node group the Cluster Resource group, and the Cluster Network group. other(1) The cluster condition can not be determined. Every node condition, resource condition, and network condition is undetermined. ok(2) The cluster condition is functioning normally. Every node condition, resource condition, and network condition is ok. degraded(3) The cluster condition is degraded if at least one node condition is failed or degraded or at least one resource condition, or one network condition is degraded. failed(4) The cluster condition is failed if every node condition is failed, or at least one resource condition is failed, or at least one network condition is failed.')
cpqClusterOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqClusterOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterOsCommonPollFreq.setDescription("The Insight Agent's polling frequency. The frequency, in seconds, at which the Insight Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail, an agent may also choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqClusterOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqClusterOsCommonModuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpqClusterOsCommonModuleTable.setDescription('A table of software modules that provide an interface to the device this MIB describes.')
cpqClusterOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqClusterOsCommonModuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpqClusterOsCommonModuleEntry.setDescription('A description of a software module that provides an interface to the device this MIB describes.')
cpqClusterOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpqClusterOsCommonModuleIndex.setDescription('A unique index for this module description.')
cpqClusterOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleName.setStatus('deprecated')
if mibBuilder.loadTexts: cpqClusterOsCommonModuleName.setDescription('The module name.')
cpqClusterOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cpqClusterOsCommonModuleVersion.setDescription('The module version in XX.YY format. Where XX is the major version number and YY is the minor version number. This field will be null (size 0) string if the agent cannot provide the module version.')
cpqClusterOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleDate.setStatus('deprecated')
if mibBuilder.loadTexts: cpqClusterOsCommonModuleDate.setDescription('The module date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqClusterOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModulePurpose.setStatus('deprecated')
if mibBuilder.loadTexts: cpqClusterOsCommonModulePurpose.setDescription('The purpose of the module described in this entry.')
cpqClusterName = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqClusterName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterName.setDescription('The name of the cluster.')
cpqClusterCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterCondition.setDescription('The cluster condition as reported by this node. It is a combination of the Cluster node conditions, resource conditions, and network conditions as defined later in the Cluster Node group, Cluster Resource group, and Cluster Network group. other(1) The cluster condition can not be determined. Every node condition, resource condition, and network condition is undetermined. ok(2) The cluster condition is functioning normally. Every node condition, resource condition, and network condition is ok. degraded(3) The cluster condition is degraded if at least one node condition is failed or degraded or at least one resource condition, or one network condition is degraded. failed(4) The cluster condition is failed if every node condition is failed, or at least one resource condition is failed, or at least one network condition is failed.')
cpqClusterIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterIpAddress.setDescription("The first cluster static IP address enumerated. This cluster IP address and any other cluster IP address are in the Cluster Resource Group with the resource type 'IP Address'.")
cpqClusterQuorumResource = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterQuorumResource.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterQuorumResource.setDescription('The Quorum resource name for the cluster. This number is the index into the resource table which contains the Quorum resource. -1 No Quorum resource available. 0..64 Index into the resource table.')
cpqClusterMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMajorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterMajorVersion.setDescription('Identifies the major version number of the cluster software.')
cpqClusterMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMinorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterMinorVersion.setDescription('Identifies the minor version number of the cluster software.')
cpqClusterCSDVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterCSDVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterCSDVersion.setDescription('The latest Service Pack installed on the system. If no Service Pack has been installed, the string is empty.')
cpqClusterVendorId = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterVendorId.setDescription('The cluster software vendor identifier information.')
cpqClusterResourceAggregateCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceAggregateCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceAggregateCondition.setDescription('The cluster resource aggregate condition as reported by this node. This condition is derived directly from each and every Cluster resource condition as defined later in the Cluster Resource group. other(1) The condition can not be determined, which equates to each and every resource condition as undetermined. ok(2) The condition is functioning normally, which equates to each and every resource condition as ok. degraded(3) The condition is degraded if at least one resource condition is degraded. failed(4) The condition is failed if at least one resource condition is failed.')
cpqClusterNetworkAggregateCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkAggregateCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkAggregateCondition.setDescription('The cluster network aggregate condition as reported by this node. This condition is derived directly from the condition of each Cluster network with a role of internal, or clientAndInternal or client as defined later in the Cluster Network group. Networks with a role of none are not considered in overall condition. other(1) The condition can not be determined, all network conditions are undetermined. ok(2) The condition is functioning normally, which equates to each and every network condition as ok. degraded(3) The condition is degraded if at least one network condition is degraded. failed(4) The condition is failed if at least one network condition is failed.')
cpqClusterNodeTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1), )
if mibBuilder.loadTexts: cpqClusterNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNodeTable.setDescription('A table of cluster node entries.')
cpqClusterNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterNodeIndex"))
if mibBuilder.loadTexts: cpqClusterNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNodeEntry.setDescription('A description of a cluster node')
cpqClusterNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNodeIndex.setDescription('A unique index for this node entry.')
cpqClusterNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNodeName.setDescription('The name of the node.')
cpqClusterNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("nodeUp", 2), ("nodeDown", 3), ("nodePaused", 4), ("nodeJoining", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNodeStatus.setDescription('The current status of the node. The following values are defined: other(1) - Indicates that an error has occurred and the exact state of the node could not be determined, or the node status is unavailable. nodeUp(2) - The node is operating as an active member of a cluster. A node that is up responds to updates to the cluster database, can host and manage groups, and can maintain communication with other nodes in the cluster. nodeDown(3) - The node is trying to form or rejoin a cluster or is down. A node that is down is not an active cluster member and it may or may not be running. The Cluster Service may have started and then failed, or may have failed to start completely. nodePaused(4) - The node is operating as an active member of a cluster but cannot host any resources or resource groups,is up but cluster activity is paused. Nodes that are undergoing maintenance are typically placed in this state. nodeJoining(5) - The node is in the process of joining a cluster. This is a short lived state.')
cpqClusterNodeCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNodeCondition.setDescription('The current condition of the node. The following values are defined: other(1) - The node status is unavailable, or could not be determined. ok(2) - The node status is nodeUp. degraded(3) - The node status is nodeUnavailable or nodePaused or nodeJoining. failed(4) - The node status is nodeDown.')
cpqClusterResourceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1), )
if mibBuilder.loadTexts: cpqClusterResourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceTable.setDescription('A table of resources managed by the cluster reported by this MIB.')
cpqClusterResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterResourceIndex"))
if mibBuilder.loadTexts: cpqClusterResourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceEntry.setDescription('The properties describing a resource managed by the cluster.')
cpqClusterResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceIndex.setDescription('A unique index for this resource entry.')
cpqClusterResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceName.setDescription('The name of the resource. It must be unique within the cluster.')
cpqClusterResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceType.setDescription("The resource type, such as 'Physical Disk', 'Generic Application', 'IP Address', 'File Share', 'Network Name', etc..")
cpqClusterResourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("online", 2), ("offline", 3), ("failed", 4), ("onlinePending", 5), ("offlinePending", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceState.setDescription("The resource's current state. The following values are defined: other(1) - Indicates that an error has occurred and the exact state of the resource could not be determined or the resource state is unavailable. online(2) - The resource is online and functioning normally. offline(3) - The resource is offline. failed(4) - The resource has failed. onlinePending(5) - The resource is in the process of coming online. offlinePending(6)- The resource is in the process of going offline.")
cpqClusterResourceOwnerNode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceOwnerNode.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceOwnerNode.setDescription('The node in the cluster where the group of the resource is currently online.')
cpqClusterResourcePhysId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourcePhysId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourcePhysId.setDescription("The physical identification for resource type 'Physical Disk'. It contains the following components: storage box name, logical drive NN. where NN is a number from 0..n. It is blank for all other resource types.")
cpqClusterResourceCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceCondition.setDescription('The resource condition. The following values are defined: other(1) - Unable to determine the resource condition. ok(2) - The resource status is online. degraded(3) - The resource status is unavailable or offline or online pending or offline pending. failed(4) - The resource status is failed.')
cpqClusterResourceDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceDriveLetter.setDescription("The drive letter with semi-colon of a physical disk such as x:. Blank if the resource type is not 'Physical Disk'.")
cpqClusterResourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceIpAddress.setDescription("A cluster IP address expressed as xxx.xxx.xxx.xxx where xxx is a decimal number between 0 and 255. Blank if the resource type is not 'IP Address'.")
cpqClusterResourceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterResourceGroupName.setDescription('The name of the cluster group that the resource belongs to.')
cpqClusterInterconnectTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1), )
if mibBuilder.loadTexts: cpqClusterInterconnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectTable.setDescription('A table of network interfaces used by the node for communication.')
cpqClusterInterconnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterInterconnectIndex"))
if mibBuilder.loadTexts: cpqClusterInterconnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectEntry.setDescription('The properties describing the interconnect.')
cpqClusterInterconnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectIndex.setDescription('Uniquely identifies the interconnect entry.')
cpqClusterInterconnectPhysId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectPhysId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectPhysId.setDescription('The physical identification of the device. For an embedded NIC the value format is as followed: 1) for embedded NIC, Embedded NIC, Base I/O Addr: <base addr> 2) Known slot number, Slot: <slot number>, Base I/O Addr: <base addr> 3) Unknown slot number, Slot: unknown, Base I/O Addr: <base addr>')
cpqClusterInterconnectTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectTransport.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectTransport.setDescription('The network transport used by the interconnect. For example, Tcpip.')
cpqClusterInterconnectAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectAddress.setDescription('The address used by the interconnect expressed in the format specified by the transport type.')
cpqClusterInterconnectNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectNetworkName.setDescription('This interconnect is a part of this network. The network name is used to correlate information in the network table.')
cpqClusterInterconnectNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectNodeName.setDescription('The name of the node in which the network interface is installed.')
cpqClusterInterconnectRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("internal", 3), ("clientAndInternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectRole.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterInterconnectRole.setDescription('The communications role of the interconnect in the cluster. The following values are defined: none(1) - The interconnect is not used by the cluster. client(2) - The interconnect is used to connect client systems to the cluster. internal(3) - The interconnect is used to carry internal cluster communication. clientAndInternal(4) - The interconnect is used to connect client systems and for internal cluster communication.')
cpqClusterNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1), )
if mibBuilder.loadTexts: cpqClusterNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkTable.setDescription('A table of networks available for communication with other nodes or clients.')
cpqClusterNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterNetworkIndex"))
if mibBuilder.loadTexts: cpqClusterNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkEntry.setDescription('The properties describing the network.')
cpqClusterNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkIndex.setDescription('Uniquely identifies the network entry.')
cpqClusterNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkName.setDescription('The text name of the network.')
cpqClusterNetworkAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkAddressMask.setDescription('The network IP address mask expressed as xxx.xxx.xxx.xxx where xxx is a decimal number between 0 and 255.')
cpqClusterNetworkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkDescription.setDescription('The text description of the network.')
cpqClusterNetworkRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("internal", 3), ("clientAndInternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkRole.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkRole.setDescription('The communications role of the network in the cluster. The following values are defined: none(1) - The network is not used by the cluster. client(2) - The network is used to connect client systems to the cluster. internal(3) - The network is used to carry internal cluster communication. clientAndInternal(4) - The network is used to connect client systems and for internal cluster communication.')
cpqClusterNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("online", 2), ("offline", 3), ("partitioned", 4), ("unavailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkState.setDescription("The network's current state. The following values are defined: other(1) - Indicates that an error has occurred and the exact state of the network could not be determined. online(2) - The network is operational; all of the nodes in the cluster can communicate. offline(3) - The network is not operational; none of the nodes on the network can communicate. partitioned(4) - The network is operational, but two or more nodes on the network cannot communicate. Typically a path-specific problem has occurred. unavailable(5) - The network is unavailable to the cluster because the network's role is 'none'.")
cpqClusterNetworkCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqClusterNetworkCondition.setDescription('The network condition uses cpqClusterNetworkState to determine the network condition. The following values are defined: other(1) - The network state indicates that an error has occurred and the exact state of the network could not be determined or the network state is unavailable. ok(2) - The network state is online or unavailable. degraded(3) - The network state is partitioned. failed(4) - The network state is offline.')
cpqClusterDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterName"))
if mibBuilder.loadTexts: cpqClusterDegraded.setDescription('This trap will be sent any time the condition of the cluster becomes degraded.')
cpqClusterFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterName"))
if mibBuilder.loadTexts: cpqClusterFailed.setDescription('This trap will be sent any time the condition of the cluster becomes failed.')
cpqClusterNodeDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNodeName"))
if mibBuilder.loadTexts: cpqClusterNodeDegraded.setDescription('This trap will be sent any time the condition of a node in the cluster becomes degraded. User Action: Make a note of the cluster node name then check the node for the cause of the degraded condition.')
cpqClusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNodeName"))
if mibBuilder.loadTexts: cpqClusterNodeFailed.setDescription('This trap will be sent any time the condition of a node in the cluster becomes failed. User Action: Make a note of the cluster node name then check the node for the cause of the failure.')
cpqClusterResourceDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterResourceName"))
if mibBuilder.loadTexts: cpqClusterResourceDegraded.setDescription('This trap will be sent any time the condition of a cluster resource becomes degraded. User Action: Make a note of the cluster resource name then check the resource for the cause of the degraded condition.')
cpqClusterResourceFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterResourceName"))
if mibBuilder.loadTexts: cpqClusterResourceFailed.setDescription('This trap will be sent any time the condition of a cluster resource becomes failed. User Action: Make a note of the cluster resource name then check the resource for the cause of the failure.')
cpqClusterNetworkDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNetworkName"))
if mibBuilder.loadTexts: cpqClusterNetworkDegraded.setDescription('This trap will be sent any time the condition of a cluster network becomes degraded. User Action: Make a note of the cluster network name then check the network for the cause of the degraded condition.')
cpqClusterNetworkFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNetworkName"))
if mibBuilder.loadTexts: cpqClusterNetworkFailed.setDescription('This trap will be sent any time the condition of a cluster network becomes failed. User Action: Make a note of the cluster network name then check the network for the cause of the failure.')
mibBuilder.exportSymbols("CPQCLUSTER-MIB", cpqClusterOsCommonModuleVersion=cpqClusterOsCommonModuleVersion, cpqClusterOsCommon=cpqClusterOsCommon, cpqClusterCondition=cpqClusterCondition, cpqClusterMinorVersion=cpqClusterMinorVersion, cpqClusterMajorVersion=cpqClusterMajorVersion, cpqClusterMibRevMinor=cpqClusterMibRevMinor, cpqClusterResourceOwnerNode=cpqClusterResourceOwnerNode, cpqClusterMibRev=cpqClusterMibRev, cpqClusterOsCommonModuleTable=cpqClusterOsCommonModuleTable, cpqClusterOsCommonModuleDate=cpqClusterOsCommonModuleDate, cpqClusterInterconnectEntry=cpqClusterInterconnectEntry, cpqClusterNodeEntry=cpqClusterNodeEntry, cpqClusterNetworkIndex=cpqClusterNetworkIndex, cpqClusterIpAddress=cpqClusterIpAddress, cpqClusterInterconnectNetworkName=cpqClusterInterconnectNetworkName, cpqClusterNodeName=cpqClusterNodeName, cpqClusterResourcePhysId=cpqClusterResourcePhysId, cpqClusterDegraded=cpqClusterDegraded, cpqClusterTrap=cpqClusterTrap, cpqClusterNetworkDegraded=cpqClusterNetworkDegraded, cpqClusterMibRevMajor=cpqClusterMibRevMajor, cpqClusterNetwork=cpqClusterNetwork, cpqClusterResourceGroupName=cpqClusterResourceGroupName, cpqClusterFailed=cpqClusterFailed, cpqClusterNetworkEntry=cpqClusterNetworkEntry, cpqClusterInterface=cpqClusterInterface, cpqClusterNetworkFailed=cpqClusterNetworkFailed, cpqClusterResourceDegraded=cpqClusterResourceDegraded, cpqClusterNodeDegraded=cpqClusterNodeDegraded, cpqClusterNetworkTable=cpqClusterNetworkTable, cpqClusterInterconnectPhysId=cpqClusterInterconnectPhysId, cpqClusterResourceName=cpqClusterResourceName, cpqClusterNodeCondition=cpqClusterNodeCondition, cpqClusterInterconnectTransport=cpqClusterInterconnectTransport, cpqClusterNetworkName=cpqClusterNetworkName, cpqClusterOsCommonModulePurpose=cpqClusterOsCommonModulePurpose, cpqClusterNode=cpqClusterNode, cpqClusterName=cpqClusterName, cpqClusterNodeStatus=cpqClusterNodeStatus, cpqClusterOsCommonPollFreq=cpqClusterOsCommonPollFreq, cpqClusterResourceIpAddress=cpqClusterResourceIpAddress, cpqClusterNetworkAddressMask=cpqClusterNetworkAddressMask, cpqClusterResourceAggregateCondition=cpqClusterResourceAggregateCondition, cpqClusterOsCommonModuleIndex=cpqClusterOsCommonModuleIndex, cpqClusterResourceDriveLetter=cpqClusterResourceDriveLetter, cpqCluster=cpqCluster, cpqClusterNodeIndex=cpqClusterNodeIndex, cpqClusterInterconnect=cpqClusterInterconnect, cpqClusterResourceIndex=cpqClusterResourceIndex, cpqClusterResourceType=cpqClusterResourceType, cpqClusterNetworkState=cpqClusterNetworkState, cpqClusterNodeFailed=cpqClusterNodeFailed, cpqClusterInterconnectNodeName=cpqClusterInterconnectNodeName, cpqClusterInterconnectAddress=cpqClusterInterconnectAddress, cpqClusterResourceCondition=cpqClusterResourceCondition, cpqClusterInterconnectRole=cpqClusterInterconnectRole, cpqClusterQuorumResource=cpqClusterQuorumResource, cpqClusterResourceState=cpqClusterResourceState, cpqClusterInfo=cpqClusterInfo, cpqClusterNetworkCondition=cpqClusterNetworkCondition, cpqClusterResourceFailed=cpqClusterResourceFailed, cpqClusterCSDVersion=cpqClusterCSDVersion, cpqClusterNetworkDescription=cpqClusterNetworkDescription, cpqClusterMibCondition=cpqClusterMibCondition, cpqClusterOsCommonModuleEntry=cpqClusterOsCommonModuleEntry, cpqClusterNetworkAggregateCondition=cpqClusterNetworkAggregateCondition, cpqClusterOsCommonModuleName=cpqClusterOsCommonModuleName, cpqClusterInterconnectIndex=cpqClusterInterconnectIndex, cpqClusterVendorId=cpqClusterVendorId, cpqClusterResource=cpqClusterResource, cpqClusterInterconnectTable=cpqClusterInterconnectTable, cpqClusterComponent=cpqClusterComponent, cpqClusterNetworkRole=cpqClusterNetworkRole, cpqClusterNodeTable=cpqClusterNodeTable, cpqClusterResourceEntry=cpqClusterResourceEntry, cpqClusterResourceTable=cpqClusterResourceTable)
