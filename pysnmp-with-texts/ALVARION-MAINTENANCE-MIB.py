#
# PySNMP MIB module ALVARION-MAINTENANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALVARION-MAINTENANCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alvarionMgmtV2, = mibBuilder.importSymbols("ALVARION-SMI", "alvarionMgmtV2")
systemFirmwareRevision, systemConfigurationVersion = mibBuilder.importSymbols("ALVARION-SYSTEM-MIB", "systemFirmwareRevision", "systemConfigurationVersion")
AlvarionNotificationEnable, = mibBuilder.importSymbols("ALVARION-TC", "AlvarionNotificationEnable")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, ModuleIdentity, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, iso, Integer32, Gauge32, ObjectIdentity, TimeTicks, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "iso", "Integer32", "Gauge32", "ObjectIdentity", "TimeTicks", "Unsigned32", "Counter32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
alvarionMaintenanceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2))
if mibBuilder.loadTexts: alvarionMaintenanceMIB.setLastUpdated('200710310000Z')
if mibBuilder.loadTexts: alvarionMaintenanceMIB.setOrganization('Alvarion Ltd.')
if mibBuilder.loadTexts: alvarionMaintenanceMIB.setContactInfo('Alvarion Ltd. Postal: 21a HaBarzel St. P.O. Box 13139 Tel-Aviv 69710 Israel Phone: +972 3 645 6262')
if mibBuilder.loadTexts: alvarionMaintenanceMIB.setDescription('Alvarion Maintenance MIB.')
alvarionMaintenanceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1))
firmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1))
configurationUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2))
certificate = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 3))
firmwarePeriodicUpdate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwarePeriodicUpdate.setStatus('current')
if mibBuilder.loadTexts: firmwarePeriodicUpdate.setDescription("Specifies if firmware updates are automatically triggered on a periodic basis or not. 'true': Automatically update the firmware based on the information specified in the firmwareUpdateDay and firmwareUpdateTime attributes. 'false': No firmware update is triggered unless a request is specifically issude using the firmwareUpdateInitiate attribute.")
firmwareUpdateDay = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("everyday", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateDay.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateDay.setDescription('When firmwarePeriodicUpdate is set to true, this attribute specifies the day that automatic updates will occur.')
firmwareUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTime.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateTime.setDescription("When firmwarePeriodicUpdate is set to true, this attribute specifies the time of the day for an automatic firmware update. Specify the time in hours (00-23) and minutes (00-59) in the format HH:MM. The ':' character is mandatory between the fields.")
firmwareUpdateLocation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateLocation.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateLocation.setDescription('Specifies the URL where the new firmware file is located. This is used when the firmware update is triggered manually or automatically on a periodic basis.')
firmwareUpdateInitiate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateInitiate.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateInitiate.setDescription("Triggers a firmware update using the firmware specified in the firmwareUpdateLocation attribute. Reading this attribute always returns 'idle'.")
firmwareUpdateNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1, 6), AlvarionNotificationEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateNotificationEnabled.setDescription('Specifies if firmwareUpdateNotification notifications are generated.')
firmwareUpdateInfo = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: firmwareUpdateInfo.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateInfo.setDescription('Contains various information about the firmware update and is used with firmware update notifications to provide more detailed information.')
configurationPeriodicUpdate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationPeriodicUpdate.setStatus('current')
if mibBuilder.loadTexts: configurationPeriodicUpdate.setDescription("Specifies if configuration file updates are automatically triggered on a periodic basis or not. 'true': Automatically update the configuration file based on the information specified in the configurationUpdateDay and configurationUpdateTime attributes. 'false': No configuration file update is triggered unless a request is specifically issude using the configurationUpdateInitiate attribute.")
configurationUpdateDay = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("everyday", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationUpdateDay.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateDay.setDescription('When configurationPeriodicUpdate is set to true, this attribute specifies the day that automatic updates will occur.')
configurationUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationUpdateTime.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateTime.setDescription("When configurationPeriodicUpdateis set to true, this attribute specifies the time of the day for an automatic configuration file update. Specify the time in hours (00-23) and minutes (00-59) in the format HH:MM. The ':' character is mandatory between the fields.")
configurationUpdateLocation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationUpdateLocation.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateLocation.setDescription('Specifies the URL where the new configuration file is located. This is used when the update is triggered manually or automatically on a periodic basis.')
configurationUpdateInitiate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationUpdateInitiate.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateInitiate.setDescription("Triggers a configuration file update using the configuration file specified in the configurationUpdateLocation attribute. Reading this attribute always returns 'idle'.")
configurationUpdateOperation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationUpdateOperation.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateOperation.setDescription("Specifies the operation that is performed on the configuration file. 'backup': Saves the current device configuration into the file specified in the configurationUpdateLocation attribute. 'restore': Loads the file specified in the configurationUpdateLocation attribute into the device.")
configurationUpdateNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 7), AlvarionNotificationEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationUpdateNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateNotificationEnabled.setDescription('Specifies if configurationUpdateNotification notifications are generated.')
configurationLocalUpdateNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 8), AlvarionNotificationEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationLocalUpdateNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: configurationLocalUpdateNotificationEnabled.setDescription('Specifies if configurationLocalUpdateNotification notifications are generated.')
configurationUpdateInfo = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configurationUpdateInfo.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateInfo.setDescription('Contains various information about the configuration update and is used with configuration update notifications to provide more detailed information.')
configurationFactoryDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("resetToFactoryDefaults", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationFactoryDefaults.setStatus('current')
if mibBuilder.loadTexts: configurationFactoryDefaults.setDescription("Resets the device configuration to Factory Default. Important: This will reset the community names and shut down all connections. Reading this object will always return 'idle'.")
configurationRestart = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationRestart.setStatus('current')
if mibBuilder.loadTexts: configurationRestart.setDescription("Restarts the device. Important: This will shut down all connections. Reading this object will always return 'idle'.")
certificateAboutToExpireNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 3, 1), AlvarionNotificationEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certificateAboutToExpireNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: certificateAboutToExpireNotificationEnabled.setDescription('Specifies if certificateAboutToExpireNotification notifications are generated.')
certificateExpiredNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 3, 2), AlvarionNotificationEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certificateExpiredNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: certificateExpiredNotificationEnabled.setDescription('Specifies if certificateExpiredNotification notifications are generated.')
certificateExpiryDate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certificateExpiryDate.setStatus('current')
if mibBuilder.loadTexts: certificateExpiryDate.setDescription('Indicates the current expiry date of the certificate.')
alvarionMaintenanceMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 2))
alvarionMaintenanceMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 2, 0))
firmwareUpdateNotification = NotificationType((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 2, 0, 5)).setObjects(("ALVARION-MAINTENANCE-MIB", "firmwareUpdateInfo"), ("ALVARION-SYSTEM-MIB", "systemFirmwareRevision"))
if mibBuilder.loadTexts: firmwareUpdateNotification.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateNotification.setDescription('Sent when a firmware update was attempted from a remote server.')
configurationUpdateNotification = NotificationType((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 2, 0, 1)).setObjects(("ALVARION-MAINTENANCE-MIB", "configurationUpdateInfo"), ("ALVARION-SYSTEM-MIB", "systemConfigurationVersion"))
if mibBuilder.loadTexts: configurationUpdateNotification.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateNotification.setDescription('Sent when a configuration update was attempted from a remote server.')
configurationLocalUpdateNotification = NotificationType((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 2, 0, 2)).setObjects(("ALVARION-MAINTENANCE-MIB", "configurationUpdateInfo"))
if mibBuilder.loadTexts: configurationLocalUpdateNotification.setStatus('current')
if mibBuilder.loadTexts: configurationLocalUpdateNotification.setDescription('Sent whenever the configuration changes.')
certificateAboutToExpireNotification = NotificationType((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 2, 0, 3)).setObjects(("ALVARION-MAINTENANCE-MIB", "certificateExpiryDate"))
if mibBuilder.loadTexts: certificateAboutToExpireNotification.setStatus('current')
if mibBuilder.loadTexts: certificateAboutToExpireNotification.setDescription('Sent when a certificate is about to expire.')
certificateExpiredNotification = NotificationType((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 2, 0, 4)).setObjects(("ALVARION-MAINTENANCE-MIB", "certificateExpiryDate"))
if mibBuilder.loadTexts: certificateExpiredNotification.setStatus('current')
if mibBuilder.loadTexts: certificateExpiredNotification.setDescription('Sent when a certificate has expired.')
alvarionMaintenanceMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 3))
alvarionMaintenanceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 3, 1))
alvarionMaintenanceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 3, 2))
alvarionMaintenanceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 3, 1, 1)).setObjects(("ALVARION-MAINTENANCE-MIB", "alvarionMaintenanceMIBGroup"), ("ALVARION-MAINTENANCE-MIB", "alvarionMaintenanceNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionMaintenanceMIBCompliance = alvarionMaintenanceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alvarionMaintenanceMIBCompliance.setDescription('The compliance statement for entities which implement the Alvarion Maintenance MIB.')
alvarionMaintenanceMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 3, 2, 1)).setObjects(("ALVARION-MAINTENANCE-MIB", "firmwarePeriodicUpdate"), ("ALVARION-MAINTENANCE-MIB", "firmwareUpdateDay"), ("ALVARION-MAINTENANCE-MIB", "firmwareUpdateTime"), ("ALVARION-MAINTENANCE-MIB", "firmwareUpdateLocation"), ("ALVARION-MAINTENANCE-MIB", "firmwareUpdateInitiate"), ("ALVARION-MAINTENANCE-MIB", "firmwareUpdateNotificationEnabled"), ("ALVARION-MAINTENANCE-MIB", "firmwareUpdateInfo"), ("ALVARION-MAINTENANCE-MIB", "configurationPeriodicUpdate"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateDay"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateTime"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateLocation"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateInitiate"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateOperation"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateNotificationEnabled"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateInfo"), ("ALVARION-MAINTENANCE-MIB", "configurationFactoryDefaults"), ("ALVARION-MAINTENANCE-MIB", "configurationRestart"), ("ALVARION-MAINTENANCE-MIB", "configurationLocalUpdateNotificationEnabled"), ("ALVARION-MAINTENANCE-MIB", "certificateAboutToExpireNotificationEnabled"), ("ALVARION-MAINTENANCE-MIB", "certificateExpiredNotificationEnabled"), ("ALVARION-MAINTENANCE-MIB", "certificateExpiryDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionMaintenanceMIBGroup = alvarionMaintenanceMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionMaintenanceMIBGroup.setDescription('A collection of objects providing the Maintenance MIB capability.')
alvarionMaintenanceNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 2, 3, 2, 2)).setObjects(("ALVARION-MAINTENANCE-MIB", "firmwareUpdateNotification"), ("ALVARION-MAINTENANCE-MIB", "configurationUpdateNotification"), ("ALVARION-MAINTENANCE-MIB", "configurationLocalUpdateNotification"), ("ALVARION-MAINTENANCE-MIB", "certificateAboutToExpireNotification"), ("ALVARION-MAINTENANCE-MIB", "certificateExpiredNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionMaintenanceNotificationGroup = alvarionMaintenanceNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionMaintenanceNotificationGroup.setDescription('A collection of supported notifications')
mibBuilder.exportSymbols("ALVARION-MAINTENANCE-MIB", configurationLocalUpdateNotification=configurationLocalUpdateNotification, firmwareUpdateInitiate=firmwareUpdateInitiate, configurationFactoryDefaults=configurationFactoryDefaults, alvarionMaintenanceMIBCompliances=alvarionMaintenanceMIBCompliances, certificateExpiredNotification=certificateExpiredNotification, firmwarePeriodicUpdate=firmwarePeriodicUpdate, certificate=certificate, configurationUpdateDay=configurationUpdateDay, configurationUpdateNotification=configurationUpdateNotification, firmwareUpdateNotification=firmwareUpdateNotification, configurationUpdateLocation=configurationUpdateLocation, configurationUpdateOperation=configurationUpdateOperation, certificateExpiredNotificationEnabled=certificateExpiredNotificationEnabled, configurationPeriodicUpdate=configurationPeriodicUpdate, firmwareUpdateDay=firmwareUpdateDay, configurationLocalUpdateNotificationEnabled=configurationLocalUpdateNotificationEnabled, alvarionMaintenanceMIBObjects=alvarionMaintenanceMIBObjects, configurationUpdateNotificationEnabled=configurationUpdateNotificationEnabled, configurationRestart=configurationRestart, alvarionMaintenanceMIBNotificationPrefix=alvarionMaintenanceMIBNotificationPrefix, configurationUpdateInfo=configurationUpdateInfo, configurationUpdateInitiate=configurationUpdateInitiate, alvarionMaintenanceNotificationGroup=alvarionMaintenanceNotificationGroup, certificateExpiryDate=certificateExpiryDate, alvarionMaintenanceMIBConformance=alvarionMaintenanceMIBConformance, firmwareUpdateInfo=firmwareUpdateInfo, certificateAboutToExpireNotificationEnabled=certificateAboutToExpireNotificationEnabled, certificateAboutToExpireNotification=certificateAboutToExpireNotification, firmwareUpdateLocation=firmwareUpdateLocation, configurationUpdateTime=configurationUpdateTime, alvarionMaintenanceMIBNotifications=alvarionMaintenanceMIBNotifications, alvarionMaintenanceMIBCompliance=alvarionMaintenanceMIBCompliance, alvarionMaintenanceMIBGroup=alvarionMaintenanceMIBGroup, configurationUpdate=configurationUpdate, firmwareUpdateTime=firmwareUpdateTime, firmwareUpdateNotificationEnabled=firmwareUpdateNotificationEnabled, firmwareUpdate=firmwareUpdate, alvarionMaintenanceMIB=alvarionMaintenanceMIB, PYSNMP_MODULE_ID=alvarionMaintenanceMIB, alvarionMaintenanceMIBGroups=alvarionMaintenanceMIBGroups)
