#
# PySNMP MIB module NNCEXTSVCSIGSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCEXTSVCSIGSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NncExtIntvlStateType, NncExtIntvlDurationType, NncExtAbsIntvlNumberType, NncExtRelIntvlNumberType = mibBuilder.importSymbols("NNC-INTERVAL-STATISTICS-TC-MIB", "NncExtIntvlStateType", "NncExtIntvlDurationType", "NncExtAbsIntvlNumberType", "NncExtRelIntvlNumberType")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Integer32, Counter32, TimeTicks, Counter64, Gauge32, NotificationType, MibIdentifier, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Integer32", "Counter32", "TimeTicks", "Counter64", "Gauge32", "NotificationType", "MibIdentifier", "ModuleIdentity", "iso")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
nncExtSVCSigStats = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 32))
if mibBuilder.loadTexts: nncExtSVCSigStats.setLastUpdated('9603211520Z')
if mibBuilder.loadTexts: nncExtSVCSigStats.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncExtSVCSigStats.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncExtSVCSigStats.setDescription('The MIB module containing management information for performance monitoring of SVC Signalling functions.')
nncExtSVCSigStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 32, 1))
nncExtSVCSigStatsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 32, 2))
nncExtSVCSigStatsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 32, 3))
nncExtSVCSigStatsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 32, 4))
class NncExtSetupAttemptsType(TextualConvention, Counter32):
    description = 'Setup attempts counter for the incoming(outgoing) calls. This counter counts the number of incoming(outgoing) call setup attempts (both successful and unsuccessful) during the time period of the interval. Retransmitted setup attempts are redundant (for counting purposes) and should not be counted.'
    status = 'current'

class NncExtConnectedCallsType(TextualConvention, Counter32):
    description = 'Connect attempts counter for the incoming(outgoing) calls. This counter counts the number of connect attempts for the incoming(outgoing) calls during the time period of the interval. Connect attempt for the incoming(outgoing) call is defined here by transmitting(receiving) CONNECT message by the switch.'
    status = 'current'

class NncExtTransitedCallsType(TextualConvention, Counter32):
    description = 'Transited calls counter for the incoming(outgoing) calls. This counter counts the number of incoming(outgoing) calls that has been successfully transited to the outgoing signalling link(incoming signalling link of the next signalling entity) during the time period of the interval. Each increment of the counter indicates successful transition of the call through the switch.'
    status = 'current'

class NncExtCalledPtyEventsType(TextualConvention, Counter32):
    description = 'Received(transmitted) called party events cause code counter. This counter counts the number of received(transmitted) called party events cause codes during the time period of the interval. This counter is incremented when a RELEASE, RELEASE COMPLETE, ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received(transmitted) (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning ----------- ---------------------------------------- 17 user busy 18 no user responding 21 call rejected 22 number changed 23 user rejects all calls with calling line id restriction (CLIR) 27 destination out of order 31 normal, unspecified NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.'
    status = 'current'

class NncExtCallingPtyEventsType(TextualConvention, Counter32):
    description = 'Received(transmitted) calling party events cause code counter. This counter counts the number of received(transmitted) calling party events cause codes during the time period of the interval. This counter monitors error events that occur due to the originating user doing something wrong. This counter is incremented when a RELEASE, RELEASE COMPLETE, ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received(transmitted). (Note: These cause values apply to both UNI3.0 and UNI3.1 unless otherwise stated): Cause Value Meaning ----------- ---------------------------------------- 28 invalid number format (address incomplete) 43 access information discarded 57 bearer capability not authorized 65 bearer capability not implemented 73 unsupported combination of traffic parameters 78 AAL parameters cannot be supported (UNI3.1 only) 91 invalid transit network selection 93 AAL parameters cannot be supported(UNI3.0 only) NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE messages and contain the same cause value, are redundant (for counting purposes) and should not be counted.'
    status = 'current'

class NncExtResUnavailableType(TextualConvention, Counter32):
    description = 'Received(transmitted) resource unavailable cause code counter. This counter counts the number of received(transmitted) resource unavailable cause codes during the time period of the interval. This counter is incremented when a RELEASE, RELEASE COMPLETE, ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received(transmitted) (Note: These cause values apply to both UNI3.0 and UNI3.1 unless otherwise stated): Cause Value Meaning ----------- ---------------------------------------- 35 requested VPCI/VCI not available 37 user cell rate not available (UNI3.1 only) 38 network out of order 41 temporary failure 45 no VPCI/VCI available 47 resource unavailable, unspecified 49 Quality of Service unavailable 51 user cell rate not available (UNI3.0 only) 58 bearer capability not presently available 63 service or option not available, unspecified 92 too many pending add party requests NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.'
    status = 'current'

class NncExtRoutingFailureType(TextualConvention, Counter32):
    description = 'Received(transmitted) routing failure cause code counter. This counter counts the number of received(transmitted) routing failure cause codes during the time period of the interval. This counter is incremented when a RELEASE, RELEASE COMPLETE, ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received(transmitted) (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning ----------- ---------------------------------------- 1 unallocated (unassigned) number 2 no route to specified transit network 3 no route to destination 88 incompatible destination NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.'
    status = 'current'

class NncExtInvalidMessageType(TextualConvention, Counter32):
    description = "Received(transmitted) invalid message cause code counter. This counter counts the number of received(transmitted) invalid message cause codes during the time period of the interval. This counter reflects any sort of incorrect information in a message. This includes: - RELEASE, RELEASE COMPLETE, ADD PARTY REJECT, and STATUS messages received(transmitted), that contain any of the Cause values listed below. - Ignored messages. These messages are dropped because the message was so damaged that it could not be further processed. A list of dropped mesages is compiled below: 1. Message with invalid protocol discriminator 2. Message with errors in the call reference I.E. - Bits 5-8 of the first octet not equal to '0000' - Bits 1-4 of the first octet indicating a length other than 3 octets - RELEASE COMPLETE message received with a call reference that does not relate to a call active or in progress - SETUP message received with call reference flag incorrectly set to 1 - SETUP message received with a call reference for a call that is already active or in progress. 3. Message too short The following cause values are monitored by this counter (Note: These cause values apply to both UNI3.0 and UNI3.1 unless otherwise stated): Cause Value Meaning ----------- ---------------------------------------- 10 VPCI/VCI unacceptable (UNI3.0 only) 36 VPCI/VCI assignment failure (UNI3.1 only) 81 invalid call reference value 82 identified channel does not exist 89 invalid endpoint reference 96 mandatory information element is missing 97 message type non-existent or not implemented 99 information element non-existent or not implemented 100 invalid information element contents 101 message not compatible with call state 104 incorrect message length 111 protocol error, unspecified NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted."
    status = 'current'

class NncExtTimerExpirationType(TextualConvention, Counter32):
    description = "Received(transmitted) timer expiration cause code counter. This counter counts the number of received(transmitted) timer expiration cause codes during the time period of the interval. This counter provides a count of network timer expiries, and to some extent, host or switch timer expiries. The conditions for incrementing this counter are: - Expiry of any network timer - Receipt of a RELEASE or RELEASE COMPLETE message with Cause #102, 'recovery on timer expiry'. NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted."
    status = 'current'

class NncExtNormalCallClrType(TextualConvention, Counter32):
    description = "Received(transmitted) 'normal call clearing' cause code counter. This counter counts the number of received(transmitted) 'normal call clearing' cause codes during the time period of the interval. NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted."
    status = 'current'

class NncExtOtherCausesType(TextualConvention, Counter32):
    description = "Received(transmitted) other causes cause code counter. This counter counts the number of received(transmitted) cause codes which do not belong to any of the predefined cause codes groups during the time period of the interval. A 'response to STATUS ENQUIRY' cause code do not indicate a failure condition and should not be counted. NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted."
    status = 'current'

class NncExtScreeningFailuresType(TextualConvention, Counter32):
    description = 'Incoming calls screening failures counter. This counter counts the number of incoming calls that failed due to the screening failure of the calling party number during the time period of the interval.'
    status = 'current'

class NncExtActiveCallsType(TextualConvention, Gauge32):
    description = 'Active calls gauge. This gauge represents the total number of incoming and outgoing calls which are currently active. The active call is defined here as the call which has been initialized with the SETUP message but not released with RELEASE or RELEASE COMPLETE messages. Therefore all the call states except for a Null state correspond to the active call.'
    status = 'current'

class NncExtSelectiveCallsType(TextualConvention, Counter32):
    description = 'Incoming/outgoing selective calls counter. This counter counts the number of incoming/outgoing calls that matched called/calling party numbers specified in Address Translation Table during the time period of the interval.'
    status = 'current'

nncExtSVCSigStatsCurrShortTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1), )
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTable.setDescription('The nncExtSVCSigStatsCurrShortTable contains objects for monitoring the performance of a signalling link during a current short interval.')
nncExtSVCSigStatsCurrShortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortEntry.setDescription('An entry in the current short interval statistics table. Each conceptual row contains current statistics for a particular signalling link. ifIndex corresponds to the trunk group with an attached signalling link.')
nncExtSVCSigStatsCurrShortIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortIntvlState.setDescription('The state of the current short interval.')
nncExtSVCSigStatsCurrShortAbsIntvlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 2), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortAbsIntvlNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortAbsIntvlNumber.setDescription('The absolute index number of the current short interval.')
nncExtSVCSigStatsCurrShortIntvlStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortIntvlStartTime.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortIntvlStartTime.setDescription('The start time of the current short interval.')
nncExtSVCSigStatsCurrShortIntvlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 4), NncExtIntvlDurationType()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortIntvlDuration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortIntvlDuration.setDescription('The duration of the current short interval.')
nncExtSVCSigStatsCurrShortInSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 5), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInSetupAttempts.setDescription('Current short interval setup attempts counter for the incoming calls.')
nncExtSVCSigStatsCurrShortInConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 6), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInConnectedCalls.setDescription('Current short interval connect attempts counter for the incoming calls.')
nncExtSVCSigStatsCurrShortInTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 7), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInTransitedCalls.setDescription('Current short interval transited calls counter for the incoming calls.')
nncExtSVCSigStatsCurrShortOutSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 8), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutSetupAttempts.setDescription('Current short interval setup attempts counter for the outgoing calls.')
nncExtSVCSigStatsCurrShortOutConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 9), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutConnectedCalls.setDescription('Current short interval connect attempts counter for the outgoing calls.')
nncExtSVCSigStatsCurrShortOutTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 10), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutTransitedCalls.setDescription('Current short interval transited calls counter for the outgoing calls.')
nncExtSVCSigStatsCurrShortRxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 11), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxCalledPtyEvents.setDescription('Current short interval received called party events cause code counter.')
nncExtSVCSigStatsCurrShortRxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 12), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxCallingPtyEvents.setDescription('Current short interval received calling party events cause code counter.')
nncExtSVCSigStatsCurrShortRxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 13), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxResUnavailable.setDescription('Current short interval received resource unavailable cause code counter.')
nncExtSVCSigStatsCurrShortRxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 14), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxRoutingFailure.setDescription('Current short interval received routing failure cause code counter.')
nncExtSVCSigStatsCurrShortRxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 15), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxInvalidMessage.setDescription('Current short interval received invalid message cause code counter.')
nncExtSVCSigStatsCurrShortRxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 16), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxTimerExpiration.setDescription('Current short interval received timer expiration cause code counter.')
nncExtSVCSigStatsCurrShortRxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 17), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxNormalCallClr.setDescription("Current short interval received 'normal call clearing' cause code counter.")
nncExtSVCSigStatsCurrShortRxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 18), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortRxOtherCauses.setDescription('Current short interval received other causes cause code counter.')
nncExtSVCSigStatsCurrShortTxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 19), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxCalledPtyEvents.setDescription('Current short interval transmitted called party events cause code counter.')
nncExtSVCSigStatsCurrShortTxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 20), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxCallingPtyEvents.setDescription('Current short interval transmitted calling party events cause code counter.')
nncExtSVCSigStatsCurrShortTxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 21), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxResUnavailable.setDescription('Current short interval transmitted resource unavailable cause code counter.')
nncExtSVCSigStatsCurrShortTxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 22), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxRoutingFailure.setDescription('Current short interval transmitted routing failure cause code counter.')
nncExtSVCSigStatsCurrShortTxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 23), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxInvalidMessage.setDescription('Current short interval transmitted invalid message cause code counter.')
nncExtSVCSigStatsCurrShortTxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 24), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxTimerExpiration.setDescription('Current short interval transmitted timer expiration cause code counter.')
nncExtSVCSigStatsCurrShortTxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 25), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxNormalCallClr.setDescription("Current short interval transmitted 'normal call clearing' cause code counter.")
nncExtSVCSigStatsCurrShortTxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 26), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortTxOtherCauses.setDescription('Current short interval transmitted other causes cause code counter.')
nncExtSVCSigStatsCurrShortScreeningFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 27), NncExtScreeningFailuresType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortScreeningFailures.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortScreeningFailures.setDescription('Current short interval incoming calls screening failures counter.')
nncExtSVCSigStatsCurrShortInCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 28), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInCDNSelectiveCalls.setDescription('Current short interval selective calls counter for incoming called numbers.')
nncExtSVCSigStatsCurrShortInCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 29), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortInCGNSelectiveCalls.setDescription('Current short interval selective calls counter for incoming calling numbers.')
nncExtSVCSigStatsCurrShortOutCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 30), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutCDNSelectiveCalls.setDescription('Current short interval selective calls counter for outgoing called numbers.')
nncExtSVCSigStatsCurrShortOutCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 1, 1, 31), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortOutCGNSelectiveCalls.setDescription('Current short interval selective calls counter for outgoing calling numbers.')
nncExtSVCSigStatsPrevShortTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2), )
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTable.setDescription('The nncExtSVCSigStatsPrevShortTable contains objects for monitoring the performance of a signalling link during a previous short interval.')
nncExtSVCSigStatsPrevShortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortIntvlNumber"))
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortEntry.setDescription('An entry in the previous short interval statistics table. Each conceptual row contains previous interval statistics for a particular signalling link. ifIndex corresponds to the trunk group with an attached signalling link.')
nncExtSVCSigStatsPrevShortIntvlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 1), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlNumber.setDescription('The relative index of the previous short interval.')
nncExtSVCSigStatsPrevShortIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlState.setDescription('The state of the previous short interval.')
nncExtSVCSigStatsPrevShortAbsIntvlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 3), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortAbsIntvlNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortAbsIntvlNumber.setDescription('The absolute index number of the previous short interval.')
nncExtSVCSigStatsPrevShortIntvlStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlStartTime.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlStartTime.setDescription('The start time of the previous short interval.')
nncExtSVCSigStatsPrevShortIntvlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 5), NncExtIntvlDurationType()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlDuration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortIntvlDuration.setDescription('The duration of the previous short interval.')
nncExtSVCSigStatsPrevShortInSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 6), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInSetupAttempts.setDescription('Previous short interval setup attempts counter for the incoming calls.')
nncExtSVCSigStatsPrevShortInConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 7), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInConnectedCalls.setDescription('Previous short interval connect attempts counter for the incoming calls.')
nncExtSVCSigStatsPrevShortInTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 8), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInTransitedCalls.setDescription('Previous short interval transited calls counter for the incoming calls.')
nncExtSVCSigStatsPrevShortOutSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 9), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutSetupAttempts.setDescription('Previous short interval setup attempts counter for the outgoing calls.')
nncExtSVCSigStatsPrevShortOutConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 10), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutConnectedCalls.setDescription('Previous short interval connect attempts counter for the outgoing calls.')
nncExtSVCSigStatsPrevShortOutTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 11), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutTransitedCalls.setDescription('Previous short interval transited calls counter for the outgoing calls.')
nncExtSVCSigStatsPrevShortRxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 12), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxCalledPtyEvents.setDescription('Previous short interval received called party events cause code counter.')
nncExtSVCSigStatsPrevShortRxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 13), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxCallingPtyEvents.setDescription('Previous short interval received calling party events cause code counter.')
nncExtSVCSigStatsPrevShortRxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 14), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxResUnavailable.setDescription('Previous short interval received resource unavailable cause code counter.')
nncExtSVCSigStatsPrevShortRxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 15), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxRoutingFailure.setDescription('Previous short interval received routing failure cause code counter.')
nncExtSVCSigStatsPrevShortRxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 16), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxInvalidMessage.setDescription('Previous short interval received invalid message cause code counter.')
nncExtSVCSigStatsPrevShortRxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 17), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxTimerExpiration.setDescription('Previous short interval received timer expiration cause code counter.')
nncExtSVCSigStatsPrevShortRxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 18), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxNormalCallClr.setDescription("Previous short interval received 'normal call clearing' cause code counter.")
nncExtSVCSigStatsPrevShortRxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 19), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortRxOtherCauses.setDescription('Previous short interval received other causes cause code counter.')
nncExtSVCSigStatsPrevShortTxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 20), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxCalledPtyEvents.setDescription('Previous short interval transmitted called party events cause code counter.')
nncExtSVCSigStatsPrevShortTxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 21), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxCallingPtyEvents.setDescription('Previous short interval transmitted calling party events cause code counter.')
nncExtSVCSigStatsPrevShortTxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 22), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxResUnavailable.setDescription('Previous short interval transmitted resource unavailable cause code counter.')
nncExtSVCSigStatsPrevShortTxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 23), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxRoutingFailure.setDescription('Previous short interval transmitted routing failure cause code counter.')
nncExtSVCSigStatsPrevShortTxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 24), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxInvalidMessage.setDescription('Previous short interval transmitted invalid message cause code counter.')
nncExtSVCSigStatsPrevShortTxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 25), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxTimerExpiration.setDescription('Previous short interval transmitted timer expiration cause code counter.')
nncExtSVCSigStatsPrevShortTxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 26), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxNormalCallClr.setDescription("Previous short interval transmitted 'normal call clearing' cause code counter.")
nncExtSVCSigStatsPrevShortTxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 27), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortTxOtherCauses.setDescription('Previous short interval transmitted other causes cause code counter.')
nncExtSVCSigStatsPrevShortScreeningFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 28), NncExtScreeningFailuresType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortScreeningFailures.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortScreeningFailures.setDescription('Previous short interval incoming calls screening failures counter.')
nncExtSVCSigStatsPrevShortInCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 29), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInCDNSelectiveCalls.setDescription('Previous short interval selective calls counter for incoming called number.')
nncExtSVCSigStatsPrevShortInCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 30), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortInCGNSelectiveCalls.setDescription('Previous short interval selective calls counter for incoming calling number.')
nncExtSVCSigStatsPrevShortOutCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 31), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutCDNSelectiveCalls.setDescription('Previous short interval selective calls counter for outgoing called number.')
nncExtSVCSigStatsPrevShortOutCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 2, 1, 32), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortOutCGNSelectiveCalls.setDescription('Previous short interval selective calls counter for outgoing calling number.')
nncExtSVCSigStatsCurrLongTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3), )
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTable.setDescription('The nncExtSVCSigStatsCurrLongTable contains objects for monitoring the performance of a signalling link during a current long interval.')
nncExtSVCSigStatsCurrLongEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongEntry.setDescription('An entry in the current long interval statistics table. Each conceptual row contains current statistics for a particular signalling link. ifIndex corresponds to the trunk group with an attached signalling link.')
nncExtSVCSigStatsCurrLongIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongIntvlState.setDescription('The state of the current long interval.')
nncExtSVCSigStatsCurrLongAbsIntvlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 2), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongAbsIntvlNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongAbsIntvlNumber.setDescription('The absolute index number of the current long interval.')
nncExtSVCSigStatsCurrLongIntvlStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongIntvlStartTime.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongIntvlStartTime.setDescription('The start time of the current long interval.')
nncExtSVCSigStatsCurrLongIntvlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 4), NncExtIntvlDurationType()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongIntvlDuration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongIntvlDuration.setDescription('The duration of the current long interval.')
nncExtSVCSigStatsCurrLongInSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 5), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInSetupAttempts.setDescription('Current long interval setup attempts counter for the incoming calls.')
nncExtSVCSigStatsCurrLongInConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 6), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInConnectedCalls.setDescription('Current long interval connect attempts counter for the incoming calls.')
nncExtSVCSigStatsCurrLongInTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 7), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInTransitedCalls.setDescription('Current long interval transited calls counter for the incoming calls.')
nncExtSVCSigStatsCurrLongOutSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 8), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutSetupAttempts.setDescription('Current long interval setup attempts counter for the outgoing calls.')
nncExtSVCSigStatsCurrLongOutConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 9), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutConnectedCalls.setDescription('Current long interval connect attempts counter for the outgoing calls.')
nncExtSVCSigStatsCurrLongOutTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 10), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutTransitedCalls.setDescription('Current long interval transited calls counter for the outgoing calls.')
nncExtSVCSigStatsCurrLongRxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 11), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxCalledPtyEvents.setDescription('Current long interval received called party events cause code counter.')
nncExtSVCSigStatsCurrLongRxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 12), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxCallingPtyEvents.setDescription('Current long interval received calling party events cause code counter.')
nncExtSVCSigStatsCurrLongRxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 13), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxResUnavailable.setDescription('Current long interval received resource unavailable cause code counter.')
nncExtSVCSigStatsCurrLongRxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 14), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxRoutingFailure.setDescription('Current long interval received routing failure cause code counter.')
nncExtSVCSigStatsCurrLongRxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 15), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxInvalidMessage.setDescription('Current long interval received invalid message cause code counter.')
nncExtSVCSigStatsCurrLongRxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 16), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxTimerExpiration.setDescription('Current long interval received timer expiration cause code counter.')
nncExtSVCSigStatsCurrLongRxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 17), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxNormalCallClr.setDescription("Current long interval transmitted 'normal call clearing' cause code counter.")
nncExtSVCSigStatsCurrLongRxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 18), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongRxOtherCauses.setDescription('Current long interval received other causes cause code counter.')
nncExtSVCSigStatsCurrLongTxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 19), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxCalledPtyEvents.setDescription('Current long interval transmitted called party events cause code counter.')
nncExtSVCSigStatsCurrLongTxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 20), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxCallingPtyEvents.setDescription('Current long interval transmitted calling party events cause code counter.')
nncExtSVCSigStatsCurrLongTxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 21), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxResUnavailable.setDescription('Current long interval transmitted resource unavailable cause code counter.')
nncExtSVCSigStatsCurrLongTxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 22), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxRoutingFailure.setDescription('Current long interval transmitted routing failure cause code counter.')
nncExtSVCSigStatsCurrLongTxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 23), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxInvalidMessage.setDescription('Current long interval transmitted invalid message cause code counter.')
nncExtSVCSigStatsCurrLongTxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 24), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxTimerExpiration.setDescription('Current long interval transmitted timer expiration cause code counter.')
nncExtSVCSigStatsCurrLongTxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 25), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxNormalCallClr.setDescription("Current long interval transmitted 'normal call clearing' cause code counter.")
nncExtSVCSigStatsCurrLongTxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 26), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongTxOtherCauses.setDescription('Current long interval transmitted other causes cause code counter.')
nncExtSVCSigStatsCurrLongScreeningFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 27), NncExtScreeningFailuresType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongScreeningFailures.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongScreeningFailures.setDescription('Current long interval incoming calls screening failures counter.')
nncExtSVCSigStatsCurrLongInCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 28), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInCDNSelectiveCalls.setDescription('Current long interval selective calls counter for incoming called number.')
nncExtSVCSigStatsCurrLongInCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 29), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongInCGNSelectiveCalls.setDescription('Current long interval selective calls counter for incoming calling number.')
nncExtSVCSigStatsCurrLongOutCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 30), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutCDNSelectiveCalls.setDescription('Current long interval selective calls counter for outgoing called number.')
nncExtSVCSigStatsCurrLongOutCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 3, 1, 31), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongOutCGNSelectiveCalls.setDescription('Current long interval selective calls counter for outgoing calling number.')
nncExtSVCSigStatsPrevLongTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4), )
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTable.setDescription('The nncExtSVCSigStatsPrevLongTable contains objects for monitoring the performance of a signalling link during a previous long interval.')
nncExtSVCSigStatsPrevLongEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongIntvlNumber"))
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongEntry.setDescription('An entry in the previous long interval statistics table. Each conceptual row contains previous interval statistics for a particular signalling link. ifIndex corresponds to the trunk group with an attached signalling link.')
nncExtSVCSigStatsPrevLongIntvlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 1), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlNumber.setDescription('The relative index of the previous long interval.')
nncExtSVCSigStatsPrevLongIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlState.setDescription('The state of the previous long interval.')
nncExtSVCSigStatsPrevLongAbsIntvlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 3), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongAbsIntvlNumber.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongAbsIntvlNumber.setDescription('The absolute index number of the previous long interval.')
nncExtSVCSigStatsPrevLongIntvlStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlStartTime.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlStartTime.setDescription('The start time of the previous long interval.')
nncExtSVCSigStatsPrevLongIntvlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 5), NncExtIntvlDurationType()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlDuration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongIntvlDuration.setDescription('The duration of the previous long interval.')
nncExtSVCSigStatsPrevLongInSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 6), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInSetupAttempts.setDescription('Previous long interval setup attempts counter for the incoming calls.')
nncExtSVCSigStatsPrevLongInConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 7), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInConnectedCalls.setDescription('Previous long interval connect attempts counter for the incoming calls.')
nncExtSVCSigStatsPrevLongInTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 8), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInTransitedCalls.setDescription('Previous long interval transited calls counter for the incoming calls.')
nncExtSVCSigStatsPrevLongOutSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 9), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutSetupAttempts.setDescription('Previous long interval setup attempts counter for the outgoing calls.')
nncExtSVCSigStatsPrevLongOutConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 10), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutConnectedCalls.setDescription('Previous long interval connect attempts counter for the outgoing calls.')
nncExtSVCSigStatsPrevLongOutTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 11), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutTransitedCalls.setDescription('Previous long interval transited calls counter for the outgoing calls.')
nncExtSVCSigStatsPrevLongRxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 12), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxCalledPtyEvents.setDescription('Previous long interval received called party events cause code counter.')
nncExtSVCSigStatsPrevLongRxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 13), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxCallingPtyEvents.setDescription('Previous long interval received calling party events cause code counter.')
nncExtSVCSigStatsPrevLongRxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 14), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxResUnavailable.setDescription('Previous long interval received resource unavailable cause code counter.')
nncExtSVCSigStatsPrevLongRxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 15), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxRoutingFailure.setDescription('Previous long interval received routing failure cause code counter.')
nncExtSVCSigStatsPrevLongRxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 16), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxInvalidMessage.setDescription('Previous long interval received invalid message cause code counter.')
nncExtSVCSigStatsPrevLongRxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 17), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxTimerExpiration.setDescription('Previous long interval received timer expiration cause code counter.')
nncExtSVCSigStatsPrevLongRxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 18), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxNormalCallClr.setDescription("Previous long interval received 'normal call clearing' cause code counter.")
nncExtSVCSigStatsPrevLongRxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 19), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongRxOtherCauses.setDescription('Previous long interval received other causes cause code counter.')
nncExtSVCSigStatsPrevLongTxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 20), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxCalledPtyEvents.setDescription('Previous long interval transmitted called party events cause code counter.')
nncExtSVCSigStatsPrevLongTxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 21), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxCallingPtyEvents.setDescription('Previous long interval transmitted calling party events cause code counter.')
nncExtSVCSigStatsPrevLongTxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 22), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxResUnavailable.setDescription('Previous long interval transmitted resource unavailable cause code counter.')
nncExtSVCSigStatsPrevLongTxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 23), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxRoutingFailure.setDescription('Previous long interval transmitted routing failure cause code counter.')
nncExtSVCSigStatsPrevLongTxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 24), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxInvalidMessage.setDescription('Previous long interval transmitted invalid message cause code counter.')
nncExtSVCSigStatsPrevLongTxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 25), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxTimerExpiration.setDescription('Previous long interval transmitted timer expiration cause code counter.')
nncExtSVCSigStatsPrevLongTxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 26), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxNormalCallClr.setDescription("Previous long interval transmitted 'normal call clearing' cause code counter.")
nncExtSVCSigStatsPrevLongTxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 27), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongTxOtherCauses.setDescription('Previous long interval transmitted other causes cause code counter.')
nncExtSVCSigStatsPrevLongScreeningFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 28), NncExtScreeningFailuresType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongScreeningFailures.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongScreeningFailures.setDescription('Previous long interval incoming calls screening failures counter.')
nncExtSVCSigStatsPrevLongInCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 29), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInCDNSelectiveCalls.setDescription('Previous long interval selective calls counter for incoming called number.')
nncExtSVCSigStatsPrevLongInCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 30), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongInCGNSelectiveCalls.setDescription('Previous long interval selective calls counter for incoming calling number.')
nncExtSVCSigStatsPrevLongOutCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 31), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutCDNSelectiveCalls.setDescription('Previous long interval selective calls counter for outgoing called number.')
nncExtSVCSigStatsPrevLongOutCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 4, 1, 32), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongOutCGNSelectiveCalls.setDescription('Previous long interval selective calls counter for outgoing calling number.')
nncExtSVCSigStatsRawTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5), )
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTable.setDescription('The nncExtSVCSigStatsRawTable contains objects for monitoring the performance of a signalling link since the last service card bootup.')
nncExtSVCSigStatsRawEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncExtSVCSigStatsRawEntry.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawEntry.setDescription('An entry in the raw statistics table. Each conceptual row contains current statistics for a particular signalling link. ifIndex corresponds to the trunk group with an attached signalling link.')
nncExtSVCSigStatsRawState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawState.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawState.setDescription('The state of the raw statistics data.')
nncExtSVCSigStatsRawStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawStartTime.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawStartTime.setDescription('The time when the collection of the raw statistics data was started.')
nncExtSVCSigStatsRawDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 3), NncExtIntvlDurationType()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawDuration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawDuration.setDescription('The time since the collection of the raw statistics data was started.')
nncExtSVCSigStatsRawActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 4), NncExtActiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawActiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawActiveCalls.setDescription('The number of currently active calls.')
nncExtSVCSigStatsRawInSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 5), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInSetupAttempts.setDescription('Setup attempts raw counter for the incoming calls.')
nncExtSVCSigStatsRawInConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 6), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInConnectedCalls.setDescription('Connect attempts raw counter for the incoming calls.')
nncExtSVCSigStatsRawInTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 7), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInTransitedCalls.setDescription('Transited calls raw counter for the incoming calls.')
nncExtSVCSigStatsRawOutSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 8), NncExtSetupAttemptsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutSetupAttempts.setDescription('Setup attempts raw counter for the outgoing calls.')
nncExtSVCSigStatsRawOutConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 9), NncExtConnectedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutConnectedCalls.setDescription('Connect attempts raw counter for the outgoing calls.')
nncExtSVCSigStatsRawOutTransitedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 10), NncExtTransitedCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutTransitedCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutTransitedCalls.setDescription('Transited calls raw counter for the outgoing calls.')
nncExtSVCSigStatsRawRxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 11), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxCalledPtyEvents.setDescription('Received called party events cause code raw counter.')
nncExtSVCSigStatsRawRxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 12), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxCallingPtyEvents.setDescription('Received calling party events cause code raw counter.')
nncExtSVCSigStatsRawRxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 13), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxResUnavailable.setDescription('Received resource unavailable cause code raw counter.')
nncExtSVCSigStatsRawRxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 14), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxRoutingFailure.setDescription('Received routing failure cause code raw counter.')
nncExtSVCSigStatsRawRxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 15), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxInvalidMessage.setDescription('Received invalid message cause code raw counter.')
nncExtSVCSigStatsRawRxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 16), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxTimerExpiration.setDescription('Received timer expiration cause code raw counter.')
nncExtSVCSigStatsRawRxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 17), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxNormalCallClr.setDescription("Received 'normal call clearing' cause code raw counter.")
nncExtSVCSigStatsRawRxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 18), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawRxOtherCauses.setDescription('Received other causes cause code raw counter.')
nncExtSVCSigStatsRawTxCalledPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 19), NncExtCalledPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxCalledPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxCalledPtyEvents.setDescription('Transmitted called party events cause code raw counter.')
nncExtSVCSigStatsRawTxCallingPtyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 20), NncExtCallingPtyEventsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxCallingPtyEvents.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxCallingPtyEvents.setDescription('Transmitted calling party events cause code raw counter.')
nncExtSVCSigStatsRawTxResUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 21), NncExtResUnavailableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxResUnavailable.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxResUnavailable.setDescription('Transmitted resource unavailable cause code raw counter.')
nncExtSVCSigStatsRawTxRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 22), NncExtRoutingFailureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxRoutingFailure.setDescription('Transmitted routing failure cause code raw counter.')
nncExtSVCSigStatsRawTxInvalidMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 23), NncExtInvalidMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxInvalidMessage.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxInvalidMessage.setDescription('Transmitted invalid message cause code raw counter.')
nncExtSVCSigStatsRawTxTimerExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 24), NncExtTimerExpirationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxTimerExpiration.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxTimerExpiration.setDescription('Transmitted timer expiration cause code raw counter.')
nncExtSVCSigStatsRawTxNormalCallClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 25), NncExtNormalCallClrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxNormalCallClr.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxNormalCallClr.setDescription("Transmitted 'normal call clearing' cause code raw counter.")
nncExtSVCSigStatsRawTxOtherCauses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 26), NncExtOtherCausesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxOtherCauses.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawTxOtherCauses.setDescription('Transmitted other causes cause code raw counter.')
nncExtSVCSigStatsRawScreeningFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 27), NncExtScreeningFailuresType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawScreeningFailures.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawScreeningFailures.setDescription('Incoming calls screening failures raw counter.')
nncExtSVCSigStatsRawInCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 28), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInCDNSelectiveCalls.setDescription('Raw selective calls counter for incoming called number.')
nncExtSVCSigStatsRawInCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 29), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawInCGNSelectiveCalls.setDescription('Raw selective calls counter for incoming calling number.')
nncExtSVCSigStatsRawOutCDNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 30), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutCDNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutCDNSelectiveCalls.setDescription('Raw selective calls counter for outgoing called number.')
nncExtSVCSigStatsRawOutCGNSelectiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 32, 1, 5, 1, 31), NncExtSelectiveCallsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutCGNSelectiveCalls.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawOutCGNSelectiveCalls.setDescription('Raw selective calls counter for outgoing calling number.')
nncExtSVCSigStatsCurrShortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 32, 3, 1)).setObjects(("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortIntvlState"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortAbsIntvlNumber"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortIntvlStartTime"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortIntvlDuration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortInSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortInConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortInTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortOutSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortOutConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortOutTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortRxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortTxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortScreeningFailures"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortInCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortInCGNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortOutCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrShortOutCGNSelectiveCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtSVCSigStatsCurrShortGroup = nncExtSVCSigStatsCurrShortGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrShortGroup.setDescription('A collection of objects providing short,current interval statistics for signalling links.')
nncExtSVCSigStatsPrevShortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 32, 3, 2)).setObjects(("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortIntvlState"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortAbsIntvlNumber"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortIntvlStartTime"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortIntvlDuration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortInSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortInConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortInTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortOutSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortOutConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortOutTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortRxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortTxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortScreeningFailures"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortInCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortInCGNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortOutCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevShortOutCGNSelectiveCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtSVCSigStatsPrevShortGroup = nncExtSVCSigStatsPrevShortGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevShortGroup.setDescription('A collection of objects providing short,non-current interval statistics for signalling links.')
nncExtSVCSigStatsCurrLongGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 32, 3, 3)).setObjects(("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongIntvlState"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongAbsIntvlNumber"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongIntvlStartTime"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongIntvlDuration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongInSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongInConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongInTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongOutSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongOutConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongOutTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongRxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongTxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongScreeningFailures"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongInCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongInCGNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongOutCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsCurrLongOutCGNSelectiveCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtSVCSigStatsCurrLongGroup = nncExtSVCSigStatsCurrLongGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCurrLongGroup.setDescription('A collection of objects providing long,current interval statistics for signalling links.')
nncExtSVCSigStatsPrevLongGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 32, 3, 4)).setObjects(("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongIntvlState"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongAbsIntvlNumber"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongIntvlStartTime"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongIntvlDuration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongInSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongInConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongInTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongOutSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongOutConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongOutTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongRxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongTxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongScreeningFailures"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongInCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongInCGNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongOutCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsPrevLongOutCGNSelectiveCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtSVCSigStatsPrevLongGroup = nncExtSVCSigStatsPrevLongGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsPrevLongGroup.setDescription('A collection of objects providing long,non-current interval statistics for signalling links.')
nncExtSVCSigStatsRawGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 32, 3, 5)).setObjects(("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawState"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawStartTime"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawDuration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawActiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawInSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawInConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawInTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawOutSetupAttempts"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawOutConnectedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawOutTransitedCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawRxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxCalledPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxCallingPtyEvents"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxResUnavailable"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxRoutingFailure"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxInvalidMessage"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxTimerExpiration"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxNormalCallClr"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawTxOtherCauses"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawScreeningFailures"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawInCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawInCGNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawOutCDNSelectiveCalls"), ("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawOutCGNSelectiveCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtSVCSigStatsRawGroup = nncExtSVCSigStatsRawGroup.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsRawGroup.setDescription('A collection of objects providing raw statistics for signalling links.')
nncExtSVCSigStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 32, 4, 1)).setObjects(("NNCEXTSVCSIGSTATS-MIB", "nncExtSVCSigStatsRawGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncExtSVCSigStatsCompliance = nncExtSVCSigStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: nncExtSVCSigStatsCompliance.setDescription('The compliance statement for Newbridge SNMP entities which represent signalling links.')
mibBuilder.exportSymbols("NNCEXTSVCSIGSTATS-MIB", nncExtSVCSigStatsRawTxInvalidMessage=nncExtSVCSigStatsRawTxInvalidMessage, nncExtSVCSigStatsCurrLongTxNormalCallClr=nncExtSVCSigStatsCurrLongTxNormalCallClr, nncExtSVCSigStatsPrevLongTxCallingPtyEvents=nncExtSVCSigStatsPrevLongTxCallingPtyEvents, nncExtSVCSigStatsRawInCGNSelectiveCalls=nncExtSVCSigStatsRawInCGNSelectiveCalls, nncExtSVCSigStatsRawInSetupAttempts=nncExtSVCSigStatsRawInSetupAttempts, nncExtSVCSigStatsPrevLongTxOtherCauses=nncExtSVCSigStatsPrevLongTxOtherCauses, nncExtSVCSigStatsPrevLongInCDNSelectiveCalls=nncExtSVCSigStatsPrevLongInCDNSelectiveCalls, nncExtSVCSigStatsPrevLongRxInvalidMessage=nncExtSVCSigStatsPrevLongRxInvalidMessage, nncExtSVCSigStatsCurrShortTxTimerExpiration=nncExtSVCSigStatsCurrShortTxTimerExpiration, nncExtSVCSigStatsCurrLongOutTransitedCalls=nncExtSVCSigStatsCurrLongOutTransitedCalls, nncExtSVCSigStatsPrevShortOutCDNSelectiveCalls=nncExtSVCSigStatsPrevShortOutCDNSelectiveCalls, nncExtSVCSigStatsPrevLongGroup=nncExtSVCSigStatsPrevLongGroup, nncExtSVCSigStatsRawTxRoutingFailure=nncExtSVCSigStatsRawTxRoutingFailure, nncExtSVCSigStatsCurrLongRxNormalCallClr=nncExtSVCSigStatsCurrLongRxNormalCallClr, nncExtSVCSigStatsCurrShortScreeningFailures=nncExtSVCSigStatsCurrShortScreeningFailures, nncExtSVCSigStatsCurrShortIntvlState=nncExtSVCSigStatsCurrShortIntvlState, nncExtSVCSigStatsPrevShortRxInvalidMessage=nncExtSVCSigStatsPrevShortRxInvalidMessage, nncExtSVCSigStatsPrevShortTxInvalidMessage=nncExtSVCSigStatsPrevShortTxInvalidMessage, nncExtSVCSigStatsCurrLongInTransitedCalls=nncExtSVCSigStatsCurrLongInTransitedCalls, NncExtCallingPtyEventsType=NncExtCallingPtyEventsType, nncExtSVCSigStatsCurrLongRxOtherCauses=nncExtSVCSigStatsCurrLongRxOtherCauses, nncExtSVCSigStatsRawTable=nncExtSVCSigStatsRawTable, nncExtSVCSigStatsCurrShortOutCDNSelectiveCalls=nncExtSVCSigStatsCurrShortOutCDNSelectiveCalls, nncExtSVCSigStatsCurrShortRxInvalidMessage=nncExtSVCSigStatsCurrShortRxInvalidMessage, nncExtSVCSigStatsPrevLongInConnectedCalls=nncExtSVCSigStatsPrevLongInConnectedCalls, nncExtSVCSigStatsCurrLongTxRoutingFailure=nncExtSVCSigStatsCurrLongTxRoutingFailure, nncExtSVCSigStatsPrevShortRxTimerExpiration=nncExtSVCSigStatsPrevShortRxTimerExpiration, nncExtSVCSigStatsRawInConnectedCalls=nncExtSVCSigStatsRawInConnectedCalls, nncExtSVCSigStatsPrevShortEntry=nncExtSVCSigStatsPrevShortEntry, nncExtSVCSigStatsRawRxOtherCauses=nncExtSVCSigStatsRawRxOtherCauses, nncExtSVCSigStatsPrevShortTable=nncExtSVCSigStatsPrevShortTable, nncExtSVCSigStatsPrevShortOutCGNSelectiveCalls=nncExtSVCSigStatsPrevShortOutCGNSelectiveCalls, nncExtSVCSigStatsCurrLongInConnectedCalls=nncExtSVCSigStatsCurrLongInConnectedCalls, nncExtSVCSigStatsPrevShortTxCalledPtyEvents=nncExtSVCSigStatsPrevShortTxCalledPtyEvents, nncExtSVCSigStatsPrevShortInTransitedCalls=nncExtSVCSigStatsPrevShortInTransitedCalls, nncExtSVCSigStatsCurrLongOutCGNSelectiveCalls=nncExtSVCSigStatsCurrLongOutCGNSelectiveCalls, nncExtSVCSigStatsRawTxTimerExpiration=nncExtSVCSigStatsRawTxTimerExpiration, NncExtTimerExpirationType=NncExtTimerExpirationType, nncExtSVCSigStatsCurrShortOutCGNSelectiveCalls=nncExtSVCSigStatsCurrShortOutCGNSelectiveCalls, nncExtSVCSigStatsPrevShortOutTransitedCalls=nncExtSVCSigStatsPrevShortOutTransitedCalls, nncExtSVCSigStatsRawOutCGNSelectiveCalls=nncExtSVCSigStatsRawOutCGNSelectiveCalls, nncExtSVCSigStatsCurrShortTxOtherCauses=nncExtSVCSigStatsCurrShortTxOtherCauses, nncExtSVCSigStatsCurrShortTxInvalidMessage=nncExtSVCSigStatsCurrShortTxInvalidMessage, nncExtSVCSigStatsCurrShortRxRoutingFailure=nncExtSVCSigStatsCurrShortRxRoutingFailure, nncExtSVCSigStatsObjects=nncExtSVCSigStatsObjects, nncExtSVCSigStatsCurrLongTxInvalidMessage=nncExtSVCSigStatsCurrLongTxInvalidMessage, nncExtSVCSigStatsPrevShortGroup=nncExtSVCSigStatsPrevShortGroup, nncExtSVCSigStatsCurrLongRxResUnavailable=nncExtSVCSigStatsCurrLongRxResUnavailable, nncExtSVCSigStatsPrevShortAbsIntvlNumber=nncExtSVCSigStatsPrevShortAbsIntvlNumber, NncExtConnectedCallsType=NncExtConnectedCallsType, nncExtSVCSigStatsRawTxCalledPtyEvents=nncExtSVCSigStatsRawTxCalledPtyEvents, nncExtSVCSigStatsCurrShortRxCallingPtyEvents=nncExtSVCSigStatsCurrShortRxCallingPtyEvents, nncExtSVCSigStatsRawGroup=nncExtSVCSigStatsRawGroup, nncExtSVCSigStatsCurrLongIntvlDuration=nncExtSVCSigStatsCurrLongIntvlDuration, NncExtRoutingFailureType=NncExtRoutingFailureType, nncExtSVCSigStatsCurrLongOutCDNSelectiveCalls=nncExtSVCSigStatsCurrLongOutCDNSelectiveCalls, nncExtSVCSigStatsCurrShortInCDNSelectiveCalls=nncExtSVCSigStatsCurrShortInCDNSelectiveCalls, nncExtSVCSigStatsCurrLongRxCallingPtyEvents=nncExtSVCSigStatsCurrLongRxCallingPtyEvents, nncExtSVCSigStatsCurrShortTxNormalCallClr=nncExtSVCSigStatsCurrShortTxNormalCallClr, nncExtSVCSigStatsPrevShortOutConnectedCalls=nncExtSVCSigStatsPrevShortOutConnectedCalls, nncExtSVCSigStatsRawState=nncExtSVCSigStatsRawState, nncExtSVCSigStatsPrevLongAbsIntvlNumber=nncExtSVCSigStatsPrevLongAbsIntvlNumber, nncExtSVCSigStatsPrevLongTxInvalidMessage=nncExtSVCSigStatsPrevLongTxInvalidMessage, nncExtSVCSigStatsCurrShortTxCallingPtyEvents=nncExtSVCSigStatsCurrShortTxCallingPtyEvents, nncExtSVCSigStatsCurrLongRxInvalidMessage=nncExtSVCSigStatsCurrLongRxInvalidMessage, nncExtSVCSigStatsPrevShortInCGNSelectiveCalls=nncExtSVCSigStatsPrevShortInCGNSelectiveCalls, nncExtSVCSigStatsRawRxCallingPtyEvents=nncExtSVCSigStatsRawRxCallingPtyEvents, nncExtSVCSigStatsPrevLongIntvlDuration=nncExtSVCSigStatsPrevLongIntvlDuration, nncExtSVCSigStatsPrevShortRxResUnavailable=nncExtSVCSigStatsPrevShortRxResUnavailable, nncExtSVCSigStatsPrevLongRxNormalCallClr=nncExtSVCSigStatsPrevLongRxNormalCallClr, nncExtSVCSigStatsPrevLongInSetupAttempts=nncExtSVCSigStatsPrevLongInSetupAttempts, nncExtSVCSigStatsPrevLongOutTransitedCalls=nncExtSVCSigStatsPrevLongOutTransitedCalls, nncExtSVCSigStatsCurrLongRxCalledPtyEvents=nncExtSVCSigStatsCurrLongRxCalledPtyEvents, nncExtSVCSigStatsPrevLongOutCDNSelectiveCalls=nncExtSVCSigStatsPrevLongOutCDNSelectiveCalls, nncExtSVCSigStatsRawOutSetupAttempts=nncExtSVCSigStatsRawOutSetupAttempts, nncExtSVCSigStatsPrevLongScreeningFailures=nncExtSVCSigStatsPrevLongScreeningFailures, nncExtSVCSigStatsCurrLongTable=nncExtSVCSigStatsCurrLongTable, nncExtSVCSigStatsCurrLongTxCalledPtyEvents=nncExtSVCSigStatsCurrLongTxCalledPtyEvents, nncExtSVCSigStatsPrevLongTable=nncExtSVCSigStatsPrevLongTable, nncExtSVCSigStats=nncExtSVCSigStats, NncExtTransitedCallsType=NncExtTransitedCallsType, nncExtSVCSigStatsPrevShortTxRoutingFailure=nncExtSVCSigStatsPrevShortTxRoutingFailure, nncExtSVCSigStatsPrevLongRxRoutingFailure=nncExtSVCSigStatsPrevLongRxRoutingFailure, nncExtSVCSigStatsPrevLongRxTimerExpiration=nncExtSVCSigStatsPrevLongRxTimerExpiration, nncExtSVCSigStatsRawRxNormalCallClr=nncExtSVCSigStatsRawRxNormalCallClr, nncExtSVCSigStatsCurrShortTxRoutingFailure=nncExtSVCSigStatsCurrShortTxRoutingFailure, nncExtSVCSigStatsCurrShortRxCalledPtyEvents=nncExtSVCSigStatsCurrShortRxCalledPtyEvents, nncExtSVCSigStatsRawDuration=nncExtSVCSigStatsRawDuration, nncExtSVCSigStatsRawRxTimerExpiration=nncExtSVCSigStatsRawRxTimerExpiration, nncExtSVCSigStatsPrevShortRxCalledPtyEvents=nncExtSVCSigStatsPrevShortRxCalledPtyEvents, NncExtSelectiveCallsType=NncExtSelectiveCallsType, nncExtSVCSigStatsPrevShortRxOtherCauses=nncExtSVCSigStatsPrevShortRxOtherCauses, nncExtSVCSigStatsRawOutCDNSelectiveCalls=nncExtSVCSigStatsRawOutCDNSelectiveCalls, nncExtSVCSigStatsPrevLongIntvlNumber=nncExtSVCSigStatsPrevLongIntvlNumber, nncExtSVCSigStatsRawTxResUnavailable=nncExtSVCSigStatsRawTxResUnavailable, nncExtSVCSigStatsCurrShortGroup=nncExtSVCSigStatsCurrShortGroup, nncExtSVCSigStatsCurrShortRxOtherCauses=nncExtSVCSigStatsCurrShortRxOtherCauses, nncExtSVCSigStatsRawScreeningFailures=nncExtSVCSigStatsRawScreeningFailures, nncExtSVCSigStatsPrevLongOutCGNSelectiveCalls=nncExtSVCSigStatsPrevLongOutCGNSelectiveCalls, nncExtSVCSigStatsCurrLongGroup=nncExtSVCSigStatsCurrLongGroup, NncExtActiveCallsType=NncExtActiveCallsType, nncExtSVCSigStatsCurrLongIntvlState=nncExtSVCSigStatsCurrLongIntvlState, nncExtSVCSigStatsRawTxOtherCauses=nncExtSVCSigStatsRawTxOtherCauses, nncExtSVCSigStatsPrevShortIntvlState=nncExtSVCSigStatsPrevShortIntvlState, nncExtSVCSigStatsRawInCDNSelectiveCalls=nncExtSVCSigStatsRawInCDNSelectiveCalls, NncExtOtherCausesType=NncExtOtherCausesType, nncExtSVCSigStatsPrevShortRxRoutingFailure=nncExtSVCSigStatsPrevShortRxRoutingFailure, nncExtSVCSigStatsCurrShortOutSetupAttempts=nncExtSVCSigStatsCurrShortOutSetupAttempts, nncExtSVCSigStatsRawRxInvalidMessage=nncExtSVCSigStatsRawRxInvalidMessage, nncExtSVCSigStatsCurrLongInCDNSelectiveCalls=nncExtSVCSigStatsCurrLongInCDNSelectiveCalls, nncExtSVCSigStatsCurrShortRxTimerExpiration=nncExtSVCSigStatsCurrShortRxTimerExpiration, nncExtSVCSigStatsCurrLongTxTimerExpiration=nncExtSVCSigStatsCurrLongTxTimerExpiration, nncExtSVCSigStatsPrevShortIntvlStartTime=nncExtSVCSigStatsPrevShortIntvlStartTime, nncExtSVCSigStatsCurrShortRxResUnavailable=nncExtSVCSigStatsCurrShortRxResUnavailable, nncExtSVCSigStatsRawInTransitedCalls=nncExtSVCSigStatsRawInTransitedCalls, nncExtSVCSigStatsRawOutTransitedCalls=nncExtSVCSigStatsRawOutTransitedCalls, NncExtCalledPtyEventsType=NncExtCalledPtyEventsType, nncExtSVCSigStatsCurrShortInCGNSelectiveCalls=nncExtSVCSigStatsCurrShortInCGNSelectiveCalls, nncExtSVCSigStatsRawActiveCalls=nncExtSVCSigStatsRawActiveCalls, nncExtSVCSigStatsPrevLongEntry=nncExtSVCSigStatsPrevLongEntry, nncExtSVCSigStatsPrevShortTxOtherCauses=nncExtSVCSigStatsPrevShortTxOtherCauses, nncExtSVCSigStatsCompliances=nncExtSVCSigStatsCompliances, nncExtSVCSigStatsCurrLongInCGNSelectiveCalls=nncExtSVCSigStatsCurrLongInCGNSelectiveCalls, nncExtSVCSigStatsCurrShortInConnectedCalls=nncExtSVCSigStatsCurrShortInConnectedCalls, nncExtSVCSigStatsPrevLongOutConnectedCalls=nncExtSVCSigStatsPrevLongOutConnectedCalls, nncExtSVCSigStatsPrevLongTxCalledPtyEvents=nncExtSVCSigStatsPrevLongTxCalledPtyEvents, nncExtSVCSigStatsPrevLongTxRoutingFailure=nncExtSVCSigStatsPrevLongTxRoutingFailure, NncExtInvalidMessageType=NncExtInvalidMessageType, nncExtSVCSigStatsPrevShortRxNormalCallClr=nncExtSVCSigStatsPrevShortRxNormalCallClr, nncExtSVCSigStatsCurrLongTxOtherCauses=nncExtSVCSigStatsCurrLongTxOtherCauses, nncExtSVCSigStatsCurrLongRxRoutingFailure=nncExtSVCSigStatsCurrLongRxRoutingFailure, nncExtSVCSigStatsPrevShortIntvlNumber=nncExtSVCSigStatsPrevShortIntvlNumber, nncExtSVCSigStatsRawTxCallingPtyEvents=nncExtSVCSigStatsRawTxCallingPtyEvents, nncExtSVCSigStatsPrevLongRxCallingPtyEvents=nncExtSVCSigStatsPrevLongRxCallingPtyEvents, nncExtSVCSigStatsRawRxRoutingFailure=nncExtSVCSigStatsRawRxRoutingFailure, nncExtSVCSigStatsPrevLongRxResUnavailable=nncExtSVCSigStatsPrevLongRxResUnavailable, nncExtSVCSigStatsPrevLongIntvlState=nncExtSVCSigStatsPrevLongIntvlState, nncExtSVCSigStatsRawTxNormalCallClr=nncExtSVCSigStatsRawTxNormalCallClr, PYSNMP_MODULE_ID=nncExtSVCSigStats, nncExtSVCSigStatsCurrLongEntry=nncExtSVCSigStatsCurrLongEntry, nncExtSVCSigStatsCurrShortOutTransitedCalls=nncExtSVCSigStatsCurrShortOutTransitedCalls, nncExtSVCSigStatsPrevShortOutSetupAttempts=nncExtSVCSigStatsPrevShortOutSetupAttempts, nncExtSVCSigStatsPrevShortIntvlDuration=nncExtSVCSigStatsPrevShortIntvlDuration, nncExtSVCSigStatsRawRxResUnavailable=nncExtSVCSigStatsRawRxResUnavailable, NncExtResUnavailableType=NncExtResUnavailableType, nncExtSVCSigStatsPrevShortTxResUnavailable=nncExtSVCSigStatsPrevShortTxResUnavailable, nncExtSVCSigStatsPrevLongInCGNSelectiveCalls=nncExtSVCSigStatsPrevLongInCGNSelectiveCalls, nncExtSVCSigStatsTraps=nncExtSVCSigStatsTraps, nncExtSVCSigStatsCompliance=nncExtSVCSigStatsCompliance, nncExtSVCSigStatsPrevShortInConnectedCalls=nncExtSVCSigStatsPrevShortInConnectedCalls, nncExtSVCSigStatsCurrShortTxCalledPtyEvents=nncExtSVCSigStatsCurrShortTxCalledPtyEvents, nncExtSVCSigStatsPrevShortRxCallingPtyEvents=nncExtSVCSigStatsPrevShortRxCallingPtyEvents, nncExtSVCSigStatsPrevShortScreeningFailures=nncExtSVCSigStatsPrevShortScreeningFailures, nncExtSVCSigStatsCurrShortRxNormalCallClr=nncExtSVCSigStatsCurrShortRxNormalCallClr, nncExtSVCSigStatsCurrLongOutConnectedCalls=nncExtSVCSigStatsCurrLongOutConnectedCalls, nncExtSVCSigStatsCurrShortIntvlStartTime=nncExtSVCSigStatsCurrShortIntvlStartTime, nncExtSVCSigStatsCurrShortIntvlDuration=nncExtSVCSigStatsCurrShortIntvlDuration, nncExtSVCSigStatsCurrLongRxTimerExpiration=nncExtSVCSigStatsCurrLongRxTimerExpiration, nncExtSVCSigStatsRawStartTime=nncExtSVCSigStatsRawStartTime, nncExtSVCSigStatsPrevShortTxTimerExpiration=nncExtSVCSigStatsPrevShortTxTimerExpiration, NncExtScreeningFailuresType=NncExtScreeningFailuresType, nncExtSVCSigStatsPrevShortInSetupAttempts=nncExtSVCSigStatsPrevShortInSetupAttempts, nncExtSVCSigStatsCurrLongOutSetupAttempts=nncExtSVCSigStatsCurrLongOutSetupAttempts, nncExtSVCSigStatsPrevLongInTransitedCalls=nncExtSVCSigStatsPrevLongInTransitedCalls, nncExtSVCSigStatsCurrLongTxCallingPtyEvents=nncExtSVCSigStatsCurrLongTxCallingPtyEvents, nncExtSVCSigStatsGroups=nncExtSVCSigStatsGroups, NncExtNormalCallClrType=NncExtNormalCallClrType, NncExtSetupAttemptsType=NncExtSetupAttemptsType, nncExtSVCSigStatsCurrShortAbsIntvlNumber=nncExtSVCSigStatsCurrShortAbsIntvlNumber, nncExtSVCSigStatsPrevLongTxNormalCallClr=nncExtSVCSigStatsPrevLongTxNormalCallClr, nncExtSVCSigStatsPrevLongIntvlStartTime=nncExtSVCSigStatsPrevLongIntvlStartTime, nncExtSVCSigStatsRawOutConnectedCalls=nncExtSVCSigStatsRawOutConnectedCalls, nncExtSVCSigStatsRawEntry=nncExtSVCSigStatsRawEntry, nncExtSVCSigStatsPrevShortInCDNSelectiveCalls=nncExtSVCSigStatsPrevShortInCDNSelectiveCalls, nncExtSVCSigStatsCurrShortInSetupAttempts=nncExtSVCSigStatsCurrShortInSetupAttempts, nncExtSVCSigStatsCurrShortInTransitedCalls=nncExtSVCSigStatsCurrShortInTransitedCalls, nncExtSVCSigStatsRawRxCalledPtyEvents=nncExtSVCSigStatsRawRxCalledPtyEvents, nncExtSVCSigStatsCurrLongTxResUnavailable=nncExtSVCSigStatsCurrLongTxResUnavailable, nncExtSVCSigStatsCurrLongScreeningFailures=nncExtSVCSigStatsCurrLongScreeningFailures, nncExtSVCSigStatsCurrShortTable=nncExtSVCSigStatsCurrShortTable, nncExtSVCSigStatsCurrLongAbsIntvlNumber=nncExtSVCSigStatsCurrLongAbsIntvlNumber, nncExtSVCSigStatsCurrShortTxResUnavailable=nncExtSVCSigStatsCurrShortTxResUnavailable, nncExtSVCSigStatsCurrShortEntry=nncExtSVCSigStatsCurrShortEntry, nncExtSVCSigStatsCurrShortOutConnectedCalls=nncExtSVCSigStatsCurrShortOutConnectedCalls, nncExtSVCSigStatsCurrLongIntvlStartTime=nncExtSVCSigStatsCurrLongIntvlStartTime, nncExtSVCSigStatsPrevLongOutSetupAttempts=nncExtSVCSigStatsPrevLongOutSetupAttempts, nncExtSVCSigStatsPrevLongTxResUnavailable=nncExtSVCSigStatsPrevLongTxResUnavailable, nncExtSVCSigStatsCurrLongInSetupAttempts=nncExtSVCSigStatsCurrLongInSetupAttempts, nncExtSVCSigStatsPrevLongTxTimerExpiration=nncExtSVCSigStatsPrevLongTxTimerExpiration, nncExtSVCSigStatsPrevLongRxOtherCauses=nncExtSVCSigStatsPrevLongRxOtherCauses, nncExtSVCSigStatsPrevLongRxCalledPtyEvents=nncExtSVCSigStatsPrevLongRxCalledPtyEvents, nncExtSVCSigStatsPrevShortTxNormalCallClr=nncExtSVCSigStatsPrevShortTxNormalCallClr, nncExtSVCSigStatsPrevShortTxCallingPtyEvents=nncExtSVCSigStatsPrevShortTxCallingPtyEvents)
