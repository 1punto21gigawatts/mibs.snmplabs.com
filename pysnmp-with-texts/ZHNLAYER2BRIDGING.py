#
# PySNMP MIB module ZHNLAYER2BRIDGING (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNLAYER2BRIDGING
# Produced by pysmi-0.3.4 at Wed May  1 15:46:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, enterprises, IpAddress, Bits, Counter32, Counter64, Gauge32, NotificationType, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "enterprises", "IpAddress", "Bits", "Counter32", "Counter64", "Gauge32", "NotificationType", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks")
MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhnLayer2Bridging = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42))
zhnLayer2Bridging.setRevisions(('2012-07-11 12:00', '2012-06-21 12:00', '2012-06-05 12:00', '2012-05-16 12:00', '2012-01-26 12:00', '2011-01-11 00:00', '2010-08-10 00:00', '2010-04-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhnLayer2Bridging.setRevisionsDescriptions(('Changed vlanIDType to read-only', 'Moved OMCI from VlanTypeValues to VlanIDType', 'Updated VlanTypeValues', 'Renamed filterTable to filterBridgeTable', 'Added layer2BridgingGlobalObjects', 'General file cleanup and fixed MIB compilation errors.', 'Removed pppoeEnabledUplink object from BridgeTable.', 'First Draft',))
if mibBuilder.loadTexts: zhnLayer2Bridging.setLastUpdated('201207111200Z')
if mibBuilder.loadTexts: zhnLayer2Bridging.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhnLayer2Bridging.setContactInfo('Zhone Technologies, Inc. Florida Design Center 8545 126th Avenue North Largo, FL 33773 Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhnLayer2Bridging.setDescription('This file defines the private Enterprise MIB extensions that define Layer 2 Bridging objects supported by the Zhone VoIP CPEs. ')
layer2BridgingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1))
class BridgeEntryStatusValues(TextualConvention, OctetString):
    description = 'Status of an entry in the bridge, filter or marking tables. List of supported strings: Disabled Enabled Error '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class VlanTypeValues(TextualConvention, OctetString):
    description = 'Type of VLAN associated with a bridge table entry. List of supported strings: Unknown Bridged Routed TLS-Bridged PPPoE_Routed PPPoE_Bridged BRouted PWE-Bridged '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class VlanSecureType(TextualConvention, OctetString):
    description = 'Secure setting for a VLAN associated with a bridge table entry. List of supported strings: Disable - indicates traffic will be bridged normally. Enable - indicates all outgoing traffic will be forced out the uplink. Unknown - indicates the secure settined has not been configured. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class VlanIDType(TextualConvention, OctetString):
    description = 'Type of VLAN port membership. List of supported strings: Unknown - indicates the port membership has not been configured. Untagged - indicates the frame leaving the device has no VLAN tag. Tagged - indicates the frame leaving the device has one VLAN tag. S-TAG - indicates the frame leaving the device has a service VLAN tag or a Service VLAN tag and a customer VLAN tag. TLS - indicates the frame leaving the device may have a customer VLAN tag or no VLAN tag. OMCI - indicates the frame leaving the device on the provised the GEM Port. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class BridgingIntfTypeValues(TextualConvention, OctetString):
    description = 'Type of LAN/WAN connection for the interface. List of supported strings: lanInterface wanInterface lanRouterConnection wanRouterConnection '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class VlanTLSMode(TextualConvention, Integer32):
    description = 'Transparent LAN Service Mode. Enumeration of: sTag - S-TAG mode. All traffic must be encapsulated within a configured S-Tag. Untagged or single-tagged traffic can be S-tagged upon LAN port ingress based on the configured Port Defaults. unknown - not defined normal - All traffic must be encapsulated within a configured VLAN tag. Untagged traffic can be tagged upon LAN port ingress based on the configured Port Defaults. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("sTag", 1), ("unknown", 2), ("normal", 3))

class VlanTLSServiceTags(TextualConvention, Integer32):
    description = 'Transparent Service Tags. Enumeration of: none sTag8100 sTag88A8 sTag9100 sTag9200 sTag9300 '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("sTag8100", 2), ("sTag88A8", 3), ("sTag9100", 4), ("sTag9200", 5), ("sTag9300", 6))

class VlanQOSMethods(TextualConvention, Integer32):
    description = 'Quality of Service Method. Enumeration of: layer2 - Layer 2 VLAN COS method will check the COS bits in the Ethernet Packet to define the QOS. layer3 - Layer 3 IP Precedence method will check the DSCP field in the IP header to determine priority of the packet. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("layer2", 1), ("layer3", 2))

maxBridgeEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBridgeEntries.setStatus('current')
if mibBuilder.loadTexts: maxBridgeEntries.setDescription('The maximum number of entries available in the Bridge table.')
maxFilterEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxFilterEntries.setStatus('current')
if mibBuilder.loadTexts: maxFilterEntries.setDescription('The maximum number of entries available in the Filter table.')
maxMarkingEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxMarkingEntries.setStatus('current')
if mibBuilder.loadTexts: maxMarkingEntries.setDescription('The maximum number of entries available in the Marking table.')
bridgeNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: bridgeNumberOfEntries.setDescription('Number of entries in the Bridge table.')
filterNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: filterNumberOfEntries.setDescription('Number of entries in the Filter table.')
markingNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markingNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: markingNumberOfEntries.setDescription('Number of entries in the Marking table.')
availableInterfaceNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableInterfaceNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: availableInterfaceNumberOfEntries.setDescription('Number of entries in the AvailableInterfaces table.')
bridgeTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8), )
if mibBuilder.loadTexts: bridgeTable.setStatus('current')
if mibBuilder.loadTexts: bridgeTable.setDescription('Bridge Table.')
bridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1), ).setIndexNames((0, "ZHNLAYER2BRIDGING", "bridgeKey"))
if mibBuilder.loadTexts: bridgeEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntry.setDescription('Bridge Table.')
bridgeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeKey.setStatus('current')
if mibBuilder.loadTexts: bridgeKey.setDescription('Unique key for each Bridge table entry.')
bridgeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEnable.setStatus('current')
if mibBuilder.loadTexts: bridgeEnable.setDescription('Enables or disables this Bridge table entry.')
bridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 3), BridgeEntryStatusValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeStatus.setDescription('The status of the bridge table entry. Enumeration of: Disabled Enabled Error ')
bridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeName.setStatus('current')
if mibBuilder.loadTexts: bridgeName.setDescription('Human-readable name for this Bridge table entry.')
vlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanID.setStatus('current')
if mibBuilder.loadTexts: vlanID.setDescription('The 802.1Q VLAN ID associated with this Bridge entry. A value of 0 indicates either Untagged or PriorityOnly tagging, which are treated identically.')
vlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 6), VlanTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanType.setStatus('current')
if mibBuilder.loadTexts: vlanType.setDescription('The type of 802.1Q VLAN associated with this Bridge entry. Enumeration of: Unknown Bridged Routed TlsBridged PppoeRouted PppoeBridged BRouted PWEBridged CPU-Bridged ')
secureVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 7), VlanSecureType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secureVlan.setStatus('current')
if mibBuilder.loadTexts: secureVlan.setDescription('Secure setting for a VLAN associated with a bridge table entry. Enumeration of: disable enable unknown ')
bridgeTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 8, 1, 8), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeTableRowStatus.setDescription('The SNMP RowStatus of the current row. The following objects must be specified upon row creation: vlanID vlanType bridgeName ')
filterBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9), )
if mibBuilder.loadTexts: filterBridgeTable.setStatus('current')
if mibBuilder.loadTexts: filterBridgeTable.setDescription('Filter table containing filter entries each of which is associated with one Bridge as specified by a Bridge table entry. ')
filterBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1), ).setIndexNames((0, "ZHNLAYER2BRIDGING", "filterKey"), (0, "ZHNLAYER2BRIDGING", "filterBridgeReference"))
if mibBuilder.loadTexts: filterBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: filterBridgeEntry.setDescription('Bridge Filter Table.')
filterKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterKey.setStatus('current')
if mibBuilder.loadTexts: filterKey.setDescription('Unique key for each Bridge Filter table entry.')
filterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterEnable.setStatus('current')
if mibBuilder.loadTexts: filterEnable.setDescription('Enables or disables this Filter table entry.')
zhnFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 3), BridgeEntryStatusValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnFilterStatus.setStatus('current')
if mibBuilder.loadTexts: zhnFilterStatus.setDescription('The status of this Filter table entry. Enumeration of: Disabled Enabled Error ')
filterBridgeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterBridgeReference.setStatus('current')
if mibBuilder.loadTexts: filterBridgeReference.setDescription('The BridgeKey value of the Bridge table entry associated with this Filter. ')
filterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterInterface.setStatus('current')
if mibBuilder.loadTexts: filterInterface.setDescription('The interface or interfaces associated with this Filter table entry. The bridge corresponding to this Filter table entry is defined to admit packets on ingress to the bridge from the specified interfaces that meet all of the criteria specified in the Filter table entry. The following values are defined. - To associate this Filter with a single interface listed in the AvailableInterface table, the Filter Interface value is set to the value of corresponding AvailableInterfaceKey. - AllInterfaces indicates that this Filter is associated with all LAN and WAN interfaces listed in the AvailableInterface table (all entries of InterfaceType LANInterface or WANInterface). - LANInterfaces indicates that this Filter is associated with all LAN interfaces listed in the AvailableInterface table (all entries of InterfaceType LANInterface). - WANInterfaces indicates that this Filter is associated with all WAN interfaces listed in the AvailableInterface table (all entries of InterfaceType WANInterface). - An empty string indicates the Filter table entry is not associated with any interface (and has no effect). ')
sourceMACFromVendorClassIDFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceMACFromVendorClassIDFilter.setStatus('current')
if mibBuilder.loadTexts: sourceMACFromVendorClassIDFilter.setDescription('A string used to identify one or more devices via DHCP for which MAC address filtering would subsequently apply. A device is considered matching if it its DHCP Vendor Class Identifier (Option 60 as defined in RFC 2132) in the most recent DHCP lease acquisition or renewal was equal to the specified value. ')
sourceMACFromVendorClassIDFilterExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceMACFromVendorClassIDFilterExclude.setStatus('current')
if mibBuilder.loadTexts: sourceMACFromVendorClassIDFilterExclude.setDescription('If false, on ingress to the interfaces associated with this Filter, the Bridge admits only those packets whose source MAC Address matches that of a LAN device previously identified as described in SourceMACFromVendorClassIDFilter. - If SourceMACFromVendorClassIDFilter is empty, no packets are admitted. - If SourceMACFromVendorClassIDFilter is true on ingress to the interfaces associated with this Filter, the Bridge admits all packets except those packets whose source MAC Address matches that of a LAN device previously identified as described in SourceMACFromVendorClassIDFilter. - If the SourceMACFromVendorClassIDFilter is empty, packets are admitted regardless of MAC address. ')
bridgeFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 9, 1, 8), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeFilterRowStatus.setDescription('The SNMP RowStatus of the current row. The following objects must be specified upon row creation: filterBridgeReference ')
markingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10), )
if mibBuilder.loadTexts: markingTable.setStatus('current')
if mibBuilder.loadTexts: markingTable.setDescription('Marking table identifies non-default layer-2 marking behavior for packets on egress from the specified interfaces. ')
markingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1), ).setIndexNames((0, "ZHNLAYER2BRIDGING", "markingKey"), (0, "ZHNLAYER2BRIDGING", "markingBridgeReference"))
if mibBuilder.loadTexts: markingEntry.setStatus('current')
if mibBuilder.loadTexts: markingEntry.setDescription('Marking table identifies non-default layer-2 marking behavior for packets on egress from the specified interfaces. ')
markingKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: markingKey.setStatus('current')
if mibBuilder.loadTexts: markingKey.setDescription('Unique key for each Bridge Marking table entry.')
markingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: markingEnable.setStatus('current')
if mibBuilder.loadTexts: markingEnable.setDescription('Enables or disables this Marking table entry.')
markingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 3), BridgeEntryStatusValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markingStatus.setStatus('current')
if mibBuilder.loadTexts: markingStatus.setDescription('The status of this Marking table entry. Enumeration of: Disabled Enabled Error ')
markingBridgeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markingBridgeReference.setStatus('current')
if mibBuilder.loadTexts: markingBridgeReference.setDescription('The BridgeKey value of the Bridge table entry associated with this Marking. The effect of a Marking table entry applies only to packets that have been admitted to the specified bridge (regardless of the ingress interface). ')
markingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: markingInterface.setStatus('current')
if mibBuilder.loadTexts: markingInterface.setDescription('The interface or interfaces associated with this Marking table entry. The bridge corresponding to this Marking table entry is defined to admit packets on ingress to the bridge from the specified interfaces that meet all of the criteria specified in the Marking table entry. The following values are defined. - To associate this Marking with a single interface listed in the AvailableInterface table, the Marking Interface value is set to the value of corresponding AvailableInterfaceKey. - AllInterfaces indicates that this Marking is associated with all LAN and WAN interfaces listed in the AvailableInterface table (all entries of InterfaceType LANInterface or WANInterface). - LANInterfaces indicates that this Marking is associated with all LAN interfaces listed in the AvailableInterface table (all entries of InterfaceType LANInterface). - WANInterfaces indicates that this Marking is associated with all WAN interfaces listed in the AvailableInterface table (all entries of InterfaceType WANInterface). - An empty string indicates the Marking table entry is not associated with any interface (and has no effect). If there is more than one enabled Marking table entry that specifies one or more of the same interfaces for the same bridge (i.e. identical values of MarkingBridgeReference), then for packets on egress from the specified bridge to those interfaces, the applied marking MUST be that specified in the Marking table entry among those in conflict with the lowest MarkingKey value. If an interface in a given bridge does not have a corresponding Marking table entry, the marking is left unchanged on egress. ')
vlanIDUntag = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIDUntag.setStatus('current')
if mibBuilder.loadTexts: vlanIDUntag.setDescription('If true, on egress to the interfaces associated with this Marking table entry, all packets are Untagged. That is, the VLAN tag is stripped from the packet. If false, on egress to the interfaces associated with this Marking table entry, all VLAN tags are left intact (including those added on ingress). ')
vlanIDMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIDMark.setStatus('current')
if mibBuilder.loadTexts: vlanIDMark.setDescription('The 802.1Q VLAN ID to be used on egress to the interfaces associated with this Marking table entry (if VLANIDUntag is false). A value of -1 indicates that the default VLAN ID for the Bridge should be used instead (as specified by InternetGatewayDevice.Layer2Bridging.Bridge.{i}.vlanID for the Bridge table entry associated with this Marking table entry). ')
ethernetPriorityMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPriorityMark.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityMark.setDescription('Ethernet priority code (as defined in 802.1D) to mark traffic with that falls into this Bridge on egress to the interfaces associated with this Marking table entry. A value of -1 indicates no change from the incoming packet or the mark assigned by the classifier. ')
ethernetPriorityOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPriorityOverride.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityOverride.setDescription('If false, on egress to the interfaces associated with this Marking table entry, the EthernetPriorityMark, if specified, is applied only to packets of priority 0. If true, on egress to the interfaces associated with this Marking table entry, the EthernetPriorityMark, if specified, is to be applied to all packets on Bridge. If VLANIDUntag is true, then no priority marking is done since the tag containing the Ethernet priority is removed. ')
vlanIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 10), VlanIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIDType.setStatus('current')
if mibBuilder.loadTexts: vlanIDType.setDescription('This parameter specifies the port VLAN membership type. The supported VLAN membership types are: Tagged - The frame leaving the device has one VLAN tag. Untagged - The frame leaving the device has no VLAN tag. S-TAG - The frame leaving the device has a service VLAN tag or a Service VLAN tag and a customer VLAN tag. TLS - The frame leaving the device may have a customer VLAN tag or no VLAN tag. OMCI - The frame leaves the device on the provised the GEM Port. ')
bridgeMarkingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 10, 1, 11), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeMarkingRowStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeMarkingRowStatus.setDescription('The SNMP RowStatus of the current row. ')
availableInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 11), )
if mibBuilder.loadTexts: availableInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: availableInterfaceTable.setDescription('Table containing all LAN and WAN interfaces that are available to be referenced by the Bridge table. Only interfaces that can carry layer-2 bridged traffic are included. ')
availableInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 11, 1), ).setIndexNames((0, "ZHNLAYER2BRIDGING", "availableInterfaceKey"))
if mibBuilder.loadTexts: availableInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: availableInterfaceEntry.setDescription('Table containing all LAN and WAN interfaces that are available to be referenced by the Bridge table. Only interfaces that can carry layer-2 bridged traffic are included. ')
availableInterfaceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: availableInterfaceKey.setStatus('current')
if mibBuilder.loadTexts: availableInterfaceKey.setDescription('Unique key for each interface entry.')
interfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 11, 1, 2), BridgingIntfTypeValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceType.setStatus('current')
if mibBuilder.loadTexts: interfaceType.setDescription('Indicates whether the interface is a LAN-side or WAN-side interface, or a LAN-side or WAN-side connection to the Gateway. ')
interfaceReference = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceReference.setStatus('current')
if mibBuilder.loadTexts: interfaceReference.setDescription("This table should contain a single entry for each available LAN and WAN interface. For a WAN interface, this parameter is the full hierarchical parameter name of a particular WANConnectionDevice. A WANConnectionDevice is considered available (included in this table) only if it supports layer-2 bridged traffic. That is, this table MUST include only WANConnectionDevices that contain either a WANEthernetLinkConfig object, or that contain a WANDSLLinkConfig object for which the LinkType is EoA (Ethernet over ATM). For example: InternetGatewayDevice.WANDevice.1.WANConnectionDevice.2 For a LAN interface, this parameter is the full hierarchical parameter name of a particular LAN InterfaceConfig object, or a WLANConfiguration object. This table SHOULD include one entry for each such object. For example: InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.2 For a WAN-side connection to the Gateway's IP router, this parameter is the full hierarchical parameter name of a particular WANConnection service. This table SHOULD include an entry for each layer-3 WAN connection. For example: InternetGatewayDevice.WANDevice.1.WANConnectionDevice.2.WANPPPConnection.1 For a LAN-side connection to the Gateway's IP router, this parameter is the full hierarchical parameter name of a particular LANDevice. This table SHOULD include an entry for each LANDevice, each of which is associated with a LAN-side layer-3 connection to the Gateway's IP router. For example: InternetGatewayDevice.LANDevice.2 ")
availableInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 11, 1, 4), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: availableInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: availableInterfaceRowStatus.setDescription('The SNMP RowStatus of the current row.')
vlanPortMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 12), )
if mibBuilder.loadTexts: vlanPortMembershipTable.setStatus('current')
if mibBuilder.loadTexts: vlanPortMembershipTable.setDescription('Layer 2 VLAN Port Membership Table.')
vlanPortMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHNLAYER2BRIDGING", "vlanPortVlanID"))
if mibBuilder.loadTexts: vlanPortMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPortMembershipEntry.setDescription('Layer 2 VLAN Port Membership Table.')
vlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 12, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPort.setStatus('current')
if mibBuilder.loadTexts: vlanPort.setDescription('Bridge interface(port) name.')
vlanPortVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 12, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortVlanID.setStatus('current')
if mibBuilder.loadTexts: vlanPortVlanID.setDescription('The 802.1Q VLAN ID associated with this Bridge entry.')
vlanPortMembershipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 12, 1, 3), VlanIDType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMembershipType.setStatus('current')
if mibBuilder.loadTexts: vlanPortMembershipType.setDescription('This parameter specifies the port VLAN membership type. When creating a new Vlan Port Member Entry, the supported VLAN membership types are: Tagged - The frame leaving the device has one VLAN tag. Untagged - The frame leaving the device has no VLAN tag. S-TAG - The frame leaving the device has a service VLAN tag or a Service VLAN tag and a customer VLAN tag. TLS - The frame leaving the device may have a customer VLAN tag or no VLAN tag. OMCI - The frame leaving the device is on the provisioned GEM Port. ')
vlanPortMembershipAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 12, 1, 4), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMembershipAction.setStatus('current')
if mibBuilder.loadTexts: vlanPortMembershipAction.setDescription('The SNMP RowStatus of the current row.')
layer2BridgingGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 13))
vlanTLSMode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 13, 1), VlanTLSMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTLSMode.setStatus('current')
if mibBuilder.loadTexts: vlanTLSMode.setDescription(" This object implements transparent LAN service (TLS) by using a S-Tag (Service Provider tag) to tunnel the customer traffic over a service provider network. The CPE can operate in normal or S-Tag mode. In normal mode, CPE device operates according to the IEEE 802.1Q or 802.1D specifications. In S-TAG mode, the CPE device operates as follows: 1) The CPE's TPID (tag protocol ID) must be provisioned. 2) A S-Tag frame consists of a VLAN ID and a TPID that matches the CPE's provisioned TPID. 3) When the CPE adds a S-TAG, the S-Tag's VLAN ID will be taken from the CPE's default PVID and the TPID will be taken from the CPE's provisioned TPID. 4) The CPE device supports a TLS-Bridge. The ports on this bridge can be either S-TAG or TLS members. S-Tag port - The input frames from the service provider port may or may not have a S-TAG. The CPE will compare the tagged frame's TPID against the provisioned S-TAG TPID. If there is a match, the CPE will bridge the frame based on the VLAN ID in the S-Tag. If there is not a match, the frame is forwarded to the CPU. TLS port - The CPE will add a S-Tag to all input frames from this port regardless of whether the frames have a 802.1Q tag or not. The CPE will bridge the frames based on the VLAN ID in the S-Tag. Only a VLAN-tagged or untagged frames are expected from the ingress of a TLS (customer) port. ")
vlanServiceTagTPID = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 13, 2), VlanTLSServiceTags()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanServiceTagTPID.setStatus('current')
if mibBuilder.loadTexts: vlanServiceTagTPID.setDescription(" This object specifies the TPID (Tag Protocol ID) of the S-Tag. It is only used when the device's VlanMode is set to S-Tag. The supported Service TPIDs are: none sTag8100 sTag88A8 sTag9100 sTag9200 sTag9300 ")
vlanRouteAcrossVlans = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 13, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanRouteAcrossVlans.setStatus('current')
if mibBuilder.loadTexts: vlanRouteAcrossVlans.setDescription(' This object defines the VLAN router operation. If this object is set to TRUE, the router will route between IP subnets across VLANs. Route table lookups will ignore the VLAN ID of the ingress and egress ports. If there is a match, the packet is routed out the interface specified in the Route Table, regardless of the VLAN with which it is a member. If set to FALSE, the router will only route between IP subnets that are on the same VLAN. Packets will be forwarded to the configured Default Route for the VLAN that they arrived on, unless there is a Route Table match within that same VLAN. Routing of packets across VLANs is prevented, providing traffic isolation. ')
vlanQOSMethod = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 1, 13, 4), VlanQOSMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanQOSMethod.setStatus('current')
if mibBuilder.loadTexts: vlanQOSMethod.setDescription(' This object defines the VLAN router operation. If this object is set to TRUE, the router will route between IP subnets across VLANs. If it is set to FALSE, the router will only route between IP subnets that are on the same VLAN. ')
zhnLayer2BridgeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2))
zhnLayer2BridgeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1))
zhnLayer2BridgeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 2))
zhnLayer2BridgeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 2, 1)).setObjects(("ZHNLAYER2BRIDGING", "zhnBridgeGroup"), ("ZHNLAYER2BRIDGING", "zhnBridgeTableGroup"), ("ZHNLAYER2BRIDGING", "zhnBridgeMarkingTableGroup"), ("ZHNLAYER2BRIDGING", "zhnBridgeAvailableInterfaceGroup"), ("ZHNLAYER2BRIDGING", "zhnPortMembershipGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLayer2BridgeCompliance = zhnLayer2BridgeCompliance.setStatus('current')
if mibBuilder.loadTexts: zhnLayer2BridgeCompliance.setDescription('The Compliance statement for SNMP entities which manage display the Zhone CPE Layer Bridging Information. The Layer 2 Bridging filterBridgeTable is not required to be supported. If it is supported, not all objects defined as read-write are required to be writable. ')
zhnBridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1, 1)).setObjects(("ZHNLAYER2BRIDGING", "maxBridgeEntries"), ("ZHNLAYER2BRIDGING", "maxFilterEntries"), ("ZHNLAYER2BRIDGING", "maxMarkingEntries"), ("ZHNLAYER2BRIDGING", "bridgeNumberOfEntries"), ("ZHNLAYER2BRIDGING", "filterNumberOfEntries"), ("ZHNLAYER2BRIDGING", "markingNumberOfEntries"), ("ZHNLAYER2BRIDGING", "availableInterfaceNumberOfEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnBridgeGroup = zhnBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: zhnBridgeGroup.setDescription('A collection of Zhone Bridge table objects that describe the bridged interfaces of the device.')
zhnBridgeTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1, 2)).setObjects(("ZHNLAYER2BRIDGING", "bridgeKey"), ("ZHNLAYER2BRIDGING", "bridgeEnable"), ("ZHNLAYER2BRIDGING", "bridgeStatus"), ("ZHNLAYER2BRIDGING", "bridgeName"), ("ZHNLAYER2BRIDGING", "vlanID"), ("ZHNLAYER2BRIDGING", "vlanType"), ("ZHNLAYER2BRIDGING", "secureVlan"), ("ZHNLAYER2BRIDGING", "bridgeTableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnBridgeTableGroup = zhnBridgeTableGroup.setStatus('current')
if mibBuilder.loadTexts: zhnBridgeTableGroup.setDescription('A collection of Zhone Bridge table objects that describe the bridged interfaces of the device.')
zhnFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1, 3)).setObjects(("ZHNLAYER2BRIDGING", "filterKey"), ("ZHNLAYER2BRIDGING", "filterEnable"), ("ZHNLAYER2BRIDGING", "zhnFilterStatus"), ("ZHNLAYER2BRIDGING", "filterBridgeReference"), ("ZHNLAYER2BRIDGING", "filterInterface"), ("ZHNLAYER2BRIDGING", "sourceMACFromVendorClassIDFilter"), ("ZHNLAYER2BRIDGING", "sourceMACFromVendorClassIDFilterExclude"), ("ZHNLAYER2BRIDGING", "bridgeFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnFilterGroup = zhnFilterGroup.setStatus('current')
if mibBuilder.loadTexts: zhnFilterGroup.setDescription('A collection of Zhone Bridge Filter table objects that describe the filtering for bridged interfaces of the device.')
zhnBridgeMarkingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1, 4)).setObjects(("ZHNLAYER2BRIDGING", "markingKey"), ("ZHNLAYER2BRIDGING", "markingEnable"), ("ZHNLAYER2BRIDGING", "markingStatus"), ("ZHNLAYER2BRIDGING", "markingBridgeReference"), ("ZHNLAYER2BRIDGING", "markingInterface"), ("ZHNLAYER2BRIDGING", "vlanIDUntag"), ("ZHNLAYER2BRIDGING", "vlanIDMark"), ("ZHNLAYER2BRIDGING", "ethernetPriorityMark"), ("ZHNLAYER2BRIDGING", "ethernetPriorityOverride"), ("ZHNLAYER2BRIDGING", "vlanIDType"), ("ZHNLAYER2BRIDGING", "bridgeMarkingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnBridgeMarkingTableGroup = zhnBridgeMarkingTableGroup.setStatus('current')
if mibBuilder.loadTexts: zhnBridgeMarkingTableGroup.setDescription('A collection of Zhone Bridge Marking table objects that describe the VLAN marking for bridged interfaces of the device.')
zhnBridgeAvailableInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1, 5)).setObjects(("ZHNLAYER2BRIDGING", "availableInterfaceKey"), ("ZHNLAYER2BRIDGING", "interfaceType"), ("ZHNLAYER2BRIDGING", "interfaceReference"), ("ZHNLAYER2BRIDGING", "availableInterfaceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnBridgeAvailableInterfaceGroup = zhnBridgeAvailableInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: zhnBridgeAvailableInterfaceGroup.setDescription('A collection of Zhone Bridge Available Interface table objects that identify the available bridged interfaces of the device.')
zhnPortMembershipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1, 6)).setObjects(("ZHNLAYER2BRIDGING", "vlanPort"), ("ZHNLAYER2BRIDGING", "vlanPortVlanID"), ("ZHNLAYER2BRIDGING", "vlanPortMembershipType"), ("ZHNLAYER2BRIDGING", "vlanPortMembershipAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnPortMembershipGroup = zhnPortMembershipGroup.setStatus('current')
if mibBuilder.loadTexts: zhnPortMembershipGroup.setDescription('A collection of Zhone VLAN Port Membership table objects that map bridge ports to VLANs.')
zhnVlanGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 42, 2, 1, 7)).setObjects(("ZHNLAYER2BRIDGING", "vlanTLSMode"), ("ZHNLAYER2BRIDGING", "vlanServiceTagTPID"), ("ZHNLAYER2BRIDGING", "vlanRouteAcrossVlans"), ("ZHNLAYER2BRIDGING", "vlanQOSMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVlanGlobalGroup = zhnVlanGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVlanGlobalGroup.setDescription('A collection of Zhone VLAN Global scalar objects.')
mibBuilder.exportSymbols("ZHNLAYER2BRIDGING", filterBridgeEntry=filterBridgeEntry, zhnBridgeAvailableInterfaceGroup=zhnBridgeAvailableInterfaceGroup, VlanTypeValues=VlanTypeValues, BridgeEntryStatusValues=BridgeEntryStatusValues, vlanPortMembershipEntry=vlanPortMembershipEntry, bridgeStatus=bridgeStatus, vlanPortMembershipTable=vlanPortMembershipTable, filterEnable=filterEnable, vlanIDMark=vlanIDMark, layer2BridgingGlobalObjects=layer2BridgingGlobalObjects, VlanIDType=VlanIDType, bridgeNumberOfEntries=bridgeNumberOfEntries, bridgeEnable=bridgeEnable, bridgeKey=bridgeKey, zhnBridgeTableGroup=zhnBridgeTableGroup, vlanIDType=vlanIDType, PYSNMP_MODULE_ID=zhnLayer2Bridging, zhnVlanGlobalGroup=zhnVlanGlobalGroup, filterBridgeReference=filterBridgeReference, zhnFilterStatus=zhnFilterStatus, zhnLayer2Bridging=zhnLayer2Bridging, vlanServiceTagTPID=vlanServiceTagTPID, vlanIDUntag=vlanIDUntag, zhnFilterGroup=zhnFilterGroup, bridgeMarkingRowStatus=bridgeMarkingRowStatus, availableInterfaceNumberOfEntries=availableInterfaceNumberOfEntries, zhnLayer2BridgeConformance=zhnLayer2BridgeConformance, vlanRouteAcrossVlans=vlanRouteAcrossVlans, zhnLayer2BridgeCompliances=zhnLayer2BridgeCompliances, zhnLayer2BridgeCompliance=zhnLayer2BridgeCompliance, maxFilterEntries=maxFilterEntries, markingEntry=markingEntry, availableInterfaceKey=availableInterfaceKey, vlanQOSMethod=vlanQOSMethod, VlanTLSServiceTags=VlanTLSServiceTags, markingEnable=markingEnable, layer2BridgingObjects=layer2BridgingObjects, zhnBridgeGroup=zhnBridgeGroup, markingBridgeReference=markingBridgeReference, vlanTLSMode=vlanTLSMode, sourceMACFromVendorClassIDFilter=sourceMACFromVendorClassIDFilter, vlanPortMembershipAction=vlanPortMembershipAction, bridgeTableRowStatus=bridgeTableRowStatus, availableInterfaceRowStatus=availableInterfaceRowStatus, secureVlan=secureVlan, filterNumberOfEntries=filterNumberOfEntries, markingTable=markingTable, zhnPortMembershipGroup=zhnPortMembershipGroup, bridgeEntry=bridgeEntry, bridgeTable=bridgeTable, vlanPortMembershipType=vlanPortMembershipType, VlanTLSMode=VlanTLSMode, vlanType=vlanType, bridgeName=bridgeName, bridgeFilterRowStatus=bridgeFilterRowStatus, filterInterface=filterInterface, markingNumberOfEntries=markingNumberOfEntries, filterKey=filterKey, maxBridgeEntries=maxBridgeEntries, ethernetPriorityOverride=ethernetPriorityOverride, availableInterfaceEntry=availableInterfaceEntry, filterBridgeTable=filterBridgeTable, vlanPort=vlanPort, sourceMACFromVendorClassIDFilterExclude=sourceMACFromVendorClassIDFilterExclude, zhnBridgeMarkingTableGroup=zhnBridgeMarkingTableGroup, interfaceType=interfaceType, markingKey=markingKey, ethernetPriorityMark=ethernetPriorityMark, VlanQOSMethods=VlanQOSMethods, vlanPortVlanID=vlanPortVlanID, zhnLayer2BridgeGroups=zhnLayer2BridgeGroups, availableInterfaceTable=availableInterfaceTable, markingInterface=markingInterface, BridgingIntfTypeValues=BridgingIntfTypeValues, VlanSecureType=VlanSecureType, markingStatus=markingStatus, maxMarkingEntries=maxMarkingEntries, interfaceReference=interfaceReference, vlanID=vlanID)
