#
# PySNMP MIB module PROMINET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PROMINET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, NotificationType, enterprises, Bits, Counter32, ObjectIdentity, NotificationType, Gauge32, IpAddress, TimeTicks, Counter64, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "NotificationType", "enterprises", "Bits", "Counter32", "ObjectIdentity", "NotificationType", "Gauge32", "IpAddress", "TimeTicks", "Counter64", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention")
class EventValueType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("integer", 2), ("longInteger", 3), ("string", 4), ("octets", 5), ("ipAddress", 6), ("macAddress", 7), ("timeTicks", 8))

class ResourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("system", 1), ("module", 2), ("fan", 3), ("temperatureSensor", 4), ("interface", 5), ("powerSupply", 6), ("display", 7), ("switchPort", 8), ("bridge", 9), ("vlan", 10), ("aft", 11), ("inboundGroupTable", 12), ("outboundGroupTable", 13), ("threeComMappingTable", 14), ("event", 15), ("alarm", 16))

class ResourceId(ObjectIdentifier):
    pass

class DisplayString(OctetString):
    pass

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

class EventCategory(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("userDefined", 1), ("coldstart", 2), ("warmstart", 3), ("linkUp", 4), ("linkDown", 5), ("newResource", 6), ("deletedResource", 7), ("tempStatus", 8), ("configuration", 9), ("scheduled", 10), ("authentication", 11), ("system", 12), ("risingThreshold", 13), ("fallingThreshold", 14), ("fanStatus", 15), ("powerStatus", 16), ("status", 17), ("bridgeNewRoot", 18), ("bridgeTopChange", 19), ("switchFabricStatus", 20))

dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
gsEMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39))
ods = MibIdentifier((1, 3, 6, 1, 4, 1, 50))
odsTPS = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8))
odsLANBlazer = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8, 1))
odsLANBlazerMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8, 1, 2))
odsLANBlazer7000Mib = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8, 1, 2, 1))
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
mib2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6))
esGigaSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13))
marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 1012))
ethernetL3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1012, 81))
esrSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1012, 81, 1))
prominet = MibIdentifier((1, 3, 6, 1, 4, 1, 2167))
promAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1))
promAgentGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1, 1))
promAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: promAgentMIBVersion.setDescription('The version of the Lucent Cajun Switch MIB that this agent supports.')
promAgentMgrIndex = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAgentMgrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promAgentMgrIndex.setDescription('The value of this object represents the index into the community table that is used to authenticate SNMP requests for this manager.')
promAgentCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1, 2))
promCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1), )
if mibBuilder.loadTexts: promCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityTable.setDescription('')
promCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promCommunityIndex"))
if mibBuilder.loadTexts: promCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityEntry.setDescription('')
promCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promCommunityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityIndex.setDescription('An index that uniquely identifies this entry.')
promCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityString.setDescription('The community string included in the SNMP PDU used for authentication purposes.')
promCommunityAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any", 1), ("ipv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityAddressType.setDescription('The type of address associated with this community. If set to any(1), only the community string is authenticated.')
promCommunityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityAddress.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityAddress.setDescription('If the address type is any, then the value of this object is a null string. If the type is ipv4(2), then this value represents a 4 byte IP address.')
promCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("readOnly", 2), ("readWrite", 3), ("moreSpecific", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityAccess.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityAccess.setDescription('The MIB access supported for this community entry. A Get or GetNext SNMP PDU is authenticated if the value of this object is read-only(2) or read-write(3). A Set request will be honored if the value of this object is read-write(3). If more granular access control is desired, then the value of this object is set to more-specific(4), and the view table should be consulted. This enables the capability to set different access rights to different branches of the MIB for a particular community. ')
promCommunityTrapReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityTrapReceiver.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityTrapReceiver.setDescription('If set to enable(1), this community entry is considered a trap receiver. When the agent generates an SNMP trap, a copy will be sent to this host using this community string.')
promCommunitySecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("administrator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunitySecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunitySecurityLevel.setDescription('Secure tables are only accessible from users with security clearance. For example, this table (the community table) is only accessible by parties that have the security clearance.')
promCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promCommunityStatus.setDescription('')
promAgentWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1, 3))
promAgentWebServerURL = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promAgentWebServerURL.setStatus('mandatory')
if mibBuilder.loadTexts: promAgentWebServerURL.setDescription("The URL of where the document server software is installed. The switch uses this location to find online help and bimapped graphics. Enter the host name or IP address of the HTTP server at the HTTP Server Location prompt, followed by ':2010'. For example, for a host named 'phantom,', enter 'http://phantom:2010'. If no server is desired or installed, set this object to the empty string.")
promAgentWebServerHelpDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promAgentWebServerHelpDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: promAgentWebServerHelpDirectory.setDescription("The subdirectory that contains the help files on the document server. Typically, this directory is 'help'.")
promChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3))
promChassisGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 1))
promChassisType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("p550", 1), ("p220", 2), ("p660", 3), ("p880", 4), ("p580", 5), ("p882", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: promChassisType.setDescription('The model of the chassis that this agent is managing.')
promChassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promChassisSlots.setStatus('mandatory')
if mibBuilder.loadTexts: promChassisSlots.setDescription('The number of slots available in this chassis. If this chassis is a stackable chassis, the total capacity of stacking units.')
promChassisSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: promChassisSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: promChassisSystemReset.setDescription("A control to force the system into a reset state. Setting the value to 'reset' causes an immediate system reset. This object is only accessible from users with security clearance.")
promInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 2))
promInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1), )
if mibBuilder.loadTexts: promInventoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryTable.setDescription('A table of inventory information.')
promInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promInventoryResourceType"), (0, "PROMINET-MIB", "promInventoryResourceIndex"))
if mibBuilder.loadTexts: promInventoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryEntry.setDescription('Inventory information related to this device.')
promInventoryResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 1), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryResourceType.setDescription('The resource class of this inventory item.')
promInventoryResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryResourceIndex.setDescription('The resource identifier of this inventory item.')
promInventoryModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryModelNumber.setDescription('The model number of this device.')
promInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventorySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: promInventorySerialNumber.setDescription('The serial number of this device.')
promInventoryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryVersion.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryVersion.setDescription('The revision number of this device.')
promInventoryManufactureInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryManufactureInfo.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryManufactureInfo.setDescription('Information related to the manufacturing of this device.')
promInventoryScratchPad = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promInventoryScratchPad.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryScratchPad.setDescription('A scratch pad area available for keeping user-supplied inventory information. ')
promInventoryPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryPowerConsumption.setStatus('mandatory')
if mibBuilder.loadTexts: promInventoryPowerConsumption.setDescription('Power consumption ( in WATTS ) by the module.')
promPowerSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3))
promPowerSupplies = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1))
promPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1), )
if mibBuilder.loadTexts: promPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyTable.setDescription('A table of information related to each power supply in the system.')
promPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPowerSupplyIndex"))
if mibBuilder.loadTexts: promPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyEntry.setDescription('An entry providing information about a particular power supply in the system.')
promPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyIndex.setDescription('An index that uniquely identifies this power supply. This index corresponds to the promResourceIndex of the power supply type resource.')
promPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("psA", 2), ("psB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyType.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyType.setDescription('An enumerated integer describing the type of power supply. ')
promPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyStatus.setDescription('The status of this power supply. Okay(1) indicates the power supply is operating properly. Faulty(2) indicates that the power supply is not functioning properly. In this case, more information can be determined from the other power supply attributes.')
promPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyInputStatus.setDescription('The status of the input power feed (e.g. the AC power cord) to this power supply.')
promPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyOutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyOutputStatus.setDescription('The status of the output power from this power supply.')
promPowerSupplyOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyOutputCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerSupplyOutputCapacity.setDescription('The total capacity of power supplied by this supply in Watts.')
promPowerMgmtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3, 2))
promPowerCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerCapacity.setDescription('The total capacity (in Watts) of power available (currently) in the system.')
promPowerUsed = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerUsed.setStatus('mandatory')
if mibBuilder.loadTexts: promPowerUsed.setDescription('The total power (in Watts) currently being consumed in the system.')
promPowerMgmtCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3))
promPowerControlTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1), )
if mibBuilder.loadTexts: promPowerControlTable.setStatus('obsolete')
if mibBuilder.loadTexts: promPowerControlTable.setDescription('This table manages the power attributes associated with each module. This object is obsolete.It is not supported.')
promPowerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promModuleIndex"))
if mibBuilder.loadTexts: promPowerControlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: promPowerControlEntry.setDescription('An entry in the power control table manages the power attributes of the specified module. This object is obsolete.')
promPowerControlUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerControlUsed.setStatus('obsolete')
if mibBuilder.loadTexts: promPowerControlUsed.setDescription('The total power (in Watts) used by this module. This object is obsolete.')
promPowerControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("normal", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPowerControlPriority.setStatus('obsolete')
if mibBuilder.loadTexts: promPowerControlPriority.setDescription('The priority of this module to be considered in the event of a power supply failure where the amount of power used exceeds the system capacity. Low priority modules will be powered down before higher priority modules. This object is obsolete')
promPowerControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("poweredDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPowerControlMode.setStatus('obsolete')
if mibBuilder.loadTexts: promPowerControlMode.setDescription('Normally, a module power mode is enable(1). In the event of a power supply failure resulting in a power shortage, or in the event of this module being inserted without enough available power, the mode will be poweredDown(3). Setting this object to the value of poweredDown(3) will result in an error. When enough power is available, the module will power back up when in this mode. A module may be powered down through administrative action by setting the value of this object to disable(2). In this mode, the module will remain powered down until the mode is set back to enable. This object is obsolete.')
promTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 4))
promTempTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1), )
if mibBuilder.loadTexts: promTempTable.setStatus('mandatory')
if mibBuilder.loadTexts: promTempTable.setDescription('A table of information related to the temperature within the system.')
promTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promTempIndex"))
if mibBuilder.loadTexts: promTempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promTempEntry.setDescription('An entry providing temperature information related to a specific temperature probe in the system.')
promTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promTempIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promTempIndex.setDescription('A unique index that identifies this temperature probe. This index corresponds to the promResourceIndex for temperature probe type resources.')
promTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promTempValue.setStatus('mandatory')
if mibBuilder.loadTexts: promTempValue.setDescription('The current temperature reading of this temperature probe in degrees Celsius.')
promTempUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: promTempUpperLimit.setDescription('The upper temperature limit of this temperature probe in degrees Celsius.')
promTempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempUpperWarning.setStatus('mandatory')
if mibBuilder.loadTexts: promTempUpperWarning.setDescription('The upper temperature warning of this temperature probe in degrees Celsius.')
promTempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempLowerWarning.setStatus('mandatory')
if mibBuilder.loadTexts: promTempLowerWarning.setDescription('The lower temperature warning of this temperature probe in degrees Celsius.')
promTempLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: promTempLowerLimit.setDescription('The lower temperature limit of this temperature probe in degrees Celsius.')
promModules = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 5))
promModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1), )
if mibBuilder.loadTexts: promModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleTable.setDescription('A table of information related to the modules in the system.')
promModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promModuleIndex"))
if mibBuilder.loadTexts: promModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleEntry.setDescription('Attributes related to managing this module.')
promModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleIndex.setDescription('An index that uniquely identifies this module. This index corresponds to the promResourceIndex associated with module type resources.')
promModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleName.setDescription('A user-assignable name for this module.')
promModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 57))).clone(namedValues=NamedValues(("unknown", 1), ("m5502-1000", 2), ("m2206-1000", 3), ("m5520-100TX-QS", 4), ("m5510-100FX", 5), ("m5500-SUP", 6), ("m5504-1000", 7), ("m2201-1000", 8), ("m5520-100TX-I", 9), ("m2202-100FX", 10), ("m5510R-100FX", 11), ("m5512R-100TX", 12), ("m5500R-SUP", 13), ("m5502R-1000", 14), ("m2200-SUP", 15), ("m2204-100TX-I", 16), ("m2224-100TX", 17), ("m5502-OC3", 18), ("m5520-100TX-LUC", 19), ("m2204-100TX-LUC", 20), ("m5548-100TX-BCM", 21), ("m5502-AOC12SMF", 22), ("m5502-AOC12MMF", 23), ("m2201-1000SX", 24), ("m2201-1000LX", 25), ("m2201-1000SLX", 26), ("m5500R-SUPA", 27), ("m8000R-SUP", 28), ("m8002-1000", 29), ("m5500R-HUR", 30), ("m8024-100TX", 31), ("m8048-100TX", 32), ("m8024-100FX", 33), ("m8008-1000", 34), ("m5504-AOC3SMF", 35), ("m5504-AOC3MMF", 36), ("m8004-1000", 37), ("m8001-CMTS", 38), ("m5502-AOC3SMF", 39), ("m5502-AOC3MMF", 40), ("m8000R-HUR", 41), ("m8008R-1000T", 42), ("m8004R-1000T", 43), ("m8024R-100FXW", 44), ("m8002R-AOC12SMF", 45), ("m8002R-AOC12MMF", 46), ("m8002R-AOC3SMF", 47), ("m8002R-AOC3MMF", 48), ("m8048-JB-100TX", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleType.setDescription('An enumerated integer that is unique for each module model. ')
promModuleBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("gigabit", 1), ("fastEthernet", 2), ("supervisor", 3), ("unspecified", 4), ("uplink", 5), ("serverSwitching", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleBaseType.setDescription('The base type of this module. This object is used to describe the core functions of the module. Often, base designs are derived into multiple module types which are typically just packaging variations (e.g. changing the connector types). The value of this object corresponds to the value of promResourceBaseType.')
promModuleSlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleSlotWidth.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleSlotWidth.setDescription('The number of slots that this module occupies.')
promModuleSlotOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleSlotOffset.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleSlotOffset.setDescription('The slot offset (one based) that identifies, along with the slot width and slot location, the actual slots that this module occupies. The offset identifies which slot within the width of the module that this module reports as its slot number.')
promModulePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModulePorts.setStatus('mandatory')
if mibBuilder.loadTexts: promModulePorts.setDescription('The total number of ports associated with this module.')
promModuleUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 5, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleUpdateTime.setDescription("The value of MIb II's sysUpTime object at the time that the last module change occurred.")
promModuleUpdateList = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleUpdateList.setStatus('mandatory')
if mibBuilder.loadTexts: promModuleUpdateList.setDescription("The function of this variable is to summarize the information concerning the presence of the module and the module type for each slot of the hub. The second octet will contain '4' to indicate that what follows is an octet string. The third octet will contain '1' since each module type will be contained in 1 octet. Octets 4 through 4+n (n=number of slots) will contain the module type for the corresponding slot. The information is coded as follows: First Octet: number of slots Second Octet: SNMP Type of information: Integer = 2, OctetString = 4. Third Octet: length of each field Fourth Octet: if no module in slot #1 then '0', else the module type i.e, the integer corresponding to promModuleType. Last Octet: the module type corresponding to the last slot in the hub.")
promPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6))
promPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1))
promPortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1), )
if mibBuilder.loadTexts: promPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortTable.setDescription('A table of information related to every data port in this data networking system.')
promPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortEntry.setDescription('A data port associated with this data networking system.')
promPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promPortIndex.setDescription('An index that uniquely identifies this port. Typically, ports are child resources of the module that contains them. In these cases, ports are identified by their module and their relative physical position on that module.')
promPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortName.setStatus('mandatory')
if mibBuilder.loadTexts: promPortName.setDescription('The user-assigned name for this port. Note that setting this object for an internal(1) port results in an error.')
promPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4), ("ether-gigabit2", 5), ("ether-gigabit-lxt1000-copper", 6), ("ether-ten-oneHundred-bcm5308-rj71", 7), ("atm", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortType.setStatus('mandatory')
if mibBuilder.loadTexts: promPortType.setDescription('An internal(1) port does not have an external connection. An ether-ten-oneHundred(2) port is an Ethernet port which can be switched between 10 and 100 megabits per second. An ether-oneHundred(3) port is a 100 megabits per second Fast Ethernet port. An ether-gigabit(4) port is a 1000 megabits per second Gigabit Ethernet port. An ether-gigabit2(5) port is a 1000 megabits per second Gigabit Ethernet port. An ether-gigabit-copper(6) port is a 1000 megabits per second Gigabit Ethernet port using Category 5 twisted pair cabling. An ether-ten-oneHundred-telco(7) port is an Ethernet port which can be switched between 10 and 100 megabits per second using telco connectors.')
promPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: promPortBaseType.setDescription('The base type of this port. This object may be useful to help manage new port types that are similar in nature to legacy port types.')
promPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMode.setDescription('The mode of this port. When set to enable(1), this port passes data. When set to disable(2), the port does not receive or transmit data, nor does it generate port-level signaling e.g. link integrity pulses. Note that setting an internal(1) port to disable(2) results in an error.')
promPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("okay", 2), ("warning", 3), ("disabledButOkay", 4), ("linkFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promPortStatus.setDescription('The status of this port. Disabled(1) means that this port has been disabled through management action. Okay(2) indicates that this port is operating properly. Warning(3) indicates that this port is encountering an abnormal condition that, however, allows it to continue to pass data. LinkFailure(5) means that this port is unable to pass data.')
promPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("internal", 1), ("rj45", 2), ("fiber-ST", 3), ("fiber-SC", 4), ("rs-232", 5), ("aui", 6), ("rj71", 7), ("gbic-1000-SX", 8), ("gbic-1000-LX", 9), ("gbic-1000-LX-LH", 10), ("notPresent", 11), ("unsupported", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortConnector.setStatus('mandatory')
if mibBuilder.loadTexts: promPortConnector.setDescription('The connector type associated with this port.')
promPortSpeedState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("one-hundred-fifty-five-megabits-per-second", 3), ("six-hundred-twenty-two-megabits-per-second", 4), ("one-gigabit-per-second", 5), ("under-negotiation", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortSpeedState.setStatus('mandatory')
if mibBuilder.loadTexts: promPortSpeedState.setDescription("The data rate of this port in bits per second. For example, a standard Ethernet port (e.g. 10BASE-T) would indicate a value of ten-megabits-per-second((1) indicating that the port supports a data rate of 10Mb/s. For ports that can change their data rate (e.g. 10/100 ports), the value of this object indicates the current state of the port's speed capability.")
promPortDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2), ("under-negotiation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortDuplexState.setStatus('mandatory')
if mibBuilder.loadTexts: promPortDuplexState.setDescription('The value of this object indicates whether this port is operating in full- or half-duplex mode. The value under-negotiation(3) indicates that the port has not selected an operational duplex setting yet.')
promPortGroupBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 10), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortGroupBinding.setStatus('mandatory')
if mibBuilder.loadTexts: promPortGroupBinding.setDescription('Each port is associated with a port group. Typically, a port will belong to a port group of one and the value of this object will be the same as the port index for this instance. That is, this port will point to itself. The intent of this object is to help manage ports that have hierarchical relationships. For example, an ATM port typically has a physical port and multiple logical ports (e.g. each logical port corresponding to an instance of an emulated LAN). In this case, each LANE instance would refer to the instance of the physical port associated with the ATM front-end. Another example is an FDDI DAS type port. In this case, there is a logical port associated with the FDDI switch port which is connected to the two FDDI physical port connectors. The physical FDDI ports both point to the logical instance of an FDDI port.')
promPortFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-with-aggressive-backoff", 3), ("enable-send-only", 4), ("enable-respond-only", 5), ("under-negotiation", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: promPortFlowControlState.setDescription('The value of this object indicates whether this port is operating using flow control. The value under-negotiation(3) indicates that the port has not selected an operational flow control setting yet.')
promPortFlowControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2))
promPortFlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2, 1), )
if mibBuilder.loadTexts: promPortFlowControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortFlowControlTable.setDescription('A table of ports that support flow control.')
promPortFlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortFlowControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortFlowControlEntry.setDescription('Configuration objects related to port based flow control.')
promPortFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-with-aggressive-backoff", 3), ("enable-send-only", 4), ("enable-respond-only", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortFlowControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortFlowControlMode.setDescription('Flow control is used to prevent or reduce the dropping of frames due to the lack of buffer space. Overall, networks are more efficient when a sending station is asked to pause in its sending process, rather than having the transmitted frames dropped. Flow control is not as efficient when used in conjunction with a shared ports, i.e. when used with a repeater. Therefore, flow control is not recommended for a port connected to shared topologies. Flow control is most effective when the port is directly connected to an end-station, especially when connected to a server. Flow control is recommended for ports connected directly to end-stations. When the port is in half-duplex mode, back pressure is used to control the incoming flow. Back pressure essentially forces collisions for short periods of time. When the port is in full-duplex mode, IEEE 802.3 standard pause frames are used to control the incoming flow. Note that setting an ether-gigabit(4) port to enable-with-aggressive-backoff(3) results in an error. The enable-send-only(4) and enable-respond-only(5) are applicable for ether-gigabit and ether-gigabit2 ports only.')
promPortDuplexMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3))
promPortDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3, 1), )
if mibBuilder.loadTexts: promPortDuplexTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortDuplexTable.setDescription('A table of ports that support full- and half-duplex data communications.')
promPortDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortDuplexEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortDuplexEntry.setDescription('A port device configuration that controls the duplex mode of this port.')
promPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortDuplexMode.setDescription('A point-to-point Ethernet port may be configured to support half or full duplex communications. A full-duplex(2) port transmits and receives data concurrently, effectively doubling the data rate of the port. Half-duplex(1) ports transmit or receive data, but not at the same time. Half-duplex ports use CSMA/CD as the access method to the network. Ports that are connected to shared segments (i.e. connected to a repeater), should always be configured to be in half-duplex mode. This object indicates the desired duplexity of this port. If auto-negotiation is turned on for this port, then this value is ignored.')
promPortSpeedMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4))
promPortSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4, 1), )
if mibBuilder.loadTexts: promPortSpeedTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortSpeedTable.setDescription('A table of port devices that support multiple speeds.')
promPortSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortSpeedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortSpeedEntry.setDescription('A port that supports multiple speeds.')
promPortSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("one-hundred-fifty-five-megabits-per-second", 3), ("six-hundred-twenty-two-megabits-per-second", 4), ("one-gigabit-per-second", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortSpeedMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortSpeedMode.setDescription('Some of these values may not be applicable to certain types of ports. This object indicates the desired data rate of this port. If auto-negotiation is turned on for this port, then this value is ignored.')
promPortAutoNegotiationMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5))
promPortAutoNegotiationTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1), )
if mibBuilder.loadTexts: promPortAutoNegotiationTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortAutoNegotiationTable.setDescription('A table of ports that support auto-negotiation.')
promPortAutoNegotiationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortAutoNegotiationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortAutoNegotiationEntry.setDescription('Attributes associated with a port that supports auto-negotiation.')
promPortAutoNegotiationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("manualConfiguration", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortAutoNegotiationMode.setDescription("Setting this object to autoNegotiate(1) causes this port to negotiate the duplex mode and the port speed, subject to the port's capabilities.")
promPortAutoNegotiationSpeedAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ten-and-one-hundred-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("ten-megabits-per-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationSpeedAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: promPortAutoNegotiationSpeedAdvertisement.setDescription('The speed to advertise while auto-negotiating.')
promPortAutoNegotiationDuplexAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-and-half-duplex", 1), ("half-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationDuplexAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: promPortAutoNegotiationDuplexAdvertisement.setDescription('The duplexity to advertise while auto-negotiating.')
promPortAutoNegotiationFlowControlAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-send-only", 3), ("enable-respond-only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationFlowControlAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: promPortAutoNegotiationFlowControlAdvertisement.setDescription('The flow control capability to advertise while auto-negotiating.')
promPortRateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6))
promPortRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1), )
if mibBuilder.loadTexts: promPortRateLimitTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRateLimitTable.setDescription('A table of ports that support the ability to limit the rate of floods.')
promPortRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortRateLimitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRateLimitEntry.setDescription('The rate limit configuration associated with this port.')
promPortRateLimitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableIncludeKnownMulticast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRateLimitMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRateLimitMode.setDescription('This object configures whether rate limiting is enabled for this port (the factory default is enable(1)). Enabling rate limiting for this port prevents floods from overwhelming the output buffer associated with this port. Normally, rate limiting will only consider frames that are flooded to this port. This typically does not include known multicasts. However, known multicasts can be included in the flood limiting by setting the value of this object to enableIncludeKnownMulticast(3).')
promPortRateLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("one-percent", 1), ("two-percent", 2), ("five-percent", 3), ("ten-percent", 4), ("twenty-percent", 5), ("forty-percent", 6), ("eighty-percent", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRateLimitRate.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRateLimitRate.setDescription("The percentage of the port's transmitted data allowed to be floods (or floods and known multicasts). For example, the factory default setting of twenty-percent(4) indicates that 20% of the data rate can be floods. For 10 Mb/s ports, this is equivalent to a maximum rate of approximately 3000 flooded pps; for 100 Mb/s ports, a maximum rate of approximately 30,000 flooded pps.")
promPortRateLimitBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rateLimit1", 1), ("rateLimit2", 2), ("rateLimit4", 3), ("rateLimit8", 4), ("rateLimit16", 5), ("rateLimit32", 6), ("rateLimit64", 7), ("rateLimit128", 8), ("rateLimit256", 9), ("rateLimit512", 10), ("rateLimit1024", 11), ("rateLimit2048", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRateLimitBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRateLimitBurstSize.setDescription("The maximum number of consecutive transmitted flooded (or flooded and known multicasted) packets. Typically, the burst size is set so as to not overflow the port's buffer.")
promPortPacePriorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7))
promPortPacePriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7, 1), )
if mibBuilder.loadTexts: promPortPacePriorityTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortPacePriorityTable.setDescription('A table of ports that support the ability to classify frame priority based on 3Com Pace(r) Prioritization.')
promPortPacePriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortPacePriorityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortPacePriorityEntry.setDescription('A port that supports 3Com Pace(r) priority.')
promPortPacePriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortPacePriorityMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortPacePriorityMode.setDescription("When Pace priority is enabled, this port will detect frames that use 3Com Corporation's Pace(r) Priority signaling. Frames signaled with priority in this manner are mapped to traffic priority level 4 (on scale of 0-7).")
promPortCategoryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8))
promPortCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8, 1), )
if mibBuilder.loadTexts: promPortCategoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortCategoryTable.setDescription('A table of ports that support the port category feature. Currently, all ports support this capability.')
promPortCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortCategoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortCategoryEntry.setDescription('A port that supports port categorization.')
promPortCategoryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userPort", 1), ("servicePort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortCategoryMode.setStatus('mandatory')
if mibBuilder.loadTexts: promPortCategoryMode.setDescription('By default, all ports are considered service ports. A service port is a port that provides a networks service such as a connection to a server, other switches, or the like. A service port will trigger the service port event for status changes with the alarm severity and will trigger an alarm in the alarm table on link failure. In contrast, user ports trigger the user link event with warning severity. They do not trigger an alarm upon link failures. User ports are useful to prevent floods of traps or entries in the alarm table. This is especially true for ports connected to user hosts that power up in the morning and power down again at the end of the work day.')
promPortRemoteFaultMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9))
promPortRemoteFaultTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9, 1), )
if mibBuilder.loadTexts: promPortRemoteFaultTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRemoteFaultTable.setDescription('A table of ports that support the ability signal a (pre-standard) remote fault to a far-end interface using proprietary messages.')
promPortRemoteFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortRemoteFaultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRemoteFaultEntry.setDescription('A port that supports pre-standard remote fault detection.')
promPortRemoteFaultDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRemoteFaultDetect.setStatus('mandatory')
if mibBuilder.loadTexts: promPortRemoteFaultDetect.setDescription("When remote fault detection is enabled, this port will transmit a 'remote fault present' control frame to its peer interface when it detects a link failure. It will periodically send the control frame until the link failure clears, at which time it will send a 'remote fault clear' control frame. If this port receives a 'remote fault present' control frame it will declare a link failure until it is informed that the condition has cleared or until the remote fault times out.")
promBufferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 7))
promBufferTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1), )
if mibBuilder.loadTexts: promBufferTable.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferTable.setDescription('A table of frame buffers in the system.')
promBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promBufferIndex"))
if mibBuilder.loadTexts: promBufferEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferEntry.setDescription('Objects related to the management of this frame buffer.')
promBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferIndex.setDescription('The unique index that identifies this buffer within the system. Buffers are indexed first by their module association and then a unique index within that module.')
promBufferFabricPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferFabricPort.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferFabricPort.setDescription('The switch fabric port associated with this buffer.')
promBufferFabricPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferFabricPortDirection.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferFabricPortDirection.setDescription('The value of this object indicates whether the buffer is used for buffering frames going into the switching fabric or coming out of the fabric.')
promBufferSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 4), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferSwitchPort.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferSwitchPort.setDescription('The switch port associated with this frame buffer. Some buffers are not associated with any one switch port. In those cases, the value of the resource ID returned will be the null resource ID.')
promBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferMemory.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferMemory.setDescription('The amount of memory available for frame buffering in Kilobytes (KB).')
promBufferAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("quarter-second", 2), ("one-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferAgeTimer.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferAgeTimer.setDescription('Configures the timer used for aging frames in this buffer. If the timer expires for a frame, the frame is dropped and the event is counted in the stale drop counter. By default, the age timer is set to a 0.25 seconds (quarter of a second). The actual time that a frame may be aged out may vary. When set to a quarter of a second (250ms), the actual time may vary between 160ms and 320ms. When set to a second (1000ms), the time may vary between 640ms and 1.28 seconds (1028ms).')
promBufferPriorityServicing = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("strictPriority", 1), ("everyTenThousand", 2), ("everyThousand", 3), ("everyHundred", 4), ("everyFour", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferPriorityServicing.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferPriorityServicing.setDescription('The value of this object configures how often the normal priority queue is serviced relative to the high priority queue. By default, the normal priority queue is serviced every thousand frames(3). This means that the normal priority queue is guaranteed to be serviced after servicing, at most, one thousand high priority frames. It is important to service the normal priority queue for two reasons. One is to prevent starvation for frames on the normal priority queue. The other reason is that frames cannot be aged if they are not serviced (see the age timer).')
promBufferPriorityAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("tenPercent", 2), ("twentyPercent", 3), ("thirtyPercent", 4), ("fortyPercent", 5), ("fiftyPercent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferPriorityAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferPriorityAllocation.setDescription('This object controls how much of the total buffer space should be allocated to high priority queue. Please be warned that setting this object to a different value causes the associated buffer to reset, causing a short loss of data. Setting the value of this object to none(1) not only allocates the entire buffer space to normal traffic, but also has the side effect of disabling the priority threshold. In other words, all traffic will be considered as normal priority traffic.')
promBufferPriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5), ("five", 6), ("six", 7), ("seven", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferPriorityThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferPriorityThreshold.setDescription('This object configures the threshold for which frames are considered high priority. Frames may have a priority classification ranging from 0-7, 7 being the highest. By default, every frame that has priority 4 (four(5)) or above is considered a high priority frame and is buffered accordingly. If this buffer does not have any buffer space allocated for high priority frames, then the buffer threshold will be none(1). Setting this object to a different value without allocating buffer space to high priority traffic will result in an error.')
promBufferCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informationNotAvailable", 1), ("notCongested", 2), ("congested", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferCongestion.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferCongestion.setDescription('This object indicates whether this buffer is in a congested state..')
promBufferHighOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferHighOverflowDrops.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferHighOverflowDrops.setDescription('The count of the number of high priority frames dropped due to the high priority queue overflowing.')
promBufferLowOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferLowOverflowDrops.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferLowOverflowDrops.setDescription('The count of the number of low priority frames dropped due to the low priority queue overflowing.')
promBufferHighStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferHighStaleDrops.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferHighStaleDrops.setDescription('The count of the number of high priority frames dropped due to being in the high priority queue too long (the frame aged out).')
promBufferLowStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferLowStaleDrops.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferLowStaleDrops.setDescription('The count of the number of low priority frames dropped due to being in the low priority queue too long (the frame aged out).')
promBufferCongestionDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferCongestionDrops.setStatus('mandatory')
if mibBuilder.loadTexts: promBufferCongestionDrops.setDescription('The count of the number of frames dropped due to the destination (output) buffer being congested. ')
promSwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5))
promSwitchingLayerII = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1))
promSwitchGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1))
promSwitchSTPConfig = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ieee8021dStp", 1), ("stpPerVlan", 2), ("twoLayerStp", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchSTPConfig.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchSTPConfig.setDescription("When set to ieee8021dStp(1), the switch executes spanning tree conformant to the IEEE 802.1D bridging standard. The switch runs one instance of spanning tree. When set to stpPerVlan(2), the switch executes a separate instance of spanning tree for each virtual LAN. This configuration conforms to the model that instances of virtual LANs within the switch are separate virtual bridging functions. This method may not work well with bridge/routers that are also running spanning tree. When set to twoLayerStp(3), the switch executes a two-layer spanning tree to prevent loops. Two layer spanning tree creates a higher 'plane' of spanning tree between VLAN devices. This method of running spanning tree is 'plug and play' with bridge/router type devices and also scales better than the other two methods for large environments. When set to disable(4), spanning tree is disabled in the switch.")
promSwitchAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchAgingTime.setDescription('The timeout period in seconds for aging dynamically learned forwarding information. A default of 300 seconds is recommended. An aged entry is marked invalid, but is not removed from the Address Forwarding Table, because it is assumed that it will be relearned to the same location within the table.')
promSwitchSuperAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchSuperAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchSuperAgingTime.setDescription('The timeout period in days for removing stale invalid entries from the Address Forwarding Table. A superaged entry is removed completely from the Address Forwarding Table, because it is assumed that the entry will never be relearned.')
promBridgeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2))
promBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1), )
if mibBuilder.loadTexts: promBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeTable.setDescription('A table of Spanning Tree information for every bridge in the system.')
promBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promBridgeIndex"))
if mibBuilder.loadTexts: promBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeEntry.setDescription('')
promBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeIndex.setDescription('An index that uniquely identifies this bridge.')
promBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeType.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeType.setDescription('Indicates whether this is a legacy dot1d bridge consisting of all switch ports or a virtual bridge consisting of all virtual subports for a particular Vlan.')
promBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeMode.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeMode.setDescription('Used to enable or disable Spanning Tree for this bridge. When set to disable(2), all BPDUs are forwarded like regular multicast packets. The default value is enable(1).')
promBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStatus.setDescription('The enable/disable status of this bridge. This object incorporates the setting of the promSwitchSTPConfig object. When promSwitchSTPConfig is set such that this bridge will not be active, promBridgeStatus returns disabled(2). If promSwitchSTPConfig is set such that this bridge will be active, and promBridgeMode is enable(1), this object returns enabled(2).')
promBridgeStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpPriority.setDescription('The priority value of the Bridge Identifier. See dot1dStpPriority.')
promBridgeStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpTimeSinceTopologyChange.setDescription('The time since the last topology change was detected. See dot1dStpTimeSinceTopologyChange.')
promBridgeStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpTopChanges.setDescription('The total number of topology changes. See dot1dStpTopChanges')
promBridgeStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpDesignatedRoot.setDescription('The bridge considered to be root by this node. See dot1dStpDesignatedRoot.')
promBridgeStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpRootCost.setDescription('The cost of the path to the root from this node. See dot1dStpRootCost.')
promBridgeStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpRootPort.setDescription('The port number with the lowest cost path to the root bridge. See dot1dStpRootPort.')
promBridgeStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpMaxAge.setDescription('The maximum age used by this bridge to hold onto STP information before discarding. See dot1dStpMaxAge.')
promBridgeStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpHelloTime.setDescription('The amount of time between configuration BPDUs. See dot1dStpHelloTime.')
promBridgeStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpHoldTime.setDescription('The time value that indicates the interval during which no more than two configuration BPDUs will be sent by this node. See dot1dStpHoldTime.')
promBridgeStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpForwardDelay.setDescription('The amount of time that this node stays in each of the Listening and Learning states. See dot1dStpForwardDelay.')
promBridgeStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpBridgeMaxAge.setDescription('The value of MaxAge when this bridge is the root. See dot1dStpBridgeMaxAge.')
promBridgeStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpBridgeHelloTime.setDescription('The value of HelloTime to use when this bridge is the root. See dot1dStpBridgeHelloTime.')
promBridgeStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgeStpBridgeForwardDelay.setDescription('The value of FowardDelay to use when this bridge is the root. See dot1dStpBridgeForwardDelay.')
promBridgePortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3))
promBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1), )
if mibBuilder.loadTexts: promBridgePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortTable.setDescription(' A table of Spanning Tree information for every port that supports Spanning Tree in every bridge in the system ')
promBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promBridgePortIndex"))
if mibBuilder.loadTexts: promBridgePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortEntry.setDescription('')
promBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortIndex.setDescription('An index that uniquely identifies this bridge port. This index corresponds to the promResourceIndex for bridge port type resources.')
promBridgePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortPriority.setDescription('The value of the priority field in the port ID. See dot1dStpPortPriority. The default value is 128.')
promBridgePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortState.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortState.setDescription("The port's current state as defined by the Spanning Tree Protocol. See dot1dStpPortState. The virtual port is considered broken if its switch port is blocked.")
promBridgePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortEnable.setDescription('The enabled/disabled status of this port. See dot1dStpPortEnable. The default is enabled(2).')
promBridgePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortPathCost.setDescription('The contribution of this port to the path cost of the paths towards the spanning tree root. See dot1dStpPortPathCost. The default value is dependent on the port speed, trunking mode, and duplexity.')
promBridgePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortDesignatedRoot.setDescription("The bridge recorded as root for this port's segment. See dot1dStpPortDesignatedRoot.")
promBridgePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortDesignatedCost.setDescription('The path cost of the designated root of the segment connected to this port. See dot1dStpPortDesignatedCost.')
promBridgePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortDesignatedBridge.setDescription("The bridge identifier of the bridge that is considered the designated bridge for this port's segment. See dot1dStpPortDesignatedBridge.")
promBridgePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortDesignatedPort.setDescription("The port identifier of the port on the Designated Bridge for this port's segment. See dot1dStpPortDesignatedPort.")
promBridgePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortForwardTransitions.setDescription('The number of times this port has transitioned from the learning state to the forwarding state. See dot1dStpPortForwardTransitions.')
promBridgePortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortFastStart.setStatus('deprecated')
if mibBuilder.loadTexts: promBridgePortFastStart.setDescription('This object is being replaced by the switch port object promSwitchPortFastStart. When this bridge port object is set to enable(1), the bridge port and all other bridge ports on the same switch port, transition right from blocking to forwarding, skipping the listening and learning states. When this bridge port object is set to disable(2), the bridge port and all other bridge ports on the same switch port have this option disabled. The user should be warned that using the fast start feature greatly increases the likelihood of unintended network loops that would otherwise be prevented by participating in the normal spanning tree algorithm. The factory default value for this object is disable(2).')
promBridgePortSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useCurrentValues", 1), ("setDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortSetDefault.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortSetDefault.setDescription('When set to setDefault(2), the promBridgePortPriority, promBridgePortEnable, and promBridgePortPathCost will be set to the factory default values.')
promBridgePortEnableChangeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortEnableChangeDetection.setStatus('mandatory')
if mibBuilder.loadTexts: promBridgePortEnableChangeDetection.setDescription('When this object is set to enable(1), a Topology Change Notification will be generated when this port goes to Blocking or Forwarding (if the port is a designated port). When set to disable(2), no Topology Change Notification will be generated for this port. The default is enable(1).')
promL2AddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4))
promL2AddrDatabaseMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1))
promL2AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1), )
if mibBuilder.loadTexts: promL2AddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressTable.setDescription('A table of address table entries. The address table is used by the bridging function to perform forwarding and filtering decisions. An address may appear multiple times in different entries corresponding to the different logical address tables.')
promL2AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promL2AddressIndex"))
if mibBuilder.loadTexts: promL2AddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressEntry.setDescription('A particular address table entry.')
promL2AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressIndex.setDescription('An index that uniquely identifies this address entry.')
promL2AddressTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressTableIndex.setDescription('The address table that this entry is associated with.')
promL2AddressMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressMacAddress.setDescription('The IEEE 802 MAC Address associated with this database entry.')
promL2AddressPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 4), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressPortBinding.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressPortBinding.setDescription('The switch port that this address is associated with. ')
promL2AddressBindingValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressBindingValid.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressBindingValid.setDescription('The port binding of an address entry is aged out in conformance with the specifications laid out in the IEEE 802.1D standard. When the address is aged out, the port binding becomes invalid.')
promL2AddressVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressVlanID.setDescription('The VLAN ID of the VLAN that this address entry corresponds to.')
promL2AddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressPriority.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressPriority.setDescription('If set to high(2), frames destined to this address are classified with priority value 4.')
promL2AddressForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("specialDelivery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressForward.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressForward.setDescription('When set to specialDelivery(2), frames sent to this address are treated to special delivery where the spanning tree state of the inbound port is ignored. Typically, special delivery is only used for Bridge PDUs such as spanning tree frames.')
promL2AddressCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("copyCPU", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressCopy.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressCopy.setDescription('It is sometimes useful for the switch processor to eavesdrop on traffic to certain destinations. This is especially useful in supporting the intelligent multicasting function.')
promL2AddressPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressPersistence.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressPersistence.setDescription('This object indicates the persistence of this entry: other(1) - This entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - Writing this value to the object removes the corresponding entry. permanent(3) - Address is not aged out. Additionally, if the address is seen as a source on a different port for this VLAN, the frame is filtered and the filter event is counted. Static address entries are stored in non-volatile memory and are restored to the address table following each system reset. deleteOnReset(4) - Indicates that the entry is not aged out, however the entry is not stored in non-volatile memory. Therefore, when the device is reset, the entry will not be restored. deleteOnTimeout(5) - Typically, address entries are learned dynamically by the switch. These entries are aged out of the table if they are not active on the network. This value correlates to this state.')
promL2AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("learned", 2), ("self", 3), ("mgmt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressStatus.setDescription("This object indicates the status of the entry: other(1) - None of the following. learned(2) - This entry was learned dynamically. self(3) - The value of the corresponding instance of promAddressMacAddress represents one of the bridge's addresses. mgmt(4) - This entry was added or modified by management. Entries that have been added by management and made permanent")
promL2AddrSummaryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2))
promL2AddrSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2, 1), )
if mibBuilder.loadTexts: promL2AddrSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddrSummaryTable.setDescription('This summary table packs the address entries in the address database into summary objects. The goal is to optimize the upload of the large amount of data stored therein. Typically, a management station would use getNext requests to retrieve the next logical summary object. The returned object value contains the next n entries of the address database packed into one PDU. The instance of the object returned is the index of the last address entry packed in the summary, thereby optimizing for the next getNext request.')
promL2AddrSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promL2AddressIndex"))
if mibBuilder.loadTexts: promL2AddrSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddrSummaryEntry.setDescription('A summary object that packs as many address entries possible into a summary object.')
promL2AddrSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddrSummary.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddrSummary.setDescription('The value of this object is a packed opaque structure representing an array of address entries. The format of this structure is: struct L2AddressEntry { UNS32 index; UNS8 addr[6]; // mac address UNS8 fabricPort; //fabricPort and subPort == promL2AddressPortBinding UNS8 subPort; UNS16 vlanID, //the global vlan id UNS8 portBindingValidFlag; UNS8 addressForwardFlag; UNS8 addressCopyFlag; UNS8 addressPersistence; UNS8 addressStatus; }; struct L2AddressSummary{ UNS8 numberOfEntries; // Number of entries that follow UNS8 version; // version == 1 UNS16 endianFlag; L2AddressEntry entryArray[numberOfEntries]; };')
promL2AddrControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3))
promL2AddressControlTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1), )
if mibBuilder.loadTexts: promL2AddressControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlTable.setDescription('This table provides the network manager the ability to create new, static address entries. Entries added through this table are added to the specified address table as a static entry and are save in non-volatile memory for reconfiguration upon system restart. This table is indexed by the promAgentMgrIndex value which provides a separate instance for each manager.')
promL2AddressControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promAgentMgrIndex"))
if mibBuilder.loadTexts: promL2AddressControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlEntry.setDescription('A control entry enables this manager to add a new entry to the specified address table. When the entry is written to, the control index value is reset to 0. When the actual entry is created, the index value will read as non-zero, reporting the actual entry created.')
promL2AddressControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlIndex.setDescription('The index of the address entry that was created for this address.')
promL2AddressControlMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlMacAddress.setDescription('The IEEE 802 MAC Address associated with this database entry.')
promL2AddressControlPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlPortBinding.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlPortBinding.setDescription('The port to bind this address to.')
promL2AddressControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlVlanID.setDescription('The VLAN ID of the VLAN to bind this address to.')
promL2AddressControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlPriority.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlPriority.setDescription('If set to high(2), frames destined to this address are classified with priority value 4.')
promL2AddressControlPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("deleteOnReset", 2), ("deleteOnTimeout", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlPersistence.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlPersistence.setDescription('The persistence of the entry to be created: permanent(1) - Address is not aged out. Additionally, if the address is seen as a source on a different port for this VLAN, the frame is filtered and the filter event is counted. Static address entries are stored in non-volatile memory and are restored to the address table following each system reset. deleteOnReset(2) - Indicates that the entry is not to be aged, however the entry is not stored in non-volatile memory. Therefore, when the device is reset, the entry will not be restored. deleteOnTimeout(3) - Indicates that the entry is to be aged by the normal aging process.')
promL2AddressControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("success", 3), ("otherError", 4), ("entryExistsError", 5), ("invalidMacAddress", 6), ("invalidPortBinding", 7), ("invalidVlanID", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressControlStatus.setDescription('The status of an entry to be created. When adding an entry all fields will be set, and then the control status is set to createRequest(1), indicating that the entry is to be created. During creation, the status will be underCreation(2). If the creation is successful, then the status will be set to success(3), and the value of promAddressControlIndex indicates the index of the entry that was created in the address table. Otherwise if the creation was not successful, then one of the following error codes will be set and the entry will not be created: otherError(4) - An error other then the others defined. entryExistsError(5) - An entry already exists with this MAC address in this address table. invalidMacAddress(6) - Cannot create an entry with this MAC address. invalidTableIndex(7) - The table does not exist. invalidPortBinding(8) - The port binding is invalid. invalidVlanID(9) - The VLAN ID is invalid. Note that the only value that is valid to write to this object is createRequest(1), and that this object will never return the value createRequest(1).')
promL2AddrChangeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4))
promL2AddressChangeLast = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeLast.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeLast.setDescription('The index of the last entry written to the address change table')
promL2AddressChangeWraps = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeWraps.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeWraps.setDescription('The count of the number of times the address change table has wrapped.')
promL2AddressChangeMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressChangeMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeMaxEntries.setDescription('The maximum number of entries in the address change table.')
promL2AddressChangeTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4), )
if mibBuilder.loadTexts: promL2AddressChangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeTable.setDescription('.')
promL2AddressChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1), ).setIndexNames((0, "PROMINET-MIB", "promL2AddressChangeWrapCount"), (0, "PROMINET-MIB", "promL2AddressChangeIndex"))
if mibBuilder.loadTexts: promL2AddressChangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeEntry.setDescription("The address change table provides a quick way of getting only the entries that have recently changed. Since entries age out as part of the normal switching process, entries that have aged (i.e. their destination bindings are no longer valid) are not considered to be changed. Any other modification to the entry, including deletion or creation, are considered to be changes. The address change table is considered a circular table. When an entry changes, it is added to the next position within the table. If the 'next' position goes beyond the end of the table, the 'next' position is set to the beginning of the table (1) and the wrap counter (promAddressChangeWraps) is incremented. The promAddressChangeLast value is updated with the index of the last entered entry. An entry may be in the table multiple times if it has changed multiple times. Every time that an entry changes, it is added to the change table. A network management application should follow the following algorithm when polling this table: 1. Set lastChangeWrap = promAddressChangeWraps. 2. Set lastChangeIndex = promAddressChangeLast 3. Get the entire promAddressEntryTable. 4. Submit a getNext for <lastChangeWrap>.<lastChangeIndex>, updating lastChangeWrap and lastChangeIndex with the returned next values. Update the address entry database with the changed values. 5. Repeat step 4 until no more entries are returned. 6. Wait polling timeout period. 7. Get wrap events counter and last index. If the wrap events counter is equal to lastChangeWrap, then goto step 4. Else if the wrap events counter is more then one greater then lastChangeWrap, goto step 1. Else the wrap events counter is exactly one greater then lastChangeWrap, and if the last index is greater then lastChangeIndex, then goto step 1, else goto step 4. The last step simply insures that we have not missed any of the change entries. Essentially it says that if we have wrapped to beyond where we last polled, then we must get the entire table to synch up again. Otherwise we can just get the entries that have changed.")
promL2AddressChangeWrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeWrapCount.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeWrapCount.setDescription('The number of times that the promAddressChangeLastIndex had wrapped when this entry was added.')
promL2AddressChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeIndex.setDescription('The index that uniquely identifies this address change entry.')
promL2AddressChangeIndexChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeIndexChanged.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeIndexChanged.setDescription('The address entry that changed. The value of this object corresponds to the promL2AddressIndex object. ')
promL2AddressChangeSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeSummary.setStatus('mandatory')
if mibBuilder.loadTexts: promL2AddressChangeSummary.setDescription(' The structure is interpreted in the following manner:')
promSwitchPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 2))
promSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1), )
if mibBuilder.loadTexts: promSwitchPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortTable.setDescription('')
promSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promSwitchPortIndex"))
if mibBuilder.loadTexts: promSwitchPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortEntry.setDescription('')
promSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortIndex.setDescription('A unique index that identifies this switch port. The value of this index corresponds to the value of the promResourceIndex for switch ports.')
promSwitchPortSTAPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortSTAPMode.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortSTAPMode.setDescription('Disabling spanning tree on a switch port prevents the switch port from participating in the spanning tree process. When disabled(2), this port will neither generate BPDUs, nor process received BPDUs. Also, the port will always start in the forwarding state. A port configured in this mode will not be able to detect network loops involving this port. The factory default is to enable spanning tree on all ports.')
promSwitchPortConvertToStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learnAsDynamic", 1), ("convertToStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortConvertToStatic.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortConvertToStatic.setDescription('When this object is set to convertToStatic(2), all addresses learned on this port will be added to the non-volatile version of the static address table. Typically, this object will be used to perform a crude form of address database update where the address activity associated with this port is collected as static (i.e. permanent) addresses while the value of this object is set to convertToStatic(2). Following this usually short period of time (perhaps a week of activity), the value of this object is restored back to its default value of learnAsDynamic(1) and learning for this port is disabled. It is important that the user verify the address database to verify that only the desired addresses were made permanent.')
promSwitchPortLearningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortLearningMode.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortLearningMode.setDescription('Disable learning on a bridge port to prevent new addresses from being added to the address database. Used in combination with static (permanent) address entries, disabling address learning is an effective security feature to prevent new hosts from appearing on the network, or to prevent hosts from moving to different locations in the network. The default is enable.')
promSwitchPortHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortHuntGroup.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortHuntGroup.setDescription('Hunt groups provide the capability to logically bind multiple switch ports into one switch port. This provides a way of balancing the load of multiple links between like-configured switches. Care must be taken to configure the hunt groups properly to prevent accidental network looping. Use this object to bind this port to a specific hunt group. When not configured to a specific hunt group, set the value of this object to zero.')
promSwitchPortPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 6), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortPhysicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortPhysicalPort.setDescription('The physical port resource bound to this switch port.')
promSwitchPortKnownMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortKnownMode.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortKnownMode.setDescription("Enabling known mode for this switch port causes the port to safely discard frames flooded because they are unknown unicast frames. This mode greatly enhances the efficiency of the port's output buffer since space is not wasted for frames not meant for this port. Enabling this feature disables learning for this port. Addresses associated for this port should be entered statically. The default is disable.")
promSwitchPortMappingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port-based", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortMappingMethod.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortMappingMethod.setDescription('The frame mapping method of this switch port. When set to port-based(1) (the factory default), all non-tagged frames are classified to the VLAN associated with this switch port.')
promSwitchPortTrunkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("ieee8021q", 2), ("multiLevel", 3), ("trunk3Com", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortTrunkingMode.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortTrunkingMode.setDescription('The trunking mode of this port. All frames transmitted out this switch port are translated to the appropriate trunking format: Clear: Ethernet or IEEE 802.3 frame format. This is the default. IEEE 802.1Q: The original frame with a new Ethernet Type (Protocol = 0xXXXX) and the VLAN ID inserted following the original Source Address. Also, the CRC is recalculated. Multi-level: The original frame is encapsulated in an IEEE 802.3 legal frame proprietary to a major networking equipment vendor. 3Com LinkSwitch: The original frame has the VLAN ID added to the front of the frame (before the Destination Address). Trunking format is proprietary to 3Com Corporation.')
promSwitchPortVlanBindingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortVlanBindingMethod.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortVlanBindingMethod.setDescription('The VLAN binding method of a switch port specifies the way in which the port can be a member of the egress lists of VLANs other than the port default VLAN specified by promSwitchPortVlanID: static: A Virtual Switch Port must be statically created for each VLAN/port combination. persistent: A Virtual Switch Port is automatically created for each VLAN known to the switch (i.e., the port is a member of the egress lists of all VLANs). dynamic: A Virtual Switch Port is automatically created for each VLAN when the associated VLAN ID is used as a tag in an IEEE 802.1Q or Multi-level tagged frame received on the port (i.e., the port is a member of the egress lists of the VLANs from frames received on the port). The default is static.')
promSwitchPortIgnoreTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useTag", 1), ("ignoreTag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortIgnoreTag.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortIgnoreTag.setDescription("Each switch port is capable of ignoring the VLAN Tag associated with a frame in a trunking format. When ignored, the tag is used as the default in the event that a VLAN classification based on the switch's policy(s) cannot be made. This feature is useful for connecting layer 2 VLANs and layer 3 VLANs. The default is useTag.")
promSwitchPortVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortVlanID.setDescription('When this switch port is configured in port-based VLAN mode, all non-tagged frames received on this port are bound to this VLAN. Otherwise, non-tagged frames are classified to this VLAN as the default if a VLAN binding cannot be otherwise determined. The factory default is 1, which is the VLAN ID of the Default VLAN.')
promSwitchPort3ComMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPort3ComMappingTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPort3ComMappingTableIndex.setDescription('The 3Com VLAN mapping table associated with this switch port. The default is 1, which indicates the default mapping table.')
promSwitchPortAutoVlanCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortAutoVlanCreation.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortAutoVlanCreation.setDescription('Enabling auto VLAN creation for this switch port causes the port to dynamically create a VLAN whenever an IEEE 802.1Q or Multi-level tagged frame is received on the port with a tag value which does not correspond to a known VLAN. All switch ports with a trunking mode of IEEE 802.1Q or Multi-level are bound to this created VLAN. The default is disable.')
promSwitchPortMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortMirrorMode.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortMirrorMode.setDescription('When set to enable(1), this object indicates that the port is defined as a mirror port through the promPortMirroringTable. A mirror port duplicates frames received at one or more source ports.')
promSwitchPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortIfIndex.setDescription('Each switch port is associated with an interface. This object provides a mechanism to map switch ports to bridge ports.')
promSwitchPortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortFastStart.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortFastStart.setDescription('When this object is set to enable(1), bridge ports on this switch port transitions right from blocking to forwarding, skipping the listening and learning states. The user should be warned that using the fast start feature greatly increases the likelihood of unintended network loops that would otherwise be prevented by participating in the normal spanning tree algorithm. The factory default value for this object is disable(2).')
promSwitchPortVtpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortVtpSnooping.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortVtpSnooping.setDescription("When this object is set to enable(1), this switch port attempts to learn VLANs from a major networking equipment vendor if the switch port's trunking mode is IEEE 802.1Q Format or Multi-level Format. The factory default value for this object is enable(1).")
promSwitchPortIntrusionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortIntrusionTrap.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortIntrusionTrap.setDescription('Enabling intrusion trap for this switch port causes the traps to be generated when unknown MAC frames are received and port is configured to receive only statically configured MAC frames and learning and flooding are disabled. The default is disable.')
promSwitchPortIntrusionTrapTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortIntrusionTrapTimer.setStatus('mandatory')
if mibBuilder.loadTexts: promSwitchPortIntrusionTrapTimer.setDescription('Defines the time that elapses between consecutive intrusion traps sent when unknown MAC frames are received and port is configured to receive only statically configured MAC frames and learning and flooding are disabled. The default is 1800 seconds.')
promHuntGroupMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 4))
promHuntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1), )
if mibBuilder.loadTexts: promHuntGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupTable.setDescription('')
promHuntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promHuntGroupIndex"))
if mibBuilder.loadTexts: promHuntGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupEntry.setDescription('')
promHuntGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promHuntGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupIndex.setDescription('An index that uniquely identifies this hunt group. This index corresponds to the value of promResourceIndex for resources of the hunt group type.')
promHuntGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promHuntGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupName.setDescription('')
promHuntGroupBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 3), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promHuntGroupBasePort.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupBasePort.setDescription('The switch port index that serves as the base port for this hunt group. Each hunt group requires a base port. In lieu of a specific configuration, the hunt group will inherit the first switch port bound to the hunt group as its base port. The base port serves as the management focus for the hunt group. That is, a hunt group is managed as one switch port whose instance is provided by the base switch port. All configuration (e.g. spanning tree information) and statistics related to switch ports are meaningful only through the instance of the base port.')
promHuntGroupNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promHuntGroupNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupNumberOfPorts.setDescription('The current number of ports that belong to this hunt group.')
promHuntGroupLoadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promHuntGroupLoadSharing.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupLoadSharing.setDescription('')
promHuntGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("deleteRequest", 3), ("active", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promHuntGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promHuntGroupStatus.setDescription('')
promPortMirroringMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 5))
promPortMirroringTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1), )
if mibBuilder.loadTexts: promPortMirroringTable.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMirroringTable.setDescription('A table of port mirroring entries used to mirror traffic from a source port to a mirror port.')
promPortMirroringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortMirroringIndex"))
if mibBuilder.loadTexts: promPortMirroringEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMirroringEntry.setDescription('Objects related to the PortMirroring functionality.')
promPortMirroringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortMirroringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMirroringIndex.setDescription('The unique index that identifies this entry. This index consists of a switch fabric port and the index of a Packet Lookup Engine servicing this fabric port.')
promPortMirroringSourceSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringSourceSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMirroringSourceSubPort.setDescription('The frame sampler source switch subport. The source port is the port from which received traffic will be mirrored. This object identifies the switch subport only, the switch fabric port is identified in promPortMirroringIndex. If set to 0, all subports associated with the promPortMirroringIndex will be source ports. The default value is 0.')
promPortMirroringSamplerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("periodic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringSamplerType.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMirroringSamplerType.setDescription('The type for this frame sampler. When set to enable(1), every frame received on the source port(s) will be mirrored at the mirror port. When set to disable(2), no frames received on the source port(s) will be mirrored at the mirror port. When set to periodic(3), frames will be mirrored at the rate defined in promPortMirroringRate. The default value is disable(2).')
promPortMirroringRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringRate.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMirroringRate.setDescription('Used in conjunction with promPortMirroringSamplerType to implement periodic sampling functionality. If promPortMirroringSamplerType is set to periodic(3), this object defines the number of packets/second that will be mirrored. If promPortMirroringSamplerType is not periodic(3), this object will set to 0.')
promPortMirroringMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringMirrorPort.setStatus('mandatory')
if mibBuilder.loadTexts: promPortMirroringMirrorPort.setDescription('The Switch Port on which frames received at source ports(s) will be duplicated. If no mirror port has been defined this object will return NULL.')
promVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7))
promVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 1))
promVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1), )
if mibBuilder.loadTexts: promVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanTable.setDescription('')
promVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promVlanID"))
if mibBuilder.loadTexts: promVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanEntry.setDescription('')
promVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanID.setDescription('An identifier that is unique within the administrative domain. This ID is assigned by the management application and is meaningful within that context. This ID is used to identify VLANs when tagged using either the IEEE 802.1 frame format or the Multi-level frame format.')
promVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanName.setDescription('A user-assignable name for this Vlan.')
promVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanIfIndex.setDescription('Each virtual LAN has a virtual interface associated with it. This enables RMON monitoring to occur per-VLAN. It also provides a handy mechanism to map virtual LANs to bridge ports by mapping them with the ifStack table from the Interface MIB.')
promVlanAFTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanAFTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanAFTIndex.setDescription("The address table used for this VLAN for explicitly tagged frames (frames received in a trunking frame format or from a port in port-based VLAN mode.) Normally, each VLAN maps to a unique address table. This is useful for environments with duplicate host addresses appear on different VLANs on different ports. For those environments where duplicate hosts on different VLANs don't exist, or exist but are on the same port, and where the address table size and/or aging is a concern, then multiple VLANs may be mapped to the same address table.")
promVlanBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanBridgeIndex.setDescription('The bridge resource which is bound to this Vlan.')
promVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("destroyRequest", 3), ("underDestruction", 4), ("active", 5), ("otherError", 6), ("entryExistsError", 7), ("invalidVlanID", 8), ("invalidVlanName", 9), ("invalidVlanAFTIndex", 10), ("invalidVlanBridgeIndex", 11), ("invalidVlanInitialHashTableSize", 12), ("invalidVlanAutoIncrementHTSize", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanStatus.setDescription('The status of an entry to be created or deleted. When adding an entry all fields will be set, and then the status is set to createRequest(1) (indicating that the entry is to be created). When deleting an entry the status is set to destroyRequest(3) (indicating that the entry is to be destroyed). During creation the status will be underCreation(2). If the creation is successful, then the status will be set to active(5). Otherwise if the creation was not successful then one of the following error codes will be set and the entry will not be created: otherError(6) - An error other than the others defined. entryExistsError(7) - An entry already exists. invalidVlanID(8) - the VLAN ID is invalid. invalidVlanName(9) - the VLAN name is invalid. invalidVlanAFTIndex(10) - the VLAN AFT index is invalid. invalidVlanBridgeIndex(11) - the VLAN bridge index is invalid. invalidVlanInitialHashTableSize(12) - the VLAN initial hash table size is invalid. invalidVlanAutoIncrementHTSize(13) - the VLAN auto increment hash table size is invalid.')
promVlanInitialHashTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanInitialHashTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanInitialHashTableSize.setDescription('The initial hash table size used for MAC addresses on this VLAN. This attribute may only be set when promVlanStatus is set to createRequest(1). It must be a power of 2 between 16 and 8192, inclusive.')
promVlanAutoIncrementHTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanAutoIncrementHTSize.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanAutoIncrementHTSize.setDescription('This attribute specifies whether or not the hash table size used for MAC addresses on this VLAN is automatically increased as necessary to hold more MAC addresses. This attribute may only be set when promVlanStatus is set to createRequest(1).')
promVlanLearnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLearned", 1), ("vtpSnooping", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlanLearnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promVlanLearnStatus.setDescription('This attribute indicates if the VLAN was learned. If learned it indicates if the VLAN was learned either by VTP or Auto VLAN creation.')
promVlanMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 3))
prom3ComMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1))
prom3ComMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1), )
if mibBuilder.loadTexts: prom3ComMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: prom3ComMappingTable.setDescription('')
prom3ComMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "prom3ComMappingTableIndex"))
if mibBuilder.loadTexts: prom3ComMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: prom3ComMappingEntry.setDescription('')
prom3ComMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prom3ComMappingTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: prom3ComMappingTableIndex.setDescription('')
prom3ComMappingTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prom3ComMappingTableName.setStatus('mandatory')
if mibBuilder.loadTexts: prom3ComMappingTableName.setDescription('A user-readable name associated with this table.')
prom3ComMappingTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("entryExistsError", 4), ("otherError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prom3ComMappingTableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: prom3ComMappingTableStatus.setDescription('The status of an entry to be created. When adding an entry all fields will be set, and then the status is set to createRequest(1), indicating that the entry is to be created. If the creation is successful, then the status will be set to active(3). Otherwise if the creation was not successful then one of the following error codes will be set and the entry will not be created: entryExistsError(4) - An entry already exists. otherError(5) - An error other than the others defined.')
promVlan3ComMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2))
promVlan3ComMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1), )
if mibBuilder.loadTexts: promVlan3ComMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: promVlan3ComMappingTable.setDescription('')
promVlan3ComMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "prom3ComMappingTableIndex"), (0, "PROMINET-MIB", "promVlan3ComMappingIndex"))
if mibBuilder.loadTexts: promVlan3ComMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promVlan3ComMappingEntry.setDescription('')
promVlan3ComMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlan3ComMappingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promVlan3ComMappingIndex.setDescription('The external tag of this 3Com VLAN.')
promVlan3ComMappingVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlan3ComMappingVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promVlan3ComMappingVlanID.setDescription('The VLAN ID of the VLAN that this 3Com tag is associated with.')
promVlan3ComMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("otherError", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlan3ComMappingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promVlan3ComMappingStatus.setDescription('The status of an entry to be created. When adding an entry all fields will be set, and then the status is set to createRequest(1), indicating that the entry is to be created. If the creation is successful, then the status will be set to active(3). Otherwise if the creation was not successful then one of the following error codes will be set and the entry will not be created: otherError(4) - An error other than the others defined.')
promVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 4))
promVirtualSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1), )
if mibBuilder.loadTexts: promVirtualSwitchPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualSwitchPortTable.setDescription('')
promVirtualSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promVirtualSwitchPortIndex"))
if mibBuilder.loadTexts: promVirtualSwitchPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualSwitchPortEntry.setDescription('An instance of a virtual switch port indicates that this switch port is a member of this VLAN.')
promVirtualSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualSwitchPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualSwitchPortIndex.setDescription('The Resource ID of the virtual switch port bound to the VLAN.')
promVirtualSwitchPortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("trunkingFormat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVirtualSwitchPortFormat.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualSwitchPortFormat.setDescription("Typically, a VLAN capable switch port has one of three modes: access, trunk, or hybrid. In access mode, the port sends frames in clear format (untagged). In trunk mode, all outbound frames are translated into the switch port's configured trunking format. In hybrid mode, it is possible for a port to send trunked frames for some VLANs and clear frames for others. In this case, the switch port is configured to trunk, and the virtual switch port(s) for those VLANs that require clear formatted frames are configured to be override the switch port setting. This is done by setting this object to clear(1). By default, the value of this object is trunkingFormat(2) which means to use the trunking format configured for this switch port. (which may be clear).")
promVirtualSwitchPortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVirtualSwitchPortBridgePort.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualSwitchPortBridgePort.setDescription('The bridge port resource bound to this virtual port.')
promVirtualSwitchPortBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualSwitchPortBindingType.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualSwitchPortBindingType.setDescription('The method by which this switch port was bound to the VLAN. If the value is static(1), the binding was manually created by the administrator. If the value is persistent(2), the binding was created by the switch because the VLAN is the port-based VLAN for the switch port, or the switch port VLAN Binding Method is persistent. These bindings may not be removed. If the value is dynamic(3), the binding was created by the switch as a result of receiving a tagged frame on the switch port with a VLAN ID corresponding to the VLAN.')
promVirtualSwitchPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("otherError", 4), ("entryExistsError", 5), ("entryNoExistError", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVirtualSwitchPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualSwitchPortStatus.setDescription('The status of an entry to be created or deleted. When adding an entry all fields will be set, and then the status is set to createRequest(1) (indicating that the entry is to be created). When deleting an entry the status is set to destroyRequest(2) (indicating that the entry is to be destroyed). If the creation is successful, then the status will be set to active(3). Otherwise if the creation was not successful then one of the following error codes will be set and the entry will not be created: otherError(4) - An error other than the others defined. entryExistsError(5) - On creation, an entry already exists. On deletion, the entry may not be removed. entryNoExistError(6) - The VLAN specified by ID does not exist.')
promVirtualModulePortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2), )
if mibBuilder.loadTexts: promVirtualModulePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortTable.setDescription('')
promVirtualModulePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1), ).setIndexNames((0, "PROMINET-MIB", "promVlanID"), (0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promVirtualModulePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortEntry.setDescription('An instance of a virtual module port indicates that this module port is a member of this VLAN.')
promVirtualModulePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortIndex.setDescription('The Resource ID of the virtual switch port bound to the VLAN.')
promVirtualModulePortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("trunkingFormat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortFormat.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortFormat.setDescription("Typically, a VLAN capable switch port has one of three modes: access, trunk, or hybrid. In access mode, the port sends frames in clear format (untagged). In trunk mode, all outbound frames are translated into the switch port's configured trunking format. In hybrid mode, it is possible for a port to send trunked frames for some VLANs and clear frames for others. In this case, the switch port is configured to trunk, and the virtual switch port(s) for those VLANs that require clear formatted frames are configured to be override the switch port setting. This is done by setting this object to clear(1). By default, the value of this object is trunkingFormat(2) which means to use the trunking format configured for this switch port. (which may be clear).")
promVirtualModulePortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 3), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortBridgePort.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortBridgePort.setDescription('The bridge port resource bound to this virtual port.')
promVirtualModulePortBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortBindingType.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortBindingType.setDescription('The method by which this switch port was bound to the VLAN. If the value is static(1), the binding was manually created by the administrator. If the value is persistent(2), the binding was created by the switch because the VLAN is the port-based VLAN for the switch port, or the switch port VLAN Binding Method is persistent. These bindings may not be removed. If the value is dynamic(3), the binding was created by the switch as a result of receiving a tagged frame on the switch port with a VLAN ID corresponding to the VLAN.')
promVirtualModulePortModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortModuleName.setDescription('The name for this module.')
promVirtualModulePortPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortPortName.setStatus('mandatory')
if mibBuilder.loadTexts: promVirtualModulePortPortName.setDescription('The name for this port.')
promEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10))
promEventMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 1))
promEventTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1), )
if mibBuilder.loadTexts: promEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTable.setDescription('Table of events currently supported.')
promEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promEventIndex"))
if mibBuilder.loadTexts: promEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promEventEntry.setDescription('Attributes associated with the event.')
promEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promEventIndex.setDescription('')
promEventMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventMode.setStatus('mandatory')
if mibBuilder.loadTexts: promEventMode.setDescription('Disabling an event prevents this event from taking any actions when triggered. When set to enable to the console, the event will print the event information to the console serial port. The user can select whether to view log messages, trap messages or any event at the console.')
promEventLogAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventLogAction.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogAction.setDescription('When enabled, this action will cause an event log entry to be created.')
promEventTrapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventTrapAction.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapAction.setDescription('When enabled, this event will cause an SNMP trap to be generated.')
promEventConsoleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventConsoleAction.setStatus('mandatory')
if mibBuilder.loadTexts: promEventConsoleAction.setDescription('When enabled, this event will cause a message to printed to the console serial port.')
promEventLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 2))
promLogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promLogTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: promLogTableMaxSize.setDescription('The maximum number of entries in the log table. Changing this value causes the existing log to be truncated and rebuilt.')
promLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promLogLastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promLogLastEntry.setDescription('The log index of the last entry entered in the log.')
promLogWraps = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promLogWraps.setStatus('mandatory')
if mibBuilder.loadTexts: promLogWraps.setDescription('The number of times that the last entry has wrapped from 65K back to 1.')
promEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 3))
promEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1), )
if mibBuilder.loadTexts: promEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogTable.setDescription('The log table for the events in the event table that are enabled for the Log Action.')
promEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promEventLogIndex"))
if mibBuilder.loadTexts: promEventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogEntry.setDescription('An entry in the log indicates information associated with a particular event.')
promEventLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogEventIndex.setDescription('The index that uniquely identifies the event that caused this log entry.')
promEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogIndex.setDescription('An index that uniquely identifies this log entry.')
promEventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogTime.setDescription('The value of sysUpTime when this event was triggered.')
promEventLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogDescr.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogDescr.setDescription('The event log description.')
promEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogType.setDescription('The type of event that caused this log entry.')
promEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogSeverity.setDescription('The severity associated with this event. It is recommended that the severity be interpreted in the following manner: 0-19: Normal 20-39: Informational 40-59: Warning 60-79: Alarm 80-99: Severe Error 100: Failure.')
promEventLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogDTM.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogDTM.setDescription('The date and time when this log entry was made. The format is yy-Mon- dd hh:mm:ss, time is in 24 hour time.')
promEventLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogResType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogResType.setDescription("The type of object (if provided) that triggered this event. If not provided, the value is equal to 'Invalid Resource'.")
promEventLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogResID.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogResID.setDescription('The instance of this resource (if provided - see promEventLogResType) that triggered this event.')
promEventLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogResLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogResLeaf.setDescription("A number corresponding to the attribute associated with this resource and this event entry. It corresponds exactly to the leaf MIB number of the MIB that manages this resource. For example, if a port's mode changed, the configuration event log entry would indicate the value of 5 which is the leaf index of the promPortMode within the promPortTable MIB table.")
promEventLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogValueType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogValueType.setDescription('The data type associated with the log event value. This object indicates how to interpret the data stored in the event log value: - none(1) indicates no value returned. - integer32(2) - a 4 byte unsigned integer. - integer64(3) - an 8 byte unsigned integer. - displayString(4) - a null terminated (or up to 8 characters) string. - ipv4NetworkAddress(5) - a 4 byte IP version 4 network address. - ieee802MACAddress(6) - a 6 byte MAC Address. - timeticks(7) - sysUpTime type value (4 bytes)')
promEventLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogValue.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogValue.setDescription('The value associated with the event encoded in an octet string. Refer to promEventLogValueType for how to interpret this value. The value encoded in this string is in Big Endian order.')
promEventLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogEpochTime.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogEpochTime.setDescription('The number of time ticks since the epoch when this event was logged. The interpretation of this value is as follows: struct DateTimeOvly { UNS32 year:6; UNS32 month:4; UNS32 day:5; UNS32 hour:5; UNS32 minute:6; UNS32 second:6; }; The epoch is January 1, 1997, at 00:00:00. A value of 0 refers to this date and time. ')
promEventLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogID.setStatus('mandatory')
if mibBuilder.loadTexts: promEventLogID.setDescription('A unique index that identifies the occurence of this event. This ID can be correlated between traps, logs and the like.')
promShutdownLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 4))
promShutdownLogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promShutdownLogTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: promShutdownLogTableMaxSize.setDescription('The maximum number of entries in the non-volatile log table. Changing the value of this object changes the maximum number of entries to be stored in Shutdown.')
promShutdownLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promShutdownLogLastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promShutdownLogLastEntry.setDescription('The ID of the last entry made to the shutdown log.')
promShutdownLogAcknowledged = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-acknowledged", 1), ("acknowledged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promShutdownLogAcknowledged.setStatus('mandatory')
if mibBuilder.loadTexts: promShutdownLogAcknowledged.setDescription('This object is to set to acknowledged(2) the first time the Shutdown Log Table is accessed indicating that the Shutdown log has been read (at least once) since the system restarted.')
promEventShutdownLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 5))
promEventShutdownLogTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1), )
if mibBuilder.loadTexts: promEventShutdownLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogTable.setDescription('A table of the last events logged before the system restarted.')
promEventShutdownLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promEventShutdownLogIndex"))
if mibBuilder.loadTexts: promEventShutdownLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogEntry.setDescription('A log entry stored in non-volatile memory.')
promEventShutdownLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogEventIndex.setDescription('The index that uniquely identifies the event that caused this ShutdownLog entry.')
promEventShutdownLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogIndex.setDescription('An index that uniquely identifies this ShutdownLog entry.')
promEventShutdownLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogTime.setDescription('The value of sysUpTime when this event was triggered. Note, the value corresponds to the sysUpTime when the system was last running (i.e. before it was shutdown.)')
promEventShutdownLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogDescr.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogDescr.setDescription('The event ShutdownLog description.')
promEventShutdownLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogType.setDescription('The type of event that caused this ShutdownLog entry.')
promEventShutdownLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogSeverity.setDescription('The severity associated with this event. It is recommended that the severity be interpreted in the following manner: 0-19: Normal 20-39: Informational 40-59: Warning 60-79: Alarm 80-99: Severe Error 100: Failure.')
promEventShutdownLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogDTM.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogDTM.setDescription('The date and time when this ShutdownLog entry was made. The format is yy-Mon-dd hh:mm:ss, time is in 24 hour time.')
promEventShutdownLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogResType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogResType.setDescription('The type of object (if provided) that triggered this event. If not provided, the value is invalid.')
promEventShutdownLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogResID.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogResID.setDescription('The instance of this resource (if provided) that triggered this event.')
promEventShutdownLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogResLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogResLeaf.setDescription('To be provided.')
promEventShutdownLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogValueType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogValueType.setDescription('The data type associated with the ShutdownLog event value. This object indicates how to interpret the data stored in the event ShutdownLog value.')
promEventShutdownLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogValue.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogValue.setDescription('The value associated with the event encoded in an octet string. ')
promEventShutdownLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogEpochTime.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogEpochTime.setDescription('The number of time ticks since the epoch when this event was logged. The interpretation of this value is as follows: struct DateTimeOvly { UNS32 year:6; UNS32 month:4; UNS32 day:5; UNS32 hour:5; UNS32 minute:6; UNS32 second:6; }; The epoch is January 1, 1997, at 00:00:00. A value of 0 refers to this date and time. ')
promEventShutdownLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogID.setStatus('mandatory')
if mibBuilder.loadTexts: promEventShutdownLogID.setDescription('A unique index that identifies the occurence of this event. This ID can be correlated between traps, logs and the like.')
promEventTrapMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 6))
promEventTrapEventIndex = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapEventIndex.setDescription('The index that uniquely identifies the event that caused this trap.')
promEventTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapTime.setDescription('The value of sysUpTime when this event was triggered.')
promEventTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapDescr.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapDescr.setDescription('The event log description.')
promEventTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 4), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapType.setDescription('The type of event that caused this trap.')
promEventTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapSeverity.setDescription('The severity associated with this event. It is recommended that the severity be interpreted in the following manner: 0-19: Normal 20-39: Informational 40-59: Warning 60-79: Alarm 80-99: Severe Error 100: Failure.')
promEventTrapDTM = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapDTM.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapDTM.setDescription('The date and time when this trap was sent. The format is yy-Mon- dd hh:mm:ss, time is in 24 hour time.')
promEventTrapResType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 7), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapResType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapResType.setDescription("The type of object (if provided) that triggered this event. If not provided, the value is equal to 'Invalid Resource'.")
promEventTrapResID = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 8), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapResID.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapResID.setDescription('The instance of this resource (if provided - see promEventTrapResType) that triggered this event.')
promEventTrapResLeaf = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapResLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapResLeaf.setDescription("A number corresponding to the attribute associated with this resource and this event entry. It corresponds exactly to the leaf MIB number of the MIB that manages this resource. For example, if a port's mode changed, the configuration event log entry would indicate the value of 5 which is the leaf index of the promPortMode within the promPortTable MIB table.")
promEventTrapValueType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 10), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapValueType.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapValueType.setDescription('The data type associated with the trap event value. This object indicates how to interpret the data stored in the event trap value: - none(1) indicates no value returned. - integer32(2) - a 4 byte unsigned integer. - integer64(3) - an 8 byte unsigned integer. - displayString(4) - a null terminated (or up to 8 characters) string. - ipv4NetworkAddress(5) - a 4 byte IP version 4 network address. - ieee802MACAddress(6) - a 6 byte MAC Address. - timeticks(7) - sysUpTime type value (4 bytes)')
promEventTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapValue.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapValue.setDescription('The value associated with the event encoded in an octet string. Refer to promEventTrapValueType for how to interpret this value. The value encoded in this string is in Big Endian order.')
promEventTrapEpochTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapEpochTime.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapEpochTime.setDescription('The number of time ticks since the epoch when this event was logged. The interpretation of this value is as follows: struct DateTimeOvly { UNS32 year:6; UNS32 month:4; UNS32 day:5; UNS32 hour:5; UNS32 minute:6; UNS32 second:6; }; The epoch is January 1, 1997, at 00:00:00. A value of 0 refers to this date and time. ')
promEventTrapID = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapID.setStatus('mandatory')
if mibBuilder.loadTexts: promEventTrapID.setDescription('A unique index that identifies the occurence of this event. This ID can be correlated between traps, logs and the like.')
promAlarmMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 11))
promAlarmGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 11, 1))
promAlarmGeneralActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 11, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAlarmGeneralActiveEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promAlarmGeneralActiveEntries.setDescription('The total number of alarm entries in the triggered state currently in the alarm table.')
promAlarmGeneralTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 2167, 11, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAlarmGeneralTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: promAlarmGeneralTimeStamp.setDescription('The value of sysUpTime when any alarm state last changed (either triggering a new alarm or re-arming an old one).')
promAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 11, 2))
promActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2), )
if mibBuilder.loadTexts: promActiveAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmTable.setDescription('A table of all alarms in the triggered state.')
promActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1), ).setIndexNames((0, "PROMINET-MIB", "promActiveAlarmIndex"))
if mibBuilder.loadTexts: promActiveAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmEntry.setDescription('An alarm in the triggered state.')
promActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmIndex.setDescription('The unique index that identifies this alarm.')
promActiveAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmName.setDescription('The name of this alarm.')
promActiveAlarmValueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmValueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmValueHigh.setDescription('The high order 32 bits of the value that triggered this alarm.')
promActiveAlarmValueLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmValueLow.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmValueLow.setDescription('The low order 32 bits of the value that triggered this alarm.')
promActiveAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmVariable.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmVariable.setDescription('The OID of the alarm variable if this is a user-created alarm (null otherwise).')
promActiveAlarmResType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 6), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmResType.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmResType.setDescription('The resource type of this alarm if this is an internally created alarm.')
promActiveAlarmResID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 7), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmResID.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmResID.setDescription('The resource identifier associated with this alarm if this is an internally created alarm.')
promActiveAlarmLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmLeaf.setDescription("The leaf index of the MIB table used to manage this resource that is associated with this alarm, if this is an internally created alarm. For example, if this alarm was created to monitor a port's status, then the value of this object will be 6, corresponding to the leaf index of the promPortStatus object.")
promActiveAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmOwner.setStatus('mandatory')
if mibBuilder.loadTexts: promActiveAlarmOwner.setDescription('This is the owner of the alarm.')
promSnmpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 13))
promSystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,2)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
if mibBuilder.loadTexts: promSystemTrap.setDescription('A promSystemTrap is sent by the agent when a system event is triggered. These events are usually triggered when the software encounters an unexpected situation, e.g. a hardware failure or a software bug.')
promConfigurationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,3)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
if mibBuilder.loadTexts: promConfigurationTrap.setDescription('A promConfigurationTrap is sent by the agent when the configuration event is triggered. These events are triggered when a configuration change is made.')
promTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,4)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
if mibBuilder.loadTexts: promTemperatureTrap.setDescription('A promTemperatureTrap is sent by the agent when the temperature event is triggered. This event is triggered when a temperature probe detects the temperature crossing a threshold.')
promResourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,5)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
if mibBuilder.loadTexts: promResourceTrap.setDescription('A promResourceTrap is sent by the agent when the resource event is triggered. The resource event is triggered when a resource is added or removed from the system.')
promFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,6)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
if mibBuilder.loadTexts: promFanTrap.setDescription('A promFanTrap is sent by the agent when the fan status event is triggered. The fan status event is triggered when a fan has a change in its status.')
promPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,9)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
if mibBuilder.loadTexts: promPowerTrap.setDescription('A promPowerTrap is sent by the agent when the power event is triggered. These events are triggered when a power supply changes status.')
promVtpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 14))
promVtpSnoopingSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 14, 1))
promVtpSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVtpSnoopingState.setStatus('mandatory')
if mibBuilder.loadTexts: promVtpSnoopingState.setDescription('When this object is set to enable(1), the switch attempts to learn VLANs from a major networking equipment vendor on switch ports that have their VTP Snooping parameter set to enable(1). trunking mode is IEEE 802.1Q Format or Multi-level Format. The factory default value for this object is disable(2).')
promVtpSnoopingDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVtpSnoopingDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: promVtpSnoopingDomainName.setDescription('The VTP Snooping Domain Name of the switch. A switch may only belong to one domain.')
promVtpSnoopingUpdaterId = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVtpSnoopingUpdaterId.setStatus('mandatory')
if mibBuilder.loadTexts: promVtpSnoopingUpdaterId.setDescription('The IP address of the switch from which the VTP Snooping configuration was learned.')
promVtpSnoopingUpdateTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVtpSnoopingUpdateTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: promVtpSnoopingUpdateTimeStamp.setDescription('The time at which the VTP configuration changed on the initiating switch.')
promVtpSnoopingConfigRevNum = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVtpSnoopingConfigRevNum.setStatus('mandatory')
if mibBuilder.loadTexts: promVtpSnoopingConfigRevNum.setDescription('VTP Configuration Revision Number on the switch that initiated the VTP message exchange.')
promPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 15))
promTCPPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 15, 1))
promTCPPortHTTP = MibScalar((1, 3, 6, 1, 4, 1, 2167, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(80, 80), ValueRangeConstraint(9000, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTCPPortHTTP.setStatus('mandatory')
if mibBuilder.loadTexts: promTCPPortHTTP.setDescription('The HTTP port of the switch web server. It allows the user to modify the HTTP port value to be 80 (default) or between 9000 and 65535.')
promTCPPortTelnet = MibScalar((1, 3, 6, 1, 4, 1, 2167, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(23, 23), ValueRangeConstraint(9000, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTCPPortTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: promTCPPortTelnet.setDescription('The Telnet port of the switch. It allows the user to modify the Telnet port value to be 23 (default) or between 9000 and 65535.')
mibBuilder.exportSymbols("PROMINET-MIB", promPortDuplexTable=promPortDuplexTable, promPortMirroringMirrorPort=promPortMirroringMirrorPort, promTempUpperWarning=promTempUpperWarning, promBridgeStpHelloTime=promBridgeStpHelloTime, promEventLogMgt=promEventLogMgt, promModules=promModules, promBufferLowOverflowDrops=promBufferLowOverflowDrops, prominet=prominet, promPortRateLimitTable=promPortRateLimitTable, promBridgePortDesignatedBridge=promBridgePortDesignatedBridge, promHuntGroupName=promHuntGroupName, promPortRemoteFaultMgt=promPortRemoteFaultMgt, promEventLogID=promEventLogID, promBridgePortDesignatedPort=promBridgePortDesignatedPort, promL2AddressStatus=promL2AddressStatus, promLogLastEntry=promLogLastEntry, promBridgeStpMaxAge=promBridgeStpMaxAge, promEventTable=promEventTable, promEventShutdownLogIndex=promEventShutdownLogIndex, promL2AddrControlMgt=promL2AddrControlMgt, promSwitchPortIntrusionTrap=promSwitchPortIntrusionTrap, dec=dec, promBridgeStpPriority=promBridgeStpPriority, promVirtualSwitchPortStatus=promVirtualSwitchPortStatus, promEventShutdownLogEventIndex=promEventShutdownLogEventIndex, promVlan3ComMappingEntry=promVlan3ComMappingEntry, promVirtualModulePortBindingType=promVirtualModulePortBindingType, promL2AddressEntry=promL2AddressEntry, EventValueType=EventValueType, promShutdownLogLastEntry=promShutdownLogLastEntry, promModuleType=promModuleType, promHuntGroupMgt=promHuntGroupMgt, promBridgeStpRootPort=promBridgeStpRootPort, promL2AddressChangeIndexChanged=promL2AddressChangeIndexChanged, promBridgeMode=promBridgeMode, promBufferMemory=promBufferMemory, promInventoryManufactureInfo=promInventoryManufactureInfo, promEventShutdownLogResID=promEventShutdownLogResID, promSwitchPortEntry=promSwitchPortEntry, promBufferFabricPort=promBufferFabricPort, promPortMirroringSourceSubPort=promPortMirroringSourceSubPort, promSwitchPortConvertToStatic=promSwitchPortConvertToStatic, ema=ema, promShutdownLogMgt=promShutdownLogMgt, promSwitchAgingTime=promSwitchAgingTime, promConfigurationTrap=promConfigurationTrap, promPortRateLimitRate=promPortRateLimitRate, promAgentWebServerHelpDirectory=promAgentWebServerHelpDirectory, promSwitchPortKnownMode=promSwitchPortKnownMode, promPortSpeedMode=promPortSpeedMode, promInventoryEntry=promInventoryEntry, prom3ComMappingTable=prom3ComMappingTable, prom3ComMappingTableStatus=prom3ComMappingTableStatus, promBridgePortPathCost=promBridgePortPathCost, promVtpSnooping=promVtpSnooping, promBridgeType=promBridgeType, promChassisSystemReset=promChassisSystemReset, marconi=marconi, promBridgePortMgmt=promBridgePortMgmt, promL2AddressIndex=promL2AddressIndex, promVirtualSwitchPortIndex=promVirtualSwitchPortIndex, promPortName=promPortName, promL2AddressControlPriority=promL2AddressControlPriority, promVirtualModulePortBridgePort=promVirtualModulePortBridgePort, promPowerSupplyOutputCapacity=promPowerSupplyOutputCapacity, promTempUpperLimit=promTempUpperLimit, promVlanInitialHashTableSize=promVlanInitialHashTableSize, promHuntGroupIndex=promHuntGroupIndex, promModuleBaseType=promModuleBaseType, promTempIndex=promTempIndex, promVlan3ComMappingVlanID=promVlan3ComMappingVlanID, promSwitchPortFastStart=promSwitchPortFastStart, promEventTrapMgmt=promEventTrapMgmt, promChassisGen=promChassisGen, promResourceTrap=promResourceTrap, promPowerSupplyEntry=promPowerSupplyEntry, promModuleEntry=promModuleEntry, promPortMirroringRate=promPortMirroringRate, promInventoryModelNumber=promInventoryModelNumber, promVtpSnoopingUpdaterId=promVtpSnoopingUpdaterId, promL2AddressPersistence=promL2AddressPersistence, promPowerSupplyIndex=promPowerSupplyIndex, mib2ext=mib2ext, promVlanStatus=promVlanStatus, promEventShutdownLogValue=promEventShutdownLogValue, promModulePorts=promModulePorts, esrSwitch=esrSwitch, promL2AddrChangeMgt=promL2AddrChangeMgt, promEventShutdownLogDTM=promEventShutdownLogDTM, promEventTrapResType=promEventTrapResType, promAgentCommunity=promAgentCommunity, promPowerControlTable=promPowerControlTable, promBufferLowStaleDrops=promBufferLowStaleDrops, promBufferCongestionDrops=promBufferCongestionDrops, promVtpSnoopingConfigRevNum=promVtpSnoopingConfigRevNum, promPowerControlUsed=promPowerControlUsed, promPortPacePriorityMgt=promPortPacePriorityMgt, promL2AddressMacAddress=promL2AddressMacAddress, promBufferEntry=promBufferEntry, promPortRateLimitEntry=promPortRateLimitEntry, promTempLowerWarning=promTempLowerWarning, promPortType=promPortType, promSwitchPort3ComMappingTableIndex=promSwitchPort3ComMappingTableIndex, promBufferPriorityAllocation=promBufferPriorityAllocation, promVlanAFTIndex=promVlanAFTIndex, promEventLogResID=promEventLogResID, promAlarms=promAlarms, promEventLogEventIndex=promEventLogEventIndex, promModuleTable=promModuleTable, promActiveAlarmValueLow=promActiveAlarmValueLow, promBridgeStpRootCost=promBridgeStpRootCost, promL2AddressControlStatus=promL2AddressControlStatus, promVtpSnoopingDomainName=promVtpSnoopingDomainName, ResourceType=ResourceType, promTCPPortTelnet=promTCPPortTelnet, promBufferMgt=promBufferMgt, promActiveAlarmResID=promActiveAlarmResID, promTemperature=promTemperature, promPortAutoNegotiationSpeedAdvertisement=promPortAutoNegotiationSpeedAdvertisement, promPortCategoryMgt=promPortCategoryMgt, promModuleUpdateTime=promModuleUpdateTime, promInventorySerialNumber=promInventorySerialNumber, promPortRateLimitMode=promPortRateLimitMode, promPowerControlEntry=promPowerControlEntry, promL2AddressControlMacAddress=promL2AddressControlMacAddress, promL2AddressChangeIndex=promL2AddressChangeIndex, promPowerMgmtCtl=promPowerMgmtCtl, promCommunityAccess=promCommunityAccess, promEventShutdownLog=promEventShutdownLog, promPortSpeedState=promPortSpeedState, promEvents=promEvents, promAlarmGeneralTimeStamp=promAlarmGeneralTimeStamp, promBridgePortState=promBridgePortState, promEventShutdownLogID=promEventShutdownLogID, promL2AddrDatabaseMgt=promL2AddrDatabaseMgt, promEventMode=promEventMode, promPortDuplexState=promPortDuplexState, promPortSpeedEntry=promPortSpeedEntry, promEventLogValue=promEventLogValue, promAgentMgrIndex=promAgentMgrIndex, promVlan3ComMapping=promVlan3ComMapping, promSwitchPortPhysicalPort=promSwitchPortPhysicalPort, promPortBaseType=promPortBaseType, BridgeId=BridgeId, promPortRemoteFaultDetect=promPortRemoteFaultDetect, promPortAutoNegotiationTable=promPortAutoNegotiationTable, promL2AddressChangeSummary=promL2AddressChangeSummary, promVtpSnoopingSwitch=promVtpSnoopingSwitch, promL2AddrMgmt=promL2AddrMgmt, promPortMirroringSamplerType=promPortMirroringSamplerType, promL2AddressControlTable=promL2AddressControlTable, promEventShutdownLogTime=promEventShutdownLogTime, promVlan3ComMappingTable=promVlan3ComMappingTable, promPortGroupBinding=promPortGroupBinding, promEventTrapValueType=promEventTrapValueType, odsTPS=odsTPS, promSwitchPortLearningMode=promSwitchPortLearningMode, promPortAutoNegotiationMode=promPortAutoNegotiationMode, promSwitchGen=promSwitchGen, promBridgePortForwardTransitions=promBridgePortForwardTransitions, promEventLogAction=promEventLogAction, promVirtualModulePortTable=promVirtualModulePortTable, promEventLog=promEventLog, promPorts=promPorts, promBufferAgeTimer=promBufferAgeTimer, promBridgeMgmt=promBridgeMgmt, promBufferPriorityServicing=promBufferPriorityServicing, promPortRemoteFaultTable=promPortRemoteFaultTable, promActiveAlarmTable=promActiveAlarmTable, gsEMIB=gsEMIB, promPortAutoNegotiationDuplexAdvertisement=promPortAutoNegotiationDuplexAdvertisement, promVlan3ComMappingIndex=promVlan3ComMappingIndex, promSwitchPortVlanID=promSwitchPortVlanID, promVirtualModulePortPortName=promVirtualModulePortPortName, promPortRemoteFaultEntry=promPortRemoteFaultEntry, mib_extensions_1=mib_extensions_1, promCommunityEntry=promCommunityEntry, promEventTrapAction=promEventTrapAction, promEventLogTime=promEventLogTime, promVirtualModulePortModuleName=promVirtualModulePortModuleName, promVlans=promVlans, promCommunityTable=promCommunityTable, promL2AddressControlIndex=promL2AddressControlIndex, promActiveAlarmValueHigh=promActiveAlarmValueHigh, promBridgeIndex=promBridgeIndex, promL2AddressPortBinding=promL2AddressPortBinding, promPortAutoNegotiationMgt=promPortAutoNegotiationMgt, promCommunityTrapReceiver=promCommunityTrapReceiver, promTempLowerLimit=promTempLowerLimit, promBridgePortEntry=promBridgePortEntry, promVlanMappings=promVlanMappings, promSwitchPortAutoVlanCreation=promSwitchPortAutoVlanCreation, prom3ComMappingTableIndex=prom3ComMappingTableIndex, promVlanBridgeIndex=promVlanBridgeIndex, promL2AddrSummaryMgt=promL2AddrSummaryMgt, promEventTrapType=promEventTrapType, promActiveAlarmOwner=promActiveAlarmOwner, promShutdownLogTableMaxSize=promShutdownLogTableMaxSize, promVirtualModulePortEntry=promVirtualModulePortEntry, prom3ComMappingTableName=prom3ComMappingTableName, promL2AddressChangeTable=promL2AddressChangeTable, promEventShutdownLogDescr=promEventShutdownLogDescr, promEventTrapEpochTime=promEventTrapEpochTime, ods=ods, promEventLogResType=promEventLogResType, promPowerSupplyOutputStatus=promPowerSupplyOutputStatus, promPowerSupplyType=promPowerSupplyType, promTemperatureTrap=promTemperatureTrap, promL2AddressCopy=promL2AddressCopy, promPortMirroringTable=promPortMirroringTable, promInventoryVersion=promInventoryVersion, promBufferHighOverflowDrops=promBufferHighOverflowDrops, promEventShutdownLogResLeaf=promEventShutdownLogResLeaf, promModuleSlotOffset=promModuleSlotOffset, promEventLogDescr=promEventLogDescr, promEventTrapDTM=promEventTrapDTM, promHuntGroupTable=promHuntGroupTable, promCommunityString=promCommunityString, promCommunitySecurityLevel=promCommunitySecurityLevel, promSwitchPortIntrusionTrapTimer=promSwitchPortIntrusionTrapTimer, odsLANBlazer=odsLANBlazer, promBufferHighStaleDrops=promBufferHighStaleDrops, promL2AddressChangeWraps=promL2AddressChangeWraps, promActiveAlarmEntry=promActiveAlarmEntry, promL2AddrSummaryEntry=promL2AddrSummaryEntry, promVirtualSwitchPortTable=promVirtualSwitchPortTable, promVlanTable=promVlanTable, promTCPPortMgmt=promTCPPortMgmt, promL2AddressChangeWrapCount=promL2AddressChangeWrapCount, promSystemTrap=promSystemTrap, promL2AddressChangeLast=promL2AddressChangeLast, Timeout=Timeout, promPortFlowControlTable=promPortFlowControlTable, promEventShutdownLogEntry=promEventShutdownLogEntry, promAlarmGeneralActiveEntries=promAlarmGeneralActiveEntries, promBridgePortEnable=promBridgePortEnable, promSwitchPortSTAPMode=promSwitchPortSTAPMode, promBridgeStpTimeSinceTopologyChange=promBridgeStpTimeSinceTopologyChange, promL2AddrSummary=promL2AddrSummary, promVlanMgt=promVlanMgt, prom3ComMappingEntry=prom3ComMappingEntry, promPortFlowControlEntry=promPortFlowControlEntry, promEventTrapResLeaf=promEventTrapResLeaf, promBridgePortDesignatedRoot=promBridgePortDesignatedRoot, promEventIndex=promEventIndex, promBridgePortDesignatedCost=promBridgePortDesignatedCost, promActiveAlarmName=promActiveAlarmName, promPortRateLimitBurstSize=promPortRateLimitBurstSize, promAgentWebServerURL=promAgentWebServerURL, EventCategory=EventCategory, promVirtualSwitchPortBindingType=promVirtualSwitchPortBindingType, promPortCategoryTable=promPortCategoryTable, promEventShutdownLogSeverity=promEventShutdownLogSeverity, promVlanAutoIncrementHTSize=promVlanAutoIncrementHTSize)
mibBuilder.exportSymbols("PROMINET-MIB", promPortMgt=promPortMgt, promEventTrapID=promEventTrapID, promBridgeStpBridgeHelloTime=promBridgeStpBridgeHelloTime, promPortMirroringMgt=promPortMirroringMgt, promVtpSnoopingState=promVtpSnoopingState, intel=intel, promBridgePortTable=promBridgePortTable, promVlanIfIndex=promVlanIfIndex, promVlanID=promVlanID, promL2AddressControlPortBinding=promL2AddressControlPortBinding, promEventShutdownLogType=promEventShutdownLogType, promL2AddressControlEntry=promL2AddressControlEntry, promL2AddressForward=promL2AddressForward, promBridgeStpForwardDelay=promBridgeStpForwardDelay, promEventShutdownLogTable=promEventShutdownLogTable, promEventTrapTime=promEventTrapTime, promEventTrapValue=promEventTrapValue, promEventLogValueType=promEventLogValueType, promBridgeEntry=promBridgeEntry, promBridgeTable=promBridgeTable, promEventMgt=promEventMgt, promHuntGroupNumberOfPorts=promHuntGroupNumberOfPorts, odsLANBlazerMibs=odsLANBlazerMibs, promPortDuplexMode=promPortDuplexMode, promEventLogEpochTime=promEventLogEpochTime, promL2AddressControlVlanID=promL2AddressControlVlanID, esGigaSwitch=esGigaSwitch, promPowerCapacity=promPowerCapacity, promChassisType=promChassisType, DisplayString=DisplayString, promBridgeStpBridgeForwardDelay=promBridgeStpBridgeForwardDelay, promBridgePortIndex=promBridgePortIndex, promSwitchPortMgt=promSwitchPortMgt, promInventory=promInventory, promEventConsoleAction=promEventConsoleAction, promPortSpeedMgt=promPortSpeedMgt, promSnmpTraps=promSnmpTraps, odsLANBlazer7000Mib=odsLANBlazer7000Mib, promPortSpeedTable=promPortSpeedTable, promBridgePortSetDefault=promBridgePortSetDefault, promHuntGroupEntry=promHuntGroupEntry, promBufferIndex=promBufferIndex, promChassisSlots=promChassisSlots, promPowerUsed=promPowerUsed, promPortDuplexMgt=promPortDuplexMgt, promPowerMgmtGen=promPowerMgmtGen, promCommunityAddressType=promCommunityAddressType, promPortDuplexEntry=promPortDuplexEntry, promBridgePortPriority=promBridgePortPriority, promVirtualSwitchPortBridgePort=promVirtualSwitchPortBridgePort, promModuleName=promModuleName, promL2AddressControlPersistence=promL2AddressControlPersistence, promLogWraps=promLogWraps, MacAddress=MacAddress, promPortAutoNegotiationFlowControlAdvertisement=promPortAutoNegotiationFlowControlAdvertisement, promSwitchSuperAgingTime=promSwitchSuperAgingTime, promInventoryResourceIndex=promInventoryResourceIndex, promEventTrapResID=promEventTrapResID, promVirtualSwitchPortEntry=promVirtualSwitchPortEntry, promChassis=promChassis, promPortTable=promPortTable, promPowerSupplyTable=promPowerSupplyTable, promVirtualModulePortFormat=promVirtualModulePortFormat, promPortPacePriorityMode=promPortPacePriorityMode, promPortMirroringIndex=promPortMirroringIndex, promPowerControlMode=promPowerControlMode, promAlarmMgt=promAlarmMgt, promL2AddressVlanID=promL2AddressVlanID, promBridgeStpHoldTime=promBridgeStpHoldTime, promPortMirroringEntry=promPortMirroringEntry, promTCPPortHTTP=promTCPPortHTTP, promL2AddressBindingValid=promL2AddressBindingValid, promSwitchSTPConfig=promSwitchSTPConfig, promEventLogResLeaf=promEventLogResLeaf, promSwitchPortMappingMethod=promSwitchPortMappingMethod, promSwitchPortVlanBindingMethod=promSwitchPortVlanBindingMethod, promPowerTrap=promPowerTrap, promSwitchPortVtpSnooping=promSwitchPortVtpSnooping, promSwitchPortIfIndex=promSwitchPortIfIndex, promVtpSnoopingUpdateTimeStamp=promVtpSnoopingUpdateTimeStamp, prom3ComMapping=prom3ComMapping, promSwitching=promSwitching, promL2AddressChangeMaxEntries=promL2AddressChangeMaxEntries, promPortEntry=promPortEntry, promPortFlowControlMode=promPortFlowControlMode, promVlan3ComMappingStatus=promVlan3ComMappingStatus, promPortConnector=promPortConnector, promSwitchPortIndex=promSwitchPortIndex, promL2AddressChangeEntry=promL2AddressChangeEntry, promPortRateLimitMgt=promPortRateLimitMgt, promEventTrapEventIndex=promEventTrapEventIndex, promEventLogSeverity=promEventLogSeverity, promActiveAlarmLeaf=promActiveAlarmLeaf, promAgent=promAgent, promPowerSupplyInputStatus=promPowerSupplyInputStatus, promAlarmGeneral=promAlarmGeneral, promBridgeStatus=promBridgeStatus, promActiveAlarmVariable=promActiveAlarmVariable, promBridgeStpTopChanges=promBridgeStpTopChanges, promPortPacePriorityEntry=promPortPacePriorityEntry, promInventoryTable=promInventoryTable, promPowerSupplies=promPowerSupplies, promTempValue=promTempValue, promBufferCongestion=promBufferCongestion, promBufferPriorityThreshold=promBufferPriorityThreshold, promPowerControlPriority=promPowerControlPriority, promVirtualModulePortIndex=promVirtualModulePortIndex, promInventoryScratchPad=promInventoryScratchPad, ethernetL3=ethernetL3, promInventoryPowerConsumption=promInventoryPowerConsumption, promActiveAlarmIndex=promActiveAlarmIndex, promVlanEntry=promVlanEntry, promEventTrapDescr=promEventTrapDescr, promEventLogTable=promEventLogTable, promEventShutdownLogValueType=promEventShutdownLogValueType, promBridgeStpBridgeMaxAge=promBridgeStpBridgeMaxAge, promCommunityAddress=promCommunityAddress, promModuleUpdateList=promModuleUpdateList, promAgentWeb=promAgentWeb, promAgentMIBVersion=promAgentMIBVersion, promPortMode=promPortMode, promEventEntry=promEventEntry, promEventShutdownLogResType=promEventShutdownLogResType, promPowerSystems=promPowerSystems, promL2AddressPriority=promL2AddressPriority, promHuntGroupStatus=promHuntGroupStatus, promPortCategoryMode=promPortCategoryMode, promBufferSwitchPort=promBufferSwitchPort, promEventLogType=promEventLogType, promL2AddrSummaryTable=promL2AddrSummaryTable, promEventLogIndex=promEventLogIndex, promTempEntry=promTempEntry, promPortStatus=promPortStatus, promEventShutdownLogEpochTime=promEventShutdownLogEpochTime, promSwitchPortMirrorMode=promSwitchPortMirrorMode, promPortMgmt=promPortMgmt, promAgentGen=promAgentGen, promTempTable=promTempTable, promFanTrap=promFanTrap, promPortFlowControlMgt=promPortFlowControlMgt, promBridgeStpDesignatedRoot=promBridgeStpDesignatedRoot, promActiveAlarmResType=promActiveAlarmResType, promSwitchingLayerII=promSwitchingLayerII, promSwitchPortTable=promSwitchPortTable, promPortAutoNegotiationEntry=promPortAutoNegotiationEntry, promSwitchPortTrunkingMode=promSwitchPortTrunkingMode, promCommunityIndex=promCommunityIndex, promShutdownLogAcknowledged=promShutdownLogAcknowledged, promSwitchPortIgnoreTag=promSwitchPortIgnoreTag, promPortPacePriorityTable=promPortPacePriorityTable, promPortFlowControlState=promPortFlowControlState, promPortCategoryEntry=promPortCategoryEntry, promVlanName=promVlanName, promBridgePortFastStart=promBridgePortFastStart, promModuleSlotWidth=promModuleSlotWidth, promEventLogEntry=promEventLogEntry, promLogTableMaxSize=promLogTableMaxSize, promCommunityStatus=promCommunityStatus, promVlanLearnStatus=promVlanLearnStatus, promVirtualPorts=promVirtualPorts, promL2AddressTable=promL2AddressTable, promPowerSupplyStatus=promPowerSupplyStatus, promPortIndex=promPortIndex, promBufferFabricPortDirection=promBufferFabricPortDirection, promModuleIndex=promModuleIndex, promSwitchPortHuntGroup=promSwitchPortHuntGroup, ResourceId=ResourceId, promL2AddressTableIndex=promL2AddressTableIndex, promEventLogDTM=promEventLogDTM, promEventTrapSeverity=promEventTrapSeverity, promHuntGroupBasePort=promHuntGroupBasePort, promHuntGroupLoadSharing=promHuntGroupLoadSharing, promVirtualSwitchPortFormat=promVirtualSwitchPortFormat, promInventoryResourceType=promInventoryResourceType, promBufferTable=promBufferTable, promBridgePortEnableChangeDetection=promBridgePortEnableChangeDetection, RowStatus=RowStatus)
