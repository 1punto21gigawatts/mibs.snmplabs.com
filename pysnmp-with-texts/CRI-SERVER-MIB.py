#
# PySNMP MIB module CRI-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CRI-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, ModuleIdentity, IpAddress, Bits, Counter32, TimeTicks, NotificationType, iso, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "ModuleIdentity", "IpAddress", "Bits", "Counter32", "TimeTicks", "NotificationType", "iso", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 34))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 34, 2))
class DisplayString(OctetString):
    pass

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class YesNo(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("yes", 1), ("no", 2))

general = MibIdentifier((1, 3, 6, 1, 4, 1, 34, 2, 1))
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 34, 2, 1, 1))
platformType = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ue10000", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformType.setStatus('mandatory')
if mibBuilder.loadTexts: platformType.setDescription('The platform type. Currently, only one platform is defined: Starfire. There is no plan to backport to CS6400 yet.')
platformName = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformName.setStatus('mandatory')
if mibBuilder.loadTexts: platformName.setDescription('The name assigned to a physical machine.')
platformAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: platformAmbientTemp.setDescription('The current ambient temperature of the platform. The temperature will be in Celsius.')
platformReset = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: platformReset.setStatus('mandatory')
if mibBuilder.loadTexts: platformReset.setDescription('This member resets the platform.')
platformInterconnectClockFreq = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformInterconnectClockFreq.setStatus('mandatory')
if mibBuilder.loadTexts: platformInterconnectClockFreq.setDescription('This member is the current interconnect frequency of the platform. The unit is in Hz.')
platformProcClockFreq = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformProcClockFreq.setStatus('mandatory')
if mibBuilder.loadTexts: platformProcClockFreq.setDescription('This member is the current processor clock frequency of the platform. The unit is in Hz.')
platformJtagClockFreq = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformJtagClockFreq.setStatus('mandatory')
if mibBuilder.loadTexts: platformJtagClockFreq.setDescription('This member is the current JTAG clock frequency of the platform. The unit is in Hz. Note: this member is only measurable in the rev-3 control board. If this unit is not available (rev-1 or rev-2 control board), the returning value is set to 0 Hz.')
platformTargetInterconnectClockFreq = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40000000, 120000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: platformTargetInterconnectClockFreq.setStatus('mandatory')
if mibBuilder.loadTexts: platformTargetInterconnectClockFreq.setDescription('This member is the targeted interconnect clock frequency. The unit is in Hz and the valid range is between 40,000,000 Hz and 120,000,000 Hz. The platformTargetInterconnectClockFreq, platformTargetProcClockMultiple and platformTargetJtagClockFreq must be established prior to system operation. They are used as the guideline to set up the interconnect, processor and JTAG clock frequency of the platform. These value are maintained in SSP persistent store.')
platformTargetProcClockMultiple = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("two-to-one", 1), ("three-to-one", 2), ("three-to-two", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: platformTargetProcClockMultiple.setStatus('mandatory')
if mibBuilder.loadTexts: platformTargetProcClockMultiple.setDescription('This member is the targeted processor clock frequency expressed in terms of a specific factor of the system clock. Possible options are factor of 2 or 3. See platformTargetInterconnectClockFreq for more detail. A possible Blackbird processor would use the 3:2 ratio.')
platformTargetJtagClockFreq = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000000, 12000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformTargetJtagClockFreq.setStatus('mandatory')
if mibBuilder.loadTexts: platformTargetJtagClockFreq.setDescription('This member is the targeted JTAG clock frequency. The unit is in Hz. See platformTargetSystemClockFreq for more detail.')
platformMasterConBrd = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformMasterConBrd.setStatus('mandatory')
if mibBuilder.loadTexts: platformMasterConBrd.setDescription('This member is the master control board number.')
platformSysClkConBrd = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformSysClkConBrd.setStatus('mandatory')
if mibBuilder.loadTexts: platformSysClkConBrd.setDescription('This member is the control board providing system clock to the platform.')
conf = MibIdentifier((1, 3, 6, 1, 4, 1, 34, 2, 1, 2))
confNumDomain = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumDomain.setStatus('mandatory')
if mibBuilder.loadTexts: confNumDomain.setDescription('The number of domain in the platform. Domains are created with command, domain_create. Domains are removed with command, domain_remove.')
confNumSysBrd = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumSysBrd.setStatus('mandatory')
if mibBuilder.loadTexts: confNumSysBrd.setDescription('The number of system board in the platform. The max # system board in a Starfire system is 16.')
confNumProc = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumProc.setStatus('mandatory')
if mibBuilder.loadTexts: confNumProc.setDescription('The number of processor in a system board. The max # processors in a Starfire system is 64.')
confNumConBrd = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumConBrd.setStatus('mandatory')
if mibBuilder.loadTexts: confNumConBrd.setDescription('The number of control board in the system. The max # control board in a Starfire system is 2.')
confNumCenterplane = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumCenterplane.setStatus('mandatory')
if mibBuilder.loadTexts: confNumCenterplane.setDescription('The number of centerplane in the system. The max # centerplane half board in a Starfire system is 2.')
confNumSuppBrd = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumSuppBrd.setStatus('mandatory')
if mibBuilder.loadTexts: confNumSuppBrd.setDescription('The number of centerplane support board in the system. The max # of centerplane support board in a Starfire system is 2.')
confNumIoCab = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumIoCab.setStatus('mandatory')
if mibBuilder.loadTexts: confNumIoCab.setDescription('The number of IO cabinet connected to the system. The max # of IO cabinets that can be connected to a Starfire system is 3.')
confNumFanTray = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumFanTray.setStatus('mandatory')
if mibBuilder.loadTexts: confNumFanTray.setDescription('The number of fan tray in the system. The max # of fan trays that can be installed in a Starfire system is 16.')
confNumBulkPower = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumBulkPower.setStatus('mandatory')
if mibBuilder.loadTexts: confNumBulkPower.setDescription('The number of bulk power supply in the system. The max # of bulk power supply in a Starfire system is 8.')
confNumSysBrdPower = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confNumSysBrdPower.setStatus('mandatory')
if mibBuilder.loadTexts: confNumSysBrdPower.setDescription('The number of system board power supply in the system. The max # of system board power supply for a Starfire system is 16. In Starfire, system board power supply is not a separate entity. It is integrated in a system board.')
confSysBrdList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confSysBrdList.setStatus('mandatory')
if mibBuilder.loadTexts: confSysBrdList.setDescription('A string identifying the system boards that are present in the system. The format of the string is: xx-xx-.. where xx is the system board number and the delimiter is a dash.')
confProcList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confProcList.setStatus('mandatory')
if mibBuilder.loadTexts: confProcList.setDescription('A string identifying the processors that are present in the system. The format of the string is: bb.pp-bb.pp-... where bb is the system board number and pp is the processor number within a system board, the delimiter is a dash.')
confConBrdList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confConBrdList.setStatus('mandatory')
if mibBuilder.loadTexts: confConBrdList.setDescription('A string identifying the control boards that are present in the system. The format of the string is: xx-xx-.. where xx is the control board number and dash is the delimiter.')
confCenterplaneList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confCenterplaneList.setStatus('mandatory')
if mibBuilder.loadTexts: confCenterplaneList.setDescription('A string identifying the centerplanes that are present in the system. The format of the string is: xx-xx-.. where xx is the centerplane number and dash is the delimiter.')
confSuppBrdList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confSuppBrdList.setStatus('mandatory')
if mibBuilder.loadTexts: confSuppBrdList.setDescription('A string identifying the centerplane support boards that are present in the system. The format of the string is: xx-xx-... where xx is the centerplane support board number and dash is the delimiter.')
confIoCabList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confIoCabList.setStatus('mandatory')
if mibBuilder.loadTexts: confIoCabList.setDescription('A string identifying the IO cabinets that are connected to the system. The format of the string is: xx-xx-... where xx is the I/O cabinet number and dash is the delimiter.')
confFanTrayList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confFanTrayList.setStatus('mandatory')
if mibBuilder.loadTexts: confFanTrayList.setDescription('A string identifying the fan trays that are present in the system. the format of the string is: xx-xx-... where xx is the fan tray number and dash is the delimiter.')
confBulkPowerList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confBulkPowerList.setStatus('mandatory')
if mibBuilder.loadTexts: confBulkPowerList.setDescription('A string identifying the bulk power supplies that are present in the system. The format of the string is: x-x where x is the bulk power supply number and dash is the delimiter. Bulk power supplies are numbered 0 to 7.')
confSysBrdPowerList = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confSysBrdPowerList.setStatus('mandatory')
if mibBuilder.loadTexts: confSysBrdPowerList.setDescription('A string identifying the system board power supplies that are present in the system. The format of the string: xx-xx-... where xx is the system board power supply number and dash is the delimiter.')
confMaxProcPerSysBrd = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confMaxProcPerSysBrd.setStatus('mandatory')
if mibBuilder.loadTexts: confMaxProcPerSysBrd.setDescription('The maximum number of processor in a system board. There is a max of 4 processors in a Starfire system board.')
confMaxFanPerTray = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confMaxFanPerTray.setStatus('mandatory')
if mibBuilder.loadTexts: confMaxFanPerTray.setDescription('The maximum number of fan in a fan tray. There is a max of 2 fan in a Starfire fan tray.')
confMaxLEDPerFanTray = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confMaxLEDPerFanTray.setStatus('mandatory')
if mibBuilder.loadTexts: confMaxLEDPerFanTray.setDescription('The maximum number of LED in a fan tray. There is a max of 2 LEDs in a Starfire fan tray.')
confMaxLEDPerBulkPower = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confMaxLEDPerBulkPower.setStatus('mandatory')
if mibBuilder.loadTexts: confMaxLEDPerBulkPower.setDescription('The maximum number of LED in a bulk power supply. There is a max of 2 LEDs in a Starfire bulk power supply.')
confMaxLEDPerSysBrd = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confMaxLEDPerSysBrd.setStatus('mandatory')
if mibBuilder.loadTexts: confMaxLEDPerSysBrd.setDescription('The maximum number of LED in a system board.')
confMemAddrMap = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 1, 2, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confMemAddrMap.setStatus('mandatory')
if mibBuilder.loadTexts: confMemAddrMap.setDescription('Starfire supports Shared Memory Domains. This requires the memory boards in the machine to have unique address. Because of this global requirement, Starfire hpost assigns the memory addresses, as well as for attaching boards. DR detach operation also assigns memory addresses. The method used to ensure unique addresses is to assign addresses based on slot number. To allow for 2 way inter-board interleaving, these addresses are slot number*8G. The map is a 16-byte array representing the 16 slots. The lower 7 bits of each byte represents the unique address assign to that slot. The high bit is significant on a write-operation only, when set the corresponding slot of the map will be changed with the address represented by the lower 7 bits. On a read operation the returning data represents the current memory map and the high bit of each byte is always 0. On a write operation the byte with the high bit set will be modified. The SNMP agent will perform a consistency check before committing a write operation. Consistency check simply makes sure no two slots will contain the same address if the write is performed. If consistency check fails, the write operation will return an error. ')
domainTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 3), )
if mibBuilder.loadTexts: domainTable.setStatus('mandatory')
if mibBuilder.loadTexts: domainTable.setDescription('The domain table. The number of entries in the table is given by conf.confNumDomain.')
domainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "domainIndex"))
if mibBuilder.loadTexts: domainEntry.setStatus('mandatory')
if mibBuilder.loadTexts: domainEntry.setDescription('A domain table entry.')
domainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: domainIndex.setDescription('A number assigned to a domain.')
domainName = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
if mibBuilder.loadTexts: domainName.setDescription('Domain name in ASCII format.')
domainNumSysBrd = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainNumSysBrd.setStatus('mandatory')
if mibBuilder.loadTexts: domainNumSysBrd.setDescription('The number of system board assigned to this domain.')
domainSysBrdList = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainSysBrdList.setStatus('mandatory')
if mibBuilder.loadTexts: domainSysBrdList.setDescription('A list of system board entries belonging to this domain. The number of boards is given by domainNumSysBrd. The format of the string is: xx-xx where xx is the system board number and dash is the delimiter.')
domainOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: domainOSVersion.setDescription('The OS version for this domain.')
domainProcList = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainProcList.setStatus('mandatory')
if mibBuilder.loadTexts: domainProcList.setDescription('A list of processors belonging to this domain. The format of the string is in: ss.bb-ss.bb-... where ss is the system board number, bb is the processor number within a system board, and dash is the delimiter.')
domainBootProc = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainBootProc.setStatus('mandatory')
if mibBuilder.loadTexts: domainBootProc.setDescription('The boot processor number of this domain. If the value is -1, that means the domain is not configured/booted.')
domainInterruptVector = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainInterruptVector.setStatus('mandatory')
if mibBuilder.loadTexts: domainInterruptVector.setDescription('Interrupts to the host processor via JTAG requires 2 pieces of information: the UPA ID of the target CPU and the interrupt number assigned to the bootbus interrupt by the host. The target UPA ID identifies the particular bootbus and the proc ID (0 or 1) to be written into the bootbus interrupt register. The interrupt number is the value to be written into word 0 of the mondo vector of the target CPU. This number is computed by the host kernel. This object is a 13 bit value and is treated as an integer (32 bit) for easy manipulation.')
domainSysBrdConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainSysBrdConfig.setStatus('mandatory')
if mibBuilder.loadTexts: domainSysBrdConfig.setDescription('A list of configured system board entries belonging to this domain. The format of the string is: xx-xx where xx is the system board number and dash is the delimiter.')
domainProcConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainProcConfig.setStatus('mandatory')
if mibBuilder.loadTexts: domainProcConfig.setDescription("POST scans both blacklist and redlist files to determine which components should not be used to configure a domain. The content of the blacklist and redlist files along with the final result of a POST run is kept in a data structure, P2OBP, in the boot processor's BBSRAM. The SNMP agent is responsible to retrieve the data structure and extracts the necessary information to produce the result. domainProcConfig describes the processors configuration. Its format is a DisplayString (character string) in the format of xx.yyS-xx.yyS-... where xx is a system board number [0..15], yy is a processor number within a system board [0..3], S is a single character status code, and (dash) '-' is for delimiting multiple components. Valid status code include: F - Tested and Failed M - Missing R - Redlisted B - Blacklisted c - Crunched U - Good but not configured G - Good A - Architecturally missing")
domainABusConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainABusConfig.setStatus('mandatory')
if mibBuilder.loadTexts: domainABusConfig.setDescription('domainAbusConfig describes the address bus configuration. Its format is a DisplayString in the format of xxS-xxS-... where xx is an address bus [0..3] and S is a status code (see domainProcConfig).')
domainDBusConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainDBusConfig.setStatus('mandatory')
if mibBuilder.loadTexts: domainDBusConfig.setDescription('domainDbusConfig describes the data bus configuration. Its format is a DisplayString in the format of xxS-xxS where xx is a data bus [0..1] and S is a status code (see domainProcConfig).')
sysBrdGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 4), )
if mibBuilder.loadTexts: sysBrdGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenTable.setDescription('System board table. The number host of entries in the table is represented by Conf.ConfNumSysBrd.')
sysBrdGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "sysBrdGenIndex"))
if mibBuilder.loadTexts: sysBrdGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenEntry.setDescription('A system board table entry.')
sysBrdGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenIndex.setDescription('An index into this table.')
sysBrdGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenNum.setDescription('A unique number assigned to a system board. Index begins with 1.')
sysBrdGenPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdGenPower.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenPower.setDescription('Power status of the system board. To control power to a system board, modify the sysBrdGenPowerControl.')
sysBrdGenNumProc = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdGenNumProc.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenNumProc.setDescription('Number of processor that are present in this system board.')
sysBrdGenProcList = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdGenProcList.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenProcList.setDescription('A string containing the processors list that are present in this system board. The format of the string is: xx-xx where xx is the processor number within a system board, and dash is the delimiter.')
sysBrdGenReset = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBrdGenReset.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenReset.setDescription('This member resets the system board.')
sysBrdGenPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBrdGenPowerControl.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdGenPowerControl.setDescription('On reading it returns the power status of this system board power supply. On writing, it turns on/off this system board power supply.')
procStateGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 5), )
if mibBuilder.loadTexts: procStateGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenTable.setDescription('A table of processor entries.')
procStateGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "procStateGenIndex"))
if mibBuilder.loadTexts: procStateGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenEntry.setDescription('A processor state table entry.')
procStateGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStateGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenIndex.setDescription('An index into this table.')
procStateGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStateGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenNum.setDescription('A unique number assigned to each CPU.')
procStateGenHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStateGenHeartbeat.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenHeartbeat.setDescription('A counter being updated by the kernel. This serves an as indicator that the kernel is alive and well.')
procStateGenPgmSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("post", 1), ("download-helper", 2), ("obp", 3), ("os", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStateGenPgmSignature.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenPgmSignature.setDescription('This value represents the current program running on a processor. Only 4 programs are identified: POST, Download_helper, OBP, and the kernel.')
procStateGenPgmState = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("run", 1), ("exit", 2), ("prerun", 3), ("arbstop", 4), ("reset", 5), ("poweroff", 6), ("detached", 7), ("callback", 8), ("watchdog", 9), ("watchdog-sync", 10), ("offline", 11), ("booting", 12), ("unknown", 13), ("xir", 14), ("xir-sync", 15), ("sir", 16), ("sir-sync", 17), ("redmode", 18), ("redmode-sync", 19), ("quiesced", 20), ("quiesce-in-progress", 21), ("resume-in-progress", 22), ("none", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStateGenPgmState.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenPgmState.setDescription('This value represents the current state of the program running on a processor. #define SIGBST_NONE 0 /* no state */ #define SIGBST_RUN 1 /* running */ #define SIGBST_EXIT 2 /* finished */ #define SIGBST_PRERUN 3 /* pre-exec */ #define SIGBST_ARBSTOP 4 /* transient arbstop state */ #define SIGBST_RESET 5 /* reset */ #define SIGBST_POWEROFF 6 /* no power */ #define SIGBST_DETACHED 7 /* spinning in OBP after DR DETACH */ #define SIGBST_CALLBACK 8 /* kernel calling back into OBP */ #define SIGBST_WATCHDOG 9 /* OBP running after watchdog */ #define SIGBST_WATCHDOG_SYNC 10 /* OBP sync after watchdog reset */ #define SIGBST_OFFLINE 11 /* cpu offline */ #define SIGBST_BOOTING 12 /* booting */ #define SIGBST_UNKNOWN 13 /* unknown */ #define SIGBST_XIR 14 /* OBP running after XIR */ #define SIGBST_XIR_SYNC 15 /* OBP trying sync in XIR */ #define SIGBST_SIR 16 /* OBP running after SIR */ #define SIGBST_SIR_SYNC 17 /* OBP trying sync in SIR */ #define SIGBST_REDMODE 18 /* OBP running after REDMODE */ #define SIGBST_REDMODE_SYNC 19 /* OBP trying sync in REDMODE */ #define SIGBST_QUIESCED 20 /* system quiesced */ #define SIGBST_QUIESCE_INPROGRESS 21 /* system quiesce in-progress */ #define SIGBST_RESUME_INPROGRESS 22 /* system resume in-progress */ ')
procStateGenPgmSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("exit-halt", 1), ("exit-environ", 2), ("exit-reboot", 3), ("exit-panic1", 4), ("exit-panic2", 5), ("exit-hung", 6), ("exit-watch", 7), ("exit-panic-reboot", 8), ("exit-watchdog-reboot", 9), ("exit-soft-init-reset", 10), ("exit-extern-init-reset", 11), ("exit-redmode-reboot", 12), ("exit-obp-reset", 13), ("exit-null", 14), ("unknown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStateGenPgmSubState.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenPgmSubState.setDescription('This value represents a finer detail of the current state of the program running on a processor. #define EXIT_NULL 0 #define EXIT_HALT 1 #define EXIT_ENVIRON 2 #define EXIT_REBOOT 3 #define EXIT_PANIC1 4 #define EXIT_PANIC2 5 #define EXIT_HUNG 6 #define EXIT_WATCH 7 #define EXIT_PANIC_REBOOT 8 #define EXIT_WATCHDOG_REBOOT 9 #define EXIT_SOFT_INIT_RESET 10 /* SIR */ #define EXIT_EXTERN_INIT_RESET 11 /* XIR */ #define EXIT_REDMODE_REBOOT 12 /* REDMODE */ #define EXIT_OBP_RESET 13 /* OBP RESET */ ')
procStateGenTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStateGenTemp.setStatus('mandatory')
if mibBuilder.loadTexts: procStateGenTemp.setDescription('The processor temperature.')
procCommGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 6), )
if mibBuilder.loadTexts: procCommGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenTable.setDescription('A table of processor communication entries.')
procCommGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "procCommGenIndex"))
if mibBuilder.loadTexts: procCommGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenEntry.setDescription('A processor communication table entry.')
procCommGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procCommGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenIndex.setDescription('A unique number assigned to each CPU.')
procCommGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procCommGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenNum.setDescription('A unique number assigned to each CPU.')
procCommGenSspMboxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenSspMboxLen.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenSspMboxLen.setDescription('The length of SSP-to-Host mailbox. This mailbox is used to instruct the host to perform a specific command.')
procCommGenSspMboxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenSspMboxFlag.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenSspMboxFlag.setDescription('The flag of SSP-to-Host mailbox.')
procCommGenSspMboxCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("command-success", 1), ("goto-obp", 2), ("goto-panic", 3), ("environ", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenSspMboxCmd.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenSspMboxCmd.setDescription('The command of SSP-to-Host mailbox.')
procCommGenSspMboxData = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenSspMboxData.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenSspMboxData.setDescription('The data in the SSP-to-Host mailbox.')
procCommGenHostMboxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenHostMboxLen.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenHostMboxLen.setDescription('The length of Host-to-SSP mailbox.')
procCommGenHostMboxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenHostMboxFlag.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenHostMboxFlag.setDescription('The flag of Host-to-SSP mailbox.')
procCommGenHostMboxCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("command-success", 1), ("goto-obp", 2), ("goto-panic", 3), ("environ", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenHostMboxCmd.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenHostMboxCmd.setDescription('The command of Host-to-SSP mailbox.')
procCommGenHostMboxData = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenHostMboxData.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenHostMboxData.setDescription('The data in the Host-to-SSP mailbox. This mailbox serves for communication between OBP running on the host and obp_helper running on the SSP.')
procCommGenObpMboxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenObpMboxLen.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenObpMboxLen.setDescription('The length of Obp-to-SSP mailbox.')
procCommGenObpMboxFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenObpMboxFlag.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenObpMboxFlag.setDescription('The flag of Obp-to-SSP mailbox.')
procCommGenObpMboxCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("release-slave-cpu", 1), ("time-of-day", 2), ("get-eeprom-image", 3), ("put-eeprom-image", 4), ("invalidate-reboot-info", 5), ("move-cpu0", 6), ("get-ap-database-loc", 7), ("store-boot-path-info", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenObpMboxCmd.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenObpMboxCmd.setDescription('The command of Obp-to-SSP mailbox. #define SSPC_MULTIPROC 0x0b0b0001 /* Request to release slave CPUs */ #define SSPC_GETTOD 0x0b0b0002 /* Get Unix time of day from SSP */ #define SSPC_GETEEPROM 0x0b0b0003 /* Get EEPROM image from SSP */ #define SSPC_PUTEEPROM 0x0b0b0004 /* Put EEPROM image to SSP */ #define SSPC_UPDREBOOT 0x0b0b0005 /* Invalidate Reboot-info in eeprom */ #define SSPC_MOVECPU0 0x0b0b0006 /* Move Cpu0 Command */ #define SSPC_GETAPDATABASELOC 0x0b0b0007 /* Get AP database location */ #define SSPC_SAVEBOOTPATH 0x0b0b0008 /* Store boot path info */ ')
procCommGenObpMboxData = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenObpMboxData.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenObpMboxData.setDescription('The data in the Obp-to-SSP mailbox.')
procCommGenCvcInputData = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1024, 1024)).setFixedLength(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenCvcInputData.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenCvcInputData.setDescription('The input buffer to cvc.')
procCommGenCvcOutputData = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 6, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1024, 1024)).setFixedLength(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procCommGenCvcOutputData.setStatus('mandatory')
if mibBuilder.loadTexts: procCommGenCvcOutputData.setDescription('The output buffer to cvc.')
cbGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 7), )
if mibBuilder.loadTexts: cbGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: cbGenTable.setDescription('A table of general control board entries.')
cbGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 7, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "cbGenIndex"))
if mibBuilder.loadTexts: cbGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cbGenEntry.setDescription('A general control board table entry.')
cbGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cbGenIndex.setDescription('An index into this table.')
cbGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: cbGenNum.setDescription('A unique number assigned to a control board.')
cbGenPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGenPower.setStatus('mandatory')
if mibBuilder.loadTexts: cbGenPower.setDescription('Power status of the control board.')
cbGenPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGenPowerControl.setStatus('mandatory')
if mibBuilder.loadTexts: cbGenPowerControl.setDescription('On writing, it turns off this control board power supply. By default, control board is powered on automatically upon insertion to the cabinet or when house keeping power is applied. On reading, it always returns off.')
ioCabGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 8), )
if mibBuilder.loadTexts: ioCabGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: ioCabGenTable.setDescription('A table of general IO cabinet entries.')
ioCabGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 8, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "ioCabGenIndex"))
if mibBuilder.loadTexts: ioCabGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ioCabGenEntry.setDescription('A general I/O cabinet table entry.')
ioCabGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioCabGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ioCabGenIndex.setDescription('An index into this table.')
ioCabGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioCabGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: ioCabGenNum.setDescription('A unique number assigned to an I/O Cabinet.')
ioCabGenPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioCabGenPower.setStatus('mandatory')
if mibBuilder.loadTexts: ioCabGenPower.setDescription('A value identifying the current power state of an IO cabinet and also for powering on and off the I/O cabinet.')
fanTrayGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 10), )
if mibBuilder.loadTexts: fanTrayGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: fanTrayGenTable.setDescription('A table of fan tray entries.')
fanTrayGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 10, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "fanTrayGenIndex"))
if mibBuilder.loadTexts: fanTrayGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fanTrayGenEntry.setDescription('A fan tray table entry.')
fanTrayGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanTrayGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fanTrayGenIndex.setDescription('An index into this table.')
fanTrayGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanTrayGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: fanTrayGenNum.setDescription('A unique number assigned to a fan tray.')
fanTrayGenPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanTrayGenPower.setStatus('mandatory')
if mibBuilder.loadTexts: fanTrayGenPower.setDescription('On reading this object, it returns the power status of this fan tray. On writing it turns on/off the fan tray power.')
fanGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 11), )
if mibBuilder.loadTexts: fanGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenTable.setDescription('A table of fan entries. Each fan tray has certain number of fans. The number is represented by ConfMaxFanPerTray.')
fanGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 11, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "fanGenIndex"))
if mibBuilder.loadTexts: fanGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenEntry.setDescription('A fan tray entry containing information about a fan tray. Each fan entry is uniquely identified by 2 fields: fan tray number and fan number.')
fanGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenIndex.setDescription('An index into this table.')
fanGenTraySlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanGenTraySlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenTraySlotNum.setDescription('A unique number assigned to a fan tray slot.')
fanGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenNum.setDescription('A unique number assigned to a fan inside this tray.')
fanGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("fail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanGenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenStatus.setDescription('On reading it returns the power status of this fan. On writing it allows an application to turn on/off this fan. ')
fanGenSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nominal", 1), ("fast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanGenSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenSpeed.setDescription('On reading it returns the speed of this fan inside a fan tray. On writing, it allows one to change the speed of this fan. Nominal is the medium speed the fan will support, and fast is the highest fastest speed the fan will support.')
fanGenPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanGenPowerControl.setStatus('mandatory')
if mibBuilder.loadTexts: fanGenPowerControl.setDescription('The MIB object that is used to either power on or off this fan. The power status of this fan should be read from the fanGenStatus MIB object. On writing, the fan is either turned on or off.')
suppBrdGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 13), )
if mibBuilder.loadTexts: suppBrdGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdGenTable.setDescription('A table of support board entries.')
suppBrdGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 13, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "suppBrdGenIndex"))
if mibBuilder.loadTexts: suppBrdGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdGenEntry.setDescription('A support board table entry.')
suppBrdGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdGenIndex.setDescription('A unique number assigned to this support board.')
suppBrdGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdGenNum.setDescription('A unique number assigned to this support board.')
suppBrdGenPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdGenPower.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdGenPower.setDescription('Power status of the support board.')
suppBrdGenPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suppBrdGenPowerControl.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdGenPowerControl.setDescription('On reading it returns the power status of this support board power suuply. On writing, it turns on/off this support board power supply.')
bulkPowerGenTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 1, 14), )
if mibBuilder.loadTexts: bulkPowerGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: bulkPowerGenTable.setDescription('A table of bulk power supply entries.')
bulkPowerGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 1, 14, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "bulkPowerGenIndex"))
if mibBuilder.loadTexts: bulkPowerGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bulkPowerGenEntry.setDescription('A bulk power supply table entry.')
bulkPowerGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bulkPowerGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bulkPowerGenIndex.setDescription('An index into this table.')
bulkPowerGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bulkPowerGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: bulkPowerGenNum.setDescription('A unique number assigned to this bulk power supply.')
bulkPowerGenControl = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bulkPowerGenControl.setStatus('mandatory')
if mibBuilder.loadTexts: bulkPowerGenControl.setDescription('The MIB object that is used to power off this bulk power supply. On writing, it powers off this bulk power supply.')
bulkPowerGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bulkPowerGenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bulkPowerGenStatus.setDescription('Power status of the bulk power supply. A status of ok implies the unit is on and supplying enough voltage/current. A status of fail implies the unit is on but not supplying enough voltage/current or the unit is off.')
ue10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 34, 2, 2))
sysBrdStarfireTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 2, 1), )
if mibBuilder.loadTexts: sysBrdStarfireTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireTable.setDescription('System board table. The number host of entries in the table is represented by Conf.ConfNumSysBrd.')
sysBrdStarfireEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "sysBrdStarfireIndex"))
if mibBuilder.loadTexts: sysBrdStarfireEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireEntry.setDescription('A system board table entry.')
sysBrdStarfireIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireIndex.setDescription('An index into this table.')
sysBrdStarfireNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireNum.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireNum.setDescription('A unique number assigned to a system board.')
sysBrdStarfireCIC0Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireCIC0Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireCIC0Temp.setDescription('The temperature of the CIC0 ASIC on this Starfire system board.')
sysBrdStarfireCIC1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireCIC1Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireCIC1Temp.setDescription('The temperature of the CIC1 ASIC on this Starfire system board.')
sysBrdStarfireMCTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireMCTemp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireMCTemp.setDescription('The temperature of the MC ASIC on this Starfire system board.')
sysBrdStarfireXDB2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireXDB2Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireXDB2Temp.setDescription('The temperature of the XDB2 ASIC on this Starfire system board.')
sysBrdStarfireXDB3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireXDB3Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireXDB3Temp.setDescription('The temperature of the XDB3 ASIC on this Starfire system board.')
sysBrdStarfirePROC0Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfirePROC0Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfirePROC0Temp.setDescription('The temperature of the PROC0 ASIC on this Starfire system board.')
sysBrdStarfirePROC1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfirePROC1Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfirePROC1Temp.setDescription('The temperature of the PROC1 ASIC on this Starfire system board.')
sysBrdStarfirePROC2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfirePROC2Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfirePROC2Temp.setDescription('The temperature of the PROC2 ASIC on this Starfire system board.')
sysBrdStarfirePROC3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfirePROC3Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfirePROC3Temp.setDescription('The temperature of the PROC3 ASIC on this Starfire system board.')
sysBrdStarfire3p3VDCTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfire3p3VDCTemp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfire3p3VDCTemp.setDescription('The temperature of the PS2 3.3V DC on this Starfire system board.')
sysBrdStarfireVDCCoreTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireVDCCoreTemp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireVDCCoreTemp.setDescription('The temperature of the PS3 VDD Core on this Starfire system board.')
sysBrdStarfire5VDCTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfire5VDCTemp.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfire5VDCTemp.setDescription('The temperature of the PS5 5V DC on this Starfire system board.')
sysBrdStarfire3p3VDC = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfire3p3VDC.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfire3p3VDC.setDescription('The VDD voltage reading of this Starfire system board, which is equivalent to 3.3VDC.')
sysBrdStarfire5VDCHK = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfire5VDCHK.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfire5VDCHK.setDescription('The 5V DC housekeeping voltage reading of this Starfire system board.')
sysBrdStarfire5VDC = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfire5VDC.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfire5VDC.setDescription('The 5V DC voltage reading of this Starfire system board.')
sysBrdStarfireVDCCore = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfireVDCCore.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfireVDCCore.setDescription('The VDD Core voltage reading of this Starfire system board.')
sysBrdStarfire3p3VDCHK = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBrdStarfire3p3VDCHK.setStatus('mandatory')
if mibBuilder.loadTexts: sysBrdStarfire3p3VDCHK.setDescription('The 3.3V DC voltage reading of this Starfire system board.')
cbStarfireTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 2, 2), )
if mibBuilder.loadTexts: cbStarfireTable.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireTable.setDescription('A table of control board entries.')
cbStarfireEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "cbStarfireIndex"))
if mibBuilder.loadTexts: cbStarfireEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireEntry.setDescription('A control board table entry.')
cbStarfireIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfireIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireIndex.setDescription('An index into this table.')
cbStarfireNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfireNum.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireNum.setDescription('A unique number assigned to a control board.')
cbStarfireHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfireHostName.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireHostName.setDescription('Host name assigned to this control board.')
cbStarfire5VDCTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire5VDCTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire5VDCTemp.setDescription('The temperature of PS1.')
cbStarfire5VDCPerTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire5VDCPerTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire5VDCPerTemp.setDescription('The temperature of PS2. ')
cbStarfire5VDCFanTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire5VDCFanTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire5VDCFanTemp.setDescription('The temperature of PS3.')
cbStarfireSen0Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfireSen0Temp.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireSen0Temp.setDescription('The temperature of the 1st temperature sensor.')
cbStarfireSen1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfireSen1Temp.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireSen1Temp.setDescription('The temperature of the 2nd temperature sensor.')
cbStarfireSen2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfireSen2Temp.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfireSen2Temp.setDescription('The temperature of the 3rd temperature sensor.')
cbStarfire5VDC = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire5VDC.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire5VDC.setDescription('The voltage reading of 5V DC.')
cbStarfire5VDCHK = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire5VDCHK.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire5VDCHK.setDescription('The voltage reading of housekeeping 5V DC.')
cbStarfire3p3VDCHK = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire3p3VDCHK.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire3p3VDCHK.setDescription('The voltage reading of housekeeping 3.3V DC.')
cbStarfire5VDCPer = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire5VDCPer.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire5VDCPer.setDescription('The voltage reading of VccPer.')
cbStarfire5VDCFan = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStarfire5VDCFan.setStatus('mandatory')
if mibBuilder.loadTexts: cbStarfire5VDCFan.setDescription('The voltage reading of VccFan.')
centerplaneStarfireTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 2, 3), )
if mibBuilder.loadTexts: centerplaneStarfireTable.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTable.setDescription('A table of centerplane entries.')
centerplaneStarfireEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "centerplaneStarfireIndex"))
if mibBuilder.loadTexts: centerplaneStarfireEntry.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireEntry.setDescription('A centerplane table entry.')
centerplaneStarfireIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireIndex.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireIndex.setDescription('An index into this table.')
centerplaneStarfireNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireNum.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireNum.setDescription('A unique number assigned to this centerplane.')
centerplaneStarfireTemp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp0.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp0.setDescription('The 1st temp point of this Starfire centerplane.')
centerplaneStarfireTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp1.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp1.setDescription('The 2nd temp point of this Starfire centerplane.')
centerplaneStarfireTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp2.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp2.setDescription('The 3rd temp point of this Starfire centerplane.')
centerplaneStarfireTemp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp3.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp3.setDescription('The 4th temp point of this Starfire centerplane.')
centerplaneStarfireTemp4 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp4.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp4.setDescription('The 5th temp point of this Starfire centerplane.')
centerplaneStarfireTemp5 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp5.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp5.setDescription('The 6th temp point of this Starfire centerplane.')
centerplaneStarfireTemp6 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp6.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp6.setDescription('The 7th temp point of this Starfire centerplane.')
centerplaneStarfireTemp7 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp7.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp7.setDescription('The 8th temp point of this Starfire centerplane.')
centerplaneStarfireTemp8 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp8.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp8.setDescription('The 9th temp point of this Starfire centerplane.')
centerplaneStarfireTemp9 = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: centerplaneStarfireTemp9.setStatus('mandatory')
if mibBuilder.loadTexts: centerplaneStarfireTemp9.setDescription('The 10th temp point of this Starfire centerplane.')
suppBrdStarfireTable = MibTable((1, 3, 6, 1, 4, 1, 34, 2, 2, 4), )
if mibBuilder.loadTexts: suppBrdStarfireTable.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfireTable.setDescription('A table of support board entries.')
suppBrdStarfireEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1), ).setIndexNames((0, "CRI-SERVER-MIB", "suppBrdStarfireIndex"))
if mibBuilder.loadTexts: suppBrdStarfireEntry.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfireEntry.setDescription('A support board table entry.')
suppBrdStarfireIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdStarfireIndex.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfireIndex.setDescription('An index into this table.')
suppBrdStarfireNum = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdStarfireNum.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfireNum.setDescription('A unique number assigned to this support board.')
suppBrdStarfire3p3VDC1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdStarfire3p3VDC1Temp.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfire3p3VDC1Temp.setDescription('The PS1 temp point of this Starfire support board.')
suppBrdStarfire3p3VDC2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdStarfire3p3VDC2Temp.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfire3p3VDC2Temp.setDescription('The PS2 temp point of this Starfire support board.')
suppBrdStarfire5VDCHK = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdStarfire5VDCHK.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfire5VDCHK.setDescription('The 5V DC voltage in this Starfire support board.')
suppBrdStarfire3p3VDCHK = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdStarfire3p3VDCHK.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfire3p3VDCHK.setDescription('The 3.3V DC housekeeping voltage in this Starfire support board.')
suppBrdStarfire3p3VDC = MibTableColumn((1, 3, 6, 1, 4, 1, 34, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suppBrdStarfire3p3VDC.setStatus('mandatory')
if mibBuilder.loadTexts: suppBrdStarfire3p3VDC.setDescription('The CP 3.3V DC housekeeping voltage in this Starfire support board.')
ssp = MibIdentifier((1, 3, 6, 1, 4, 1, 34, 2, 3))
sspPlatformApp = MibIdentifier((1, 3, 6, 1, 4, 1, 34, 2, 3, 1))
sspPlatformAppEddControl = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("reconfig", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sspPlatformAppEddControl.setStatus('mandatory')
if mibBuilder.loadTexts: sspPlatformAppEddControl.setDescription('The object identifies the action intended for the EDD. Changing this object will cause the agent to send a eddControl trap. Reading this object returns the last action requested for the EDD. The SNMP agent does not maintain persistent information for this object. It will be initialized to unknown value.')
sspPlatformAppEddState = MibScalar((1, 3, 6, 1, 4, 1, 34, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("started-monitoring", 1), ("stopped-monitoring", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sspPlatformAppEddState.setStatus('mandatory')
if mibBuilder.loadTexts: sspPlatformAppEddState.setDescription('The object identifies the current state of the Event Detector Daemon. Changing this object will cause the agent to send a eddState trap. Reading this object returns the last changed state of the EDD. The SNMP agent does not maintain persistent information for this object. It will be initialized to unknown.')
domainChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,0)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "confNumDomain"), ("CRI-SERVER-MIB", "domainName"), ("CRI-SERVER-MIB", "domainNumSysBrd"), ("CRI-SERVER-MIB", "domainSysBrdList"), ("CRI-SERVER-MIB", "domainOSVersion"), ("CRI-SERVER-MIB", "platformType"), ("CRI-SERVER-MIB", "platformName"))
if mibBuilder.loadTexts: domainChange.setDescription('This trap indicates the domain table has changed. The first two variables (platformName and confNumDomain) will always have an instance value of 0. The remaining variables (domainName, domainNumSysBrd, domainSysBrdList, domainOSVersion, platformType, platformName ) will have an instance value of 0 to confNumDomain - 1. An instance of these remaining variables describe a domain. All variables for this trap are mandatory.')
eddControl = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,1)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sspPlatformAppEddControl"))
if mibBuilder.loadTexts: eddControl.setDescription('This trap indicates the action EDD should be taken. All variables for this trap are mandatory.')
eddState = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,2)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sspPlatformAppEddState"))
if mibBuilder.loadTexts: eddState.setDescription('This trap indicates the new state of the EDD. All variables for this trap are mandatory.')
sysBrdTempNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,3)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireMCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCoreTemp"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCTemp"))
if mibBuilder.loadTexts: sysBrdTempNorm.setDescription('This trap indicates a System Board transition from over temperature reading to normal. The platform name and board number will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
sysBrdTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,4)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireMCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCoreTemp"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCTemp"))
if mibBuilder.loadTexts: sysBrdTempHigh.setDescription('This trap indicates a System Board high temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
sysBrdTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,5)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireMCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCoreTemp"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCTemp"))
if mibBuilder.loadTexts: sysBrdTempWarn.setDescription('This trap indicates a System Board warning temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
sysBrdTempMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,6)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireMCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCoreTemp"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCTemp"))
if mibBuilder.loadTexts: sysBrdTempMax.setDescription('This trap indicates a System Board max temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
sysBrdTemp911 = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,7)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireMCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCoreTemp"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCTemp"))
if mibBuilder.loadTexts: sysBrdTemp911.setDescription('This trap indicates a System Board 911 temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
sysBrdTempBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,8)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireMCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCoreTemp"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCTemp"))
if mibBuilder.loadTexts: sysBrdTempBad.setDescription('This trap indicates a System Board bad temperature reading. This means that at least half the temperature sensors on the board report invalid temperature readings. For ASIC temperature errors, it is possible that the ASICs are not thermally calibrated. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
sysBrdTempChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,9)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireCIC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireMCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfireXDB3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC0Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC1Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC2Temp"), ("CRI-SERVER-MIB", "sysBrdStarfirePROC3Temp"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCTemp"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCoreTemp"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCTemp"))
if mibBuilder.loadTexts: sysBrdTempChange.setDescription('This trap indicates that a System Board temperature reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that changed will be included.')
cbTempNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,10)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDCTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCPerTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCFanTemp"), ("CRI-SERVER-MIB", "cbStarfireSen0Temp"), ("CRI-SERVER-MIB", "cbStarfireSen1Temp"), ("CRI-SERVER-MIB", "cbStarfireSen2Temp"))
if mibBuilder.loadTexts: cbTempNorm.setDescription('This trap indicates a Control Board transition to normal temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
cbTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,11)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDCTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCPerTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCFanTemp"), ("CRI-SERVER-MIB", "cbStarfireSen0Temp"), ("CRI-SERVER-MIB", "cbStarfireSen1Temp"), ("CRI-SERVER-MIB", "cbStarfireSen2Temp"))
if mibBuilder.loadTexts: cbTempHigh.setDescription('This trap indicates a Control Board high temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
cbTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,12)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDCTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCPerTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCFanTemp"), ("CRI-SERVER-MIB", "cbStarfireSen0Temp"), ("CRI-SERVER-MIB", "cbStarfireSen1Temp"), ("CRI-SERVER-MIB", "cbStarfireSen2Temp"))
if mibBuilder.loadTexts: cbTempWarn.setDescription('This trap indicates a Control Board warning temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
cbTempMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,13)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDCTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCPerTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCFanTemp"), ("CRI-SERVER-MIB", "cbStarfireSen0Temp"), ("CRI-SERVER-MIB", "cbStarfireSen1Temp"), ("CRI-SERVER-MIB", "cbStarfireSen2Temp"))
if mibBuilder.loadTexts: cbTempMax.setDescription('This trap indicates a Control Board max temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
cbTemp911 = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,14)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDCTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCPerTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCFanTemp"), ("CRI-SERVER-MIB", "cbStarfireSen0Temp"), ("CRI-SERVER-MIB", "cbStarfireSen1Temp"), ("CRI-SERVER-MIB", "cbStarfireSen2Temp"))
if mibBuilder.loadTexts: cbTemp911.setDescription('This trap indicates a Control Board 911 temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
cbTempBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,15)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDCTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCPerTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCFanTemp"), ("CRI-SERVER-MIB", "cbStarfireSen0Temp"), ("CRI-SERVER-MIB", "cbStarfireSen1Temp"), ("CRI-SERVER-MIB", "cbStarfireSen2Temp"))
if mibBuilder.loadTexts: cbTempBad.setDescription('This trap indicates a Control Board bad temperature reading. This means that at least half the temperature sensors on the board report invalid temperature readings. For ASIC temperature errors, it is possible that the ASICs are not thermally calibrated. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
cbTempChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,16)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDCTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCPerTemp"), ("CRI-SERVER-MIB", "cbStarfire5VDCFanTemp"), ("CRI-SERVER-MIB", "cbStarfireSen0Temp"), ("CRI-SERVER-MIB", "cbStarfireSen1Temp"), ("CRI-SERVER-MIB", "cbStarfireSen2Temp"))
if mibBuilder.loadTexts: cbTempChange.setDescription('This trap indicates that a Control Board temperature reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
centerplaneTempNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,17)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp0"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp1"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp2"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp3"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp4"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp5"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp6"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp7"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp8"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp9"))
if mibBuilder.loadTexts: centerplaneTempNorm.setDescription('This trap indicates a Centerplane transition to normal temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
centerplaneTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,18)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp0"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp1"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp2"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp3"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp4"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp5"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp6"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp7"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp8"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp9"))
if mibBuilder.loadTexts: centerplaneTempHigh.setDescription('This trap indicates a Centerplane high temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
centerplaneTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,19)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp0"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp1"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp2"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp3"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp4"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp5"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp6"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp7"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp8"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp9"))
if mibBuilder.loadTexts: centerplaneTempWarn.setDescription('This trap indicates a Centerplane warning temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
centerplaneTempMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,20)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp0"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp1"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp2"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp3"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp4"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp5"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp6"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp7"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp8"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp9"))
if mibBuilder.loadTexts: centerplaneTempMax.setDescription('This trap indicates a Centerplane max temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
centerplaneTemp911 = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,21)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp0"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp1"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp2"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp3"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp4"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp5"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp6"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp7"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp8"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp9"))
if mibBuilder.loadTexts: centerplaneTemp911.setDescription('This trap indicates a Centerplane 911 temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
centerplaneTempBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,22)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp0"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp1"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp2"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp3"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp4"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp5"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp6"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp7"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp8"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp9"))
if mibBuilder.loadTexts: centerplaneTempBad.setDescription('This trap indicates a Centerplane bad temperature reading. This means that at least half the temperature sensors on the board report invalid temperature readings. For ASIC temperature errors, it is possible that the ASICs are not thermally calibrated. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
centerplaneTempChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,23)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp0"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp1"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp2"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp3"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp4"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp5"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp6"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp7"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp8"), ("CRI-SERVER-MIB", "centerplaneStarfireTemp9"))
if mibBuilder.loadTexts: centerplaneTempChange.setDescription('This trap indicates that a Centerplane temperature reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
cbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,24)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "platformMasterConBrd"), ("CRI-SERVER-MIB", "platformSysClkConBrd"))
if mibBuilder.loadTexts: cbeConnected.setDescription('This trap indicates that the control board server (cbs) is connected to the control board executive (cbe) and is ready for control board operation. All variables are mandatory for this trap.')
cbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,25)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "platformMasterConBrd"), ("CRI-SERVER-MIB", "platformSysClkConBrd"))
if mibBuilder.loadTexts: cbeDisconnected.setDescription('This trap indicates that the control board server (cbs) has lost connection with the control board executive (cbe). All variables are mandatory for this trap.')
suppBrdTempNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,26)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC1Temp"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC2Temp"))
if mibBuilder.loadTexts: suppBrdTempNorm.setDescription('This trap indicates a Centerplane Support Board transition from over temperature reading to normal. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
suppBrdTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,27)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC1Temp"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC2Temp"))
if mibBuilder.loadTexts: suppBrdTempHigh.setDescription('This trap indicates a Centerplane Support Board high temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
suppBrdTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,28)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC1Temp"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC2Temp"))
if mibBuilder.loadTexts: suppBrdTempWarn.setDescription('This trap indicates a Centerplane Support Board warning temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
suppBrdTempMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,29)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC1Temp"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC2Temp"))
if mibBuilder.loadTexts: suppBrdTempMax.setDescription('This trap indicates a Centerplane Support Board max temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
suppBrdTemp911 = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,30)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC1Temp"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC2Temp"))
if mibBuilder.loadTexts: suppBrdTemp911.setDescription('This trap indicates a Centerplane Support Board 911 temperature reading. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
suppBrdTempBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,31)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC1Temp"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC2Temp"))
if mibBuilder.loadTexts: suppBrdTempBad.setDescription('This trap indicates a Centerplane Support Board bad temperature reading. This means that half the temperature sensors on the board do not report valid temperature readings. For ASIC temperature errors, it is possible that the ASICs are not thermally calibrated. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
suppBrdTempChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,32)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC1Temp"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDC2Temp"))
if mibBuilder.loadTexts: suppBrdTempChange.setDescription('This trap indicates that a Centerplane Support Board temperature reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those temperature readings that crossed the threshold will be included.')
sysBrdVoltNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,33)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDC"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDC"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCore"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: sysBrdVoltNorm.setDescription('This trap indicates a System Board transition from low or high power reading to normal. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
sysBrdVoltMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,34)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDC"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDC"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCore"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: sysBrdVoltMax.setDescription('This trap indicates a System Board max voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
sysBrdVoltMin = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,35)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDC"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDC"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCore"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: sysBrdVoltMin.setDescription('This trap indicates a System Board min voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
sysBrdVoltBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,36)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDC"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDC"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCore"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: sysBrdVoltBad.setDescription('This trap indicates a System Board bad voltage reading. This means that at least half the voltage sensors on the board report invalid voltage readings. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
sysBrdVoltChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,37)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdStarfireNum"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDC"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "sysBrdStarfire5VDC"), ("CRI-SERVER-MIB", "sysBrdStarfireVDCCore"), ("CRI-SERVER-MIB", "sysBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: sysBrdVoltChange.setDescription('This trap indicates a System Board voltage reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
cbVoltNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,38)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDC"), ("CRI-SERVER-MIB", "cbStarfire5VDCHK"), ("CRI-SERVER-MIB", "cbStarfire3p3VDCHK"), ("CRI-SERVER-MIB", "cbStarfire5VDCPer"), ("CRI-SERVER-MIB", "cbStarfire5VDCFan"))
if mibBuilder.loadTexts: cbVoltNorm.setDescription('This trap indicates a Control Board transition to normal voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
cbVoltMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,39)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDC"), ("CRI-SERVER-MIB", "cbStarfire5VDCHK"), ("CRI-SERVER-MIB", "cbStarfire3p3VDCHK"), ("CRI-SERVER-MIB", "cbStarfire5VDCPer"), ("CRI-SERVER-MIB", "cbStarfire5VDCFan"))
if mibBuilder.loadTexts: cbVoltMax.setDescription('This trap indicates a Control Board max voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
cbVoltMin = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,40)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDC"), ("CRI-SERVER-MIB", "cbStarfire5VDCHK"), ("CRI-SERVER-MIB", "cbStarfire3p3VDCHK"), ("CRI-SERVER-MIB", "cbStarfire5VDCPer"), ("CRI-SERVER-MIB", "cbStarfire5VDCFan"))
if mibBuilder.loadTexts: cbVoltMin.setDescription('This trap indicates a Control Board min voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
cbVoltBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,41)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDC"), ("CRI-SERVER-MIB", "cbStarfire5VDCHK"), ("CRI-SERVER-MIB", "cbStarfire3p3VDCHK"), ("CRI-SERVER-MIB", "cbStarfire5VDCPer"), ("CRI-SERVER-MIB", "cbStarfire5VDCFan"))
if mibBuilder.loadTexts: cbVoltBad.setDescription('This trap indicates a Control Board bad voltage reading. This means that at least half the voltage sensors on the board report invalid voltage readings. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
cbVoltChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,42)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "cbStarfireNum"), ("CRI-SERVER-MIB", "cbStarfire5VDC"), ("CRI-SERVER-MIB", "cbStarfire5VDCHK"), ("CRI-SERVER-MIB", "cbStarfire3p3VDCHK"), ("CRI-SERVER-MIB", "cbStarfire5VDCPer"), ("CRI-SERVER-MIB", "cbStarfire5VDCFan"))
if mibBuilder.loadTexts: cbVoltChange.setDescription('This trap indicates a Control Board voltage reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
centerplaneVoltNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,43)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"))
if mibBuilder.loadTexts: centerplaneVoltNorm.setDescription("This trap indicates a Centerplane transition to normal voltage reading. The platform name and board number variables will always be provided with this trap.' Whereas, only those voltage readings that crossed the threshold will be included.")
centerplaneVoltMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,44)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"))
if mibBuilder.loadTexts: centerplaneVoltMax.setDescription('This trap indicates a Centerplane max voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
centerplaneVoltMin = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,45)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"))
if mibBuilder.loadTexts: centerplaneVoltMin.setDescription('This trap indicates a Centerplane Min voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
centerplaneVoltBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,46)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"))
if mibBuilder.loadTexts: centerplaneVoltBad.setDescription('This trap indicates a Centerplane bad voltage reading. This means that at least half the voltage sensors on the board report invalid voltage readings. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
centerplaneVoltChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,47)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "centerplaneStarfireNum"))
if mibBuilder.loadTexts: centerplaneVoltChange.setDescription('This trap indicates a Centerplane voltage reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
suppBrdVoltNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,48)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: suppBrdVoltNorm.setDescription('This trap indicates a Centerplane Support Board transition from over voltage reading to normal. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
suppBrdVoltMax = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,49)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: suppBrdVoltMax.setDescription('This trap indicates a Centerplane Support Board max voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
suppBrdVoltMin = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,50)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: suppBrdVoltMin.setDescription('This trap indicates a Centerplane Support Board Min voltage reading. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
suppBrdVoltBad = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,51)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: suppBrdVoltBad.setDescription('This trap indicates a Centerplane Support Board bad voltage reading. This means that half the voltage sensors on the board do not report valid voltage readings. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
suppBrdVoltChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,52)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdStarfireNum"), ("CRI-SERVER-MIB", "suppBrdStarfire5VDCHK"), ("CRI-SERVER-MIB", "suppBrdStarfire3p3VDCHK"))
if mibBuilder.loadTexts: suppBrdVoltChange.setDescription('This trap indicates a Centerplane Support Board voltage reading has changed within a specified delta. The platform name and board number variables will always be provided with this trap. Whereas, only those voltage readings that crossed the threshold will be included.')
fanNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,53)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "fanGenNum"), ("CRI-SERVER-MIB", "fanGenTraySlotNum"), ("CRI-SERVER-MIB", "fanGenStatus"))
if mibBuilder.loadTexts: fanNorm.setDescription('This trap indicates a fan transition from failed to normal. All variables are mandatory for this trap.')
fanFail = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,54)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "fanGenNum"), ("CRI-SERVER-MIB", "fanGenTraySlotNum"))
if mibBuilder.loadTexts: fanFail.setDescription('This trap indicates a fan failure. All variables are mandatory for this trap.')
systemConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,55)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "confSysBrdList"), ("CRI-SERVER-MIB", "confProcList"), ("CRI-SERVER-MIB", "confConBrdList"), ("CRI-SERVER-MIB", "confSuppBrdList"), ("CRI-SERVER-MIB", "confFanTrayList"), ("CRI-SERVER-MIB", "confBulkPowerList"))
if mibBuilder.loadTexts: systemConfigurationChange.setDescription('This trap indicates that the system configuration has changed. It indicates what boards have been inserted or removed. The platform name will always be provided but only those lists that change will be included. Only when the system board list changes will the proc list be provided.')
arbitrationStop = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,56)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: arbitrationStop.setDescription('This trap indicates that a particular domain has experienced an arbstop. All variables will be provided with this trap.')
recordStop = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,57)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: recordStop.setDescription('This trap indicates that a particular domain has experienced a recordarbstop. All variables will be provided with this trap.')
watchdog = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,58)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: watchdog.setDescription('This trap indicates that a particular domain has experienced a watchdog. All variables will be provided with this trap.')
environmentalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,59)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: environmentalShutdown.setDescription('This trap indicates that a particular domain has experienced an environmental shutdown. All variables will be provided with this trap.')
reboot = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,60)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: reboot.setDescription('This trap indicates that a particular domain has experienced a reboot. All variables will be provided with this trap.')
panic1 = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,61)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: panic1.setDescription('This trap indicates that a particular domain has experienced a panic1. All variables will be provided with this trap.')
panic2 = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,62)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: panic2.setDescription('This trap indicates that a particular domain has experienced a panic2. All variables will be provided with this trap.')
panicReboot = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,63)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: panicReboot.setDescription('This trap indicates that a particular domain has experienced a panic_reboot. All variables will be provided with this trap.')
heartbeatFailure = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,64)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: heartbeatFailure.setDescription('This trap indicates that a particular domain has experienced a heartbeat_failure. All variables will be provided with this trap.')
signatureBlockChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,65)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "procStateGenNum"), ("CRI-SERVER-MIB", "procStateGenPgmSignature"), ("CRI-SERVER-MIB", "procStateGenPgmState"), ("CRI-SERVER-MIB", "procStateGenPgmSubState"))
if mibBuilder.loadTexts: signatureBlockChange.setDescription('This trap indicates that the signature block has changed. All variables will be provided with this trap.')
sysbrdPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,66)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdGenNum"))
if mibBuilder.loadTexts: sysbrdPowerOff.setDescription('This trap indicates that a system board has been powered off. The platform name will always be provided whereas one or more board number identifiers will be provided.')
sysbrdPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,67)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "sysBrdGenNum"))
if mibBuilder.loadTexts: sysbrdPowerOn.setDescription('This trap indicates that a system board has been powered on. The platform name will always be provided whereas one or more board number identifiers will be provided.')
suppbrdPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,68)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdGenNum"))
if mibBuilder.loadTexts: suppbrdPowerOff.setDescription('This trap indicates that a support board has been powered off. The platform name will always be provided whereas one or more board number identifiers will be provided.')
suppbrdPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,69)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "suppBrdGenNum"))
if mibBuilder.loadTexts: suppbrdPowerOn.setDescription('This trap indicates that a support board has been powered on. The platform name will always be provided whereas one or more board number identifiers will be provided.')
bulkPowerNorm = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,70)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "bulkPowerGenNum"))
if mibBuilder.loadTexts: bulkPowerNorm.setDescription('This trap indicates that a particular Bulk Power has returned to (or is in) normal mode. All variables are mandatory for this trap.')
bulkPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,71)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "bulkPowerGenNum"))
if mibBuilder.loadTexts: bulkPowerFail.setDescription('This trap indicates Bulk Power failure. All variables are mandatory for this event.')
bootProcChange = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,72)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "domainName"), ("CRI-SERVER-MIB", "domainBootProc"), ("CRI-SERVER-MIB", "domainProcConfig"), ("CRI-SERVER-MIB", "domainABusConfig"), ("CRI-SERVER-MIB", "domainDBusConfig"))
if mibBuilder.loadTexts: bootProcChange.setDescription('This trap indicates a change in the Boot Proc. All variables are mandatory for this event.')
sigObpBooting = NotificationType((1, 3, 6, 1, 4, 1, 34) + (0,73)).setObjects(("CRI-SERVER-MIB", "platformName"), ("CRI-SERVER-MIB", "procStateGenNum"), ("CRI-SERVER-MIB", "domainName"))
if mibBuilder.loadTexts: sigObpBooting.setDescription('This trap indicates that a proc in a particular domain has experienced a signature change indicating the domain is booting. The signature block specifies signature OBP and state BOOTING. All variables are mandatory for this event.')
mibBuilder.exportSymbols("CRI-SERVER-MIB", procCommGenCvcOutputData=procCommGenCvcOutputData, centerplaneStarfireTemp8=centerplaneStarfireTemp8, reboot=reboot, procStateGenNum=procStateGenNum, sysBrdTempNorm=sysBrdTempNorm, centerplaneVoltChange=centerplaneVoltChange, cbeDisconnected=cbeDisconnected, sysBrdStarfirePROC3Temp=sysBrdStarfirePROC3Temp, suppBrdGenNum=suppBrdGenNum, sysBrdGenProcList=sysBrdGenProcList, sysBrdStarfire3p3VDC=sysBrdStarfire3p3VDC, suppBrdVoltMax=suppBrdVoltMax, centerplaneTempChange=centerplaneTempChange, procCommGenHostMboxData=procCommGenHostMboxData, domainSysBrdList=domainSysBrdList, panic2=panic2, signatureBlockChange=signatureBlockChange, ue10000=ue10000, suppBrdStarfire5VDCHK=suppBrdStarfire5VDCHK, sysBrdVoltBad=sysBrdVoltBad, cbVoltNorm=cbVoltNorm, procCommGenTable=procCommGenTable, centerplaneStarfireTemp0=centerplaneStarfireTemp0, platformSysClkConBrd=platformSysClkConBrd, ioCabGenIndex=ioCabGenIndex, sysBrdStarfireMCTemp=sysBrdStarfireMCTemp, platformName=platformName, procCommGenObpMboxFlag=procCommGenObpMboxFlag, centerplaneStarfireTemp5=centerplaneStarfireTemp5, confSysBrdPowerList=confSysBrdPowerList, centerplaneStarfireTemp7=centerplaneStarfireTemp7, domainBootProc=domainBootProc, suppBrdTempNorm=suppBrdTempNorm, fanGenStatus=fanGenStatus, sysBrdVoltNorm=sysBrdVoltNorm, cbStarfire5VDCTemp=cbStarfire5VDCTemp, domainInterruptVector=domainInterruptVector, domainDBusConfig=domainDBusConfig, cbStarfire5VDCFan=cbStarfire5VDCFan, suppBrdVoltNorm=suppBrdVoltNorm, domainTable=domainTable, ioCabGenNum=ioCabGenNum, centerplaneStarfireTemp9=centerplaneStarfireTemp9, confMaxLEDPerBulkPower=confMaxLEDPerBulkPower, cbGenNum=cbGenNum, confNumSuppBrd=confNumSuppBrd, confNumCenterplane=confNumCenterplane, sysBrdTemp911=sysBrdTemp911, bulkPowerGenIndex=bulkPowerGenIndex, ioCabGenEntry=ioCabGenEntry, cbTempHigh=cbTempHigh, confSuppBrdList=confSuppBrdList, sysBrdGenTable=sysBrdGenTable, sysBrdStarfirePROC0Temp=sysBrdStarfirePROC0Temp, cbVoltBad=cbVoltBad, centerplaneTempHigh=centerplaneTempHigh, recordStop=recordStop, conf=conf, Boolean=Boolean, suppBrdStarfire3p3VDC1Temp=suppBrdStarfire3p3VDC1Temp, ioCabGenTable=ioCabGenTable, systemConfigurationChange=systemConfigurationChange, sysBrdStarfireEntry=sysBrdStarfireEntry, sysBrdTempWarn=sysBrdTempWarn, sysBrdStarfireVDCCoreTemp=sysBrdStarfireVDCCoreTemp, sysBrdStarfire5VDC=sysBrdStarfire5VDC, confMemAddrMap=confMemAddrMap, bulkPowerNorm=bulkPowerNorm, sysBrdGenPower=sysBrdGenPower, cbTempNorm=cbTempNorm, fanGenTraySlotNum=fanGenTraySlotNum, cbVoltMax=cbVoltMax, centerplaneStarfireTemp1=centerplaneStarfireTemp1, suppBrdStarfire3p3VDC=suppBrdStarfire3p3VDC, sysBrdVoltMin=sysBrdVoltMin, suppbrdPowerOn=suppbrdPowerOn, bulkPowerGenNum=bulkPowerGenNum, platformReset=platformReset, confConBrdList=confConBrdList, cbStarfireNum=cbStarfireNum, YesNo=YesNo, centerplaneTempNorm=centerplaneTempNorm, suppBrdVoltChange=suppBrdVoltChange, sysBrdGenNumProc=sysBrdGenNumProc, sigObpBooting=sigObpBooting, sysBrdTempBad=sysBrdTempBad, centerplaneStarfireEntry=centerplaneStarfireEntry, suppBrdStarfire3p3VDCHK=suppBrdStarfire3p3VDCHK, platformInterconnectClockFreq=platformInterconnectClockFreq, procCommGenHostMboxLen=procCommGenHostMboxLen, fanGenNum=fanGenNum, sun=sun, procCommGenCvcInputData=procCommGenCvcInputData, sysBrdStarfireVDCCore=sysBrdStarfireVDCCore, fanGenIndex=fanGenIndex, cbStarfireSen0Temp=cbStarfireSen0Temp, cbVoltMin=cbVoltMin, confMaxLEDPerSysBrd=confMaxLEDPerSysBrd, cbStarfireEntry=cbStarfireEntry, suppBrdGenEntry=suppBrdGenEntry, suppBrdGenIndex=suppBrdGenIndex, bulkPowerGenControl=bulkPowerGenControl, sysBrdStarfireNum=sysBrdStarfireNum, ssp=ssp, platformJtagClockFreq=platformJtagClockFreq, confMaxProcPerSysBrd=confMaxProcPerSysBrd, procCommGenIndex=procCommGenIndex, confMaxFanPerTray=confMaxFanPerTray, procCommGenSspMboxLen=procCommGenSspMboxLen, confSysBrdList=confSysBrdList, cbStarfire5VDC=cbStarfire5VDC, suppBrdTempMax=suppBrdTempMax, platformTargetProcClockMultiple=platformTargetProcClockMultiple, sysBrdStarfireTable=sysBrdStarfireTable, domainChange=domainChange, cbGenIndex=cbGenIndex, sysBrdGenEntry=sysBrdGenEntry, procCommGenSspMboxData=procCommGenSspMboxData, bulkPowerGenStatus=bulkPowerGenStatus, suppBrdVoltBad=suppBrdVoltBad, heartbeatFailure=heartbeatFailure, centerplaneStarfireNum=centerplaneStarfireNum, procCommGenEntry=procCommGenEntry, procCommGenHostMboxFlag=procCommGenHostMboxFlag, domainIndex=domainIndex, suppBrdStarfire3p3VDC2Temp=suppBrdStarfire3p3VDC2Temp, domainProcConfig=domainProcConfig, sysBrdStarfire3p3VDCHK=sysBrdStarfire3p3VDCHK, cbTemp911=cbTemp911, sysBrdVoltMax=sysBrdVoltMax, cbStarfireSen1Temp=cbStarfireSen1Temp, procCommGenHostMboxCmd=procCommGenHostMboxCmd, sysBrdTempMax=sysBrdTempMax, sysBrdVoltChange=sysBrdVoltChange, fanNorm=fanNorm, fanFail=fanFail, platformAmbientTemp=platformAmbientTemp, sysBrdStarfire3p3VDCTemp=sysBrdStarfire3p3VDCTemp, procCommGenSspMboxFlag=procCommGenSspMboxFlag, cbStarfire5VDCPer=cbStarfire5VDCPer, procCommGenNum=procCommGenNum, centerplaneVoltBad=centerplaneVoltBad, cbGenTable=cbGenTable, procCommGenObpMboxData=procCommGenObpMboxData, sysBrdStarfireXDB3Temp=sysBrdStarfireXDB3Temp, cbeConnected=cbeConnected, procStateGenTable=procStateGenTable, sysBrdGenNum=sysBrdGenNum, fanGenTable=fanGenTable, arbitrationStop=arbitrationStop, suppBrdGenPowerControl=suppBrdGenPowerControl, sspPlatformApp=sspPlatformApp, sysBrdStarfireCIC0Temp=sysBrdStarfireCIC0Temp, general=general, centerplaneTempMax=centerplaneTempMax, centerplaneVoltMax=centerplaneVoltMax, domainSysBrdConfig=domainSysBrdConfig, cbTempMax=cbTempMax, suppBrdStarfireNum=suppBrdStarfireNum, cbTempWarn=cbTempWarn, cbStarfire5VDCFanTemp=cbStarfire5VDCFanTemp, fanTrayGenTable=fanTrayGenTable, centerplaneStarfireTable=centerplaneStarfireTable, domainOSVersion=domainOSVersion, suppBrdTempWarn=suppBrdTempWarn, sysbrdPowerOn=sysbrdPowerOn, bulkPowerFail=bulkPowerFail, suppBrdTemp911=suppBrdTemp911, cbVoltChange=cbVoltChange, platformTargetInterconnectClockFreq=platformTargetInterconnectClockFreq, procStateGenEntry=procStateGenEntry, cbStarfireSen2Temp=cbStarfireSen2Temp, centerplaneTempBad=centerplaneTempBad, panic1=panic1, platform=platform, confIoCabList=confIoCabList, eddState=eddState, cbTempChange=cbTempChange, centerplaneStarfireTemp6=centerplaneStarfireTemp6, confBulkPowerList=confBulkPowerList, fanTrayGenPower=fanTrayGenPower, centerplaneStarfireTemp3=centerplaneStarfireTemp3, centerplaneTemp911=centerplaneTemp911, domainName=domainName, cbGenPowerControl=cbGenPowerControl, centerplaneStarfireTemp4=centerplaneStarfireTemp4, procCommGenObpMboxCmd=procCommGenObpMboxCmd, fanTrayGenEntry=fanTrayGenEntry, platformProcClockFreq=platformProcClockFreq, confNumSysBrd=confNumSysBrd, suppBrdVoltMin=suppBrdVoltMin, cbStarfireHostName=cbStarfireHostName, suppBrdStarfireEntry=suppBrdStarfireEntry, confFanTrayList=confFanTrayList, suppBrdGenPower=suppBrdGenPower, eddControl=eddControl, suppBrdTempChange=suppBrdTempChange, domainABusConfig=domainABusConfig, procStateGenHeartbeat=procStateGenHeartbeat, suppBrdStarfireTable=suppBrdStarfireTable, cbGenPower=cbGenPower, bulkPowerGenEntry=bulkPowerGenEntry, watchdog=watchdog, sysBrdStarfire5VDCTemp=sysBrdStarfire5VDCTemp, sysBrdTempChange=sysBrdTempChange, centerplaneStarfireIndex=centerplaneStarfireIndex, suppBrdTempHigh=suppBrdTempHigh, procCommGenSspMboxCmd=procCommGenSspMboxCmd, environmentalShutdown=environmentalShutdown, sysBrdTempHigh=sysBrdTempHigh, suppBrdGenTable=suppBrdGenTable, bulkPowerGenTable=bulkPowerGenTable, sysBrdStarfireIndex=sysBrdStarfireIndex, domainProcList=domainProcList, centerplaneStarfireTemp2=centerplaneStarfireTemp2, sysBrdStarfire5VDCHK=sysBrdStarfire5VDCHK, confNumConBrd=confNumConBrd, confNumBulkPower=confNumBulkPower, confNumFanTray=confNumFanTray, confCenterplaneList=confCenterplaneList, fanTrayGenIndex=fanTrayGenIndex, cbStarfire5VDCHK=cbStarfire5VDCHK, cbStarfireIndex=cbStarfireIndex, fanGenPowerControl=fanGenPowerControl, sysbrdPowerOff=sysbrdPowerOff, confNumProc=confNumProc, platformTargetJtagClockFreq=platformTargetJtagClockFreq, procStateGenPgmSignature=procStateGenPgmSignature, procStateGenPgmState=procStateGenPgmState, confNumSysBrdPower=confNumSysBrdPower, products=products, fanGenEntry=fanGenEntry, sysBrdGenPowerControl=sysBrdGenPowerControl, domainNumSysBrd=domainNumSysBrd, procCommGenObpMboxLen=procCommGenObpMboxLen, DisplayString=DisplayString, fanGenSpeed=fanGenSpeed, panicReboot=panicReboot, platformType=platformType, suppBrdTempBad=suppBrdTempBad, confMaxLEDPerFanTray=confMaxLEDPerFanTray, suppbrdPowerOff=suppbrdPowerOff, sysBrdStarfirePROC1Temp=sysBrdStarfirePROC1Temp, confNumIoCab=confNumIoCab, domainEntry=domainEntry, cbGenEntry=cbGenEntry, procStateGenPgmSubState=procStateGenPgmSubState, centerplaneTempWarn=centerplaneTempWarn, sspPlatformAppEddControl=sspPlatformAppEddControl, bootProcChange=bootProcChange, cbTempBad=cbTempBad, platformMasterConBrd=platformMasterConBrd, sspPlatformAppEddState=sspPlatformAppEddState, procStateGenTemp=procStateGenTemp)
mibBuilder.exportSymbols("CRI-SERVER-MIB", confNumDomain=confNumDomain, sysBrdStarfirePROC2Temp=sysBrdStarfirePROC2Temp, sysBrdStarfireXDB2Temp=sysBrdStarfireXDB2Temp, cbStarfire3p3VDCHK=cbStarfire3p3VDCHK, centerplaneVoltMin=centerplaneVoltMin, sysBrdGenIndex=sysBrdGenIndex, fanTrayGenNum=fanTrayGenNum, sysBrdStarfireCIC1Temp=sysBrdStarfireCIC1Temp, confProcList=confProcList, ioCabGenPower=ioCabGenPower, cbStarfire5VDCPerTemp=cbStarfire5VDCPerTemp, cbStarfireTable=cbStarfireTable, sysBrdGenReset=sysBrdGenReset, centerplaneVoltNorm=centerplaneVoltNorm, procStateGenIndex=procStateGenIndex, suppBrdStarfireIndex=suppBrdStarfireIndex)
