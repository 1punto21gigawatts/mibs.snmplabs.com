#
# PySNMP MIB module ACTONA-ACTASTOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACTONA-ACTASTOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, TimeTicks, Bits, IpAddress, iso, ModuleIdentity, enterprises, Integer32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Bits", "IpAddress", "iso", "ModuleIdentity", "enterprises", "Integer32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Counter64", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
actona = ModuleIdentity((1, 3, 6, 1, 4, 1, 17471))
actona.setRevisions(('2010-07-30 00:00', '2004-12-23 00:00', '2003-11-24 16:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: actona.setRevisionsDescriptions(('Added cifs AO related objects', '(1) Added aclogSeverity and aclogMsgText objects. (2) deprecated csLogsTrap, esLogsTrap, mgrLogsTrap objects and replaced it with acCsLOgsTrap, acEsLogsTrap, and acMgrLogsTrap objects. (2) deprecated logNotificationsGroup and replaced it with logNotificationsGroupRev1.', 'Actona Technologies',))
if mibBuilder.loadTexts: actona.setLastUpdated('201007300000Z')
if mibBuilder.loadTexts: actona.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: actona.setContactInfo('Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-webcache@cisco.com')
if mibBuilder.loadTexts: actona.setDescription('Actona ActaStor MIB file')
acNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 17471, 0))
actastor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1))
if mibBuilder.loadTexts: actastor.setStatus('current')
if mibBuilder.loadTexts: actastor.setDescription('Actona ActaStor product')
generalInformation = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 1))
if mibBuilder.loadTexts: generalInformation.setStatus('current')
if mibBuilder.loadTexts: generalInformation.setDescription('ActaStor general information')
actastorVersion = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actastorVersion.setStatus('current')
if mibBuilder.loadTexts: actastorVersion.setDescription('ActaStor installed version number')
buildString = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildString.setStatus('current')
if mibBuilder.loadTexts: buildString.setDescription('ActaStor installed build label')
support = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 1, 3))
if mibBuilder.loadTexts: support.setStatus('current')
if mibBuilder.loadTexts: support.setDescription('Actona Support contact information')
email = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 1, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: email.setStatus('current')
if mibBuilder.loadTexts: email.setDescription('Actona Support email address')
license = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 1, 4))
if mibBuilder.loadTexts: license.setStatus('current')
if mibBuilder.loadTexts: license.setDescription('ActaStor license infromation')
isValid = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isValid.setStatus('current')
if mibBuilder.loadTexts: isValid.setDescription('Indicates whether the installed license is valid')
daysLeft = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setUnits('days (99999 is unlimited license)').setMaxAccess("readonly")
if mibBuilder.loadTexts: daysLeft.setStatus('current')
if mibBuilder.loadTexts: daysLeft.setDescription('The number of days remaining until the installed license expires')
manager = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 2))
if mibBuilder.loadTexts: manager.setStatus('current')
if mibBuilder.loadTexts: manager.setDescription('ActaStor manager-related information')
mgrCentralServerHost = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgrCentralServerHost.setStatus('current')
if mibBuilder.loadTexts: mgrCentralServerHost.setDescription('The name/IP address of the host acting as the Central Manager of this gateway, in the ActaStor network')
mgrLogsTrap = NotificationType((1, 3, 6, 1, 4, 1, 17471, 1, 2, 2))
if mibBuilder.loadTexts: mgrLogsTrap.setStatus('deprecated')
if mibBuilder.loadTexts: mgrLogsTrap.setDescription('The OID of trap messages related to ActaStor management. This object is deprecated in the favor of acMgrLogsTrap.')
coreServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 3))
if mibBuilder.loadTexts: coreServer.setStatus('current')
if mibBuilder.loadTexts: coreServer.setDescription('ActaStor CoreServer-related information')
csGeneral = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 3, 1))
if mibBuilder.loadTexts: csGeneral.setStatus('current')
if mibBuilder.loadTexts: csGeneral.setDescription('CoreServer general infromation')
csIsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsConfigured.setStatus('current')
if mibBuilder.loadTexts: csIsConfigured.setDescription('Indicates whether the CoreServer component has been configured to run on this gateway')
csIsAlive = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsAlive.setStatus('current')
if mibBuilder.loadTexts: csIsAlive.setDescription('Indicates whether the CoreServer component is currently running on this gateway')
csUpTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUpTime.setStatus('current')
if mibBuilder.loadTexts: csUpTime.setDescription('The elapsed time since the CoreServer was started')
csState = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2))
if mibBuilder.loadTexts: csState.setStatus('current')
if mibBuilder.loadTexts: csState.setDescription('The current run-time state of the CoreServer')
csConnectivityTable = MibTable((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1), )
if mibBuilder.loadTexts: csConnectivityTable.setStatus('current')
if mibBuilder.loadTexts: csConnectivityTable.setDescription('A table describing the current state of EdgeServer connections to this CoreServer')
csConnectivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1), ).setIndexNames((0, "ACTONA-ACTASTOR-MIB", "csConTabIndex"))
if mibBuilder.loadTexts: csConnectivityEntry.setStatus('current')
if mibBuilder.loadTexts: csConnectivityEntry.setDescription('A single entry in the connection table - denoting a specific EdgeServer')
csConTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: csConTabIndex.setStatus('current')
if mibBuilder.loadTexts: csConTabIndex.setDescription('Index column - sequential line number in the table')
csConTabClusterID = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabClusterID.setStatus('current')
if mibBuilder.loadTexts: csConTabClusterID.setDescription('ID of the CoreServer cluster to which this CoreServer belongs')
csConTabClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabClusterName.setStatus('current')
if mibBuilder.loadTexts: csConTabClusterName.setDescription('Name of the CoreServer cluster to which this CoreServer belongs')
csConTabIsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabIsConnected.setStatus('current')
if mibBuilder.loadTexts: csConTabIsConnected.setDescription('Indicates whether the EdgeServer is currently connected to this CoreServer')
csConTabTotalSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabTotalSentMessages.setStatus('current')
if mibBuilder.loadTexts: csConTabTotalSentMessages.setDescription('The total number of messages sent from the CoreServer to this EdgeServer')
csConTabSentCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabSentCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: csConTabSentCompressionRatio.setDescription('The compression ratio (in %) of the messages sent from the CoreServer to this EdgeServer')
csConTabTotalReceivedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabTotalReceivedMessages.setStatus('current')
if mibBuilder.loadTexts: csConTabTotalReceivedMessages.setDescription('The total number of messages received by the CoreServer from this EdgeServer')
csConTabReceivedCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabReceivedCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: csConTabReceivedCompressionRatio.setDescription('The compression ratio (in %) of the messages received by the CoreServer from this EdgeServer')
csConTabTotalSentKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 9), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabTotalSentKBytes.setStatus('current')
if mibBuilder.loadTexts: csConTabTotalSentKBytes.setDescription('The total number of kilobytes sent from the CoreServer to this EdgeServer')
csConTabTotalReceivedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 1, 1, 10), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: csConTabTotalReceivedKBytes.setStatus('current')
if mibBuilder.loadTexts: csConTabTotalReceivedKBytes.setDescription('The total number of kilobytes received by the CoreServer from this EdgeServer')
csDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDeviceName.setStatus('current')
if mibBuilder.loadTexts: csDeviceName.setDescription('The network interface card inside the appliance used by the CoreServer (ETH0 or ETH1)')
csWINS = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csWINS.setStatus('current')
if mibBuilder.loadTexts: csWINS.setDescription('The WINS server defined for this CoreServer (if any)')
csCIFSServersTable = MibTable((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 4), )
if mibBuilder.loadTexts: csCIFSServersTable.setStatus('current')
if mibBuilder.loadTexts: csCIFSServersTable.setDescription('A table listing all the CIFS file servers exported by this CoreServer')
csCIFSServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 4, 1), ).setIndexNames((0, "ACTONA-ACTASTOR-MIB", "csCIFSServersTabIndex"))
if mibBuilder.loadTexts: csCIFSServersEntry.setStatus('current')
if mibBuilder.loadTexts: csCIFSServersEntry.setDescription('A single entry in the CIFS server table')
csCIFSServersTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: csCIFSServersTabIndex.setStatus('current')
if mibBuilder.loadTexts: csCIFSServersTabIndex.setDescription('Index column - sequential line number in the table')
csCIFSServersTabServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csCIFSServersTabServerName.setStatus('current')
if mibBuilder.loadTexts: csCIFSServersTabServerName.setDescription('Name of the CIFS server exported by this CoreServer')
csNFSServersTable = MibTable((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 5), )
if mibBuilder.loadTexts: csNFSServersTable.setStatus('current')
if mibBuilder.loadTexts: csNFSServersTable.setDescription('A table listing all the NFS servers exported by this CoreServer')
csNFSServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 5, 1), ).setIndexNames((0, "ACTONA-ACTASTOR-MIB", "csNFSServersTabIndex"))
if mibBuilder.loadTexts: csNFSServersEntry.setStatus('current')
if mibBuilder.loadTexts: csNFSServersEntry.setDescription('A single entry in the NFS server table')
csNFSServersTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: csNFSServersTabIndex.setStatus('current')
if mibBuilder.loadTexts: csNFSServersTabIndex.setDescription('Index column - sequential line number in the table')
csNFSServersTabServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csNFSServersTabServerName.setStatus('current')
if mibBuilder.loadTexts: csNFSServersTabServerName.setDescription('Name of the NFS server exported by this CoreServer')
csNFSServersTabUseTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csNFSServersTabUseTCP.setStatus('current')
if mibBuilder.loadTexts: csNFSServersTabUseTCP.setDescription('Indicates whether this NFS server supports the TCP transport layer protocol')
csNFSServersTabUseUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csNFSServersTabUseUDP.setStatus('current')
if mibBuilder.loadTexts: csNFSServersTabUseUDP.setDescription('Indicates whether this NFS server supports the UDP transport layer protocol')
csLogsTrap = NotificationType((1, 3, 6, 1, 4, 1, 17471, 1, 3, 3))
if mibBuilder.loadTexts: csLogsTrap.setStatus('deprecated')
if mibBuilder.loadTexts: csLogsTrap.setDescription('The OID of trap messages related to the CoreServer. This object is deprecated in favor of acCsLogsTrap.')
edgeServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 4))
if mibBuilder.loadTexts: edgeServer.setStatus('current')
if mibBuilder.loadTexts: edgeServer.setDescription('ActaStor EdgeServer-related information')
esGeneral = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 4, 1))
if mibBuilder.loadTexts: esGeneral.setStatus('current')
if mibBuilder.loadTexts: esGeneral.setDescription('EdgeServer general information')
esIsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIsConfigured.setStatus('current')
if mibBuilder.loadTexts: esIsConfigured.setDescription('Indicates whether the EdgeServer component has been configured to run on this gateway')
esIsAlive = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIsAlive.setStatus('current')
if mibBuilder.loadTexts: esIsAlive.setDescription('Indicates whether the EdgeServer component is currently running on this gateway')
esUpTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esUpTime.setStatus('current')
if mibBuilder.loadTexts: esUpTime.setDescription('The elapsed time since the EdgeServer was started')
esState = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2))
if mibBuilder.loadTexts: esState.setStatus('current')
if mibBuilder.loadTexts: esState.setDescription('The current run-time state of the EdgeServer')
esConnectivityTable = MibTable((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1), )
if mibBuilder.loadTexts: esConnectivityTable.setStatus('current')
if mibBuilder.loadTexts: esConnectivityTable.setDescription('A table describing the current state of CoreServer connections to this EdgeServer')
esConnectivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1), ).setIndexNames((0, "ACTONA-ACTASTOR-MIB", "esConTabIndex"))
if mibBuilder.loadTexts: esConnectivityEntry.setStatus('current')
if mibBuilder.loadTexts: esConnectivityEntry.setDescription('A single entry in the connection table - denoting a specific CoreServer')
esConTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: esConTabIndex.setStatus('current')
if mibBuilder.loadTexts: esConTabIndex.setDescription('Index column - sequential line number in the table')
esConTabClusterID = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabClusterID.setStatus('current')
if mibBuilder.loadTexts: esConTabClusterID.setDescription('ID of the CoreServer cluster to which this CoreServer belongs')
esConTabClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabClusterName.setStatus('current')
if mibBuilder.loadTexts: esConTabClusterName.setDescription('Name of the CoreServer cluster to which this CoreServer belongs')
esConTabIsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabIsConnected.setStatus('current')
if mibBuilder.loadTexts: esConTabIsConnected.setDescription('Indicates whether the CoreServer is currently connected to this EdgeServer')
esConTabTotalSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabTotalSentMessages.setStatus('current')
if mibBuilder.loadTexts: esConTabTotalSentMessages.setDescription('The total number of messasges sent from the EdgeServer to this CoreServer')
esConTabSentCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabSentCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: esConTabSentCompressionRatio.setDescription('The compression ratio (in %) of the messages sent from the EdgeServer to this CoreServer')
esConTabTotalReceivedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabTotalReceivedMessages.setStatus('current')
if mibBuilder.loadTexts: esConTabTotalReceivedMessages.setDescription('The total number of messages received by the EdgeServer from this CoreServer')
esConTabReceivedCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabReceivedCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: esConTabReceivedCompressionRatio.setDescription('The compression ratio (in %) of the messages received by the EdgeServer from this CoreServer')
esConTabTotalSentKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 9), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabTotalSentKBytes.setStatus('current')
if mibBuilder.loadTexts: esConTabTotalSentKBytes.setDescription('The total number of kilobytes sent from the EdgeServer to this CoreServer')
esConTabTotalReceivedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 1, 1, 10), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: esConTabTotalReceivedKBytes.setStatus('current')
if mibBuilder.loadTexts: esConTabTotalReceivedKBytes.setDescription('The total number of kilobytes received by the EdgeServer from this CoreServer')
esCIFSInfo = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2))
if mibBuilder.loadTexts: esCIFSInfo.setStatus('current')
if mibBuilder.loadTexts: esCIFSInfo.setDescription('EdgeServer CIFS (Windows) protocol information')
esTotalBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 1), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: esTotalBytesRead.setStatus('current')
if mibBuilder.loadTexts: esTotalBytesRead.setDescription('The total number of kilobytes read by clients from the EdgeServer (via cache or remotely) using the CIFS protocol')
esTotalWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 2), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: esTotalWrittenBytes.setStatus('current')
if mibBuilder.loadTexts: esTotalWrittenBytes.setDescription('The total number of kilobytes written to the EdgeServer using the CIFS protocol')
esRemoteRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esRemoteRequestCount.setStatus('current')
if mibBuilder.loadTexts: esRemoteRequestCount.setDescription('The total number of remote synchronous CIFS requests sent to the CoreServer')
esLocalRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esLocalRequestCount.setStatus('current')
if mibBuilder.loadTexts: esLocalRequestCount.setDescription('The total number of CIFS requests the EdgeServer handled locally or sent asynchronously to the CoreServer')
esTotalRemoteTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esTotalRemoteTime.setStatus('current')
if mibBuilder.loadTexts: esTotalRemoteTime.setDescription('The total duration of all remote synchronous CIFS requests sent to the CoreServer')
esTotalLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esTotalLocalTime.setStatus('current')
if mibBuilder.loadTexts: esTotalLocalTime.setDescription('The total duration of all CIFS requests to the EdgeServer (handled either locally or asynchronously)')
esConnectedSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esConnectedSessionCount.setStatus('current')
if mibBuilder.loadTexts: esConnectedSessionCount.setDescription('The number of currently connected CIFS sessions')
esCifsOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCifsOpenFiles.setStatus('current')
if mibBuilder.loadTexts: esCifsOpenFiles.setDescription('The number of currently open CIFS files')
esCacheInfo = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4))
if mibBuilder.loadTexts: esCacheInfo.setStatus('current')
if mibBuilder.loadTexts: esCacheInfo.setDescription('EdgeServer cache state information')
esMaxCacheVolume = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 1), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: esMaxCacheVolume.setStatus('current')
if mibBuilder.loadTexts: esMaxCacheVolume.setDescription('The maximum disk space (in KB) allocated for data in the EdgeServer cache')
esCurrentCacheVolume = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 2), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: esCurrentCacheVolume.setStatus('current')
if mibBuilder.loadTexts: esCurrentCacheVolume.setDescription('The amount of disk space currently being used for data in the EdgeServer cache')
esMaxCacheResources = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esMaxCacheResources.setStatus('current')
if mibBuilder.loadTexts: esMaxCacheResources.setDescription('The maximum number of cache resources (files and directories) supported by the EdgeServer cache, regardless of the size of these resources')
esCurrentCacheResources = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCurrentCacheResources.setStatus('current')
if mibBuilder.loadTexts: esCurrentCacheResources.setDescription('The current number of cache resources (files and directories) held in the EdgeServer cache')
esResourceEvictedNum = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esResourceEvictedNum.setStatus('current')
if mibBuilder.loadTexts: esResourceEvictedNum.setDescription('The number of cache resources (files and directories) that have been evicted from the cache since the EdgeServer started')
esLastEvictedTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esLastEvictedTime.setStatus('current')
if mibBuilder.loadTexts: esLastEvictedTime.setDescription('The time cache resources (files and directories) were last evicted from the EdgeServer cache. 00:00 is displayed if no cache resources have been evicted since the EdgeServer started.')
esVolHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: esVolHiWatermark.setStatus('current')
if mibBuilder.loadTexts: esVolHiWatermark.setDescription('The disk-usage percentage that triggers the eviction of resources from the EdgeServer cache')
esVolLoWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: esVolLoWatermark.setStatus('current')
if mibBuilder.loadTexts: esVolLoWatermark.setDescription('The target disk-usage percentage to be reached via cache eviction when triggered by esVolHiWatermark. When this low watermark is reached, cache eviction stops.')
esAmntHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: esAmntHiWatermark.setStatus('current')
if mibBuilder.loadTexts: esAmntHiWatermark.setDescription('The percentage of maximum cache resources (defined by esMaxCacheResources) that triggers the eviction of resources from the EdgeServer cache')
esAmntLoWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: esAmntLoWatermark.setStatus('current')
if mibBuilder.loadTexts: esAmntLoWatermark.setDescription('The target percetage of total cache resources (defined by esMaxCacheResources) to be reached via cache eviction when triggered by esAmntHiWatermark. When this low watermark is reached, cache eviction stops.')
esEvictedAge = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esEvictedAge.setStatus('current')
if mibBuilder.loadTexts: esEvictedAge.setDescription('The amount of time spent in the EdgeServer cache by the resource that was last evicted. If this amount is too short or too long, it is recommended to modify the size of the cache.')
esEvictedLastAccess = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 4, 2, 4, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esEvictedLastAccess.setStatus('current')
if mibBuilder.loadTexts: esEvictedLastAccess.setDescription('The time when the resource last evicted from the EdgeServer cache was last accessed')
esLogsTrap = NotificationType((1, 3, 6, 1, 4, 1, 17471, 1, 4, 3))
if mibBuilder.loadTexts: esLogsTrap.setStatus('deprecated')
if mibBuilder.loadTexts: esLogsTrap.setDescription('The OID of trap messages related to the EdgeServer. This object is deprecated in favor of acEsLogsTrap.')
cifsAO = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 6))
if mibBuilder.loadTexts: cifsAO.setStatus('current')
if mibBuilder.loadTexts: cifsAO.setDescription('CIFS AO-related information')
cfGeneral = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 6, 1))
if mibBuilder.loadTexts: cfGeneral.setStatus('current')
if mibBuilder.loadTexts: cfGeneral.setDescription('CIFS AO general information')
cfIsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfIsConfigured.setStatus('current')
if mibBuilder.loadTexts: cfIsConfigured.setDescription('Indicates whether CIFS AO has been configured to run on this WAE')
cfIsAlive = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfIsAlive.setStatus('current')
if mibBuilder.loadTexts: cfIsAlive.setDescription('Indicates whether CIFS AO is currently running on this WAE')
cfUpTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfUpTime.setStatus('current')
if mibBuilder.loadTexts: cfUpTime.setDescription('Elapsed time since the CIFS AO was started')
cfState = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2))
if mibBuilder.loadTexts: cfState.setStatus('current')
if mibBuilder.loadTexts: cfState.setDescription('Current run-time state of CIFS AO')
cfCIFSInfo = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1))
if mibBuilder.loadTexts: cfCIFSInfo.setStatus('current')
if mibBuilder.loadTexts: cfCIFSInfo.setDescription('CIFS AO - CIFS (Windows) protocol information')
cfTotalBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 1), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfTotalBytesRead.setStatus('current')
if mibBuilder.loadTexts: cfTotalBytesRead.setDescription('Total number of kilobytes read by clients from the Client-side (via cache or remotely) using CIFS AO')
cfTotalWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 2), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfTotalWrittenBytes.setStatus('current')
if mibBuilder.loadTexts: cfTotalWrittenBytes.setDescription('Total number of kilobytes written to the Client-side using the CIFS AO')
cfRemoteRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfRemoteRequestCount.setStatus('current')
if mibBuilder.loadTexts: cfRemoteRequestCount.setDescription('Total number of remote requests processed by CIFS AO')
cfLocalRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfLocalRequestCount.setStatus('current')
if mibBuilder.loadTexts: cfLocalRequestCount.setDescription('Total number of local requests processed by CIFS AO')
cfTotalRemoteTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfTotalRemoteTime.setStatus('current')
if mibBuilder.loadTexts: cfTotalRemoteTime.setDescription('Total duration of time taken by CIFS AO to process all remote requests')
cfTotalLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfTotalLocalTime.setStatus('current')
if mibBuilder.loadTexts: cfTotalLocalTime.setDescription('Total duration of time taken by CIFS AO to process all local requests')
cfConnectedSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfConnectedSessionCount.setStatus('current')
if mibBuilder.loadTexts: cfConnectedSessionCount.setDescription('Number of currently connected CIFS sessions')
cfCifsOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCifsOpenFiles.setStatus('current')
if mibBuilder.loadTexts: cfCifsOpenFiles.setDescription('Number of currently open CIFS files')
cfCacheInfo = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2))
if mibBuilder.loadTexts: cfCacheInfo.setStatus('current')
if mibBuilder.loadTexts: cfCacheInfo.setDescription('CIFS AO cache state information')
cfMaxCacheVolume = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 1), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMaxCacheVolume.setStatus('current')
if mibBuilder.loadTexts: cfMaxCacheVolume.setDescription('Maximum disk space (in KB) allocated for data in the CIFS AO cache')
cfCurrentCacheVolume = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 2), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCurrentCacheVolume.setStatus('current')
if mibBuilder.loadTexts: cfCurrentCacheVolume.setDescription('Amount of disk space currently being used for data in the CIFS AO cache')
cfMaxCacheResources = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMaxCacheResources.setStatus('current')
if mibBuilder.loadTexts: cfMaxCacheResources.setDescription('Maximum number of cache resources (files and directories) supported by the CIFS AO cache, regardless of the size of these resources')
cfCurrentCacheResources = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCurrentCacheResources.setStatus('current')
if mibBuilder.loadTexts: cfCurrentCacheResources.setDescription('Current number of cache resources (files and directories) held in the CIFS AO cache')
cfResourceEvictedNum = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfResourceEvictedNum.setStatus('current')
if mibBuilder.loadTexts: cfResourceEvictedNum.setDescription('Number of cache resources (files and directories) that have been evicted from the cache since CIFS AO started')
cfLastEvictedTime = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfLastEvictedTime.setStatus('current')
if mibBuilder.loadTexts: cfLastEvictedTime.setDescription('Time when cache resources (files and directories) were last evicted from the CIFS AO cache. N/A is displayed if no cache resources have been evicted since CIFS AO started')
cfVolHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfVolHiWatermark.setStatus('current')
if mibBuilder.loadTexts: cfVolHiWatermark.setDescription('Disk-usage percentage that triggers the eviction of resources from the CIFS AO cache')
cfVolLoWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfVolLoWatermark.setStatus('current')
if mibBuilder.loadTexts: cfVolLoWatermark.setDescription('Target disk-usage percentage to be reached via cache eviction when triggered by cfVolHiWatermark. When this low watermark is reached, cache eviction stops')
cfAmntHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAmntHiWatermark.setStatus('current')
if mibBuilder.loadTexts: cfAmntHiWatermark.setDescription('Percentage of maximum cache resources (defined by cfMaxCacheResources) that triggers the eviction of resources from the CIFS AO cache')
cfAmntLoWatermark = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAmntLoWatermark.setStatus('current')
if mibBuilder.loadTexts: cfAmntLoWatermark.setDescription('Target percetage of maximum cache resources (defined by cfMaxCacheResources) to be reached via cache eviction when triggered by cfAmntHiWatermark. When this low watermark is reached, cache eviction stops')
cfEvictedAge = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfEvictedAge.setStatus('current')
if mibBuilder.loadTexts: cfEvictedAge.setDescription('Amount of time spent in the CIFS AO cache by the resource that was last evicted. If this amount is too short or too long, it is recommended to modify the size of the cache')
cfEvictedLastAccess = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 6, 2, 2, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfEvictedLastAccess.setStatus('current')
if mibBuilder.loadTexts: cfEvictedLastAccess.setDescription('Time when the resource last evicted from the CIFS AO cache was last accessed')
notificationsInfo = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 1, 5))
if mibBuilder.loadTexts: notificationsInfo.setStatus('current')
if mibBuilder.loadTexts: notificationsInfo.setDescription('ActaStor notification related information')
acLogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fatal", 1), ("error", 2), ("warning", 3), ("info", 4), ("debug", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogSeverity.setStatus('current')
if mibBuilder.loadTexts: acLogSeverity.setDescription('The severity level of the actastor log message')
acLogMsgText = MibScalar((1, 3, 6, 1, 4, 1, 17471, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogMsgText.setStatus('current')
if mibBuilder.loadTexts: acLogMsgText.setDescription('The actastor log message text')
acCsLogsTrap = NotificationType((1, 3, 6, 1, 4, 1, 17471, 0, 0)).setObjects(("ACTONA-ACTASTOR-MIB", "acLogSeverity"), ("ACTONA-ACTASTOR-MIB", "acLogMsgText"))
if mibBuilder.loadTexts: acCsLogsTrap.setStatus('current')
if mibBuilder.loadTexts: acCsLogsTrap.setDescription('This trap indicates that the CoreServer has generated a log message. This object supersedes mgrLogsTrap')
acMgrLogsTrap = NotificationType((1, 3, 6, 1, 4, 1, 17471, 0, 1)).setObjects(("ACTONA-ACTASTOR-MIB", "acLogSeverity"), ("ACTONA-ACTASTOR-MIB", "acLogMsgText"))
if mibBuilder.loadTexts: acMgrLogsTrap.setStatus('current')
if mibBuilder.loadTexts: acMgrLogsTrap.setDescription('This trap indicates that the ManagerServer has generated a log message. This object supersedes mgrLogsTrap')
acEsLogsTrap = NotificationType((1, 3, 6, 1, 4, 1, 17471, 0, 2)).setObjects(("ACTONA-ACTASTOR-MIB", "acLogSeverity"), ("ACTONA-ACTASTOR-MIB", "acLogMsgText"))
if mibBuilder.loadTexts: acEsLogsTrap.setStatus('current')
if mibBuilder.loadTexts: acEsLogsTrap.setDescription('This trap indicates that the EdgeServer has generated a log message. This object supersedes esLogsTrap')
actastorGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 17471, 2))
if mibBuilder.loadTexts: actastorGroups.setStatus('current')
if mibBuilder.loadTexts: actastorGroups.setDescription('ActaStor object groups')
generalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17471, 2, 1)).setObjects(("ACTONA-ACTASTOR-MIB", "actastorVersion"), ("ACTONA-ACTASTOR-MIB", "buildString"), ("ACTONA-ACTASTOR-MIB", "email"), ("ACTONA-ACTASTOR-MIB", "isValid"), ("ACTONA-ACTASTOR-MIB", "daysLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    generalGroup = generalGroup.setStatus('current')
if mibBuilder.loadTexts: generalGroup.setDescription('General information group')
managerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17471, 2, 2)).setObjects(("ACTONA-ACTASTOR-MIB", "mgrCentralServerHost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managerGroup = managerGroup.setStatus('current')
if mibBuilder.loadTexts: managerGroup.setDescription('Manager group')
coreServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17471, 2, 3)).setObjects(("ACTONA-ACTASTOR-MIB", "csDeviceName"), ("ACTONA-ACTASTOR-MIB", "csIsConfigured"), ("ACTONA-ACTASTOR-MIB", "csIsAlive"), ("ACTONA-ACTASTOR-MIB", "csUpTime"), ("ACTONA-ACTASTOR-MIB", "csWINS"), ("ACTONA-ACTASTOR-MIB", "csConTabClusterID"), ("ACTONA-ACTASTOR-MIB", "csConTabClusterName"), ("ACTONA-ACTASTOR-MIB", "csConTabIsConnected"), ("ACTONA-ACTASTOR-MIB", "csConTabTotalSentMessages"), ("ACTONA-ACTASTOR-MIB", "csConTabSentCompressionRatio"), ("ACTONA-ACTASTOR-MIB", "csConTabTotalReceivedMessages"), ("ACTONA-ACTASTOR-MIB", "csConTabReceivedCompressionRatio"), ("ACTONA-ACTASTOR-MIB", "csConTabTotalSentKBytes"), ("ACTONA-ACTASTOR-MIB", "csConTabTotalReceivedKBytes"), ("ACTONA-ACTASTOR-MIB", "csCIFSServersTabServerName"), ("ACTONA-ACTASTOR-MIB", "csNFSServersTabServerName"), ("ACTONA-ACTASTOR-MIB", "csNFSServersTabUseTCP"), ("ACTONA-ACTASTOR-MIB", "csNFSServersTabUseUDP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coreServerGroup = coreServerGroup.setStatus('current')
if mibBuilder.loadTexts: coreServerGroup.setDescription('CoreServer group')
edgeServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17471, 2, 4)).setObjects(("ACTONA-ACTASTOR-MIB", "esIsConfigured"), ("ACTONA-ACTASTOR-MIB", "esIsAlive"), ("ACTONA-ACTASTOR-MIB", "esUpTime"), ("ACTONA-ACTASTOR-MIB", "esTotalBytesRead"), ("ACTONA-ACTASTOR-MIB", "esTotalWrittenBytes"), ("ACTONA-ACTASTOR-MIB", "esRemoteRequestCount"), ("ACTONA-ACTASTOR-MIB", "esLocalRequestCount"), ("ACTONA-ACTASTOR-MIB", "esConnectedSessionCount"), ("ACTONA-ACTASTOR-MIB", "esCifsOpenFiles"), ("ACTONA-ACTASTOR-MIB", "esMaxCacheVolume"), ("ACTONA-ACTASTOR-MIB", "esCurrentCacheVolume"), ("ACTONA-ACTASTOR-MIB", "esMaxCacheResources"), ("ACTONA-ACTASTOR-MIB", "esCurrentCacheResources"), ("ACTONA-ACTASTOR-MIB", "esTotalRemoteTime"), ("ACTONA-ACTASTOR-MIB", "esTotalLocalTime"), ("ACTONA-ACTASTOR-MIB", "esConTabClusterID"), ("ACTONA-ACTASTOR-MIB", "esConTabClusterName"), ("ACTONA-ACTASTOR-MIB", "esConTabIsConnected"), ("ACTONA-ACTASTOR-MIB", "esConTabTotalSentMessages"), ("ACTONA-ACTASTOR-MIB", "esConTabSentCompressionRatio"), ("ACTONA-ACTASTOR-MIB", "esConTabTotalReceivedMessages"), ("ACTONA-ACTASTOR-MIB", "esConTabReceivedCompressionRatio"), ("ACTONA-ACTASTOR-MIB", "esConTabTotalSentKBytes"), ("ACTONA-ACTASTOR-MIB", "esConTabTotalReceivedKBytes"), ("ACTONA-ACTASTOR-MIB", "esResourceEvictedNum"), ("ACTONA-ACTASTOR-MIB", "esLastEvictedTime"), ("ACTONA-ACTASTOR-MIB", "esVolHiWatermark"), ("ACTONA-ACTASTOR-MIB", "esVolLoWatermark"), ("ACTONA-ACTASTOR-MIB", "esAmntHiWatermark"), ("ACTONA-ACTASTOR-MIB", "esAmntLoWatermark"), ("ACTONA-ACTASTOR-MIB", "esEvictedAge"), ("ACTONA-ACTASTOR-MIB", "esEvictedLastAccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    edgeServerGroup = edgeServerGroup.setStatus('current')
if mibBuilder.loadTexts: edgeServerGroup.setDescription('EdgeServer group')
logNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17471, 2, 5)).setObjects(("ACTONA-ACTASTOR-MIB", "csLogsTrap"), ("ACTONA-ACTASTOR-MIB", "esLogsTrap"), ("ACTONA-ACTASTOR-MIB", "mgrLogsTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    logNotificationsGroup = logNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: logNotificationsGroup.setDescription('Log message traps group')
logNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 17471, 2, 6)).setObjects(("ACTONA-ACTASTOR-MIB", "acCsLogsTrap"), ("ACTONA-ACTASTOR-MIB", "acEsLogsTrap"), ("ACTONA-ACTASTOR-MIB", "acMgrLogsTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    logNotificationsGroupRev1 = logNotificationsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: logNotificationsGroupRev1.setDescription('Log message traps group')
acNotificationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17471, 2, 7)).setObjects(("ACTONA-ACTASTOR-MIB", "acLogSeverity"), ("ACTONA-ACTASTOR-MIB", "acLogMsgText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acNotificationInfoGroup = acNotificationInfoGroup.setStatus('current')
if mibBuilder.loadTexts: acNotificationInfoGroup.setDescription('A collection of objects which provides info about notifications.')
cifsAOGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17471, 2, 9)).setObjects(("ACTONA-ACTASTOR-MIB", "cfIsConfigured"), ("ACTONA-ACTASTOR-MIB", "cfIsAlive"), ("ACTONA-ACTASTOR-MIB", "cfUpTime"), ("ACTONA-ACTASTOR-MIB", "cfTotalBytesRead"), ("ACTONA-ACTASTOR-MIB", "cfTotalWrittenBytes"), ("ACTONA-ACTASTOR-MIB", "cfRemoteRequestCount"), ("ACTONA-ACTASTOR-MIB", "cfLocalRequestCount"), ("ACTONA-ACTASTOR-MIB", "cfTotalRemoteTime"), ("ACTONA-ACTASTOR-MIB", "cfTotalLocalTime"), ("ACTONA-ACTASTOR-MIB", "cfConnectedSessionCount"), ("ACTONA-ACTASTOR-MIB", "cfCifsOpenFiles"), ("ACTONA-ACTASTOR-MIB", "cfMaxCacheVolume"), ("ACTONA-ACTASTOR-MIB", "cfCurrentCacheVolume"), ("ACTONA-ACTASTOR-MIB", "cfMaxCacheResources"), ("ACTONA-ACTASTOR-MIB", "cfCurrentCacheResources"), ("ACTONA-ACTASTOR-MIB", "cfResourceEvictedNum"), ("ACTONA-ACTASTOR-MIB", "cfLastEvictedTime"), ("ACTONA-ACTASTOR-MIB", "cfVolHiWatermark"), ("ACTONA-ACTASTOR-MIB", "cfVolLoWatermark"), ("ACTONA-ACTASTOR-MIB", "cfAmntHiWatermark"), ("ACTONA-ACTASTOR-MIB", "cfAmntLoWatermark"), ("ACTONA-ACTASTOR-MIB", "cfEvictedAge"), ("ACTONA-ACTASTOR-MIB", "cfEvictedLastAccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifsAOGroup = cifsAOGroup.setStatus('current')
if mibBuilder.loadTexts: cifsAOGroup.setDescription('CifsAO group')
mibBuilder.exportSymbols("ACTONA-ACTASTOR-MIB", coreServerGroup=coreServerGroup, isValid=isValid, notificationsInfo=notificationsInfo, esIsAlive=esIsAlive, esEvictedLastAccess=esEvictedLastAccess, csNFSServersTable=csNFSServersTable, managerGroup=managerGroup, esLastEvictedTime=esLastEvictedTime, logNotificationsGroup=logNotificationsGroup, esConTabTotalReceivedMessages=esConTabTotalReceivedMessages, esConnectedSessionCount=esConnectedSessionCount, email=email, esConTabIsConnected=esConTabIsConnected, cfCifsOpenFiles=cfCifsOpenFiles, cfEvictedAge=cfEvictedAge, csNFSServersTabUseTCP=csNFSServersTabUseTCP, cfTotalBytesRead=cfTotalBytesRead, esVolLoWatermark=esVolLoWatermark, cfEvictedLastAccess=cfEvictedLastAccess, license=license, generalGroup=generalGroup, esConTabClusterID=esConTabClusterID, acNotificationInfoGroup=acNotificationInfoGroup, csConTabIndex=csConTabIndex, csConTabIsConnected=csConTabIsConnected, esConTabClusterName=esConTabClusterName, acLogMsgText=acLogMsgText, esResourceEvictedNum=esResourceEvictedNum, esConTabTotalSentMessages=esConTabTotalSentMessages, edgeServerGroup=edgeServerGroup, generalInformation=generalInformation, csDeviceName=csDeviceName, cifsAO=cifsAO, esVolHiWatermark=esVolHiWatermark, acMgrLogsTrap=acMgrLogsTrap, csIsAlive=csIsAlive, csNFSServersTabIndex=csNFSServersTabIndex, cfResourceEvictedNum=cfResourceEvictedNum, esIsConfigured=esIsConfigured, cfIsConfigured=cfIsConfigured, esMaxCacheResources=esMaxCacheResources, acCsLogsTrap=acCsLogsTrap, esCIFSInfo=esCIFSInfo, cfAmntHiWatermark=cfAmntHiWatermark, logNotificationsGroupRev1=logNotificationsGroupRev1, csConnectivityTable=csConnectivityTable, cfUpTime=cfUpTime, csNFSServersTabUseUDP=csNFSServersTabUseUDP, esTotalWrittenBytes=esTotalWrittenBytes, buildString=buildString, esConnectivityTable=esConnectivityTable, cfCacheInfo=cfCacheInfo, csConTabTotalSentKBytes=csConTabTotalSentKBytes, coreServer=coreServer, esRemoteRequestCount=esRemoteRequestCount, esConTabIndex=esConTabIndex, csCIFSServersTabServerName=csCIFSServersTabServerName, cfVolLoWatermark=cfVolLoWatermark, csConTabClusterID=csConTabClusterID, csNFSServersTabServerName=csNFSServersTabServerName, esCurrentCacheResources=esCurrentCacheResources, cfCurrentCacheVolume=cfCurrentCacheVolume, daysLeft=daysLeft, cfMaxCacheVolume=cfMaxCacheVolume, esConTabSentCompressionRatio=esConTabSentCompressionRatio, esCacheInfo=esCacheInfo, esMaxCacheVolume=esMaxCacheVolume, cfIsAlive=cfIsAlive, esUpTime=esUpTime, actastorVersion=actastorVersion, csState=csState, cfMaxCacheResources=cfMaxCacheResources, esConnectivityEntry=esConnectivityEntry, csConTabTotalReceivedKBytes=csConTabTotalReceivedKBytes, PYSNMP_MODULE_ID=actona, cfTotalWrittenBytes=cfTotalWrittenBytes, cfAmntLoWatermark=cfAmntLoWatermark, cfCIFSInfo=cfCIFSInfo, esCurrentCacheVolume=esCurrentCacheVolume, esLogsTrap=esLogsTrap, csConnectivityEntry=csConnectivityEntry, csWINS=csWINS, cfRemoteRequestCount=cfRemoteRequestCount, csLogsTrap=csLogsTrap, actastorGroups=actastorGroups, mgrLogsTrap=mgrLogsTrap, actastor=actastor, esTotalLocalTime=esTotalLocalTime, cfLocalRequestCount=cfLocalRequestCount, mgrCentralServerHost=mgrCentralServerHost, csNFSServersEntry=csNFSServersEntry, cfState=cfState, csCIFSServersEntry=csCIFSServersEntry, esState=esState, csCIFSServersTabIndex=csCIFSServersTabIndex, esEvictedAge=esEvictedAge, cfGeneral=cfGeneral, actona=actona, esConTabTotalSentKBytes=esConTabTotalSentKBytes, cfCurrentCacheResources=cfCurrentCacheResources, cfTotalRemoteTime=cfTotalRemoteTime, esLocalRequestCount=esLocalRequestCount, acEsLogsTrap=acEsLogsTrap, csUpTime=csUpTime, support=support, esTotalBytesRead=esTotalBytesRead, cfLastEvictedTime=cfLastEvictedTime, esCifsOpenFiles=esCifsOpenFiles, manager=manager, esGeneral=esGeneral, acLogSeverity=acLogSeverity, csConTabSentCompressionRatio=csConTabSentCompressionRatio, csGeneral=csGeneral, cifsAOGroup=cifsAOGroup, csConTabTotalReceivedMessages=csConTabTotalReceivedMessages, cfConnectedSessionCount=cfConnectedSessionCount, cfVolHiWatermark=cfVolHiWatermark, csCIFSServersTable=csCIFSServersTable, edgeServer=edgeServer, cfTotalLocalTime=cfTotalLocalTime, csConTabReceivedCompressionRatio=csConTabReceivedCompressionRatio, esAmntLoWatermark=esAmntLoWatermark, csIsConfigured=csIsConfigured, esConTabReceivedCompressionRatio=esConTabReceivedCompressionRatio, esAmntHiWatermark=esAmntHiWatermark, acNotifications=acNotifications, csConTabTotalSentMessages=csConTabTotalSentMessages, esTotalRemoteTime=esTotalRemoteTime, esConTabTotalReceivedKBytes=esConTabTotalReceivedKBytes, csConTabClusterName=csConTabClusterName)
