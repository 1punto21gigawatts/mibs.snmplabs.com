#
# PySNMP MIB module FORCE10-MONITORING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORCE10-MONITORING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10VlanID, F10CycloneVersion, F10ProcessorModuleType, F10PortPipeID, F10QueueID, F10SlotID = mibBuilder.importSymbols("FORCE10-TC", "F10VlanID", "F10CycloneVersion", "F10ProcessorModuleType", "F10PortPipeID", "F10QueueID", "F10SlotID")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, IpAddress, TimeTicks, Unsigned32, MibIdentifier, ObjectIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "IpAddress", "TimeTicks", "Unsigned32", "MibIdentifier", "ObjectIdentity", "NotificationType", "Counter64")
DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
f10MonitoringMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 3))
f10MonitoringMib.setRevisions(('2008-12-18 12:00', '1906-01-20 00:00', '2000-11-02 10:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10MonitoringMib.setRevisionsDescriptions(('Force10 Monitoring MIB version 1.3 Added CPU Ingress Queue Unicast Statistics table. ', 'Force10 Monitoring MIB version 1.2 Added IP and ARP statistic objects that are not available in RFC1213. ', 'Force10 Monitoring MIB version 1.1',))
if mibBuilder.loadTexts: f10MonitoringMib.setLastUpdated('200812181200Z')
if mibBuilder.loadTexts: f10MonitoringMib.setOrganization('Force10 Networks, Inc.')
if mibBuilder.loadTexts: f10MonitoringMib.setContactInfo('Force10 Networks, Inc 1440 McCarthy Blvd Milpitas, CA 95035 (408) 571-3500 support@force10networks.com http://www.force10networks.com')
if mibBuilder.loadTexts: f10MonitoringMib.setDescription('Force10 Monitoring MIB provides statistics and accounting for various Force10 products. ')
f10MonGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 1))
f10MonQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2))
f10MonMac = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3))
f10MonIfQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4))
f10NetworkStat = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5))
f10IpStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 1))
f10ArpStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 2))
f10MonMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version1dot1", 2), ("version1dot2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MonMibVersion.setStatus('current')
if mibBuilder.loadTexts: f10MonMibVersion.setDescription(' version1(1) - initial version, define QOS Queue Statistics table. version1dot1(2) - support MAC Accounting (f10MonMac). version1dot2(3) - support Interface Queue Statistics Tables (f10MonIfQueue). ')
f10MonQueueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 1))
f10MonMaxQueue = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MonMaxQueue.setStatus('current')
if mibBuilder.loadTexts: f10MonMaxQueue.setDescription('The maximum number of Force10 QOS queue supported by Force10 Interfaces. ')
f10InQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2), )
if mibBuilder.loadTexts: f10InQueueStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: f10InQueueStatisticsTable.setDescription('The Force10 QOS Input Queue Statistics Table. This table provides Input Queue statistics for Force10 Interfaces. ')
f10InQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FORCE10-MONITORING-MIB", "f10InQueueId"))
if mibBuilder.loadTexts: f10InQueueStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: f10InQueueStatisticsEntry.setDescription('An entry in the Force10 QOS Input Queue table. The Input Queue Statistics Table is indexed by the Interface and the Queue ID. The Interface index should be an valid ifIndex as defined in the RFC1213 MIB II Interface Table and the Queue ID should be a valid Force10 Queue ID. ')
f10InQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 1), F10QueueID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueId.setStatus('current')
if mibBuilder.loadTexts: f10InQueueId.setDescription('This is the second index of this table, it must be a valid Force10 QOS Queue ID. ')
f10InQueueDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueDropPackets.setStatus('current')
if mibBuilder.loadTexts: f10InQueueDropPackets.setDescription(' ')
f10InQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueBytes.setStatus('current')
if mibBuilder.loadTexts: f10InQueueBytes.setDescription(' ')
f10InQueueMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueMatchPackets.setStatus('current')
if mibBuilder.loadTexts: f10InQueueMatchPackets.setDescription(' ')
f10InQueueMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueMatchBytes.setStatus('current')
if mibBuilder.loadTexts: f10InQueueMatchBytes.setDescription(' ')
f10InQueueMatchBps = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueMatchBps.setStatus('current')
if mibBuilder.loadTexts: f10InQueueMatchBps.setDescription(' ')
f10InQueueCycloneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 7), F10CycloneVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueCycloneVersion.setStatus('current')
if mibBuilder.loadTexts: f10InQueueCycloneVersion.setDescription('The linecard Cyclone hardware version. ')
f10InQueueBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueueBytesCount.setStatus('current')
if mibBuilder.loadTexts: f10InQueueBytesCount.setDescription('The cumulative number of bytes data passing through this queue. This object is available on Cyclone version 2.0 (C2T2) hardware only. ')
f10InQueuePktsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10InQueuePktsCount.setStatus('current')
if mibBuilder.loadTexts: f10InQueuePktsCount.setDescription('The cumulative number of packets passing through this queue. This object is available on Cyclone version 2.0 (C2T2) hardware only. ')
f10OutQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3), )
if mibBuilder.loadTexts: f10OutQueueStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: f10OutQueueStatisticsTable.setDescription('The Force10 QOS Output Queue Statistics Table. This table provides Output Queue statistics for Force10 Interfaces. ')
f10OutQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FORCE10-MONITORING-MIB", "f10OutQueueId"))
if mibBuilder.loadTexts: f10OutQueueStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: f10OutQueueStatisticsEntry.setDescription('An entry in the Output Queue table. The Output Queue Statistics Table is indexed by the Interface and the Queue ID. The Interface index should be an valid ifIndex as defined in the RFC1213 MIB II Interface Table and the the Queue ID should be a valid Force10 Queue ID. ')
f10OutQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3, 1, 1), F10QueueID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10OutQueueId.setStatus('current')
if mibBuilder.loadTexts: f10OutQueueId.setDescription('This is the second index of this table, it must be a valid Force10 QOS Queue ID. ')
f10OutQueuePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10OutQueuePackets.setStatus('current')
if mibBuilder.loadTexts: f10OutQueuePackets.setDescription(' ')
f10OutQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10OutQueueBytes.setStatus('current')
if mibBuilder.loadTexts: f10OutQueueBytes.setDescription('The number of bytes in the queue. This object is available on Cyclone version 1.5 (CjTj) hardware only. ')
f10OutQueueBps = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10OutQueueBps.setStatus('current')
if mibBuilder.loadTexts: f10OutQueueBps.setDescription(' ')
f10OutQueueCycloneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3, 1, 5), F10CycloneVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10OutQueueCycloneVersion.setStatus('current')
if mibBuilder.loadTexts: f10OutQueueCycloneVersion.setDescription('The linecard Cyclone hardware version. ')
f10OutQueueBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10OutQueueBytesCount.setStatus('current')
if mibBuilder.loadTexts: f10OutQueueBytesCount.setDescription('The cumulative number of bytes data passing through this queue. This object is available on Cyclone version 2.0 (C2T2) hardware only. ')
f10WredStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4), )
if mibBuilder.loadTexts: f10WredStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: f10WredStatisticsTable.setDescription('QOS WRED Statistics Table This table provides QOS WRED statistics for the Force10 Interfaces. ')
f10WredStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FORCE10-MONITORING-MIB", "f10WredQueueId"))
if mibBuilder.loadTexts: f10WredStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: f10WredStatisticsEntry.setDescription('An entry in the WRED Statistics table. The WRED Statistics Table is indexed by the Interface and the Queue ID. The Interface index should be an valid ifIndex as defined in the RFC1213 MIB II Interface Table and the Queue ID should be a valid Force10 Queue ID. ')
f10WredQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 1), F10QueueID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredQueueId.setStatus('current')
if mibBuilder.loadTexts: f10WredQueueId.setDescription('This is the second index of this table, it must be a valid Force10 QOS Queue ID. ')
f10WredGreenName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredGreenName.setStatus('current')
if mibBuilder.loadTexts: f10WredGreenName.setDescription(' ')
f10WredGreenThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredGreenThresholdLow.setStatus('current')
if mibBuilder.loadTexts: f10WredGreenThresholdLow.setDescription(' ')
f10WredGreenThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredGreenThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: f10WredGreenThresholdHigh.setDescription(' ')
f10WredGreenDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredGreenDropPackets.setStatus('current')
if mibBuilder.loadTexts: f10WredGreenDropPackets.setDescription(' ')
f10WredGreenReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredGreenReserve1.setStatus('current')
if mibBuilder.loadTexts: f10WredGreenReserve1.setDescription(' ')
f10WredGreenReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredGreenReserve2.setStatus('current')
if mibBuilder.loadTexts: f10WredGreenReserve2.setDescription(' ')
f10WredYellowName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredYellowName.setStatus('current')
if mibBuilder.loadTexts: f10WredYellowName.setDescription(' ')
f10WredYellowThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredYellowThresholdLow.setStatus('current')
if mibBuilder.loadTexts: f10WredYellowThresholdLow.setDescription(' ')
f10WredYellowThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredYellowThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: f10WredYellowThresholdHigh.setDescription(' ')
f10WredYellowDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredYellowDropPackets.setStatus('current')
if mibBuilder.loadTexts: f10WredYellowDropPackets.setDescription(' ')
f10WredYellowReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredYellowReserve1.setStatus('current')
if mibBuilder.loadTexts: f10WredYellowReserve1.setDescription(' ')
f10WredYellowReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredYellowReserve2.setStatus('current')
if mibBuilder.loadTexts: f10WredYellowReserve2.setDescription(' ')
f10WredRedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredRedName.setStatus('current')
if mibBuilder.loadTexts: f10WredRedName.setDescription(' ')
f10WredRedThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredRedThresholdLow.setStatus('current')
if mibBuilder.loadTexts: f10WredRedThresholdLow.setDescription(' ')
f10WredRedThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredRedThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: f10WredRedThresholdHigh.setDescription(' ')
f10WredRedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredRedDropPackets.setStatus('current')
if mibBuilder.loadTexts: f10WredRedDropPackets.setDescription(' ')
f10WredRedReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredRedReserve1.setStatus('current')
if mibBuilder.loadTexts: f10WredRedReserve1.setDescription(' ')
f10WredRedReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 2, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10WredRedReserve2.setStatus('current')
if mibBuilder.loadTexts: f10WredRedReserve2.setDescription(' ')
f10MacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 1))
f10MacAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2))
f10MacAccountingDestTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1), )
if mibBuilder.loadTexts: f10MacAccountingDestTable.setStatus('current')
if mibBuilder.loadTexts: f10MacAccountingDestTable.setDescription('The MAC Accounting Destination Table. Each entry in the table provides the MAC accounting statistics from a specific Interface, VLAN ID, and the desired destination MAC Address. ')
f10MacAccountingDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1, 1), ).setIndexNames((0, "FORCE10-MONITORING-MIB", "f10MacAccInIfIndex"), (0, "FORCE10-MONITORING-MIB", "f10MacAccVlan"), (0, "FORCE10-MONITORING-MIB", "f10MacAccMacAddr"))
if mibBuilder.loadTexts: f10MacAccountingDestEntry.setStatus('current')
if mibBuilder.loadTexts: f10MacAccountingDestEntry.setDescription('An entry in the MAC Accounting Destination Table. The MAC Accounting Destination table is indexed by the input Interface, VLAN ID, and the destination MAC Address. ')
f10MacAccInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MacAccInIfIndex.setStatus('current')
if mibBuilder.loadTexts: f10MacAccInIfIndex.setDescription('The input Interface of this entry of the table. The value should be a valid ifIndex in the MIB II Interface Table. ')
f10MacAccVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1, 1, 2), F10VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MacAccVlan.setStatus('current')
if mibBuilder.loadTexts: f10MacAccVlan.setDescription('The VLAN ID. ')
f10MacAccMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MacAccMacAddr.setStatus('current')
if mibBuilder.loadTexts: f10MacAccMacAddr.setDescription("The MAC Address that identifies this entry of the table. This is the destination MAC Address of the packets that's going through the Interface identified by f10MacAccInIfIndex. ")
f10MacAccOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MacAccOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: f10MacAccOutIfIndex.setDescription('The output Interface of this entry of the table. The value should be a valid ifIndex in the MIB II Interface Table. ')
f10MacAccPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MacAccPackets.setStatus('current')
if mibBuilder.loadTexts: f10MacAccPackets.setDescription('The number of packets going through this entry of the the table, identified by the Interface/MAC/VLAN. ')
f10MacAccBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 3, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10MacAccBytes.setStatus('current')
if mibBuilder.loadTexts: f10MacAccBytes.setDescription('The number of bytes traffic going through this entry of the table, identified by the Interface/MAC/VLAN. ')
f10MonIfQueueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 1))
f10IngQueueUnicastStatTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2), )
if mibBuilder.loadTexts: f10IngQueueUnicastStatTable.setStatus('current')
if mibBuilder.loadTexts: f10IngQueueUnicastStatTable.setDescription('The Ingress Queue Unicast Statistics Table. This table provides Queue statistics for Ingress Unicast packets between Force10 linecards. ')
f10IngQueueUnicastStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1), ).setIndexNames((0, "FORCE10-MONITORING-MIB", "f10IngUnicastSrcCard"), (0, "FORCE10-MONITORING-MIB", "f10IngUnicastDestCard"), (0, "FORCE10-MONITORING-MIB", "f10IngUnicastSrcPortPipe"), (0, "FORCE10-MONITORING-MIB", "f10IngUnicastDestPortPipe"), (0, "FORCE10-MONITORING-MIB", "f10IngUnicastQueueId"))
if mibBuilder.loadTexts: f10IngQueueUnicastStatEntry.setStatus('current')
if mibBuilder.loadTexts: f10IngQueueUnicastStatEntry.setDescription('An entry in the Ingress Queue Unicast Statistics table. The Ingress Queue Unicast Statistics Table is indexed by the source and destination linecard/portpipe and Queue ID. ')
f10IngUnicastSrcCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 1), F10SlotID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastSrcCard.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastSrcCard.setDescription('This is the source linecard number. This is the first index of this table entry. ')
f10IngUnicastDestCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 2), F10SlotID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastDestCard.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastDestCard.setDescription('This is the destination linecard number. This is the 3rd index of this table entry. ')
f10IngUnicastSrcPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 3), F10PortPipeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastSrcPortPipe.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastSrcPortPipe.setDescription('This is the Force10 Cyclone PortPipe number of the source linecard. This is the 2nd index of this table entry. ')
f10IngUnicastDestPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 4), F10PortPipeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastDestPortPipe.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastDestPortPipe.setDescription('This is the Force10 Cyclone PortPipe number of the destination linecard. This is the 4th index of this table entry. ')
f10IngUnicastQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 5), F10QueueID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastQueueId.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastQueueId.setDescription('This is the Queue ID of this entry. This is the 5th index of this table entry. ')
f10IngUnicastCycloneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 6), F10CycloneVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastCycloneVersion.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastCycloneVersion.setDescription('The linecard Cyclone hardware version. ')
f10IngUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastBytes.setDescription('The number of bytes in the queue. This object is available on Cyclone version 1.5 (CjTj) hardware only. ')
f10IngUnicastBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastBytesCount.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastBytesCount.setDescription('The cumulative number of bytes data passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10IngUnicastPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastPacketCount.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastPacketCount.setDescription('The cumulative number of packets passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10IngUnicastGreenMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastGreenMin.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastGreenMin.setDescription('The min threshold for Green packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10IngUnicastGreenMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastGreenMax.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastGreenMax.setDescription('The max threshold for Green packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10IngUnicastGreenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastGreenDrop.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastGreenDrop.setDescription('The number of Green packets being dropped in this queue. ')
f10IngUnicastYellowMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastYellowMin.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastYellowMin.setDescription('The min threshold for Yellow packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10IngUnicastYellowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastYellowMax.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastYellowMax.setDescription('The max threshold for Yellow packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10IngUnicastYellowDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastYellowDrop.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastYellowDrop.setDescription('The number of Yellow packets being dropped in this queue. ')
f10IngUnicastRedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngUnicastRedDrop.setStatus('current')
if mibBuilder.loadTexts: f10IngUnicastRedDrop.setDescription('The number of Red packets being dropped in this queue. ')
f10IngQueueMulticastStatTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3), )
if mibBuilder.loadTexts: f10IngQueueMulticastStatTable.setStatus('current')
if mibBuilder.loadTexts: f10IngQueueMulticastStatTable.setDescription('The Ingress Queue Multicast Statistics Table. This table provides Queue statistics for Ingress Multicast packets at Force10 linecards. ')
f10IngQueueMulticastStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1), ).setIndexNames((0, "FORCE10-MONITORING-MIB", "f10IngMulticastSrcCard"), (0, "FORCE10-MONITORING-MIB", "f10IngMulticastSrcPortPipe"), (0, "FORCE10-MONITORING-MIB", "f10IngMulticastQueueId"))
if mibBuilder.loadTexts: f10IngQueueMulticastStatEntry.setStatus('current')
if mibBuilder.loadTexts: f10IngQueueMulticastStatEntry.setDescription('An entry in the Ingress Queue Multicast Statistics table. The Ingress Queue Multicast Statistics Table is indexed by the source linecard/portpipe and Queue ID. ')
f10IngMulticastSrcCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 1), F10SlotID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastSrcCard.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastSrcCard.setDescription('This is the source linecard number. This is the first index of this table entry. ')
f10IngMulticastSrcPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 2), F10PortPipeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastSrcPortPipe.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastSrcPortPipe.setDescription('This is the Force10 Cyclone PortPipe number of the source linecard. This is the 2nd index of this table entry. ')
f10IngMulticastQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 3), F10QueueID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastQueueId.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastQueueId.setDescription('This is the Queue ID of this entry. This is the 3rd index of this table entry. ')
f10IngMulticastCycloneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 4), F10CycloneVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastCycloneVersion.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastCycloneVersion.setDescription('The linecard Cyclone hardware version. ')
f10IngMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastBytes.setDescription('The number of bytes in the queue. This object is available on Cyclone version 1.5 (CjTj) hardware only. ')
f10IngMulticastBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastBytesCount.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastBytesCount.setDescription('The cumulative number of bytes data passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10IngMulticastPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastPacketCount.setDescription('The cumulative number of packets passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10IngMulticastGreenMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastGreenMin.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastGreenMin.setDescription('The min threshold for Green packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10IngMulticastGreenMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastGreenMax.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastGreenMax.setDescription('The max threshold for Green packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10IngMulticastGreenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastGreenDrop.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastGreenDrop.setDescription('The number of Green packets being dropped in this queue. ')
f10IngMulticastYellowMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastYellowMin.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastYellowMin.setDescription('The min threshold for Yellow packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10IngMulticastYellowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastYellowMax.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastYellowMax.setDescription('The max threshold for Yellow packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10IngMulticastYellowDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastYellowDrop.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastYellowDrop.setDescription('The number of Yellow packets being dropped in this queue. ')
f10IngMulticastRedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10IngMulticastRedDrop.setStatus('current')
if mibBuilder.loadTexts: f10IngMulticastRedDrop.setDescription('The number of Red packets being dropped in this queue. ')
f10EgQueueUnicastStatTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4), )
if mibBuilder.loadTexts: f10EgQueueUnicastStatTable.setStatus('current')
if mibBuilder.loadTexts: f10EgQueueUnicastStatTable.setDescription('The Egress Queue Unicast Statistics Table. This table provides Queue statistics for Egress Unicast packets at Force10 Interface. ')
f10EgQueueUnicastStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FORCE10-MONITORING-MIB", "f10EgUnicastQueueId"))
if mibBuilder.loadTexts: f10EgQueueUnicastStatEntry.setStatus('current')
if mibBuilder.loadTexts: f10EgQueueUnicastStatEntry.setDescription('An entry in the Egress Queue Unicast Statistics table. The Egress Queue Unicast Statistics Table is indexed by the ifIndex and Queue ID. The IfIndex should be an valid Interface Index as defined in the RFC1213 MIB II Interface Table. ')
f10EgUnicastQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 1), F10QueueID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastQueueId.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastQueueId.setDescription('This is the Queue ID of this entry. This is the 2nd index of this table entry. ')
f10EgUnicastCycloneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 2), F10CycloneVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastCycloneVersion.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastCycloneVersion.setDescription('The linecard Cyclone hardware version. ')
f10EgUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastBytes.setDescription('The number of bytes in the queue. This object is available on Cyclone version 1.5 (CjTj) hardware only. ')
f10EgUnicastBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastBytesCount.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastBytesCount.setDescription('The cumulative number of bytes data passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10EgUnicastPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastPacketCount.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastPacketCount.setDescription('The cumulative number of packets passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10EgUnicastGreenMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastGreenMin.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastGreenMin.setDescription('The min threshold for Green packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10EgUnicastGreenMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastGreenMax.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastGreenMax.setDescription('The max threshold for Green packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10EgUnicastGreenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastGreenDrop.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastGreenDrop.setDescription('The number of Green packets being dropped in this queue. ')
f10EgUnicastYellowMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastYellowMin.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastYellowMin.setDescription('The min threshold for Yellow packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10EgUnicastYellowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastYellowMax.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastYellowMax.setDescription('The max threshold for Yellow packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10EgUnicastYellowDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastYellowDrop.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastYellowDrop.setDescription('The number of Yellow packets being dropped in this queue. ')
f10EgUnicastRedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgUnicastRedDrop.setStatus('current')
if mibBuilder.loadTexts: f10EgUnicastRedDrop.setDescription('The number of Red packets being dropped in this queue. ')
f10EgQueueMulticastStatTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5), )
if mibBuilder.loadTexts: f10EgQueueMulticastStatTable.setStatus('current')
if mibBuilder.loadTexts: f10EgQueueMulticastStatTable.setDescription('The Egress Queue Multicast Statistics Table. This table provides Queue statistics for Egress Multicast packets at Force10 Interface. ')
f10EgQueueMulticastStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FORCE10-MONITORING-MIB", "f10EgMulticastQueueId"))
if mibBuilder.loadTexts: f10EgQueueMulticastStatEntry.setStatus('current')
if mibBuilder.loadTexts: f10EgQueueMulticastStatEntry.setDescription('An entry in the Egress Queue Multicast Statistics table. The Egress Queue Multicast Statistics Table is indexed by the ifIndex and Queue ID. The IfIndex should be an valid Interface Index as defined in the RFC1213 MIB II Interface Table. ')
f10EgMulticastQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 1), F10QueueID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastQueueId.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastQueueId.setDescription('This is the Queue ID of this entry. This is the 2nd index of this table entry. ')
f10EgMulticastCycloneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 2), F10CycloneVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastCycloneVersion.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastCycloneVersion.setDescription('The linecard Cyclone hardware version. ')
f10EgMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastBytes.setDescription('The number of bytes in the queue. This object is available on Cyclone version 1.5 (CjTj) hardware only. ')
f10EgMulticastBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastBytesCount.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastBytesCount.setDescription('The cumulative number of bytes data passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10EgMulticastPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastPacketCount.setDescription('The cumulative number of packets passing through this queue. This object is available on Cyclone version 2.0 (C2T2) and Cyclone version 3.0 (X3) hardwares only. ')
f10EgMulticastGreenMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastGreenMin.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastGreenMin.setDescription('The min threshold for Green packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10EgMulticastGreenMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastGreenMax.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastGreenMax.setDescription('The max threshold for Green packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10EgMulticastGreenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastGreenDrop.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastGreenDrop.setDescription('The max threshold for Green packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10EgMulticastYellowMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastYellowMin.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastYellowMin.setDescription('The min threshold for Yellow packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability. ')
f10EgMulticastYellowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastYellowMax.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastYellowMax.setDescription('The max threshold for Yellow packets. The max threshold identifies the queue size level at which tail drops occurs. ')
f10EgMulticastYellowDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastYellowDrop.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastYellowDrop.setDescription('The number of Yellow packets being dropped in this queue. ')
f10EgMulticastRedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10EgMulticastRedDrop.setStatus('current')
if mibBuilder.loadTexts: f10EgMulticastRedDrop.setDescription('The number of Red packets being dropped in this queue. ')
f10CpuIngQueueUnicastStatTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6), )
if mibBuilder.loadTexts: f10CpuIngQueueUnicastStatTable.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngQueueUnicastStatTable.setDescription('The CPU Ingress Queue Unicast Statistics Table. This table provides Queue statistics for Ingress Unicast packets destined for CPU.')
f10CpuIngQueueUnicastStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1), ).setIndexNames((0, "FORCE10-MONITORING-MIB", "f10CpuIngUnicastSrcCard"), (0, "FORCE10-MONITORING-MIB", "f10CpuIngUnicastSrcPortPipe"), (0, "FORCE10-MONITORING-MIB", "f10CpuIngUnicastDestCpu"), (0, "FORCE10-MONITORING-MIB", "f10CpuIngUnicastQueueId"))
if mibBuilder.loadTexts: f10CpuIngQueueUnicastStatEntry.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngQueueUnicastStatEntry.setDescription('An entry in the CPU Ingress Queue Unicast Statistics Table. The CPU Ingress Queue Unicast Statistics Table is indexed by the source linecard/portpipe, cpu port and Queue ID.')
f10CpuIngUnicastSrcCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 1), F10SlotID())
if mibBuilder.loadTexts: f10CpuIngUnicastSrcCard.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastSrcCard.setDescription('This is the source linecard number. This is the first index of this table entry.')
f10CpuIngUnicastSrcPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 2), F10PortPipeID())
if mibBuilder.loadTexts: f10CpuIngUnicastSrcPortPipe.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastSrcPortPipe.setDescription('This is the Force10 Cyclone PortPipe number of the source linecard.This is the 2nd index of this table entry.')
f10CpuIngUnicastDestCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 3), F10ProcessorModuleType())
if mibBuilder.loadTexts: f10CpuIngUnicastDestCpu.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastDestCpu.setDescription('This is the destination CPU port of this entry. This is the 3rd index of this table entry.')
f10CpuIngUnicastQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 4), F10QueueID())
if mibBuilder.loadTexts: f10CpuIngUnicastQueueId.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastQueueId.setDescription('This is the Queue ID of this entry. This is the 4th index of this table entry.')
f10CpuIngUnicastCycloneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 5), F10CycloneVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastCycloneVersion.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastCycloneVersion.setDescription('The linecard Cyclone hardware version.')
f10CpuIngUnicastBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastBytesCount.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastBytesCount.setDescription('The cumulative number of bytes data passing through this queue. This object is available on Cyclone version 3.0 (X3) hardware only.')
f10CpuIngUnicastPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastPacketCount.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastPacketCount.setDescription('The cumulative number of packets passing through this queue. This object is available on Cyclone version 3.0 (X3) hardware only.')
f10CpuIngUnicastGreenMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastGreenMin.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastGreenMin.setDescription('The min threshold for Green packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability.')
f10CpuIngUnicastGreenMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastGreenMax.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastGreenMax.setDescription('The max threshold for Green packets. The max threshold identifies the queue size level at which tail drops occurs.')
f10CpuIngUnicastGreenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastGreenDrop.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastGreenDrop.setDescription('The number of Green packets being dropped in this queue.')
f10CpuIngUnicastYellowMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastYellowMin.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastYellowMin.setDescription('The min threshold for Yellow packets. The min threshold identifies the queue size percentage at which the WRED dropping starts to be applied with a given configured probability.')
f10CpuIngUnicastYellowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastYellowMax.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastYellowMax.setDescription('The max threshold for Yellow packets. The max threshold identifies the queue size level at which tail drops occurs.')
f10CpuIngUnicastYellowDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastYellowDrop.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastYellowDrop.setDescription('The number of Yellow packets being dropped in this queue.')
f10CpuIngUnicastRedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 3, 4, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10CpuIngUnicastRedDrop.setStatus('current')
if mibBuilder.loadTexts: f10CpuIngUnicastRedDrop.setDescription('The number of Red packets being dropped in this queue.')
f10BcastPktRecv = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10BcastPktRecv.setStatus('current')
if mibBuilder.loadTexts: f10BcastPktRecv.setDescription('The total broadcast packet received. ')
f10BcastPktSent = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10BcastPktSent.setStatus('current')
if mibBuilder.loadTexts: f10BcastPktSent.setDescription('The total broadcast packet sent. ')
f10McastPktRecv = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10McastPktRecv.setStatus('current')
if mibBuilder.loadTexts: f10McastPktRecv.setDescription('The total multicast packet received. ')
f10McastPktSent = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10McastPktSent.setStatus('current')
if mibBuilder.loadTexts: f10McastPktSent.setDescription('The total multicast packet sent. ')
f10ArpReqRecv = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10ArpReqRecv.setStatus('current')
if mibBuilder.loadTexts: f10ArpReqRecv.setDescription('The total ARP request received. ')
f10ArpReqSent = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10ArpReqSent.setStatus('current')
if mibBuilder.loadTexts: f10ArpReqSent.setDescription('The total ARP request sent. ')
f10ArpReplyRecv = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10ArpReplyRecv.setStatus('current')
if mibBuilder.loadTexts: f10ArpReplyRecv.setDescription('The total ARP reply received. ')
f10ArpReplySent = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10ArpReplySent.setStatus('current')
if mibBuilder.loadTexts: f10ArpReplySent.setDescription('The total ARP reply sent. ')
f10ArpProxySent = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 3, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f10ArpProxySent.setStatus('current')
if mibBuilder.loadTexts: f10ArpProxySent.setDescription('The total ARP proxy sent. ')
mibBuilder.exportSymbols("FORCE10-MONITORING-MIB", f10CpuIngUnicastYellowMin=f10CpuIngUnicastYellowMin, f10EgMulticastBytesCount=f10EgMulticastBytesCount, f10OutQueueStatisticsTable=f10OutQueueStatisticsTable, f10MacAccBytes=f10MacAccBytes, f10InQueueCycloneVersion=f10InQueueCycloneVersion, f10IngUnicastQueueId=f10IngUnicastQueueId, f10MacAccPackets=f10MacAccPackets, f10CpuIngUnicastSrcCard=f10CpuIngUnicastSrcCard, f10WredYellowThresholdLow=f10WredYellowThresholdLow, f10WredStatisticsEntry=f10WredStatisticsEntry, f10CpuIngUnicastPacketCount=f10CpuIngUnicastPacketCount, f10WredRedName=f10WredRedName, f10IngMulticastCycloneVersion=f10IngMulticastCycloneVersion, f10EgMulticastRedDrop=f10EgMulticastRedDrop, f10EgQueueMulticastStatEntry=f10EgQueueMulticastStatEntry, f10WredGreenThresholdLow=f10WredGreenThresholdLow, f10EgMulticastCycloneVersion=f10EgMulticastCycloneVersion, f10InQueueMatchBytes=f10InQueueMatchBytes, f10EgMulticastYellowMax=f10EgMulticastYellowMax, f10MonQueueGroup=f10MonQueueGroup, f10OutQueueBytes=f10OutQueueBytes, f10EgUnicastBytes=f10EgUnicastBytes, f10IngUnicastSrcCard=f10IngUnicastSrcCard, f10ArpStatistic=f10ArpStatistic, f10InQueueBytesCount=f10InQueueBytesCount, f10EgUnicastCycloneVersion=f10EgUnicastCycloneVersion, f10EgMulticastPacketCount=f10EgMulticastPacketCount, f10OutQueueStatisticsEntry=f10OutQueueStatisticsEntry, f10CpuIngUnicastGreenDrop=f10CpuIngUnicastGreenDrop, f10IngMulticastYellowMax=f10IngMulticastYellowMax, f10IngQueueMulticastStatTable=f10IngQueueMulticastStatTable, f10BcastPktRecv=f10BcastPktRecv, f10CpuIngQueueUnicastStatEntry=f10CpuIngQueueUnicastStatEntry, f10EgUnicastGreenMax=f10EgUnicastGreenMax, f10IngMulticastYellowMin=f10IngMulticastYellowMin, f10InQueueMatchBps=f10InQueueMatchBps, f10InQueueStatisticsEntry=f10InQueueStatisticsEntry, f10CpuIngUnicastGreenMax=f10CpuIngUnicastGreenMax, f10WredRedReserve1=f10WredRedReserve1, f10WredRedReserve2=f10WredRedReserve2, f10IngMulticastQueueId=f10IngMulticastQueueId, f10EgMulticastYellowDrop=f10EgMulticastYellowDrop, f10InQueueDropPackets=f10InQueueDropPackets, f10OutQueuePackets=f10OutQueuePackets, f10IngUnicastYellowMax=f10IngUnicastYellowMax, f10EgQueueMulticastStatTable=f10EgQueueMulticastStatTable, f10CpuIngUnicastSrcPortPipe=f10CpuIngUnicastSrcPortPipe, f10CpuIngUnicastBytesCount=f10CpuIngUnicastBytesCount, f10InQueuePktsCount=f10InQueuePktsCount, f10IngMulticastSrcPortPipe=f10IngMulticastSrcPortPipe, f10EgUnicastPacketCount=f10EgUnicastPacketCount, f10IngMulticastGreenMin=f10IngMulticastGreenMin, f10EgQueueUnicastStatEntry=f10EgQueueUnicastStatEntry, f10CpuIngUnicastQueueId=f10CpuIngUnicastQueueId, f10MonQueue=f10MonQueue, f10EgMulticastGreenDrop=f10EgMulticastGreenDrop, f10IngUnicastGreenMin=f10IngUnicastGreenMin, f10IngQueueUnicastStatEntry=f10IngQueueUnicastStatEntry, f10IngMulticastBytesCount=f10IngMulticastBytesCount, f10OutQueueBps=f10OutQueueBps, f10IngMulticastSrcCard=f10IngMulticastSrcCard, f10WredYellowName=f10WredYellowName, f10MonMac=f10MonMac, f10WredYellowReserve1=f10WredYellowReserve1, f10InQueueBytes=f10InQueueBytes, f10MonMibVersion=f10MonMibVersion, f10ArpProxySent=f10ArpProxySent, f10ArpReplySent=f10ArpReplySent, f10MacAccOutIfIndex=f10MacAccOutIfIndex, f10BcastPktSent=f10BcastPktSent, f10IngUnicastCycloneVersion=f10IngUnicastCycloneVersion, f10EgUnicastRedDrop=f10EgUnicastRedDrop, f10InQueueStatisticsTable=f10InQueueStatisticsTable, f10WredStatisticsTable=f10WredStatisticsTable, f10OutQueueBytesCount=f10OutQueueBytesCount, f10IngUnicastBytes=f10IngUnicastBytes, f10CpuIngQueueUnicastStatTable=f10CpuIngQueueUnicastStatTable, f10CpuIngUnicastRedDrop=f10CpuIngUnicastRedDrop, f10IngUnicastYellowMin=f10IngUnicastYellowMin, f10InQueueId=f10InQueueId, f10MacAccounting=f10MacAccounting, f10MonIfQueueGroup=f10MonIfQueueGroup, f10ArpReqRecv=f10ArpReqRecv, f10IngMulticastPacketCount=f10IngMulticastPacketCount, f10IngUnicastGreenMax=f10IngUnicastGreenMax, f10IngMulticastYellowDrop=f10IngMulticastYellowDrop, PYSNMP_MODULE_ID=f10MonitoringMib, f10IngMulticastBytes=f10IngMulticastBytes, f10MonMaxQueue=f10MonMaxQueue, f10CpuIngUnicastDestCpu=f10CpuIngUnicastDestCpu, f10WredGreenName=f10WredGreenName, f10CpuIngUnicastYellowDrop=f10CpuIngUnicastYellowDrop, f10CpuIngUnicastGreenMin=f10CpuIngUnicastGreenMin, f10EgMulticastYellowMin=f10EgMulticastYellowMin, f10MonIfQueue=f10MonIfQueue, f10WredRedThresholdHigh=f10WredRedThresholdHigh, f10IngUnicastGreenDrop=f10IngUnicastGreenDrop, f10EgUnicastYellowMax=f10EgUnicastYellowMax, f10EgQueueUnicastStatTable=f10EgQueueUnicastStatTable, f10MacAccountingDestEntry=f10MacAccountingDestEntry, f10WredGreenDropPackets=f10WredGreenDropPackets, f10CpuIngUnicastYellowMax=f10CpuIngUnicastYellowMax, f10WredYellowReserve2=f10WredYellowReserve2, f10EgUnicastYellowDrop=f10EgUnicastYellowDrop, f10MacAccMacAddr=f10MacAccMacAddr, f10MacAccInIfIndex=f10MacAccInIfIndex, f10IpStatistic=f10IpStatistic, f10WredGreenThresholdHigh=f10WredGreenThresholdHigh, f10IngUnicastSrcPortPipe=f10IngUnicastSrcPortPipe, f10McastPktSent=f10McastPktSent, f10EgMulticastGreenMin=f10EgMulticastGreenMin, f10MonitoringMib=f10MonitoringMib, f10MonGroup=f10MonGroup, f10IngUnicastDestCard=f10IngUnicastDestCard, f10IngUnicastDestPortPipe=f10IngUnicastDestPortPipe, f10IngMulticastRedDrop=f10IngMulticastRedDrop, f10EgUnicastYellowMin=f10EgUnicastYellowMin, f10MacGroup=f10MacGroup, f10IngMulticastGreenDrop=f10IngMulticastGreenDrop, f10WredYellowDropPackets=f10WredYellowDropPackets, f10IngUnicastRedDrop=f10IngUnicastRedDrop, f10NetworkStat=f10NetworkStat, f10EgMulticastGreenMax=f10EgMulticastGreenMax, f10EgMulticastBytes=f10EgMulticastBytes, f10WredGreenReserve1=f10WredGreenReserve1, f10IngUnicastYellowDrop=f10IngUnicastYellowDrop, f10ArpReqSent=f10ArpReqSent, f10IngQueueUnicastStatTable=f10IngQueueUnicastStatTable, f10ArpReplyRecv=f10ArpReplyRecv, f10EgMulticastQueueId=f10EgMulticastQueueId, f10WredQueueId=f10WredQueueId, f10IngUnicastBytesCount=f10IngUnicastBytesCount, f10CpuIngUnicastCycloneVersion=f10CpuIngUnicastCycloneVersion, f10WredYellowThresholdHigh=f10WredYellowThresholdHigh, f10McastPktRecv=f10McastPktRecv, f10EgUnicastGreenMin=f10EgUnicastGreenMin, f10OutQueueId=f10OutQueueId, f10IngQueueMulticastStatEntry=f10IngQueueMulticastStatEntry, f10WredGreenReserve2=f10WredGreenReserve2, f10EgUnicastGreenDrop=f10EgUnicastGreenDrop, f10IngMulticastGreenMax=f10IngMulticastGreenMax, f10InQueueMatchPackets=f10InQueueMatchPackets, f10EgUnicastQueueId=f10EgUnicastQueueId, f10OutQueueCycloneVersion=f10OutQueueCycloneVersion, f10WredRedDropPackets=f10WredRedDropPackets, f10MacAccVlan=f10MacAccVlan, f10MacAccountingDestTable=f10MacAccountingDestTable, f10WredRedThresholdLow=f10WredRedThresholdLow, f10EgUnicastBytesCount=f10EgUnicastBytesCount, f10IngUnicastPacketCount=f10IngUnicastPacketCount)
