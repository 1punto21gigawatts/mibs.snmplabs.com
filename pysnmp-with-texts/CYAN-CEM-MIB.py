#
# PySNMP MIB module CYAN-CEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYAN-CEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
CyanTypeTc, cyanEntityModules = mibBuilder.importSymbols("CYAN-MIB", "CyanTypeTc", "cyanEntityModules")
CyanOpStateQualTc, CyanLEDTc, CyanSecServiceStateTc, CyanOpStateTc, CyanAdminStateTc, CyanOffOnTc, CyanActvStdbyTc = mibBuilder.importSymbols("CYAN-TC-MIB", "CyanOpStateQualTc", "CyanLEDTc", "CyanSecServiceStateTc", "CyanOpStateTc", "CyanAdminStateTc", "CyanOffOnTc", "CyanActvStdbyTc")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, iso, Unsigned32, ModuleIdentity, Counter64, MibIdentifier, Bits, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "iso", "Unsigned32", "ModuleIdentity", "Counter64", "MibIdentifier", "Bits", "Gauge32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cyanCemModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50))
cyanCemModule.setRevisions(('2014-12-07 05:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyanCemModule.setRevisionsDescriptions(('Release 6.0 build 1416362081',))
if mibBuilder.loadTexts: cyanCemModule.setLastUpdated('201412070545Z')
if mibBuilder.loadTexts: cyanCemModule.setOrganization('Cyan, Inc.')
if mibBuilder.loadTexts: cyanCemModule.setContactInfo(' E-mail: support@cyaninc.com Postal: Cyan, Inc. 1390 N. McDowell Blvd., # G-327 Petaluma, CA 94954 USA Tel: +1-707-735-2300')
if mibBuilder.loadTexts: cyanCemModule.setDescription('MIB module for Common Equipment Module')
cyanCemMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1))
cyanCemTable = MibTable((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1), )
if mibBuilder.loadTexts: cyanCemTable.setStatus('current')
if mibBuilder.loadTexts: cyanCemTable.setDescription('A list of Cem entries.')
cyanCemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1), ).setIndexNames((0, "CYAN-CEM-MIB", "cyanCemShelfId"), (0, "CYAN-CEM-MIB", "cyanCemCemId"))
if mibBuilder.loadTexts: cyanCemEntry.setStatus('current')
if mibBuilder.loadTexts: cyanCemEntry.setDescription('An entry of Cem.')
cyanCemShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cyanCemShelfId.setStatus('current')
if mibBuilder.loadTexts: cyanCemShelfId.setDescription('Shelf Id')
cyanCemCemId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cyanCemCemId.setStatus('current')
if mibBuilder.loadTexts: cyanCemCemId.setDescription('CEM Module Id')
cyanCemActiveLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 3), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemActiveLed.setStatus('current')
if mibBuilder.loadTexts: cyanCemActiveLed.setDescription('Active LED status')
cyanCemActivestandbyState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 4), CyanActvStdbyTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemActivestandbyState.setStatus('current')
if mibBuilder.loadTexts: cyanCemActivestandbyState.setDescription('Active/standby state')
cyanCemAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 5), CyanAdminStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemAdminState.setStatus('current')
if mibBuilder.loadTexts: cyanCemAdminState.setDescription('Administrative state')
cyanCemAlarmLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 6), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemAlarmLed.setStatus('current')
if mibBuilder.loadTexts: cyanCemAlarmLed.setDescription('Alarm LED status')
cyanCemAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemAssetTag.setStatus('current')
if mibBuilder.loadTexts: cyanCemAssetTag.setDescription('Asset Tag')
cyanCemAutoinserviceSoakTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemAutoinserviceSoakTimeSec.setStatus('current')
if mibBuilder.loadTexts: cyanCemAutoinserviceSoakTimeSec.setDescription('Auto-In-Service soak time')
cyanCemBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemBaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: cyanCemBaseMacAddress.setDescription('Base MAC address of a range of addresses')
cyanCemCurrCyanSwBuildVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemCurrCyanSwBuildVersions.setStatus('current')
if mibBuilder.loadTexts: cyanCemCurrCyanSwBuildVersions.setDescription('Current Cyan software build versions')
cyanCemCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemCurrent.setStatus('current')
if mibBuilder.loadTexts: cyanCemCurrent.setDescription('Current Draw')
cyanCemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemDescription.setStatus('current')
if mibBuilder.loadTexts: cyanCemDescription.setDescription('Description')
cyanCemExhaustAirTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemExhaustAirTemp.setStatus('current')
if mibBuilder.loadTexts: cyanCemExhaustAirTemp.setDescription('Exhaust air temperature')
cyanCemExhaustTempAlarmHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemExhaustTempAlarmHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemExhaustTempAlarmHighThres.setDescription('High alarm threshold for exhaust air temperature')
cyanCemExhaustTempAlarmLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemExhaustTempAlarmLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemExhaustTempAlarmLowThres.setDescription('Low alarm threshold for exhaust air temperature')
cyanCemExhaustTempWarnHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemExhaustTempWarnHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemExhaustTempWarnHighThres.setDescription('High warning threshold for exhaust air temperature')
cyanCemExhaustTempWarnLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemExhaustTempWarnLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemExhaustTempWarnLowThres.setDescription('Low warning threshold for exhaust air temperature')
cyanCemExpectedTemperatureRise = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemExpectedTemperatureRise.setStatus('current')
if mibBuilder.loadTexts: cyanCemExpectedTemperatureRise.setDescription('Expected temperature rise')
cyanCemIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemIdentifier.setStatus('current')
if mibBuilder.loadTexts: cyanCemIdentifier.setDescription('string OID')
cyanCemIntakeAirTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemIntakeAirTemp.setStatus('current')
if mibBuilder.loadTexts: cyanCemIntakeAirTemp.setDescription('In-take air temperature')
cyanCemIntakeTempAlarmHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemIntakeTempAlarmHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemIntakeTempAlarmHighThres.setDescription('High alarm threshold for in-take air temperature')
cyanCemIntakeTempAlarmLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemIntakeTempAlarmLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemIntakeTempAlarmLowThres.setDescription('Low alarm threshold for in-take air temperature')
cyanCemIntakeTempWarnHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemIntakeTempWarnHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemIntakeTempWarnHighThres.setDescription('High warning threshold for in-take air temperature')
cyanCemIntakeTempWarnLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemIntakeTempWarnLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanCemIntakeTempWarnLowThres.setDescription('Low warning threshold for in-take air temperature')
cyanCemLedTest = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemLedTest.setStatus('current')
if mibBuilder.loadTexts: cyanCemLedTest.setDescription('Change value of this attribute to run LED test on this module')
cyanCemMacBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemMacBlockSize.setStatus('current')
if mibBuilder.loadTexts: cyanCemMacBlockSize.setDescription('Number of MAC addresses allocated from the base MAC address')
cyanCemMfgCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemMfgCleiCode.setStatus('current')
if mibBuilder.loadTexts: cyanCemMfgCleiCode.setDescription('Common Language Equipment Identifier')
cyanCemMfgEciCode = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemMfgEciCode.setStatus('current')
if mibBuilder.loadTexts: cyanCemMfgEciCode.setDescription('Equipment Catalog Item')
cyanCemMfgModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemMfgModuleId.setStatus('current')
if mibBuilder.loadTexts: cyanCemMfgModuleId.setDescription('Module ID')
cyanCemMfgPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemMfgPartNumber.setStatus('current')
if mibBuilder.loadTexts: cyanCemMfgPartNumber.setDescription('Manufacturing part number')
cyanCemMfgRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemMfgRevision.setStatus('current')
if mibBuilder.loadTexts: cyanCemMfgRevision.setDescription('Mfg revision number')
cyanCemMfgSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemMfgSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cyanCemMfgSerialNumber.setDescription('Mfg serial number')
cyanCemName = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemName.setStatus('current')
if mibBuilder.loadTexts: cyanCemName.setDescription('Cyan name')
cyanCemOidClass = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemOidClass.setStatus('current')
if mibBuilder.loadTexts: cyanCemOidClass.setDescription('OID Class')
cyanCemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 35), CyanOpStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemOperState.setStatus('current')
if mibBuilder.loadTexts: cyanCemOperState.setDescription('Primary Operation State')
cyanCemOperStateQual = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 36), CyanOpStateQualTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemOperStateQual.setStatus('current')
if mibBuilder.loadTexts: cyanCemOperStateQual.setDescription('Operation state qualifier')
cyanCemOssLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemOssLabel.setStatus('current')
if mibBuilder.loadTexts: cyanCemOssLabel.setDescription('CyMS label')
cyanCemOvervoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemOvervoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: cyanCemOvervoltageThreshold.setDescription('Over-voltage warning threshold')
cyanCemOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemOwner.setStatus('current')
if mibBuilder.loadTexts: cyanCemOwner.setDescription('Owner')
cyanCemPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemPartNumber.setStatus('current')
if mibBuilder.loadTexts: cyanCemPartNumber.setDescription('Cyan part number')
cyanCemPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 41), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemPowerLed.setStatus('current')
if mibBuilder.loadTexts: cyanCemPowerLed.setDescription('Power LED status')
cyanCemPwrFeedAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 42), CyanOffOnTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemPwrFeedAStatus.setStatus('current')
if mibBuilder.loadTexts: cyanCemPwrFeedAStatus.setDescription('Status of power supply A')
cyanCemPwrFeedAVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemPwrFeedAVoltage.setStatus('current')
if mibBuilder.loadTexts: cyanCemPwrFeedAVoltage.setDescription('Voltage level of power supply A')
cyanCemPwrFeedBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 44), CyanOffOnTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemPwrFeedBStatus.setStatus('current')
if mibBuilder.loadTexts: cyanCemPwrFeedBStatus.setDescription('Status of power supply B')
cyanCemPwrFeedBVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemPwrFeedBVoltage.setStatus('current')
if mibBuilder.loadTexts: cyanCemPwrFeedBVoltage.setDescription('Voltage level of power supply B')
cyanCemSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 46), CyanSecServiceStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemSecServState.setStatus('current')
if mibBuilder.loadTexts: cyanCemSecServState.setDescription('Secondary service state')
cyanCemSynchLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 47), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemSynchLed.setStatus('current')
if mibBuilder.loadTexts: cyanCemSynchLed.setDescription('Synch LED status')
cyanCemType = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 48), CyanTypeTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemType.setStatus('current')
if mibBuilder.loadTexts: cyanCemType.setDescription('Equipment type')
cyanCemUndervoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 1, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanCemUndervoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: cyanCemUndervoltageThreshold.setDescription('Under-voltage warning threshold')
cyanCemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 20)).setObjects(("CYAN-CEM-MIB", "cyanCemActiveLed"), ("CYAN-CEM-MIB", "cyanCemActivestandbyState"), ("CYAN-CEM-MIB", "cyanCemAdminState"), ("CYAN-CEM-MIB", "cyanCemAlarmLed"), ("CYAN-CEM-MIB", "cyanCemAssetTag"), ("CYAN-CEM-MIB", "cyanCemAutoinserviceSoakTimeSec"), ("CYAN-CEM-MIB", "cyanCemBaseMacAddress"), ("CYAN-CEM-MIB", "cyanCemCurrCyanSwBuildVersions"), ("CYAN-CEM-MIB", "cyanCemCurrent"), ("CYAN-CEM-MIB", "cyanCemDescription"), ("CYAN-CEM-MIB", "cyanCemExhaustAirTemp"), ("CYAN-CEM-MIB", "cyanCemExhaustTempAlarmHighThres"), ("CYAN-CEM-MIB", "cyanCemExhaustTempAlarmLowThres"), ("CYAN-CEM-MIB", "cyanCemExhaustTempWarnHighThres"), ("CYAN-CEM-MIB", "cyanCemExhaustTempWarnLowThres"), ("CYAN-CEM-MIB", "cyanCemExpectedTemperatureRise"), ("CYAN-CEM-MIB", "cyanCemIdentifier"), ("CYAN-CEM-MIB", "cyanCemIntakeAirTemp"), ("CYAN-CEM-MIB", "cyanCemIntakeTempAlarmHighThres"), ("CYAN-CEM-MIB", "cyanCemIntakeTempAlarmLowThres"), ("CYAN-CEM-MIB", "cyanCemIntakeTempWarnHighThres"), ("CYAN-CEM-MIB", "cyanCemIntakeTempWarnLowThres"), ("CYAN-CEM-MIB", "cyanCemLedTest"), ("CYAN-CEM-MIB", "cyanCemMacBlockSize"), ("CYAN-CEM-MIB", "cyanCemMfgCleiCode"), ("CYAN-CEM-MIB", "cyanCemMfgEciCode"), ("CYAN-CEM-MIB", "cyanCemMfgModuleId"), ("CYAN-CEM-MIB", "cyanCemMfgPartNumber"), ("CYAN-CEM-MIB", "cyanCemMfgRevision"), ("CYAN-CEM-MIB", "cyanCemMfgSerialNumber"), ("CYAN-CEM-MIB", "cyanCemName"), ("CYAN-CEM-MIB", "cyanCemOidClass"), ("CYAN-CEM-MIB", "cyanCemOperState"), ("CYAN-CEM-MIB", "cyanCemOperStateQual"), ("CYAN-CEM-MIB", "cyanCemOssLabel"), ("CYAN-CEM-MIB", "cyanCemOvervoltageThreshold"), ("CYAN-CEM-MIB", "cyanCemOwner"), ("CYAN-CEM-MIB", "cyanCemPartNumber"), ("CYAN-CEM-MIB", "cyanCemPowerLed"), ("CYAN-CEM-MIB", "cyanCemPwrFeedAStatus"), ("CYAN-CEM-MIB", "cyanCemPwrFeedAVoltage"), ("CYAN-CEM-MIB", "cyanCemPwrFeedBStatus"), ("CYAN-CEM-MIB", "cyanCemPwrFeedBVoltage"), ("CYAN-CEM-MIB", "cyanCemSecServState"), ("CYAN-CEM-MIB", "cyanCemSynchLed"), ("CYAN-CEM-MIB", "cyanCemType"), ("CYAN-CEM-MIB", "cyanCemUndervoltageThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanCemObjectGroup = cyanCemObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cyanCemObjectGroup.setDescription('Group of objects that comes with Cem module')
cyanCemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 28533, 5, 30, 50, 30)).setObjects(("CYAN-CEM-MIB", "cyanCemObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanCemCompliance = cyanCemCompliance.setStatus('current')
if mibBuilder.loadTexts: cyanCemCompliance.setDescription('The basic info needed to be a cyan Cem')
mibBuilder.exportSymbols("CYAN-CEM-MIB", cyanCemMfgCleiCode=cyanCemMfgCleiCode, cyanCemMfgModuleId=cyanCemMfgModuleId, cyanCemAlarmLed=cyanCemAlarmLed, cyanCemIntakeTempWarnHighThres=cyanCemIntakeTempWarnHighThres, cyanCemOidClass=cyanCemOidClass, cyanCemSecServState=cyanCemSecServState, cyanCemOperState=cyanCemOperState, cyanCemType=cyanCemType, cyanCemShelfId=cyanCemShelfId, cyanCemIdentifier=cyanCemIdentifier, cyanCemOvervoltageThreshold=cyanCemOvervoltageThreshold, cyanCemCompliance=cyanCemCompliance, cyanCemPwrFeedAStatus=cyanCemPwrFeedAStatus, cyanCemPwrFeedAVoltage=cyanCemPwrFeedAVoltage, cyanCemMfgRevision=cyanCemMfgRevision, cyanCemAssetTag=cyanCemAssetTag, cyanCemTable=cyanCemTable, cyanCemActivestandbyState=cyanCemActivestandbyState, cyanCemIntakeTempWarnLowThres=cyanCemIntakeTempWarnLowThres, cyanCemAdminState=cyanCemAdminState, cyanCemExpectedTemperatureRise=cyanCemExpectedTemperatureRise, cyanCemIntakeTempAlarmHighThres=cyanCemIntakeTempAlarmHighThres, cyanCemCurrCyanSwBuildVersions=cyanCemCurrCyanSwBuildVersions, cyanCemDescription=cyanCemDescription, cyanCemCurrent=cyanCemCurrent, cyanCemActiveLed=cyanCemActiveLed, cyanCemMacBlockSize=cyanCemMacBlockSize, cyanCemPwrFeedBVoltage=cyanCemPwrFeedBVoltage, cyanCemCemId=cyanCemCemId, cyanCemBaseMacAddress=cyanCemBaseMacAddress, cyanCemExhaustTempWarnLowThres=cyanCemExhaustTempWarnLowThres, cyanCemExhaustTempAlarmLowThres=cyanCemExhaustTempAlarmLowThres, cyanCemObjectGroup=cyanCemObjectGroup, cyanCemIntakeTempAlarmLowThres=cyanCemIntakeTempAlarmLowThres, cyanCemExhaustTempAlarmHighThres=cyanCemExhaustTempAlarmHighThres, cyanCemExhaustTempWarnHighThres=cyanCemExhaustTempWarnHighThres, cyanCemPartNumber=cyanCemPartNumber, cyanCemMfgEciCode=cyanCemMfgEciCode, cyanCemPwrFeedBStatus=cyanCemPwrFeedBStatus, PYSNMP_MODULE_ID=cyanCemModule, cyanCemModule=cyanCemModule, cyanCemPowerLed=cyanCemPowerLed, cyanCemMfgSerialNumber=cyanCemMfgSerialNumber, cyanCemMfgPartNumber=cyanCemMfgPartNumber, cyanCemUndervoltageThreshold=cyanCemUndervoltageThreshold, cyanCemIntakeAirTemp=cyanCemIntakeAirTemp, cyanCemExhaustAirTemp=cyanCemExhaustAirTemp, cyanCemOwner=cyanCemOwner, cyanCemSynchLed=cyanCemSynchLed, cyanCemMibObjects=cyanCemMibObjects, cyanCemLedTest=cyanCemLedTest, cyanCemEntry=cyanCemEntry, cyanCemOperStateQual=cyanCemOperStateQual, cyanCemName=cyanCemName, cyanCemOssLabel=cyanCemOssLabel, cyanCemAutoinserviceSoakTimeSec=cyanCemAutoinserviceSoakTimeSec)
