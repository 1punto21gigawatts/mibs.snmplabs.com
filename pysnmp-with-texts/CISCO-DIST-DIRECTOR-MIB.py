#
# PySNMP MIB module CISCO-DIST-DIRECTOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DIST-DIRECTOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, = mibBuilder.importSymbols("CISCO-TC", "CiscoPort")
DnsName, DnsType, DnsNameAsIndex = mibBuilder.importSymbols("DNS-SERVER-MIB", "DnsName", "DnsType", "DnsNameAsIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, ObjectIdentity, Integer32, Counter64, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, MibIdentifier, ModuleIdentity, NotificationType, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "ObjectIdentity", "Integer32", "Counter64", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "MibIdentifier", "ModuleIdentity", "NotificationType", "Gauge32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
TimeInterval, TimeStamp, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC-v1", "TimeInterval", "TimeStamp", "TruthValue", "RowStatus")
ciscoDistDirMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197))
ciscoDistDirMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 1))
cddGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1))
cddHost = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2))
cddServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3))
cddMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 4))
ciscoDistDirMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 2))
ciscoDistDirMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 2, 0))
ciscoDistDirMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3))
ciscoDistDirMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 1))
ciscoDistDirMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 2))
class CddMetricType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("drpExternal", 1), ("drpInternal", 2), ("drpServer", 3), ("drpRtt", 4), ("admin", 5), ("random", 6), ("portion", 7), ("dfpAvailability", 8), ("routeMap", 9))

class CddMetricPriority(Gauge32):
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 101)

class CddMetricWeight(Gauge32):
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 100)

class CddMetricProfileId(Gauge32):
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CddMetricProfileIdOrZero(Gauge32):
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

cddGeneralMetricProfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 1), )
if mibBuilder.loadTexts: cddGeneralMetricProfTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricProfTable.setDescription("This table contains a list of metric profiles. A profile can be identified by the index cddGeneralMetricProfId. When a profile's identifier is assigned to an object whose syntax is CddMetricProfileId or CddMetricProfileIdOrZero, all priority and weight values for all metrics in the profile are applied.")
cddGeneralMetricProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddGeneralMetricProfId"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddGeneralMetricProfMetric"))
if mibBuilder.loadTexts: cddGeneralMetricProfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricProfEntry.setDescription('An entry containing the priority and weight values for a metric in a metric profile. Each entry is associated with a specific metric profile identifier and metric type combination. A profile consists of all entries that have the same cddGeneralMetricProfId value. In a profile, there may be one or more metrics, which can be identified by the index cddGeneralMetricProfMetric. Entries in this table may be queried, created or deleted by NMS.')
cddGeneralMetricProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 1, 1, 1), CddMetricProfileId())
if mibBuilder.loadTexts: cddGeneralMetricProfId.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricProfId.setDescription('The identifier of a metric profile.')
cddGeneralMetricProfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 1, 1, 2), CddMetricType())
if mibBuilder.loadTexts: cddGeneralMetricProfMetric.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricProfMetric.setDescription('The type of a metric in the profile.')
cddGeneralMetricProfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 1, 1, 3), CddMetricPriority().clone(101)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddGeneralMetricProfPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricProfPriority.setDescription('The priority value of the metric in the profile.')
cddGeneralMetricProfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 1, 1, 4), CddMetricWeight().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddGeneralMetricProfWeight.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricProfWeight.setDescription('The weight value of the metric in the profile.')
cddGeneralMetricProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddGeneralMetricProfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricProfRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
cddGeneralQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralQueries.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralQueries.setDescription('The total number of requests for information the Distributed Director has received. They include DNS queries and HTTP requests for all virtual host names or subdomains.')
cddGeneralReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralReplies.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralReplies.setDescription('The total number of requests for information the Distributed Director has processed. They include DNS queries and HTTP requests for all virtual host names or subdomains.')
cddGeneralQueueProcess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralQueueProcess.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralQueueProcess.setDescription('The current number of DNS queries and HTTP requests in the queue to be processed by the Distributed Director.')
cddGeneralQueueMetric = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralQueueMetric.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralQueueMetric.setDescription('The current number of outstanding DNS queries and HTTP requests being held until metric information (e.g., DRP internal and DRP external metrics) arrives.')
cddGeneralMetricWaitMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralMetricWaitMin.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricWaitMin.setDescription('The minimum time DNS/HTTP queries/requests are held before the metric information is processed by the Distributed Director.')
cddGeneralMetricWaitAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralMetricWaitAvg.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricWaitAvg.setDescription('The average time DNS/HTTP queries/requests are held before the metric information is processed by the Distributed Director.')
cddGeneralMetricWaitMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralMetricWaitMax.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralMetricWaitMax.setDescription('The maximum time DNS/HTTP queries/requests are held before the metric information is processed by the Distributed Director.')
cddGeneralCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralCacheHits.setDescription('Represents the total number of DNS queries and HTTP requests that were satisfied with contents of the Distributed Director cache.')
cddGeneralCacheEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddGeneralCacheEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralCacheEnable.setDescription('This object enables/disables the sorting cache on the Distributed Director.')
cddGeneralCacheTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddGeneralCacheTime.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralCacheTime.setDescription("Specifies the minimum amount of time the Distributed Director will retain request and response information to DNS/HTTP queries/requests. This object is not applicable if the value of the cddGeneralCacheEnable object is 'false'.")
cddGeneralTTL = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddGeneralTTL.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralTTL.setDescription('Specifies the time-to-live value for the DNS resource records returned by the Distributed Director.')
cddGeneralDefPriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 13), CddMetricProfileIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddGeneralDefPriorityWeight.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralDefPriorityWeight.setDescription("Specifies the identifier of a metric profile that is used as the default metric priority and weight values for the Distributed Director. The value '0' indicates that no profile is used as the default priority and weight values.")
cddGeneralQueryRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralQueryRate.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralQueryRate.setDescription('The received DNS/HTTP queries/requests rate in the last one second period.')
cddGeneralAccessList = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddGeneralAccessList.setStatus('mandatory')
if mibBuilder.loadTexts: cddGeneralAccessList.setDescription("Indicates the access list that is assigned to the Distributed Director. The access list is a case- insensitive regular expression that is used to match against DNS name to address translation requested. If the DNS name in the query matches the access list, director processing will be performed; otherwise, the query will be forwarded in the canonical catching name server fashion. The value '0' indicates that no access list is assigned to the Distributed Director.")
cddHostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1), )
if mibBuilder.loadTexts: cddHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostTable.setDescription('A list of Distributed Director virtual host name or subdomain specific configurations, statistics and status entries.')
cddHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddHostName"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostQueryType"))
if mibBuilder.loadTexts: cddHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostEntry.setDescription('An entry containing configurations, statistics and status information for the specified combination of virtual host name/subdomain and query type. Entries in this table may be queried, created or deleted by NMS. Deleting an entry from this table will cause associated entries in the dependent tables (cddHostConnectCfgTable and cddHostTolCfgTable) to be deleted as well.')
cddHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: cddHostName.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostName.setDescription('The name of a virtual host or subdomain.')
cddHostQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 2), DnsType())
if mibBuilder.loadTexts: cddHostQueryType.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostQueryType.setDescription("The type of DNS query for which this host entry information would be used. Currently only query type 'A(1)', 'NS(2)', and 'MX(15)' are supported.")
cddHostServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 3), CiscoPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostServicePort.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostServicePort.setDescription("The service port number for the specified combination of virtual host name and query type. Setting this object to the value '0' will disable the usage of the service port.")
cddHostPriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 4), CddMetricProfileIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostPriorityWeight.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostPriorityWeight.setDescription("Specifies the identifier of a metric profile. The priority and weight values for all metrics in the profile are assigned to the specified combination of virtual host name and query type. The value '0' indicates that no profile is assigned to the combination of virtual host name and query type.")
cddHostDrpMed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostDrpMed.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostDrpMed.setDescription('Enables/disables the drp-med option. The drp-med option enables the DD to use the BGP MED attribute in redirection decisions in cases where there is more than one DRP agent in the same autonomous system and at least two of the DRP agents point to different exit points for the same client network due to the way that BGP is set up in the AS.')
cddHostDrpRttProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostDrpRttProbes.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostDrpRttProbes.setDescription('The number of round-trip time probes that the DRP agent should attempt.')
cddHostDrpRttTol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostDrpRttTol.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostDrpRttTol.setDescription('The tolerance percentage value for the drp-rtt metric. If two drp-rtt metrics are within the tolerance percentage of each other in value, they should be assumed to be tied.')
cddHostAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostAccessControl.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostAccessControl.setDescription('Enables/disables the use of access control lists when sorting IP addresses for this hostname. In access control mode, if the IP address of a client is not permitted by the access list associated with a server, that server is removed from selection.')
cddHostMultipleRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostMultipleRecord.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostMultipleRecord.setDescription("Specifies the maximum number of DNS resource records that can be returned to DNS clients. For the value '1' of this object, the Distributed Director only returns the 'best' server's IP address in a DNS reply. This object can be used to specify that multiple DNS resource records may be returned in a completely sorted order according to the given priorities of metrics with the 'best' selected by normal criteria as the first one in the list.")
cddHostLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostLogging.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostLogging.setDescription("Specifies if the DNS/HTTP request/response and server selection process are logged via 'syslog' facility. The severity 'info(7)' is used for logging 'syslog' messages.")
cddHostUrlString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostUrlString.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostUrlString.setDescription("Specifies the URL that is used by the Distributed Director to determine remote server's availability by connecting to the host service port and attempting to retrieve a web page.")
cddHostUrlIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 12), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 3276700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostUrlIntv.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostUrlIntv.setDescription("Specifies the duration between two service availability checking processes. The Distributed Director checks the service availability periodically by connecting to the host service port for retrieving a web page with the time duration value of this object. Setting this object to the value '0' will disable the service availability checking.")
cddHostRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddHostRequests.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostRequests.setDescription('The number of DNS/HTTP queries/requests the Distributed Director has received for the combination of virtual host name and query type.')
cddHostReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddHostReplies.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostReplies.setDescription('The number of DNS/HTTP queries/requests the Distributed Director has processed for the combination of virtual host name and query type.')
cddHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 1, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
cddHostConnectCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 2), )
if mibBuilder.loadTexts: cddHostConnectCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostConnectCfgTable.setDescription("A list of Distributed Director per-host server connect test information entries. This information includes the configuration parameters used by Distributed Director's server connect tests.")
cddHostConnectCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddHostName"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostQueryType"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostConnectCfgPort"))
if mibBuilder.loadTexts: cddHostConnectCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostConnectCfgEntry.setDescription('A Distributed Director per-host server connect test configuration information entry, which specifies whether and how a TCP connect test should be performed for each server associated with this host. Entries in this table may be queried, created or deleted by NMS. Each entry in this table is dependent on entries in cddHostTable. If the associated entry in cddHostTable that has the same cddHostName and cddHostQueryType values is deleted, the entry in this table is deleted as well.')
cddHostConnectCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 2, 1, 1), CiscoPort().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cddHostConnectCfgPort.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostConnectCfgPort.setDescription('A port number, to which a TCP connect test should be performed for each server associated with this host.')
cddHostConnectCfgIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 2, 1, 2), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 3276700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostConnectCfgIntv.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostConnectCfgIntv.setDescription("The connect test interval, which is used for empirical verification that the service is available on the port. Setting this object to the value '0' will disable the server connect test on the port for this host.")
cddHostConnectCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostConnectCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostConnectCfgRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
cddHostTolCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 3), )
if mibBuilder.loadTexts: cddHostTolCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostTolCfgTable.setDescription('A list of Distributed Director per-host priority level metrics tolerance information entries.')
cddHostTolCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddHostName"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostQueryType"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostTolCfgPrio"))
if mibBuilder.loadTexts: cddHostTolCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostTolCfgEntry.setDescription("An entry containing Distributed Director per-host metrics tolerance information at a priority level. If at a priority level two or more remote servers have metric values that are within a certain tolerance percentage of each other, they are considered to be the same and thus causing a 'tie'. In this case, the metrics at the next priority level will be used in order to break the tie. For example, the DRP RTT metric is given priority 1 and the DRP external metric is given priority 2; and the tolerance percentage value is set to 20 at priority 1. If server 'A' has the DRP RTT metric value of 100 and server 'B' has the value of 119, they will be considered the same because their difference is within 20% of the metric value of server 'A'. Then the DRP external metric will be used to select the best server. Entries in this table may be queried, created or deleted by NMS. Each entry in this table is dependent on entries in cddHostTable. If the associated entry in cddHostTable that has the same cddHostName and cddHostQueryType values is deleted, the entry in this table is deleted as well.")
cddHostTolCfgPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 3, 1, 1), CddMetricPriority().subtype(subtypeSpec=ValueRangeConstraint(1, 101)))
if mibBuilder.loadTexts: cddHostTolCfgPrio.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostTolCfgPrio.setDescription('Specifies the metrics tolerance priority level for the host.')
cddHostTolCfgPerc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 3, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostTolCfgPerc.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostTolCfgPerc.setDescription('Specifies the metrics tolerance percentage value associated with the priority level.')
cddHostTolCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostTolCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostTolCfgRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
cddServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1), )
if mibBuilder.loadTexts: cddServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerTable.setDescription('A list of Distributed Director server specific information entries. This information includes the configuration parameters, statistics and availability status for each server.')
cddServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddServerAddrType"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddServerAddr"))
if mibBuilder.loadTexts: cddServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerEntry.setDescription('An entry containing Distributed Director server specific configuration, statistics and status information. Entries in this table may be queried, created or deleted by NMS. Deleting an entry from this table will cause associated entries in the dependent tables (cddServerPortTable and cddServerPortMetricTable) to be deleted as well.')
cddServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cddServerAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerAddrType.setDescription("The type of IP address for the cddServerAddr object. Only the support for the value 'ipv4(1)' is required.")
cddServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cddServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerAddr.setDescription('The IP address of a server that is associated with a virtual host name.')
cddServerDrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerDrpAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerDrpAddrType.setDescription('The type of IP address for the cddServerDrpAddr object.')
cddServerDrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerDrpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerDrpAddr.setDescription('The IP address of the Director Response Protocol (DRP) agent that supports this server.')
cddServerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerAdmin.setDescription("The administrative preference metric value for the server. It specifies the preference of one server over another (the larger the number, the lower the preference). Setting this object to the value '0' will take the server out-of-service. Setting this object to the value '-1' will disable the usage of this metric.")
cddServerPortion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortion.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortion.setDescription('Specifies the portion metric value for the server.')
cddServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 7), DnsName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerName.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerName.setDescription("The host name that will be used in the URL instead of the server's IP address if this server is selected while in HTTP redirector mode.")
cddServerAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerAvail.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerAvail.setDescription('The default availability metric value for all ports on the server. This value is used if the DFP reported availability value is found to have timed out, or has not been reported yet, or if the associated port for the virtual hostname has not been configured such that the correct availability can not be determined from the DFP information.')
cddServerHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerHits.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerHits.setDescription('The number of times this server has been advertised as the best server for the subdomain or host name.')
cddServerLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerLastHitTime.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerLastHitTime.setDescription('The last time the server was advertised as the best server for the subdomain name or host name.')
cddServerDrpSerMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerDrpSerMetric.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerDrpSerMetric.setDescription('Indicates the DRP server metric value of the server.')
cddServerPortionHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerPortionHits.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortionHits.setDescription('The number of times this server has been advertised as the best server due to the server specific portion metric.')
cddServerAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerAccessList.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerAccessList.setDescription("Indicates the access list that is used to verify if this server should be selectable as a valid choice for a particular client. This list will only be checked if the access control is turned on for the hostname being looked up. The value '0' indicates that no access list is used.")
cddServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
cddServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2), )
if mibBuilder.loadTexts: cddServerPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortTable.setDescription('A list of Distributed Director server port specific information entries. This information includes the configuration parameters, statistics and availability status for each service port on servers.')
cddServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddServerAddrType"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddServerAddr"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddServerPortNum"))
if mibBuilder.loadTexts: cddServerPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortEntry.setDescription('An entry containing Distributed Director server port specific configuration, statistics and status information. Entries in this table may be queried, created or deleted by NMS. Deleting an entry from this table will cause associated entries in the dependent table (cddServerPortMetricTable) to be deleted as well. Each entry in this table is dependent on entries in cddServerTable. If the associated entry in cddServerTable that has the same cddServerAddrType and cddServerAddr values is deleted, the entry in this table is deleted as well.')
cddServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 1), CiscoPort().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cddServerPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortNum.setDescription('The service port number of the server.')
cddServerPortAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortAdmin.setDescription("The administrative preference metric value for the server and the port. It specifies the preference of one server over another (the larger the number, the lower the preference). Setting this object to the value '0' will take the server out-of-service. Setting this object to the value '-1' will disable the usage of this server port specific metric, and the less specific per-server metric value will be used instead.")
cddServerPortConnIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 3), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 3276700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortConnIntv.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortConnIntv.setDescription("The connect test interval, which is used for empirical verification that the service is available on this port of the server. Setting this object to the value '0' will disable the server connect test on this port of the server.")
cddServerPortPortion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortPortion.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortPortion.setDescription("The portion metric value for the port of the server. Setting this object to the value '0' will disable the usage of this 'per-service' metric, and the less specific 'per-server' metric value will be used instead.")
cddServerPortAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortAvail.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortAvail.setDescription('The default DFP availability metric value for the port of the server. This value is used if the DFP reported availability value is found to have timed out, has not been reported yet, or if the associated port for the virtual hostname has not been configured such that the correct availability can not be determined from the DFP information. If the default availability has been configured for both the port and the server, the port specific value will be used.')
cddServerPortUrlString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortUrlString.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortUrlString.setDescription("Specifies the URL that is used by the Distributed Director to determine remote server's availability by connecting to the port of the server and attempting to retrieve a web page.")
cddServerPortUrlIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 7), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 3276700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortUrlIntv.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortUrlIntv.setDescription("Specifies the duration between two service availability checking processes. The Distributed Director checks the service availability periodically by connecting to the port of the server for retrieving a web page with the time duration value of this object. If this object has the value of '0', the less specific per-server duration is used.")
cddServerPortHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerPortHits.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortHits.setDescription('The number of times the server has been advertised as the best server for the service provided on the port.')
cddServerPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("undetermined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortStatus.setDescription("Indicates whether the port service is available or not. The possible service statuses are as follows: undetermined - the service was not tested or the service state can't be determined. up - the service is known to be available. down - the service is known to be unavailable.")
cddServerPortDownCertainty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerPortDownCertainty.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortDownCertainty.setDescription("Indicates the percentage of the downed port service possibility. This value is applicable only if the value of cddServerPortStatus is 'down'.")
cddServerPortNextRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerPortNextRetry.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortNextRetry.setDescription("The amount of time left before the next checking of port service availability starts. If the checking of service availability is proceeding, this object has the value '0'.")
cddServerPortPortionHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerPortPortionHits.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortPortionHits.setDescription('The number of times this server has been advertised as the best server due to the server port specific portion metric.')
cddServerPortAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cddServerPortAccessList.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortAccessList.setDescription("Indicates the per-port access list that is used to verify if this server should be selectable as a valid choice for a particular client. This list will only be checked if the access control is turned on for the hostname being looked up. If this object has the value of '0', the less specific per-server access list will be used instead.")
cddServerPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 2, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
cddServerPortMetricTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 3), )
if mibBuilder.loadTexts: cddServerPortMetricTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortMetricTable.setDescription('A list of Distributed Director per-service per-metric weight entries.')
cddServerPortMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddServerAddrType"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddServerAddr"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddServerPortNum"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddServerPortMetricType"))
if mibBuilder.loadTexts: cddServerPortMetricEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortMetricEntry.setDescription('An entry containing Distributed Director per-service per-metric weight information. Entries in this table may be queried, created or deleted by NMS. Each entry in this table is dependent on entries in cddServerTable and cddServerPortTable. If the associated entry in cddServerTable that has the same cddServerAddrType and cddServerAddr values or the associated entry in cddServerPortTable that has the same cddServerPortNum value is deleted, the entry in this table is deleted as well.')
cddServerPortMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 3, 1, 1), CddMetricType())
if mibBuilder.loadTexts: cddServerPortMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortMetricType.setDescription("The type of the metric to which the per-service per-metric weight applies. When this metric is referenced with respect to this server and port, the metric's value will be multiplied by the weight given. For example, if one remote server is known to be able to handle twice the load of another remote server, the DFP availability metric's value can be multiplied by a weight of '2' for the slower server and by a weight of '1' for the faster server.")
cddServerPortMetricWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 3, 1, 2), CddMetricWeight()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortMetricWeight.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortMetricWeight.setDescription("The per-service per-metric weight for the metric. If this object has the value of '0', the host specific weight for the metric will be used instead.")
cddServerPortMetricRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddServerPortMetricRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddServerPortMetricRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
cddHostServerMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 4, 1), )
if mibBuilder.loadTexts: cddHostServerMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostServerMappingTable.setDescription('This table contains zero or more rows of virtual hostname and query type combination to real server associations. For each virtual hostname and query type combination, there are zero or more real servers associated with it. One real server may be associated with multiple virtual hostname and query type combinations.')
cddHostServerMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DIST-DIRECTOR-MIB", "cddHostName"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostQueryType"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostServerMappingServerAddrType"), (0, "CISCO-DIST-DIRECTOR-MIB", "cddHostServerMappingServerAddr"))
if mibBuilder.loadTexts: cddHostServerMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostServerMappingEntry.setDescription('An entry containing a particular virtual hostname and query type combination to real server association information.')
cddHostServerMappingServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cddHostServerMappingServerAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostServerMappingServerAddrType.setDescription("The type of IP address for the cddHostServerMappingServerAddr object. Only the support for the value 'ipv4(1)' is required.")
cddHostServerMappingServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 4, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cddHostServerMappingServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostServerMappingServerAddr.setDescription('The IP address of one of the servers associated with the combination of the virtual host name and query type.')
cddHostServerMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 197, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cddHostServerMappingRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cddHostServerMappingRowStatus.setDescription('The status of the row. This object is used to create a new row or delete an existing row in this table.')
ciscoDistDirEventServerUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 197, 2) + (0,1)).setObjects(("CISCO-DIST-DIRECTOR-MIB", "cddServerPortStatus"))
if mibBuilder.loadTexts: ciscoDistDirEventServerUp.setDescription("This notification is sent if the state transition of cddServerPortStatus object is from 'down' or 'undetermined' to 'up' state.")
ciscoDistDirEventServerDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 197, 2) + (0,2)).setObjects(("CISCO-DIST-DIRECTOR-MIB", "cddServerPortStatus"))
if mibBuilder.loadTexts: ciscoDistDirEventServerDown.setDescription("This notification is sent if the state transition of cddServerPortStatus object is from 'up' or 'undetermined' to 'down' state.")
ciscoDistDirEventHitRateHigh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 197, 2) + (0,3)).setObjects(("CISCO-DIST-DIRECTOR-MIB", "cddGeneralQueryRate"))
if mibBuilder.loadTexts: ciscoDistDirEventHitRateHigh.setDescription('High DNS/HTTP queries/requests notification. mteEventTable and mteTriggerThresholdTable in DISMAN-EVENT-MIB can be used to control the trigger of this notification.')
ciscoDistDirGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 2, 1))
ciscoDistDirHostGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 2, 2))
ciscoDistDirServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 2, 3))
ciscoDistDirMappingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 2, 4))
ciscoDistDirNotificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 2, 5))
ciscoDistDirMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 197, 3, 1, 1))
mibBuilder.exportSymbols("CISCO-DIST-DIRECTOR-MIB", cddServerAvail=cddServerAvail, ciscoDistDirMIBCompliances=ciscoDistDirMIBCompliances, cddServerAddr=cddServerAddr, CddMetricProfileIdOrZero=CddMetricProfileIdOrZero, cddHostTolCfgRowStatus=cddHostTolCfgRowStatus, ciscoDistDirGeneralGroup=ciscoDistDirGeneralGroup, CddMetricProfileId=CddMetricProfileId, cddGeneralMetricProfTable=cddGeneralMetricProfTable, cddGeneralQueueProcess=cddGeneralQueueProcess, cddServerPortMetricTable=cddServerPortMetricTable, cddHostTolCfgEntry=cddHostTolCfgEntry, cddHostUrlIntv=cddHostUrlIntv, cddHostDrpMed=cddHostDrpMed, cddHostMultipleRecord=cddHostMultipleRecord, cddServerPortAdmin=cddServerPortAdmin, cddServerPortionHits=cddServerPortionHits, cddHostServerMappingEntry=cddHostServerMappingEntry, ciscoDistDirMIBNotifications=ciscoDistDirMIBNotifications, CddMetricWeight=CddMetricWeight, cddServerPortMetricEntry=cddServerPortMetricEntry, ciscoDistDirMIBCompliance=ciscoDistDirMIBCompliance, ciscoDistDirServerGroup=ciscoDistDirServerGroup, cddServerEntry=cddServerEntry, CddMetricPriority=CddMetricPriority, cddHostTolCfgPerc=cddHostTolCfgPerc, cddHost=cddHost, CddMetricType=CddMetricType, cddServerPortPortionHits=cddServerPortPortionHits, cddServerAccessList=cddServerAccessList, cddHostLogging=cddHostLogging, cddGeneralDefPriorityWeight=cddGeneralDefPriorityWeight, cddGeneralMetricProfPriority=cddGeneralMetricProfPriority, cddGeneralMetricProfId=cddGeneralMetricProfId, cddServerPortConnIntv=cddServerPortConnIntv, cddGeneral=cddGeneral, cddGeneralMetricProfMetric=cddGeneralMetricProfMetric, ciscoDistDirMIBGroups=ciscoDistDirMIBGroups, ciscoDistDirMappingGroup=ciscoDistDirMappingGroup, cddHostServicePort=cddHostServicePort, cddHostServerMappingServerAddr=cddHostServerMappingServerAddr, cddGeneralMetricProfRowStatus=cddGeneralMetricProfRowStatus, cddHostTable=cddHostTable, cddHostConnectCfgTable=cddHostConnectCfgTable, cddHostConnectCfgPort=cddHostConnectCfgPort, cddServerPortAvail=cddServerPortAvail, cddMapping=cddMapping, ciscoDistDirMIBNotificationPrefix=ciscoDistDirMIBNotificationPrefix, cddServerDrpAddrType=cddServerDrpAddrType, cddGeneralQueueMetric=cddGeneralQueueMetric, cddHostConnectCfgEntry=cddHostConnectCfgEntry, cddServerTable=cddServerTable, cddGeneralMetricWaitAvg=cddGeneralMetricWaitAvg, cddServerRowStatus=cddServerRowStatus, cddHostRequests=cddHostRequests, cddGeneralTTL=cddGeneralTTL, cddGeneralMetricProfEntry=cddGeneralMetricProfEntry, cddHostServerMappingServerAddrType=cddHostServerMappingServerAddrType, cddServerPortUrlIntv=cddServerPortUrlIntv, cddServerDrpSerMetric=cddServerDrpSerMetric, cddServerPortHits=cddServerPortHits, cddServerPortMetricType=cddServerPortMetricType, cddServerPortDownCertainty=cddServerPortDownCertainty, cddServerPortTable=cddServerPortTable, cddHostPriorityWeight=cddHostPriorityWeight, ciscoDistDirHostGroup=ciscoDistDirHostGroup, ciscoDistDirMIB=ciscoDistDirMIB, cddServerPortEntry=cddServerPortEntry, cddGeneralMetricProfWeight=cddGeneralMetricProfWeight, cddGeneralCacheEnable=cddGeneralCacheEnable, cddServerDrpAddr=cddServerDrpAddr, cddGeneralQueries=cddGeneralQueries, cddServerPortStatus=cddServerPortStatus, cddServerPortNum=cddServerPortNum, cddHostReplies=cddHostReplies, cddGeneralCacheHits=cddGeneralCacheHits, ciscoDistDirMIBConformance=ciscoDistDirMIBConformance, cddHostDrpRttTol=cddHostDrpRttTol, cddHostTolCfgPrio=cddHostTolCfgPrio, cddHostAccessControl=cddHostAccessControl, cddGeneralQueryRate=cddGeneralQueryRate, cddServerPortAccessList=cddServerPortAccessList, cddHostConnectCfgRowStatus=cddHostConnectCfgRowStatus, cddServerAddrType=cddServerAddrType, cddHostTolCfgTable=cddHostTolCfgTable, cddHostServerMappingRowStatus=cddHostServerMappingRowStatus, cddHostName=cddHostName, cddServerPortion=cddServerPortion, cddServerPortRowStatus=cddServerPortRowStatus, ciscoDistDirEventServerDown=ciscoDistDirEventServerDown, cddServer=cddServer, cddServerPortMetricWeight=cddServerPortMetricWeight, ciscoDistDirEventHitRateHigh=ciscoDistDirEventHitRateHigh, cddHostConnectCfgIntv=cddHostConnectCfgIntv, ciscoDistDirMIBObjects=ciscoDistDirMIBObjects, cddServerPortUrlString=cddServerPortUrlString, cddServerPortMetricRowStatus=cddServerPortMetricRowStatus, cddServerPortNextRetry=cddServerPortNextRetry, cddHostServerMappingTable=cddHostServerMappingTable, cddGeneralMetricWaitMin=cddGeneralMetricWaitMin, cddGeneralMetricWaitMax=cddGeneralMetricWaitMax, cddHostQueryType=cddHostQueryType, cddHostRowStatus=cddHostRowStatus, cddServerHits=cddServerHits, cddHostUrlString=cddHostUrlString, cddServerPortPortion=cddServerPortPortion, cddServerName=cddServerName, cddHostDrpRttProbes=cddHostDrpRttProbes, cddServerAdmin=cddServerAdmin, cddGeneralAccessList=cddGeneralAccessList, cddHostEntry=cddHostEntry, cddServerLastHitTime=cddServerLastHitTime, cddGeneralCacheTime=cddGeneralCacheTime, ciscoDistDirEventServerUp=ciscoDistDirEventServerUp, cddGeneralReplies=cddGeneralReplies, ciscoDistDirNotificationGroup=ciscoDistDirNotificationGroup)
