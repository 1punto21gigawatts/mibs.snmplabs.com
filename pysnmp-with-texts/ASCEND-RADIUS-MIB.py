#
# PySNMP MIB module ASCEND-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
radiusGroup, = mibBuilder.importSymbols("ASCEND-MIB", "radiusGroup")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, Unsigned32, MibIdentifier, Gauge32, Bits, IpAddress, NotificationType, Integer32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "Unsigned32", "MibIdentifier", "Gauge32", "Bits", "IpAddress", "NotificationType", "Integer32", "ObjectIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
radiusNumAuthServers = MibScalar((1, 3, 6, 1, 4, 1, 529, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusNumAuthServers.setStatus('mandatory')
if mibBuilder.loadTexts: radiusNumAuthServers.setDescription('The maximum number of RADIUS authentication servers supported by the system.')
radiusNumAcctServers = MibScalar((1, 3, 6, 1, 4, 1, 529, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusNumAcctServers.setStatus('mandatory')
if mibBuilder.loadTexts: radiusNumAcctServers.setDescription('The maximum number of RADIUS accounting servers supported by the system.')
radiusAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 529, 13, 3), )
if mibBuilder.loadTexts: radiusAuthStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAuthStatsTable.setDescription('A list of entries for RADIUS authentication statistics.')
radiusAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 13, 3, 1), ).setIndexNames((0, "ASCEND-RADIUS-MIB", "radAuthServerIndex"))
if mibBuilder.loadTexts: radiusAuthStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAuthStatsEntry.setDescription('An entry containing object variables to describe a session.')
radAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthServerIndex.setDescription("The index number for this session status entry. Its value ranges from 1 to 'radiusNumAuthServers'. and identifies which server entry is associated with.")
radAuthLoginRqstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthLoginRqstSent.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthLoginRqstSent.setDescription("Total number of authentication requests sent. These requests are strictly for authentication purposes. The sum of this value and 'radAuthOtherRqstSent' represents the total number of requests sent (excluding RADIUS accounting requests).")
radAuthOtherRqstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthOtherRqstSent.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthOtherRqstSent.setDescription('Total number of requests sent that are NOT related to authentication or accounting. These include requests for routes, filters, banners, etc.')
radAuthRqstTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthRqstTimedOut.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthRqstTimedOut.setDescription("Total number of authentication requests which timed out. Value should be less than or equal to 'radAuthLoginRqstSent'.")
radAuthOtherRqstTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthOtherRqstTimedOut.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthOtherRqstTimedOut.setDescription("Total number of requests excluding authentication and accounting which timed out. Value should be less than or equal to 'radAuthOtherRqstSent'.")
radAuthRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthRspRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthRspRcvd.setDescription("Total number of responses to authentication requests received. Response could be a NAK or an ACK. Value should match radAuthLoginRqstSent. The sum of this value and 'radAuthOtherRspRcvd', 'radAuthUnexpRspRcvd', and 'radAuthBadRspRcvd' represents the total number of responses received (excluding those related to RADIUS accounting).")
radAuthOtherRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthOtherRspRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthOtherRspRcvd.setDescription('Total number of responses to requests that were NOT related to authentication or accounting. Response could be a NAK or an ACK. Value should be less than or equal to radAuthOtherRqstSent.')
radAuthUnexpRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthUnexpRspRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthUnexpRspRcvd.setDescription('Total number of responses received that did not match an outstanding request. A positive value may indicate configured timeout is insufficient. Total excludes accounting responses.')
radAuthBadRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthBadRspRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthBadRspRcvd.setDescription('Total number of authentication responses received that were rejected due to: (1) authentication NAKed. (2) invalid authenticator field. (3) invalid packet format. (4) invalid code field. (5) unrecognized attribute. A positive value may indicate mismatch in the shared secrets.')
radAuthAckRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthAckRspRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthAckRspRcvd.setDescription("Total number of authentication requests which were ACKed or authenticated successfully. Value is less than or equal to 'radAuthLoginRqstSent'.")
radAuthHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAuthHostIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthHostIPAddress.setDescription('The IP address of the Authentication server. The value 0.0.0.0 is returned if entry is invalid.')
radAuthCurrentServerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("current", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthCurrentServerFlag.setStatus('mandatory')
if mibBuilder.loadTexts: radAuthCurrentServerFlag.setDescription('Value indicates whether this entry is the current authentication server or not. Writing a value will cause the current server to be reset.')
radiusAcctStatsTable = MibTable((1, 3, 6, 1, 4, 1, 529, 13, 4), )
if mibBuilder.loadTexts: radiusAcctStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctStatsTable.setDescription('A list of entries for RADIUS accounting statistics.')
radiusAcctStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 13, 4, 1), ).setIndexNames((0, "ASCEND-RADIUS-MIB", "radAcctServerIndex"))
if mibBuilder.loadTexts: radiusAcctStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctStatsEntry.setDescription('An entry containing object variables to describe a session.')
radAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: radAcctServerIndex.setDescription("The index number for this session status entry. Its value ranges from 1 to 'radiusNumAcctServers'. and identifies which server entry is associated with.")
radAcctRqstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctRqstSent.setStatus('mandatory')
if mibBuilder.loadTexts: radAcctRqstSent.setDescription('Total number of accounting requests sent.')
radAcctRqstTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctRqstTimedOut.setStatus('mandatory')
if mibBuilder.loadTexts: radAcctRqstTimedOut.setDescription('Total number of accounting requests which timed out.')
radAcctRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctRspRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: radAcctRspRcvd.setDescription('Total number of responses to accounting requests received.')
radAcctUnexpRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctUnexpRspRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: radAcctUnexpRspRcvd.setDescription('Total number of accounting responses received that did not match an outstanding request. A positive value may indicate configured timeout is insufficient.')
radAcctHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radAcctHostIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: radAcctHostIPAddress.setDescription('The IP address of the Accounting server. The value 0.0.0.0 is returned if entry is invalid.')
radAcctCurrentServerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 13, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctCurrentServerFlag.setStatus('mandatory')
if mibBuilder.loadTexts: radAcctCurrentServerFlag.setDescription('Value indicates whether this entry is the current active accounting server or not. Writing a value will cause the current server to be reset.')
radiusNewNASPortIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 529, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNewNASPortIDFormat.setStatus('mandatory')
if mibBuilder.loadTexts: radiusNewNASPortIDFormat.setDescription('TRUE if new NAS port ID format is used, FALSE if old NAS Port ID is used. On the TNT product family the new NAS port ID format is used by default. The old format cannot be used for multi-shelf systems or if any line cards are in a slot greater than the twelfth position.')
mibBuilder.exportSymbols("ASCEND-RADIUS-MIB", radAuthBadRspRcvd=radAuthBadRspRcvd, radAuthCurrentServerFlag=radAuthCurrentServerFlag, radAuthServerIndex=radAuthServerIndex, radAuthRqstTimedOut=radAuthRqstTimedOut, radAuthOtherRqstSent=radAuthOtherRqstSent, radAuthOtherRspRcvd=radAuthOtherRspRcvd, radAuthHostIPAddress=radAuthHostIPAddress, radiusAcctStatsTable=radiusAcctStatsTable, radAcctCurrentServerFlag=radAcctCurrentServerFlag, radiusAuthStatsTable=radiusAuthStatsTable, radAuthLoginRqstSent=radAuthLoginRqstSent, radAcctRspRcvd=radAcctRspRcvd, radAuthUnexpRspRcvd=radAuthUnexpRspRcvd, radiusAcctStatsEntry=radiusAcctStatsEntry, radiusNumAcctServers=radiusNumAcctServers, radAuthRspRcvd=radAuthRspRcvd, radAcctRqstTimedOut=radAcctRqstTimedOut, radAcctUnexpRspRcvd=radAcctUnexpRspRcvd, radiusAuthStatsEntry=radiusAuthStatsEntry, radAuthOtherRqstTimedOut=radAuthOtherRqstTimedOut, radAuthAckRspRcvd=radAuthAckRspRcvd, radAcctRqstSent=radAcctRqstSent, radiusNumAuthServers=radiusNumAuthServers, radAcctServerIndex=radAcctServerIndex, radiusNewNASPortIDFormat=radiusNewNASPortIDFormat, radAcctHostIPAddress=radAcctHostIPAddress)
