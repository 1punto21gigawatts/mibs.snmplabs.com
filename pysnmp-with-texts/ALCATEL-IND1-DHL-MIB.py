#
# PySNMP MIB module ALCATEL-IND1-DHL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-DHL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:17:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1DHL, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1DHL")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Counter32, MibIdentifier, IpAddress, Bits, NotificationType, TimeTicks, Counter64, ObjectIdentity, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Counter32", "MibIdentifier", "IpAddress", "Bits", "NotificationType", "TimeTicks", "Counter64", "ObjectIdentity", "iso", "ModuleIdentity")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1DHLMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1))
if mibBuilder.loadTexts: alcatelIND1DHLMIB.setLastUpdated('201008150000Z')
if mibBuilder.loadTexts: alcatelIND1DHLMIB.setOrganization('Alcatel - Architects Of An Internet World')
if mibBuilder.loadTexts: alcatelIND1DHLMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate version of this document is used with the products in question: Alcatel Internetworking, Incorporated (Division 1, Formerly XYLAN Corporation) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://www.ind.alcatel.com File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1DHLMIB.setDescription('The Dual Homed Link uses two links with a number of VLANs split between them from the common pool of vlans, in such a way that any vlan is not associated with both of the redundant links at the same time to avoid formation of loops and also VLANs are still connected to the core when one link fails. STP is disabled on both the DHL links implicitly.')
alcatelIND1DHLMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 0))
if mibBuilder.loadTexts: alcatelIND1DHLMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DHLMIBNotifications.setDescription('Branch For DHL Subsystem Notifications.')
alcatelIND1DHLMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1))
if mibBuilder.loadTexts: alcatelIND1DHLMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DHLMIBObjects.setDescription('Branch For DHL Subsystem Managed Objects.')
alcatelIND1DHLMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2))
if mibBuilder.loadTexts: alcatelIND1DHLMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DHLMIBConformance.setDescription('Branch for DHL Module MIB Subsystem Conformance Information.')
alcatelIND1DHLMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1DHLMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DHLMIBGroups.setDescription('Branch for DHL Module MIB Subsystem Units of Conformance.')
alcatelIND1DHLMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1DHLMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DHLMIBCompliances.setDescription('Branch for DHL Module MIB Subsystem Compliance Statements.')
alaDHLSessionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1))
alaDHLSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaDHLSessionTable.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionTable.setDescription('Defines the DHL control table for providing the capability of performing DHL Active-Active operations.')
alaDHLSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DHL-MIB", "alaDHLSessionIndex"))
if mibBuilder.loadTexts: alaDHLSessionEntry.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionEntry.setDescription('An entry in this table containing information of a single DHL (Active-Active) session.')
alaDHLSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: alaDHLSessionIndex.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionIndex.setDescription('DHL session Index identify the entries in the table. we are currently supporting one session.')
alaDHLSessionDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHLSessionDescr.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionDescr.setDescription('User provided description string for the DHL session.')
alaDHLSessionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHLSessionAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionAdminStatus.setDescription('Indicates whether the admin state of DHL session is ENBLED or DISABLED.')
alaDHLSessionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHLSessionOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionOperStatus.setDescription('Indicates whether the operational state of DHL session is UP or DOWN.')
alaDHLSessionPreemptionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHLSessionPreemptionTime.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionPreemptionTime.setDescription('Interval, in seconds, which defines the pre-emption time used for delay in moving back the vlan to their original link.')
alaDHLSessionAdminMacFlushing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("raw", 2), ("mvrp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHLSessionAdminMacFlushing.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionAdminMacFlushing.setDescription('Value for mac-flushing technique used for the specified DHL session.')
alaDHLSessionActiveMacFlushing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("raw", 2), ("mvrp", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHLSessionActiveMacFlushing.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionActiveMacFlushing.setDescription('Operational state of mac-flushing technique used for the specified DHL session.')
alaDHLSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHLSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionRowStatus.setDescription('This object allows entries to be created and deleted in the table.')
alaDHLLinksConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2))
alaDHLLinksTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaDHLLinksTable.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinksTable.setDescription('Defines the DHLG links table for a DHL session. this table allows the capability to add or remove the DHL links from the DHL session.')
alaDHLLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DHL-MIB", "alaDHLSessionIndex"), (0, "ALCATEL-IND1-DHL-MIB", "alaDHLLinkslinkA"), (0, "ALCATEL-IND1-DHL-MIB", "alaDHLLinkslinkB"))
if mibBuilder.loadTexts: alaDHLLinksEntry.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinksEntry.setDescription('An entry in this table, contains information of the configured port/ling-aggs that participate in a DHL session.')
alaDHLLinkslinkA = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDHLLinkslinkA.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinkslinkA.setDescription('The physical identification number for DHL linkA. it can be a physical port or a logical port')
alaDHLLinkslinkB = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaDHLLinkslinkB.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinkslinkB.setDescription('The physical identification number for DHL linkB. it can be a physical port or a logical port')
alaDHLLinkslinkAOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHLLinkslinkAOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinkslinkAOperStatus.setDescription('This object indicates whether the operational state of DHL linkA is UP or DOWN. ')
alaDHLLinkslinkBOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHLLinkslinkBOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinkslinkBOperStatus.setDescription('Indicates whether the operational state of DHL linkB is UP or DOWN. ')
alaDHLLinksRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHLLinksRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinksRowStatus.setDescription('This object allows entries to be created and deleted in the table.')
alaDHLVpa = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 3))
alaDHLVpaTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaDHLVpaTable.setStatus('current')
if mibBuilder.loadTexts: alaDHLVpaTable.setDescription('Used to display the vlan membership of the DHL links. this table is also used to display whether a vlan is protected or unprotected and operational on which DHL link. ')
alaDHLVpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DHL-MIB", "alaDHLSessionIndex"), (0, "ALCATEL-IND1-DHL-MIB", "alaDHLVpalink"), (0, "ALCATEL-IND1-DHL-MIB", "alaDHLVpaVlan"))
if mibBuilder.loadTexts: alaDHLVpaEntry.setStatus('current')
if mibBuilder.loadTexts: alaDHLVpaEntry.setDescription('An entry in this table, contains VPA information of of each link per DHL session.')
alaDHLVpalink = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDHLVpalink.setStatus('current')
if mibBuilder.loadTexts: alaDHLVpalink.setDescription('Indicates the vlan is member of linkA or linkB. the value is physical identification number for DHL link. it can be a physical port or a logical port ')
alaDHLVpaVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDHLVpaVlan.setStatus('current')
if mibBuilder.loadTexts: alaDHLVpaVlan.setDescription('The vlan number where the DHL linkA or linkB is member of it.')
alaDHLVpaVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protectedVlan", 1), ("unprotectedVlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHLVpaVlanType.setStatus('current')
if mibBuilder.loadTexts: alaDHLVpaVlanType.setDescription('indicates whether the vlan is protected or un protected where one of the DHL link is member of it.')
alaDHLVpaActiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 3, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHLVpaActiveLink.setStatus('current')
if mibBuilder.loadTexts: alaDHLVpaActiveLink.setDescription("indicates the DHL link on which the vlan is operational. If the value is zero that means the vlan is not operational and it's unprotected.")
alaDHLVlanMap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 4))
alaDHLVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaDHLVlanMapTable.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMapTable.setDescription('Defines the DHL vlan map for linkB. this indicates the vlans that will be operational on DHL linkB from the common pool of vlans between DHL linkA and linkB and by default the vlans that are not specified by this table are operational on DHL linkA.')
alaDHLVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DHL-MIB", "alaDHLSessionIndex"), (0, "ALCATEL-IND1-DHL-MIB", "alaDHLVlanMapVlanStart"), (0, "ALCATEL-IND1-DHL-MIB", "alaDHLVlanMapVlanEnd"))
if mibBuilder.loadTexts: alaDHLVlanMapEntry.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMapEntry.setDescription('An entry in this table, contains the vlan-map for linkB in DHL session.')
alaDHLVlanMapVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDHLVlanMapVlanStart.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMapVlanStart.setDescription('The VLAN number identifying the first vlan id in the range. And if start and end is same then it will be treated a one vlan id.')
alaDHLVlanMapVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDHLVlanMapVlanEnd.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMapVlanEnd.setDescription('The VLAN number identifying the end vlan id in the range. And if start and end is same then it will be treated a one vlan id.')
alaDHLVlanMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHLVlanMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMapRowStatus.setDescription('This object allows entries to be created and deleted in the table.')
alaDHLTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 5))
alaDHLVlanMoveTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 0, 1)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLSessionID"), ("ALCATEL-IND1-DHL-MIB", "alaDHLPortFrom"), ("ALCATEL-IND1-DHL-MIB", "alaDHLPortTo"), ("ALCATEL-IND1-DHL-MIB", "alaDHLVlanMoveReason"))
if mibBuilder.loadTexts: alaDHLVlanMoveTrap.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMoveTrap.setDescription('When linkA or linkB goes down or becomes up and both the ports are are part of some vlan-map, then this trap is sent to the Management Entity, with the DHL port information.')
alaDHLSessionID = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 5, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDHLSessionID.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionID.setDescription('This object specifies the DHL Session ID for which alaDHLVlanMoveTrap needs to be sent to the Management Entity.')
alaDHLPortFrom = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 5, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDHLPortFrom.setStatus('current')
if mibBuilder.loadTexts: alaDHLPortFrom.setDescription('This object specifies the port, either linkA or linkB, from which vlan-mapped vlans have joined to other port due to linkUp or linkDown as specified by alaDHLVlanMoveReason.')
alaDHLPortTo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 5, 3), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDHLPortTo.setStatus('current')
if mibBuilder.loadTexts: alaDHLPortTo.setDescription('This object specifies the port, either linkA or linkB, to which vlan-mapped vlans have joined from other port due to linkUp or linkDown as specified by alaDHLVlanMoveReason.')
alaDHLVlanMoveReason = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDHLVlanMoveReason.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMoveReason.setDescription('This object specifies the reason for Vlan Movement from one port to another port.')
alcatelIND1DHLMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLSessionGroup"), ("ALCATEL-IND1-DHL-MIB", "alaDHLLinksGroup"), ("ALCATEL-IND1-DHL-MIB", "alaDHLVpaGroup"), ("ALCATEL-IND1-DHL-MIB", "alaDHLVlanMapGroup"), ("ALCATEL-IND1-DHL-MIB", "alaDHLNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1DHLMIBCompliance = alcatelIND1DHLMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DHLMIBCompliance.setDescription('Compliance statement for DHL.')
alaDHLSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLSessionDescr"), ("ALCATEL-IND1-DHL-MIB", "alaDHLSessionAdminStatus"), ("ALCATEL-IND1-DHL-MIB", "alaDHLSessionOperStatus"), ("ALCATEL-IND1-DHL-MIB", "alaDHLSessionPreemptionTime"), ("ALCATEL-IND1-DHL-MIB", "alaDHLSessionAdminMacFlushing"), ("ALCATEL-IND1-DHL-MIB", "alaDHLSessionActiveMacFlushing"), ("ALCATEL-IND1-DHL-MIB", "alaDHLSessionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHLSessionGroup = alaDHLSessionGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHLSessionGroup.setDescription('Collection of objects for management of a single DHL (Active-Active) session.')
alaDHLLinksGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLLinkslinkAOperStatus"), ("ALCATEL-IND1-DHL-MIB", "alaDHLLinkslinkBOperStatus"), ("ALCATEL-IND1-DHL-MIB", "alaDHLLinksRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHLLinksGroup = alaDHLLinksGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHLLinksGroup.setDescription('Collection of objects for information of the configured port/ling-aggs that participate in a DHL session.')
alaDHLVpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLVpaVlanType"), ("ALCATEL-IND1-DHL-MIB", "alaDHLVpaActiveLink"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHLVpaGroup = alaDHLVpaGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHLVpaGroup.setDescription('Collection of objects providing VPA information of each link per DHL session.')
alaDHLVlanMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLVlanMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHLVlanMapGroup = alaDHLVlanMapGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHLVlanMapGroup.setDescription('Collection of objects providing the vlan-map for linkB in DHL session.')
alaDHLNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLSessionID"), ("ALCATEL-IND1-DHL-MIB", "alaDHLPortFrom"), ("ALCATEL-IND1-DHL-MIB", "alaDHLPortTo"), ("ALCATEL-IND1-DHL-MIB", "alaDHLVlanMoveReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHLNotificationObjectGroup = alaDHLNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHLNotificationObjectGroup.setDescription('Collection of objects providing the information regarding DHL Trap.')
alaDHLNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 65, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-DHL-MIB", "alaDHLVlanMoveTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHLNotificationGroup = alaDHLNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHLNotificationGroup.setDescription('Collection of objects for DHL Trap information.')
mibBuilder.exportSymbols("ALCATEL-IND1-DHL-MIB", alaDHLVlanMap=alaDHLVlanMap, alaDHLSessionGroup=alaDHLSessionGroup, alaDHLVlanMapGroup=alaDHLVlanMapGroup, alaDHLVpalink=alaDHLVpalink, alaDHLLinkslinkB=alaDHLLinkslinkB, alcatelIND1DHLMIBGroups=alcatelIND1DHLMIBGroups, alaDHLVpaActiveLink=alaDHLVpaActiveLink, alaDHLSessionOperStatus=alaDHLSessionOperStatus, alcatelIND1DHLMIBConformance=alcatelIND1DHLMIBConformance, alaDHLSessionRowStatus=alaDHLSessionRowStatus, alaDHLVpa=alaDHLVpa, alaDHLPortFrom=alaDHLPortFrom, alaDHLLinksRowStatus=alaDHLLinksRowStatus, alaDHLTrapsObj=alaDHLTrapsObj, alaDHLLinksTable=alaDHLLinksTable, alaDHLLinkslinkAOperStatus=alaDHLLinkslinkAOperStatus, alaDHLSessionDescr=alaDHLSessionDescr, alaDHLVlanMapVlanStart=alaDHLVlanMapVlanStart, alaDHLVpaGroup=alaDHLVpaGroup, alaDHLLinkslinkBOperStatus=alaDHLLinkslinkBOperStatus, alaDHLVlanMoveReason=alaDHLVlanMoveReason, alaDHLVpaTable=alaDHLVpaTable, alaDHLSessionTable=alaDHLSessionTable, alcatelIND1DHLMIBCompliances=alcatelIND1DHLMIBCompliances, alaDHLVpaVlanType=alaDHLVpaVlanType, alaDHLVlanMapVlanEnd=alaDHLVlanMapVlanEnd, alcatelIND1DHLMIB=alcatelIND1DHLMIB, alaDHLSessionConfig=alaDHLSessionConfig, alaDHLVlanMapEntry=alaDHLVlanMapEntry, alaDHLLinksConfig=alaDHLLinksConfig, alaDHLNotificationGroup=alaDHLNotificationGroup, alaDHLSessionEntry=alaDHLSessionEntry, alcatelIND1DHLMIBNotifications=alcatelIND1DHLMIBNotifications, alaDHLVlanMapRowStatus=alaDHLVlanMapRowStatus, alaDHLLinkslinkA=alaDHLLinkslinkA, alaDHLVpaVlan=alaDHLVpaVlan, alaDHLSessionActiveMacFlushing=alaDHLSessionActiveMacFlushing, alaDHLVlanMapTable=alaDHLVlanMapTable, alcatelIND1DHLMIBCompliance=alcatelIND1DHLMIBCompliance, alaDHLSessionPreemptionTime=alaDHLSessionPreemptionTime, alaDHLSessionAdminStatus=alaDHLSessionAdminStatus, alaDHLPortTo=alaDHLPortTo, alcatelIND1DHLMIBObjects=alcatelIND1DHLMIBObjects, alaDHLSessionIndex=alaDHLSessionIndex, alaDHLVlanMoveTrap=alaDHLVlanMoveTrap, alaDHLSessionID=alaDHLSessionID, alaDHLLinksGroup=alaDHLLinksGroup, alaDHLNotificationObjectGroup=alaDHLNotificationObjectGroup, alaDHLLinksEntry=alaDHLLinksEntry, alaDHLSessionAdminMacFlushing=alaDHLSessionAdminMacFlushing, PYSNMP_MODULE_ID=alcatelIND1DHLMIB, alaDHLVpaEntry=alaDHLVpaEntry)
