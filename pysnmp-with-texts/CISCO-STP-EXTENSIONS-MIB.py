#
# PySNMP MIB module CISCO-STP-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-STP-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
dot1dStpPortEntry, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
vtpVlanEditEntry, vtpVlanEntry, vlanTrunkPortEntry, VlanIndex = mibBuilder.importSymbols("CISCO-VTP-MIB", "vtpVlanEditEntry", "vtpVlanEntry", "vlanTrunkPortEntry", "VlanIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Counter64, MibIdentifier, ObjectIdentity, iso, Bits, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter64", "MibIdentifier", "ObjectIdentity", "iso", "Bits", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "Counter32", "IpAddress")
RowStatus, TruthValue, TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention")
ciscoStpExtensionsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 82))
ciscoStpExtensionsMIB.setRevisions(('2013-03-07 00:00', '2005-12-20 00:00', '2005-04-12 00:00', '2004-07-21 00:00', '2004-04-08 00:00', '2004-01-14 00:00', '2003-10-23 00:00', '2002-07-11 00:00', '2001-12-06 00:00', '2001-09-14 00:00', '2001-06-20 00:00', '2001-04-12 00:00', '2000-05-23 00:00', '2000-03-21 00:00', '1997-11-10 12:00', '1997-08-19 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setRevisionsDescriptions(('Added one new value network(5) to stpxFastStartPortMode.', 'Added bit value rstp(5) to stpxSMSTPortStatus and dispute(4) to stpxRPVSTPortStatus.', 'Changed the description clauses of stpxMSTMaxHopCount and stpxMSTInstanceRemainingHopCount. Added StpxMSTConfigurationDigest textual convention. Deprecated stpxMSTGroup3 and added the following groups: stpxRSTPTransmitHoldCountGroup, stpxSMSTPortMSTModeGroup, stpxSMSTMaxHopCountGroup, stpxSMSTConfigDigestGroup and stpxMSTGroup4. Added bit dispute(4) into the BITS syntax of stpxSMSTPortStatus. Deprecated stpxMIBCompliance11 and added stpxMIBCompliance12.', 'Added stpxPathCostOperModeGroup and changed the decription of stpxSpanningTreePathCostMode.', 'Added stpxSMSTInstanceCISTGroup. Added 3 new bit values into the BITS syntax of stpxNotificationEnable: inconsistency(2), rootInconsistency(3), and loopInconsistency(4).', 'Deprecated stpxMSTGroup2 and stpxPreferredMSTInstancesGroup. Added stpxMSTGroup3, stpxSMSTGroup, stpxSMSTInstanceGroup, stpxSMSTInstanceEditGroup, stpxSMSTPortStatusGroup, stpxSMSTPortHelloTimeGroup. Added one new value master(7) to stpxMSTPortRoleValue and stpxRSTPPortRoleValue. Added 2 new unused bit value into the BITS syntax of stpxRPVSTPortStatus.', 'Added stpxExtendedSysIDGroup, stpxNotificationEnableGroup, and stpxFastStartOperModeGroup.', 'Added Rapid Spanning Tree Protocol support. Added stpxUplinkFastOperEnabled and stpxBackboneFastOperEnabled objects. Replaced stpxMSTPortAdminLinkType, stpxMSTPortOperLinkType, stpxMSTPortProtocolMigration with stpxRSTPPortAdminLinkType, stpxRSTPPortOperLinkType and stpxRSTPPortProtocolMigration defined in stpxRSTPPortTable. Replaced stpxMSTPortRoleTable with stpxRSTPPortRoleTable. Added stpxRPVSTPortTable.', 'Added per port Bpdu Guard and Bpdu Filter mode configuration support. Modified the description of stpxUplinkFastEnabled and stpxUplinkStationLearningGenRate for MST support. ', 'Added MST support, Loop Guard Global Default mode support and Fast Start Global Default mode support. Deprecated stpxFastStartPortEnable and stpxLoopGuardConfigEnabled objects. Changed description of stpxUplinkFastEnabled, stpxUplinkFastTransitions, stpxUplinkStationLearningGenRate, stpxUplinkStationLearningFrames objects for MST support.', 'Added BPDU Skewing feature support and modified the SYNTAX clause of stpxUplinkStationLearningGenRate.', 'Added PVST+ VLAN Configuration, MISTP to VLAN mapping, Loopguard, and Port Fast Start support.', 'Added Long Spanning Tree Path Cost Mode support.', 'Added Rootguard, 4k VLAN and MISTP support.', 'Additional objects to support SSTP.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setLastUpdated('201303070000Z')
if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wbu@cisco.com')
if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setDescription('The MIB module for managing Cisco extensions to the 802.1D Spanning Tree Protocol (STP).')
stpxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1))
stpxUplinkFastObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1))
stpxVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2))
stpxInconsistencyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3))
stpxBackboneFastObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4))
stpxRootGuardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5))
stpxSpanningTreeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6))
stpxMISTPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7))
stpxLoopGuardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8))
stpxFastStartObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9))
stpxBpduSkewingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10))
stpxMSTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11))
stpxRSTPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12))
stpxRPVSTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13))
stpxSMSTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14))
stpxNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 2))
class StpxMSTConfigurationDigest(TextualConvention, OctetString):
    description = 'Represents an MST configuration digest.'
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

stpxUplinkFastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxUplinkFastEnabled.setStatus('current')
if mibBuilder.loadTexts: stpxUplinkFastEnabled.setDescription('An indication of whether the UplinkFast capability is administratively enabled on the device. If the platform does not support configuration of this object when the object value of stpxSpanningTreeType is mst(4), then this object is not instantiated.')
stpxUplinkFastTransitions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 2), Counter32()).setUnits('transitions').setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxUplinkFastTransitions.setStatus('current')
if mibBuilder.loadTexts: stpxUplinkFastTransitions.setDescription("The cumulative number of UplinkFast transitions (from the STP 'Blocking' state directly to the STP 'Forwarding' state). All transitions are included in this counter, irrespective of the instance of the Spanning Tree Protocol on which they occur. If the platform supports the stpxUplinkFastOperEnabled object, then this object is not instantiated when the object value of stpxUplinkFastOperEnabled is false(2). If the platform does not support the stpxUplinkFastOperEnabled object, then this object is not instantiated when the object value of stpxSpanningTreeType is mst(4).")
stpxUplinkStationLearningGenRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('frames').setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxUplinkStationLearningGenRate.setStatus('current')
if mibBuilder.loadTexts: stpxUplinkStationLearningGenRate.setDescription('The maximum number of station-learning frames that this device will generate in each 100 milli-second period after a UplinkFast transition. By configuring this object, the network administrator can limit the rate at which station-learning frames are generated. If the platform does not support configuration of this object when the object value of stpxSpanningTreeType is mst(4), then this object is not instantiated.')
stpxUplinkStationLearningFrames = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxUplinkStationLearningFrames.setStatus('current')
if mibBuilder.loadTexts: stpxUplinkStationLearningFrames.setDescription('The cumulative number of station-learning frames generated due to UplinkFast transitions. All generated station-learning frames are included in this counter, irrespective of the instance of the Spanning Tree Protocol on which the UplinkFast transition occurred. If the platform supports the stpxUplinkFastOperEnabled object, then this object is not instantiated when the object value of stpxUplinkFastOperEnabled is false(2). If the platform does not support the stpxUplinkFastOperEnabled object, then this object is not instantiated when the object value of stpxSpanningTreeType is mst(4).')
stpxUplinkFastOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxUplinkFastOperEnabled.setStatus('current')
if mibBuilder.loadTexts: stpxUplinkFastOperEnabled.setDescription('An indication of whether the UplinkFast capability is operationally enabled on the device.')
stpxPreferredVlansTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1), )
if mibBuilder.loadTexts: stpxPreferredVlansTable.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredVlansTable.setDescription('The table containing indications of which VLANs are preferred on which VLAN trunk ports. The preferred VLANs on a trunk port have a lower Path Cost value compared with the VLANs on the trunk not in the preferred list. If the value of stpxSpanningTreeType is neither pvstPlus(1) nor rapidPvstPlus(5), the configuration in this table has no effect. ')
stpxPreferredVlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1), )
vlanTrunkPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansEntry"))
stpxPreferredVlansEntry.setIndexNames(*vlanTrunkPortEntry.getIndexNames())
if mibBuilder.loadTexts: stpxPreferredVlansEntry.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredVlansEntry.setDescription('An entry indicating which VLANs are preferred on a specific VLAN trunk port.')
stpxPreferredVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredVlansMap.setDescription("A string of octets containing one bit per VLAN in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is preferred on this trunk port, then the bit corresponding to that VLAN is set to '1'. The default value is 128 bytes of zeros. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
stpxPreferredVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap2k.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is preferred on this trunk port, then the bit corresponding to that VLAN is set to '1'. The default value is 128 bytes of zeros. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
stpxPreferredVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap3k.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is preferred on this trunk port, then the bit corresponding to that VLAN is set to '1'. The default value is 128 bytes of zeros. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
stpxPreferredVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap4k.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is preferred on this trunk port, then the bit corresponding to that VLAN is set to '1'. The default value is 128 bytes of zeros. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
stpxPVSTVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2), )
if mibBuilder.loadTexts: stpxPVSTVlanTable.setStatus('current')
if mibBuilder.loadTexts: stpxPVSTVlanTable.setDescription('A list of Virtual LAN entries containing information for Spanning Tree PVST+ protocol. An entry will exist for each VLAN existing on the device.')
stpxPVSTVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanIndex"))
if mibBuilder.loadTexts: stpxPVSTVlanEntry.setStatus('current')
if mibBuilder.loadTexts: stpxPVSTVlanEntry.setDescription('An entry containing Spanning Tree PVST+ Protocol information for a particular Virtual LAN.')
stpxPVSTVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: stpxPVSTVlanIndex.setStatus('current')
if mibBuilder.loadTexts: stpxPVSTVlanIndex.setDescription('An index value that uniquely identifies the Virtual LAN associated with this information.')
stpxPVSTVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPVSTVlanEnable.setStatus('current')
if mibBuilder.loadTexts: stpxPVSTVlanEnable.setDescription('Indicates whether Spanning Tree PVST+ Protocol is enabled for this Virtual LAN. If Spanning Tree PVST+ Protocol is not supported on this VLAN, then notApplicable(3) will be returned while retrieving the object value for this VLAN. If the device only supports a single global Spanning Tree PVST+ Protocol enable/disable for all the existing VLANs, then the object value assigned to this VLAN will be applied to the object values of all the instances in this table which do not have the value of notApplicable(3). If the value of stpxSpanningTreeType is neither pvstPlus(1) nor rapidPvstPlus(5), then the value of stpxPVSTVlanEnable for this VLAN can not be changed.')
stpxInconsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1), )
if mibBuilder.loadTexts: stpxInconsistencyTable.setStatus('current')
if mibBuilder.loadTexts: stpxInconsistencyTable.setDescription("A table containing a list of the ports for which a particular VLAN's Spanning Tree has been found to have an inconsistency. Two types of inconsistency are discovered: 1) an inconsistency where two different port types have been plugged together; and 2) an inconsistency where different switches have different PVIDs for the same link.")
stpxInconsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxVlanIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxPortIndex"))
if mibBuilder.loadTexts: stpxInconsistencyEntry.setStatus('current')
if mibBuilder.loadTexts: stpxInconsistencyEntry.setDescription('A VLAN on a particular port for which a Spanning Tree inconsistency is currently in effect.')
stpxVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: stpxVlanIndex.setStatus('current')
if mibBuilder.loadTexts: stpxVlanIndex.setDescription('The VLAN id of the VLAN.')
stpxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1, 3), Bits().clone(namedValues=NamedValues(("typeInconsistent", 0), ("pvidInconsistent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxInconsistentState.setReference('dot1dStpPortState is defined in RFC-1493.')
if mibBuilder.loadTexts: stpxInconsistentState.setStatus('current')
if mibBuilder.loadTexts: stpxInconsistentState.setDescription("The types of inconsistency which have been discovered on this port for this VLAN's Spanning Tree. When this object exists, the value of the corresponding instance of the Bridge MIB's dot1dStpPortState object will be 'broken(6)'.")
stpxBackboneFastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxBackboneFastEnabled.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneFastEnabled.setDescription('An indication of whether the BackboneFast capability is administratively enabled on the device.')
stpxBackboneFastInInferiorBPDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastInInferiorBPDUs.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneFastInInferiorBPDUs.setDescription('The number of inferior BPDUs received by the switch since the stpxBackboneFastOperEnabled has become true(1). If the value of stpxBackboneFastOperEnabled is false(2), then this mib object will have a value of 0.')
stpxBackboneFastInRLQRequestPDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastInRLQRequestPDUs.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneFastInRLQRequestPDUs.setDescription('The number of Root Link Query request PDUs received by the switch since the stpxBackboneFastOperEnabled has become true(1). If the value of stpxBackboneFastOperEnabled is false(2), then this mib object will have a value of 0.')
stpxBackboneFastInRLQResponsePDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastInRLQResponsePDUs.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneFastInRLQResponsePDUs.setDescription('The number of Root Link Query response PDUs received by the switch since the stpxBackboneFastOperEnabled has become true(1). If the value of stpxBackboneFastOperEnabled is false(2), then this mib object will have a value of 0.')
stpxBackboneFastOutRLQRequestPDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastOutRLQRequestPDUs.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneFastOutRLQRequestPDUs.setDescription('The number of Root Link Query request PDUs transmitted by the switch since the stpxBackboneFastOperEnabled has become true(1). If the value of stpxBackboneFastOperEnabled is false(2), then this mib object will have a value of 0.')
stpxBackboneFastOutRLQResponsePDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastOutRLQResponsePDUs.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneFastOutRLQResponsePDUs.setDescription('The number of Root Link Query response PDUs transmitted by the switch since the stpxBackboneFastOperEnabled has become true(1). If the value of stpxBackboneFastOperEnabled is false(2), then this mib object will have a value of 0.')
stpxBackboneFastOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastOperEnabled.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneFastOperEnabled.setDescription('An indication of whether the BackboneFast capability is operationally enabled on the device.')
stpxRootGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1), )
if mibBuilder.loadTexts: stpxRootGuardConfigTable.setStatus('current')
if mibBuilder.loadTexts: stpxRootGuardConfigTable.setDescription('A table containing a list of the bridge ports for which Spanning Tree RootGuard capability can be configured.')
stpxRootGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardConfigPortIndex"))
if mibBuilder.loadTexts: stpxRootGuardConfigEntry.setStatus('current')
if mibBuilder.loadTexts: stpxRootGuardConfigEntry.setDescription('A bridge port for which Spanning Tree RootGuard capability can be configured.')
stpxRootGuardConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxRootGuardConfigPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxRootGuardConfigPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRootGuardConfigPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxRootGuardConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRootGuardConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: stpxRootGuardConfigEnabled.setDescription('An indication of whether the RootGuard capability is enabled on this port or not. This configuration will be applied to all Spanning Tree instances in which this port exists.')
stpxRootInconsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2), )
if mibBuilder.loadTexts: stpxRootInconsistencyTable.setStatus('current')
if mibBuilder.loadTexts: stpxRootInconsistencyTable.setDescription('A table containing a list of the bridge ports for which a particular Spanning Tree instance has been found to have an root-inconsistency. The agent creates a new entry in this table whenever it detects a new root-inconsistency, and deletes entries when/soon after the inconsistency is no longer present.')
stpxRootInconsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyPortIndex"))
if mibBuilder.loadTexts: stpxRootInconsistencyEntry.setStatus('current')
if mibBuilder.loadTexts: stpxRootInconsistencyEntry.setDescription('A Spanning Tree instance on a particular port for which a Spanning Tree root-inconsistency is currently in effect.')
stpxRootInconsistencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: stpxRootInconsistencyIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRootInconsistencyIndex.setDescription('The Spanning Tree instance id, such as the VLAN id of the VLAN if the object value of stpxSpanningTreeType is pvstPlus(1) or rapidPvstPlus(5).')
stpxRootInconsistencyPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxRootInconsistencyPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxRootInconsistencyPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRootInconsistencyPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxRootInconsistencyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRootInconsistencyState.setStatus('current')
if mibBuilder.loadTexts: stpxRootInconsistencyState.setDescription('Indicates whether the port on a particular Spanning Tree instance is currently in root-inconsistent state or not.')
stpxSpanningTreeType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pvstPlus", 1), ("mistp", 2), ("mistpPvstPlus", 3), ("mst", 4), ("rapidPvstPlus", 5))).clone('pvstPlus')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSpanningTreeType.setStatus('current')
if mibBuilder.loadTexts: stpxSpanningTreeType.setDescription('The actual mode of spanning tree protocol runs on the device. It can be one of the following: pvstPlus -- PVST+ (Per VLAN Spanning Tree+ Protocol). mistp -- MISTP (Multi Instance Spanning Tree Protocol). mistpPvstPlus -- MISTP with the tunneling scheme enabled for PVST+. mst -- IEEE 802.1s Multiple Spanning Tree (MST) with IEEE 802.1w Rapid Spanning Tree Protocol (RSTP). rapidPvstPlus -- IEEE 802.1w Rapid Spanning Tree Protocol (RSTP) for all vlans in PVST+. When the value of this MIB object gets changed, the network connectivity would be affected and the connectivity to this device would also be lost temporarily.')
stpxSpanningTreePathCostMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSpanningTreePathCostMode.setStatus('current')
if mibBuilder.loadTexts: stpxSpanningTreePathCostMode.setDescription('Indicates the administrative spanning tree path cost mode configured on device.')
stpxLongStpPortPathCostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 3), )
if mibBuilder.loadTexts: stpxLongStpPortPathCostTable.setStatus('current')
if mibBuilder.loadTexts: stpxLongStpPortPathCostTable.setDescription('A table containing the spanning tree port path cost configuration when stpxSpanningTreePathCostOperMode is long(2). If the value of stpxSpanningTreePathCostOperMode is short(1), this table is not instantiated.')
stpxLongStpPortPathCostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 3, 1), )
dot1dStpPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxLongStpPortPathCostEntry"))
stpxLongStpPortPathCostEntry.setIndexNames(*dot1dStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: stpxLongStpPortPathCostEntry.setStatus('current')
if mibBuilder.loadTexts: stpxLongStpPortPathCostEntry.setDescription('A conceptual row containing the spanning tree port path cost configuration.')
stpxLongStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 3, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLongStpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stpxLongStpPortPathCost.setDescription('The contribution of this port to the path cost (in 32 bits value) of paths towards the spanning tree root which include this port. This object is used to configure the spanning tree port path cost in 32 bits value range when the stpxSpanningTreePathCostOperMode is long(2). If the stpxSpanningTreePathCostOperMode is short(1), this MIB object is not instantiated.')
stpxExtendedSysIDAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxExtendedSysIDAdminEnabled.setReference('IEEE 802.1t.')
if mibBuilder.loadTexts: stpxExtendedSysIDAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: stpxExtendedSysIDAdminEnabled.setDescription('Indicates whether Extended System ID feature is administratively enabled on the device or not.')
stpxExtendedSysIDOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxExtendedSysIDOperEnabled.setReference('IEEE 802.1t.')
if mibBuilder.loadTexts: stpxExtendedSysIDOperEnabled.setStatus('current')
if mibBuilder.loadTexts: stpxExtendedSysIDOperEnabled.setDescription('Indicates whether Extended System ID feature is operationaly enabled on the device or not. If the value of this object is true(1), then the accepted values for dot1dStpPriority in BRIDGE-MIB should be multiples of 4096 plus bridge instance ID, such as VlanIndex. Changing this object value might cause the values of dot1dBaseBridgeAddress and dot1dStpPriority in BRIDGE-MIB to be changed also.')
stpxNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 6), Bits().clone(namedValues=NamedValues(("newRoot", 0), ("topologyChange", 1), ("inconsistency", 2), ("rootInconsistency", 3), ("loopInconsistency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: stpxNotificationEnable.setDescription('Indicates whether a specified notification is enabled or not. If a bit corresponding to a notification is set to 1, then the specified notification can be generated. newRoot -- the newRoot notification as defined in BRIDGE-MIB. topologyChange -- the topologyChange notification as defined in BRIDGE-MIB. inconsistency -- the stpxInconsistencyUpdate notification. rootInconsistency -- the stpxRootInconsistencyUpdate notification. loopInconsistency -- the stpxLoopInconsistencyUpdate notification.')
stpxSpanningTreePathCostOperMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSpanningTreePathCostOperMode.setStatus('current')
if mibBuilder.loadTexts: stpxSpanningTreePathCostOperMode.setDescription("Indicate the operational spanning tree path cost mode on device. This mode applies to all instances of the Spanning Tree protocol running on the device. When the value of this MIB object gets changed, the path cost of all ports will be reassigned to the default path cost values based on the new spanning tree path cost mode and the ports' speed. When the value of this MIB object is long(2), the stpxLongStpPortPathCost MIB object must be used in order to retrieve/configure the spanning tree port path cost as a 32 bits value. The set operation on dot1dStpPortPathCost in BRIDGE-MIB will be rejected. While retrieving the value of dot1dStpPortPathCost, the maximum value of 65535 will be returned if the value of stpxLongStpPortPathCost for the same instance exceeds 65535. When the value of this MIB object is short(1), the dot1dStpPortPathCost in BRIDGE-MIB must be used.")
stpxMISTPInstanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceNumber.setDescription('The number of MISTP instances, that are supported by the device when the value of stpxSpanningTreeType is either mistp(2) or mistpPvstPlus(3).')
stpxMISTPInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2), )
if mibBuilder.loadTexts: stpxMISTPInstanceTable.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceTable.setDescription('This table contains one entry for each instance of MISTP and it contains stpxMISTPInstanceNumber entries, numbered from 1 to stpxMISTPInstanceNumber. This table is only instantiated when the value of stpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).')
stpxMISTPInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceIndex"))
if mibBuilder.loadTexts: stpxMISTPInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceEntry.setDescription('A conceptual row containing the status of the MISTP instance.')
stpxMISTPInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: stpxMISTPInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceIndex.setDescription('An arbitrary integer within the range from 1 to the value of stpxMISTPInstanceNumber that uniquely identifies an instance.')
stpxMISTPInstanceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMISTPInstanceEnable.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceEnable.setDescription("This object indicates whether the MISTP protocol is currently enabled on the MISTP instance. If this object is set to 'true' - the MISTP protocol will run on this instance. 'false' - the MISTP protocol will stop running on this instance. ")
stpxMISTPInstanceVlansMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MISTP instance, then the bit corresponding to that VLAN is set to '1'.")
stpxMISTPInstanceVlansMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped2k.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MISTP instance, then the bit corresponding to that VLAN is set to '1'. This object is only instantiated on devices with support for VlanIndex up to 4095.")
stpxMISTPInstanceVlansMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped3k.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MISTP instance, then the bit corresponding to that VLAN is set to '1'. This object is only instantiated on devices with support for VlanIndex up to 4095.")
stpxMISTPInstanceVlansMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped4k.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MISTP instance, then the bit corresponding to that VLAN is set to '1'. This object is only instantiated on devices with support for VlanIndex up to 4095.")
stpxVlanMISTPInstMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 3), )
if mibBuilder.loadTexts: stpxVlanMISTPInstMapTable.setStatus('current')
if mibBuilder.loadTexts: stpxVlanMISTPInstMapTable.setDescription('A table containing the MISTP Instance Index of the VLANs for a particular management domain. This table is only instantiated when the value of stpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).')
stpxVlanMISTPInstMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 3, 1), )
vtpVlanEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapEntry"))
stpxVlanMISTPInstMapEntry.setIndexNames(*vtpVlanEntry.getIndexNames())
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEntry.setStatus('current')
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEntry.setDescription('A conceptual row containing the MISTP Instance Index of the VLAN for a particular management domain.')
stpxVlanMISTPInstMapInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxVlanMISTPInstMapInstIndex.setStatus('current')
if mibBuilder.loadTexts: stpxVlanMISTPInstMapInstIndex.setDescription('The MISTP instance, to which the corresponding vlan is mapped. If this value of this mib object is 0, the corresponding vlan is not configured to be mapped to any MISTP instance and all the ports under this VLAN remain in blocking state.')
stpxVlanMISTPInstMapEditTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 4), )
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditTable.setStatus('current')
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditTable.setDescription('A table containing the MISTP related information for the VLANs in the Edit Buffers for a particular management domain. This table is only instantiated when when the value of stpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).')
stpxVlanMISTPInstMapEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 4, 1), )
vtpVlanEditEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapEditEntry"))
stpxVlanMISTPInstMapEditEntry.setIndexNames(*vtpVlanEditEntry.getIndexNames())
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditEntry.setStatus('current')
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditEntry.setDescription('Information about one VLAN mapping to one instance in the Edit Buffer for a particular management domain.')
stpxVlanMISTPInstMapEditInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditInstIndex.setStatus('current')
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditInstIndex.setDescription('The MISTP instance, to which the corresponding vlan would be mapped. The value of this mib object is from 0 to the value of stpxMISTPInstanceNumber. If setting the value of this object to 0, the corresponding vlan will not be mapped to a MISTP instance and all the ports under this VLAN will be moved into the blocking state.')
stpxPreferredMISTPInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 5), )
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesTable.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesTable.setDescription('The table containing indications of which MISTP instances are preferred on which trunk ports. The preferred MISTP instances on a trunk port have a lower Path Cost value compared with the MISTP instances on the trunk not in the preferred list. This table is only instantiated when the value of stpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).')
stpxPreferredMISTPInstancesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 5, 1), )
vlanTrunkPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMISTPInstancesEntry"))
stpxPreferredMISTPInstancesEntry.setIndexNames(*vlanTrunkPortEntry.getIndexNames())
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesEntry.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesEntry.setDescription('An entry indicating which MISTP instances are preferred on a specific trunk port.')
stpxPreferredMISTPInstancesMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesMap.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesMap.setDescription("A string of octets containing one bit per MISTP instances in the management domain on this trunk port. The first octet corresponds to MISTP instances with InstIndex values of 1 through 8; the second octet to MISTP instances 9 through 16; etc. The most significant bit of each octet corresponds to the lowest value instanceIndex in that octet. The number of bits for this mib object will be determined by the value of stpxMISTPInstanceNumber. For each instance, if it is preferred on this trunk port, then the bit corresponding to that instance is set to '1'. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single instance on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
stpxLoopGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1), )
if mibBuilder.loadTexts: stpxLoopGuardConfigTable.setStatus('current')
if mibBuilder.loadTexts: stpxLoopGuardConfigTable.setDescription('A table containing a list of the bridge ports for which Spanning Tree LoopGuard capability can be configured.')
stpxLoopGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardConfigPortIndex"))
if mibBuilder.loadTexts: stpxLoopGuardConfigEntry.setStatus('current')
if mibBuilder.loadTexts: stpxLoopGuardConfigEntry.setDescription('A bridge port for which Spanning Tree LoopGuard capability can be configured.')
stpxLoopGuardConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxLoopGuardConfigPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxLoopGuardConfigPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxLoopGuardConfigPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxLoopGuardConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLoopGuardConfigEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: stpxLoopGuardConfigEnabled.setDescription('An indication of whether the LoopGuard capability is enabled on this port or not. This configuration will be applied to all the Spanning Tree instances in which this port exists. In order to support additional Loop Guard config mode (default) as defined in stpxLoopGuardConfigMode other than enable (true(1)) or disable (false(2)) as defined in this object, stpxLoopGuardConfigMode object needs to be used. When the stpxLoopGuardConfigMode object has the value of enable(1), the value of stpxLoopGuardConfigEnabled for the same instance will be true(1). When the stpxLoopGuardConfigMode object has the value of disable(2), the value of stpxLoopGuardConfigEnabled for the same instance will be false(2). When the stpxLoopGuardConfigMode object has the value of default(3), the value of stpxLoopGuardConfigEnabled for the same instance will depend on the object value of stpxLoopGuardGlobalDefaultMode.')
stpxLoopGuardConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLoopGuardConfigMode.setStatus('current')
if mibBuilder.loadTexts: stpxLoopGuardConfigMode.setDescription('Indicates the mode of Loop Guard Feature on this port. This configuration will be applied to all the Spanning Tree instances in which this port exists. enable -- the Loop Guard feature is enabled on this port. disable -- the Loop Guard feature is disabled on this port. default -- whether the Loop Guard feature is enabled or not on this port depends on the object value of stpxLoopGuardGlobalDefaultMode.')
stpxLoopInconsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2), )
if mibBuilder.loadTexts: stpxLoopInconsistencyTable.setStatus('current')
if mibBuilder.loadTexts: stpxLoopInconsistencyTable.setDescription('A table containing a list of the bridge ports for which a particular Spanning Tree instance has been found to have a loop-inconsistency. The agent creates a new entry in this table whenever it detects a new loop-inconsistency, and deletes entries when/soon after the inconsistency is no longer present.')
stpxLoopInconsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyPortIndex"))
if mibBuilder.loadTexts: stpxLoopInconsistencyEntry.setStatus('current')
if mibBuilder.loadTexts: stpxLoopInconsistencyEntry.setDescription('A Spanning Tree instance on a particular port for which a Spanning Tree loop-inconsistency is currently in effect.')
stpxLoopInconsistencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: stpxLoopInconsistencyIndex.setStatus('current')
if mibBuilder.loadTexts: stpxLoopInconsistencyIndex.setDescription('The Spanning Tree instance id, such as the VLAN id of the VLAN if the object value of stpxSpanningTreeType is pvstPlus(1) or rapidPvstPlus(5).')
stpxLoopInconsistencyPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxLoopInconsistencyPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxLoopInconsistencyPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxLoopInconsistencyPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxLoopInconsistencyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxLoopInconsistencyState.setStatus('current')
if mibBuilder.loadTexts: stpxLoopInconsistencyState.setDescription('Indicates whether the port on a particular Spanning Tree instance is currently in loop-inconsistent state or not.')
stpxLoopGuardGlobalDefaultMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLoopGuardGlobalDefaultMode.setStatus('current')
if mibBuilder.loadTexts: stpxLoopGuardGlobalDefaultMode.setDescription('Indicates the global default config mode of LoopGuard feature on the device.')
stpxFastStartBpduGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartBpduGuardEnable.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartBpduGuardEnable.setDescription('Indicates the global default mode of the Bpdu Guard feature on the device. On platforms that does not support per port Bpdu Guard configuration as indicated by the object stpxFastStartPortBpduGuardMode, if the value of this object is set to true(1), and the Fast Start Feature is operationally enabled on a port, then that port will be immediately disabled when the system receives a BPDU from that port.')
stpxFastStartBpduFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartBpduFilterEnable.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartBpduFilterEnable.setDescription('Indicates the global default mode of the Bpdu Filter feature on the device. On platforms that does not support per port Bpdu Filter configuration as indicated by the object stpxFastStartPortBpduFilterMode, if the value of this object is set to true(1), and the Fast Start Feature is operationally enabled on a port, then no BPDUs will be transmitted on this port.')
stpxFastStartPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3), )
if mibBuilder.loadTexts: stpxFastStartPortTable.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartPortTable.setDescription('A table containing a list of the bridge ports for which Spanning Tree Port Fast Start can be configured.')
stpxFastStartPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortIndex"))
if mibBuilder.loadTexts: stpxFastStartPortEntry.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartPortEntry.setDescription('A bridge port for which Spanning Tree Port Fast Start can be configured.')
stpxFastStartPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxFastStartPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxFastStartPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxFastStartPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortEnable.setStatus('deprecated')
if mibBuilder.loadTexts: stpxFastStartPortEnable.setDescription('Indicates whether the port is operating in spantree fast start mode. A port with fast start enabled is immediately put in spanning tree forwarding state when that port is detected by the Spanning Tree, rather than starting in blocking state which is the normal operation. In order to support additional Fast Start enable mode (enableForTrunk and default) as defined in stpxFastStartPortMode other than enable (true(1)) or disable (false(2)) as defined in this object, stpxFastStartPortMode object needs to be used. When the stpxFastStartPortMode has the value of enable(1) or enableForTrunk(3), the value of stpxFastStartPortEnable for the same instance will be true(1). When the stpxFastStartPortMode has the value of disable(2), the value of stpxFastStartPortEnable for the same instance will be false(2). When the stpxFastStartPortMode has the value of default(4), the value of stpxFastStartPortEnable for the same instance depends on the object value of stpxFastStartGlobalDefaultMode.')
stpxFastStartPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableForTrunk", 3), ("default", 4), ("network", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortMode.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartPortMode.setDescription('Indicates the mode of Fast Start Feature on the port. A port with fast start enabled is immediately put in spanning tree forwarding state when the port is detected by the Spanning Tree, rather than starting in blocking state which is the normal operation. enable -- the fast start feature is enabled on this port but will only take effect when the object value of its vlanTrunkPortDynamicStatus as specified in CISCO-VTP-MIB is notTrunking(2). disable -- the fast start feature is disabled on this port. enableForTrunk -- the fast start feature is enabled on this port and will take effect regardless of the object value of its vlanTrunkPortDynamicStatus. default -- whether the fast start feature is enabled or not on this port depends on the object value of stpxFastStartGlobalDefaultMode. network -- the fast start network mode is enabled on this port.')
stpxFastStartPortBpduGuardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortBpduGuardMode.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartPortBpduGuardMode.setDescription('Indicates the mode of Bpdu Guard Feature on the port. A port with Bpdu Guard enabled is immediately disabled when the system receives a BPDU from that port. enable -- the Bpdu Guard feature is enabled on this port. disable -- the Bpdu Guard feature is disabled on this port. default -- whether the Bpdu Guard feature is enabled or not on this port depends on the object value of stpxFastStartBpduGuardEnable. If the value of stpxFastStartBpduGuardEnable is true(1) and Fast Start feature is also enabled operationally on this port, then this port is immediately disabled when the system receives a BPDU from this port.')
stpxFastStartPortBpduFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortBpduFilterMode.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartPortBpduFilterMode.setDescription('Indicates the mode of Bpdu Filter Feature on the port. The system will not transmit BPDUs on a port with Bpdu Filter feature enabled. enable -- the Bpdu Filter feature is enabled on this port. disable -- the Bpdu Filter feature is disabled on this port. default -- whether the Bpdu Filter feature is enabled or not on this port depends on the object value of stpxFastStartBpduFilterEnable. If the value of stpxFastStartBpduFilterEnable is true(1) and Fast Start feature is also enabled operationally on this port, then no BPDUs will be transmitted on this port.')
stpxFastStartGlobalDefaultMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartGlobalDefaultMode.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartGlobalDefaultMode.setDescription('Indicates the global default mode of the Fast Start feature on the device.')
stpxFastStartOperModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5), )
if mibBuilder.loadTexts: stpxFastStartOperModeTable.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartOperModeTable.setDescription('A table containing a list of the bridge ports for a particular Spanning Tree Instance.')
stpxFastStartOperModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeInstIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModePortIndex"))
if mibBuilder.loadTexts: stpxFastStartOperModeEntry.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartOperModeEntry.setDescription('An entry with port fast start oper mode information on a bridge port for a particular Spanning Tree Instance.')
stpxFastStartOperModeInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: stpxFastStartOperModeInstIndex.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartOperModeInstIndex.setDescription('The Spanning Tree instance id, such as the VLAN id of the VLAN if the object value of stpxSpanningTreeType is pvstPlus(1).')
stpxFastStartOperModePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxFastStartOperModePortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxFastStartOperModePortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartOperModePortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxFastStartOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxFastStartOperMode.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartOperMode.setDescription('Indicates the fast start operational status of the port on a particular Spanning Tree Instance.')
stpxBpduSkewingDetectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxBpduSkewingDetectionEnable.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingDetectionEnable.setDescription('Indicates whether BPDU skewing detection feature is enabled or not on the system. If this object has the value of true(1), then the system will detect whether BPDUs received by any port on any Spanning Tree instance are processed at an interval longer than the object value of dot1dStpHelloTime in the BIRDGE-MIB of the Spanning Tree instance.')
stpxBpduSkewingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2), )
if mibBuilder.loadTexts: stpxBpduSkewingTable.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingTable.setDescription('A table containing a list of the bridge ports for which a particular Spanning Tree instance has been detected to have BPDU skewing occurred since the object value of stpxBpduSkewingDetectionEnable was last changed to true(1). The agent creates a new entry in this table whenever a port in a particular Spanning Tree instance is detected to be BPDU skewed since the object value of stpxBpduSkewingDetectionEnable object is changed to true(1). The agent deletes all the entries in this table when the object value of stpxBpduSkewingDetectionEnable is changed to false(2) or the object value of stpxSpanningTreeType is changed.')
stpxBpduSkewingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingInstanceIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingPortIndex"))
if mibBuilder.loadTexts: stpxBpduSkewingEntry.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingEntry.setDescription('A Spanning Tree instance on a particular port for which BPDU skewing has been detected.')
stpxBpduSkewingInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: stpxBpduSkewingInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingInstanceIndex.setDescription('The Spanning Tree instance id, such as the VLAN id of the VLAN if the object value of stpxSpanningTreeType is pvstPlus(1).')
stpxBpduSkewingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxBpduSkewingPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxBpduSkewingPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxBpduSkewingLastSkewDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBpduSkewingLastSkewDuration.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingLastSkewDuration.setDescription('Indicates the skew duration in milliseconds of the last BPDU skewing detected.')
stpxBpduSkewingWorstSkewDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBpduSkewingWorstSkewDuration.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingWorstSkewDuration.setDescription('Indicates the skew duration in milliseconds of the worst BPDU skewing detected.')
stpxBpduSkewingWorstSkewTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBpduSkewingWorstSkewTime.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingWorstSkewTime.setDescription('Indicates the value of sysUpTime when the worst BPDU skewing was detected.')
stpxMSTMaxInstanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTMaxInstanceNumber.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTMaxInstanceNumber.setDescription('The maximum MST (Multiple Spanning Tree) instance id, that can be supported by the device for Cisco proprietary implementation of the MST Protocol. This object is deprecated and replaced by stpxSMSTMaxInstanceID.')
stpxMSTRegionName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTRegionName.setStatus('current')
if mibBuilder.loadTexts: stpxMSTRegionName.setDescription('The operational MST region name.')
stpxMSTRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTRegionRevision.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTRegionRevision.setDescription('The operational MST region version. This object is deprecated and replaced by stpxSMSTRegionRevision.')
stpxMSTInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4), )
if mibBuilder.loadTexts: stpxMSTInstanceTable.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceTable.setDescription('This table contains MST instance information with one entry for an MST instance within the range of 0 to the object value of stpxMSTMaxInstanceNumber. This table is deprecated and replaced by stpxSMSTInstanceTable.')
stpxMSTInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceIndex"))
if mibBuilder.loadTexts: stpxMSTInstanceEntry.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEntry.setDescription('A conceptual row containing the MST instance information.')
stpxMSTInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: stpxMSTInstanceIndex.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceIndex.setDescription('An integer that uniquely identifies an MST instance within the range of 0 to the object value of stpxMSTMaxInstanceNumber. This object is deprecated and replaced by stpxSMSTInstanceIndex.')
stpxMSTInstanceVlansMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. This object is deprecated and replaced by stpxSMSTInstanceVlansMapped1k2k.")
stpxMSTInstanceVlansMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped2k.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. This object is deprecated and replaced by stpxSMSTInstanceVlansMapped1k2k.")
stpxMSTInstanceVlansMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped3k.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. This object is deprecated and replaced by stpxSMSTInstanceVlansMapped3k4k.")
stpxMSTInstanceVlansMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped4k.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. This object is deprecated and replaced by stpxSMSTInstanceVlansMapped3k4k.")
stpxMSTInstanceRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceRemainingHopCount.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceRemainingHopCount.setDescription('The remaining hop count for this MST instance. This object will take on value of 40 if the object value of stpxSMSTInstanceRemainingHopCount is greater than 40. This object is only instantiated when the object value of stpxSpanningTreeType is mst(4). This object is deprecated and replaced by stpxSMSTInstanceRemainingHopCount.')
stpxMSTRegionEditBufferStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("released", 1), ("acquiredBySnmp", 2), ("acquiredByNonSnmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTRegionEditBufferStatus.setStatus('current')
if mibBuilder.loadTexts: stpxMSTRegionEditBufferStatus.setDescription('Indicates the current ownership status of the unique Region Config Edit Buffer. released -- the Edit Buffer can be acquired by any of the SNMP management stations. acquiredBySnmp -- the Edit Buffer is acquired by any of the SNMP management stations. acquiredByNonSnmp -- the Edit Buffer is acquired by the non-SNMP users managing the device.')
stpxMSTRegionEditBufferOperation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("acquire", 2), ("releaseWithForce", 3), ("commit", 4), ("rollBack", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTRegionEditBufferOperation.setStatus('current')
if mibBuilder.loadTexts: stpxMSTRegionEditBufferOperation.setDescription('Indicates the operation that is performed on the Region Config Edit Buffer. other -- none of the following operations. acquire -- acquire the Edit Buffer. This operation can only be performed when the object stpxMSTRegionEditBufferStatus has the value of released(1). After the successful operation of this action, the stpxMSTRegionEditBufferStatus will be changed to acquiredBySnmp(2). releaseWithForce -- release the Edit Buffer acquired by non-SNMP users with force and discard the changes in the Edit Buffer. This operation can only be performed when the object stpxMSTRegionEditBufferStatus has the value of acquiredByNonSnmp(2). commit -- commit the changes in the Edit Buffer and release the Edit Buffer. The successful operation of this action will make the changes in the Edit Buffer effective on the device. This operation can only be performed when the object stpxMSTRegionEditBufferStatus has the value of acquiredBySnmp(3). rollBack -- discard the changes in the Edit Buffer and release the Edit Buffer. This operation can only be performed when the object stpxMSTRegionEditBufferStatus has the value of acquiredBySnmp(3). This object always returns other(1) when it is read.')
stpxMSTRegionEditName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTRegionEditName.setStatus('current')
if mibBuilder.loadTexts: stpxMSTRegionEditName.setDescription('The MST region name in the Edit Buffer. This object is only instantiated when the stpxMSTRegionEditBufferStatus has the value of acquiredBySnmp(2).')
stpxMSTRegionEditRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTRegionEditRevision.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTRegionEditRevision.setDescription('The MST region version in the Edit Buffer. This object is only instantiated when the stpxMSTRegionEditBufferStatus has the value of acquiredBySnmp(2). This object is deprecated and replaced by stpxSMSTRegionEditRevision.')
stpxMSTInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9), )
if mibBuilder.loadTexts: stpxMSTInstanceEditTable.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEditTable.setDescription('This table contains MST instance information in the Edit Buffer with one entry for each MST instance numbered from 0 to stpxMSTMaxInstanceNumber. This table is only instantiated when the stpxMSTRegionEditBufferStatus has the value of acquiredBySnmp(2). This table is deprecated and replaced by stpxSMSTInstanceEditTable.')
stpxMSTInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditIndex"))
if mibBuilder.loadTexts: stpxMSTInstanceEditEntry.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEditEntry.setDescription('A conceptual row containing MST instance information in the Edit Buffer.')
stpxMSTInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: stpxMSTInstanceEditIndex.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEditIndex.setDescription('An integer that uniquely identifies an MST instance from 0 to the object value of stpxMSTMaxInstanceNumber. The instances of this table entry with stpxMSTInstanceEditIndex of zero can not be modified. This object is deprecated and replaced by stpxSMSTInstanceEditIndex.')
stpxMSTInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. Each VLAN can only be mapped to one unique MST instance in the range from 1 to stpxMSTMaxInstanceNumber. If the bit corresponding to a VLAN is changed from '1' to '0', then that VLAN will be automatically mapped to MST instance 0 by the device. This object is deprecated and replaced by stpxSMSTInstanceEditVlansMap1k2k.")
stpxMSTInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap2k.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. Each VLAN can only be mapped to one unique MST instance in the range from 1 to stpxMSTMaxInstanceNumber. If the bit corresponding to a VLAN is changed from '1' to '0', then that VLAN will be automatically mapped to MST instance 0 by the device. This object is deprecated and replaced by stpxSMSTInstanceEditVlansMap1k2k.")
stpxMSTInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap3k.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. Each VLAN can only be mapped to one unique MST instance in the range from 1 to stpxMSTMaxInstanceNumber. If the bit corresponding to a VLAN is changed from '1' to '0', then that VLAN will be automatically mapped to MST instance 0 by the device. This object is deprecated and replaced by stpxSMSTInstanceEditVlansMap3k4k.")
stpxMSTInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap4k.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. Each VLAN can only be mapped to one unique MST instance in the range from 1 to stpxMSTMaxInstanceNumber. If the bit corresponding to a VLAN is changed from '1' to '0', then that VLAN will be automatically mapped to MST instance 0 by the device. This object is deprecated and replaced by stpxSMSTInstanceEditVlansMap3k4k.")
stpxPreferredMSTInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 10), )
if mibBuilder.loadTexts: stpxPreferredMSTInstancesTable.setStatus('deprecated')
if mibBuilder.loadTexts: stpxPreferredMSTInstancesTable.setDescription('The table containing indications of which MST instances are preferred on which trunk ports. The preferred MST instances on a trunk port have a lower Path Cost value compared with the MST instances on the trunk not in the preferred list.')
stpxPreferredMSTInstancesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 10, 1), )
vlanTrunkPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesEntry"))
stpxPreferredMSTInstancesEntry.setIndexNames(*vlanTrunkPortEntry.getIndexNames())
if mibBuilder.loadTexts: stpxPreferredMSTInstancesEntry.setStatus('deprecated')
if mibBuilder.loadTexts: stpxPreferredMSTInstancesEntry.setDescription('An entry indicating which MST instances are preferred on a specific trunk port.')
stpxPreferredMSTInstancesMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredMSTInstancesMap.setStatus('deprecated')
if mibBuilder.loadTexts: stpxPreferredMSTInstancesMap.setDescription("A string of octets containing one bit per MST instances on this trunk port. The first octet corresponds to MST instances of 0 through 7; the second octet to MST instances 8 through 15; etc. The most significant bit of each octet corresponds to the lowest MST instance value in that octet. The number of bits for this mib object will be determined by the value of stpxMSTMaxInstanceNumber. For each instance, if it is preferred on this trunk port, then the bit corresponding to that instance is set to '1'.")
stpxMSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11), )
if mibBuilder.loadTexts: stpxMSTPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortTable.setDescription('A table containing port information for the MST Protocol on all the bridge ports existing on the system.')
stpxMSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortIndex"))
if mibBuilder.loadTexts: stpxMSTPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortEntry.setDescription('An entry with port information for the MST Protocol on a bridge port.')
stpxMSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxMSTPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxMSTPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxMSTPortAdminLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTPortAdminLinkType.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortAdminLinkType.setDescription("Indicates the administrative link type configuration of a bridge port for the MST protocol. pointToPoint -- the port is administratively configured to be connected to a point-to-point link. shared -- the port is administratively configured to be connected to a shared medium. auto -- the administrative configuration of the port's link type depends on link duplex of the port. If the port link is full-duplex, the administrative link type configuration on this port will be taken as pointTopoint(1). If the port link is half-duplex, the administrative link type configuration on this port will be taken as shared(2). This configuration of this object only takes effect when the stpxSpanningTreeType is mst(4) or rapidPvstPlus(5). stpxMSTPortAdminLinkType is deprecated and replaced with stpxRSTPPortAdminLinkType.")
stpxMSTPortOperLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTPortOperLinkType.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortOperLinkType.setDescription('Indicates the operational link type of a bridge port for the MST protocol. pointToPoint -- the port is operationally connected to a point-to-point link. shared -- the port is operationally connected to a shared medium. other -- none of the above. This object is only instantiated when the object value of stpxSpanningTreeType is mst(4). stpxMSTPortOperLinkType is deprecated and replaced with stpxRSTPPortOperLinkType.')
stpxMSTPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTPortProtocolMigration.setReference('IEEE 802.1w clause 14.8.2.4, 17.26.')
if mibBuilder.loadTexts: stpxMSTPortProtocolMigration.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortProtocolMigration.setDescription('The protocol migration control on this port. When the object value of stpxSpanningTreeType is mst(4) or rapidPvstPlus(5), setting true(1) to this object forces the device to try using version 2 BPDUs on this port. When the object value of stpxSpanningTreeType is neither mst(4) nor rapidPvstPlus(5), setting true(1) to this object has no effect. Setting false(2) to this object has no effect. This object always returns false(2) when read. stpxMSTPortProtocolMigration is deprecated and replaced with stpxRSTPPortProtocolMigration.')
stpxMSTPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 5), Bits().clone(namedValues=NamedValues(("edge", 0), ("boundary", 1), ("pvst", 2), ("stp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTPortStatus.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortStatus.setDescription('Indicates the operational status of the port for the MST protocol. edge -- this port is an edge port for the MST region. boundary -- this port is a boundary port for the MST region. pvst -- this port is connected to a PVST/PVST+ bridge. stp -- this port is connected to a Single Spanning Tree bridge. This object is only instantiated when the object value of stpxSpanningTreeType is mst(4). This object is deprecated and replaced by stpxSMSTPortStatus.')
stpxMSTPortRoleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12), )
if mibBuilder.loadTexts: stpxMSTPortRoleTable.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortRoleTable.setDescription('A table containing a list of the bridge ports for a particular MST instance. This table is only instantiated when the stpxSpanningTreeType is mst(4). This table is deprecated and replaced with stpxRSTPPortRoleTable.')
stpxMSTPortRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortRoleInstanceIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortRolePortIndex"))
if mibBuilder.loadTexts: stpxMSTPortRoleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortRoleEntry.setDescription('An entry containing the port role information for the MST protocol on a port for a particular MST instance existing on the system.')
stpxMSTPortRoleInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: stpxMSTPortRoleInstanceIndex.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortRoleInstanceIndex.setDescription('The MST instance id within the range of 0 to stpxMSTMaxInstanceNumber.')
stpxMSTPortRolePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxMSTPortRolePortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxMSTPortRolePortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortRolePortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxMSTPortRoleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backUp", 5), ("boundary", 6), ("master", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTPortRoleValue.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTPortRoleValue.setDescription('Indicates the port role on a particular MST instance for the MST protocol. disabled -- this port has no role on this MST instance. root -- this port has the role of root port on this MST instance. designated -- this port has the role of designated port on this MST instance. alternate -- this port has the role of alternate port on this MST instance. backUp -- this port has the role of backup port on this MST instance. boundary -- this port has the role of boundary port on this MST instance. master -- this port has the role of master port on this MST instance.')
stpxMSTMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTMaxHopCount.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTMaxHopCount.setDescription('The maximum number of hops for the MST region. This object will take on value of 40 if the object value of stpxSMSTMaxHopCount is greater than 40. This object is deprecated and replaced by stpxSMSTMaxHopCount.')
stpxRSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1), )
if mibBuilder.loadTexts: stpxRSTPPortTable.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortTable.setDescription('A table containing port information for the RSTP Protocol on all the bridge ports existing in the system.')
stpxRSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortIndex"))
if mibBuilder.loadTexts: stpxRSTPPortEntry.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortEntry.setDescription('An entry with port information for the RSTP Protocol on a bridge port.')
stpxRSTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxRSTPPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxRSTPPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxRSTPPortAdminLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRSTPPortAdminLinkType.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortAdminLinkType.setDescription("Indicates the administrative link type configuration of a bridge port for the RSTP protocol. pointToPoint -- the port is administratively configured to be connected to a point-to-point link. shared -- the port is administratively configured to be connected to a shared medium. auto -- the administrative configuration of the port's link type depends on link duplex of the port. If the port link is full-duplex, the administrative link type configuration on this port will be taken as pointTopoint(1). If the port link is half-duplex, the administrative link type configuration on this port will be taken as shared(2). This configuration of this object only takes effect when the stpxSpanningTreeType is mst(4) or rapidPvstPlus(5).")
stpxRSTPPortOperLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRSTPPortOperLinkType.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortOperLinkType.setDescription('Indicates the operational link type of a bridge port for the RSTP protocol. pointToPoint -- the port is operationally connected to a point-to-point link. shared -- the port is operationally connected to a shared medium. other -- none of the above. This object is only instantiated when the object value of stpxSpanningTreeType is mst(4) or rapidPvstPlus(5).')
stpxRSTPPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRSTPPortProtocolMigration.setReference('IEEE 802.1w clause 14.8.2.4, 17.26.')
if mibBuilder.loadTexts: stpxRSTPPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortProtocolMigration.setDescription('The protocol migration control on this port. When the object value of stpxSpanningTreeType is mst(4) or rapidPvstPlus(5), setting true(1) to this object forces the device to try using version 2 BPDUs on this port. When the object value of stpxSpanningTreeType is neither mst(4) nor rapidPvstPlus(5), setting true(1) to this object has no effect. Setting false(2) to this object has no effect. This object always returns false(2) when read.')
stpxRSTPPortRoleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2), )
if mibBuilder.loadTexts: stpxRSTPPortRoleTable.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortRoleTable.setDescription('A table containing a list of the bridge ports for a particular Spanning Tree instance. This table is only instantiated when the stpxSpanningTreeType is mst(4) or rapidPvstPlus(5).')
stpxRSTPPortRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortRoleInstanceIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortRolePortIndex"))
if mibBuilder.loadTexts: stpxRSTPPortRoleEntry.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortRoleEntry.setDescription('An entry containing the port role information for the RSTP protocol on a port for a particular Spanning Tree instance.')
stpxRSTPPortRoleInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: stpxRSTPPortRoleInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortRoleInstanceIndex.setDescription('The Spanning Tree instance id, it can either be a VLAN number if the stpxSpanningTreeType is rapidPvstPlus(5) or an MST instance id if the stpxSpanningTreeType is mst(4).')
stpxRSTPPortRolePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxRSTPPortRolePortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxRSTPPortRolePortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortRolePortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxRSTPPortRoleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backUp", 5), ("boundary", 6), ("master", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRSTPPortRoleValue.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPPortRoleValue.setDescription("Indicates the port role on a particular Spanning Tree instance for the RSTP protocol. disabled -- this port has no role in this Spanning Tree instance. root -- this port has the role of root port in this Spanning Tree instance. designated -- this port has the role of designated port in this Spanning Tree instance. alternate -- this port has the role of alternate port in this Spanning Tree instance. backUp -- this port has the role of backup port in this Spanning Tree instance. boundary -- this port has the role of boundary port in this Spanning Tree instance. master -- this port has the role of master port in this Spanning Tree instance. This object could have a value of 'boundary' or 'master' only when the object value of stpxSpanningTreeType is mst(4).")
stpxRSTPTransmitHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRSTPTransmitHoldCount.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPTransmitHoldCount.setDescription('The Transmit Hold Count.')
stpxRPVSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1), )
if mibBuilder.loadTexts: stpxRPVSTPortTable.setStatus('current')
if mibBuilder.loadTexts: stpxRPVSTPortTable.setDescription('A table containing a list of the bridge ports for a particular Spanning Tree Instance. This table is only instantiated when the object value of stpxSpanningTreeType is rapidPvstPlus(5).')
stpxRPVSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTPortVlanIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTPortIndex"))
if mibBuilder.loadTexts: stpxRPVSTPortEntry.setStatus('current')
if mibBuilder.loadTexts: stpxRPVSTPortEntry.setDescription('An entry with port status information on a bridge port for a particular Spanning Tree Instance.')
stpxRPVSTPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: stpxRPVSTPortVlanIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRPVSTPortVlanIndex.setDescription('The VLAN id of the VLAN.')
stpxRPVSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxRPVSTPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxRPVSTPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxRPVSTPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxRPVSTPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1, 3), Bits().clone(namedValues=NamedValues(("edge", 0), ("unused1", 1), ("unused2", 2), ("stp", 3), ("dispute", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRPVSTPortStatus.setStatus('current')
if mibBuilder.loadTexts: stpxRPVSTPortStatus.setDescription('Indicates the operational status of the port for the Rapid PVST+ protocol. edge -- this port is an edge port for the RST region. unused1 -- unused bit 1. unused2 -- unused bit 2. stp -- this port is connected to a Single Spanning Tree/PVST+ bridge. dispute -- this port, as a designated port, received an inferior BPDU with a designated role and the learning bit being set.')
stpxSMSTMaxInstances = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTMaxInstances.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTMaxInstances.setDescription('The maximum number of MST instances that can be supported by the device for IEEE MST.')
stpxSMSTMaxInstanceID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTMaxInstanceID.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTMaxInstanceID.setDescription('The maximum MST instance ID that can be supported by the device for IEEE MST.')
stpxSMSTRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTRegionRevision.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTRegionRevision.setDescription('The operational region version for IEEE MST.')
stpxSMSTRegionEditRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTRegionEditRevision.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTRegionEditRevision.setDescription('The MST region version in the Edit Buffer for IEEE MST. This object is only instantiated when the stpxMSTRegionEditBufferStatus has the value of acquiredBySnmp(2).')
stpxSMSTInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5), )
if mibBuilder.loadTexts: stpxSMSTInstanceTable.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceTable.setDescription('This table contains MST instance information for IEEE MST.')
stpxSMSTInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceIndex"))
if mibBuilder.loadTexts: stpxSMSTInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEntry.setDescription('A conceptual row containing the MST instance information for IEEE MST.')
stpxSMSTInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: stpxSMSTInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceIndex.setDescription('The MST instance ID, the value of which is in the range from 0 to stpxSMSTMaxInstanceID.')
stpxSMSTInstanceVlansMapped1k2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceVlansMapped1k2k.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceVlansMapped1k2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 0 through 2047. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. If the length of this string is less than 256 octets, any 'missing' octets are assumed to contain the value of zero.")
stpxSMSTInstanceVlansMapped3k4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceVlansMapped3k4k.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceVlansMapped3k4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 4095. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. If the length of this string is less than 256 octets, any 'missing' octets are assumed to contain the value of zero.")
stpxSMSTInstanceRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceRemainingHopCount.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceRemainingHopCount.setDescription('The remaining hop count for this MST instance. If this object value is not applicable on an MST instance, then the value retrieved for this object for that MST instance will be -1. This object is only instantiated when the object value of stpxSpanningTreeType is mst(4).')
stpxSMSTInstanceCISTRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceCISTRegionalRoot.setReference('IEEE 802.1S-2002: Section 13.9.')
if mibBuilder.loadTexts: stpxSMSTInstanceCISTRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceCISTRegionalRoot.setDescription('Indicates the Bridge Identifier (refer to BridgeId defined in BRIDGE-MIB) of CIST (Common and Internal Spanning Tree) Regional Root for the MST region. This object is only instantiated when the object value of stpxSpanningTreeType is mst(4) and stpxSMSTInstanceIndex is 0.')
stpxSMSTInstanceCISTIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceCISTIntRootCost.setReference('IEEE 802.1S-2002: Section 13.9.')
if mibBuilder.loadTexts: stpxSMSTInstanceCISTIntRootCost.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceCISTIntRootCost.setDescription('Indicates the CIST Internal Root Path Cost, i.e., the path cost to the CIST Regional Root as specified by the corresponding stpxSMSTInstanceCISTRegionalRoot for the MST region. This object is only instantiated when the object value of stpxSpanningTreeType is mst(4) and stpxSMSTInstanceIndex is 0.')
stpxSMSTInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6), )
if mibBuilder.loadTexts: stpxSMSTInstanceEditTable.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEditTable.setDescription('This table contains MST instance information in the Edit Buffer. This table is only instantiated when the object value of stpxMSTRegionEditBufferStatus has the value of acquiredBySnmp(2).')
stpxSMSTInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditIndex"))
if mibBuilder.loadTexts: stpxSMSTInstanceEditEntry.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEditEntry.setDescription('A conceptual row containing MST instance information in the Edit Buffer. The total number of entries in this table has to be less than or equal to the object value of stpxSMSTMaxInstances.')
stpxSMSTInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: stpxSMSTInstanceEditIndex.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEditIndex.setDescription('The MST instance ID, the value of which is in the range from 0 to stpxSMSTMaxInstanceID. The instances of this table entry with stpxSMSTInstanceEditIndex of zero is automatically created by the device and can not modified.')
stpxSMSTInstanceEditVlansMap1k2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxSMSTInstanceEditVlansMap1k2k.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEditVlansMap1k2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 0 through 2047. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. Each VLAN can only be mapped to one unique MST instance with the range from 0 to stpxSMSTMaxInstanceNumber. If the bit corresponding to a VLAN is changed from '1' to '0', then that VLAN will be automatically mapped to SMST instance 0 by the device. If the bit corresponding to a VLAN is changed from '0' to '1', then that VLAN will be automatically removed from the MST instance this VLAN was previously mapped to. If the length of this string is less than 256 octets, any 'missing' octets are assumed to contain the value of zero.")
stpxSMSTInstanceEditVlansMap3k4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxSMSTInstanceEditVlansMap3k4k.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEditVlansMap3k4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 4095. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if it is mapped to this MST instance, then the bit corresponding to that VLAN is set to '1'. Each VLAN can only be mapped to one unique MST instance with the range from 0 to stpxSMSTMaxInstanceNumber. If the bit corresponding to a VLAN is changed from '1' to '0', then that VLAN will be automatically mapped to SMST instance 0 by the device. If the bit corresponding to a VLAN is changed from '0' to '1', then that VLAN will be automatically removed from the MST instance this VLAN was previously mapped to. If the length of this string is less than 256 octets, any 'missing' octets are assumed to contain the value of zero.")
stpxSMSTInstanceEditRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxSMSTInstanceEditRowStatus.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEditRowStatus.setDescription("This object controls the creation and deletion of a row in stpxSMSTInstanceEditTable. When creating an entry in this table, 'createAndGo' method is used and the value of this object is set to 'active'. Deactivation of an 'active' entry is not allowed. When deleting an entry in this table, 'destroy' method is used. Once a row becomes active, value in any other column within such a row may be modified. When a row is active, setting the instance of stpxSMSTInstanceEditVlansMap1k2k stpxSMSTInstanceEditVlansMap3k4k for the same MST instance both to the value of zero length can not be allowed.")
stpxSMSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7), )
if mibBuilder.loadTexts: stpxSMSTPortTable.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortTable.setDescription('A table containing port information for the MST Protocol on all the bridge ports existing on the system. This table is only instantiated when the object value of stpxSpanningTreeType is mst(4)')
stpxSMSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1), ).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortIndex"))
if mibBuilder.loadTexts: stpxSMSTPortEntry.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortEntry.setDescription('An entry with port information for the MST protocol on a bridge port.')
stpxSMSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stpxSMSTPortIndex.setReference('dot1dBasePort is defined in RFC1493.')
if mibBuilder.loadTexts: stpxSMSTPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortIndex.setDescription('The value of dot1dBasePort (i.e. dot1dBridge.1.4) for the bridge port.')
stpxSMSTPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 2), Bits().clone(namedValues=NamedValues(("edge", 0), ("boundary", 1), ("pvst", 2), ("stp", 3), ("dispute", 4), ("rstp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortStatus.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortStatus.setDescription('Indicates the operational status of the port for the MST protocol. edge -- this port is an edge port for the MST region. boundary -- this port is a boundary port for the MST region. pvst -- this port is connected to a PVST/PVST+ bridge. stp -- this port is connected to a Single Spanning Tree bridge. dispute -- this port, as a designated port, received an inferior BPDU with a designated role and the learning bit being set. rstp -- this port is connected to a RSTP bridge or an MST bridge in a different MST region.')
stpxSMSTPortAdminHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 3), Unsigned32()).setUnits('hundredth of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTPortAdminHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortAdminHelloTime.setDescription('The adminitratively configured hello time in hundredth of seconds on a port for IEEE MST. The granularity of this timer is 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds. This object value of zero means the hello time is not specifically configured on this port and object value of stpxSMSTPortConfigedHelloTime retrieved for this port will take on the value of dot1dStpBridgeHelloTime defined in BRIDGE-MIB.')
stpxSMSTPortConfigedHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 4), Unsigned32()).setUnits('hundredth of seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortConfigedHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortConfigedHelloTime.setDescription('Indicates the effective configuration of the hello time on a port.')
stpxSMSTPortOperHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('hundredth of seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortOperHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortOperHelloTime.setDescription('The operational hello time in hundredth of seconds on a port for IEEE MST. If this object value is not applicable on a port, then the value retrieved on that port will be -1.')
stpxSMSTPortAdminMSTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preStandard", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTPortAdminMSTMode.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortAdminMSTMode.setDescription('The desired MST mode of this port. preStandard -- this port is administratively configured to transmit pre-standard, i.e. pre IEEE MST, BPDUs. auto -- the BPDU transmission mode of this port is based on automatic detection of neighbor ports.')
stpxSMSTPortOperMSTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("preStandard", 2), ("standard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortOperMSTMode.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortOperMSTMode.setDescription('Indicates the current operational MST mode of this port. unknown -- the operational mode is currently unknown. preStandard -- this port is currently operating in pre-standard MSTP BPDU transmission mode. standard -- this port is currently operating in IEEE MST BPDU transmission mode.')
stpxSMSTMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTMaxHopCount.setDescription('The maximum number of hops for the IEEE MST region.')
stpxSMSTConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 9), StpxMSTConfigurationDigest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTConfigDigest.setReference('IEEE 802.1Q-2003 Section 13.7.')
if mibBuilder.loadTexts: stpxSMSTConfigDigest.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTConfigDigest.setDescription('The IEEE MST region configuration digest.')
stpxSMSTConfigPreStandardDigest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 10), StpxMSTConfigurationDigest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTConfigPreStandardDigest.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTConfigPreStandardDigest.setDescription('The pre-standard MST region configuration digest.')
stpxNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0))
stpxInconsistencyUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0, 1)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxInconsistentState"))
if mibBuilder.loadTexts: stpxInconsistencyUpdate.setStatus('current')
if mibBuilder.loadTexts: stpxInconsistencyUpdate.setDescription("A stpxPortInconsistencyUpdate notification is sent by a bridge when an instance of stpxInconsistentState is created or destroyed. That is, when an inconsistency is discovered in the VLAN's Spanning Tree for a particular port, or when such an inconsistency disappears. Note that the trap is not sent if the port transitions between different types of inconsistency. The stpxInconsistentState value indicates the type of inconsistency which now exists/no longer exists for the relevant VLAN on the relevant port.")
stpxRootInconsistencyUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0, 2)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyState"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeType"))
if mibBuilder.loadTexts: stpxRootInconsistencyUpdate.setStatus('current')
if mibBuilder.loadTexts: stpxRootInconsistencyUpdate.setDescription("A stpxRootInconsistencyUpdate notification is sent by a bridge when an instance of stpxRootInconsistencyState is created or destroyed. That is, when an root-inconsistency is discovered in the VLAN's or instance's Spanning Tree for a particular port, or when such an root-inconsistency disappears. For creation, the value of stpxRootInconsistencyState in the notification is true(1); for deletion, the value is false(2). The object value of stpxSpanningTreeType indicates which Spanning Tree protocol is running when an instance of stpxRootInconsistencyState is created or destroyed. ")
stpxLoopInconsistencyUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0, 3)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyState"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeType"))
if mibBuilder.loadTexts: stpxLoopInconsistencyUpdate.setStatus('current')
if mibBuilder.loadTexts: stpxLoopInconsistencyUpdate.setDescription("A stpxLoopInconsistencyUpdate notification is sent by a bridge when an instance of stpxLoopInconsistencyState is created or destroyed. That is, when an loop-inconsistency is discovered in the VLAN's or instance's Spanning Tree for a particular port, or when such an loop-inconsistency disappears. For creation, the value of stpxLoopInconsistencyState in the notification is true(1); for deletion, the value is false(2). The object value of stpxSpanningTreeType indicates which Spanning Tree protocol is running when an instance of stpxLoopInconsistencyState is created or destroyed.")
stpxMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 3))
stpxMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1))
stpxMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2))
stpxMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 1)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance = stpxMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 2)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance2 = stpxMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance2.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 3)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance3 = stpxMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance3.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 4)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance4 = stpxMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance4.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 5)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance5 = stpxMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance5.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 6)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance6 = stpxMIBCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance6.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 7)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance7 = stpxMIBCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance7.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 8)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance8 = stpxMIBCompliance8.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance8.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 9)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance9 = stpxMIBCompliance9.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance9.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 10)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance10 = stpxMIBCompliance10.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance10.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 11)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPathCostOperModeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance11 = stpxMIBCompliance11.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMIBCompliance11.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxMIBCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 12)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPTransmitHoldCountGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup4"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxHopCountGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPathCostOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortMSTModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTConfigDigestGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMIBCompliance12 = stpxMIBCompliance12.setStatus('current')
if mibBuilder.loadTexts: stpxMIBCompliance12.setDescription('The compliance statement for entities which implement Cisco STP Extensions MIB.')
stpxUplinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 1)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkFastEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkFastTransitions"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkStationLearningGenRate"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkStationLearningFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxUplinkGroup = stpxUplinkGroup.setStatus('current')
if mibBuilder.loadTexts: stpxUplinkGroup.setDescription('A collection of objects for managing the UplinkFast capability.')
stpxPreferredVlansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 2)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxPreferredVlansGroup = stpxPreferredVlansGroup.setStatus('current')
if mibBuilder.loadTexts: stpxPreferredVlansGroup.setDescription('A collection of objects for indicating preferred VLANs.')
stpxSstpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 3)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxInconsistentState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSstpGroup = stpxSstpGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSstpGroup.setDescription("A collection of objects to support Cisco's Shared Spanning Tree Protocol (SSTP).")
stpxNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 4)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxInconsistencyUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxNotificationsGroup = stpxNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: stpxNotificationsGroup.setDescription('The notifications which a STP extension implementation is required to implement.')
stpxBackboneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 5)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastInInferiorBPDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastInRLQRequestPDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastInRLQResponsePDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastOutRLQRequestPDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastOutRLQResponsePDUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxBackboneGroup = stpxBackboneGroup.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneGroup.setDescription('A collection of objects for managing the BackboneFast capability.')
stpxRootGuardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 6)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardConfigEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxRootGuardGroup = stpxRootGuardGroup.setStatus('current')
if mibBuilder.loadTexts: stpxRootGuardGroup.setDescription('A collection of objects to support root guard capabilities.')
stpxRootInconsistencyNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 7)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxRootInconsistencyNotificationsGroup = stpxRootInconsistencyNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: stpxRootInconsistencyNotificationsGroup.setDescription('The notifications which a STP root guard implementation is required to implement.')
stpx4kVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 8)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpx4kVlanGroup = stpx4kVlanGroup.setStatus('current')
if mibBuilder.loadTexts: stpx4kVlanGroup.setDescription('A collection of objects providing information for VLANS with VlanIndex from 1024 to 4095.')
stpxSpanningTreeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 9)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSpanningTreeGroup = stpxSpanningTreeGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSpanningTreeGroup.setDescription('An object selecting what kind of spanning tree protocol.')
stpxMISTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 10)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceNumber"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapInstIndex"), ("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapEditInstIndex"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMISTPInstancesMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMISTPGroup = stpxMISTPGroup.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPGroup.setDescription('A collection objects managing the information of MISTP feature.')
stpxLongPathCostModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 11)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreePathCostMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongStpPortPathCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxLongPathCostModeGroup = stpxLongPathCostModeGroup.setStatus('current')
if mibBuilder.loadTexts: stpxLongPathCostModeGroup.setDescription('A collection objects managing the information of spanning tree path cost in 32 bits value.')
stpxPVSTVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 12)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxPVSTVlanGroup = stpxPVSTVlanGroup.setStatus('current')
if mibBuilder.loadTexts: stpxPVSTVlanGroup.setDescription('A collection of objects managing the information of Spanning Tree PVST+ protocol VLAN configuration.')
stpxMISTPGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 13)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMISTPGroup2 = stpxMISTPGroup2.setStatus('current')
if mibBuilder.loadTexts: stpxMISTPGroup2.setDescription('A collection objects managing the information of MISTP instances to VLAN mapping with the range of VlanIndex up to 4095.')
stpxLoopGuardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 14)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardConfigEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxLoopGuardGroup = stpxLoopGuardGroup.setStatus('deprecated')
if mibBuilder.loadTexts: stpxLoopGuardGroup.setDescription('A collection of objects to support LoopGuard capabilities.')
stpxLoopInconsistencyNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 15)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxLoopInconsistencyNotificationsGroup = stpxLoopInconsistencyNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: stpxLoopInconsistencyNotificationsGroup.setDescription('The notifications which a STP LoopGuard implementation is required to implement.')
stpxFastStartGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 16)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduGuardEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduFilterEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxFastStartGroup = stpxFastStartGroup.setStatus('deprecated')
if mibBuilder.loadTexts: stpxFastStartGroup.setDescription('A collection of objects to support Spanning Tree Port Fast Start feature.')
stpxBpduSkewingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 17)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingDetectionEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingLastSkewDuration"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingWorstSkewDuration"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingWorstSkewTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxBpduSkewingGroup = stpxBpduSkewingGroup.setStatus('current')
if mibBuilder.loadTexts: stpxBpduSkewingGroup.setDescription('This is an optional group with a collection of objects to support Spanning Tree BPDU Skewing feature.')
stpxFastStartGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 18)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduGuardEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduFilterEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGlobalDefaultMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxFastStartGroup2 = stpxFastStartGroup2.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartGroup2.setDescription('An optional group with a collection of objects to support Fast Start global default mode on the device.')
stpxLoopGuardGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 19)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyState"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardConfigMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGlobalDefaultMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxLoopGuardGroup2 = stpxLoopGuardGroup2.setStatus('current')
if mibBuilder.loadTexts: stpxLoopGuardGroup2.setDescription('An optional group with a collection of objects to support Loop Guard global default mode on the device.')
stpxMSTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 20)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxInstanceNumber"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceRemainingHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortAdminLinkType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortOperLinkType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortProtocolMigration"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortRoleValue"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMSTGroup = stpxMSTGroup.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTGroup.setDescription('An optional group with a collection of objects to support Multiple Spanning Tree Protocol on the device.')
stpxPreferredMSTInstancesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 21)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxPreferredMSTInstancesGroup = stpxPreferredMSTInstancesGroup.setStatus('deprecated')
if mibBuilder.loadTexts: stpxPreferredMSTInstancesGroup.setDescription('An optional group with a collection of objects to support Preferred MST Instance Map feature for Multiple Spanning Tree Protocol on the device.')
stpxFastStartGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 22)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortBpduGuardMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortBpduFilterMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxFastStartGroup3 = stpxFastStartGroup3.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartGroup3.setDescription('An optional group with a collection of objects to support per port Bpdu Guard and Bpdu Filter mode configuration on the device.')
stpxUplinkGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 23)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkFastOperEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxUplinkGroup2 = stpxUplinkGroup2.setStatus('current')
if mibBuilder.loadTexts: stpxUplinkGroup2.setDescription('An optional group with a collection of objects to manage the UplinkFast capability.')
stpxBackboneGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 24)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastOperEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxBackboneGroup2 = stpxBackboneGroup2.setStatus('current')
if mibBuilder.loadTexts: stpxBackboneGroup2.setDescription('An optional group with a collection of objects to manage the BackboneFast capability.')
stpxMSTGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 25)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxInstanceNumber"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceRemainingHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMSTGroup2 = stpxMSTGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTGroup2.setDescription('An optional group with a collection of objects to support Multiple Spanning Tree Protocol on the device.')
stpxRSTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 26)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortAdminLinkType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortOperLinkType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortProtocolMigration"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortRoleValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxRSTPGroup = stpxRSTPGroup.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPGroup.setDescription('An optional group with a collection of objects to support Rapid Spanning Tree Protocol on the device.')
stpxRPVSTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 27)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTPortStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxRPVSTGroup = stpxRPVSTGroup.setStatus('current')
if mibBuilder.loadTexts: stpxRPVSTGroup.setDescription('An optional group with a collection of objects to support Rapid PVST+ on the device.')
stpxExtendedSysIDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 28)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDAdminEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDOperEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxExtendedSysIDGroup = stpxExtendedSysIDGroup.setStatus('current')
if mibBuilder.loadTexts: stpxExtendedSysIDGroup.setDescription('A collection of objects to manage the Extended System ID capability.')
stpxNotificationEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 29)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxNotificationEnableGroup = stpxNotificationEnableGroup.setStatus('current')
if mibBuilder.loadTexts: stpxNotificationEnableGroup.setDescription('A collection of objects providing control on the generation of Spanning Tree notifications.')
stpxFastStartOperModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 30)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxFastStartOperModeGroup = stpxFastStartOperModeGroup.setStatus('current')
if mibBuilder.loadTexts: stpxFastStartOperModeGroup.setDescription('A collection of objects providing Spanning Tree Port Fast Start Operatioanl information on a port.')
stpxMSTGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 31)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMSTGroup3 = stpxMSTGroup3.setStatus('deprecated')
if mibBuilder.loadTexts: stpxMSTGroup3.setDescription('A collection of objects providing support for Multiple Spanning Tree Protocol on the device.')
stpxSMSTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 32)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxInstances"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxInstanceID"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTRegionRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTRegionEditRevision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTGroup = stpxSMSTGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTGroup.setDescription('A collection of objects providing support for IEEE MST on the device.')
stpxSMSTInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 33)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceVlansMapped1k2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceVlansMapped3k4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceRemainingHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTInstanceGroup = stpxSMSTInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceGroup.setDescription('A collection of objects providing support for MST instance information for IEEE MST on the device.')
stpxSMSTInstanceEditGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 34)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditVlansMap1k2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditVlansMap3k4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTInstanceEditGroup = stpxSMSTInstanceEditGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceEditGroup.setDescription('A collection of objects providing support for MST instance edit information for IEEE MST on the device.')
stpxSMSTPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 35)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTPortStatusGroup = stpxSMSTPortStatusGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortStatusGroup.setDescription('A collection of objects providing support for port status information for MST Protocol on the device.')
stpxSMSTPortHelloTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 36)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortAdminHelloTime"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortConfigedHelloTime"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortOperHelloTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTPortHelloTimeGroup = stpxSMSTPortHelloTimeGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortHelloTimeGroup.setDescription('A collection of objects providing support for per port hello time information for IEEE MST on the device.')
stpxSMSTInstanceCISTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 37)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTRegionalRoot"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTIntRootCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTInstanceCISTGroup = stpxSMSTInstanceCISTGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTInstanceCISTGroup.setDescription('A collection of objects providing information about Common and Internal Spanning Tree (CIST) for IEEE MST on the device.')
stpxPathCostOperModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 38)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreePathCostOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxPathCostOperModeGroup = stpxPathCostOperModeGroup.setStatus('current')
if mibBuilder.loadTexts: stpxPathCostOperModeGroup.setDescription('A collection of objects providing information about operational spanning tree path cost mode.')
stpxRSTPTransmitHoldCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 39)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPTransmitHoldCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxRSTPTransmitHoldCountGroup = stpxRSTPTransmitHoldCountGroup.setStatus('current')
if mibBuilder.loadTexts: stpxRSTPTransmitHoldCountGroup.setDescription('A collection of objects providing information for configuration of transmit hold count for Rapid Spanning Tree Protocol.')
stpxSMSTPortMSTModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 40)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortAdminMSTMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortOperMSTMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTPortMSTModeGroup = stpxSMSTPortMSTModeGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTPortMSTModeGroup.setDescription('A collection of objects providing information for port MST mode configuration on the device.')
stpxSMSTMaxHopCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 41)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTMaxHopCountGroup = stpxSMSTMaxHopCountGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTMaxHopCountGroup.setDescription('A collection of objects providing information for configuration of IEEE MST maximum hop count.')
stpxSMSTConfigDigestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 42)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTConfigDigest"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTConfigPreStandardDigest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxSMSTConfigDigestGroup = stpxSMSTConfigDigestGroup.setStatus('current')
if mibBuilder.loadTexts: stpxSMSTConfigDigestGroup.setDescription('A collection of objects providing information for MST configuration digests on the device.')
stpxMSTGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 43)).setObjects(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stpxMSTGroup4 = stpxMSTGroup4.setStatus('current')
if mibBuilder.loadTexts: stpxMSTGroup4.setDescription('A collection of objects providing support for Multiple Spanning Tree Protocol on the device.')
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", stpxMSTPortIndex=stpxMSTPortIndex, stpxMISTPObjects=stpxMISTPObjects, stpxPreferredMSTInstancesEntry=stpxPreferredMSTInstancesEntry, ciscoStpExtensionsMIB=ciscoStpExtensionsMIB, stpxMSTInstanceEntry=stpxMSTInstanceEntry, stpxMSTPortRolePortIndex=stpxMSTPortRolePortIndex, stpxSMSTMaxInstances=stpxSMSTMaxInstances, stpxSMSTPortTable=stpxSMSTPortTable, stpxMSTGroup3=stpxMSTGroup3, stpxFastStartPortMode=stpxFastStartPortMode, stpxMSTRegionEditRevision=stpxMSTRegionEditRevision, stpxBpduSkewingEntry=stpxBpduSkewingEntry, stpxSMSTRegionEditRevision=stpxSMSTRegionEditRevision, stpxSMSTPortStatus=stpxSMSTPortStatus, stpxRSTPTransmitHoldCountGroup=stpxRSTPTransmitHoldCountGroup, stpxVlanObjects=stpxVlanObjects, stpxNotificationEnableGroup=stpxNotificationEnableGroup, stpxRSTPPortProtocolMigration=stpxRSTPPortProtocolMigration, stpxMISTPInstanceVlansMapped2k=stpxMISTPInstanceVlansMapped2k, stpxMIBCompliance9=stpxMIBCompliance9, stpxSMSTInstanceEditVlansMap3k4k=stpxSMSTInstanceEditVlansMap3k4k, stpxNotificationEnable=stpxNotificationEnable, stpxSMSTInstanceEditTable=stpxSMSTInstanceEditTable, stpxRootInconsistencyNotificationsGroup=stpxRootInconsistencyNotificationsGroup, stpxMISTPInstanceEnable=stpxMISTPInstanceEnable, stpxPreferredMSTInstancesMap=stpxPreferredMSTInstancesMap, stpxMSTInstanceTable=stpxMSTInstanceTable, stpxMSTInstanceEditVlansMap3k=stpxMSTInstanceEditVlansMap3k, stpxFastStartGroup3=stpxFastStartGroup3, stpxBpduSkewingWorstSkewTime=stpxBpduSkewingWorstSkewTime, stpxMSTPortRoleValue=stpxMSTPortRoleValue, stpxLoopInconsistencyIndex=stpxLoopInconsistencyIndex, stpxMIBCompliances=stpxMIBCompliances, stpxVlanMISTPInstMapTable=stpxVlanMISTPInstMapTable, stpxRSTPPortEntry=stpxRSTPPortEntry, stpxMIBGroups=stpxMIBGroups, stpxMIBCompliance8=stpxMIBCompliance8, stpxExtendedSysIDAdminEnabled=stpxExtendedSysIDAdminEnabled, stpxLoopInconsistencyUpdate=stpxLoopInconsistencyUpdate, stpxRootInconsistencyUpdate=stpxRootInconsistencyUpdate, stpxMISTPGroup2=stpxMISTPGroup2, stpxMSTInstanceEditIndex=stpxMSTInstanceEditIndex, stpxMIBConformance=stpxMIBConformance, stpxMIBCompliance4=stpxMIBCompliance4, stpxMSTPortRoleEntry=stpxMSTPortRoleEntry, stpxNotifications=stpxNotifications, stpxRSTPPortAdminLinkType=stpxRSTPPortAdminLinkType, stpxFastStartOperModeGroup=stpxFastStartOperModeGroup, stpxPVSTVlanEntry=stpxPVSTVlanEntry, stpxUplinkFastObjects=stpxUplinkFastObjects, stpxLoopGuardConfigTable=stpxLoopGuardConfigTable, stpxSMSTPortAdminHelloTime=stpxSMSTPortAdminHelloTime, stpxMSTMaxInstanceNumber=stpxMSTMaxInstanceNumber, stpxSMSTGroup=stpxSMSTGroup, stpxPreferredVlansEntry=stpxPreferredVlansEntry, stpxPVSTVlanIndex=stpxPVSTVlanIndex, stpxSpanningTreeObjects=stpxSpanningTreeObjects, stpxRootGuardConfigTable=stpxRootGuardConfigTable, stpxRootInconsistencyTable=stpxRootInconsistencyTable, stpxSMSTInstanceEditGroup=stpxSMSTInstanceEditGroup, stpxPathCostOperModeGroup=stpxPathCostOperModeGroup, stpxMSTInstanceVlansMapped=stpxMSTInstanceVlansMapped, stpxMIBCompliance3=stpxMIBCompliance3, stpxRPVSTObjects=stpxRPVSTObjects, stpxMISTPInstanceIndex=stpxMISTPInstanceIndex, stpxFastStartPortEnable=stpxFastStartPortEnable, stpxSpanningTreePathCostMode=stpxSpanningTreePathCostMode, stpxFastStartBpduFilterEnable=stpxFastStartBpduFilterEnable, stpxMISTPInstanceVlansMapped4k=stpxMISTPInstanceVlansMapped4k, stpxPVSTVlanEnable=stpxPVSTVlanEnable, stpxFastStartObjects=stpxFastStartObjects, stpxMSTInstanceVlansMapped2k=stpxMSTInstanceVlansMapped2k, stpxSMSTPortAdminMSTMode=stpxSMSTPortAdminMSTMode, stpxRootGuardGroup=stpxRootGuardGroup, stpxVlanMISTPInstMapEditEntry=stpxVlanMISTPInstMapEditEntry, stpxExtendedSysIDOperEnabled=stpxExtendedSysIDOperEnabled, stpxBpduSkewingWorstSkewDuration=stpxBpduSkewingWorstSkewDuration, stpxRSTPPortRoleInstanceIndex=stpxRSTPPortRoleInstanceIndex, stpxBpduSkewingObjects=stpxBpduSkewingObjects, stpxPVSTVlanGroup=stpxPVSTVlanGroup, stpxLoopGuardObjects=stpxLoopGuardObjects, stpxMSTPortRoleInstanceIndex=stpxMSTPortRoleInstanceIndex, stpxSMSTInstanceCISTRegionalRoot=stpxSMSTInstanceCISTRegionalRoot, stpxVlanMISTPInstMapEditInstIndex=stpxVlanMISTPInstMapEditInstIndex, stpxFastStartGroup=stpxFastStartGroup, stpxFastStartGroup2=stpxFastStartGroup2, stpxSMSTInstanceEditVlansMap1k2k=stpxSMSTInstanceEditVlansMap1k2k, stpxBackboneFastOperEnabled=stpxBackboneFastOperEnabled, stpxSMSTInstanceVlansMapped1k2k=stpxSMSTInstanceVlansMapped1k2k, stpxLoopGuardConfigEnabled=stpxLoopGuardConfigEnabled, stpxSMSTPortConfigedHelloTime=stpxSMSTPortConfigedHelloTime, stpxRootGuardObjects=stpxRootGuardObjects, stpxMIBCompliance7=stpxMIBCompliance7, stpxMSTGroup4=stpxMSTGroup4, stpxMSTRegionName=stpxMSTRegionName, stpxRSTPPortRoleEntry=stpxRSTPPortRoleEntry, stpxLongStpPortPathCost=stpxLongStpPortPathCost, stpxMIBCompliance5=stpxMIBCompliance5, stpxBackboneFastOutRLQResponsePDUs=stpxBackboneFastOutRLQResponsePDUs, stpxRSTPObjects=stpxRSTPObjects, stpxMISTPInstanceTable=stpxMISTPInstanceTable, stpxBpduSkewingPortIndex=stpxBpduSkewingPortIndex, stpxBackboneFastInInferiorBPDUs=stpxBackboneFastInInferiorBPDUs, stpxSMSTMaxHopCount=stpxSMSTMaxHopCount, stpxRootInconsistencyIndex=stpxRootInconsistencyIndex, stpxRootInconsistencyEntry=stpxRootInconsistencyEntry, stpxBackboneFastObjects=stpxBackboneFastObjects, stpxMIBCompliance=stpxMIBCompliance, stpxSMSTInstanceGroup=stpxSMSTInstanceGroup, stpxPreferredMSTInstancesTable=stpxPreferredMSTInstancesTable, stpxLoopGuardConfigEntry=stpxLoopGuardConfigEntry, stpxRSTPPortRoleTable=stpxRSTPPortRoleTable, stpxPreferredMISTPInstancesTable=stpxPreferredMISTPInstancesTable, stpxMISTPInstanceEntry=stpxMISTPInstanceEntry, stpxFastStartOperModeEntry=stpxFastStartOperModeEntry, stpxRootInconsistencyPortIndex=stpxRootInconsistencyPortIndex, stpxVlanMISTPInstMapEntry=stpxVlanMISTPInstMapEntry, stpxUplinkStationLearningFrames=stpxUplinkStationLearningFrames, stpxMSTInstanceEditVlansMap4k=stpxMSTInstanceEditVlansMap4k, stpxNotificationsPrefix=stpxNotificationsPrefix, stpxPreferredVlansMap=stpxPreferredVlansMap, stpxBackboneFastInRLQResponsePDUs=stpxBackboneFastInRLQResponsePDUs, stpx4kVlanGroup=stpx4kVlanGroup, stpxInconsistencyUpdate=stpxInconsistencyUpdate, stpxSMSTConfigDigest=stpxSMSTConfigDigest, stpxPreferredVlansMap4k=stpxPreferredVlansMap4k, stpxSMSTObjects=stpxSMSTObjects, stpxFastStartOperModeTable=stpxFastStartOperModeTable, stpxLoopInconsistencyNotificationsGroup=stpxLoopInconsistencyNotificationsGroup, stpxRSTPPortIndex=stpxRSTPPortIndex, stpxUplinkGroup2=stpxUplinkGroup2, stpxMSTGroup=stpxMSTGroup, stpxSMSTPortMSTModeGroup=stpxSMSTPortMSTModeGroup, stpxSstpGroup=stpxSstpGroup, stpxSMSTInstanceIndex=stpxSMSTInstanceIndex, stpxPreferredVlansGroup=stpxPreferredVlansGroup, stpxMIBCompliance12=stpxMIBCompliance12, stpxUplinkFastEnabled=stpxUplinkFastEnabled, stpxMSTRegionRevision=stpxMSTRegionRevision, stpxFastStartOperModeInstIndex=stpxFastStartOperModeInstIndex, stpxRSTPPortOperLinkType=stpxRSTPPortOperLinkType, stpxRPVSTPortStatus=stpxRPVSTPortStatus, stpxBackboneFastOutRLQRequestPDUs=stpxBackboneFastOutRLQRequestPDUs, stpxRSTPGroup=stpxRSTPGroup, stpxMIBCompliance11=stpxMIBCompliance11, stpxInconsistencyTable=stpxInconsistencyTable, stpxSMSTPortOperHelloTime=stpxSMSTPortOperHelloTime, stpxUplinkGroup=stpxUplinkGroup, stpxNotificationsGroup=stpxNotificationsGroup, stpxSMSTInstanceVlansMapped3k4k=stpxSMSTInstanceVlansMapped3k4k, stpxMISTPInstanceVlansMapped=stpxMISTPInstanceVlansMapped, stpxLoopInconsistencyEntry=stpxLoopInconsistencyEntry, stpxLoopInconsistencyTable=stpxLoopInconsistencyTable, stpxFastStartPortBpduGuardMode=stpxFastStartPortBpduGuardMode, stpxBpduSkewingInstanceIndex=stpxBpduSkewingInstanceIndex, stpxMSTInstanceVlansMapped4k=stpxMSTInstanceVlansMapped4k, stpxSMSTConfigPreStandardDigest=stpxSMSTConfigPreStandardDigest, stpxUplinkFastOperEnabled=stpxUplinkFastOperEnabled, stpxLoopGuardGroup2=stpxLoopGuardGroup2, stpxMSTPortRoleTable=stpxMSTPortRoleTable, stpxMSTPortTable=stpxMSTPortTable, stpxInconsistentState=stpxInconsistentState, stpxUplinkStationLearningGenRate=stpxUplinkStationLearningGenRate, stpxSMSTMaxInstanceID=stpxSMSTMaxInstanceID, stpxMIBCompliance10=stpxMIBCompliance10, stpxPreferredMISTPInstancesMap=stpxPreferredMISTPInstancesMap, stpxFastStartBpduGuardEnable=stpxFastStartBpduGuardEnable, stpxPortIndex=stpxPortIndex, stpxLoopGuardConfigPortIndex=stpxLoopGuardConfigPortIndex, stpxBpduSkewingGroup=stpxBpduSkewingGroup, stpxMSTGroup2=stpxMSTGroup2, stpxInconsistencyEntry=stpxInconsistencyEntry, stpxSpanningTreeGroup=stpxSpanningTreeGroup, stpxBackboneGroup=stpxBackboneGroup, stpxRootInconsistencyState=stpxRootInconsistencyState, stpxRPVSTGroup=stpxRPVSTGroup, stpxBackboneFastInRLQRequestPDUs=stpxBackboneFastInRLQRequestPDUs, stpxBpduSkewingTable=stpxBpduSkewingTable, stpxMSTInstanceIndex=stpxMSTInstanceIndex, stpxMSTMaxHopCount=stpxMSTMaxHopCount, stpxSMSTPortEntry=stpxSMSTPortEntry, stpxInconsistencyObjects=stpxInconsistencyObjects, stpxSMSTPortHelloTimeGroup=stpxSMSTPortHelloTimeGroup, stpxSMSTInstanceEditEntry=stpxSMSTInstanceEditEntry, stpxMISTPInstanceVlansMapped3k=stpxMISTPInstanceVlansMapped3k, stpxObjects=stpxObjects, stpxLoopGuardGlobalDefaultMode=stpxLoopGuardGlobalDefaultMode, stpxBpduSkewingLastSkewDuration=stpxBpduSkewingLastSkewDuration, stpxRSTPPortTable=stpxRSTPPortTable, stpxSMSTInstanceTable=stpxSMSTInstanceTable, stpxSMSTInstanceCISTIntRootCost=stpxSMSTInstanceCISTIntRootCost, stpxRPVSTPortEntry=stpxRPVSTPortEntry, stpxMSTPortOperLinkType=stpxMSTPortOperLinkType, stpxMSTPortStatus=stpxMSTPortStatus, stpxSMSTPortOperMSTMode=stpxSMSTPortOperMSTMode, stpxMISTPGroup=stpxMISTPGroup, stpxLoopGuardGroup=stpxLoopGuardGroup, stpxSMSTConfigDigestGroup=stpxSMSTConfigDigestGroup, stpxMSTPortEntry=stpxMSTPortEntry, stpxMSTInstanceRemainingHopCount=stpxMSTInstanceRemainingHopCount, StpxMSTConfigurationDigest=StpxMSTConfigurationDigest, stpxSMSTInstanceEditRowStatus=stpxSMSTInstanceEditRowStatus, stpxFastStartOperMode=stpxFastStartOperMode, stpxSMSTMaxHopCountGroup=stpxSMSTMaxHopCountGroup, stpxLoopInconsistencyState=stpxLoopInconsistencyState, stpxMSTRegionEditBufferStatus=stpxMSTRegionEditBufferStatus, stpxMSTInstanceEditVlansMap=stpxMSTInstanceEditVlansMap, stpxRPVSTPortIndex=stpxRPVSTPortIndex, stpxPreferredVlansMap3k=stpxPreferredVlansMap3k, stpxFastStartPortIndex=stpxFastStartPortIndex, stpxUplinkFastTransitions=stpxUplinkFastTransitions, stpxRSTPPortRoleValue=stpxRSTPPortRoleValue, PYSNMP_MODULE_ID=ciscoStpExtensionsMIB, stpxSMSTInstanceCISTGroup=stpxSMSTInstanceCISTGroup, stpxPVSTVlanTable=stpxPVSTVlanTable, stpxVlanMISTPInstMapEditTable=stpxVlanMISTPInstMapEditTable, stpxLongStpPortPathCostEntry=stpxLongStpPortPathCostEntry, stpxRSTPTransmitHoldCount=stpxRSTPTransmitHoldCount, stpxSMSTPortIndex=stpxSMSTPortIndex, stpxMSTRegionEditName=stpxMSTRegionEditName, stpxVlanMISTPInstMapInstIndex=stpxVlanMISTPInstMapInstIndex, stpxRPVSTPortTable=stpxRPVSTPortTable, stpxSpanningTreeType=stpxSpanningTreeType, stpxFastStartOperModePortIndex=stpxFastStartOperModePortIndex, stpxMSTInstanceEditVlansMap2k=stpxMSTInstanceEditVlansMap2k, stpxMSTRegionEditBufferOperation=stpxMSTRegionEditBufferOperation, stpxRootGuardConfigPortIndex=stpxRootGuardConfigPortIndex, stpxLongStpPortPathCostTable=stpxLongStpPortPathCostTable, stpxFastStartPortEntry=stpxFastStartPortEntry, stpxPreferredMSTInstancesGroup=stpxPreferredMSTInstancesGroup, stpxSMSTInstanceEditIndex=stpxSMSTInstanceEditIndex, stpxMSTInstanceVlansMapped3k=stpxMSTInstanceVlansMapped3k, stpxExtendedSysIDGroup=stpxExtendedSysIDGroup, stpxFastStartGlobalDefaultMode=stpxFastStartGlobalDefaultMode, stpxSMSTRegionRevision=stpxSMSTRegionRevision, stpxMIBCompliance6=stpxMIBCompliance6, stpxLoopInconsistencyPortIndex=stpxLoopInconsistencyPortIndex, stpxBackboneFastEnabled=stpxBackboneFastEnabled, stpxMSTPortProtocolMigration=stpxMSTPortProtocolMigration, stpxMSTPortAdminLinkType=stpxMSTPortAdminLinkType, stpxFastStartPortBpduFilterMode=stpxFastStartPortBpduFilterMode, stpxMSTInstanceEditTable=stpxMSTInstanceEditTable, stpxMSTInstanceEditEntry=stpxMSTInstanceEditEntry, stpxSMSTPortStatusGroup=stpxSMSTPortStatusGroup, stpxMISTPInstanceNumber=stpxMISTPInstanceNumber, stpxRSTPPortRolePortIndex=stpxRSTPPortRolePortIndex, stpxSpanningTreePathCostOperMode=stpxSpanningTreePathCostOperMode, stpxMIBCompliance2=stpxMIBCompliance2, stpxPreferredVlansTable=stpxPreferredVlansTable, stpxRootGuardConfigEntry=stpxRootGuardConfigEntry, stpxRootGuardConfigEnabled=stpxRootGuardConfigEnabled, stpxFastStartPortTable=stpxFastStartPortTable, stpxSMSTInstanceRemainingHopCount=stpxSMSTInstanceRemainingHopCount, stpxLongPathCostModeGroup=stpxLongPathCostModeGroup)
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", stpxMSTObjects=stpxMSTObjects, stpxVlanIndex=stpxVlanIndex, stpxRPVSTPortVlanIndex=stpxRPVSTPortVlanIndex, stpxSMSTInstanceEntry=stpxSMSTInstanceEntry, stpxPreferredMISTPInstancesEntry=stpxPreferredMISTPInstancesEntry, stpxBackboneGroup2=stpxBackboneGroup2, stpxBpduSkewingDetectionEnable=stpxBpduSkewingDetectionEnable, stpxPreferredVlansMap2k=stpxPreferredVlansMap2k, stpxLoopGuardConfigMode=stpxLoopGuardConfigMode)
