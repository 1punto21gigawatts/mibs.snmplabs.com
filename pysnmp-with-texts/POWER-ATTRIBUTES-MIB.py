#
# PySNMP MIB module POWER-ATTRIBUTES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWER-ATTRIBUTES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
UnitMultiplier, = mibBuilder.importSymbols("ENERGY-OBJECT-MIB", "UnitMultiplier")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, ModuleIdentity, Unsigned32, NotificationType, Integer32, ObjectIdentity, Bits, mib_2, iso, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Unsigned32", "NotificationType", "Integer32", "ObjectIdentity", "Bits", "mib-2", "iso", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
powerAttributesMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 230))
powerAttributesMIB.setRevisions(('2015-02-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: powerAttributesMIB.setRevisionsDescriptions(('Initial version, published as RFC 7460',))
if mibBuilder.loadTexts: powerAttributesMIB.setLastUpdated('201502090000Z')
if mibBuilder.loadTexts: powerAttributesMIB.setOrganization('IETF EMAN Working Group')
if mibBuilder.loadTexts: powerAttributesMIB.setContactInfo('WG charter: http://datatracker.ietf.org/wg/eman/charter/ Mailing Lists: General Discussion: eman@ietf.org To Subscribe: https://www.ietf.org/mailman/listinfo/eman Archive: http://www.ietf.org/mail-archive/web/eman Editors: Mouli Chandramouli Cisco Systems, Inc. Sarjapur Outer Ring Road Bangalore 560103 India Phone: +91 80 4429 2409 Email: moulchan@cisco.com Brad Schoening 44 Rivers Edge Drive Little Silver, NJ 07739 United States Email: brad.schoening@verizon.net Juergen Quittek NEC Europe Ltd. NEC Laboratories Europe Network Research Division Kurfuersten-Anlage 36 Heidelberg 69115 Germany Phone: +49 6221 4342-115 Email: quittek@neclab.eu Thomas Dietz NEC Europe Ltd. NEC Laboratories Europe Network Research Division Kurfuersten-Anlage 36 69115 Heidelberg Germany Phone: +49 6221 4342-128 Email: Thomas.Dietz@nw.neclab.eu Benoit Claise Cisco Systems, Inc. De Kleetlaan 6a b1 Degem 1831 Belgium Phone: +32 2 704 5622 Email: bclaise@cisco.com')
if mibBuilder.loadTexts: powerAttributesMIB.setDescription("Copyright (c) 2015 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info). This MIB is used to report AC power attributes in devices. The table is a sparse augmentation of the eoPowerTable table from the energyObjectMib module. Both three-phase and single-phase power configurations are supported. As a requirement for this MIB module, RFC 7461 SHOULD be implemented. Module Compliance of ENTITY-MIB v4 with respect to entity4CRCompliance MUST be supported which requires implementation of four MIB objects: entPhysicalIndex, entPhysicalClass, entPhysicalName, and entPhysicalUUID.")
powerAttributesMIBConform = MibIdentifier((1, 3, 6, 1, 2, 1, 230, 0))
powerAttributesMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 230, 1))
eoACPwrAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 230, 1, 1), )
if mibBuilder.loadTexts: eoACPwrAttributesTable.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesTable.setDescription('This table contains power attributes measurements for supported entPhysicalIndex entities. It is a sparse extension of the eoPowerTable.')
eoACPwrAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 230, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: eoACPwrAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesEntry.setDescription('This is a sparse extension of the eoPowerTable with entries for power attributes measurements or configuration. Each measured value corresponds to an attribute in IEC 61850-7-4 for non-phase measurements within the object MMXN.')
eoACPwrAttributesConfiguration = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sngl", 1), ("del", 2), ("wye", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesConfiguration.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesConfiguration.setDescription('Configuration describes the physical configurations of the power supply lines: * alternating current, single phase (SNGL) * alternating current, three-phase delta (DEL) * alternating current, three-phase Y (WYE) Three-phase configurations can be either connected in a triangular delta (DEL) or star Y (WYE) system. WYE systems have a shared neutral voltage, while DEL systems do not. Each phase is offset 120 degrees to each other.')
eoACPwrAttributesAvgVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 2), Integer32()).setUnits('0.1 Volt AC').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesAvgVoltage.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesAvgVoltage.setDescription("A measured value for average of the voltage measured over an integral number of AC cycles. For a three-phase system, this is the average voltage (V1+V2+V3)/3. IEC 61850-7-4 measured value attribute 'Vol'.")
eoACPwrAttributesAvgCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 3), Unsigned32()).setUnits('amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesAvgCurrent.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesAvgCurrent.setDescription("A measured value for average of the current measured over an integral number of AC cycles. For a three-phase system, this is the average current (I1+I2+I3)/3. IEC 61850-7-4 attribute 'Amp'.")
eoACPwrAttributesFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4500, 6500))).setUnits('0.01 hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesFrequency.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesFrequency.setDescription("A measured value for the basic frequency of the AC circuit. IEC 61850-7-4 attribute 'Hz'.")
eoACPwrAttributesPowerUnitMultiplier = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 5), UnitMultiplier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesPowerUnitMultiplier.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesPowerUnitMultiplier.setDescription('The magnitude of watts for the usage value in eoACPwrAttributesTotalActivePower, eoACPwrAttributesTotalReactivePower, and eoACPwrAttributesTotalApparentPower measurements. For three-phase power systems, this will also include eoACPwrAttributesWyeActivePower, eoACPwrAttributesWyeReactivePower, and eoACPwrAttributesWyeApparentPower.')
eoACPwrAttributesPowerAccuracy = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesPowerAccuracy.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesPowerAccuracy.setDescription('This object indicates a percentage value, in hundredths of a percent, representing the presumed accuracy of active, reactive, and apparent power usage reporting. For example, 1010 means the reported usage is accurate to +/- 10.1 percent. This value is zero if the accuracy is unknown. ANSI and IEC define the following accuracy classes for power measurement: IEC 62053-22 & 60044-1 class 0.1, 0.2, 0.5, 1, & 3. ANSI C12.20 class 0.2 & 0.5')
eoACPwrAttributesTotalActivePower = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 7), Integer32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesTotalActivePower.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesTotalActivePower.setDescription("A measured value of the actual power delivered to or consumed by the load. IEC 61850-7-4 attribute 'TotW'.")
eoACPwrAttributesTotalReactivePower = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 8), Integer32()).setUnits('volt-amperes reactive').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesTotalReactivePower.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesTotalReactivePower.setDescription("A measured value of the reactive portion of the apparent power. IEC 61850-7-4 attribute 'TotVAr'.")
eoACPwrAttributesTotalApparentPower = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 9), Integer32()).setUnits('volt-amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesTotalApparentPower.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesTotalApparentPower.setDescription("A measured value of the voltage and current that determines the apparent power. The apparent power is the vector sum of real and reactive power. Note: watts and volt-amperes are equivalent units and may be combined. IEC 61850-7-4 attribute 'TotVA'.")
eoACPwrAttributesTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesTotalPowerFactor.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesTotalPowerFactor.setDescription("A measured value ratio of the real power flowing to the load versus the apparent power. It is dimensionless and expressed here as a percentage value in hundredths. A power factor of 100% indicates there is no inductance load and thus no reactive power. A Power Factor can be positive or negative, where the sign should be in lead/lag (IEEE) form. IEC 61850-7-4 attribute 'TotPF'.")
eoACPwrAttributesThdCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesThdCurrent.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesThdCurrent.setDescription("A calculated value for the current total harmonic distortion (THD). Method of calculation is not specified. IEC 61850-7-4 attribute 'ThdAmp'.")
eoACPwrAttributesThdVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesThdVoltage.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesThdVoltage.setDescription("A calculated value for the voltage total harmonic distortion (THD). The method of calculation is not specified. IEC 61850-7-4 attribute 'ThdVol'.")
eoACPwrAttributesDelPhaseTable = MibTable((1, 3, 6, 1, 2, 1, 230, 1, 2), )
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseTable.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseTable.setDescription('This optional table describes three-phase power attributes measurements in a DEL configuration with phase-to-phase power attributes measurements. Entities having single phase power shall not have any entities. This is a sparse extension of the eoACPwrAttributesTable. These attributes correspond to measurements related to the IEC 61850-7.4 MMXU phase and measured harmonic or interharmonics related to the MHAI phase.')
eoACPwrAttributesDelPhaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 230, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "POWER-ATTRIBUTES-MIB", "eoACPwrAttributesDelPhaseIndex"))
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseEntry.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseEntry.setDescription('An entry describes power measurements of a phase in a DEL three-phase power. Three entries are required for each supported entPhysicalIndex entry. Voltage measurements are provided relative to each other. For phase-to-phase measurements, the eoACPwrAttributesDelPhaseIndex is compared against the following phase at +120 degrees. Thus, the possible values are: eoACPwrAttributesDelPhaseIndex Next Phase Angle 0 120 120 240 240 0 ')
eoACPwrAttributesDelPhaseIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 359)))
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseIndex.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseIndex.setDescription('A phase angle typically corresponding to 0, 120, 240.')
eoACPwrAttributesDelPhaseToNextPhaseVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 2, 1, 2), Integer32()).setUnits('0.1 Volt AC').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseToNextPhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesDelPhaseToNextPhaseVoltage.setDescription("A measured value of phase to next phase voltages, where the next phase is IEC 61850-7-4 attribute 'PPV'.")
eoACPwrAttributesDelThdPhaseToNextPhaseVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesDelThdPhaseToNextPhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesDelThdPhaseToNextPhaseVoltage.setDescription("A calculated value for the voltage total harmonic distortion for phase to next phase. Method of calculation is not specified. IEC 61850-7-4 attribute 'ThdPPV'.")
eoACPwrAttributesWyePhaseTable = MibTable((1, 3, 6, 1, 2, 1, 230, 1, 3), )
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseTable.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseTable.setDescription('This optional table describes three-phase power attributes measurements in a WYE configuration with phase-to-neutral power attributes measurements. Entities having single phase power shall not have any entities. This is a sparse extension of the eoACPwrAttributesTable. These attributes correspond to measurements related to the IEC 61850-7.4 MMXU phase and measured harmonic or interharmonics related to the MHAI phase.')
eoACPwrAttributesWyePhaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 230, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyePhaseIndex"))
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseEntry.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseEntry.setDescription('This table describes measurements of a phase in a WYE three-phase power system. Three entries are required for each supported entPhysicalIndex entry. Voltage measurements are relative to neutral. Each entry describes power attributes of one phase of a WYE three-phase power system.')
eoACPwrAttributesWyePhaseIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 359)))
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseIndex.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseIndex.setDescription('A phase angle typically corresponding to 0, 120, 240.')
eoACPwrAttributesWyePhaseToNeutralVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 2), Integer32()).setUnits('0.1 Volt AC').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseToNeutralVoltage.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyePhaseToNeutralVoltage.setDescription("A measured value of phase to neutral voltage. IEC 61850-7-4 attribute 'PNV'.")
eoACPwrAttributesWyeCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 3), Integer32()).setUnits('0.1 amperes AC').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyeCurrent.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyeCurrent.setDescription("A measured value of phase currents. IEC 61850-7-4 attribute 'A'.")
eoACPwrAttributesWyeActivePower = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 4), Integer32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyeActivePower.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyeActivePower.setDescription("A measured value of the actual power delivered to or consumed by the load with the magnitude indicated separately in eoPowerUnitMultiplier. IEC 61850-7-4 attribute 'W'.")
eoACPwrAttributesWyeReactivePower = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 5), Integer32()).setUnits('volt-amperes reactive').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyeReactivePower.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyeReactivePower.setDescription("A measured value of the reactive portion of the apparent power with the magnitude of indicated separately in eoPowerUnitMultiplier. IEC 61850-7-4 attribute 'VAr'.")
eoACPwrAttributesWyeApparentPower = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 6), Integer32()).setUnits('volt-amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyeApparentPower.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyeApparentPower.setDescription("A measured value of the voltage and current determines the apparent power with the indicated separately in eoPowerUnitMultiplier. Active plus reactive power equals the total apparent power. Note: Watts and volt-amperes are equivalent units and may be combined. IEC 61850-7-4 attribute 'VA'.")
eoACPwrAttributesWyePowerFactor = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyePowerFactor.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyePowerFactor.setDescription("A measured value ratio of the real power flowing to the load versus the apparent power for this phase. IEC 61850-7-4 attribute 'PF'. Power Factor can be positive or negative where the sign should be in lead/lag (IEEE) form.")
eoACPwrAttributesWyeThdCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyeThdCurrent.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyeThdCurrent.setDescription("A calculated value for the voltage total harmonic distortion (THD) for phase to phase. Method of calculation is not specified. IEC 61850-7-4 attribute 'ThdA'.")
eoACPwrAttributesWyeThdPhaseToNeutralVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 230, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoACPwrAttributesWyeThdPhaseToNeutralVoltage.setStatus('current')
if mibBuilder.loadTexts: eoACPwrAttributesWyeThdPhaseToNeutralVoltage.setDescription("A calculated value of the voltage total harmonic distortion (THD) for phase to neutral. IEC 61850-7-4 attribute 'ThdPhV'.")
powerAttributesMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 230, 2))
powerAttributesMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 230, 3))
powerAttributesMIBFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 230, 2, 1)).setObjects(("POWER-ATTRIBUTES-MIB", "powerACPwrAttributesMIBTableGroup"), ("POWER-ATTRIBUTES-MIB", "powerACPwrAttributesOptionalMIBTableGroup"), ("POWER-ATTRIBUTES-MIB", "powerACPwrAttributesDelPhaseMIBTableGroup"), ("POWER-ATTRIBUTES-MIB", "powerACPwrAttributesWyePhaseMIBTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerAttributesMIBFullCompliance = powerAttributesMIBFullCompliance.setStatus('current')
if mibBuilder.loadTexts: powerAttributesMIBFullCompliance.setDescription('When this MIB is implemented with support for read- create, then such an implementation can claim full compliance. Such devices can then be both monitored and configured with this MIB. Module Compliance of RFC 6933 with respect to entity4CRCompliance MUST be supported which requires implementation of four MIB objects: entPhysicalIndex, entPhysicalClass, entPhysicalName, and entPhysicalUUID.')
if mibBuilder.loadTexts: powerAttributesMIBFullCompliance.setReference('RFC 6933: Entity MIB (Version 4)')
powerACPwrAttributesMIBTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 230, 3, 1)).setObjects(("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesAvgVoltage"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesAvgCurrent"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesFrequency"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesPowerUnitMultiplier"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesPowerAccuracy"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesTotalActivePower"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesTotalReactivePower"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesTotalApparentPower"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesTotalPowerFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerACPwrAttributesMIBTableGroup = powerACPwrAttributesMIBTableGroup.setStatus('current')
if mibBuilder.loadTexts: powerACPwrAttributesMIBTableGroup.setDescription('This group contains the collection of all the power attributes objects related to the Energy Object.')
powerACPwrAttributesOptionalMIBTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 230, 3, 2)).setObjects(("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesConfiguration"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesThdCurrent"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesThdVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerACPwrAttributesOptionalMIBTableGroup = powerACPwrAttributesOptionalMIBTableGroup.setStatus('current')
if mibBuilder.loadTexts: powerACPwrAttributesOptionalMIBTableGroup.setDescription('This group contains the collection of all the power attributes objects related to the Energy Object.')
powerACPwrAttributesDelPhaseMIBTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 230, 3, 3)).setObjects(("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesDelPhaseToNextPhaseVoltage"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesDelThdPhaseToNextPhaseVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerACPwrAttributesDelPhaseMIBTableGroup = powerACPwrAttributesDelPhaseMIBTableGroup.setStatus('current')
if mibBuilder.loadTexts: powerACPwrAttributesDelPhaseMIBTableGroup.setDescription('This group contains the collection of all power attributes of a phase in a DEL three-phase power system.')
powerACPwrAttributesWyePhaseMIBTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 230, 3, 4)).setObjects(("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyePhaseToNeutralVoltage"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyeCurrent"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyeActivePower"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyeReactivePower"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyeApparentPower"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyePowerFactor"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyeThdPhaseToNeutralVoltage"), ("POWER-ATTRIBUTES-MIB", "eoACPwrAttributesWyeThdCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerACPwrAttributesWyePhaseMIBTableGroup = powerACPwrAttributesWyePhaseMIBTableGroup.setStatus('current')
if mibBuilder.loadTexts: powerACPwrAttributesWyePhaseMIBTableGroup.setDescription('This group contains the collection of all power attributes of a phase in a WYE three-phase power system.')
mibBuilder.exportSymbols("POWER-ATTRIBUTES-MIB", powerACPwrAttributesMIBTableGroup=powerACPwrAttributesMIBTableGroup, eoACPwrAttributesTotalActivePower=eoACPwrAttributesTotalActivePower, eoACPwrAttributesWyePowerFactor=eoACPwrAttributesWyePowerFactor, eoACPwrAttributesWyePhaseEntry=eoACPwrAttributesWyePhaseEntry, eoACPwrAttributesDelPhaseToNextPhaseVoltage=eoACPwrAttributesDelPhaseToNextPhaseVoltage, powerACPwrAttributesDelPhaseMIBTableGroup=powerACPwrAttributesDelPhaseMIBTableGroup, powerAttributesMIBGroups=powerAttributesMIBGroups, eoACPwrAttributesWyeReactivePower=eoACPwrAttributesWyeReactivePower, eoACPwrAttributesDelThdPhaseToNextPhaseVoltage=eoACPwrAttributesDelThdPhaseToNextPhaseVoltage, eoACPwrAttributesWyeCurrent=eoACPwrAttributesWyeCurrent, eoACPwrAttributesWyePhaseTable=eoACPwrAttributesWyePhaseTable, powerAttributesMIBObjects=powerAttributesMIBObjects, eoACPwrAttributesWyePhaseToNeutralVoltage=eoACPwrAttributesWyePhaseToNeutralVoltage, powerAttributesMIBFullCompliance=powerAttributesMIBFullCompliance, eoACPwrAttributesAvgCurrent=eoACPwrAttributesAvgCurrent, powerAttributesMIBConform=powerAttributesMIBConform, eoACPwrAttributesTotalPowerFactor=eoACPwrAttributesTotalPowerFactor, eoACPwrAttributesTotalReactivePower=eoACPwrAttributesTotalReactivePower, eoACPwrAttributesFrequency=eoACPwrAttributesFrequency, eoACPwrAttributesDelPhaseIndex=eoACPwrAttributesDelPhaseIndex, eoACPwrAttributesThdVoltage=eoACPwrAttributesThdVoltage, eoACPwrAttributesWyePhaseIndex=eoACPwrAttributesWyePhaseIndex, PYSNMP_MODULE_ID=powerAttributesMIB, eoACPwrAttributesEntry=eoACPwrAttributesEntry, powerAttributesMIBCompliances=powerAttributesMIBCompliances, eoACPwrAttributesPowerAccuracy=eoACPwrAttributesPowerAccuracy, eoACPwrAttributesWyeThdCurrent=eoACPwrAttributesWyeThdCurrent, eoACPwrAttributesAvgVoltage=eoACPwrAttributesAvgVoltage, eoACPwrAttributesWyeApparentPower=eoACPwrAttributesWyeApparentPower, eoACPwrAttributesTable=eoACPwrAttributesTable, powerAttributesMIB=powerAttributesMIB, eoACPwrAttributesConfiguration=eoACPwrAttributesConfiguration, eoACPwrAttributesDelPhaseTable=eoACPwrAttributesDelPhaseTable, powerACPwrAttributesOptionalMIBTableGroup=powerACPwrAttributesOptionalMIBTableGroup, eoACPwrAttributesThdCurrent=eoACPwrAttributesThdCurrent, powerACPwrAttributesWyePhaseMIBTableGroup=powerACPwrAttributesWyePhaseMIBTableGroup, eoACPwrAttributesWyeThdPhaseToNeutralVoltage=eoACPwrAttributesWyeThdPhaseToNeutralVoltage, eoACPwrAttributesPowerUnitMultiplier=eoACPwrAttributesPowerUnitMultiplier, eoACPwrAttributesTotalApparentPower=eoACPwrAttributesTotalApparentPower, eoACPwrAttributesWyeActivePower=eoACPwrAttributesWyeActivePower, eoACPwrAttributesDelPhaseEntry=eoACPwrAttributesDelPhaseEntry)
