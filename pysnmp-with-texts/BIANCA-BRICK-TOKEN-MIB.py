#
# PySNMP MIB module BIANCA-BRICK-TOKEN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-TOKEN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Unsigned32, ObjectIdentity, NotificationType, Counter64, IpAddress, Integer32, Counter32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Unsigned32", "ObjectIdentity", "NotificationType", "Counter64", "IpAddress", "Integer32", "Counter32", "ModuleIdentity", "iso")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
tokenring = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 11))
class Date(Integer32):
    pass

class HexValue(Integer32):
    pass

tokenringIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 11, 1), )
if mibBuilder.loadTexts: tokenringIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfTable.setDescription('The tokenringIfTable contains information relating to the interfaces found on the system. Each entry corresponds to a connected TokenRing interface. Entries can only be added or deleted by the system. Creating entries: Entries are created by the system only when a new TokenRing module is installed. Deleting entries: Entries are removed by the system after the appropriate TokenRing module is removed.')
tokenringIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-TOKEN-MIB", "tokenringIfSlot"))
if mibBuilder.loadTexts: tokenringIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfEntry.setDescription('')
tokenringIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfSlot.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfSlot.setDescription('Unique Slot of the TokenRing interface.')
tokenringIfState = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("down", 1), ("start", 2), ("download", 3), ("reset", 4), ("bud", 5), ("tferipb", 6), ("wait1", 7), ("open", 8), ("wait2", 9), ("delay1", 10), ("receive", 11), ("wait3", 12), ("done", 13), ("close", 14), ("error", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfState.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfState.setDescription('The TokenRing adapter initialization state')
tokenringIfRingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tr-4Mbit", 1), ("tr-16Mbit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenringIfRingRate.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfRingRate.setDescription('speed of the token ring.')
tokenringIfEarlyTokenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenringIfEarlyTokenRelease.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfEarlyTokenRelease.setDescription('enable or disable early token release. This feature is only valid with the 16 Mbps ring rate')
tokenringIfWrapInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenringIfWrapInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfWrapInterface.setDescription('enable or disable the wrap interface option. If enabled the ring insertion process is omitted and all user-transmit data appears as receive data.')
tokenringIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 17800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenringIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets.')
tokenringIfOverwritePhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenringIfOverwritePhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfOverwritePhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. This overwrites the address defined in the adapter PROM.")
tokenringIfNAUN = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfNAUN.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfNAUN.setDescription("The interface's address of the nearest upstream neighbour.")
tokenringIfLineError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfLineError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfLineError.setDescription('Count of line errors. This counter is incremented whenever 1) a frame is repeated or copied, and 2) the Error Detected Indicator (EDI) is zero in the incoming frame, and 3) at least one of the following conditions exists: a) a code violation between SDEL and EDEL b) a code violation in a token c) a FCS error')
tokenringIfBurstError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfBurstError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfBurstError.setDescription('Count of burst errors. This counter is incremented whenever the interface detects the absence of transitions for five half-bit times between SDEL and EDEL, or EDEL and SDEL')
tokenringIfAriFciError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfAriFciError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfAriFciError.setDescription('Count of ARI/FCI errors. This counter is incremented whenever the interface receives an Active Monitor Present (AMP) MAC frame with the ARI/FCI bit equal to zero and a Standby Monitor Present (SMP) MAC frame with the ARI/FCI bits equal to zero, or more than one SMP MAC frame with the ARI/FCI bits equal to zero, without receiving an intervening AMP MAC frame.')
tokenringIfLostFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfLostFrameError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfLostFrameError.setDescription('Count of lost frames errors. This counter is incremented whenever the interface is in transmit (stripping) mode and fails to receive the end of the frame it transmitted')
tokenringIfReceiveCongestionError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfReceiveCongestionError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfReceiveCongestionError.setDescription('Count of receive congestion errors. This counter is incremented whenever the interface in the repeat mode recognizes a frame addressed to it but has no buffer space to copy the frame')
tokenringIfFrameCopiedError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfFrameCopiedError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfFrameCopiedError.setDescription('Count of frame copied errors. This counter is incremented whenever the interface in the receive/repeat mode recognizes a frame addressed to its specific address but finds the ARI bits not equal to zero')
tokenringIfTokenError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfTokenError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfTokenError.setDescription('Count of token errors. This counter is only active in the active monitor station. It is incremented when the active monitor detects an error in the token protocol')
tokenringIfDmaBusError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfDmaBusError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfDmaBusError.setDescription('Count of DMA bus errors. This counter is counts the occurences of DMA bus errors that do not exceed the specified abort thresholds')
tokenringIfDmaParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfDmaParityError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfDmaParityError.setDescription('Count of DMA parity errors. This counter counts the occurences of DMA parity errors that do not exceed the specified abort thresholds')
tokenringIfSoftError = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenringIfSoftError.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfSoftError.setDescription('Count of soft errors that occur during normal operation. A soft error is an error condition that temporarily degrades system performance; however the ring recovers by using the protocols of the adapter. The adapter counts these errors and can report them to both the attached product and the ring error monitor.')
tokenringIfSourceRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenringIfSourceRouting.setStatus('mandatory')
if mibBuilder.loadTexts: tokenringIfSourceRouting.setDescription('enable or disable source routing. If enabled, a routing information field is added to the frame sent over this interface.')
mibBuilder.exportSymbols("BIANCA-BRICK-TOKEN-MIB", tokenringIfOverwritePhysAddress=tokenringIfOverwritePhysAddress, tokenringIfState=tokenringIfState, tokenringIfFrameCopiedError=tokenringIfFrameCopiedError, tokenringIfNAUN=tokenringIfNAUN, bibo=bibo, tokenringIfMtu=tokenringIfMtu, tokenringIfTokenError=tokenringIfTokenError, tokenringIfTable=tokenringIfTable, tokenringIfAriFciError=tokenringIfAriFciError, HexValue=HexValue, tokenringIfWrapInterface=tokenringIfWrapInterface, tokenring=tokenring, tokenringIfDmaParityError=tokenringIfDmaParityError, bintec=bintec, tokenringIfEntry=tokenringIfEntry, tokenringIfEarlyTokenRelease=tokenringIfEarlyTokenRelease, tokenringIfSlot=tokenringIfSlot, Date=Date, dod=dod, tokenringIfSoftError=tokenringIfSoftError, tokenringIfRingRate=tokenringIfRingRate, org=org, tokenringIfReceiveCongestionError=tokenringIfReceiveCongestionError, tokenringIfLineError=tokenringIfLineError, internet=internet, tokenringIfDmaBusError=tokenringIfDmaBusError, tokenringIfBurstError=tokenringIfBurstError, tokenringIfLostFrameError=tokenringIfLostFrameError, private=private, enterprises=enterprises, tokenringIfSourceRouting=tokenringIfSourceRouting)
