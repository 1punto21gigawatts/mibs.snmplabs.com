#
# PySNMP MIB module CISCO-CALL-HISTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CALL-HISTORY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Bits, iso, ModuleIdentity, TimeTicks, Unsigned32, ObjectIdentity, MibIdentifier, IpAddress, NotificationType, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Bits", "iso", "ModuleIdentity", "TimeTicks", "Unsigned32", "ObjectIdentity", "MibIdentifier", "IpAddress", "NotificationType", "Gauge32", "Integer32")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
ciscoCallHistoryMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 27))
ciscoCallHistoryMib.setRevisions(('1995-08-15 00:00', '1995-07-20 00:00', '1995-08-15 00:00', '1996-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCallHistoryMib.setRevisionsDescriptions(('Fix typo which caused conflicting syntax.', 'Add a new object ciscoCallHistoryDialReason to the call history table.', 'Add new objects to the call history table to store the time of day, and transmitted/received packets/bytes.', 'Add new objects to the call history table to store the advice of charge information for recorded units or currency type, amount and multipler.',))
if mibBuilder.loadTexts: ciscoCallHistoryMib.setLastUpdated('9611190000Z')
if mibBuilder.loadTexts: ciscoCallHistoryMib.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCallHistoryMib.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wan@cisco.com')
if mibBuilder.loadTexts: ciscoCallHistoryMib.setDescription('The MIB module to describe and store the call information of the routers for accounting purposes.')
ciscoCallHistoryMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 27, 1))
ciscoCallHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1))
ciscoCallHistoryTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoCallHistoryTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryTableMaxLength.setDescription('The upper limit on the number of entries that the ciscoCallHistoryTable may contain. A value of 0 will prevent any history from being retained. When this table is full, the oldest entry will be deleted and the new one will be created.')
ciscoCallHistoryRetainTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(15)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoCallHistoryRetainTimer.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryRetainTimer.setDescription('The minimum amount of time that an ciscoCallHistoryEntry will be maintained before being deleted. A value of 0 will prevent any history from being retained, but will not prevent callCompletion traps being genarated.')
ciscoCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3), )
if mibBuilder.loadTexts: ciscoCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryTable.setDescription('A table containing information about specific calls to a specific destination.')
ciscoCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryStartTime"), (0, "CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryIndex"))
if mibBuilder.loadTexts: ciscoCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryEntry.setDescription('The information regarding a single Connection.')
ciscoCallHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 1), TimeStamp())
if mibBuilder.loadTexts: ciscoCallHistoryStartTime.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryStartTime.setDescription('The value of sysUpTime when this call history entry was created. This will be useful for an NMS to retrieve all calls after a specific time.')
ciscoCallHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ciscoCallHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryIndex.setDescription('Index variable to access the CallHistoryEntry objects of the ciscoCallHistoryTable.')
ciscoCallHistoryCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryCallingNumber.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryCallingNumber.setDescription('The calling number for this call. If the number is not available, then it will have a length of zero. The variable is instantiated if this is an incoming call.')
ciscoCallHistoryCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryCalledNumber.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryCalledNumber.setDescription('The number this call is connected to. This variable is instantiated if this is an outgoing call.')
ciscoCallHistoryInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryInterfaceNumber.setDescription('This is the ifIndex value of the highest number of interface through which the call was made.')
ciscoCallHistoryDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryDestinationAddress.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryDestinationAddress.setDescription('The address of the host this call is connected to, if it is available. Most devices/routers connected to an interface have an address and this object will store that. The variable is not instantiated if it is not available.')
ciscoCallHistoryDestinationHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryDestinationHostName.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryDestinationHostName.setDescription('The name of the host this call is connected to. Most devices/routers connected to an interface have a name and this object will store that name.')
ciscoCallHistoryCallDisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("normalDisconnectSent", 2), ("normalDisconnectReceived", 3), ("networkOutOfOrder", 4), ("callRejected", 5), ("userBusy", 6), ("noCircuitChannelAvailable", 7), ("interworkingError", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryCallDisconnectCause.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryCallDisconnectCause.setDescription('The reason for the call termination.')
ciscoCallHistoryCallConnectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryCallConnectionTime.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryCallConnectionTime.setDescription('The value of sysUpTime when the call was connected.')
ciscoCallHistoryCallDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryCallDisconnectTime.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryCallDisconnectTime.setDescription('The value of sysUpTime when the call got disconnected last.')
ciscoCallHistoryDialReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryDialReason.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryDialReason.setDescription('The reason for initiating this call. This may include the destination address of the interesting packet that forced us to dial. This variable is instantiated for an outgoing call.')
ciscoCallHistoryConnectTimeOfDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryConnectTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryConnectTimeOfDay.setDescription('The time of day at the time of call connect.')
ciscoCallHistoryDisconnectTimeOfDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryDisconnectTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryDisconnectTimeOfDay.setDescription('The time of day when the call disconnected.')
ciscoCallHistoryTransmitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryTransmitPackets.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryTransmitPackets.setDescription('Number of packets transmitted when this call was up.')
ciscoCallHistoryTransmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryTransmitBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryTransmitBytes.setDescription('Number of Bytes transmitted when this call was up.')
ciscoCallHistoryReceivePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryReceivePackets.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryReceivePackets.setDescription('Number of packets received when this call was up.')
ciscoCallHistoryReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryReceiveBytes.setDescription('Number of Bytes received when this call was up.')
ciscoCallHistoryRecordedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryRecordedUnits.setReference('ISDN AOC supplementary service DSS1 protocol ETS 300 182')
if mibBuilder.loadTexts: ciscoCallHistoryRecordedUnits.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryRecordedUnits.setDescription('Advice of Charge recorded units when this call was up.')
ciscoCallHistoryCurrency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryCurrency.setReference('ISDN AOC supplementary service DSS1 protocol ETS 300 182')
if mibBuilder.loadTexts: ciscoCallHistoryCurrency.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryCurrency.setDescription('Advice of Charge currency type.')
ciscoCallHistoryCurrencyAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryCurrencyAmount.setReference('ISDN AOC supplementary service DSS1 protocol ETS 300 182')
if mibBuilder.loadTexts: ciscoCallHistoryCurrencyAmount.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryCurrencyAmount.setDescription('Advice of Charge currency amount when this call was up.')
ciscoCallHistoryMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 27, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneThousandth", 0), ("oneHundreth", 1), ("oneTenth", 2), ("one", 3), ("ten", 4), ("hundred", 5), ("thousand", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoCallHistoryMultiplier.setReference('ISDN AOC supplementary service DSS1 protocol ETS 300 182')
if mibBuilder.loadTexts: ciscoCallHistoryMultiplier.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryMultiplier.setDescription('Advice of Charge multiplier for currency amount')
ciscoCallHistoryMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 27, 2))
ciscoCallHistoryMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 1))
ciscoCallHistoryMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 2))
ciscoCallHistoryMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 1, 1)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibCompliance = ciscoCallHistoryMibCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCallHistoryMibCompliance.setDescription('The compliance statement for entities which implement the Cisco call History MIB')
ciscoCallHistoryMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 1, 2)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryMibGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibComplianceRev1 = ciscoCallHistoryMibComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCallHistoryMibComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco call History MIB')
ciscoCallHistoryMibComplianceV11R01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 1, 3)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryMibGroupRev1"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryMibGlobalsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibComplianceV11R01 = ciscoCallHistoryMibComplianceV11R01.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCallHistoryMibComplianceV11R01.setDescription('The compliance statement for entities which implement the Cisco call History MIB')
ciscoCallHistoryMibComplianceV11R02 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 1, 4)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryMibGroupRev2"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryMibGlobalsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibComplianceV11R02 = ciscoCallHistoryMibComplianceV11R02.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryMibComplianceV11R02.setDescription('The compliance statement for entities which implement the Cisco call History MIB')
ciscoCallHistoryMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 2, 1)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallingNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCalledNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryInterfaceNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDestinationAddress"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDestinationHostName"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallDisconnectCause"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallConnectionTime"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallDisconnectTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibGroup = ciscoCallHistoryMibGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCallHistoryMibGroup.setDescription('A collection of objects providing the call History MIB capability.')
ciscoCallHistoryMibGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 2, 2)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallingNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCalledNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryInterfaceNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDestinationAddress"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDestinationHostName"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallDisconnectCause"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallConnectionTime"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallDisconnectTime"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDialReason"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryConnectTimeOfDay"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDisconnectTimeOfDay"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryTransmitPackets"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryTransmitBytes"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryReceivePackets"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryReceiveBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibGroupRev1 = ciscoCallHistoryMibGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCallHistoryMibGroupRev1.setDescription('A collection of objects providing the call History MIB capability.')
ciscoCallHistoryMibGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 2, 3)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallingNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCalledNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryInterfaceNumber"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDestinationAddress"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDestinationHostName"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallDisconnectCause"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallConnectionTime"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCallDisconnectTime"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDialReason"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryConnectTimeOfDay"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryDisconnectTimeOfDay"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryTransmitPackets"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryTransmitBytes"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryReceivePackets"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryReceiveBytes"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryRecordedUnits"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCurrency"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryCurrencyAmount"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryMultiplier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibGroupRev2 = ciscoCallHistoryMibGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryMibGroupRev2.setDescription('A collection of objects providing the call History MIB capability.')
ciscoCallHistoryMibGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 27, 2, 2, 4)).setObjects(("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryTableMaxLength"), ("CISCO-CALL-HISTORY-MIB", "ciscoCallHistoryRetainTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallHistoryMibGlobalsGroup = ciscoCallHistoryMibGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCallHistoryMibGlobalsGroup.setDescription('A collection of objects providing control over the retention of call History.')
mibBuilder.exportSymbols("CISCO-CALL-HISTORY-MIB", ciscoCallHistoryReceiveBytes=ciscoCallHistoryReceiveBytes, ciscoCallHistoryDestinationAddress=ciscoCallHistoryDestinationAddress, ciscoCallHistoryEntry=ciscoCallHistoryEntry, ciscoCallHistoryMibCompliance=ciscoCallHistoryMibCompliance, ciscoCallHistory=ciscoCallHistory, ciscoCallHistoryMibComplianceV11R02=ciscoCallHistoryMibComplianceV11R02, ciscoCallHistoryCallDisconnectTime=ciscoCallHistoryCallDisconnectTime, ciscoCallHistoryMibGroups=ciscoCallHistoryMibGroups, ciscoCallHistoryCalledNumber=ciscoCallHistoryCalledNumber, ciscoCallHistoryMibGroup=ciscoCallHistoryMibGroup, ciscoCallHistoryDestinationHostName=ciscoCallHistoryDestinationHostName, ciscoCallHistoryTable=ciscoCallHistoryTable, ciscoCallHistoryIndex=ciscoCallHistoryIndex, ciscoCallHistoryCallDisconnectCause=ciscoCallHistoryCallDisconnectCause, ciscoCallHistoryMibObjects=ciscoCallHistoryMibObjects, PYSNMP_MODULE_ID=ciscoCallHistoryMib, ciscoCallHistoryRetainTimer=ciscoCallHistoryRetainTimer, ciscoCallHistoryRecordedUnits=ciscoCallHistoryRecordedUnits, ciscoCallHistoryStartTime=ciscoCallHistoryStartTime, ciscoCallHistoryDisconnectTimeOfDay=ciscoCallHistoryDisconnectTimeOfDay, ciscoCallHistoryCurrency=ciscoCallHistoryCurrency, ciscoCallHistoryMibConformance=ciscoCallHistoryMibConformance, ciscoCallHistoryTableMaxLength=ciscoCallHistoryTableMaxLength, ciscoCallHistoryCallingNumber=ciscoCallHistoryCallingNumber, ciscoCallHistoryMibGroupRev2=ciscoCallHistoryMibGroupRev2, ciscoCallHistoryReceivePackets=ciscoCallHistoryReceivePackets, ciscoCallHistoryMib=ciscoCallHistoryMib, ciscoCallHistoryTransmitBytes=ciscoCallHistoryTransmitBytes, ciscoCallHistoryMibGlobalsGroup=ciscoCallHistoryMibGlobalsGroup, ciscoCallHistoryMibComplianceRev1=ciscoCallHistoryMibComplianceRev1, ciscoCallHistoryMibGroupRev1=ciscoCallHistoryMibGroupRev1, ciscoCallHistoryCallConnectionTime=ciscoCallHistoryCallConnectionTime, ciscoCallHistoryDialReason=ciscoCallHistoryDialReason, ciscoCallHistoryConnectTimeOfDay=ciscoCallHistoryConnectTimeOfDay, ciscoCallHistoryInterfaceNumber=ciscoCallHistoryInterfaceNumber, ciscoCallHistoryMultiplier=ciscoCallHistoryMultiplier, ciscoCallHistoryMibCompliances=ciscoCallHistoryMibCompliances, ciscoCallHistoryTransmitPackets=ciscoCallHistoryTransmitPackets, ciscoCallHistoryCurrencyAmount=ciscoCallHistoryCurrencyAmount, ciscoCallHistoryMibComplianceV11R01=ciscoCallHistoryMibComplianceV11R01)
