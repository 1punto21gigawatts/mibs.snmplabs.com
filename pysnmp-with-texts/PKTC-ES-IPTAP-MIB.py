#
# PySNMP MIB module PKTC-ES-IPTAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PKTC-ES-IPTAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
pktcESSupportMibs, = mibBuilder.importSymbols("CLAB-DEF-MIB", "pktcESSupportMibs")
InetAddress, InetAddressPrefixLength, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetPortNumber", "InetAddressType")
pktcEScTapMediationContentId, pktcEScTapStreamIndex = mibBuilder.importSymbols("PKTC-ES-TAP-MIB", "pktcEScTapMediationContentId", "pktcEScTapStreamIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Bits, TimeTicks, MibIdentifier, ObjectIdentity, Counter32, Counter64, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Counter32", "Counter64", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "iso", "Unsigned32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
pktcESIpTapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2))
pktcESIpTapMIB.setRevisions(('2008-04-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pktcESIpTapMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: pktcESIpTapMIB.setLastUpdated('200804250000Z')
if mibBuilder.loadTexts: pktcESIpTapMIB.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: pktcESIpTapMIB.setContactInfo('Bernie McKibben Cable Television Laboratories, Inc. 858 Coal Creek Circle, Louisville, CO 80027, USA Phone: +1 303-661-3823 Email: mibs@cablelabs.com Primary Author: Srinivas Dhulipala, Cisco Systems')
if mibBuilder.loadTexts: pktcESIpTapMIB.setDescription('This module manages intercept feature for IP. This MIB is used along with TAP-MIB to intercept IP traffic. TAP-MIB along with specific filter MIBs like this MIB replace TAP-MIB. To create an IP intercept, an entry pktcESTapStreamEntry is created which contains the filter details. An entry pktcEScpktcESTapStreamEntry of TAP-MIB is created, which is the common stream information for all kinds of intercepts and type of the specific stream is set to ip in this entry.')
pktcESIpTapMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 0))
pktcESIpTapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1))
pktcESIpTapMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 2))
pktcESTapStreamEncodePacket = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1))
pktcESTapStreamCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("tapEnable", 0), ("interface", 1), ("ipV4", 2), ("ipV6", 3), ("l4Port", 4), ("dscp", 5), ("voip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcESTapStreamCapabilities.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamCapabilities.setDescription("This object displays what types of intercept streams can be configured on this type of device. This may be dependent on hardware capabilities, software capabilities. The following fields may be supported: tapEnable: set if table entries with pktcEScTapStreamInterceptEnable set to 'false' are used to pre-screen packets for intercept; otherwise these entries are ignored. interface: SNMP ifIndex Value may be used to select interception of all data crossing an interface or set of interfaces. ipV4: IPv4 Address or prefix may be used to select traffic to be intercepted. ipV6: IPv6 Address or prefix may be used to select traffic to be intercepted. l4Port: TCP/UDP Ports may be used to select traffic to be intercepted. dscp: DSCP (Differentiated Services Code Point) may be used to select traffic to be intercepted. voip: packets belonging to a voice session may be intercepted using source IPv4 address and source UDP port.")
pktcESTapStreamTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: pktcESTapStreamTable.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamTable.setDescription("The Intercept Stream IP Table lists the IPv4 and IPv6 streams to be intercepted. The same data stream may be required by multiple taps, and one might assume that often the intercepted stream is a small subset of the traffic that could be intercepted. This essentially provides options for packet selection, only some of which might be used. For example, if all traffic to or from a given interface is to be intercepted, one would configure an entry which lists the interface, and wild-card everything else. If all traffic to or from a given IP Address is to be intercepted, one would configure two such entries listing the IP Address as source and destination respectively, and wild-card everything else. If a particular voice on a teleconference is to be intercepted, on the other hand, one would extract the multicast (destination) IP address, the source IP Address, the protocol (UDP), and the source and destination ports from the call control exchange and list all necessary information. The first index indicates which Mediation Device the intercepted traffic will be diverted to. The second index permits multiple classifiers to be used together, such as having an IP address as source or destination. The value of the second index is that of the stream's counter entry in the pktcEScTapStreamTable. Entries are added to this table via pktcESTapStreamStatus in accordance with the RowStatus convention.")
pktcESTapStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1), ).setIndexNames((0, "PKTC-ES-TAP-MIB", "pktcEScTapMediationContentId"), (0, "PKTC-ES-TAP-MIB", "pktcEScTapStreamIndex"))
if mibBuilder.loadTexts: pktcESTapStreamEntry.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamEntry.setDescription('A stream entry indicates a single data stream to be intercepted to a Mediation Device. Many selected data streams may go to the same application interface, and many application interfaces are supported.')
pktcESTapStreamInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamInterface.setReference('RFC 1213, RFC 2096')
if mibBuilder.loadTexts: pktcESTapStreamInterface.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamInterface.setDescription('The ifIndex value of the interface over which traffic to be intercepted is received or transmitted. The interface may be physical or virtual. If this is the only parameter specified, and it is other than -2, -1 or 0, all traffic on the selected interface will be chosen. If the value is zero, matching traffic may be received or transmitted on any interface. Additional selection parameters must be selected to limit the scope of traffic intercepted. This is most useful on non-routing platforms or on intercepts placed elsewhere than a subscriber interface. If the value is -1, one or both of pktcESTapStreamDestinationAddress and pktcESTapStreamSourceAddress must be specified with prefix length greater than zero. Matching traffic on the interface pointed to by ipRouteIfIndex or ipCidrRouteIfIndex values associated with those values is intercepted, whichever is specified to be more focused than a default route. If routing changes, either by operator action or by routing protocol events, the interface will change with it. This is primarily intended for use on subscriber interfaces and other places where routing is guaranteed to be symmetrical. In both of these cases, it is possible to have the same packet selected for intersection on both its ingress and egress interface. Nonetheless, only one instance of the packet is sent to the Mediation Device. If the value is -2, packets belonging to a Voice over IP (VoIP) session identified by pktcESTapStreamSourceAddress, pktcESTapStreamSourceLen & pktcESTapStreamSourceL4PortMin may be intercepted, as a specific voice session can be identified with source IP address and udp port number. Other selection parameters may be not considered, even if they are set by the Mediation Device. This value must be set when creating a stream entry, either to select an interface, to select all interfaces, or to select the interface that routing chooses. Some platforms may not implement the entire range of options.')
pktcESTapStreamAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamAddrType.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamAddrType.setDescription('The type of address, used in packet selection.')
pktcESTapStreamDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamDestinationAddress.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamDestinationAddress.setDescription('The Destination address or prefix used in packet selection. This address will be of the type specified in pktcESTapStreamAddrType.')
pktcESTapStreamDestinationLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 4), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamDestinationLength.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamDestinationLength.setDescription('The length of the Destination Prefix. A value of zero causes all addresses to match. This prefix length will be consistent with the type specified in pktcESTapStreamAddrType.')
pktcESTapStreamSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 5), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamSourceAddress.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamSourceAddress.setDescription('The Source Address used in packet selection. This address will be of the type specified in pktcESTapStreamAddrType.')
pktcESTapStreamSourceLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamSourceLength.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamSourceLength.setDescription('The length of the Source Prefix. A value of zero causes all addresses to match. This prefix length will be consistent with the type specified in pktcESTapStreamAddrType.')
pktcESTapStreamTosByte = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamTosByte.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamTosByte.setDescription('The value of the TOS byte, when masked with pktcESTapStreamTosByteMask, of traffic to be intercepted. If pktcESTapStreamTosByte&(~pktcESTapStreamTosByteMask)!=0, configuration is rejected.')
pktcESTapStreamTosByteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamTosByteMask.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamTosByteMask.setDescription('The value of the TOS byte in an IPv4 or IPv6 header is ANDed with pktcESTapStreamTosByteMask and compared with pktcESTapStreamTosByte. If the values are equal, the comparison is equal. If the mask is zero and the TosByte value is zero, the result is to always accept.')
pktcESTapStreamFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1048575), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamFlowId.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamFlowId.setDescription('The flow identifier in an IPv6 header. -1 indicates that the Flow Id is unused.')
pktcESTapStreamProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamProtocol.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamProtocol.setDescription("The IP protocol to match against the IPv4 protocol number or the IPv6 Next- Header number in the packet. -1 means 'any IP protocol'.")
pktcESTapStreamDestL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 11), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamDestL4PortMin.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamDestL4PortMin.setDescription('The minimum value that the layer-4 destination port number in the packet must have in order to match. This value must be equal to or less than the value specified for this entry in pktcESTapStreamDestL4PortMax. If both pktcESTapStreamDestL4PortMin and pktcESTapStreamDestL4PortMax are at their default values, the port number is effectively unused.')
pktcESTapStreamDestL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 12), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamDestL4PortMax.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamDestL4PortMax.setDescription('The maximum value that the layer-4 destination port number in the packet must have in order to match this classifier entry. This value must be equal to or greater than the value specified for this entry in pktcESTapStreamDestL4PortMin. If both pktcESTapStreamDestL4PortMin and pktcESTapStreamDestL4PortMax are at their default values, the port number is effectively unused.')
pktcESTapStreamSourceL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 13), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamSourceL4PortMin.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamSourceL4PortMin.setDescription('The minimum value that the layer-4 destination port number in the packet must have in order to match. This value must be equal to or less than the value specified for this entry in pktcESTapStreamSourceL4PortMax. If both pktcESTapStreamSourceL4PortMin and pktcESTapStreamSourceL4PortMax are at their default values, the port number is effectively unused.')
pktcESTapStreamSourceL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 14), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamSourceL4PortMax.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamSourceL4PortMax.setDescription('The maximum value that the layer-4 destination port number in the packet must have in order to match this classifier entry. This value must be equal to or greater than the value specified for this entry in pktcESTapStreamSourceL4PortMin. If both pktcESTapStreamSourceL4PortMin and pktcESTapStreamSourceL4PortMax are at their default values, the port number is effectively unused.')
pktcESTapStreamVRF = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 15), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamVRF.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamVRF.setDescription('An ASCII string, which is the name of a Virtual Routing and Forwarding (VRF) table comprising the routing context of a Virtual Private Network. The interface or set of interfaces on which the packet might be found should be selected from the set of interfaces in the VRF table. A string length of zero implies that global routing table be used for selection of interfaces on which the packet might be found.')
pktcESTapStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 1, 1, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcESTapStreamStatus.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamStatus.setDescription("The status of this conceptual row. This object manages creation, modification, and deletion of rows in this table. When any rows must be changed, pktcESTapStreamStatus must be first set to 'notInService'.")
pktcESIpTapMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 2, 1))
pktcESIpTapMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 2, 2))
pktcESIpTapMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 2, 1, 1)).setObjects(("PKTC-ES-IPTAP-MIB", "pktcESIpTapStreamComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESIpTapMIBCompliance = pktcESIpTapMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: pktcESIpTapMIBCompliance.setDescription('The compliance statement for entities which implement the Intercept MIB for IP.')
pktcESIpTapStreamComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 2, 2, 2, 1)).setObjects(("PKTC-ES-IPTAP-MIB", "pktcESTapStreamCapabilities"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamInterface"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamAddrType"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamDestinationAddress"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamDestinationLength"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamSourceAddress"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamSourceLength"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamTosByte"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamTosByteMask"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamFlowId"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamProtocol"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamDestL4PortMin"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamDestL4PortMax"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamSourceL4PortMin"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamSourceL4PortMax"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamVRF"), ("PKTC-ES-IPTAP-MIB", "pktcESTapStreamStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESIpTapStreamComplianceGroup = pktcESIpTapStreamComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: pktcESIpTapStreamComplianceGroup.setDescription('These objects are necessary for a description of IPv4 and IPv6 packets to select for interception.')
mibBuilder.exportSymbols("PKTC-ES-IPTAP-MIB", pktcESTapStreamTosByteMask=pktcESTapStreamTosByteMask, pktcESTapStreamSourceLength=pktcESTapStreamSourceLength, pktcESTapStreamSourceL4PortMin=pktcESTapStreamSourceL4PortMin, pktcESTapStreamTable=pktcESTapStreamTable, pktcESTapStreamDestinationLength=pktcESTapStreamDestinationLength, pktcESIpTapMIBNotifs=pktcESIpTapMIBNotifs, pktcESIpTapMIBCompliances=pktcESIpTapMIBCompliances, pktcESIpTapMIB=pktcESIpTapMIB, pktcESTapStreamSourceL4PortMax=pktcESTapStreamSourceL4PortMax, pktcESTapStreamStatus=pktcESTapStreamStatus, pktcESIpTapMIBConform=pktcESIpTapMIBConform, pktcESIpTapMIBGroups=pktcESIpTapMIBGroups, pktcESTapStreamInterface=pktcESTapStreamInterface, pktcESTapStreamCapabilities=pktcESTapStreamCapabilities, pktcESTapStreamVRF=pktcESTapStreamVRF, pktcESTapStreamSourceAddress=pktcESTapStreamSourceAddress, pktcESTapStreamEncodePacket=pktcESTapStreamEncodePacket, pktcESIpTapMIBCompliance=pktcESIpTapMIBCompliance, pktcESIpTapMIBObjects=pktcESIpTapMIBObjects, pktcESTapStreamDestL4PortMin=pktcESTapStreamDestL4PortMin, pktcESTapStreamFlowId=pktcESTapStreamFlowId, pktcESTapStreamDestinationAddress=pktcESTapStreamDestinationAddress, pktcESTapStreamTosByte=pktcESTapStreamTosByte, pktcESIpTapStreamComplianceGroup=pktcESIpTapStreamComplianceGroup, pktcESTapStreamEntry=pktcESTapStreamEntry, PYSNMP_MODULE_ID=pktcESIpTapMIB, pktcESTapStreamProtocol=pktcESTapStreamProtocol, pktcESTapStreamDestL4PortMax=pktcESTapStreamDestL4PortMax, pktcESTapStreamAddrType=pktcESTapStreamAddrType)
