#
# PySNMP MIB module CISCO-MEDIA-GATEWAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MEDIA-GATEWAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, EntPhysicalIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "CiscoPort", "EntPhysicalIndexOrZero")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetPortNumber, InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, iso, Counter32, Gauge32, Integer32, Unsigned32, ObjectIdentity, ModuleIdentity, MibIdentifier, NotificationType, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "iso", "Counter32", "Gauge32", "Integer32", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
ciscoMediaGatewayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 324))
ciscoMediaGatewayMIB.setRevisions(('2009-02-25 00:00', '2006-06-15 00:00', '2005-09-01 00:00', '2004-11-19 00:00', '2004-07-30 00:00', '2003-04-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setRevisionsDescriptions(('Added object cmgwV23Enabled to cMediaGwTable.', 'Added object cmgwLawInterceptEnabled to cMediaGwTable. Added object cMediaGwCcCfgDefRtpNamePrefix to cMediaGwCallControlConfigTable. ', 'Added object cmgwSrcFilterEnabled to cMediaGwTable. Added object cmgwSignalProtocolConfigVer to cmgwSignalProtocolTable. Added cMediaGwRscStatsTable.', 'Added object cmgwSignalProtocolPreference to cmgwSignalProtocolTable.', "(1) Added the following objects: cmgwVtMappingMode, cMediaGwCcCfgDefBearerTraffic, cmgwSignalMgcProtocolPort (2) Added new enum 'tgcp' to cmgwSignalProtocol ", 'Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setLastUpdated('200902250000Z')
if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice-gateway@cisco.com')
if mibBuilder.loadTexts: ciscoMediaGatewayMIB.setDescription("The MIB module for managing Trunk Media Gateway. A Media Gateway is a network element that provides conversion between the audio signals carried on telephone circuits and data packets carried over the Internet or over other packet data networks. Trunk Media Gateway interface is between the telephone network and a Voice over IP/ATM network. The interface on a Trunk Gateway terminates a trunk connected to PSTN switch (e.g., Class 5, Class 4, etc.). Media Gateways use a call control architecture where the call control 'intelligence' is outside the gateways and handled by external call control elements, called Media Gateway Controllers (MGCs). The MGCs or Call Agents, synchronize with each other to send coherent commands to the gateways under their control. MGCs use master/slave protocols to command the gateways under their control. Examples of these protocols are: * Simple Gateway Control Protocol * Media Gateway Control Protocol * Megaco (H.248) * Simple Resource Control Protocol To connect MG to MGCs using these control protocols through an IP/UDP Ports which must be configured. To resolve IP Addresses, DNS name services may be used. ")
ciscoMediaGatewayMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 0))
ciscoMediaGatewayMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 1))
cMediaGwConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1))
cMediaGwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2))
class CGwServiceState(TextualConvention, Integer32):
    description = 'This textual convention defines the service state of media gateway. The possible service states are: inService: Gateway is ready to provide service. In this state, Gateway will respond to connection control requests, send autonomous messages to the call agent as applicable, etc. forcedOutOfService: Gateway is in Out-Of-Service State. All calls destroyed on the GW. A Service Change message with FORCED method is sent to CA. No new connections are allowed. gracefulOutOfService: Gateway is in Out-Of-Service State. All existing calls will not be affected. A Service Change message with GRACEFUL method is sent to CA. No new connections are allowed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("inService", 1), ("forcedOutOfService", 2), ("gracefulOutOfService", 3))

class CGwAdminState(TextualConvention, Integer32):
    description = 'This textual convention defines the administrative state of media gateway. The possible administrative states are as follows: inService: Gateway would be restored to in-service status and a ServiceChange with method RESTART message will be sent to Call Agent forcefulOutOfService: Gateway would be in Out-Of-Service State Any existing connections on the GW will be deleted. A ServiceChange with method FORCED message will be sent to call agent. New connections would be blocked. gracefulOutOfService: Gateway would be in in Out-Of-Service State Any existing connections on the GW will not be affected. A ServiceChange with method GRACEFUL message will be sent to call agent. New connections would be blocked.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("inService", 1), ("forcedOutOfService", 2), ("gracefulOutOfService", 3))

class GatewayLifNumber(TextualConvention, Unsigned32):
    description = 'An index that uniquely identifies a LIF (Logical Interface) in the media gateway. LIF is a logical interface which groups TDM(DS1) interfaces into packet resource partitions (PVCs) in the media gateway. LIF is used for: AAL5 (VoIP) switching AAL2 (VoATM) switching, only if support virtual gateway '
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 255)

class CVoiceTonePlanIndex(TextualConvention, Unsigned32):
    description = 'This textual convention defines the type of index for identifying a voice tone plane in a Media gateway.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class CVoiceTonePlanIndexOrZero(TextualConvention, Unsigned32):
    description = 'This textual convention uniquely identifies the voice tone plan to be used in a voice DS0 group. The value of 0 means the default tone plan specified in the media gateway (the value of cMediaGwCcCfgDefaultTonePlanId) to be used. A value greater than 0 means the tone plan specified by the index of the cvtcTonePlanTable to be used (same as cvtcTonePlanId).'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CCallControlProfileIndex(TextualConvention, Unsigned32):
    description = 'This textual convention defines the type of index that is used for identifying a call control profile of XGCP and H.248 protocol.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class CCallControlProfileIndexOrZero(TextualConvention, Unsigned32):
    description = "This textual convention is an extension of the CCallControlProfileIndex convention. The latter defines a greater than zero value used to identify a call control profile in a media gateway. This extension permits the additional value of zero. The value of '0' means the default call control profile of the media gateway."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CCallControlJitterDelayMode(TextualConvention, Integer32):
    description = 'This textual convention defines the jitter buffer mode in a call connection. adaptive(1) - means to use jitter nominal delay as the initial jitter buffers size and let the DSP pick the optimal value of the jitter buffer size between the range of jitter maximum delay and jitter minimum delay. fixed(2) - means to use a constant jitter buffer size which is specified by jitter nominal delay. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("adaptive", 1), ("fixed", 2))

cMediaGwTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1), )
if mibBuilder.loadTexts: cMediaGwTable.setStatus('current')
if mibBuilder.loadTexts: cMediaGwTable.setDescription('This table contains the global media gateway parameters information. It supports the modification of the global media gateway parameters.')
cMediaGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cMediaGwEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaGwEntry.setDescription('A Media Gateway Entry. At system power-up, an entry is created by the agent if the system detects a media gateway module has been added to the system, and an entry is deleted if the entry associated media gateway module has been removed from the system.')
cmgwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cmgwIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwIndex.setDescription('An index that uniquely identifies an entry in the cMediaGwTable.')
cmgwDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwDomainName.setStatus('current')
if mibBuilder.loadTexts: cmgwDomainName.setDescription("This object is used to represent a domain name under which the Media Gateway could also be registered in a DNS name server. The value of this object reflects the value of cmgwConfigDomainName from the entry with a value of 'gateway(1)' for object cmgwConfigDomainNameEntity of cMediaGwDomainNameConfigTable. If there is no entry in cMediaGwDomainNameConfigTable with 'gateway(1)' of cmgwConfigDomainNameEntity, then the value of this object will be empty string.")
cmgwPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 3), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwPhysicalIndex.setDescription('This object represents the entPhysicalIndex of the card in which media gateway is running. It will contain value 0 if the entPhysicalIndex value is not available or not applicable')
cmgwServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 4), CGwServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwServiceState.setStatus('current')
if mibBuilder.loadTexts: cmgwServiceState.setDescription("This object indicates the current service state of the Media Gateway. This object is controlled by 'cmgwAdminState' object.")
cmgwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 5), CGwAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwAdminState.setStatus('current')
if mibBuilder.loadTexts: cmgwAdminState.setDescription("This object is used to change the service state of the Media Gateway from inService to outOfService or from outOfService to inService. The resulting service state of the gateway is represented by 'cmgwServiceState'.")
cmgwGraceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwGraceTime.setStatus('current')
if mibBuilder.loadTexts: cmgwGraceTime.setDescription('This object is used to represent grace period. The grace period (restart delay in RSIP message) is expressed in a number of seconds. It means how soon the gateway will be taken out of service. The value -1 indicates that the grace period time is disabled.')
cmgwVtMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("titan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwVtMappingMode.setStatus('current')
if mibBuilder.loadTexts: cmgwVtMappingMode.setDescription("This object is used to represent the VT (sonet Virtual Tributary) counting. standard - standard counting (based on Bellcore TR253) titan - TITAN5500 counting (based on Tellabs TITAN 5500) Note: 'titan' is valid only if sonet line medium type (sonetMediumType of SONET-MIB) is 'sonet' and sonet path payload type (cspSonetPathPayload of CISCO-SONET-MIB) is 'vt15vc11'. ")
cmgwSrcFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSrcFilterEnabled.setStatus('current')
if mibBuilder.loadTexts: cmgwSrcFilterEnabled.setDescription("This object is used to enable or disable the source IP and port filtering with MGC for security consideration as follows: 'true' - source IP and port filter is enabled 'false' - source IP and port filter is disable ")
cmgwLawInterceptEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwLawInterceptEnabled.setStatus('current')
if mibBuilder.loadTexts: cmgwLawInterceptEnabled.setDescription("This object is used to enable or disable the lawful intercept for government. as follows: 'true' - enable lawful intercept 'false' - disable lawful intercept ")
cmgwV23Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwV23Enabled.setStatus('current')
if mibBuilder.loadTexts: cmgwV23Enabled.setDescription("This object is to enable or disable V23 tone. Setting the object value to 'true', will cause VXSM (Voice Switching Service Module) to detect V23 tone. ")
cmgwSignalProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2), )
if mibBuilder.loadTexts: cmgwSignalProtocolTable.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolTable.setDescription('This table contains the available signaling protocols that are supported by the media gateway for communication with MGCs.')
cmgwSignalProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolIndex"))
if mibBuilder.loadTexts: cmgwSignalProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolEntry.setDescription('Each entry represents an signaling protocol supported by the media gateway.')
cmgwSignalProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmgwSignalProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolIndex.setDescription('An index that uniquely identifies an entry in cmgwSignalProtocolTable.')
cmgwSignalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mgcp", 2), ("h248", 3), ("tgcp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwSignalProtocol.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocol.setDescription('This object is used to represent the protocol type. other - None of the following types. mgcp - Media Gateway Control Protocol h248 - Media Gateway Control (ITU H.248) tgcp - Trunking Gateway Control Protocol')
cmgwSignalProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwSignalProtocolVersion.setReference('MCGP 1.0 is documented in RFC2705.')
if mibBuilder.loadTexts: cmgwSignalProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolVersion.setDescription("This object is used to represent the protocol version. For example cmgwSignalProtocol is 'mgcp(2)' and this object is string '1.0'. cmgwSignalProtocol is 'h248(3)' and this object is set to '2.0'.")
cmgwSignalProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 4), CiscoPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalProtocolPort.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolPort.setDescription("This object is used to represent the UDP port associated with the protocol. If the value of cmgwSignalProtocol is 'mgcp(2)' and the value of cmgwSignalProtcolVersion is '1.0', the default value of this object is '2727'. If the value of cmgwSignalProtocol is 'h248(3)' and the value of cmgwSignalProtcolVersion is '1.0', the default value of this object is '2944'.")
cmgwSignalMgcProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalMgcProtocolPort.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalMgcProtocolPort.setDescription("This object specifies the protocol port of the Media Gateway Controller (MGC). If the value of cmgwSignalProtocol is 'mgcp(2)' or 'tgcp(4)' and the value of cmgwSignalProtcolVersion is '1.0', the default value of this object is '2427'. If the value of cmgwSignalProtocol is 'h248(3)' and the value of cmgwSignalProtcolVersion is '1.0', the default value of this object is '2944'.")
cmgwSignalProtocolPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalProtocolPreference.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolPreference.setDescription('This object specifies the preference of the signal protocol supported in the media gateway. If this object is set to 0, the corresponding signal protocol will not be used by the gateway. The value of this object is unique within the corresponding gateway. The entry with lower value has higher preference.')
cmgwSignalProtocolConfigVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgwSignalProtocolConfigVer.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolConfigVer.setDescription("This object specifies the protocol version used by the gateway in the messages to MGC in order to exchange the service capabilities. For example cmgwSignalProtocol is 'h248(3)' and this object can be string '1' or '1.0', '2' or '2.0'. 'MAX' is a special string indicating the gateway will use the highest protocol version supported in the gateway, but it can be changed to lower version after it negotiates with MGC. The final negotiated protocol version will be indicated in cmgwSignalProtocolVersion. The version strings other than 'MAX' can be specified for the gateway to communicate with the MGC which doesn't support service capabilities negotiation. For example if a MGC supports only version 1.0 MGCP, this object should be set to '1' to instruct the gateway using MGCP version 1.0 format messages to communicate with MGC. ")
cMediaGwIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3), )
if mibBuilder.loadTexts: cMediaGwIpConfigTable.setStatus('current')
if mibBuilder.loadTexts: cMediaGwIpConfigTable.setDescription('This table contains a list of media gateway IP address and the IP address associated interface information. If IP address associated interface is PVC, only aal5 control PVC or aal5 bearer PVC are valid. When the PVC is aal5 control, the IP address is used to communicate to MGC; when the PVC is aal5 bearer, the IP address is used to communicate to other gateway. The PVC information is kept in cwAtmChanExtConfigTable: cwacChanPvcType: aal5/aal2/aal1 cwacChanApplication: control/bearer/signaling If IP address associated interface is not PVC, refer to the IP addresses associated interface table for the usage of IP address.')
cMediaGwIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigIndex"))
if mibBuilder.loadTexts: cMediaGwIpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaGwIpConfigEntry.setDescription('A Media Gateway IP configuration entry. Each entry represents a media gateway IP address for MGCs to communicate with the media gateway.')
cmgwIpConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: cmgwIpConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigIndex.setDescription('A unique index to identify each media gateway IP address.')
cmgwIpConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigIfIndex.setDescription('This object is ifIndex of the interface which is associated to the media gateway IP address. For ATM interface, the IP address should be associated to an existing PVC: cmgwIpConfigIfIndex represents port of the PVC cmgwIpConfigVpi represents VPI of the PVC cmgwIpConfigVci represents VCI of the PVC And one PVC only can be associated with one IP address. If this object is set to zero which means the IP address is not associated to any interface.')
cmgwIpConfigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigVpi.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigVpi.setDescription('This object represents VPI of the PVC which is associated to the IP address. If the IP address is not associated to PVC, the value of this object is set to -1.')
cmgwIpConfigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigVci.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigVci.setDescription('This object represents VCI of the PVC which is associated to the IP address. If the IP address is not associated to PVC, the value of this object is set to -1.')
cmgwIpConfigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigAddrType.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigAddrType.setDescription('This object is the IP address type. ')
cmgwIpConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigAddress.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigAddress.setDescription('The configured IP address of media gateway. This object can not be modified. ')
cmgwIpConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigSubnetMask.setDescription('This object is used to specify the number of leading one bits which from the mask to be logical-ANDed with the media gateway address before being compared to the value in the cmgwIpCofigAddress. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of the mask formed from x with the value of the corresponding instance of the cmgwIpCofigAddress object is not equal to cmgwIpCofigAddress.')
cmgwIpConfigDefaultGwIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigDefaultGwIp.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigDefaultGwIp.setDescription("This object specifies cmgwIpConfigAddress of the entry will become the default gateway address. This object can be set to 'true' for only one entry in the table.")
cmgwIpConfigForRemoteMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigForRemoteMapping.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigForRemoteMapping.setDescription("This object specifies whether the address defined in cmgwIpConfigAddress is the address mapping at the remote end of this PVC. If this object is set to 'true', the address defined in cmgwIpConfigAddress is for the remote end of the PVC. If this object is set to 'false', the address defined in cmgwIpConfigAddress is for the local end of the PVC.")
cmgwIpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwIpConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmgwIpConfigRowStatus.setDescription("This object is used to add and delete an entry. When an entry of the table is created, the following objects are mandatory: cmgwIpConfigIfIndex cmgwIpConfigVpi cmgwIpConfigVci cmgwIpConfigAddress cmgwIpConfigSubnetMask These objects can not be modified after the value of this object is set to 'active'. Modification can only be done by deleting and re-adding the entry again. After the system verify the validity of the data, it will set the cmgwIpConfigRowStatus to 'active'.")
cMediaGwDomainNameConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4), )
if mibBuilder.loadTexts: cMediaGwDomainNameConfigTable.setStatus('current')
if mibBuilder.loadTexts: cMediaGwDomainNameConfigTable.setDescription('This table provides the domain names which are configured by users. The domain names can be used to represent IP addresses for: gateway External DNS name server MGC (call agent) ')
cMediaGwDomainNameConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainNameIndex"))
if mibBuilder.loadTexts: cMediaGwDomainNameConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaGwDomainNameConfigEntry.setDescription('Each entry represents a domain name used in the system. Creation and deletion are supported. Modification is prohibited.')
cmgwConfigDomainNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: cmgwConfigDomainNameIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwConfigDomainNameIndex.setDescription('An index that is uniquely identifies a domain name configured in the system.')
cmgwConfigDomainNameEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gateway", 1), ("dnsServer", 2), ("mgc", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwConfigDomainNameEntity.setStatus('current')
if mibBuilder.loadTexts: cmgwConfigDomainNameEntity.setDescription("This object indicates which entity to use this domain name. gateway(1) - The domain name of media gateway. With the same cmgwIndex, there is one and only one entry allowed with the value 'gateway(1)' of this object. dnsServer(2) - The domain name of DNS name server that is used by Media gateway to find Internet Network Address from a DNS name. mgc(3) - The domain name of a MGC (Media Gateway Controller) associated with the media gateway. ")
cmgwConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwConfigDomainName.setStatus('current')
if mibBuilder.loadTexts: cmgwConfigDomainName.setDescription("This object specifies the domain name. The domain name should be unique if there are more than one entries having the same value in the object cmgwConfigDomainNameEntity. For example, the gateway domain name should be unique if the cmgwConfigDomainNameEntity has the value of 'gateway(1)'.")
cmgwConfigDomainNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwConfigDomainNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmgwConfigDomainNameRowStatus.setDescription("This object is used to add and delete an entry. When an entry is created, the following objects are mandatory: cmgwConfigDomainName cmgwConfigDomainNameEntity When deleting domain name of DNS name server (cmgwConfigDomainNameEntity is dnsServer (2)), the cMediaGwDnsIpConfigTable should be empty. Adding/deleting entry with cmgwConfigDomainNameEntity of 'mgc' will cause adding/deleting entry in cMgcConfigTable (CISCO-MGC-MIB) automatically. The cmgwConfigDomainName and cmgwConfigDomainNameEntity can not be modified if the value of this object is 'active'. ")
cMediaGwDnsIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5), )
if mibBuilder.loadTexts: cMediaGwDnsIpConfigTable.setStatus('current')
if mibBuilder.loadTexts: cMediaGwDnsIpConfigTable.setDescription("There is only one DNS name server on a gateway and the domain name of the DNS name server is put on cMediaGwDomainNameConfigTable with 'dnsServer (2)'. There could be multi IP addresses are associated with the DNS name server, this table is used to store these IP addresses. If any domain name using external resolution, the last entry of this table is not allowed to be deleted.")
cMediaGwDnsIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpIndex"))
if mibBuilder.loadTexts: cMediaGwDnsIpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaGwDnsIpConfigEntry.setDescription('Each entry represents an IP address of the DNS name server.')
cmgwDnsIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: cmgwDnsIpIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwDnsIpIndex.setDescription('An index that uniquely identifies an IP address of DNS name server.')
cmgwDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwDnsDomainName.setStatus('current')
if mibBuilder.loadTexts: cmgwDnsDomainName.setDescription("The domain name of DNS name server. The value of this object reflects the value of cmgwConfigDomainName from the entry with a value of 'dnsServer(2)' for object cmgwConfigDomainNameEntity of cMediaGwDomainNameConfigTable. If there is no entry in cMediaGwDomainNameConfigTable with 'dnsServer(2)' of cmgwConfigDomainNameEntity, then the value of this object will be empty string.")
cmgwDnsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwDnsIpType.setStatus('current')
if mibBuilder.loadTexts: cmgwDnsIpType.setDescription('DNS name server IP address type.')
cmgwDnsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwDnsIp.setStatus('current')
if mibBuilder.loadTexts: cmgwDnsIp.setDescription('The IP address of DNS name server. The IP address of DNS name server must be unique in this table.')
cmgwDnsIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgwDnsIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmgwDnsIpRowStatus.setDescription("This object is used to add and delete an entry. When an entry of the table is created, the value of this object should be set to 'createAndGo' and the following objects are mandatory: cmgwDnsIp When the user wants to delete the entry, the value of this object should be set to 'destroy'. The entry can not be modified if the value of this object is 'active'.")
cmgwLifTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6), )
if mibBuilder.loadTexts: cmgwLifTable.setStatus('current')
if mibBuilder.loadTexts: cmgwLifTable.setDescription('This table is for managing LIF (Logical Interface) in a media gateway. LIF is a logical interface which groups the TDM DSx1s associated with a set of packet resource partitions (PVCs) in a media gateway. LIF is used for: 1. VoIP switching 2. VoATM switching ')
cmgwLifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwLifNumber"))
if mibBuilder.loadTexts: cmgwLifEntry.setStatus('current')
if mibBuilder.loadTexts: cmgwLifEntry.setDescription('An entry of this table is created by the media gateway when it supports the VoIP/VoATM application.')
cmgwLifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1, 1), GatewayLifNumber())
if mibBuilder.loadTexts: cmgwLifNumber.setStatus('current')
if mibBuilder.loadTexts: cmgwLifNumber.setDescription('An index that uniquely identifies a LIF in the media gateway.')
cmgwLifPvcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwLifPvcCount.setStatus('current')
if mibBuilder.loadTexts: cmgwLifPvcCount.setDescription('This object represents the total number of PVC within this LIF. When users associate/disassociate a PVC with a LIF by giving a non-zero/zero value of cwacChanLifNum in cwAtmChanExtConfigTable, the value of this object will be incremented/decremented accordingly. The value zero means there is no PVC associated with the LIF.')
cmgwLifVoiceIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 6, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwLifVoiceIfCount.setStatus('current')
if mibBuilder.loadTexts: cmgwLifVoiceIfCount.setDescription('This object represents the total number of Voice Interfaces within this LIF. When users associate/disassociate a Voice Interface with a LIF by giving a non-zero/zero value of ccasVoiceCfgLifNumber for the DS0 group in ccasVoiceExtCfgTable, the value of this object will be incremented/decremented accordingly. The value zero means there is no Voice Interface associated with the LIF.')
cMediaGwCallControlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7), )
if mibBuilder.loadTexts: cMediaGwCallControlConfigTable.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCallControlConfigTable.setDescription('This table defines general call control attributes for the media gateway.')
cMediaGwCallControlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cMediaGwCallControlConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCallControlConfigEntry.setDescription('One entry for each media gateway which supports call control protocol.')
cMediaGwCcCfgControlTos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgControlTos.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgControlTos.setDescription('This object specifies Type Of Service (TOS) field of IP header for the signaling control packet in VoIP application.')
cMediaGwCcCfgBearerTos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgBearerTos.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgBearerTos.setDescription('This object specifies Type Of Service (TOS) field of IP header for the voice payload packet in VoIP application.')
cMediaGwCcCfgNtePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(96, 127)).clone(101)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgNtePayload.setReference('RFC2833, 3. RTP Payload Format for Named Telephone Events')
if mibBuilder.loadTexts: cMediaGwCcCfgNtePayload.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgNtePayload.setDescription('This object specifies NTE (Named Telephony Events) payload type.')
cMediaGwCcCfgNsePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(98, 117)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgNsePayload.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgNsePayload.setDescription('This object specifies NSE (Network Signaling Events) payload type.')
cMediaGwCcCfgNseRespTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgNseRespTimer.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgNseRespTimer.setDescription('This object specifies Network Signaling Event (NSE) timeout value.')
cMediaGwCcCfgVbdJitterDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 6), CCallControlJitterDelayMode().clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterDelayMode.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterDelayMode.setDescription('The object specifies the jitter buffer mode applied to a VBD (Voice Band Data) call connection. adaptive - means to use cMediaGwCcCfgVbdJitterNomDelay as the initial jitter buffers size and let the DSP pick the optimal value of the jitter buffer size between the range of cMediaGwCcCfgVbcJitterMaxDelay and cMediaGwCcCfgVbcJitterMinDelay. fixed - means to use a constant jitter buffer size which is specified by cMediaGwCcCfgVbdJitterNomDelay. ')
cMediaGwCcCfgVbdJitterMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 135)).clone(135)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterMaxDelay.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterMaxDelay.setDescription('This object specifies the maximum jitter buffer size in VBD (Voice Band Data)')
cMediaGwCcCfgVbdJitterNomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 135)).clone(70)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterNomDelay.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterNomDelay.setDescription('This object specifies the nominal jitter buffer size in VBD (Voice Band Data)')
cMediaGwCcCfgVbdJitterMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 135))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterMinDelay.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgVbdJitterMinDelay.setDescription('This object specifies the nominal jitter buffer size in VBD (Voice Band Data)')
cMediaGwCcCfgDefaultTonePlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 10), CVoiceTonePlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDefaultTonePlanId.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgDefaultTonePlanId.setDescription('This object specifies the default tone plan index (the value of cvtcTonePlanId) for the media gateway.')
cMediaGwCcCfgDescrInfoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDescrInfoEnabled.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgDescrInfoEnabled.setDescription("This object specifies whether the media gateway supports descriptive suffix of the name schema for terminations. There are two parts in name schema of termination, prefix and suffix. For example the name schema for a DS (Digital Subscriber) termination, can be 'DS/OC3_2/DS1_6/DS0_24'. It represents DS type termination in 2nd OC3 line, 6th DS1 and 24th DS0 channel. In this example, 'DS' is the prefix, 'OC3_2/DS1_6/DS0_24' is the suffix. The name schema in above example has a descriptive suffix. The non-descriptive suffix for the same termination is '2/6/24' and name schema becomes 'DS/2/6/24'. This object can not be modified if there is any termination existing in the media gateway.")
cMediaGwCcCfgDsNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone(hexValue="4453")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDsNamePrefix.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgDsNamePrefix.setDescription("This object specifies the prefix of the name schema for DS (Digital Subscriber) terminations. The value of this object must be unique among the following objects: cMediaGwCcCfgDsNamePrefix cMediaGwCcCfgRtpNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgDefRtpNamePrefix This object can not be modified when there is any DS termination existing in the media gateway. It is default to 'DS'.")
cMediaGwCcCfgRtpNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone(hexValue="525450")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgRtpNamePrefix.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgRtpNamePrefix.setDescription("This object specifies the prefix of the name schema for RTP (Real-Time Transport Protocol) terminations. The value of this object must be unique among the following objects: cMediaGwCcCfgDsNamePrefix cMediaGwCcCfgRtpNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgDefRtpNamePrefix This object can not be modified when there is any RTP termination type existing in the media gateway. It is default to 'RTP'.")
cMediaGwCcCfgAal1SvcNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone(hexValue="41414C312F535643")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgAal1SvcNamePrefix.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgAal1SvcNamePrefix.setDescription("This object specifies the prefix of the name schema for voice over AAL1 SVC (Switched Virtual Circuit) terminations. The value of this object must be unique among the following objects: cMediaGwCcCfgDsNamePrefix cMediaGwCcCfgRtpNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgDefRtpNamePrefix This object can not be modified when there is any AAL1 SVC termination type existing in the media gateway. It is default to 'AAL1/SVC'.")
cMediaGwCcCfgAal2SvcNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone(hexValue="41414C322F535643")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgAal2SvcNamePrefix.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgAal2SvcNamePrefix.setDescription("This object specifies the prefix of the name schema for voice over AAL2 SVC (Switched Virtual Circuit) terminations. The value of this object must be unique among the following objects: cMediaGwCcCfgDsNamePrefix cMediaGwCcCfgRtpNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgAal2SvcNamePrefix cMediaGwCcCfgDefRtpNamePrefix This object can not be modified when there is any AAL2 SVC termination type existing in the media gateway. It is default to 'AAL2/SVC'.")
cMediaGwCcCfgClusterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("conditionalEnabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgClusterEnabled.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgClusterEnabled.setDescription('This object specifies the condition of the cluster generation in the call control. A cluster is a group of endpoints that share a particular bearer possibility for connections among each other. disabled(1) - The generation of the cluster attribute is disabled. enabled(2) - Unconditionally generate the cluster attribute. conditionalEnabled(3) - The generation of the cluster attribute is upon MGC request. ')
cMediaGwCcCfgDefBearerTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipPvcAal5", 1), ("atmPvcAal2", 2), ("atmSvcAal2", 3), ("atmSvcAal1", 4))).clone('ipPvcAal5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDefBearerTraffic.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgDefBearerTraffic.setDescription('This object specifies the combination of the network type (IP/ATM), virtual circuit type (PVC/SVC) and ATM adaptation layer type (AAL1/AAL2/AAL5) for the connection used in transporting bearer traffic. ipPvcAal5 (1) - The bearer traffic is transported in IP network, through Permanent Virtual Circuit(PVC) over AAL5 adaptation layer. atmPvcAal2 (2) - The bearer traffic is transported in ATM network, through Permanent Virtual Circuit(PVC) over AAL2 adaptation layer. atmSvcAal2 (3) - The bearer traffic is transported in ATM network, through Switching Virtual Circuit(SVC) over AAL2 adaptation layer. atmSvcAal1 (4) - The bearer traffic is transported in ATM network, through Switching Virtual Circuit(SVC) over AAL1 adaptation layer. In MGCP, if the call agent specifies the bear traffic type in the local connection options (CRCX request), configuration of this object will have no effect, otherwise the value of this object will be used when media gateway sending CRCX response.')
cMediaGwCcCfgDefRtpNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 1, 7, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone(hexValue="544757525450")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMediaGwCcCfgDefRtpNamePrefix.setStatus('current')
if mibBuilder.loadTexts: cMediaGwCcCfgDefRtpNamePrefix.setDescription("This object specifies the prefix of the name schema for default RTP terminations. The value of this object must be unique among the following objects: cMediaGwCcCfgDsNamePrefix cMediaGwCcCfgRtpNamePrefix cMediaGwCcCfgAal1SvcNamePrefix cMediaGwCcCfgAal2SvcNamePrefix It is defaulted to 'TGWRTP'.")
cMediaGwRscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1), )
if mibBuilder.loadTexts: cMediaGwRscStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMediaGwRscStatsTable.setDescription('This table stores the gateway resource statistics information. ')
cMediaGwRscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwRscStatsIndex"))
if mibBuilder.loadTexts: cMediaGwRscStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaGwRscStatsEntry.setDescription('Each entry stores the statistics information for a specific resource. ')
cmgwRscStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("cpu", 1), ("staticmemory", 2), ("dynamicmemory", 3), ("sysmemory", 4), ("commbuffer", 5), ("msgq", 6), ("atmq", 7), ("svccongestion", 8), ("rsvpq", 9), ("dspq", 10), ("h248congestion", 11), ("callpersec", 12), ("smallipcbuffer", 13), ("mediumipcbuffer", 14), ("largeipcbuffer", 15), ("hugeipcbuffer", 16), ("mblkipcbuffer", 17))))
if mibBuilder.loadTexts: cmgwRscStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmgwRscStatsIndex.setDescription('An index that uniquely identifies a specific gateway resource. ')
cmgwRscMaximumUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscMaximumUtilization.setStatus('current')
if mibBuilder.loadTexts: cmgwRscMaximumUtilization.setDescription("This object indicates the maximum utilization of the resource over the interval specified by the 'cmgwRscSinceLastReset'. ")
cmgwRscMinimumUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscMinimumUtilization.setStatus('current')
if mibBuilder.loadTexts: cmgwRscMinimumUtilization.setDescription("This object indicates the minimum utilization of the resource over the interval specified by the 'cmgwRscSinceLastReset'. ")
cmgwRscAverageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscAverageUtilization.setStatus('current')
if mibBuilder.loadTexts: cmgwRscAverageUtilization.setDescription("This object indicates the average utilization of the resource over the interval specified by the 'cmgwRscSinceLastReset'. ")
cmgwRscSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 324, 1, 2, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgwRscSinceLastReset.setStatus('current')
if mibBuilder.loadTexts: cmgwRscSinceLastReset.setDescription("The elapsed time (in seconds) from the last periodic reset. The following objects are reset at the last reset: 'cmgwRscMaximumUtilization' 'cmgwRscMinimumUtilization' 'cmgwRscAverageUtilization' ")
cMediaGwMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 2))
cMediaGwMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1))
cMediaGwMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2))
cMediaGwMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 1)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwMIBCompliance = cMediaGwMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cMediaGwMIBCompliance.setDescription('The compliance statement for the SNMP entities which implement Media Gateway MIB. This has been replaced by cMediaGwMIBComplianceRev1')
cMediaGwMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 2)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwMIBComplianceRev1 = cMediaGwMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities which implement Media Gateway MIB. This has been replaced by cMediaGwMIBComplianceRev2.')
cMediaGwMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 3)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwMIBComplianceRev2 = cMediaGwMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev2.setDescription('The compliance statement for the SNMP entities which implement Media Gateway MIB.')
cMediaGwMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 4)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupExtra"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev3"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwRscStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwMIBComplianceRev3 = cMediaGwMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev3.setDescription('The compliance statement for the SNMP entities which implement Media Gateway MIB.')
cMediaGwMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 5)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupExtra"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev3"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwRscStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwMIBComplianceRev4 = cMediaGwMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev4.setDescription('The compliance statement for the SNMP entities which implement Media Gateway MIB.')
cMediaGwMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 1, 6)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev1"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupExtra"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolGroupRev3"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainNameGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifGroup"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwCallControlGroupRev2"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwRscStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwMIBComplianceRev5 = cMediaGwMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: cMediaGwMIBComplianceRev5.setDescription('The compliance statement for the SNMP entities which implement Media Gateway MIB.')
cMediaGwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 1)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwPhysicalIndex"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwServiceState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwAdminState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwGraceTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwGroup = cMediaGwGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cMediaGwGroup.setDescription('This group contains objects that apply to the media gateway configuration table.')
cmgwSignalProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 2)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocol"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolVersion"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwSignalProtocolGroup = cmgwSignalProtocolGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmgwSignalProtocolGroup.setDescription('A collection of objects providing signaling protocol information a media gateway.')
cmgwDomainNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 3)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainNameEntity"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwConfigDomainNameRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwDomainNameGroup = cmgwDomainNameGroup.setStatus('current')
if mibBuilder.loadTexts: cmgwDomainNameGroup.setDescription('A collection of objects providing DNS name configuration for a media gateway.')
cMediaGwIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 4)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigIfIndex"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigVpi"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigVci"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigAddrType"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigAddress"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigSubnetMask"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigDefaultGwIp"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigForRemoteMapping"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwIpConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwIpGroup = cMediaGwIpGroup.setStatus('current')
if mibBuilder.loadTexts: cMediaGwIpGroup.setDescription('A collection of objects providing IP address configuration for a media gateway.')
cmgwDnsIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 5)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIp"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpType"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwDnsIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwDnsIpGroup = cmgwDnsIpGroup.setStatus('current')
if mibBuilder.loadTexts: cmgwDnsIpGroup.setDescription('A collection of objects providing DSN name server IP address configuration for a media gateway.')
cmgwLifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 6)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifPvcCount"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLifVoiceIfCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwLifGroup = cmgwLifGroup.setStatus('current')
if mibBuilder.loadTexts: cmgwLifGroup.setDescription('A collection of objects providing LIF(logical interface) information for a media gateway.')
cmgwCallControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 7)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgControlTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgBearerTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNtePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNsePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNseRespTimer"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterDelayMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMaxDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterNomDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMinDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefaultTonePlanId"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDescrInfoEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDsNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgRtpNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal1SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal2SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgClusterEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwCallControlGroup = cmgwCallControlGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmgwCallControlGroup.setDescription('A collection of objects providing general call control information in a media gateway.')
cMediaGwGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 8)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwPhysicalIndex"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwServiceState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwAdminState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwGraceTime"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwVtMappingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwGroupRev1 = cMediaGwGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cMediaGwGroupRev1.setDescription('This group replaces cMediaGwGroup. It contains objects that apply to the media gateway configuration table.')
cmgwCallControlGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 9)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgControlTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgBearerTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNtePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNsePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNseRespTimer"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterDelayMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMaxDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterNomDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMinDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefaultTonePlanId"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDescrInfoEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDsNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgRtpNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal1SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal2SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgClusterEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefBearerTraffic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwCallControlGroupRev1 = cmgwCallControlGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cmgwCallControlGroupRev1.setDescription('This group replaces cmgwCallControlGroup. It contains the objects providing general call control information in a media gateway.')
cmgwSignalProtocolGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 10)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocol"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolVersion"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPort"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalMgcProtocolPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwSignalProtocolGroupRev1 = cmgwSignalProtocolGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cmgwSignalProtocolGroupRev1.setDescription('This group replaces cmgwSignalProtocolGroup. It contains the objects providing signaling protocol information a media gateway.')
cmgwSignalProtocolGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 11)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocol"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolVersion"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPort"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalMgcProtocolPort"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwSignalProtocolGroupRev2 = cmgwSignalProtocolGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolGroupRev2.setDescription('This group replaces cmgwSignalProtocolGroupRev1. It contains the objects providing signaling protocol information a media gateway.')
cmgwSignalProtocolGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 12)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolConfigVer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwSignalProtocolGroupRev3 = cmgwSignalProtocolGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cmgwSignalProtocolGroupRev3.setDescription('Additional objects for cmgwSignalProtocolGroupRev2.')
cMediaGwRscStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 13)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscMaximumUtilization"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscMinimumUtilization"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscAverageUtilization"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwRscSinceLastReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwRscStatsGroup = cMediaGwRscStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cMediaGwRscStatsGroup.setDescription('This group includes gateway resource statistics information. ')
cMediaGwGroupExtra = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 14)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwSrcFilterEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwLawInterceptEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwGroupExtra = cMediaGwGroupExtra.setStatus('current')
if mibBuilder.loadTexts: cMediaGwGroupExtra.setDescription('Additional objects for cMediaGwGroupRev1.')
cmgwCallControlGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 15)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgControlTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgBearerTos"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNtePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNsePayload"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgNseRespTimer"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterDelayMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMaxDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterNomDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgVbdJitterMinDelay"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefaultTonePlanId"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDescrInfoEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDsNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgRtpNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal1SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgAal2SvcNamePrefix"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgClusterEnabled"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefBearerTraffic"), ("CISCO-MEDIA-GATEWAY-MIB", "cMediaGwCcCfgDefRtpNamePrefix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmgwCallControlGroupRev2 = cmgwCallControlGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cmgwCallControlGroupRev2.setDescription('This group replaces cmgwCallControlGroup. It contains the objects providing general call control information in a media gateway.')
cMediaGwGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 324, 2, 2, 16)).setObjects(("CISCO-MEDIA-GATEWAY-MIB", "cmgwDomainName"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwPhysicalIndex"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwServiceState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwAdminState"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwGraceTime"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwVtMappingMode"), ("CISCO-MEDIA-GATEWAY-MIB", "cmgwV23Enabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaGwGroupRev2 = cMediaGwGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cMediaGwGroupRev2.setDescription('Additional object cmgwV23Enabled in CMediaGwEntry Table.')
mibBuilder.exportSymbols("CISCO-MEDIA-GATEWAY-MIB", cMediaGwCcCfgAal2SvcNamePrefix=cMediaGwCcCfgAal2SvcNamePrefix, cMediaGwTable=cMediaGwTable, cmgwRscSinceLastReset=cmgwRscSinceLastReset, cmgwSignalProtocol=cmgwSignalProtocol, cmgwSignalProtocolTable=cmgwSignalProtocolTable, cMediaGwCcCfgBearerTos=cMediaGwCcCfgBearerTos, cMediaGwIpConfigTable=cMediaGwIpConfigTable, cmgwSignalMgcProtocolPort=cmgwSignalMgcProtocolPort, cMediaGwMIBCompliances=cMediaGwMIBCompliances, cMediaGwMIBCompliance=cMediaGwMIBCompliance, cMediaGwCcCfgRtpNamePrefix=cMediaGwCcCfgRtpNamePrefix, cmgwIpConfigForRemoteMapping=cmgwIpConfigForRemoteMapping, cMediaGwGroupExtra=cMediaGwGroupExtra, cMediaGwCcCfgDescrInfoEnabled=cMediaGwCcCfgDescrInfoEnabled, cMediaGwCcCfgDefBearerTraffic=cMediaGwCcCfgDefBearerTraffic, cMediaGwRscStatsTable=cMediaGwRscStatsTable, cmgwRscMinimumUtilization=cmgwRscMinimumUtilization, CGwAdminState=CGwAdminState, cMediaGwEntry=cMediaGwEntry, cMediaGwGroupRev1=cMediaGwGroupRev1, cmgwSignalProtocolGroupRev3=cmgwSignalProtocolGroupRev3, cMediaGwCcCfgVbdJitterMinDelay=cMediaGwCcCfgVbdJitterMinDelay, cmgwLifGroup=cmgwLifGroup, cMediaGwCcCfgNseRespTimer=cMediaGwCcCfgNseRespTimer, cmgwSignalProtocolIndex=cmgwSignalProtocolIndex, cmgwSrcFilterEnabled=cmgwSrcFilterEnabled, cmgwIpConfigAddrType=cmgwIpConfigAddrType, cMediaGwIpGroup=cMediaGwIpGroup, ciscoMediaGatewayMIBObjects=ciscoMediaGatewayMIBObjects, cmgwSignalProtocolGroupRev1=cmgwSignalProtocolGroupRev1, cMediaGwCcCfgVbdJitterMaxDelay=cMediaGwCcCfgVbdJitterMaxDelay, cMediaGwConfig=cMediaGwConfig, cmgwIpConfigVci=cmgwIpConfigVci, CCallControlProfileIndexOrZero=CCallControlProfileIndexOrZero, cmgwIpConfigSubnetMask=cmgwIpConfigSubnetMask, PYSNMP_MODULE_ID=ciscoMediaGatewayMIB, cMediaGwDomainNameConfigEntry=cMediaGwDomainNameConfigEntry, cmgwSignalProtocolEntry=cmgwSignalProtocolEntry, cmgwSignalProtocolPreference=cmgwSignalProtocolPreference, cmgwConfigDomainName=cmgwConfigDomainName, cMediaGwIpConfigEntry=cMediaGwIpConfigEntry, cMediaGwCcCfgClusterEnabled=cMediaGwCcCfgClusterEnabled, cmgwRscMaximumUtilization=cmgwRscMaximumUtilization, cMediaGwMIBComplianceRev2=cMediaGwMIBComplianceRev2, ciscoMediaGatewayMIB=ciscoMediaGatewayMIB, cmgwCallControlGroupRev2=cmgwCallControlGroupRev2, cmgwLifVoiceIfCount=cmgwLifVoiceIfCount, cmgwVtMappingMode=cmgwVtMappingMode, cMediaGwStats=cMediaGwStats, GatewayLifNumber=GatewayLifNumber, cMediaGwGroup=cMediaGwGroup, cMediaGwCcCfgVbdJitterDelayMode=cMediaGwCcCfgVbdJitterDelayMode, cmgwIpConfigIndex=cmgwIpConfigIndex, cmgwSignalProtocolVersion=cmgwSignalProtocolVersion, cMediaGwRscStatsGroup=cMediaGwRscStatsGroup, cMediaGwMIBComplianceRev1=cMediaGwMIBComplianceRev1, cmgwSignalProtocolGroupRev2=cmgwSignalProtocolGroupRev2, cMediaGwCcCfgNsePayload=cMediaGwCcCfgNsePayload, cmgwRscAverageUtilization=cmgwRscAverageUtilization, cmgwLawInterceptEnabled=cmgwLawInterceptEnabled, CCallControlJitterDelayMode=CCallControlJitterDelayMode, cmgwConfigDomainNameIndex=cmgwConfigDomainNameIndex, cmgwAdminState=cmgwAdminState, cMediaGwCcCfgDefRtpNamePrefix=cMediaGwCcCfgDefRtpNamePrefix, cmgwDnsIpGroup=cmgwDnsIpGroup, cMediaGwCcCfgNtePayload=cMediaGwCcCfgNtePayload, cMediaGwMIBConformance=cMediaGwMIBConformance, cmgwDnsDomainName=cmgwDnsDomainName, cMediaGwCcCfgControlTos=cMediaGwCcCfgControlTos, cMediaGwDnsIpConfigTable=cMediaGwDnsIpConfigTable, cmgwIpConfigRowStatus=cmgwIpConfigRowStatus, ciscoMediaGatewayMIBNotifs=ciscoMediaGatewayMIBNotifs, cmgwDnsIpType=cmgwDnsIpType, cmgwLifTable=cmgwLifTable, cmgwLifPvcCount=cmgwLifPvcCount, cMediaGwMIBComplianceRev4=cMediaGwMIBComplianceRev4, cMediaGwCcCfgVbdJitterNomDelay=cMediaGwCcCfgVbdJitterNomDelay, cmgwDomainNameGroup=cmgwDomainNameGroup, cmgwConfigDomainNameRowStatus=cmgwConfigDomainNameRowStatus, cmgwGraceTime=cmgwGraceTime, cMediaGwDomainNameConfigTable=cMediaGwDomainNameConfigTable, cmgwLifEntry=cmgwLifEntry, cmgwIndex=cmgwIndex, cmgwRscStatsIndex=cmgwRscStatsIndex, CVoiceTonePlanIndex=CVoiceTonePlanIndex, cmgwV23Enabled=cmgwV23Enabled, cmgwServiceState=cmgwServiceState, cmgwCallControlGroupRev1=cmgwCallControlGroupRev1, cmgwIpConfigVpi=cmgwIpConfigVpi, cMediaGwMIBComplianceRev3=cMediaGwMIBComplianceRev3, cMediaGwMIBGroups=cMediaGwMIBGroups, cMediaGwMIBComplianceRev5=cMediaGwMIBComplianceRev5, cmgwSignalProtocolPort=cmgwSignalProtocolPort, cmgwIpConfigAddress=cmgwIpConfigAddress, cmgwDnsIpIndex=cmgwDnsIpIndex, cMediaGwRscStatsEntry=cMediaGwRscStatsEntry, cmgwDomainName=cmgwDomainName, cmgwPhysicalIndex=cmgwPhysicalIndex, cmgwLifNumber=cmgwLifNumber, cmgwSignalProtocolGroup=cmgwSignalProtocolGroup, cmgwDnsIpRowStatus=cmgwDnsIpRowStatus, cMediaGwCallControlConfigTable=cMediaGwCallControlConfigTable, CVoiceTonePlanIndexOrZero=CVoiceTonePlanIndexOrZero, CCallControlProfileIndex=CCallControlProfileIndex, cmgwSignalProtocolConfigVer=cmgwSignalProtocolConfigVer, cmgwConfigDomainNameEntity=cmgwConfigDomainNameEntity, cMediaGwGroupRev2=cMediaGwGroupRev2, cMediaGwCcCfgAal1SvcNamePrefix=cMediaGwCcCfgAal1SvcNamePrefix, cmgwCallControlGroup=cmgwCallControlGroup, cMediaGwCcCfgDefaultTonePlanId=cMediaGwCcCfgDefaultTonePlanId, cmgwDnsIp=cmgwDnsIp, CGwServiceState=CGwServiceState, cmgwIpConfigDefaultGwIp=cmgwIpConfigDefaultGwIp, cMediaGwCallControlConfigEntry=cMediaGwCallControlConfigEntry, cmgwIpConfigIfIndex=cmgwIpConfigIfIndex, cMediaGwDnsIpConfigEntry=cMediaGwDnsIpConfigEntry, cMediaGwCcCfgDsNamePrefix=cMediaGwCcCfgDsNamePrefix)
