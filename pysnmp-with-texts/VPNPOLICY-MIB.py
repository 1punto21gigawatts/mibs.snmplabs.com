#
# PySNMP MIB module VPNPOLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VPNPOLICY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, NotificationType, TimeTicks, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, IpAddress, ObjectIdentity, ModuleIdentity, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "NotificationType", "TimeTicks", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Counter32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class VpIpAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
ibmIROCVPNpolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15))
vpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1))
vpPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2))
vpConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3))
vpActions = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4))
vpTests = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5))
vpSystemGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 1))
vpSystemLdap = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2))
vpSysMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSysMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: vpSysMibLevel.setDescription('The level of the IBM VPN Policy MIB.')
vpSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpSysUpTime.setDescription('The length of time in hundredths of a second that the policy definitions have been active.')
vpSysCurTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSysCurTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpSysCurTime.setDescription('The current time in seconds since 1900.')
vpSysHoursFromCut = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("utcMinus0", 1), ("utcMinus1", 2), ("utcMinus2", 3), ("utcMinus3", 4), ("utcMinus4", 5), ("utcMinus5", 6), ("utcMinus6", 7), ("utcMinus7", 8), ("utcMinus8", 9), ("utcMinus9", 10), ("utcMinus10", 11), ("utcMinus11", 12), ("utcPlus1", 13), ("utcPlus2", 14), ("utcPlus3", 15), ("utcPlus4", 16), ("utcPlus5", 17), ("utcPlus6", 18), ("utcPlus7", 19), ("utcPlus8", 20), ("utcPlus9", 21), ("utcPlus10", 22), ("utcPlus11", 23), ("utcPlus12", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSysHoursFromCut.setStatus('mandatory')
if mibBuilder.loadTexts: vpSysHoursFromCut.setDescription('The number of hours from Coordinated Universal Time which is abbreviated UTC as specified by the International Telecommunications Union. 1 = (UTC -0)...Coordinated Universal Time; United Kingdom 2 = (UTC -1)...Azores; Cape Verde 3 = (UTC -2)...Falkland Islands 4 = (UTC -3)...Greenland; East Brazil 5 = (UTC -4)...Central Brazil 6 = (UTC -5)...Eastern U.S.; Colombia 7 = (UTC -6)...Central U.S.; Honduras 8 = (UTC -7)...Mountain U.S. 9 = (UTC -8)...Pacific U.S.; Yukon 10 = (UTC -9)...Alaska 11 = (UTC-10)...Hawaii; Aleutian 12 = (UTC-11)...Bering Straits 13 = (UTC +1)...Norway; France 14 = (UTC +2)...Finland; South Africa 15 = (UTC +3)...Turkey; Saudi Arabia 16 = (UTC +4)...Gorki; Central Asia; Oman 17 = (UTC +5)...Pakistan 18 = (UTC +6)...Tashkent; Central Asia 19 = (UTC +7)...Thailand 20 = (UTC +8)...Western Australia 21 = (UTC +9)...Japan; Korea 22 = (UTC+10)...Eastern Australia 23 = (UTC+11)...Solomon Islands 24 = (UTC+12)...New Zealand')
vpSysCurConfigSource = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("refreshInProgress", 1), ("none", 2), ("allSources", 3), ("sram", 4), ("ldap", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSysCurConfigSource.setStatus('mandatory')
if mibBuilder.loadTexts: vpSysCurConfigSource.setDescription('The current configuration source location(s). 1 = policy refresh in progress 2 = no policies were found in any source location 3 = policies were found in all source locations 4 = policies were found in SRAM 5 = policies were found in LDAP.')
vpSysRefreshConfig = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fromOperDefs", 1), ("fromAdminDefs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpSysRefreshConfig.setStatus('mandatory')
if mibBuilder.loadTexts: vpSysRefreshConfig.setDescription("This object provides the ability to refresh the system's policies when set and provides the source of the last refresh when read. 1 = refresh policies from the operational (active) policy source location(s) 2 = refresh policies from the administrative (configured) policy source location(s).")
vpLdapGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1))
vpLdapGlobalOper = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1))
vpLdapGlobalAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2))
vpLdapGblOperLdapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperLdapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperLdapStatus.setDescription('The current status of the LDAP Operational parameter values.')
vpLdapGblOperPrimServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 2), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperPrimServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperPrimServerAddr.setDescription('The current operational value of the IP Address for the Primary LDAP Server.')
vpLdapGblOperSecServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 3), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperSecServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperSecServerAddr.setDescription('The current operational value of the IP Address for the Secondary LDAP Server.')
vpLdapGblOperServerLdapLvl = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperServerLdapLvl.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperServerLdapLvl.setDescription('The current operational value of the LDAP Server Level.')
vpLdapGblOperPolicyBaseName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperPolicyBaseName.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperPolicyBaseName.setDescription('The current operational value of the Base Name to use when retrieving policies from the LDAP Server.')
vpLdapGblOperPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperPortNumber.setDescription('The current operational value of the Port Number to use when retrieving policies from the LDAP Server.')
vpLdapGblOperTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperTimeOut.setDescription('The current operational value of the Time-Out Period to use when retrieving policies from the LDAP Server.')
vpLdapGblOperRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperRetryInterval.setDescription('The current operational value of the Retry Interval to use when retrieving policies from the LDAP Server.')
vpLdapGblOperUserId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpLdapGblOperUserId.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblOperUserId.setDescription('The current operational value of the User ID to use when retrieving policies from the LDAP Server.')
vpLdapGblAdminLdapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminLdapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminLdapStatus.setDescription('The configured status of the LDAP Administrative parameter values.')
vpLdapGblAdminPrimServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 2), VpIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminPrimServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminPrimServerAddr.setDescription('The configured IP Address of the current Primary LDAP Server.')
vpLdapGblAdminSecServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 3), VpIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminSecServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminSecServerAddr.setDescription('The configured IP Address of the current Secondary LDAP Server.')
vpLdapGblAdminServerLdapLvl = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminServerLdapLvl.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminServerLdapLvl.setDescription('The configured LDAP Server level.')
vpLdapGblAdminPolicyBaseName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminPolicyBaseName.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminPolicyBaseName.setDescription('The configured Base Name to use when retrieving policies from the LDAP Server.')
vpLdapGblAdminPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminPortNumber.setDescription('The configured Port Number to use when retrieving policies from the LDAP Server.')
vpLdapGblAdminTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminTimeOut.setDescription('The configured Time-Out period in seconds to use when retrieving policies from the LDAP Server.')
vpLdapGblAdminRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminRetryInterval.setDescription('The configured Retry Interval in seconds to use when retrieving policies from the LDAP Server.')
vpLdapGblAdminUserId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 1, 2, 1, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpLdapGblAdminUserId.setStatus('mandatory')
if mibBuilder.loadTexts: vpLdapGblAdminUserId.setDescription('The configured User ID to use when retrieving policies from the LDAP Server.')
vpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1), )
if mibBuilder.loadTexts: vpPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolicyTable.setDescription('The VPN Policy Table.')
vpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpPolName"))
if mibBuilder.loadTexts: vpPolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolicyEntry.setDescription('A VPN Policy Table entry.')
vpPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolName.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolName.setDescription('The VPN Policy Name.')
vpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpPolStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolStatus.setDescription('The current status of the VPN Policy. 1 = enabled 2 = disabled.')
vpPolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolPriority.setDescription('The priority of VPN Policy.')
vpPolValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolValidity.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolValidity.setDescription('The validity of VPN Policy.')
vpPolTrafficProfileRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolTrafficProfileRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolTrafficProfileRef.setDescription('The name of the Traffic Profile for the VPN Policy. This name can be used to index directly into the vpTrafficProfileTable.')
vpPolValidityPeriodRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolValidityPeriodRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolValidityPeriodRef.setDescription('The name of the Validity Period for the VPN Policy. This name can be used to index directly into the vpValidityPeriodTable.')
vpPolRsvpActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRsvpActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRsvpActionRef.setDescription('The name of the RSVP Action for the VPN Policy. This name can be used to index directly into the vpRsvpActionTable.')
vpPolDiffServActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolDiffServActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolDiffServActionRef.setDescription('The name of the Differential Services Action for the VPN Policy. This name can be used to index directly into the vpDiffServActionTable.')
vpPolIsakmpActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolIsakmpActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolIsakmpActionRef.setDescription('The name of the ISAKMP Action for the VPN Policy. This name can be used to index directly into the vpIsakmpActionTable.')
vpPolSecurityActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolSecurityActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolSecurityActionRef.setDescription('The name of the Security Action for the VPN Policy. This name can be used to index directly into the vpSecurityActionTable.')
vpPolIpsecManualTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolIpsecManualTunId.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolIpsecManualTunId.setDescription('The ID of manually configured IPSec Phase-2 Tunnel.')
vpPolMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolMatches.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolMatches.setDescription('The number of packet matches for this VPN Policy.')
vpPolicyRulePriTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2), )
if mibBuilder.loadTexts: vpPolicyRulePriTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolicyRulePriTable.setDescription('The VPN Policy Rule Priority Table.')
vpPolicyRulePriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpPolRulePriOrder"))
if mibBuilder.loadTexts: vpPolicyRulePriEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolicyRulePriEntry.setDescription('A VPN Policy Rule Priority Table entry.')
vpPolRulePriOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriOrder.setDescription('The priority of this VPN Rule relative to all VPN Rules.')
vpPolRulePriName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriName.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriName.setDescription('The VPN Policy Rule Name.')
vpPolRulePriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpPolRulePriStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriStatus.setDescription('The current status of the VPN Policy Rule. 1 = enabled 2 = disabled.')
vpPolRulePriPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriPriority.setDescription('The VPN Policy Rule Priority.')
vpPolRulePriTrafficProfileRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriTrafficProfileRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriTrafficProfileRef.setDescription('The name of the Traffic Profile for the VPN Policy Rule. This name can be used to index directly into the vpTrafficProfileTable.')
vpPolRulePriValidityPeriodRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriValidityPeriodRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriValidityPeriodRef.setDescription('The name of the Validity Period for the VPN Policy. This name can be used to index directly into the vpValidityPeriodTable.')
vpPolRulePriRsvpActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriRsvpActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriRsvpActionRef.setDescription('The name of the RSVP Action for the VPN Policy. This name can be used to index directly into the vpRsvpActionTable.')
vpPolRulePriDiffServActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriDiffServActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriDiffServActionRef.setDescription('The name of the Differential Services Action for the VPN Policy. This name can be used to index directly into the vpDiffServActionTable.')
vpPolRulePriIsakmpActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriIsakmpActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriIsakmpActionRef.setDescription('The name of the ISAKMP Action for the VPN Policy. This name can be used to index directly into the vpIsakmpActionTable.')
vpPolRulePriSecurityActionRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriSecurityActionRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriSecurityActionRef.setDescription('The name of the Security Action for the VPN Policy. This name can be used to index directly into the vpSecurityActionTable.')
vpPolRulePriIpsecManualTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolRulePriIpsecManualTunId.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolRulePriIpsecManualTunId.setDescription('The ID of manually configured IPSec Phase-2 Tunnel.')
vpPolicyCorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 3), )
if mibBuilder.loadTexts: vpPolicyCorTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolicyCorTable.setDescription('The VPN Policy Correlation Table. This table can be used to correlate VPN Policies with VPN Policy Rules. A VPN Policy may be associated with one or more VPN Policy Rules.')
vpPolicyCorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 3, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpPolName"), (0, "VPNPOLICY-MIB", "vpPolCorRuleOrder"))
if mibBuilder.loadTexts: vpPolicyCorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolicyCorEntry.setDescription('A VPN Policy Correlation Table entry.')
vpPolCorRuleOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolCorRuleOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolCorRuleOrder.setDescription('The order of this VPN Rule relative to other VPN Rules for this VPN Policy.')
vpPolCorRulePriOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpPolCorRulePriOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpPolCorRulePriOrder.setDescription('The priority of this VPN Rule relative to all VPN Rules. This number can be used to index directly into the vpPolicyRulePriTable.')
vpTrafficProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1))
vpValidityPeriod = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2))
vpTrafficProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1), )
if mibBuilder.loadTexts: vpTrafficProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafficProfileTable.setDescription('The Traffic Profile Table.')
vpTrafficProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpTrafProfName"))
if mibBuilder.loadTexts: vpTrafficProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafficProfileEntry.setDescription('A Traffic Profile Table entry.')
vpTrafProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfName.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfName.setDescription('The name of the Traffic Profile.')
vpTrafProfHiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfHiProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfHiProtocol.setDescription('The high protocol number for this Traffic Profile.')
vpTrafProfLoProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfLoProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfLoProtocol.setDescription('The low protocol number for this Traffic Profile.')
vpTrafProfSrcHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 4), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfSrcHiAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfSrcHiAddr.setDescription('The high source IP Address for this Traffic Profile.')
vpTrafProfSrcLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 5), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfSrcLoAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfSrcLoAddr.setDescription('The low source IP Address for this Traffic Profile.')
vpTrafProfSrcHiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfSrcHiPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfSrcHiPort.setDescription('The high source port number for this Traffic Profile.')
vpTrafProfSrcLoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfSrcLoPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfSrcLoPort.setDescription('The low source port number for this Traffic Profile.')
vpTrafProfDstHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 8), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfDstHiAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfDstHiAddr.setDescription('The high destination IP Address for this Traffic Profile.')
vpTrafProfDstLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 9), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfDstLoAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfDstLoAddr.setDescription('The low destination IP Address for this Traffic Profile.')
vpTrafProfDstHiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfDstHiPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfDstHiPort.setDescription('The high destination port number for this Traffic Profile.')
vpTrafProfDstLoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfDstLoPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfDstLoPort.setDescription('The low destination port number for this Traffic Profile.')
vpTrafProfRcvTosByteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfRcvTosByteMask.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfRcvTosByteMask.setDescription("The Type of Service (TOS) Byte Mask Value. This is a 8-bit mask which is be applied to an incoming packet's TOS byte.")
vpTrafProfRcvTosByteMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfRcvTosByteMatch.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfRcvTosByteMatch.setDescription('The Type of Service (TOS) Byte Match Value. This is a 8-bit pattern which is used to compare to the value of the result of the ANDing of the incoming TOS byte and the mask value.')
vpTrafProfLocIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 10, 11, 99))).clone(namedValues=NamedValues(("ipV4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("dn", 9), ("gn", 10), ("keyId", 11), ("any", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfLocIdType.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfLocIdType.setDescription('The Traffic Local Identification Type. This value is used in interpreting the Traffic Local Identification Value. 1 = IP V4 Address 2 = Fully Qualified Domain Name 3 = User Fully Qualified Domain Name 9 = Domain Name 10 = Global Name 11 = Key ID 99 = Any')
vpTrafProfLocIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfLocIdValue.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfLocIdValue.setDescription('The Traffic Local Identification Value. See vpTrafProfLocIdType for more information.')
vpTrafProfRemGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafProfRemGroup.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafProfRemGroup.setDescription('The Traffic Remote Group Name.')
vpTrafficIfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 2), )
if mibBuilder.loadTexts: vpTrafficIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafficIfTable.setDescription('The Traffic Interface Table.')
vpTrafficIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 2, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpTrafProfName"), (0, "VPNPOLICY-MIB", "vpTrafIfIndex"))
if mibBuilder.loadTexts: vpTrafficIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafficIfEntry.setDescription('A Traffic Interface Table entry.')
vpTrafIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafIfIndex.setDescription('The Traffic Interface index.')
vpTrafIfInAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 2, 1, 2), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafIfInAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafIfInAddr.setDescription('The Traffic Interface Inbound IP Address.')
vpTrafIfOutAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 2, 1, 3), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafIfOutAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafIfOutAddr.setDescription('The Traffic Interface Outbound IP Address.')
vpTrafficRemIdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 3), )
if mibBuilder.loadTexts: vpTrafficRemIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafficRemIdTable.setDescription('The Traffic Remote Identification Table.')
vpTrafficRemIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 3, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpTrafProfRemGroup"), (0, "VPNPOLICY-MIB", "vpTrafRemIdIndex"))
if mibBuilder.loadTexts: vpTrafficRemIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafficRemIdEntry.setDescription('A Traffic Remote Identification Table entry.')
vpTrafRemIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafRemIdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafRemIdIndex.setDescription('The Traffic Remote Identification Index.')
vpTrafRemIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 10, 11))).clone(namedValues=NamedValues(("ipV4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("dn", 9), ("gn", 10), ("keyId", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafRemIdType.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafRemIdType.setDescription('The Traffic Remote Identification Type. This value is used in interpreting the Traffic Remote Identification Value. 1 = IP V4 Address 2 = Fully Qualified Domain Name 3 = User Fully Qualified Domain Name 9 = Domain Name 10 = Global Name 11 = Key ID')
vpTrafRemIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafRemIdValue.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafRemIdValue.setDescription('The Traffic Remote Identification Value. See vpTrafRemIdValueType for more information.')
vpTrafRemIdAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preShareKey", 1), ("cert", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTrafRemIdAuthMode.setStatus('mandatory')
if mibBuilder.loadTexts: vpTrafRemIdAuthMode.setDescription('The Traffic Remote Identification Authentication Mode. 1 = preshared key 2 = certificate')
vpValidityPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1), )
if mibBuilder.loadTexts: vpValidityPeriodTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpValidityPeriodTable.setDescription('The Validity Period Table.')
vpValidityPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpValPrdName"))
if mibBuilder.loadTexts: vpValidityPeriodEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpValidityPeriodEntry.setDescription('A Validity Period Table entry.')
vpValPrdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpValPrdName.setStatus('mandatory')
if mibBuilder.loadTexts: vpValPrdName.setDescription('The name of the Validity Period.')
vpValPrdStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpValPrdStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpValPrdStartTime.setDescription('The Validity Start Time in seconds since 1900. A value of xFF:FF:FF:FF signifies forever.')
vpValPrdEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpValPrdEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpValPrdEndTime.setDescription('The Validity End Time in seconds since 1900. A value of xFF:FF:FF:FF signifies forever.')
vpValPrdMonthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpValPrdMonthMask.setStatus('mandatory')
if mibBuilder.loadTexts: vpValPrdMonthMask.setDescription("The Month Mask for this Validity Period. Each Bit in the Mask represents a month. Octet 2 Octet 1 ---------------------- ------------------------------- 7-4 3 2 1 0 7 6 5 4 3 2 1 0 0's Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec")
vpValPrdDaysMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpValPrdDaysMask.setStatus('mandatory')
if mibBuilder.loadTexts: vpValPrdDaysMask.setDescription('The Days-Of-The-Week Mask for this Validity Period. Each Bit in the Mask represents a day. Octet 1 ------------------------------- 7 6 5 4 3 2 1 0 0 Mon Tue Wed Thr Fri Sat Sun')
vpValPrdStartTod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpValPrdStartTod.setStatus('mandatory')
if mibBuilder.loadTexts: vpValPrdStartTod.setDescription('The Validity Period Start Time-Of-Day. It is represented in the number of seconds since 00:00 AM. A value of xFF:FF:FF:FF signifies all day.')
vpValPrdStopTod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 3, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpValPrdStopTod.setStatus('mandatory')
if mibBuilder.loadTexts: vpValPrdStopTod.setDescription('The Validity Period End Time-Of-Day. It is represented in the number of seconds since 00:00 AM. A value of xFF:FF:FF:FF signifies all day.')
vpRsvpAction = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1))
vpDiffServAction = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2))
vpIsakmpAction = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3))
vpSecurityAction = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4))
vpRsvpActionTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1), )
if mibBuilder.loadTexts: vpRsvpActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActionTable.setDescription('The RSVP Action Table.')
vpRsvpActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpRsvpActName"))
if mibBuilder.loadTexts: vpRsvpActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActionEntry.setDescription('A RSVP Action Table entry.')
vpRsvpActName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActName.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActName.setDescription('The name of the RSVP Action.')
vpRsvpActPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActPermission.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActPermission.setDescription('Permit or deny RSVP requests of with the type of vpRsvpActFlowSvrType.')
vpRsvpActMaxRatePerFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActMaxRatePerFlow.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActMaxRatePerFlow.setDescription('The Maximum Amount of Bandwidth in Kbytes-Per-Second that RSVP should be allowed to allocate for one individual flow.')
vpRsvpActMaxTokenBucketPerFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActMaxTokenBucketPerFlow.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActMaxTokenBucketPerFlow.setDescription('The Maximum Token Bucket to allocate for a RSVP flow.')
vpRsvpActMaxFlowDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActMaxFlowDuration.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActMaxFlowDuration.setDescription('The Maximum Amount of Time in seconds that RSVP should allow a reservation to be active.')
vpRsvpActMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActMinDelay.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActMinDelay.setDescription('The Minimum Delay in milliseconds that RSVP should be allowed to reserve for an individual RSVP reservation.')
vpRsvpActDiffSvrRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActDiffSvrRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActDiffSvrRef.setDescription('The name of the Differential Services Action for this RSVP Action. This name can be used to index directly into the vpDiffServActionTable.')
vpRsvpActMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpRsvpActMatches.setStatus('mandatory')
if mibBuilder.loadTexts: vpRsvpActMatches.setDescription('The number of packet matches for this RSVP Action.')
vpDiffServActionTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1), )
if mibBuilder.loadTexts: vpDiffServActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpDiffServActionTable.setDescription('The Differential Services Action Table.')
vpDiffServActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpDifSrvActName"))
if mibBuilder.loadTexts: vpDiffServActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpDiffServActionEntry.setDescription('A Differential Services Action Table entry.')
vpDifSrvActName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActName.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActName.setDescription('The name of the Differential Services Action.')
vpDifSrvActPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActPermission.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActPermission.setDescription('Permit or Deny traffic matching the Traffic Profile. This parameter is used as a filter rule to control which IP traffic is allowed to be forwarded.')
vpDifSrvActQuePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("premium", 1), ("bestEffort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActQuePriority.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActQuePriority.setDescription('The Queue Priority to be used for traffic.')
vpDifSrvActBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("percent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActBwType.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActBwType.setDescription('Specifies whether the bandwidth share is a percentage of the output bandwidth or an absolute number in Kbytes-Per-Second. See also vpDifSrvActBwShare.')
vpDifSrvActBwShare = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActBwShare.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActBwShare.setDescription('The amount of bandwidth to allocate for packets matching this Differential Services Action. Bandwidth may be specified by percentage of output bandwidth or by an absolute number in Kbytes-Per-Second. See also vpDifSrvActBwType.')
vpDifSrvActTransTosByteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActTransTosByteMask.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActTransTosByteMask.setDescription("The Type of Service (TOS) Byte Mask Value. This is a 8-bit mask which is be applied to an incoming packet's TOS byte.")
vpDifSrvActTransTosByteMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActTransTosByteMatch.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActTransTosByteMatch.setDescription('The Type of Service (TOS) Byte Match Value. This is a 8-bit pattern which is used to compare to the value of the result of the ANDing of the incoming TOS byte and the mask value.')
vpDifSrvActMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpDifSrvActMatches.setStatus('mandatory')
if mibBuilder.loadTexts: vpDifSrvActMatches.setDescription('The number of packet matches for this Differential Services Action.')
vpIsakmpActionTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1), )
if mibBuilder.loadTexts: vpIsakmpActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpActionTable.setDescription('The ISAKMP Action Table.')
vpIsakmpActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpIkActName"))
if mibBuilder.loadTexts: vpIsakmpActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpActionEntry.setDescription('An ISAKMP Action Table entry.')
vpIkActName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActName.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActName.setDescription('The name of the ISAKMP Action.')
vpIkActExchangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActExchangeMode.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActExchangeMode.setDescription('The Exchange Mode for ISAKMP Phase-1 negotiations.')
vpIkActConnSaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActConnSaLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActConnSaLifeTime.setDescription('The Lifetime of the ISAKMP Phase-1 Connection. This specifies the amount of time in seconds after which the Phase-1 Security Association is renegotiated.')
vpIkActConnSaLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActConnSaLifeSize.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActConnSaLifeSize.setDescription('The Lifesize of the ISAKMP Phase-1 Connection. This specifies the amount of traffic in Kbytes after which the Phase-1 Security Association is renegotiated.')
vpIkActPolicyRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initiator", 1), ("responder", 2), ("initAndResp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActPolicyRole.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActPolicyRole.setDescription('The ISAKMP Policy Role. 1 = Initiator 2 = Responder 3 = Initiator and Responder')
vpIkActMinPercentRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActMinPercentRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActMinPercentRefresh.setDescription('The minimium percentage of the ISAKMP Phase-1 proposals Lifetime that should be considered valid during ISAKMP Phase-1 negotiations.')
vpIkActAutoStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActAutoStart.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActAutoStart.setDescription('The ISAKMP Auto Start setting. When enabled the Security Association must be automatically negotiated at system initialization.')
vpIkActMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActMatches.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActMatches.setDescription('The number of packet matches for this ISAKMP Action.')
vpIsakmpProposalTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2), )
if mibBuilder.loadTexts: vpIsakmpProposalTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpProposalTable.setDescription('The ISAKMP Proposal Table.')
vpIsakmpProposalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpIkPropName"))
if mibBuilder.loadTexts: vpIsakmpProposalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpProposalEntry.setDescription('An ISAKMP Proposal Table entry.')
vpIkPropName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkPropName.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkPropName.setDescription('The name of the ISAKMP Proposal.')
vpIkPropAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preShardKey", 1), ("dssSig", 2), ("rsaSig", 3), ("rsaEncrypt", 4), ("revRsaEncrypt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkPropAuthMethod.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkPropAuthMethod.setDescription('The Authentication Method to use in ISAKMP Phase-1 negotiations.')
vpIkPropHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkPropHashAlgo.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkPropHashAlgo.setDescription('The Hash Algorithm to use in ISAKMP Phase-1 negotiations.')
vpIkPropCipherAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("des", 1), ("des3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkPropCipherAlgo.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkPropCipherAlgo.setDescription('The Cipher Algorithm to use in ISAKMP Phase-1 negotiations.')
vpIkPropDiffHellmanGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhGrp1", 1), ("dhGrp2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkPropDiffHellmanGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkPropDiffHellmanGrpId.setDescription('The Diffie Hellman Group to use in ISAKMP Phase-1 negotiations.')
vpIkPropSaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkPropSaLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkPropSaLifeTime.setDescription('The Lifetime of the ISAKMP Phase-1 Connection. This specifies the amount of time in seconds after which the Phase-1 Security Association is renegotiated.')
vpIkPropSaLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkPropSaLifeSize.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkPropSaLifeSize.setDescription('The Lifesize of the ISAKMP Phase-1 Connection. This specifies the amount of traffic in Kbytes after which the Phase-1 Security Association is renegotiated.')
vpIsakmpCorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 3), )
if mibBuilder.loadTexts: vpIsakmpCorTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpCorTable.setDescription('The ISAKMP Correlation Table. This table can be used to to correlate ISAKMP Actions with ISAKMP Proposals. An ISAKMP Action may be associated with one or more ISAKMP Proposals.')
vpIsakmpCorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 3, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpIkActName"), (0, "VPNPOLICY-MIB", "vpIkCorPropOrder"))
if mibBuilder.loadTexts: vpIsakmpCorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpCorEntry.setDescription('An ISAKMP Correlation Table entry.')
vpIkCorPropOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkCorPropOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkCorPropOrder.setDescription('The Proposal Order for the ISAKMP Action.')
vpIkCorPropName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkCorPropName.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkCorPropName.setDescription('The name of the ISAKMP Proposal. This name can be used to index directly into the vpIsakmpProposalTable.')
vpIsakmpActiveInstTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 4), )
if mibBuilder.loadTexts: vpIsakmpActiveInstTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpActiveInstTable.setDescription('The ISAKMP Active Instance Table.')
vpIsakmpActiveInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 4, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpIkActName"), (0, "VPNPOLICY-MIB", "vpIkActInstOrder"))
if mibBuilder.loadTexts: vpIsakmpActiveInstEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpIsakmpActiveInstEntry.setDescription('An ISAKMP Active Instance Table entry.')
vpIkActInstOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActInstOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActInstOrder.setDescription('The Active Instance Creation Order for the ISAKMP Action.')
vpIkActInstTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActInstTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActInstTunnelId.setDescription('The ISAKMP Phase-1 Tunnel ID.')
vpIkActInstTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpIkActInstTunnelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vpIkActInstTunnelIndex.setDescription('The ISAKMP Phase-1 Tunnel Index (ikeTunnelIndex from the IBM IPSec MIB).')
vpSecurityActionTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1), )
if mibBuilder.loadTexts: vpSecurityActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityActionTable.setDescription('The Security Action Table.')
vpSecurityActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecActName"))
if mibBuilder.loadTexts: vpSecurityActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityActionEntry.setDescription('A Security Action Table entry.')
vpSecActName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActName.setDescription('The name of the Security Action.')
vpSecActType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("block", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActType.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActType.setDescription('The Type of action which should be performed to packets matching the Traffic Profile of a Policy specifying this action.')
vpSecActTunStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 3), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActTunStartAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActTunStartAddr.setDescription('The IP Address of the IPSec Tunnel Starting Point.')
vpSecActTunEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 4), VpIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActTunEndAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActTunEndAddr.setDescription('The IP Address of the IPSec Tunnel Ending Point.')
vpSecActLocProxyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7, 9, 10, 11))).clone(namedValues=NamedValues(("ipV4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("ipV4Subnet", 4), ("ipV4Range", 7), ("dn", 9), ("gn", 10), ("keyId", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActLocProxyType.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActLocProxyType.setDescription('The Local Proxy Type. This value is used in interpreting the Local Proxy Value. 1 = IP V4 Address 2 = Fully Qualified Domain Name 3 = User Fully Qualified Domain Name 4 = IP V4 Address Subnet 7 = IP V4 Address Range 9 = Domain Name 10 = Global Name 11 = Key ID')
vpSecActLocProxyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActLocProxyValue.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActLocProxyValue.setDescription('The Local Proxy Value. See vpSecActLocProxyType for more information.')
vpSecActLocProxyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActLocProxyProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActLocProxyProtocol.setDescription('The Local Proxy Protocol.')
vpSecActLocProxySrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActLocProxySrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActLocProxySrcPort.setDescription('The Local Proxy Source Port.')
vpSecActRemProxyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7, 9, 10, 11))).clone(namedValues=NamedValues(("ipV4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("ipV4Subnet", 4), ("ipV4Range", 7), ("dn", 9), ("gn", 10), ("keyId", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActRemProxyType.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActRemProxyType.setDescription('The Remote Proxy Type. This value is used in interpreting the Remote Proxy Value. 1 = IP V4 Address 2 = Fully Qualified Domain Name 3 = User Fully Qualified Domain Name 4 = IP V4 Address Subnet 7 = IP V4 Address Range 9 = Domain Name 10 = Global Name 11 = Key ID')
vpSecActRemProxyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActRemProxyValue.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActRemProxyValue.setDescription('The Remote Proxy Value. See vpSecActRemProxyType for more information.')
vpSecActRemProxyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActRemProxyProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActRemProxyProtocol.setDescription('The Remote Proxy Protocol.')
vpSecActRemProxySrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActRemProxySrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActRemProxySrcPort.setDescription('The Remote Proxy Source Port.')
vpSecActSaRefreshThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActSaRefreshThresh.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActSaRefreshThresh.setDescription('The IPSec Security Association Refresh Threshold. The value is represented as a percentage of the Security Association Lifetime or Security Association Lifesize.')
vpSecActMinPercentRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActMinPercentRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActMinPercentRefresh.setDescription('The minimium percentage of the Security Associations Lifetime that should be considered valid during IPSec negotiations.')
vpSecActTunnelInTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActTunnelInTunnel.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActTunnelInTunnel.setDescription('Specifies whether or not this IPSec Tunnel is protected by another tunnel.')
vpSecActAutoStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActAutoStart.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActAutoStart.setDescription('The IPSec Auto Start setting. When enabled the Security Association must be automatically negotiated at system initialization.')
vpSecActDontFragBitHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copyDfBit", 1), ("setDfBit", 2), ("clearDfBit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActDontFragBitHandling.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActDontFragBitHandling.setDescription("The IPSec processing to perform on the Don't Fragment (DF) Bit when building a new package header. in the original 1 = Copy the DF Bit from the orginal header to the new header 2 = Set (Turn On) the DF Bit in the new header 3 = Clear (Turn Off) the DF Bit in the new header")
vpSecActReplayPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActReplayPrevention.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActReplayPrevention.setDescription('The IPSec Replay Prevention setting.')
vpSecActMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActMatches.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActMatches.setDescription('The number of packet matches for this Securtiy Action.')
vpSecurityProposalTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 2), )
if mibBuilder.loadTexts: vpSecurityProposalTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityProposalTable.setDescription('The Security Proposal Table.')
vpSecurityProposalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 2, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecPropName"))
if mibBuilder.loadTexts: vpSecurityProposalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityProposalEntry.setDescription('A Security Proposal Table entry.')
vpSecPropName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecPropName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecPropName.setDescription('The name of the Security Proposal.')
vpSecPropPrfFwdSecr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecPropPrfFwdSecr.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecPropPrfFwdSecr.setDescription('The state of the Perfect Forward Secrecy function.')
vpSecPropDiffHellmanGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhGrp1", 1), ("dhGrp2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecPropDiffHellmanGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecPropDiffHellmanGrpId.setDescription('The Diffie Hellman Group to use in IPSec Phase-2 negotiations.')
vpSecurityAhTransTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 3), )
if mibBuilder.loadTexts: vpSecurityAhTransTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityAhTransTable.setDescription('The Security AH Transform Table.')
vpSecurityAhTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 3, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecAhTransName"))
if mibBuilder.loadTexts: vpSecurityAhTransEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityAhTransEntry.setDescription('A Security AH Transform Table entry.')
vpSecAhTransName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecAhTransName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecAhTransName.setDescription('The name of the AH Transform.')
vpSecAhTransIntgAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hmacMd5", 1), ("hmacSha", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecAhTransIntgAlgo.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecAhTransIntgAlgo.setDescription('The AH Integrity Algorithm.')
vpSecAhTransEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecAhTransEncapMode.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecAhTransEncapMode.setDescription('The AH Encapsulation Mode.')
vpSecAhTransSaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecAhTransSaLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecAhTransSaLifeTime.setDescription('The Lifetime of the AH Security Association. This specifies the amount of time in seconds after which the AH Security Association is renegotiated.')
vpSecAhTransSaLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecAhTransSaLifeSize.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecAhTransSaLifeSize.setDescription('The Lifesize of the AH Security Association. This specifies the amount of traffic in Kbytes after which the AH Security Association is renegotiated.')
vpSecurityEspTransTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4), )
if mibBuilder.loadTexts: vpSecurityEspTransTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityEspTransTable.setDescription('The Security ESP Transform Table.')
vpSecurityEspTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecEspTransName"))
if mibBuilder.loadTexts: vpSecurityEspTransEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityEspTransEntry.setDescription('A Security ESP Transform Table entry.')
vpSecEspTransName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransName.setDescription('The name of the ESP Transform.')
vpSecEspTransEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransEncapMode.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransEncapMode.setDescription('The ESP Encapsulation Mode.')
vpSecEspTransIntgAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransIntgAlgo.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransIntgAlgo.setDescription('The ESP Integrity Algorithm.')
vpSecEspTransCipherAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("des3", 3), ("cdmf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransCipherAlgo.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransCipherAlgo.setDescription('The ESP Cipher Alogrithm.')
vpSecEspTransSaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransSaLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransSaLifeTime.setDescription('The Lifetime of the ESP Security Association. This specifies the amount of time in seconds after which the ESP Security Association is renegotiated.')
vpSecEspTransSaLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransSaLifeSize.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransSaLifeSize.setDescription('The Lifesize of the ESP Security Association. This specifies the amount of traffic in Kbytes after which the ESP Security Association is renegotiated.')
vpSecurityIpcompTransTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 5), )
if mibBuilder.loadTexts: vpSecurityIpcompTransTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityIpcompTransTable.setDescription('The Security IPCOMP Transform Table.')
vpSecurityIpcompTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 5, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecIpcompTransName"))
if mibBuilder.loadTexts: vpSecurityIpcompTransEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityIpcompTransEntry.setDescription('A Security IPCOMP Transform Table entry.')
vpSecIpcompTransName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecIpcompTransName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecIpcompTransName.setDescription('The name of the IPCOMP Transform.')
vpSecIpcompTransAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecIpcompTransAlgo.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecIpcompTransAlgo.setDescription('The IPCOMP Alogrithm.')
vpSecIpcompTransVendAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecIpcompTransVendAlgo.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecIpcompTransVendAlgo.setDescription('The IPCOMP Vendor Alogrithm.')
vpSecIpcompTransSaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecIpcompTransSaLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecIpcompTransSaLifeTime.setDescription('The Lifetime of the IPCOMP Security Association. This specifies the amount of time in seconds after which the IPCOMP Security Association is renegotiated.')
vpSecIpcompTransSaLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecIpcompTransSaLifeSize.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecIpcompTransSaLifeSize.setDescription('The Lifesize of the IPCOMP Security Association. This specifies the amount of traffic in Kbytes after which the IPCOMP Security Association is renegotiated.')
vpSecurityPropCorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 6), )
if mibBuilder.loadTexts: vpSecurityPropCorTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityPropCorTable.setDescription('The Security Proposal Correlation Table. This table can be used to to correlate Security Actions with Security Proposals. A Security Action may be associated with one or more Security Proposals.')
vpSecurityPropCorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 6, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecActName"), (0, "VPNPOLICY-MIB", "vpSecCorPropOrder"))
if mibBuilder.loadTexts: vpSecurityPropCorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityPropCorEntry.setDescription('A Security Proposal Correlation Table entry.')
vpSecCorPropOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecCorPropOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecCorPropOrder.setDescription('The Proposal Order for the Security Action.')
vpSecCorPropRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecCorPropRef.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecCorPropRef.setDescription('The name of the Security Proposal. This name can be used to index directly into the vpSecurityProposalTable.')
vpSecurityAhCorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 7), )
if mibBuilder.loadTexts: vpSecurityAhCorTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityAhCorTable.setDescription('The Security AH Transform Correlation Table. This table can be used to correlate Security Proposals with AH Transforms. A Security Proposal may be associated with one or more AH Transforms.')
vpSecurityAhCorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 7, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecPropName"), (0, "VPNPOLICY-MIB", "vpSecAhTransCorOrder"))
if mibBuilder.loadTexts: vpSecurityAhCorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityAhCorEntry.setDescription('A Security AH Transform Correlation Table entry.')
vpSecAhTransCorOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecAhTransCorOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecAhTransCorOrder.setDescription('The AH Transform Order for the Security Proposal.')
vpSecAhTransCorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecAhTransCorName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecAhTransCorName.setDescription('The name of the AH Transform. This name can be used to index directly into the vpSecurityAhTransformTable.')
vpSecurityEspCorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 8), )
if mibBuilder.loadTexts: vpSecurityEspCorTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityEspCorTable.setDescription('The Security ESP Transform Correlation Table. This table can be used to correlate Security Proposals with ESP Transforms. A Security Proposal may be associated with one or more ESP Transforms.')
vpSecurityEspCorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 8, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecPropName"), (0, "VPNPOLICY-MIB", "vpSecEspTransCorOrder"))
if mibBuilder.loadTexts: vpSecurityEspCorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityEspCorEntry.setDescription('A Security Security ESP Transform Correlation Table entry.')
vpSecEspTransCorOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransCorOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransCorOrder.setDescription('The ESP Transform Order for the Security Proposal.')
vpSecEspTransCorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecEspTransCorName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecEspTransCorName.setDescription('The name of the ESP Transform. This name can be used to index directly into the vpSecurityEspTransformTable.')
vpSecurityIpcompCorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 9), )
if mibBuilder.loadTexts: vpSecurityIpcompCorTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityIpcompCorTable.setDescription('The Security IPCOMP Transform Correlation Table. This table can be used to correlate Security Proposals with IPCOMP Transforms. A Security Proposal may be associated with one or more IPCOMP Transforms.')
vpSecurityIpcompCorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 9, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecPropName"), (0, "VPNPOLICY-MIB", "vpSecIpcompTransCorOrder"))
if mibBuilder.loadTexts: vpSecurityIpcompCorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityIpcompCorEntry.setDescription('A Security Security IPCOMP Transform Correlation Table entry.')
vpSecIpcompTransCorOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecIpcompTransCorOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecIpcompTransCorOrder.setDescription('The IPCOMP Transform Order for the Security Proposal.')
vpSecIpcompTransCorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecIpcompTransCorName.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecIpcompTransCorName.setDescription('The name of the IPCOMP Transform. This name can be used to index directly into the vpSecurityIpcompTransformTable.')
vpSecurityActiveInstTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 10), )
if mibBuilder.loadTexts: vpSecurityActiveInstTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityActiveInstTable.setDescription('The Security Active Instance Table.')
vpSecurityActiveInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 10, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpSecActName"), (0, "VPNPOLICY-MIB", "vpSecActInstOrder"))
if mibBuilder.loadTexts: vpSecurityActiveInstEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecurityActiveInstEntry.setDescription('A Security Active Instance Table entry.')
vpSecActInstOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActInstOrder.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActInstOrder.setDescription('The Active Instance Order for the Security Action.')
vpSecActInstTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActInstTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActInstTunnelId.setDescription('The IPSec Phase-2 Tunnel ID.')
vpSecActInstTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 4, 4, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpSecActInstTunnelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vpSecActInstTunnelIndex.setDescription('The IPSec Phase-2 Tunnel Index (ipSecTunnelIndex from the IBM IPSec MIB).')
vpTestPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1), )
if mibBuilder.loadTexts: vpTestPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolicyTable.setDescription('The Policy Test Table.')
vpTestPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1), ).setIndexNames((0, "VPNPOLICY-MIB", "vpTestPolIndex"))
if mibBuilder.loadTexts: vpTestPolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolicyEntry.setDescription('A Policy Test Table entry.')
vpTestPolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolIndex.setDescription('The index of the Policy Test Table. The value of the index is a number which was specified during row creation.')
vpTestPolSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 2), VpIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolSrcAddr.setDescription('The packet source IP Address which was specified during row creation. This object may not be altered after the row is created.')
vpTestPolSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolSrcPort.setDescription('The packet source port which was specified during row creation. This object may not be altered after the row is created.')
vpTestPolDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 4), VpIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolDstAddr.setDescription('The packet destination IP Address which was specified during row creation. This object may not be altered after the row is created.')
vpTestPolDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolDstPort.setDescription('The packet destination port which was specified during row creation. This object may not be altered after the row is created.')
vpTestPolProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolProtocol.setDescription('The packet protocol which was specified during row creation. This object may not be altered after the row is created.')
vpTestPolTosByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolTosByte.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolTosByte.setDescription('The packet Type of Service (TOS) Byte which was specified during row creation. This object may not be altered after the row is created.')
vpTestPolIngressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 8), VpIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolIngressAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolIngressAddr.setDescription('The IP address of the device interface which received the packet. An IP address of 0.0.0.0 should be used to test policies which do NOT have Ingress/Egress interface definitions.')
vpTestPolEgressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 9), VpIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolEgressAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolEgressAddr.setDescription('The IP address of the device interface which will be used to send the packet. An IP address of 0.0.0.0 should be used to test policies which do NOT have Ingress/Egress interface definitions.')
vpTestPolResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("successful", 2), ("noPolicyMatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolResult.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolResult.setDescription('The result of the test.')
vpTestPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpTestPolStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolStatus.setDescription('This object is used to create a new row. It may not be altered after the row is created.')
vpTestPolRsvpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolRsvpPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolRsvpPolicy.setDescription('The RSVP Policy Name found for this test. If the result of this test is successful, this object is will contain the a valid policy name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
vpTestPolRsvpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolRsvpAction.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolRsvpAction.setDescription('The Rsvp Action Name found for this test. If the result of this test is successful, this object is will contain the a valid action name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
vpTestPolDiffServPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolDiffServPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolDiffServPolicy.setDescription('The Differential Services Policy Name found for this test. If the result of this test is successful, this object is will contain the a valid policy name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
vpTestPolDiffServAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolDiffServAction.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolDiffServAction.setDescription('The Differential Services Action Name found for this test. If the result of this test is successful, this object is will contain the a valid action name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
vpTestPolIsakmpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolIsakmpPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolIsakmpPolicy.setDescription('The ISAKMP Policy Name found for this test. If the result of this test is successful, this object is will contain the a valid policy name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
vpTestPolIsakmpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolIsakmpAction.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolIsakmpAction.setDescription('The ISAKMP Action Name found for this test. If the result of this test is successful, this object is will contain the a valid action name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
vpTestPolIPSecPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolIPSecPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolIPSecPolicy.setDescription('The IPSec Policy Name found for this test. If the result of this test is successful, this object is will contain the a valid policy name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
vpTestPolIPSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15, 5, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpTestPolIPSecAction.setStatus('mandatory')
if mibBuilder.loadTexts: vpTestPolIPSecAction.setDescription('The IPSec Action Name found for this test. If the result of this test is successful, this object is will contain the a valid action name if a match was found or NULL if a match was not found. If the result is not successful, the value of this object will be NULL.')
mibBuilder.exportSymbols("VPNPOLICY-MIB", vpPolDiffServActionRef=vpPolDiffServActionRef, vpSecEspTransCorOrder=vpSecEspTransCorOrder, vpTrafProfSrcHiPort=vpTrafProfSrcHiPort, vpSecActType=vpSecActType, vpTrafficIfTable=vpTrafficIfTable, vpPolIsakmpActionRef=vpPolIsakmpActionRef, vpTestPolDiffServAction=vpTestPolDiffServAction, vpTestPolSrcPort=vpTestPolSrcPort, vpSysCurTime=vpSysCurTime, vpTestPolIndex=vpTestPolIndex, vpTestPolIsakmpAction=vpTestPolIsakmpAction, vpDifSrvActBwShare=vpDifSrvActBwShare, vpIkPropAuthMethod=vpIkPropAuthMethod, vpTrafProfRcvTosByteMask=vpTrafProfRcvTosByteMask, vpTrafIfOutAddr=vpTrafIfOutAddr, vpDifSrvActMatches=vpDifSrvActMatches, vpSecIpcompTransCorName=vpSecIpcompTransCorName, vpIkActExchangeMode=vpIkActExchangeMode, vpSecIpcompTransVendAlgo=vpSecIpcompTransVendAlgo, vpSysCurConfigSource=vpSysCurConfigSource, vpSecActTunnelInTunnel=vpSecActTunnelInTunnel, vpValPrdMonthMask=vpValPrdMonthMask, vpIkActAutoStart=vpIkActAutoStart, vpIsakmpActiveInstTable=vpIsakmpActiveInstTable, vpSecEspTransSaLifeTime=vpSecEspTransSaLifeTime, vpIkActMatches=vpIkActMatches, vpSecActRemProxyType=vpSecActRemProxyType, vpValPrdStartTod=vpValPrdStartTod, vpPolCorRulePriOrder=vpPolCorRulePriOrder, vpTestPolTosByte=vpTestPolTosByte, vpPolName=vpPolName, vpPolCorRuleOrder=vpPolCorRuleOrder, vpPolRulePriSecurityActionRef=vpPolRulePriSecurityActionRef, vpSecActTunEndAddr=vpSecActTunEndAddr, vpLdapGlobalOper=vpLdapGlobalOper, vpPolicyCorTable=vpPolicyCorTable, vpSecPropPrfFwdSecr=vpSecPropPrfFwdSecr, vpPolSecurityActionRef=vpPolSecurityActionRef, vpIkPropHashAlgo=vpIkPropHashAlgo, vpValPrdStopTod=vpValPrdStopTod, vpRsvpActMaxRatePerFlow=vpRsvpActMaxRatePerFlow, vpValidityPeriod=vpValidityPeriod, vpSecurityAhCorTable=vpSecurityAhCorTable, vpSysRefreshConfig=vpSysRefreshConfig, vpSecActInstTunnelId=vpSecActInstTunnelId, vpPolRulePriRsvpActionRef=vpPolRulePriRsvpActionRef, vpSecActLocProxySrcPort=vpSecActLocProxySrcPort, vpSecurityIpcompCorTable=vpSecurityIpcompCorTable, vpPolValidityPeriodRef=vpPolValidityPeriodRef, vpPolicyEntry=vpPolicyEntry, vpSysMibLevel=vpSysMibLevel, vpDifSrvActPermission=vpDifSrvActPermission, vpTrafProfDstLoPort=vpTrafProfDstLoPort, vpSecAhTransName=vpSecAhTransName, vpSecurityEspTransEntry=vpSecurityEspTransEntry, vpSecurityProposalEntry=vpSecurityProposalEntry, vpRsvpActDiffSvrRef=vpRsvpActDiffSvrRef, vpPolRulePriTrafficProfileRef=vpPolRulePriTrafficProfileRef, vpTestPolIngressAddr=vpTestPolIngressAddr, ibmIROCVPNpolicy=ibmIROCVPNpolicy, vpTestPolSrcAddr=vpTestPolSrcAddr, vpPolRulePriValidityPeriodRef=vpPolRulePriValidityPeriodRef, vpIkActMinPercentRefresh=vpIkActMinPercentRefresh, vpSecActInstTunnelIndex=vpSecActInstTunnelIndex, vpLdapGlobal=vpLdapGlobal, vpRsvpActMatches=vpRsvpActMatches, vpLdapGblAdminServerLdapLvl=vpLdapGblAdminServerLdapLvl, vpTrafficRemIdTable=vpTrafficRemIdTable, vpValPrdDaysMask=vpValPrdDaysMask, vpSecActDontFragBitHandling=vpSecActDontFragBitHandling, vpDifSrvActName=vpDifSrvActName, vpDifSrvActTransTosByteMask=vpDifSrvActTransTosByteMask, vpIsakmpCorTable=vpIsakmpCorTable, vpRsvpAction=vpRsvpAction, vpSecEspTransName=vpSecEspTransName, vpPolTrafficProfileRef=vpPolTrafficProfileRef, vpDiffServActionEntry=vpDiffServActionEntry, vpLdapGblOperPortNumber=vpLdapGblOperPortNumber, vpTrafProfName=vpTrafProfName, vpTrafProfDstHiAddr=vpTrafProfDstHiAddr, vpTrafProfDstHiPort=vpTrafProfDstHiPort, vpValPrdName=vpValPrdName, vpSecurityActionTable=vpSecurityActionTable, vpTrafProfSrcLoPort=vpTrafProfSrcLoPort, vpDiffServActionTable=vpDiffServActionTable, vpTestPolIPSecAction=vpTestPolIPSecAction, vpTrafProfLoProtocol=vpTrafProfLoProtocol, vpSecEspTransIntgAlgo=vpSecEspTransIntgAlgo, vpActions=vpActions, vpSystemLdap=vpSystemLdap, vpSecurityIpcompTransTable=vpSecurityIpcompTransTable, vpTestPolIPSecPolicy=vpTestPolIPSecPolicy, vpTrafficIfEntry=vpTrafficIfEntry, vpTrafRemIdValue=vpTrafRemIdValue, vpSecActName=vpSecActName, vpSecurityProposalTable=vpSecurityProposalTable, vpTrafProfHiProtocol=vpTrafProfHiProtocol, vpTrafficProfileEntry=vpTrafficProfileEntry, vpPolRulePriName=vpPolRulePriName, vpPolicyTable=vpPolicyTable, vpIsakmpActiveInstEntry=vpIsakmpActiveInstEntry, vpIkPropName=vpIkPropName, vpIkActPolicyRole=vpIkActPolicyRole, vpSecActLocProxyType=vpSecActLocProxyType, vpSecActLocProxyValue=vpSecActLocProxyValue, vpSecCorPropOrder=vpSecCorPropOrder, vpPolRulePriPriority=vpPolRulePriPriority, vpSecurityActiveInstTable=vpSecurityActiveInstTable, vpIkPropCipherAlgo=vpIkPropCipherAlgo, vpDifSrvActTransTosByteMatch=vpDifSrvActTransTosByteMatch, vpIkActConnSaLifeTime=vpIkActConnSaLifeTime, vpDifSrvActQuePriority=vpDifSrvActQuePriority, vpRsvpActMaxFlowDuration=vpRsvpActMaxFlowDuration, vpLdapGblAdminPortNumber=vpLdapGblAdminPortNumber, vpTrafProfDstLoAddr=vpTrafProfDstLoAddr, vpSystem=vpSystem, vpSecurityEspCorEntry=vpSecurityEspCorEntry, vpSecurityPropCorEntry=vpSecurityPropCorEntry, vpTestPolRsvpPolicy=vpTestPolRsvpPolicy, vpTrafRemIdType=vpTrafRemIdType, vpTrafProfLocIdType=vpTrafProfLocIdType, vpSecurityAction=vpSecurityAction, vpIsakmpActionEntry=vpIsakmpActionEntry, vpSecCorPropRef=vpSecCorPropRef, vpIkPropSaLifeTime=vpIkPropSaLifeTime, vpTrafRemIdAuthMode=vpTrafRemIdAuthMode, vpPolRulePriOrder=vpPolRulePriOrder, vpSecIpcompTransAlgo=vpSecIpcompTransAlgo, vpTrafProfSrcLoAddr=vpTrafProfSrcLoAddr, vpSystemGlobal=vpSystemGlobal, vpIsakmpCorEntry=vpIsakmpCorEntry, vpTrafProfSrcHiAddr=vpTrafProfSrcHiAddr, vpTrafProfLocIdValue=vpTrafProfLocIdValue, vpSecActTunStartAddr=vpSecActTunStartAddr, vpSecActReplayPrevention=vpSecActReplayPrevention, vpSecIpcompTransSaLifeSize=vpSecIpcompTransSaLifeSize, vpPolRsvpActionRef=vpPolRsvpActionRef, vpTrafIfIndex=vpTrafIfIndex, vpIkActName=vpIkActName, vpPolRulePriIpsecManualTunId=vpPolRulePriIpsecManualTunId, vpLdapGblOperPrimServerAddr=vpLdapGblOperPrimServerAddr, vpIsakmpProposalTable=vpIsakmpProposalTable, vpSecActRemProxyProtocol=vpSecActRemProxyProtocol, vpSecActRemProxySrcPort=vpSecActRemProxySrcPort, vpSecActRemProxyValue=vpSecActRemProxyValue, vpPolicyRulePriTable=vpPolicyRulePriTable, vpSecIpcompTransSaLifeTime=vpSecIpcompTransSaLifeTime, vpSecurityIpcompTransEntry=vpSecurityIpcompTransEntry, vpSecAhTransCorOrder=vpSecAhTransCorOrder, vpSecurityActiveInstEntry=vpSecurityActiveInstEntry, vpTestPolIsakmpPolicy=vpTestPolIsakmpPolicy, vpSecurityEspTransTable=vpSecurityEspTransTable, vpSecurityPropCorTable=vpSecurityPropCorTable, vpSysHoursFromCut=vpSysHoursFromCut, vpLdapGblOperServerLdapLvl=vpLdapGblOperServerLdapLvl, vpLdapGblOperUserId=vpLdapGblOperUserId, vpSecIpcompTransCorOrder=vpSecIpcompTransCorOrder, vpSecActMatches=vpSecActMatches, vpConditions=vpConditions, vpTestPolRsvpAction=vpTestPolRsvpAction, vpLdapGblAdminRetryInterval=vpLdapGblAdminRetryInterval, vpSecurityAhTransEntry=vpSecurityAhTransEntry, vpSecEspTransCipherAlgo=vpSecEspTransCipherAlgo, vpIsakmpActionTable=vpIsakmpActionTable, vpPolIpsecManualTunId=vpPolIpsecManualTunId, vpTrafProfRemGroup=vpTrafProfRemGroup, vpLdapGblAdminSecServerAddr=vpLdapGblAdminSecServerAddr, vpSecPropName=vpSecPropName, vpLdapGblAdminPolicyBaseName=vpLdapGblAdminPolicyBaseName, vpIkPropDiffHellmanGrpId=vpIkPropDiffHellmanGrpId, vpSecActAutoStart=vpSecActAutoStart, vpTrafProfRcvTosByteMatch=vpTrafProfRcvTosByteMatch, vpSecAhTransSaLifeTime=vpSecAhTransSaLifeTime, vpIkCorPropOrder=vpIkCorPropOrder, vpPolStatus=vpPolStatus, vpIsakmpProposalEntry=vpIsakmpProposalEntry, vpLdapGblOperPolicyBaseName=vpLdapGblOperPolicyBaseName, vpRsvpActPermission=vpRsvpActPermission, vpTestPolEgressAddr=vpTestPolEgressAddr, vpIkCorPropName=vpIkCorPropName, vpRsvpActName=vpRsvpActName, vpTestPolDstAddr=vpTestPolDstAddr, vpTestPolProtocol=vpTestPolProtocol, vpPolRulePriIsakmpActionRef=vpPolRulePriIsakmpActionRef, vpValPrdStartTime=vpValPrdStartTime, vpDiffServAction=vpDiffServAction, vpRsvpActionTable=vpRsvpActionTable, vpLdapGlobalAdmin=vpLdapGlobalAdmin, vpTests=vpTests, vpRsvpActMaxTokenBucketPerFlow=vpRsvpActMaxTokenBucketPerFlow, vpSecActLocProxyProtocol=vpSecActLocProxyProtocol, vpSecEspTransCorName=vpSecEspTransCorName, vpSecurityIpcompCorEntry=vpSecurityIpcompCorEntry, vpPolicy=vpPolicy, vpSecActInstOrder=vpSecActInstOrder, vpLdapGblAdminTimeOut=vpLdapGblAdminTimeOut, vpPolicyRulePriEntry=vpPolicyRulePriEntry, vpTestPolDiffServPolicy=vpTestPolDiffServPolicy, vpSecurityAhTransTable=vpSecurityAhTransTable, vpLdapGblOperRetryInterval=vpLdapGblOperRetryInterval, vpSecurityEspCorTable=vpSecurityEspCorTable, vpValidityPeriodEntry=vpValidityPeriodEntry, vpSecAhTransCorName=vpSecAhTransCorName, vpSecurityAhCorEntry=vpSecurityAhCorEntry, vpTrafficProfileTable=vpTrafficProfileTable, vpTrafRemIdIndex=vpTrafRemIdIndex, vpTestPolDstPort=vpTestPolDstPort, vpLdapGblOperSecServerAddr=vpLdapGblOperSecServerAddr, vpTestPolicyTable=vpTestPolicyTable, vpLdapGblAdminPrimServerAddr=vpLdapGblAdminPrimServerAddr, vpLdapGblOperTimeOut=vpLdapGblOperTimeOut, vpSecPropDiffHellmanGrpId=vpSecPropDiffHellmanGrpId, vpIkActInstOrder=vpIkActInstOrder, vpPolMatches=vpPolMatches, vpIkPropSaLifeSize=vpIkPropSaLifeSize, vpTestPolicyEntry=vpTestPolicyEntry, VpIpAddress=VpIpAddress, vpSysUpTime=vpSysUpTime, vpLdapGblAdminLdapStatus=vpLdapGblAdminLdapStatus, vpTrafIfInAddr=vpTrafIfInAddr, vpPolRulePriDiffServActionRef=vpPolRulePriDiffServActionRef, vpTrafficRemIdEntry=vpTrafficRemIdEntry, vpLdapGblOperLdapStatus=vpLdapGblOperLdapStatus, vpSecEspTransSaLifeSize=vpSecEspTransSaLifeSize, vpDifSrvActBwType=vpDifSrvActBwType, vpValPrdEndTime=vpValPrdEndTime, vpPolicyCorEntry=vpPolicyCorEntry, vpLdapGblAdminUserId=vpLdapGblAdminUserId, vpSecAhTransIntgAlgo=vpSecAhTransIntgAlgo, vpPolValidity=vpPolValidity, vpIkActInstTunnelIndex=vpIkActInstTunnelIndex, vpTestPolResult=vpTestPolResult, vpIkActConnSaLifeSize=vpIkActConnSaLifeSize, vpSecurityActionEntry=vpSecurityActionEntry, vpTrafficProfile=vpTrafficProfile, vpSecAhTransEncapMode=vpSecAhTransEncapMode, vpSecActMinPercentRefresh=vpSecActMinPercentRefresh, vpPolRulePriStatus=vpPolRulePriStatus, vpRsvpActMinDelay=vpRsvpActMinDelay, vpSecActSaRefreshThresh=vpSecActSaRefreshThresh, vpSecIpcompTransName=vpSecIpcompTransName, vpSecAhTransSaLifeSize=vpSecAhTransSaLifeSize, vpIsakmpAction=vpIsakmpAction, vpSecEspTransEncapMode=vpSecEspTransEncapMode, vpTestPolStatus=vpTestPolStatus, vpRsvpActionEntry=vpRsvpActionEntry, vpValidityPeriodTable=vpValidityPeriodTable, vpIkActInstTunnelId=vpIkActInstTunnelId, vpPolPriority=vpPolPriority)
