#
# PySNMP MIB module WANSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WANSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, Counter32, Gauge32, Unsigned32, Counter64, NotificationType, IpAddress, enterprises, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Counter32", "Gauge32", "Unsigned32", "Counter64", "NotificationType", "IpAddress", "enterprises", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Integer32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3))
netElement = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7))
lanprobe = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1))
rmonExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5))
statsExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1))
wanStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8))
if mibBuilder.loadTexts: wanStatsMIB.setLastUpdated('9911180000Z')
if mibBuilder.loadTexts: wanStatsMIB.setOrganization('Agilent Technologies NetMetrix Division')
if mibBuilder.loadTexts: wanStatsMIB.setContactInfo('Agilent Technologies NetMetrix Division 5070 Centennial Blvd Colorado Springs, CO 80919')
if mibBuilder.loadTexts: wanStatsMIB.setDescription('The MIB containing RMON media statistics for WAN links.')
wanStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1))
wanSignalingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1))
wanProtocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2))
wanPvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3))
wanHistoryMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2))
wanSignalingHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1))
wanProtocolHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2))
wanPvcHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3))
wanT1E1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1), )
if mibBuilder.loadTexts: wanT1E1StatsTable.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsTable.setDescription('T1/E1 signaling statistics.')
wanT1E1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanT1E1StatsIndex"))
if mibBuilder.loadTexts: wanT1E1StatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsEntry.setDescription('Statistics for a T1/E1 interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanT1E1StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanT1E1StatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsIndex.setDescription('The value of this object uniquely identifies this wanT1E1StatsTable entry.')
wanT1E1StatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanT1E1StatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsDataSource.setDescription('This object identifies the source of the data that this wanT1E1StatsEntry analyzes. This source can be any DS1 or E1 interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be ds1(18).')
wanT1E1StatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanT1E1StatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsInFrames.setDescription('The total number of frames seen originating from the far end of the link including errored frames.')
wanT1E1StatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsOutFrames.setDescription('The total number of frames seen originating from the near end of the link including errored frames.')
wanT1E1StatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link including errored frames.')
wanT1E1StatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link including errored frames.')
wanT1E1StatsESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsESs.setDescription('For ESF and E1-CRC links an Errored Second is a second with one or more Path Code Violations OR one or more Out of Frame defects OR one or more Controlled Slip events OR a detected AIS defect. For D4 and E1-noCRC links, the presence of Bipolar Violations also triggers an Errored Second. This is not incremented during an Unavailable Second.')
wanT1E1StatsSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsSESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsSESs.setDescription(' A Severely Errored Second for ESF signals is a second with 320 or more Path Code Violation Error Events OR one or more Out of Frame defects OR a detected AIS defect. For E1-CRC signals, a Severely Errored Second is a second with 832 or more Path Code Violation error events OR one or more Out of Frame defects. For E1-noCRC signals, a Severely Errored Second is a 2048 LCVs or more. For D4 signals, a Severely Errored Second is a count of one-second intervals with Framing Error events, or an OOF defect, or 1544 LCVs or more. Controlled slips are not included in this parameter. This is not incremented during an Unavailable Second.')
wanT1E1StatsSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsSEFSs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsSEFSs.setDescription('An Severely Errored Framing Second is a second with one or more Out of Frame defects OR a detected AIS defect.')
wanT1E1StatsOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsOOFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsOOFs.setDescription('An OOF defect is the occurrence of a particular density of Framing Error events. For T1 links, an Out of Frame defect is declared when the receiver detects two or more framing errors within a 3 msec period for ESF signals and 0.75 msec for D4 signals, or two or more errors out of five or fewer consecutive framing-bits. For E1 links, an Out Of Frame defect is declared when three consecutive frame alignment signals have been received with an error (see G.706 Section 4.1 [17]). Once an Out Of Frame Defect is declared, the framer starts searching for a correct framing pattern. The Out of Frame defect ends when the signal is in frame. In-frame occurs when there are fewer than two frame bit errors within 3 msec period for ESF signals and 0.75 msec for D4 signals. For E1 links, in-frame occurs when a) in frame N the frame alignment signal is correct and b) in frame N+1 the frame alignment signal is absent (i.e., bit 2 in TS0 is a one) and c) in frame N+2 the frame alignment signal is present and correct.')
wanT1E1StatsUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsUASs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsUASs.setDescription('Unavailable Seconds (UAS) are calculated by counting the number of seconds that the interface is unavailable. The DS1 interface is said to be unavailable from the onset of 10 contiguous SESs, or the onset of the condition leading to a failure (see Failure States). If the condition leading to the failure was immediately preceded by one or more contiguous SESs, then the DS1 interface unavailability starts from the onset of these SESs. Once unavailable, and if no failure is present, the DS1 interface becomes available at the onset of 10 contiguous seconds with no SESs. Once unavailable, and if a failure is present, the DS1 interface becomes available at the onset of 10 contiguous seconds with no SESs, if the failure clearing time is less than or equal to 10 seconds. If the failure clearing time is more than 10 seconds, the DS1 interface becomes available at the onset of 10 contiguous seconds with no SESs, or the onset period leading to the successful clearing condition, whichever occurs later. With respect to the DS1 error counts, all counters are incremented while the DS1 interface is deemed available. While the interface is deemed unavailable, the only count that is incremented is UASs.')
wanT1E1StatsCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsCSSs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsCSSs.setDescription('A Controlled Slip Second is a one-second interval containing one or more controlled slips.')
wanT1E1StatsPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsPCVs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsPCVs.setDescription('A Path Coding Violation error event is a frame synchronization bit error in the D4 and E1-noCRC formats, or a CRC error in the ESF and E1-CRC formats.')
wanT1E1StatsLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsLESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsLESs.setDescription('A Line Errored Second, according to T1M1.3, is a second in which one or more Line Code Violation error events were detected. While many implementations are currently unable to detect the zero strings, it is expected that interface manufacturers will add this capability in deference to ANSI; therefore, it will become available in time. In the T1M1.3 specification, near end Line Code Violations and far end Line Errored Seconds are counted. For consistency, we count Line Errored Seconds at both ends.')
wanT1E1StatsBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsBESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsBESs.setDescription('A Bursty Errored Second (also known as Errored Second type B) is a second with fewer than 320 and more than 1 Path Coding Violation error events, no Severely Errored Frame defects and no detected incoming AIS defects. Controlled slips are not included in this parameter. This is not incremented during an Unavailable Second.')
wanT1E1StatsDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsDMs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsDMs.setDescription('A Degraded Minute is one in which the estimated error rate exceeds 1E-6 but does not exceed 1E-3 (see G.821 [15]). Degraded Minutes are determined by collecting all of the Available Seconds, removing any Severely Errored Seconds grouping the result in 60-second long groups and counting a 60-second long group (a.k.a., minute) as degraded if the cumulative errors during the seconds present in the group exceed 1E-6. Available seconds are merely those seconds which are not Unavailable as described below.')
wanT1E1StatsLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsLCVs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsLCVs.setDescription('A Line Coding Violation (LCV) is the occurrence of either a Bipolar Violation (BPV) or Excessive Zeroes (EXZ) Error Event.')
wanT1E1StatsLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsLOFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsLOFs.setDescription("For T1 links, the Loss Of Frame failure is declared when an OOF or LOS defect has persisted for T seconds, where 2 <= T <= 10. The Loss Of Frame failure is cleared when there have been no OOF or LOS defects during a period T where 0 <= T <= 20. Many systems will perform 'hit integration' within the period T before declaring or clearing the failure e.g., see TR 62411 [16]. For E1 links, the Loss Of Frame Failure is declared when an OOF defect is detected.")
wanT1E1StatsLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsLOSs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsLOSs.setDescription('For T1, the Loss Of Signal failure is declared upon observing 175 +/- 75 contiguous pulse positions with no pulses of either positive or negative polarity. The LOS failure is cleared upon observing an average pulse density of at least 12.5% over a period of 175 +/- 75 contiguous pulse positions starting with the receipt of a pulse. For E1 links, the Loss Of Signal failure is declared when greater than 10 consecutive zeroes are detected (see O.162 Section 3.4.4).')
wanT1E1StatsRAIs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsRAIs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsRAIs.setDescription("The Far End Alarm failure is also known as 'Yellow Alarm' in the T1 case and 'Distant Alarm' in the E1 case. For D4 links, the Far End Alarm failure is declared when bit 6 of all channels has been zero for at least 335 ms and is cleared when bit 6 of at least one channel is non-zero for a period T, where T is usually less than one second and always less than 5 seconds. The Far End Alarm failure is not declared for D4 links when a Loss of Signal is detected. For ESF links, the Far End Alarm failure is declared if the Yellow Alarm signal pattern occurs in at least seven out of ten contiguous 16-bit pattern intervals and is cleared if the Yellow Alarm signal pattern does not occur in ten contiguous 16-bit signal pattern intervals. For E1 links, the Far End Alarm failure is declared when bit 3 of time-slot zero is received set to one on two consecutive occasions. The Far End Alarm failure is cleared when bit 3 of time-slot zero is received set to zero.")
wanT1E1StatsAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsAISs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsAISs.setDescription("The Alarm Indication Signal failure is declared when an AIS defect is detected at the input and the AIS defect still exists after the Loss Of Frame failure (which is caused by the unframed nature of the 'all-ones' signal) is declared. The AIS failure is cleared when the Loss Of Frame failure is cleared.")
wanT1E1StatsTS16AISs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsTS16AISs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsTS16AISs.setDescription('For E1 links, the TS16 Alarm Indication Signal failure is declared when time-slot 16 is received as all ones for all frames of two consecutive multiframes (see G.732 Section 4.2.6). This condition is never declared for T1.')
wanT1E1StatsLOMFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsLOMFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsLOMFs.setDescription("The Loss Of MultiFrame failure is declared when two consecutive multiframe alignment signals (bits 4 through 7 of TS16 of frame 0) have been received with an error. The Loss Of Multiframe failure is cleared when the first correct multiframe alignment signal is received. The Loss Of Multiframe failure can only be declared for E1 links operating with G.732 [18] framing (sometimes called 'Channel Associated Signalling' mode).")
wanT1E1StatsFarLOMFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1StatsFarLOMFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsFarLOMFs.setDescription("The Far End Loss Of Multiframe failure is declared when bit 2 of TS16 of frame 0 is received set to one on two consecutive occasions. The Far End Loss Of Multiframe failure is cleared when bit 2 of TS16 of frame 0 is received set to zero. The Far End Loss Of Multiframe failure can only be declared for E1 links operating in 'Channel Associated Signalling' mode.")
wanT1E1StatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 26), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanT1E1StatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsOwner.setDescription('The entity that configured this entry.')
wanT1E1StatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanT1E1StatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanT1E1StatsStatus.setDescription('The status of this wanT1E1StatsTable entry.')
wanT1E1HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1), )
if mibBuilder.loadTexts: wanT1E1HistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryTable.setDescription('T1/E1 signaling statistics.')
wanT1E1HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanT1E1HistoryIndex"), (0, "WANSTATS-MIB", "wanT1E1HistorySampleIndex"))
if mibBuilder.loadTexts: wanT1E1HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryEntry.setDescription('Statistics for a particular T1/E1 interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanT1E1HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanT1E1HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanT1E1HistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanT1E1HistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanT1E1HistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanT1E1HistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryDropEvents.setDescription('The change in value of wanT1E1StatsDropEvents during the interval.')
wanT1E1HistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryInFrames.setDescription('The change in value of wanT1E1StatsInFrames during the interval.')
wanT1E1HistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryOutFrames.setDescription('The change in value of wanT1E1StatsOutFrames during the interval.')
wanT1E1HistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryInOctets.setDescription('The change in value of wanT1E1StatsInOctets during the interval.')
wanT1E1HistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryOutOctets.setDescription('The change in value of wanT1E1StatsOutOctets during the interval.')
wanT1E1HistoryESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryESs.setDescription('The change in value of wanT1E1StatsESs during the interval.')
wanT1E1HistorySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistorySESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistorySESs.setDescription('The change in value of wanT1E1StatsSESs during the interval.')
wanT1E1HistorySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistorySEFSs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistorySEFSs.setDescription('The change in value of wanT1E1StatsSEFSs during the interval.')
wanT1E1HistoryOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryOOFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryOOFs.setDescription('The change in value of wanT1E1StatsOOFs during the interval.')
wanT1E1HistoryUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryUASs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryUASs.setDescription('The change in value of wanT1E1StatsUASs during the interval.')
wanT1E1HistoryCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryCSSs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryCSSs.setDescription('The change in value of wanT1E1StatsCSSs during the interval.')
wanT1E1HistoryPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryPCVs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryPCVs.setDescription('The change in value of wanT1E1StatsPCVs during the interval.')
wanT1E1HistoryLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryLESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryLESs.setDescription('The change in value of wanT1E1StatsLESs during the interval.')
wanT1E1HistoryBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryBESs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryBESs.setDescription('The change in value of wanT1E1StatsBESs during the interval.')
wanT1E1HistoryDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryDMs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryDMs.setDescription('The change in value of wanT1E1StatsDMs during the interval.')
wanT1E1HistoryLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryLCVs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryLCVs.setDescription('The change in value of wanT1E1StatsLCVs during the interval.')
wanT1E1HistoryLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryLOFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryLOFs.setDescription('The change in value of wanT1E1StatsLOFSs during the interval.')
wanT1E1HistoryLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryLOSs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryLOSs.setDescription('The change in value of wanT1E1StatsLOSs during the interval.')
wanT1E1HistoryRAIs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryRAIs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryRAIs.setDescription('The change in value of wanT1E1StatsRAIs during the interval.')
wanT1E1HistoryAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryAISs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryAISs.setDescription('The change in value of wanT1E1StatsAISs during the interval.')
wanT1E1HistoryTS16AISs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryTS16AISs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryTS16AISs.setDescription('The change in value of wanT1E1StatsTS16AISs during the interval.')
wanT1E1HistoryLOMFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryLOMFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryLOMFs.setDescription('The change in value of wanT1E1StatsLOMFs during the interval.')
wanT1E1HistoryFarLOMFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryFarLOMFs.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryFarLOMFs.setDescription('The change in value of wanT1E1StatsFarLOMFs during the interval.')
wanT1E1HistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanT1E1HistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT1E1HistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanT1E1HistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanVSeriesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2), )
if mibBuilder.loadTexts: wanVSeriesStatsTable.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsTable.setDescription('V-series interface statistics.')
wanVSeriesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanVSeriesStatsIndex"))
if mibBuilder.loadTexts: wanVSeriesStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsEntry.setDescription('The statistics for a V-series interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanVSeriesStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanVSeriesStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsIndex.setDescription('The value of this object uniquely identifies this wanVSeriesStatsTable entry.')
wanVSeriesStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanVSeriesStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsDataSource.setDescription('This object identifies the source of the data that this wanVSeriesStatsEntry analyzes. This source can be and V-series interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be rs232(33) , v35(45), v11(64), or v36(65).')
wanVSeriesStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanVSeriesStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsInFrames.setDescription('The total number of frames seen originating from the far end of the link including errored.')
wanVSeriesStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsOutFrames.setDescription('The total number of frames seen originating from the near end of the link including errored frames.')
wanVSeriesStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link including errored frames.')
wanVSeriesStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link including errored frames.')
wanVSeriesStatsInFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsInFCSs.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsInFCSs.setDescription('Total number of frames with an invalid frame check from the far end of the link.')
wanVSeriesStatsOutFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsOutFCSs.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsOutFCSs.setDescription('Total number of frames with an invalid frame check from the near end of the link.')
wanVSeriesStatsInOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsInOverruns.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsInOverruns.setDescription('Total number of frames from the far end of the link that failed to be received because the receiver did not accept the data in time.')
wanVSeriesStatsOutOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsOutOverruns.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsOutOverruns.setDescription('Total number of frames from the near end of the link that failed to be received because the receiver did not accept the data in time.')
wanVSeriesStatsInterruptedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsInterruptedFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsInterruptedFrames.setDescription('Total number of frames that failed to be received or transmitted on the port due to loss of modem signals.')
wanVSeriesStatsInAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsInAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsInAbortedFrames.setDescription('Number of frames from the far end of the link aborted on the port due to receiving an abort sequence.')
wanVSeriesStatsOutAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesStatsOutAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsOutAbortedFrames.setDescription('Number of frames from the near end of the link aborted on the port due to receiving an abort sequence.')
wanVSeriesStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 15), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanVSeriesStatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsOwner.setDescription('The entity that configured this entry.')
wanVSeriesStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanVSeriesStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesStatsStatus.setDescription('The status of this wanVSeriesStatsTable entry.')
wanVSeriesHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2), )
if mibBuilder.loadTexts: wanVSeriesHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryTable.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanVSeriesHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanVSeriesHistoryIndex"), (0, "WANSTATS-MIB", "wanVSeriesHistorySampleIndex"))
if mibBuilder.loadTexts: wanVSeriesHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryEntry.setDescription('The statistics for a V-series interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanVSeriesHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanVSeriesHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanVSeriesHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanVSeriesHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanVSeriesHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanVSeriesHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryDropEvents.setDescription('The change in value of wanVSeriesStatsDropEvents during the interval.')
wanVSeriesHistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryInFrames.setDescription('The change in value of wanVSeriesStatsInFrames during the interval.')
wanVSeriesHistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryOutFrames.setDescription('The change in value of wanVSeriesStatsOutFrames during the interval.')
wanVSeriesHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryInOctets.setDescription('The change in value of wanVSeriesStatsInOctets during the interval.')
wanVSeriesHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryOutOctets.setDescription('The change in value of wanVSeriesStatsOutOctets during the interval.')
wanVSeriesHistoryInFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryInFCSs.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryInFCSs.setDescription('The change in value of wanVSeriesStatsInFCSs during the interval.')
wanVSeriesHistoryOutFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryOutFCSs.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryOutFCSs.setDescription('The change in value of wanVSeriesStatsOutFCSs during the interval.')
wanVSeriesHistoryInOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryInOverruns.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryInOverruns.setDescription('The change in value of wanVSeriesStatsInOverruns during the interval.')
wanVSeriesHistoryOutOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryOutOverruns.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryOutOverruns.setDescription('The change in value of wanVSeriesStatsOutOverruns during the interval.')
wanVSeriesHistoryInterruptedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryInterruptedFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryInterruptedFrames.setDescription('The change in value of wanVSeriesStatsInterruptedFrames during the interval.')
wanVSeriesHistoryInAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryInAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryInAbortedFrames.setDescription('The change in value of wanVSeriesStatsInAbortedFrames during the interval.')
wanVSeriesHistoryOutAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryOutAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryOutAbortedFrames.setDescription('The change in value of wanVSeriesStatsOutAbortedFrames during the interval.')
wanVSeriesHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanVSeriesHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVSeriesHistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanVSeriesHistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanHssiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3), )
if mibBuilder.loadTexts: wanHssiStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsTable.setDescription('HSSI interface statistics.')
wanHssiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanHssiStatsIndex"))
if mibBuilder.loadTexts: wanHssiStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsEntry.setDescription('The statistics for a HSSI interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanHssiStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanHssiStatsIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsIndex.setDescription('The value of this object uniquely identifies this wanHssiStatsTable entry.')
wanHssiStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanHssiStatsDataSource.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsDataSource.setDescription('This object identifies the source of the data that this wanT1E1StatsEntry analyzes. This source can be any HSSI interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be hssi(46).')
wanHssiStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsDropEvents.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanHssiStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsInFrames.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsInFrames.setDescription('The total number of frames seen originating from the far end of the link including errored frames.')
wanHssiStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsOutFrames.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsOutFrames.setDescription('The total number of frames seen originating from the near end of the link including errored frames.')
wanHssiStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link including errored frames.')
wanHssiStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link including errored frames.')
wanHssiStatsRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsRxLongFrames.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsRxLongFrames.setDescription('Number of long frames from the far end of the link.')
wanHssiStatsRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsRxCrcErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsRxCrcErrors.setDescription('Number of frames from far end of link with CRC errors.')
wanHssiStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsRxOverruns.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsRxOverruns.setDescription('Number of frames from far end of link with FIFO overrun errors.')
wanHssiStatsRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsRxAborts.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsRxAborts.setDescription('Number of frames from far end of link with abort status.')
wanHssiStatsTxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsTxAborts.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsTxAborts.setDescription('Number of frames from near end of link with internal abort errors.')
wanHssiStatsTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsTxUnderruns.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsTxUnderruns.setDescription('Number of frames from near end of link aborted with underrun errors.')
wanHssiStatsRxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsRxRingErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsRxRingErrors.setDescription('Number of receive ring error events.')
wanHssiStatsRxRingOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsRxRingOverruns.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsRxRingOverruns.setDescription('Number of receive ring overrun events.')
wanHssiStatsTxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsTxRingErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsTxRingErrors.setDescription('Number of transmit ring error events.')
wanHssiStatsPortOpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsPortOpErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsPortOpErrors.setDescription('Number of port operation error events.')
wanHssiStatsTxCmplProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiStatsTxCmplProcessings.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsTxCmplProcessings.setDescription('Number of transmit complete processings (TINT).')
wanHssiStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 19), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanHssiStatsOwner.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsOwner.setDescription('The entity that configured this entry.')
wanHssiStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 3, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanHssiStatsStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiStatsStatus.setDescription('The status of this wanHssiStatsTable entry.')
wanHssiHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3), )
if mibBuilder.loadTexts: wanHssiHistoryTable.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryTable.setDescription('HSSI interface statistics.')
wanHssiHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanHssiHistoryIndex"), (0, "WANSTATS-MIB", "wanHssiHistorySampleIndex"))
if mibBuilder.loadTexts: wanHssiHistoryEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryEntry.setDescription('The statistics for a HSSI interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanHssiHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanHssiHistoryIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanHssiHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanHssiHistorySampleIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanHssiHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryIntervalStart.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanHssiHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryDropEvents.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryDropEvents.setDescription('The change in value of wanHssiStatsDropEvents during the interval.')
wanHssiHistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryInFrames.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryInFrames.setDescription('The change in value of wanHssiStatsInFrames during the interval.')
wanHssiHistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryOutFrames.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryOutFrames.setDescription('The change in value of wanHssiStatsOutFrames during the interval.')
wanHssiHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryInOctets.setDescription('The change in value of wanHssiStatsInOctets during the interval.')
wanHssiHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryOutOctets.setDescription('The change in value of wanHssiStatsOutOctets during the interval.')
wanHssiHistoryRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryRxLongFrames.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryRxLongFrames.setDescription('The change in value of wanHssiStatsRxLongFrames during the interval.')
wanHssiHistoryRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryRxCrcErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryRxCrcErrors.setDescription('The change in value of wanHssiStatsRxCrcErrors during the interval.')
wanHssiHistoryRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryRxOverruns.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryRxOverruns.setDescription('The change in value of wanHssiStatsRxOverruns during the interval.')
wanHssiHistoryRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryRxAborts.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryRxAborts.setDescription('The change in value of wanHssiStatsRxAborts during the interval.')
wanHssiHistoryTxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryTxAborts.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryTxAborts.setDescription('The change in value of wanHssiStatsTxAborts during the interval.')
wanHssiHistoryTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryTxUnderruns.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryTxUnderruns.setDescription('The change in value of wanHssiStatsTxUnderruns during the interval.')
wanHssiHistoryRxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryRxRingErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryRxRingErrors.setDescription('The change in value of wanHssiStatsTxRingErrors during the interval.')
wanHssiHistoryRxRingOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryRxRingOverruns.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryRxRingOverruns.setDescription('The change in value of wanHssiStatsRxRingOverruns during the interval.')
wanHssiHistoryTxRingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryTxRingErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryTxRingErrors.setDescription('The change in value of wanHssiStatsTxRingErrors during the interval.')
wanHssiHistoryPortOpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryPortOpErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryPortOpErrors.setDescription('The change in value of wanHssiStatsPortOpErrors during the interval.')
wanHssiHistoryTxCmplProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryTxCmplProcessings.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryTxCmplProcessings.setDescription('The change in value of wanHssiStatsTxCmplProcessings during the interval.')
wanHssiHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryInUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanHssiHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanHssiHistoryOutUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: wanHssiHistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanT3E3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4), )
if mibBuilder.loadTexts: wanT3E3StatsTable.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsTable.setDescription('T3/E3 signaling statistics')
wanT3E3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanT3E3StatsIndex"))
if mibBuilder.loadTexts: wanT3E3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsEntry.setDescription('Statistics for a T3/E3 interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanT3E3StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanT3E3StatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsIndex.setDescription('The value of this object uniquely identifies this wanT3E3StatsTable entry.')
wanT3E3StatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanT3E3StatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsDataSource.setDescription('This object identifies the source of the data that this wanT3E3StatsEntry analyzes. This source can be any DS3 or E3 interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value of the associated ifIndex can only be ds3(30).')
wanT3E3StatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanT3E3StatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsInFrames.setDescription('The total number of frames seen originating from the far end of the link including errored frames.')
wanT3E3StatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsOutFrames.setDescription('The total number of frames seen originating from the near end of the link including errored frames.')
wanT3E3StatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link including errored frames.')
wanT3E3StatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link including errored frames.')
wanT3E3StatsPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsPESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsPESs.setDescription('A PES is a second with one or more PCVs OR one or more Out of Frame defects OR a detected incoming AIS. This gauge is not incremented when UASs are counted.')
wanT3E3StatsPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsPSESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsPSESs.setDescription('A PSES is a second with 44 or more PCVs OR one or more Out of Frame defects OR a detected incoming AIS. This gauge is not incremented when UASs are counted.')
wanT3E3StatsOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsOOFs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsOOFs.setDescription('A DS3 OOF defect is detected when any three or more errors in sixteen or fewer consecutive F-bits occur within a DS3 M-frame. An OOF defect may also be called a Severely Errored Frame (SEF) defect. An OOF defect is cleared when reframe occurs. A DS3 Loss of Frame (LOF) failure is declared when the DS3 OOF defect is consistent for 2 to 10 seconds. The DS3 OOF defect ends when reframe occurs. The DS3 LOF failure is cleared when the DS3 OOF defect is absent for 10 to 20 seconds. An E3 OOF defect is detected when four consecutive frame alignment signals have been incorrectly received in there predicted positions in an E3 signal. E3 frame alignment occurs when the presence of three consecutive frame alignment signals have been detected.')
wanT3E3StatsSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsSEFSs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsSEFSs.setDescription('A SEFS is a second with one or more Out of Frame defects OR a detected incoming AIS.')
wanT3E3StatsUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsUASs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsUASs.setDescription('UAS are calculated by counting the number of seconds that the interface is unavailable. The DS3 interface is said to be unavailable from the onset of 10 contiguous PSESs, or the onset of the condition leading to a failure (see Failure States). If the condition leading to the failure was immediately preceded by one or more contiguous PSESs, then the DS3 interface unavailability starts from the onset of these PSESs. Once unavailable, and if no failure is present, the DS3 interface becomes available at the onset of 10 contiguous seconds with no PSESs. Once unavailable, and if a failure is present, the DS3 interface becomes available at the onset of 10 contiguous seconds with no PSESs, if the failure clearing time is less than or equal to 10 seconds. If the failure clearing time is more than 10 seconds, the DS3 interface becomes available at the onset of 10 contiguous seconds with no PSESs, or the onset period leading to the successful clearing condition, whichever occurs later. With respect to the DS3 error counts, all counters are incremented while the DS3 interface is deemed available. While the interface is deemed unavailable, the only count that is incremented is UASs.')
wanT3E3StatsLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsLCVs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsLCVs.setDescription('This parameter is a count of both BPVs and EXZs occurring over the accumulation period. An EXZ increments the LCV by one regardless of the length of the zero string.')
wanT3E3StatsPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsPCVs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsPCVs.setDescription('For all DS3 applications, a coding violation error event is a P-bit Parity Error event. A P-bit Parity Error event is the occurrence of a received P-bit code on the DS3 M-frame that is not identical to the corresponding locally- calculated code.')
wanT3E3StatsLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsLESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsLESs.setDescription('A Line Errored Second is a second in which one or more CVs occurred OR one or more LOS defects.')
wanT3E3StatsCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsCCVs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsCCVs.setDescription('For C-bit Parity and SYNTRAN DS3 applications, this is the count of coding violations reported via the C-bits. For C-bit Parity, it is a count of CP-bit parity errors occurring in the accumulation interval. For SYNTRAN, it is a count of CRC-9 errors occurring in the accumulation interval.')
wanT3E3StatsCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsCESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsCESs.setDescription('An CES is a second with one or more CCVs OR one or more Out of Frame defects OR a detected incoming AIS. This count is only for the SYNTRAN and C-bit Parity DS3 applications. This gauge is not incremented when UASs are counted.')
wanT3E3StatsCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsCSESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsCSESs.setDescription('A CSES is a second with 44 or more CCVs OR one or more Out of Frame defects OR a detected incoming AIS. This count is only for the SYNTRAN and C-bit Parity DS3 applications. This gauge is not incremented when UASs are counted.')
wanT3E3StatsRAIs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsRAIs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsRAIs.setDescription('The Remote Alarm Indication (RAI) failure, in SYNTRAN applications, is declared after detecting the Yellow Alarm Signal on the alarm channel. See ANSI T1.107a-1990 [10]. The Remote Alarm Indication failure, in C-bit Parity DS3 applications, is declared as soon as the preqsence of either one or two alarm signals are detected on then Far End Alarm Channel. See [10]. The Remote Alarm Indication failure may also be declared after detecting the far-end SEF/AIS defect (aka yellow). The Remote Alarm Indication failure is cleared as soon as the presence of the any of the above alarms are removed. Also, the incoming failure state is declared when a defect persists for at least 2-10 seconds. The defects are the following: Loss of Signal (LOS), an Out of Frame (OOF) or an incoming Alarm Indication Signal (AIS). The Failure State is cleared when the defect is absent for less than or equal to 20 seconds.')
wanT3E3StatsAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsAISs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsAISs.setDescription("The DS3 AIS is framed with 'stuck stuffing.' This implies that it has a valid M-subframe alignments bits, M-frame alignment bits, and P bits. The information bits are set to a 1010... sequence, starting with a one (1) after each M-subframe alignment bit, M-frame alignment bit, X bit, P bit, and C bit. The C bits are all set to zero giving what is called 'stuck stuffing.' The X bits are set to one. The DS3 AIS defect is declared after DS3 AIS is present in contiguous M-frames for a time equal to or greater than T, where 0.2 ms <= T <= 100 ms. The DS3 AIS defect is terminated after AIS is absent in contiguous M-frames for a time equal to or greater than T. The E3 binary content of the AIS is nominally a continuous stream of ones. AIS detection and the application of consequent actions, should be completed within a time limit of 1 ms.")
wanT3E3StatsLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsLOFs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsLOFs.setDescription('A DS3 Loss of Frame (LOF) failure is declared when the DS3 OOF defect is consistent for 2 to 10 seconds. The DS3 OOF defect ends when reframe occurs. The DS3 LOF failure is cleared when the DS3 OOF defect is absent for 10 to 20 seconds. (See T1.231 section 7.1.2.2.1)')
wanT3E3StatsLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3StatsLOSs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsLOSs.setDescription('The DS3 LOS defect is declared upon observing 175 +/- 75 contiguous pulse positions with no pulses of either positive or negative polarity. The DS3 LOS defect is terminated upon observing an average pulse density of at least 33% over a period of 175 +/- 75 contiguous pulse positions starting with the receipt of a pulse.')
wanT3E3StatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 23), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanT3E3StatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsOwner.setDescription('The entity that configured this entry.')
wanT3E3StatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 4, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanT3E3StatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanT3E3StatsStatus.setDescription('The status of this wanT3E3StatsTable entry.')
wanT3E3HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4), )
if mibBuilder.loadTexts: wanT3E3HistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryTable.setDescription('T3/E3 signaling statistics')
wanT3E3HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanT3E3HistoryIndex"), (0, "WANSTATS-MIB", "wanT3E3HistorySampleIndex"))
if mibBuilder.loadTexts: wanT3E3HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryEntry.setDescription('Statistics for a T3/E3 interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanT3E3HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanT3E3HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanT3E3HistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanT3E3HistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanT3E3HistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanT3E3HistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryDropEvents.setDescription('The change in value of wanT3E3StatsDropEvents during the interval.')
wanT3E3HistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryInFrames.setDescription('The change in value of wanT3E3StatsInFrames during the interval.')
wanT3E3HistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryOutFrames.setDescription('The change in value of wanT3E3StatsOutFrames during the interval.')
wanT3E3HistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryInOctets.setDescription('The change in value of wanT3E3StatsInOctets during the interval.')
wanT3E3HistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryOutOctets.setDescription('The change in value of wanT3E3StatsOutOctets during the interval.')
wanT3E3HistoryPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryPESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryPESs.setDescription('The change in value of wanT3E3StatsPESs during the interval.')
wanT3E3HistoryPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryPSESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryPSESs.setDescription('The change in value of wanT3E3StatsPSESs during the interval.')
wanT3E3HistoryOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryOOFs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryOOFs.setDescription('The change in value of wanT3E3StatsOOFs during the interval.')
wanT3E3HistorySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistorySEFSs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistorySEFSs.setDescription('The change in value of wanT3E3StatsSEFs during the interval.')
wanT3E3HistoryUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryUASs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryUASs.setDescription('The change in value of wanT3E3StatsUASs during the interval.')
wanT3E3HistoryLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryLCVs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryLCVs.setDescription('The change in value of wanT3E3StatsLCVs during the interval.')
wanT3E3HistoryPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryPCVs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryPCVs.setDescription('The change in value of wanT3E3StatsPCVs during the interval.')
wanT3E3HistoryLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryLESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryLESs.setDescription('The change in value of wanT3E3StatsLESs during the interval.')
wanT3E3HistoryCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryCCVs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryCCVs.setDescription('The change in value of wanT3E3StatsCCVs during the interval.')
wanT3E3HistoryCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryCESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryCESs.setDescription('The change in value of wanT3E3StatsCESs during the interval.')
wanT3E3HistoryCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryCSESs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryCSESs.setDescription('The change in value of wanT3E3StatsCSESs during the interval.')
wanT3E3HistoryRAIs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryRAIs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryRAIs.setDescription('The change in value of wanT3E3StatsRAIs during the interval.')
wanT3E3HistoryAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryAISs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryAISs.setDescription('The change in value of wanT3E3StatsAISs during the interval.')
wanT3E3HistoryLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryLOFs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryLOFs.setDescription('The change in value of wanT3E3StatsLOFs during the interval.')
wanT3E3HistoryLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryLOSs.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryLOSs.setDescription('The change in value of wanT3E3StatsLOSs during the interval.')
wanT3E3HistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanT3E3HistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanT3E3HistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanT3E3HistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanAtmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5), )
if mibBuilder.loadTexts: wanAtmStatsTable.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsTable.setDescription('ATM signaling statistics.')
wanAtmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanAtmStatsIndex"))
if mibBuilder.loadTexts: wanAtmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsEntry.setDescription('The statistics for an ATM interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In an ATM network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanAtmStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanAtmStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsIndex.setDescription('The value of this object uniquely identifies this wanAtmStatsTable entry.')
wanAtmStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAtmStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsDataSource.setDescription('This object identifies the source of the data that this wanAtmStatsEntry analyzes. This source can be any interface on this device. in order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be atm(37).')
wanAtmStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanAtmStatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInCells.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInCells.setDescription('The total number of cells seen coming from the far end of the link including errored cells.')
wanAtmStatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutCells.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutCells.setDescription('The total number of cells seen coming from the near end of the link including errored cells.')
wanAtmStatsInCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInCLP1.setDescription('The total number of cells with the CLP bit set seen coming from the far end of the link.')
wanAtmStatsOutCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutCLP1.setDescription('The total number of cells with the CLP bit set seen coming from the near end of the link.')
wanAtmStatsConnectionEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsConnectionEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsConnectionEvents.setDescription('This counter counts the sum of the following errors: 1) SSCOP Connection Disconnect Counter The abnormal occurrence of this event is characterized by the expiry of Timer_NO_RESPONSE. (This event is communicated to the layer management with MAA-ERROR code P. See ITU-T Q.2110.) 2) SSCOP Connection Initiation Failure This condition indicates the inability to establish an SSCOP connection. This event occurs whenever the number of expiries of the connection control timer (Timer_CC) exceeds the MaxCC or upon receipt of a connection reject message BGREJ PDU. (This event is communicated to layer management with MAA-ERROR code O. See ITU-T Q.2110.) 3) SSCOP Connection Re-Establ/Resynch This event occurs upon receipt of a BGN PDU or RESYNC PDU.')
wanAtmStatsErroredPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsErroredPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsErroredPDUs.setDescription('This counter counts the sum of the following errors: 1) Invalid PDUs. These are defined in SSCOP and consist of PDUs with incorrect length (MAA-ERROR code U), undefined PDU type code or not 32-bit aligned. 2) PDUs that result in MAA error codes and are discarded See Errors A-M and Q-T defined in ITU-T Q.2110.')
wanAtmStatsSetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsSetupAttempts.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsSetupAttempts.setDescription('This counter counts the number of call setup attempts (both successful and unsuccessful) detected on this interface.')
wanAtmStatsInRoutesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInRoutesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInRoutesUnavailable.setDescription('This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning 1 unallocated (unassigned) number 2 no route to specified transit network 3 no route to destination 88 incompatible destination NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.')
wanAtmStatsOutRoutesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutRoutesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutRoutesUnavailable.setDescription('This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is transmitted (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning 1 unallocated (unassigned) number 2 no route to specified transit network 3 no route to destination NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant(for counting purposes) and should not be counted.')
wanAtmStatsInResourcesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInResourcesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInResourcesUnavailable.setDescription('This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received (Note: These cause values apply to both UNI3.0 and UNI3.1 unless otherwise stated): Cause Value Meaning 35 requested VPCI/VCI not available 37 user cell rate not available (UNI3.1 only) 38 network out of order 41 temporary failure 45 no VPCI/VCI available 47 resource unavailable, unspecified 49 Quality of Service unavailable 51 user cell rate not available (UNI3.0 only) 58 bearer capability not presently available 63 Service or option not available, unspecified 92 too many pending add party requests NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.')
wanAtmStatsOutResourcesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutResourcesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutResourcesUnavailable.setDescription('This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is transmitted (Note: These cause values apply to both UNI3.0 and UNI3.1 unless otherwise stated): Cause Value Meaning 35 requested VPCI/VCI not available 37 user cell rate not available (UNI3.1 only) 38 network out of order 41 temporary failure 45 no VPCI/VCI available 47 resource unavailable, unspecified 49 Quality of Service unavailable 51 user cell rate not available (UNI3.0 only) 58 bearer capability not presently available 63 Service or option not available, unspecified 92 too many pending add party requests NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.')
wanAtmStatsInUnsuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInUnsuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInUnsuccessfulCalls.setDescription("This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning 17 user busy 18 no user responding 21 call rejected 22 number changed 23 user rejects all calls with calling line id restriction 27 destination out of order 31 normal, unspecified 88 incompatible destination NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted. Note: Cause Value #30 'response to STATUS ENQUIRY' was not included in this memo since it did not apply to a hard failure.")
wanAtmStatsOutUnsuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutUnsuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutUnsuccessfulCalls.setDescription("This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is transmitted (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning 17 user busy 18 no user responding 21 call rejected 22 number changed 23 user rejects all calls with calling line id restriction (CLIR) 27 destination out of order 31 normal, unspecified 88 incompatible destination NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant(for counting purposes) and should not be counted. Note: Cause Value #30 'response to STATUS ENQUIRY' was not included in this memo since it did not apply to a hard failure.")
wanAtmStatsInIncorrectMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInIncorrectMsgs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInIncorrectMsgs.setDescription("The Incorrect Messages Counter reflects any sort of incorrect information in a message. This includes: ? RELEASE, RELEASE COMPLETE, ADD PARTY REJECT, and STATUS messages transmitted or received, that contain any of the Cause values listed below. ? Ignored messages. These messages are dropped because the message was so damaged that it could not be further processed. A list of dropped messages is compiled below: Message with invalid protocol discriminator Message with errors in the call reference I.E. ? Bits 5-8 of the first octet not equal to '0000' ? Bits 1-4 of the first octet indicating a length other than 3 octets ? RELEASE COMPLETE message received with a call reference that does not relate to a call active or in progress ? SETUP message received with call reference flag incorrectly set to 1 ? SETUP message received with a call reference for a call that is already active or in progress. Message too short The following cause values are monitored by this counter (Note: These cause values apply to both UNI3.0 and UNI3.1 unless otherwise stated) Cause Value Meaning 10 VPCI/VCI unacceptable (UNI3.0 only) 36 VPCI/VCI assignment failure (UNI3.1 only) 81 invalid call reference value 82 identified channel does not exist 89 invalid endpoint reference 96 mandatory information element is missing 97 message type non-existent or not implemented 99 information element non-existent or not implemented 100 invalid information element contents 101 message not compatible with call state 104 incorrect message length 111 protocol error, unspecified NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.")
wanAtmStatsOutIncorrectMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutIncorrectMsgs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutIncorrectMsgs.setDescription("The Incorrect Messages Counter reflects any sort of incorrect information in a message. This includes: ? RELEASE, RELEASE COMPLETE, ADD PARTY REJECT, and STATUS messages transmitted or received, that contain any of the Cause values listed below. ? Ignored messages. These messages are dropped because the message was so damaged that it could not be further processed. A list of dropped messages is compiled below: Message with invalid protocol discriminator Message with errors in the call reference I.E. ? Bits 5-8 of the first octet not equal to '0000' ? Bits 1-4 of the first octet indicating a length other than 3 octets ? RELEASE COMPLETE message received with a call reference that does not relate to a call active or in progress ? SETUP message received with call reference flag incorrectly set to 1 ? SETUP message received with a call reference for a call that is already active or in progress. Message too short The following cause values are monitored by this counter Note: These cause values apply to both UNI3.0 and UNI3.1 unless otherwise stated) Cause Value Meaning 10 VPCI/VCI unacceptable (UNI3.0 only) 36 VPCI/VCI assignment failure (UNI3.1 only) 81 invalid call reference value 82 identified channel does not exist 89 invalid endpoint reference 96 mandatory information element is missing 97 message type non-existent or not implemented 99 information element non-existent or not implemented 100 invalid information element contents 101 message not compatible with call state 104 incorrect message length 111 protocol error, unspecified NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.")
wanAtmStatsInPartyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInPartyEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInPartyEvents.setDescription('This counter monitors error events that occur due to the originating user doing something wrong. This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is received (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning 28 invalid number format (address incomplete) 43 access information discarded 57 bearer capability not authorized 65 bearer capability not implemented 73 unsupported combination of traffic parameters 78 AAL parameters cannot be supported (UNI3.1 only) 91 invalid transit network selection 93 AAL parameters cannot be supported (UNI3.0 only) NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant(for counting purposes) and should not be counted.')
wanAtmStatsOutPartyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutPartyEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutPartyEvents.setDescription('This counter monitors error events that occur due to the originating user doing something wrong. This counter is incremented when a RELEASE, RELEASE COMPLETE (only when not preceded by a RELEASE mesg for the same call), ADD PARTY REJECT, or STATUS message that contains one of the following cause code values is transmitted (Note: These cause values apply to both UNI3.0 and UNI3.1): Cause Value Meaning 28 invalid number format (address incomplete) 43 access information discarded 57 bearer capability not authorized 65 bearer capability not implemented 73 unsupported combination of traffic parameters 78 AAL parameters cannot be supported (UNI3.1 only) 91 invalid transit network selection 93 AAL parameters cannot be supported (UNI3.0 only) NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.')
wanAtmStatsInExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInExpiries.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInExpiries.setDescription("The Timer Expiries Counter provides a count of network timer expiries, and to some extent, host or switch timer expiries. The conditions for incrementing this counter are: ? Expiry of any network timer ? Receipt of a RELEASE or RELEASE COMPLETE message with Cause #102, 'recovery on timer expiry'. NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.")
wanAtmStatsOutExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutExpiries.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutExpiries.setDescription("The Timer Expiries Counter provides a count of network timer expiries, and to some extent, host or switch timer expiries. The conditions for incrementing this counter are: ? Expiry of any network timer ? Receipt of a RELEASE or RELEASE COMPLETE message with Cause #102, 'recovery on timer expiry'. NOTE: For this counter, RELEASE COMPLETE messages that are a reply to a previous RELEASE message and contain the same cause value, are redundant (for counting purposes) and should not be counted.")
wanAtmStatsInRestartErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInRestartErrors.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInRestartErrors.setDescription('The Restart Activity Counter provides a count of host, switch, or network restart activity. This counter is incremented when receiving a RESTART message.')
wanAtmStatsOutRestartErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutRestartErrors.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutRestartErrors.setDescription('The Restart Activity Counter provides a count of host, switch, or network restart activity. This counter is incremented when transmitting a RESTART message.')
wanAtmStatsInSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInSVCs.setDescription('SVC VCCs established at this signaling entity for incoming connections.')
wanAtmStatsOutSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutSVCs.setDescription('SVC VCCs established at this signaling entity for outgoing connections.')
wanAtmStatsInOCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInOCDs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInOCDs.setDescription('An out of cell delineation from far end of the link.')
wanAtmStatsOutOCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutOCDs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutOCDs.setDescription('An out of cell delineation from near end of the link.')
wanAtmStatsInLOCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInLOCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInLOCs.setDescription('A loss of cell delineation error from far end of the link. This is a persistent OCD condition.')
wanAtmStatsOutLOCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutLOCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutLOCs.setDescription('A loss of cell delineation error from near end of link. This is a persistent OCD condition.')
wanAtmStatsInLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInLOFs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInLOFs.setDescription('A loss of frame error from far end of link.')
wanAtmStatsOutLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutLOFs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutLOFs.setDescription('A loss of frame error from near end of link.')
wanAtmStatsInLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInLOPs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInLOPs.setDescription('A loss of pointer error from far end of link.')
wanAtmStatsOutLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutLOPs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutLOPs.setDescription('A loss of pointer error from near end of link.')
wanAtmStatsInLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsInLOSs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsInLOSs.setDescription('A loss of signal error from far end of link.')
wanAtmStatsOutLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmStatsOutLOSs.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOutLOSs.setDescription('A loss of signal error from near end of link.')
wanAtmStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 37), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAtmStatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsOwner.setDescription('The entity that configured this entry.')
wanAtmStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 1, 5, 1, 38), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAtmStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanAtmStatsStatus.setDescription('The status of this wanAtmStatsTable entry.')
wanAtmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5), )
if mibBuilder.loadTexts: wanAtmHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryTable.setDescription('ATM signaling statistics.')
wanAtmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanAtmHistoryIndex"), (0, "WANSTATS-MIB", "wanAtmHistorySampleIndex"))
if mibBuilder.loadTexts: wanAtmHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryEntry.setDescription('The statistics for an ATM interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In an ATM network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanAtmHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanAtmHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanAtmHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanAtmHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanAtmHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanAtmHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryDropEvents.setDescription('The change in value of wanAtmStatsDropEvents during the interval.')
wanAtmHistoryInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInCells.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInCells.setDescription('The change in value of wanAtmStatsInCells during the interval.')
wanAtmHistoryOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutCells.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutCells.setDescription('The change in value of wanAtmStatsOutCells during the interval.')
wanAtmHistoryInCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInCLP1.setDescription('The change in value of wanAtmStatsInCLP1 during the interval.')
wanAtmHistoryOutCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutCLP1.setDescription('The change in value of wanAtmStatsOutCLP1 during the interval.')
wanAtmHistoryConnectionEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryConnectionEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryConnectionEvents.setDescription('The change in value of wanAtmStatsConnectionEvents during the interval.')
wanAtmHistoryErroredPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryErroredPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryErroredPDUs.setDescription('The change in value of wanAtmStatsErroredPDUs during the interval.')
wanAtmHistorySetupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistorySetupAttempts.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistorySetupAttempts.setDescription('The change in value of wanAtmStatsSetupAttempts during the interval.')
wanAtmHistoryInRoutesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInRoutesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInRoutesUnavailable.setDescription('The change in value of wanAtmStatsInRoutesUnavailable during the interval.')
wanAtmHistoryOutRoutesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutRoutesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutRoutesUnavailable.setDescription('The change in value of wanAtmStatsOutRoutesUnavailable during the interval.')
wanAtmHistoryInResourcesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInResourcesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInResourcesUnavailable.setDescription('The change in value of wanAtmStatsInResourcesUnavailable during the interval.')
wanAtmHistoryOutResourcesUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutResourcesUnavailable.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutResourcesUnavailable.setDescription('The change in value of wanAtmStatsOutResourcesUnavailable during the interval.')
wanAtmHistoryInUnsuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInUnsuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInUnsuccessfulCalls.setDescription('The change in value of wanAtmStatsInUnsuccessfulCalls during the interval.')
wanAtmHistoryOutUnsuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutUnsuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutUnsuccessfulCalls.setDescription('The change in value of wanAtmStatsOutUnsuccessfulCalls during the interval.')
wanAtmHistoryInIncorrectMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInIncorrectMsgs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInIncorrectMsgs.setDescription('The change in value of wanAtmStatsInIncorrectMsgs during the interval.')
wanAtmHistoryOutIncorrectMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutIncorrectMsgs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutIncorrectMsgs.setDescription('The change in value of wanAtmStatsOutIncorrectMsgs during the interval.')
wanAtmHistoryInPartyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInPartyEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInPartyEvents.setDescription('The change in value of wanAtmStatsInPartyEvents during the interval.')
wanAtmHistoryOutPartyEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutPartyEvents.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutPartyEvents.setDescription('The change in value of wanAtmStatsOutPartyEvents during the interval.')
wanAtmHistoryInExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInExpiries.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInExpiries.setDescription('The change in value of wanAtmStatsInExpiries during the interval.')
wanAtmHistoryOutExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutExpiries.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutExpiries.setDescription('The change in value of wanAtmStatsOutExpiries during the interval.')
wanAtmHistoryInRestartErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInRestartErrors.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInRestartErrors.setDescription('The change in value of wanAtmStatsInRestartErrors during the interval.')
wanAtmHistoryOutRestartErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutRestartErrors.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutRestartErrors.setDescription('The change in value of wanAtmStatsOutRestartErrors during the interval.')
wanAtmHistoryInSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInSVCs.setDescription('The change in value of wanAtmStatsInSVCs during the interval.')
wanAtmHistoryOutSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutSVCs.setDescription('The change in value of wanAtmStatsOutSVCs during the interval.')
wanAtmHistoryInOCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInOCDs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInOCDs.setDescription('The change in value of wanAtmStatsInOCDs during the interval.')
wanAtmHistoryOutOCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutOCDs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutOCDs.setDescription('The change in value of wanAtmStatsOutOCDs during the interval.')
wanAtmHistoryInLOCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInLOCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInLOCs.setDescription('The change in value of wanAtmStatsInLOCs during the interval.')
wanAtmHistoryOutLOCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutLOCs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutLOCs.setDescription('The change in value of wanAtmStatsOutLOCs during the interval.')
wanAtmHistoryInLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInLOFs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInLOFs.setDescription('The change in value of wanAtmStatsInLOFs during the interval.')
wanAtmHistoryOutLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutLOFs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutLOFs.setDescription('The change in value of wanAtmStatsOutLOFs during the interval.')
wanAtmHistoryInLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInLOPs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInLOPs.setDescription('The change in value of wanAtmStatsInLOPs during the interval.')
wanAtmHistoryOutLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutLOPs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutLOPs.setDescription('The change in value of wanAtmStatsOutLOPs during the interval.')
wanAtmHistoryInLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInLOSs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInLOSs.setDescription('The change in value of wanAtmStatsInLOSs during the interval.')
wanAtmHistoryOutLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutLOSs.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutLOSs.setDescription('The change in value of wanAtmStatsOutLOSs during the interval.')
wanAtmHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanAtmHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 1, 5, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAtmHistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanAtmHistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanX25StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1), )
if mibBuilder.loadTexts: wanX25StatsTable.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsTable.setDescription('X.25 Packet layer statistics.')
wanX25StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanX25StatsIndex"))
if mibBuilder.loadTexts: wanX25StatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsEntry.setDescription('The statistics for an X.25 interface across all LCIs. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In an X.25 network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanX25StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanX25StatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsIndex.setDescription('The value of this object uniquely identifies this wanX25StatsTable entry.')
wanX25StatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanX25StatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsDataSource.setDescription('This object identifies the source of the data that this wanX25StatsEntry analyzes. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be rfc887-x25(5).')
wanX25StatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanX25StatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInFrames.setDescription('The total number of frames seen coming from the far end of the link including error packets.')
wanX25StatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutFrames.setDescription('The total number of frames seen coming from the near end of the link including error packets.')
wanX25StatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link including errored frames.')
wanX25StatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link including errored frames.')
wanX25StatsInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInRejects.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInRejects.setDescription('The number of REJ or SREJ frames see coming from the far end of the link.')
wanX25StatsOutRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutRejects.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutRejects.setDescription('The number of REJ or SREJ frames see coming from the near end of the link.')
wanX25StatsInAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInAttempts.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInAttempts.setDescription('The number of call setup attempts initiated from the far end of the link.')
wanX25StatsOutAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutAttempts.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutAttempts.setDescription('The number of call setup attempts initiated from the near end of the link.')
wanX25StatsInFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInFailures.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInFailures.setDescription('The number call setup attempt failures seen coming from the far end of the link.')
wanX25StatsOutFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutFailures.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutFailures.setDescription('The number call setup attempt failures seen coming from the near end of the link.')
wanX25StatsProviderClears = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsProviderClears.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsProviderClears.setDescription('The number of clear request seen with a cause code other than DTE initiated.')
wanX25StatsInResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInResets.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInResets.setDescription('The number of reset requests seen from the far end of the link with cause code DTE initiated.')
wanX25StatsOutResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutResets.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutResets.setDescription('The number of reset requests seen from the near end of the link with cause code DTE initiated.')
wanX25StatsProviderResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsProviderResets.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsProviderResets.setDescription('The number of reset requests seen with cause code other than DTE initiated.')
wanX25StatsInAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInAccusedErrors.setDescription('The numbers of packets seen from the far end of the link containing a procedure error cause code. These include clear, reset, restart, or diagnostic packets.')
wanX25StatsOutAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutAccusedErrors.setDescription('The numbers of packets seen from the near end of the link containing a procedure error cause code. These include clear, reset, restart, or diagnostic packets.')
wanX25StatsInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsInInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsInInterrupts.setDescription('The number of interrupts packets seen coming from the far end of the link over all VCs.')
wanX25StatsOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25StatsOutInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOutInterrupts.setDescription('The number of interrupts packets seen coming from the near end of the link over all VCs.')
wanX25StatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 22), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanX25StatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsOwner.setDescription('The entity that configured this entry.')
wanX25StatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanX25StatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanX25StatsStatus.setDescription('The status of this wanX25StatsTable entry.')
wanX25HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1), )
if mibBuilder.loadTexts: wanX25HistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryTable.setDescription('X.25 Packet layer statistics.')
wanX25HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanX25HistoryIndex"), (0, "WANSTATS-MIB", "wanX25HistorySampleIndex"))
if mibBuilder.loadTexts: wanX25HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryEntry.setDescription('The statistics for an X.25 interface across all LCIs. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In a X.25 network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanX25HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanX25HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanX25HistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanX25HistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanX25HistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanX25HistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanX25HistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryDropEvents.setDescription('The change in value of wanX25StatsDropEvents during the interval.')
wanX25HistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInFrames.setDescription('The change in value of wanX25StatsInFrames during the interval.')
wanX25HistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutFrames.setDescription('The change in value of wanX25StatsOutFrames during the interval.')
wanX25HistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInOctets.setDescription('The change in value of wanX25StatsInOctets during the interval.')
wanX25HistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutOctets.setDescription('The change in value of wanX25StatsOutOctets during the interval.')
wanX25HistoryInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInRejects.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInRejects.setDescription('The change in value of wanX25StatsInRejects during the interval.')
wanX25HistoryOutRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutRejects.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutRejects.setDescription('The change in value of wanX25StatsOutRejects during the interval.')
wanX25HistoryInAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInAttempts.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInAttempts.setDescription('The change in value of wanX25StatsInAttempts during the interval.')
wanX25HistoryOutAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutAttempts.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutAttempts.setDescription('The change in value of wanX25StatsOutAttempts during the interval.')
wanX25HistoryInFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInFailures.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInFailures.setDescription('The change in value of wanX25StatsInFailures during the interval.')
wanX25HistoryOutFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutFailures.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutFailures.setDescription('The change in value of wanX25StatsOutFailures during the interval.')
wanX25HistoryProviderClears = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryProviderClears.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryProviderClears.setDescription('The change in value of wanX25StatsProviderClears during the interval.')
wanX25HistoryInResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInResets.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInResets.setDescription('The change in value of wanX25StatsInResets during the interval.')
wanX25HistoryOutResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutResets.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutResets.setDescription('The change in value of wanX25StatsOutResets during the interval.')
wanX25HistoryProviderResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryProviderResets.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryProviderResets.setDescription('The change in value of wanX25StatsProviderResets during the interval.')
wanX25HistoryInAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInAccusedErrors.setDescription('The change in value of wanX25StatsInAccusedErrors during the interval.')
wanX25HistoryOutAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutAccusedErrors.setDescription('The change in value of wanX25StatsOutAccusedErrors during the interval.')
wanX25HistoryInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInInterrupts.setDescription('The change in value of wanX25StatsInInterrupts during the interval.')
wanX25HistoryOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutInterrupts.setDescription('The change in value of wanX25StatsOutInterrupts during the interval.')
wanX25HistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanX25HistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25HistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanX25HistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanFrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2), )
if mibBuilder.loadTexts: wanFrStatsTable.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsTable.setDescription('Frame Relay statistics.')
wanFrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanFrStatsIndex"))
if mibBuilder.loadTexts: wanFrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsEntry.setDescription('The statistics for a frame relay interface across all DLCIs. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In a frame relay network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanFrStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanFrStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsIndex.setDescription('The value of this object uniquely identifies this wanFrStatsTable entry.')
wanFrStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanFrStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsDataSource.setDescription('This object identifies the source of the data that this wanFrStatsEntry analyzes. This source can be any frame relay interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be frameRelay(32).')
wanFrStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanFrStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsInFrames.setDescription('The total number of frames seen coming from the far end of the link including error packets.')
wanFrStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsOutFrames.setDescription('The total number of frames seen coming from the near end of the link including error packets.')
wanFrStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link including errored frames.')
wanFrStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link including errored frames.')
wanFrStatsInFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsInFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsInFECNs.setDescription('The number of frames see coming form the far end of the link with the FECN bit set.')
wanFrStatsOutFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsOutFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsOutFECNs.setDescription('The number of frames see coming form the near end of the link with the FECN bit set.')
wanFrStatsInBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsInBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsInBECNs.setDescription('The number of frames seen coming from the far end of the link with the BECN bit set.')
wanFrStatsOutBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsOutBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsOutBECNs.setDescription('The number of frames seen coming from the near end of the link with the BECN bit set.')
wanFrStatsInDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsInDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsInDEs.setDescription('The number of frames seen coming from the far end of the link with the DE bit set.')
wanFrStatsOutDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrStatsOutDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsOutDEs.setDescription('The number of frames seen coming from the near end of the link with the DE bit set.')
wanFrStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 14), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanFrStatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsOwner.setDescription('The entity that configured this entry.')
wanFrStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanFrStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanFrStatsStatus.setDescription('The status of this wanFrStatsTable entry.')
wanFrHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2), )
if mibBuilder.loadTexts: wanFrHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryTable.setDescription('Frame Relay statistics.')
wanFrHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanFrHistoryIndex"), (0, "WANSTATS-MIB", "wanFrHistorySampleIndex"))
if mibBuilder.loadTexts: wanFrHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryEntry.setDescription('The statistics for a frame relay interface across all DLCIs. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In a frame relay network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanFrHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanFrHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanFrHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanFrHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanFrHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanFrHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanFrHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryDropEvents.setDescription('The change in value of wanFrStatsDropEvents during the interval.')
wanFrHistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryInFrames.setDescription('The change in value of wanFrStatsInFrames during the interval.')
wanFrHistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryOutFrames.setDescription('The change in value of wanFrStatsOutFrames during the interval.')
wanFrHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryInOctets.setDescription('The change in value of wanFrStatsInOctets during the interval.')
wanFrHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryOutOctets.setDescription('The change in value of wanFrStatsOutOctets during the interval.')
wanFrHistoryInFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryInFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryInFECNs.setDescription('The change in value of wanFrStatsInFECSs during the interval.')
wanFrHistoryOutFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryOutFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryOutFECNs.setDescription('The change in value of wanFrStatsOutFECNs during the interval.')
wanFrHistoryInBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryInBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryInBECNs.setDescription('The change in value of wanFrStatsInBECNs during the interval.')
wanFrHistoryOutBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryOutBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryOutBECNs.setDescription('The change in value of wanFrStatsOutBECNs during the interval.')
wanFrHistoryInDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryInDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryInDEs.setDescription('The change in value of wanFrStatsInDEs during the interval.')
wanFrHistoryOutDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryOutDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryOutDEs.setDescription('The change in value of wanFrStatsDOutDEs during the interval.')
wanFrHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanFrHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrHistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanFrHistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanAal5StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3), )
if mibBuilder.loadTexts: wanAal5StatsTable.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsTable.setDescription('AAL/5 statistics.')
wanAal5StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanAal5StatsIndex"))
if mibBuilder.loadTexts: wanAal5StatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsEntry.setDescription('The statistics for a AAL/5 interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In an ATM network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanAal5StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanAal5StatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsIndex.setDescription('The value of this object uniquely identifies this wanAal5StatsTable entry.')
wanAal5StatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAal5StatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsDataSource.setDescription('This object identifies the source of the data that this wanAal5StatsEntry analyzes. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be aal5(49).')
wanAal5StatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanAal5StatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsInCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsInCells.setDescription('The total number of cells for any AAL-5 connection seen coming from the far end of the link.')
wanAal5StatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsOutCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOutCells.setDescription('The total number of cells for any AAL-5 connection seen coming from the near end of the link.')
wanAal5StatsInPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsInPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsInPDUs.setDescription('The total number of AAL-5 PDUs seen coming from the far end of the link including error PDUs.')
wanAal5StatsOutPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsOutPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOutPDUs.setDescription('The total number of AAL-5 PDUs seen coming from the near end of the link including error PDUs.')
wanAal5StatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsInOctets.setDescription('The sum of octets from all AAL-5 PDUs seen originating from the far end of the link including errored PDUs.')
wanAal5StatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOutOctets.setDescription('The sum of octets from all AAL-5 PDUs seen originating from the near end of the link including errored PDUs.')
wanAal5StatsInCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsInCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsInCLP1.setDescription('The total number of cells for any AAL-5 connection with the CLP bit set seen coming from the far end of the link.')
wanAal5StatsOutCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsOutCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOutCLP1.setDescription('The total number of cells for any AAL-5 connection with the CLP bit set seen coming from the near end of the link.')
wanAal5StatsInCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsInCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsInCRCs.setDescription('The total number of AAL-5 PDUs with CRC errors from the far end of the link.')
wanAal5StatsOutCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsOutCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOutCRCs.setDescription('The total number of AAL-5 PDUs with CRC errors from the near end of the link.')
wanAal5StatsInOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsInOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsInOversizedSDUs.setDescription('The total number of AAL-5 SDUs from the far end of the link that were too large.')
wanAal5StatsOutOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsOutOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOutOversizedSDUs.setDescription('The total number of AAL-5 SDUs from the near end of the link that were too large.')
wanAal5StatsInSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsInSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsInSVCs.setDescription('The total number of AAL/5 connections seen initiated from the far end of the link.')
wanAal5StatsOutSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5StatsOutSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOutSVCs.setDescription('The total number of AAL-5 connections seen initiated from the near end of the link.')
wanAal5StatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 18), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAal5StatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsOwner.setDescription('The entity that configured this entry.')
wanAal5StatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 3, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAal5StatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanAal5StatsStatus.setDescription('The status of this wanAal5StatsTable entry.')
wanAal5HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3), )
if mibBuilder.loadTexts: wanAal5HistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryTable.setDescription('AAL/5 statistics.')
wanAal5HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanAal5HistoryIndex"), (0, "WANSTATS-MIB", "wanAal5HistorySampleIndex"))
if mibBuilder.loadTexts: wanAal5HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryEntry.setDescription('The statistics for a AAL/5 interface. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on. In an ATM network, there are many far ends of the link, but they shall be logically grouped into one end in this table.')
wanAal5HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanAal5HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanAal5HistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanAal5HistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanAal5HistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanAal5HistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryDropEvents.setDescription('The change in value of wanAal5StatsDropEvents during the interval.')
wanAal5HistoryInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInCells.setDescription('The change in value of wanAal5StatsInCells during the interval.')
wanAal5HistoryOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutCells.setDescription('The change in value of wanAal5StatsOutCells during the interval.')
wanAal5HistoryInPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInPDUs.setDescription('The change in value of wanAal5StatsInPDUs during the interval.')
wanAal5HistoryOutPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutPDUs.setDescription('The change in value of wanAal5StatsOutPDUs during the interval.')
wanAal5HistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInOctets.setDescription('The change in value of wanAal5StatsInOctets during the interval.')
wanAal5HistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutOctets.setDescription('The change in value of wanAal5StatsOutOctets during the interval.')
wanAal5HistoryInCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInCLP1.setDescription('The change in value of wanAal5StatsInCLP1 the interval.')
wanAal5HistoryOutCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutCLP1.setDescription('The change in value of wanAal5StatsOutCLP1 during the interval.')
wanAal5HistoryInCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInCRCs.setDescription('The change in value of wanAal5StatsInCRCs during the interval.')
wanAal5HistoryOutCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutCRCs.setDescription('The change in value of wanAal5StatsOutCRCs during the interval.')
wanAal5HistoryInOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInOversizedSDUs.setDescription('The change in value of wanAal5StatsInOversizedSDUs during the interval.')
wanAal5HistoryOutOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutOversizedSDUs.setDescription('The change in value of wanAal5StatsOutOversizedSDUs during the interval.')
wanAal5HistoryInSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInSVCs.setDescription('The change in value of wanAal5StatsInSVCs during the interval.')
wanAal5HistoryOutSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutSVCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutSVCs.setDescription('The change in value of wanAal5StatsOutSVCs during the interval.')
wanAal5HistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryInUtilization.setDescription('The best estimated of the mean AAL-5 layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanAal5HistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5HistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanAal5HistoryOutUtilization.setDescription('The best estimated of the mean AAL-5 layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanPppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4), )
if mibBuilder.loadTexts: wanPppStatsTable.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsTable.setDescription('PPP in HDLC service statistics.')
wanPppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanPppStatsIndex"))
if mibBuilder.loadTexts: wanPppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsEntry.setDescription('The statistics for a PPP in HDLC service. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanPppStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanPppStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsIndex.setDescription('The value of this object uniquely identifies this wanPppStatsTable entry.')
wanPppStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanPppStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsDataSource.setDescription('This object identifies the source of the data that this wanPppStatsEntry analyzes. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in MIB-II [RFC 1573] for the desired interface. The ifType value associated with the ifIndex can only be ppp(22).')
wanPppStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanPppStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsInFrames.setDescription('The total number of frames seen coming from the far end of the link including error frames.')
wanPppStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsOutFrames.setDescription('The total number of frames seen coming from the near end of the link including error frames.')
wanPppStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsInOctets.setDescription('The sum of octets from all frames seen coming from the far end of the link including errored frames.')
wanPppStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsOutOctets.setDescription('The sum of octets from all frames seen coming from the near end of the link including errored frames.')
wanPppStatsInBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsInBadAddresses.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsInBadAddresses.setDescription('The number of frames seen from the far end of the link with an incorrect address field.')
wanPppStatsOutBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsOutBadAddresses.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsOutBadAddresses.setDescription('The number of frames seen from the near end of the link with an incorrect address field')
wanPppStatsInBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsInBadControls.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsInBadControls.setDescription('The number of frames seen from the far end of the link with an incorrect control field.')
wanPppStatsOutBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsOutBadControls.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsOutBadControls.setDescription('The number of frames seen from the near end of the link with an incorrect control field.')
wanPppStatsInLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsInLongFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsInLongFrames.setDescription('The number of frames seen from the far end of the link that exceed the MRU.')
wanPppStatsOutLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsOutLongFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsOutLongFrames.setDescription('The number of frames seen from the near end of the link that exceed the MRU.')
wanPppStatsInBadFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsInBadFCSs.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsInBadFCSs.setDescription('The number of packets seen from the far end of the link with incorrect FCSs.')
wanPppStatsOutBadFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppStatsOutBadFCSs.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsOutBadFCSs.setDescription('The number of packets seen from the near end of the link with incorrect FCSs.')
wanPppStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 16), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanPppStatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsOwner.setDescription('The entity that configured this entry.')
wanPppStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 2, 4, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanPppStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanPppStatsStatus.setDescription('The status of this wanPppStatsTable entry.')
wanPppHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4), )
if mibBuilder.loadTexts: wanPppHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryTable.setDescription('PPP in HDLC service statistics.')
wanPppHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanPppHistoryIndex"), (0, "WANSTATS-MIB", "wanPppHistorySampleIndex"))
if mibBuilder.loadTexts: wanPppHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryEntry.setDescription('The statistics for a PPP in HDLC service. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanPppHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanPppHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanPppHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanPppHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanPppHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanPppHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanPppHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryDropEvents.setDescription('The change in value of wanPppStatsDropEvents during the interval.')
wanPppHistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryInFrames.setDescription('The change in value of wanPppStatsInFrames during the interval.')
wanPppHistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryOutFrames.setDescription('The change in value of wanPppStatsOutFrames during the interval.')
wanPppHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryInOctets.setDescription('The change in value of wanPppStatsInOctets during the interval.')
wanPppHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryOutOctets.setDescription('The change in value of wanPppStatsOutOctets during the interval.')
wanPppHistoryInBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryInBadAddresses.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryInBadAddresses.setDescription('The change in value of wanPppStatsInBadAddresses during the interval.')
wanPppHistoryOutBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryOutBadAddresses.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryOutBadAddresses.setDescription('The change in value of wanPppStatsOutBadAddresses during the interval.')
wanPppHistoryInBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryInBadControls.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryInBadControls.setDescription('The change in value of wanPppStatsInBadControls during the interval.')
wanPppHistoryOutBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryOutBadControls.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryOutBadControls.setDescription('The change in value of wanPppStatsOutBadControls during the interval.')
wanPppHistoryInLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryInLongFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryInLongFrames.setDescription('The change in value of wanPppStatsInLongFrames during the interval.')
wanPppHistoryOutLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryOutLongFrames.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryOutLongFrames.setDescription('The change in value of wanPppStatsOutLongFrames during the interval.')
wanPppHistoryInBadFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryInBadFCSs.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryInBadFCSs.setDescription('The change in value of wanPppStatsInBadFCSs during the interval.')
wanPppHistoryOutBadFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryOutBadFCSs.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryOutBadFCSs.setDescription('The change in value of wanPppStatsOutBadFCSs during the interval.')
wanPppHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryInUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the far end of the link in hundreds of a percent.')
wanPppHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPppHistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanPppHistoryOutUtilization.setDescription('The best estimated of the mean physical layer network utilization of traffic coming from the near end of the link in hundreds of a percent.')
wanX25PvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1), )
if mibBuilder.loadTexts: wanX25PvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsTable.setDescription('X.25 per-LCI statistics for a PVC.')
wanX25PvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanX25StatsIndex"))
if mibBuilder.loadTexts: wanX25PvcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsEntry.setDescription('The statistics for a X.25 PVC. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the sides the probe is not on.')
wanX25PvcStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanX25PvcStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsIndex.setDescription('The value of this object uniquely identifies this wanX25PvcStatsTable entry.')
wanX25PvcStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanX25PvcStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsDataSource.setDescription('This object identifies the source of the data that this wanX25PvcStatsEntry analyzes. This source can be any pvcEntry associated with an X.25 interface. In order to identify a particular LCI to monitor, this object shall identify the instance of the pvcIndex object that corresponds to a X.25 PVC, defined above for the desired interface.')
wanX25PvcStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanX25PvcStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsInFrames.setDescription('The total number of frames seen coming from the far end of the link on this LCI.')
wanX25PvcStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsOutFrames.setDescription('The total number of frames seen coming from the near end of the link on this LCI.')
wanX25PvcStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link on this LCI.')
wanX25PvcStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link on this LCI.')
wanX25PvcStatsInResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsInResets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsInResets.setDescription('The number of reset requests seen from the far end of the link with cause code DTE initiated for this LCI.')
wanX25PvcStatsOutResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsOutResets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsOutResets.setDescription('The number of reset requests seen from the far end of the link with cause code DTE initiated for this LCI.')
wanX25PvcStatsProviderResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsProviderResets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsProviderResets.setDescription('The number of reset requests seen with cause code other than DTE initiated for this LCI.')
wanX25PvcStatsInAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsInAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsInAccusedErrors.setDescription('The numbers of frames seen from the far end of the link containing a procedure error cause code on this LCI. These include clear, reset, restart, or diagnostic packets.')
wanX25PvcStatsOutAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsOutAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsOutAccusedErrors.setDescription('The numbers of frames seen from the near end of the link containing a procedure error cause code on this LCI. These include clear, reset, restart, or diagnostic packets.')
wanX25PvcStatsInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsInInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsInInterrupts.setDescription('The number of interrupts frames seen coming from the far end of the link on this LCI.')
wanX25PvcStatsOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsOutInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsOutInterrupts.setDescription('The number of interrupts frames seen coming from the far end of the link on this LCI.')
wanX25PvcStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsUpTime.setDescription('The total amount of time in one-hundreds of a second that the probe is sure this LCI was active, i.e., the total time the value of wanX25PvcStatsState was equal to up(1). A value of less than the age of this entry does not necessarily mean that this LCI was down. It only means the probe was not certain it was up. Note: the sum of wanX25PvcStatsUpTime and wanX25PvcStatsDownTime may be less than the age of this entry. In this case, the unaccounted for time is the time the probe was uncertain of the state of this LCI, i.e., the total time the value of wanX25PvcStatsState was unknown(3).')
wanX25PvcStatsDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsDownTime.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsDownTime.setDescription('The total amount of time in one-hundreds of a second that the probe is sure this LCI was down, i.e., the total time the value of wanX25PvcStatsState was equal to down(3). A value of less than the age of this entry does not necessarily mean that this LCI was up at some point. It only means the probe was not certain it was down. Note: the sum of wanX25PvcStatsUpTime and wanX25PvcStatsDownTime may be less than the age of this entry. In this case, the unaccounted for time is the time the probe was uncertain of the state of this LCI, i.e., the total time the value of wanX25PvcStatsState was unknown(3).')
wanX25PvcStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsState.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsState.setDescription('The current state of this LCI as inferred by the probe. A value of up(2) means the LCI is active. A value of down(2) means the LCI is inactive. And a value of unknown(3) means the probe cannot currently infer the state.')
wanX25PvcStatsStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcStatsStateChanges.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsStateChanges.setDescription('The count of the number of times the wanX25PvcStatsState has gone from up(1) to down(2) or vice versa. The number of times wanX25PvcStatsState goes to unknown(3) is not counted. However, if the value goes from up(1) to unknown(3) and then to down(2) should be counted as 1. Likewise going from down(2) to unknown(3) and then to up(3) should be counted as 1.')
wanX25PvcStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 19), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanX25PvcStatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsOwner.setDescription('The entity that configured this entry.')
wanX25PvcStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanX25PvcStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcStatsStatus.setDescription('The status of this wanX25PvcStatsTable entry.')
wanX25PvcHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1), )
if mibBuilder.loadTexts: wanX25PvcHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryTable.setDescription('X.25 per LCI statistics.')
wanX25PvcHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanX25PvcHistoryIndex"), (0, "WANSTATS-MIB", "wanX25PvcHistorySampleIndex"))
if mibBuilder.loadTexts: wanX25PvcHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryEntry.setDescription('The statistics for a X.25 LCI. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanX25PvcHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanX25PvcHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanX25PvcHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanX25PvcHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanX25PvcHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanX25PvcHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryDropEvents.setDescription('The change in value of wanX25PvcStatsDropEvents during the interval.')
wanX25PvcHistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryInFrames.setDescription('The change in value of wanX25PvcStatsInFrames during the interval.')
wanX25PvcHistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryOutFrames.setDescription('The change in value of wanX25PvcStatsOutFrames during the interval.')
wanX25PvcHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryInOctets.setDescription('The change in value of wanX25PvcStatsInOctets during the interval.')
wanX25PvcHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryOutOctets.setDescription('The change in value of wanX25PvcStatsOutOctets during the interval.')
wanX25PvcHistoryInResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryInResets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryInResets.setDescription('The change in value of wanX25PvcStatsInResets during the interval.')
wanX25PvcHistoryOutResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryOutResets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryOutResets.setDescription('The change in value of wanX25PvcStatsOutResets during the interval.')
wanX25PvcHistoryProviderResets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryProviderResets.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryProviderResets.setDescription('The change in value of wanX25PvcStatsProviderResets during the interval.')
wanX25PvcHistoryInAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryInAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryInAccusedErrors.setDescription('The change in value of wanX25PvcStatsInAccusedErrors during the interval.')
wanX25PvcHistoryOutAccusedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryOutAccusedErrors.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryOutAccusedErrors.setDescription('The change in value of wanX25PvcStatsOutAccusedErrors during the interval.')
wanX25PvcHistoryInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryInInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryInInterrupts.setDescription('The change in value of wanX25PvcStatsInInterrupts during the interval.')
wanX25PvcHistoryOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryOutInterrupts.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryOutInterrupts.setDescription('The change in value of wanX25PvcStatsOutInterrupts during the interval.')
wanX25PvcHistoryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryUpTime.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryUpTime.setDescription('The change in value of wanX25PvcStatsUpTime during the interval.')
wanX25PvcHistoryDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryDownTime.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryDownTime.setDescription('The change in value of wanX25PvcStatsDownTime during the interval.')
wanX25PvcHistoryStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryStateChanges.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryStateChanges.setDescription('The change in value of wanX25PvcStatsStateChanges during the interval.')
wanX25PvcHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryInUtilization.setDescription('The best estimated of the mean utilization of traffic on this LCI coming from the far end of the link in hundreds of percent of the CIR.')
wanX25PvcHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanX25PvcHistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanX25PvcHistoryOutUtilization.setDescription('The best estimated of the mean utilization of traffic on this LCI coming from the near end of the link in hundreds of percent of CIR.')
wanFrPvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2), )
if mibBuilder.loadTexts: wanFrPvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsTable.setDescription('Frame Relay per-DLCI statistics.')
wanFrPvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanFrPvcStatsIndex"))
if mibBuilder.loadTexts: wanFrPvcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsEntry.setDescription('The statistics for a frame relay DLCI. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanFrPvcStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanFrPvcStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsIndex.setDescription('The value of this object uniquely identifies this wanFrPvcStatsTable entry.')
wanFrPvcStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanFrPvcStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsDataSource.setDescription('This object identifies the source of the data that this wanFrPvcStatsEntry analyzes. This source can be any pvcEntry associated with a frame relay interface on this device. In order to identify a particular DLCI, this object shall identify the instance of the frame relay pvcIndex object, defined in the PVCCONFIG-MIB.')
wanFrPvcStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanFrPvcStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsInFrames.setDescription('The total number of frames seen coming from the far end of the link on this DLCI.')
wanFrPvcStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsOutFrames.setDescription('The total number of frames seen coming from the near end of the link on this DLCI.')
wanFrPvcStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsInOctets.setDescription('The sum of octets from all frames seen originating from the far end of the link on this DLCI.')
wanFrPvcStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsOutOctets.setDescription('The sum of octets from all frames seen originating from the near end of the link on this DLCI.')
wanFrPvcStatsInFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsInFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsInFECNs.setDescription('The number of frames see coming form the far end of the link with the FECN bit set on this DLCI.')
wanFrPvcStatsOutFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsOutFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsOutFECNs.setDescription('The number of frames seen coming from the far end of the link with the BECN bit set on this DLCI.')
wanFrPvcStatsInBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsInBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsInBECNs.setDescription('The number of frames see coming form the near end of the link with the FECN bit set.')
wanFrPvcStatsOutBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsOutBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsOutBECNs.setDescription('The number of frames seen coming from the near end of the link with the BECN bit set on this DLCI.')
wanFrPvcStatsInDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsInDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsInDEs.setDescription('The number of frames seen coming from the far end of the link with the DE bit set on this DCLI.')
wanFrPvcStatsOutDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsOutDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsOutDEs.setDescription('The number of frames seen coming from the near end of the link with the DE bit set on this DLCI.')
wanFrPvcStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsUpTime.setDescription('The total amount of time in one-hundreds of a second that the probe is sure this LCI was active, i.e., the total time the value of wanFrPvcStatsState was equal to up(1). A value of less than the age of this entry does not necessarily mean that this LCI was down. It only means the probe was not certain it was up. Note: the sum of wanFrPvcStatsUpTime and wanFrPvcStatsDownTime may be less than the age of this entry. In this case, the unaccounted for time is the time the probe was uncertain of the state of this DLCI, i.e., the total time the value of wanFrPvcStatsState was unknown(3).')
wanFrPvcStatsDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsDownTime.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsDownTime.setDescription('The total amount of time in one-hundreds of a second that the probe is sure this LCI was down, i.e., the total time the value of wanFrPvcStatsState was equal to down(3). A value of less than the age of this entry does not necessarily mean that this LCI was up at some point. It only means the probe was not certain it was down. Note: the sum of wanX25PvcStatsUpTime and wanFrPvcStatsDownTime may be less than the age of this entry. In this case, the unaccounted for time is the time the probe was uncertain of the state of this DLCI, i.e., the total time the value of wanFrPvcStatsState was unknown(3).')
wanFrPvcStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsState.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsState.setDescription('The current state of this DLCI as inferred by the probe. A value of up(2) means the DLCI is active. A value of down(2) means the DLCI is inactive. And a value of unknown(3) means the probe cannot currently infer the state.')
wanFrPvcStatsStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcStatsStateChanges.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsStateChanges.setDescription('The count of the number of times the wanFrPvcStatsState has gone from up(1) to down(2) or vice versa. The number of times wanFrPvcStatsState goes to unknown(3) is not counted. However, if the value goes from up(1) to unknown(3) and then to down(2) should be counted as 1. Likewise going from down(2) to unknown(3) and then to up(3) should be counted as 1.')
wanFrPvcStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 18), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanFrPvcStatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsOwner.setDescription('The entity that configured this entry.')
wanFrPvcStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanFrPvcStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcStatsStatus.setDescription('The status of this wanFrPvcStatsTable entry.')
wanFrPvcHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2), )
if mibBuilder.loadTexts: wanFrPvcHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryTable.setDescription('Frame Relay per-DCLI statistics.')
wanFrPvcHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanFrPvcHistoryIndex"), (0, "WANSTATS-MIB", "wanFrPvcHistorySampleIndex"))
if mibBuilder.loadTexts: wanFrPvcHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryEntry.setDescription('The statistics for a frame relay DLCI. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanFrPvcHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanFrPvcHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanFrPvcHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanFrPvcHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanFrPvcHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanFrPvcHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryDropEvents.setDescription('The change in value of wanFrPvcStatsDropEvents during the interval.')
wanFrPvcHistoryInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryInFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryInFrames.setDescription('The change in value of wanFrPvcStatsInFrames during the interval.')
wanFrPvcHistoryOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryOutFrames.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryOutFrames.setDescription('The change in value of wanFrPvcStatsOutFrames during the interval.')
wanFrPvcHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryInOctets.setDescription('The change in value of wanFrPvcStatsInOctets during the interval.')
wanFrPvcHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryOutOctets.setDescription('The change in value of wanFrPvcStatsOutOctets during the interval.')
wanFrPvcHistoryInFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryInFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryInFECNs.setDescription('The change in value of wanFrPvcStatsInFECNs during the interval.')
wanFrPvcHistoryOutFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryOutFECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryOutFECNs.setDescription('The change in value of wanFrPvcStatsOutFECNs during the interval.')
wanFrPvcHistoryInBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryInBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryInBECNs.setDescription('The change in value of wanFrPvcStatsInBECNs during the interval.')
wanFrPvcHistoryOutBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryOutBECNs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryOutBECNs.setDescription('The change in value of wanFrPvcStatsOutBECNs during the interval.')
wanFrPvcHistoryInDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryInDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryInDEs.setDescription('The change in value of wanFrPvcStatsInDEs during the interval.')
wanFrPvcHistoryOutDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryOutDEs.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryOutDEs.setDescription('The change in value of wanFrPvcStatsOutDEs during the interval.')
wanFrPvcHistoryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryUpTime.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryUpTime.setDescription('The change in value of wanFrPvcStatsUpTime during the interval.')
wanFrPvcHistoryDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryDownTime.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryDownTime.setDescription('The change in value of wanFrPvcStatsDownTime during the interval.')
wanFrPvcHistoryStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryStateChanges.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryStateChanges.setDescription('The change in value of wanFrPvcStatsStateChanges during the interval.')
wanFrPvcHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryInUtilization.setDescription('The best estimated of the mean utilization of traffic on this DLCI coming from the far end of the link in hundreds of percent of the CIR.')
wanFrPvcHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanFrPvcHistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanFrPvcHistoryOutUtilization.setDescription('The best estimated of the mean utilization of traffic on this DLCI coming from the near end of the link in hundreds of percent of CIR.')
wanAal5PvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3), )
if mibBuilder.loadTexts: wanAal5PvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsTable.setDescription('AAL/5 per-VPI/VCI statistics.')
wanAal5PvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanAal5PvcStatsIndex"))
if mibBuilder.loadTexts: wanAal5PvcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsEntry.setDescription('The statistics for a AAL-5 VCI/VPI. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanAal5PvcStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanAal5PvcStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsIndex.setDescription('The value of this object uniquely identifies this wanAal5PvcStatsTable entry.')
wanAal5PvcStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAal5PvcStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsDataSource.setDescription('This object identifies the source of the data that this wanAal5StatsEntry analyzes. This source can be any pvcEntry that is associated with an ATM interface on this device. In order to identify a particular VPI/VCI, this object shall identify the instance of the pvcIndex object, defined in the PVCCONFIG-MIB.')
wanAal5PvcStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsDropEvents.setDescription('The total number of events in which frames were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
wanAal5PvcStatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsInCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsInCells.setDescription('The total number of cells for seen coming from the far end of the link on this VPI/VCI.')
wanAal5PvcStatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsOutCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsOutCells.setDescription('The total number of cells seen coming from the near end of the link on this VPI/VCI.')
wanAal5PvcStatsInPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsInPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsInPDUs.setDescription('The total number of AAL-5 PDUs seen coming from the far end of the link on this VPI/VCI.')
wanAal5PvcStatsOutPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsOutPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsOutPDUs.setDescription('The total number of AAL-5 PDUs seen coming from the near end of the link on this VPI/VCI.')
wanAal5PvcStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsInOctets.setDescription('The sum of octets from all AAL-5 PDUs seen originating from the far end of the link on this VCI/VPI.')
wanAal5PvcStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsOutOctets.setDescription('The sum of octets from all AAL-5 PDUs seen originating from the near end of the link on this VPI/VCI.')
wanAal5PvcStatsInCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsInCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsInCLP1.setDescription('The total number of cells with the CLP bit set seen coming from the far end of the link on this VCI/VPI.')
wanAal5PvcStatsOutCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsOutCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsOutCLP1.setDescription('The total number of cells with the CLP bit set seen coming from the near end of the link on this VCI/VPI.')
wanAal5PvcStatsInCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsInCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsInCRCs.setDescription('The total number of AAL-5 PDUs with CRC errors seen coming from the far end of the link on this VCI/VPI.')
wanAal5PvcStatsOutCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsOutCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsOutCRCs.setDescription('The total number of AAL-5 PDUs with CRC errors seen coming from the near end of the link on this VPI/VCI.')
wanAal5PvcStatsInOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsInOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsInOversizedSDUs.setDescription('The number of AAL5 SDUs from the far end of the link that were too large on this VPI/VCI.')
wanAal5PvcStatsOutOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsOutOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsOutOversizedSDUs.setDescription('The number of AAL5 SDUs from the near end of the link that were too large on this VPI/VCI.')
wanAal5PvcStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsUpTime.setDescription('The total amount of time in one-hundreds of a second that the probe is sure this LCI was active, i.e., the total time the value of wanAal5PvcStatsState was equal to up(1). A value of less than the age of this entry does not necessarily mean that this VPI/VCI was down. It only means the probe was not certain it was up. Note: the sum of wanAal5PvcStatsUpTime and wanAal5PvcStatsDownTime may be less than the age of this entry. In this case, the unaccounted for time is the time the probe was uncertain of the state of this VPI/VCI, i.e., the total time the value of wanAal5PvcStatsState was unknown(3).')
wanAal5PvcStatsDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsDownTime.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsDownTime.setDescription('The total amount of time in one-hundreds of a second that the probe is sure this LCI was down, i.e., the total time the value of wanAal5PvcStatsState was equal to down(3). A value of less than the age of this entry does not necessarily mean that this VPI/VCI was up at some point. It only means the probe was not certain it was down. Note: the sum of wanAal5PvcStatsUpTime and wanAal5PvcStatsDownTime may be less than the age of this entry. In this case, the unaccounted for time is the time the probe was uncertain of the state of this VPI/VCI, i.e., the total time the value of wanAal5PvcStatsState was unknown(3).')
wanAal5PvcStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsState.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsState.setDescription('The current state of this VPI/VCI as inferred by the probe. A value of up(2) means the LCI is active. A value of down(2) means the VPI/VCI is inactive. And a value of unknown(3) means the probe cannot currently infer the state.')
wanAal5PvcStatsStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcStatsStateChanges.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsStateChanges.setDescription('The count of the number of times the wanAal5PvcStatsState has gone from up(1) to down(2) or vice versa. The number of times wanAal5PvcStatsState goes to unknown(3) is not counted. However, if the value goes from up(1) to unknown(3) and then to down(2) should be counted as 1. Likewise going from down(2) to unknown(3) and then to up(3) should be counted as 1.')
wanAal5PvcStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 20), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAal5PvcStatsOwner.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsOwner.setDescription('The entity that configured this entry.')
wanAal5PvcStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 1, 3, 3, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wanAal5PvcStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcStatsStatus.setDescription('The status of this wanAal5PvcStatsTable entry.')
wanAal5PvcHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3), )
if mibBuilder.loadTexts: wanAal5PvcHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryTable.setDescription('AAL-5 per-VPI/VCI statistics.')
wanAal5PvcHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1), ).setIndexNames((0, "WANSTATS-MIB", "wanAal5PvcHistoryIndex"), (0, "WANSTATS-MIB", "wanAal5PvcHistorySampleIndex"))
if mibBuilder.loadTexts: wanAal5PvcHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryEntry.setDescription('The statistics for a AAL-5 VCI/VPI. The near end of the link refers to the side of the link that the probe is monitoring. The far end is the side the probe is not on.')
wanAal5PvcHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wanAal5PvcHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryIndex.setDescription('The history of which this entry is a port. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex.')
wanAal5PvcHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wanAal5PvcHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
wanAal5PvcHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collection the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
wanAal5PvcHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryDropEvents.setDescription('The change in value of wanAal5PvcStatsDropEvents during the interval.')
wanAal5PvcHistoryInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryInCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryInCells.setDescription('The change in value of wanAal5PvcStatsInCells during the interval.')
wanAal5PvcHistoryOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryOutCells.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryOutCells.setDescription('The change in value of wanAal5PvcStatsOutCells during the interval.')
wanAal5PvcHistoryInPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryInPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryInPDUs.setDescription('The change in value of wanAal5PvcStatsInPDUs during the interval.')
wanAal5PvcHistoryOutPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryOutPDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryOutPDUs.setDescription('The change in value of wanAal5PvcStatsOutPDUs during the interval.')
wanAal5PvcHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryInOctets.setDescription('The change in value of wanAal5PvcStatsInOctets during the interval.')
wanAal5PvcHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryOutOctets.setDescription('The change in value of wanAal5PvcStatsOutOctets during the interval.')
wanAal5PvcHistoryInCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryInCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryInCLP1.setDescription('The change in value of wanAal5PvcStatsInCLP1 during the interval.')
wanAal5PvcHistoryOutCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryOutCLP1.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryOutCLP1.setDescription('The change in value of wanAal5PvcStatsOutCLP1 during the interval.')
wanAal5PvcHistoryInCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryInCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryInCRCs.setDescription('The change in value of wanAal5PvcStatsInCRCs during the interval.')
wanAal5PvcHistoryOutCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryOutCRCs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryOutCRCs.setDescription('The change in value of wanAal5PvcStatsOutCRCs during the interval.')
wanAal5PvcHistoryInOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryInOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryInOversizedSDUs.setDescription('The change in value of wanAal5PvcStatsInOversizedSDUs during the interval.')
wanAal5PvcHistoryOutOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryOutOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryOutOversizedSDUs.setDescription('The change in value of wanAal5PvcStatsOutOversizedSDUs during the interval.')
wanAal5PvcHistoryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryUpTime.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryUpTime.setDescription('The change in value of wanAal5PvcStatsUpTime during the interval.')
wanAal5PvcHistoryDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryDownTime.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryDownTime.setDescription('The change in value of wanAal5PvcStatsDownTime during the interval.')
wanAal5PvcHistoryStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryStateChanges.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryStateChanges.setDescription('The change in value of wanAal5PvcStatsStateChanges during the interval.')
wanAal5PvcHistoryInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryInUtilization.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryInUtilization.setDescription('The best estimated of the mean utilization of traffic on this VPI/VCI coming from the far end of the link in hundreds of percent of the CIR.')
wanAal5PvcHistoryOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 6, 1, 5, 1, 8, 2, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAal5PvcHistoryOutUtilization.setStatus('current')
if mibBuilder.loadTexts: wanAal5PvcHistoryOutUtilization.setDescription('The best estimated of the mean utilization of traffic on this VPI/VCI coming from the near end of the link in hundreds of percent of CIR.')
mibBuilder.exportSymbols("WANSTATS-MIB", wanAtmStatsOutLOCs=wanAtmStatsOutLOCs, wanX25PvcHistoryInResets=wanX25PvcHistoryInResets, wanPppStatsOutLongFrames=wanPppStatsOutLongFrames, wanX25PvcStatsInResets=wanX25PvcStatsInResets, wanAtmHistoryOutOCDs=wanAtmHistoryOutOCDs, wanPppStatsDataSource=wanPppStatsDataSource, wanHssiStatsTxRingErrors=wanHssiStatsTxRingErrors, wanAal5HistoryOutCLP1=wanAal5HistoryOutCLP1, wanAal5PvcHistoryStateChanges=wanAal5PvcHistoryStateChanges, wanFrHistoryOutFECNs=wanFrHistoryOutFECNs, wanAal5StatsOutCLP1=wanAal5StatsOutCLP1, wanHssiHistoryRxLongFrames=wanHssiHistoryRxLongFrames, wanPppHistoryOutBadControls=wanPppHistoryOutBadControls, wanT1E1StatsAISs=wanT1E1StatsAISs, wanX25PvcStatsDownTime=wanX25PvcStatsDownTime, wanFrPvcStatsOutFrames=wanFrPvcStatsOutFrames, wanX25PvcHistoryProviderResets=wanX25PvcHistoryProviderResets, wanPppHistoryOutBadAddresses=wanPppHistoryOutBadAddresses, wanAtmHistorySetupAttempts=wanAtmHistorySetupAttempts, wanAtmStatsOutUnsuccessfulCalls=wanAtmStatsOutUnsuccessfulCalls, wanX25PvcHistoryUpTime=wanX25PvcHistoryUpTime, wanHssiHistoryIntervalStart=wanHssiHistoryIntervalStart, wanPppStatsTable=wanPppStatsTable, wanT3E3StatsSEFSs=wanT3E3StatsSEFSs, wanVSeriesStatsInOverruns=wanVSeriesStatsInOverruns, wanHssiStatsRxCrcErrors=wanHssiStatsRxCrcErrors, wanAtmStatsOutCells=wanAtmStatsOutCells, wanX25PvcHistoryInUtilization=wanX25PvcHistoryInUtilization, wanX25HistoryProviderResets=wanX25HistoryProviderResets, wanX25StatsIndex=wanX25StatsIndex, wanX25PvcHistoryEntry=wanX25PvcHistoryEntry, wanFrPvcHistoryInDEs=wanFrPvcHistoryInDEs, wanVSeriesHistoryOutUtilization=wanVSeriesHistoryOutUtilization, wanFrPvcStatsEntry=wanFrPvcStatsEntry, wanX25PvcStatsInFrames=wanX25PvcStatsInFrames, wanAtmHistoryInUtilization=wanAtmHistoryInUtilization, wanFrPvcStatsDownTime=wanFrPvcStatsDownTime, wanAal5PvcStatsOutCLP1=wanAal5PvcStatsOutCLP1, wanAal5HistoryInSVCs=wanAal5HistoryInSVCs, wanX25StatsOutRejects=wanX25StatsOutRejects, wanFrHistoryOutOctets=wanFrHistoryOutOctets, wanPppStatsInBadControls=wanPppStatsInBadControls, wanVSeriesStatsOutOctets=wanVSeriesStatsOutOctets, wanX25HistoryOutAttempts=wanX25HistoryOutAttempts, wanX25HistoryOutUtilization=wanX25HistoryOutUtilization, wanAal5PvcHistoryTable=wanAal5PvcHistoryTable, wanT3E3HistoryLCVs=wanT3E3HistoryLCVs, wanAal5StatsOutSVCs=wanAal5StatsOutSVCs, wanT3E3StatsEntry=wanT3E3StatsEntry, wanAal5HistoryInUtilization=wanAal5HistoryInUtilization, wanAal5PvcStatsStateChanges=wanAal5PvcStatsStateChanges, wanX25PvcStatsState=wanX25PvcStatsState, wanFrPvcStatsOutOctets=wanFrPvcStatsOutOctets, wanPppStatsStatus=wanPppStatsStatus, wanFrPvcHistoryEntry=wanFrPvcHistoryEntry, wanT3E3StatsPESs=wanT3E3StatsPESs, wanVSeriesStatsEntry=wanVSeriesStatsEntry, wanT1E1StatsUASs=wanT1E1StatsUASs, wanVSeriesHistoryIntervalStart=wanVSeriesHistoryIntervalStart, wanT3E3HistoryPCVs=wanT3E3HistoryPCVs, wanX25PvcStatsOutOctets=wanX25PvcStatsOutOctets, wanPppHistoryDropEvents=wanPppHistoryDropEvents, wanHssiStatsOwner=wanHssiStatsOwner, wanHssiHistoryIndex=wanHssiHistoryIndex, wanAal5StatsInPDUs=wanAal5StatsInPDUs, wanX25StatsDropEvents=wanX25StatsDropEvents, wanT3E3StatsLCVs=wanT3E3StatsLCVs, wanFrStatsInBECNs=wanFrStatsInBECNs, wanFrPvcStatsOutFECNs=wanFrPvcStatsOutFECNs, wanVSeriesHistoryInOctets=wanVSeriesHistoryInOctets, wanAal5PvcHistorySampleIndex=wanAal5PvcHistorySampleIndex, wanAtmStatsInLOPs=wanAtmStatsInLOPs, wanPppHistoryInFrames=wanPppHistoryInFrames, wanAtmStatsInLOSs=wanAtmStatsInLOSs, wanAal5PvcStatsOutCells=wanAal5PvcStatsOutCells, wanT1E1StatsLCVs=wanT1E1StatsLCVs, wanHssiHistoryInFrames=wanHssiHistoryInFrames, wanAal5HistoryOutCRCs=wanAal5HistoryOutCRCs, wanPppStatsEntry=wanPppStatsEntry, rmonExtension=rmonExtension, wanT3E3HistoryEntry=wanT3E3HistoryEntry, wanT1E1HistoryEntry=wanT1E1HistoryEntry, wanX25HistoryOutFailures=wanX25HistoryOutFailures, wanX25PvcStatsOutAccusedErrors=wanX25PvcStatsOutAccusedErrors, wanX25StatsInInterrupts=wanX25StatsInInterrupts, wanT3E3StatsInOctets=wanT3E3StatsInOctets, wanFrHistoryIntervalStart=wanFrHistoryIntervalStart, wanT3E3HistoryInUtilization=wanT3E3HistoryInUtilization, wanT1E1StatsSESs=wanT1E1StatsSESs, nm=nm, wanFrPvcStatsState=wanFrPvcStatsState, wanAtmHistoryInOCDs=wanAtmHistoryInOCDs, wanAal5PvcStatsInPDUs=wanAal5PvcStatsInPDUs, wanFrPvcHistoryInOctets=wanFrPvcHistoryInOctets, wanFrPvcHistoryInUtilization=wanFrPvcHistoryInUtilization, wanVSeriesStatsOutFrames=wanVSeriesStatsOutFrames, wanAal5StatsInOversizedSDUs=wanAal5StatsInOversizedSDUs, PYSNMP_MODULE_ID=wanStatsMIB, wanPppHistoryIndex=wanPppHistoryIndex, wanT1E1HistoryESs=wanT1E1HistoryESs, wanX25HistorySampleIndex=wanX25HistorySampleIndex, wanVSeriesHistoryDropEvents=wanVSeriesHistoryDropEvents, wanHssiStatsInOctets=wanHssiStatsInOctets, wanX25StatsOutAccusedErrors=wanX25StatsOutAccusedErrors, wanAal5PvcHistoryDownTime=wanAal5PvcHistoryDownTime, wanFrPvcStatsOutBECNs=wanFrPvcStatsOutBECNs, wanAtmHistoryOutCLP1=wanAtmHistoryOutCLP1, wanAtmStatsOutOCDs=wanAtmStatsOutOCDs, wanAal5PvcStatsOutOctets=wanAal5PvcStatsOutOctets, wanFrHistoryInBECNs=wanFrHistoryInBECNs, wanVSeriesHistoryInFrames=wanVSeriesHistoryInFrames, wanSignalingStats=wanSignalingStats, wanAal5PvcHistoryInCRCs=wanAal5PvcHistoryInCRCs, wanT3E3StatsInFrames=wanT3E3StatsInFrames, wanAal5StatsInCells=wanAal5StatsInCells, wanAal5PvcHistoryEntry=wanAal5PvcHistoryEntry, wanPppStatsIndex=wanPppStatsIndex, wanX25PvcStatsInOctets=wanX25PvcStatsInOctets, wanAtmHistoryOutExpiries=wanAtmHistoryOutExpiries, wanPppHistoryInBadFCSs=wanPppHistoryInBadFCSs, wanAal5StatsIndex=wanAal5StatsIndex, wanFrPvcHistoryIndex=wanFrPvcHistoryIndex, wanX25PvcHistoryInInterrupts=wanX25PvcHistoryInInterrupts, wanHssiHistorySampleIndex=wanHssiHistorySampleIndex, wanFrPvcHistoryDownTime=wanFrPvcHistoryDownTime, wanPppHistoryTable=wanPppHistoryTable, wanHssiHistoryInUtilization=wanHssiHistoryInUtilization, wanAal5HistoryInCells=wanAal5HistoryInCells, wanX25PvcHistoryTable=wanX25PvcHistoryTable, wanAal5HistoryOutUtilization=wanAal5HistoryOutUtilization, wanX25HistoryOutResets=wanX25HistoryOutResets, wanT1E1StatsOOFs=wanT1E1StatsOOFs, wanAal5StatsDropEvents=wanAal5StatsDropEvents, wanHssiStatsDataSource=wanHssiStatsDataSource, wanHssiHistoryOutFrames=wanHssiHistoryOutFrames, wanX25StatsInFailures=wanX25StatsInFailures, wanPppStatsOutOctets=wanPppStatsOutOctets, wanFrPvcStatsStateChanges=wanFrPvcStatsStateChanges, wanX25StatsOutAttempts=wanX25StatsOutAttempts, wanFrPvcHistoryOutDEs=wanFrPvcHistoryOutDEs, wanHssiStatsTxCmplProcessings=wanHssiStatsTxCmplProcessings, wanVSeriesHistoryInterruptedFrames=wanVSeriesHistoryInterruptedFrames, wanAal5PvcHistoryInCells=wanAal5PvcHistoryInCells, wanT1E1StatsTable=wanT1E1StatsTable, wanSignalingHistory=wanSignalingHistory, wanPppHistoryEntry=wanPppHistoryEntry, wanT3E3StatsIndex=wanT3E3StatsIndex, wanT1E1StatsEntry=wanT1E1StatsEntry, wanAtmHistoryIndex=wanAtmHistoryIndex, wanAal5PvcStatsInOctets=wanAal5PvcStatsInOctets, wanT1E1StatsLOMFs=wanT1E1StatsLOMFs, wanT3E3HistoryOutFrames=wanT3E3HistoryOutFrames, wanVSeriesHistoryOutOverruns=wanVSeriesHistoryOutOverruns, wanHssiHistoryTxAborts=wanHssiHistoryTxAborts, wanAal5PvcHistoryOutOversizedSDUs=wanAal5PvcHistoryOutOversizedSDUs, wanVSeriesHistoryTable=wanVSeriesHistoryTable, wanT1E1HistorySESs=wanT1E1HistorySESs, wanStatsMIB=wanStatsMIB, wanAal5StatsOutCRCs=wanAal5StatsOutCRCs, wanAal5PvcStatsOwner=wanAal5PvcStatsOwner, wanAal5StatsOutOversizedSDUs=wanAal5StatsOutOversizedSDUs, wanHssiStatsRxOverruns=wanHssiStatsRxOverruns, wanX25HistoryInAttempts=wanX25HistoryInAttempts, wanHssiStatsEntry=wanHssiStatsEntry, wanT3E3HistoryIndex=wanT3E3HistoryIndex, wanAtmHistoryOutRoutesUnavailable=wanAtmHistoryOutRoutesUnavailable, wanT1E1HistoryLOSs=wanT1E1HistoryLOSs, wanAtmStatsInResourcesUnavailable=wanAtmStatsInResourcesUnavailable, wanAtmStatsInLOCs=wanAtmStatsInLOCs, wanFrHistorySampleIndex=wanFrHistorySampleIndex, wanT3E3StatsRAIs=wanT3E3StatsRAIs, wanT1E1HistoryBESs=wanT1E1HistoryBESs, wanAtmHistoryInPartyEvents=wanAtmHistoryInPartyEvents, wanAtmStatsInExpiries=wanAtmStatsInExpiries, wanX25PvcHistoryIntervalStart=wanX25PvcHistoryIntervalStart, wanFrStatsStatus=wanFrStatsStatus, wanAtmHistoryInCLP1=wanAtmHistoryInCLP1, wanT1E1StatsInFrames=wanT1E1StatsInFrames, wanAtmHistoryOutPartyEvents=wanAtmHistoryOutPartyEvents, wanT1E1HistoryTS16AISs=wanT1E1HistoryTS16AISs, wanAal5StatsInCLP1=wanAal5StatsInCLP1, wanAtmStatsInOCDs=wanAtmStatsInOCDs, wanX25HistoryOutAccusedErrors=wanX25HistoryOutAccusedErrors, wanAal5PvcHistoryDropEvents=wanAal5PvcHistoryDropEvents, wanAtmHistoryInIncorrectMsgs=wanAtmHistoryInIncorrectMsgs, wanX25HistoryInOctets=wanX25HistoryInOctets, wanX25PvcHistoryDownTime=wanX25PvcHistoryDownTime, wanT1E1HistoryOutFrames=wanT1E1HistoryOutFrames, wanFrPvcStatsInDEs=wanFrPvcStatsInDEs, wanFrPvcStatsIndex=wanFrPvcStatsIndex, wanAal5PvcStatsInCells=wanAal5PvcStatsInCells, wanFrStatsInFECNs=wanFrStatsInFECNs, wanFrPvcHistoryOutUtilization=wanFrPvcHistoryOutUtilization, wanFrPvcStatsUpTime=wanFrPvcStatsUpTime, wanX25PvcStatsOutInterrupts=wanX25PvcStatsOutInterrupts, wanHssiStatsRxRingErrors=wanHssiStatsRxRingErrors, wanX25PvcStatsDropEvents=wanX25PvcStatsDropEvents, wanT3E3HistoryLOSs=wanT3E3HistoryLOSs, wanT1E1StatsLOFs=wanT1E1StatsLOFs, wanFrPvcStatsOutDEs=wanFrPvcStatsOutDEs, wanT3E3StatsAISs=wanT3E3StatsAISs, wanAtmStatsOutResourcesUnavailable=wanAtmStatsOutResourcesUnavailable, wanFrHistoryTable=wanFrHistoryTable, wanX25PvcStatsOutFrames=wanX25PvcStatsOutFrames, wanAal5PvcHistoryInOversizedSDUs=wanAal5PvcHistoryInOversizedSDUs, wanX25HistoryInRejects=wanX25HistoryInRejects, wanHssiHistoryPortOpErrors=wanHssiHistoryPortOpErrors, wanPppHistorySampleIndex=wanPppHistorySampleIndex, wanX25PvcStatsTable=wanX25PvcStatsTable, wanT3E3HistoryInFrames=wanT3E3HistoryInFrames, wanT1E1StatsOwner=wanT1E1StatsOwner, wanT3E3HistoryCCVs=wanT3E3HistoryCCVs, wanAtmStatsStatus=wanAtmStatsStatus, wanX25PvcHistoryInAccusedErrors=wanX25PvcHistoryInAccusedErrors, wanAtmStatsOutRoutesUnavailable=wanAtmStatsOutRoutesUnavailable, wanVSeriesStatsDropEvents=wanVSeriesStatsDropEvents, wanT1E1HistoryOutOctets=wanT1E1HistoryOutOctets, wanT3E3StatsCCVs=wanT3E3StatsCCVs, wanT3E3StatsLOFs=wanT3E3StatsLOFs, wanAtmHistoryInRoutesUnavailable=wanAtmHistoryInRoutesUnavailable, wanT1E1StatsLESs=wanT1E1StatsLESs, wanAal5PvcHistoryOutCRCs=wanAal5PvcHistoryOutCRCs, wanX25HistoryOutInterrupts=wanX25HistoryOutInterrupts, wanVSeriesStatsStatus=wanVSeriesStatsStatus, wanX25HistoryInResets=wanX25HistoryInResets, wanX25HistoryInInterrupts=wanX25HistoryInInterrupts, wanX25PvcHistoryOutAccusedErrors=wanX25PvcHistoryOutAccusedErrors, wanFrPvcHistorySampleIndex=wanFrPvcHistorySampleIndex, wanT1E1StatsStatus=wanT1E1StatsStatus, wanX25StatsOutFrames=wanX25StatsOutFrames, wanFrStatsOutBECNs=wanFrStatsOutBECNs, wanT1E1HistoryInUtilization=wanT1E1HistoryInUtilization, wanHssiStatsStatus=wanHssiStatsStatus, wanAtmHistorySampleIndex=wanAtmHistorySampleIndex, wanAtmStatsOwner=wanAtmStatsOwner, wanAal5StatsOutOctets=wanAal5StatsOutOctets, wanAtmHistoryInResourcesUnavailable=wanAtmHistoryInResourcesUnavailable, lanprobe=lanprobe, wanFrStatsOwner=wanFrStatsOwner, wanPppHistoryOutLongFrames=wanPppHistoryOutLongFrames, wanX25PvcStatsInAccusedErrors=wanX25PvcStatsInAccusedErrors, wanAtmStatsOutPartyEvents=wanAtmStatsOutPartyEvents, wanX25HistoryProviderClears=wanX25HistoryProviderClears, wanAal5PvcHistoryInCLP1=wanAal5PvcHistoryInCLP1, wanAtmStatsOutIncorrectMsgs=wanAtmStatsOutIncorrectMsgs, wanAal5PvcHistoryOutUtilization=wanAal5PvcHistoryOutUtilization, wanT1E1HistoryRAIs=wanT1E1HistoryRAIs, wanAtmStatsEntry=wanAtmStatsEntry, wanFrStatsEntry=wanFrStatsEntry, wanHssiHistoryDropEvents=wanHssiHistoryDropEvents, wanVSeriesStatsOwner=wanVSeriesStatsOwner, wanAtmHistoryInCells=wanAtmHistoryInCells, wanAal5StatsDataSource=wanAal5StatsDataSource, wanT3E3HistoryPSESs=wanT3E3HistoryPSESs)
mibBuilder.exportSymbols("WANSTATS-MIB", wanT3E3HistorySampleIndex=wanT3E3HistorySampleIndex, wanX25PvcStatsOwner=wanX25PvcStatsOwner, wanT3E3HistoryOutOctets=wanT3E3HistoryOutOctets, wanPppHistoryInLongFrames=wanPppHistoryInLongFrames, wanAal5StatsEntry=wanAal5StatsEntry, wanFrStatsDataSource=wanFrStatsDataSource, wanFrPvcStatsOwner=wanFrPvcStatsOwner, wanT3E3HistoryLESs=wanT3E3HistoryLESs, wanAtmHistoryOutCells=wanAtmHistoryOutCells, wanAtmStatsSetupAttempts=wanAtmStatsSetupAttempts, wanFrPvcHistoryOutOctets=wanFrPvcHistoryOutOctets, wanX25PvcStatsOutResets=wanX25PvcStatsOutResets, wanPppStatsInLongFrames=wanPppStatsInLongFrames, wanFrPvcHistoryIntervalStart=wanFrPvcHistoryIntervalStart, wanX25PvcHistoryOutInterrupts=wanX25PvcHistoryOutInterrupts, wanAal5HistoryOutCells=wanAal5HistoryOutCells, wanT1E1StatsCSSs=wanT1E1StatsCSSs, wanAal5PvcStatsOutPDUs=wanAal5PvcStatsOutPDUs, wanT3E3HistoryTable=wanT3E3HistoryTable, wanFrHistoryOutFrames=wanFrHistoryOutFrames, wanPppStatsInOctets=wanPppStatsInOctets, wanAal5PvcHistoryOutPDUs=wanAal5PvcHistoryOutPDUs, wanAtmHistoryInExpiries=wanAtmHistoryInExpiries, wanFrHistoryOutDEs=wanFrHistoryOutDEs, wanFrPvcHistoryOutFECNs=wanFrPvcHistoryOutFECNs, wanAal5PvcHistoryIntervalStart=wanAal5PvcHistoryIntervalStart, wanPppHistoryOutOctets=wanPppHistoryOutOctets, wanAtmHistoryOutRestartErrors=wanAtmHistoryOutRestartErrors, wanT1E1StatsTS16AISs=wanT1E1StatsTS16AISs, wanVSeriesHistorySampleIndex=wanVSeriesHistorySampleIndex, wanAal5PvcHistoryOutCells=wanAal5PvcHistoryOutCells, wanHssiStatsRxLongFrames=wanHssiStatsRxLongFrames, wanX25HistoryIntervalStart=wanX25HistoryIntervalStart, wanFrPvcHistoryUpTime=wanFrPvcHistoryUpTime, wanAal5PvcStatsOutCRCs=wanAal5PvcStatsOutCRCs, wanAal5HistoryDropEvents=wanAal5HistoryDropEvents, wanT1E1HistoryInFrames=wanT1E1HistoryInFrames, wanVSeriesStatsOutFCSs=wanVSeriesStatsOutFCSs, wanFrPvcHistoryInFrames=wanFrPvcHistoryInFrames, wanAal5PvcStatsDataSource=wanAal5PvcStatsDataSource, wanX25PvcHistoryOutOctets=wanX25PvcHistoryOutOctets, wanT1E1HistoryDMs=wanT1E1HistoryDMs, wanT1E1HistoryIntervalStart=wanT1E1HistoryIntervalStart, wanX25StatsDataSource=wanX25StatsDataSource, wanT1E1HistoryPCVs=wanT1E1HistoryPCVs, wanT3E3StatsStatus=wanT3E3StatsStatus, wanAal5PvcStatsStatus=wanAal5PvcStatsStatus, wanT1E1HistoryOOFs=wanT1E1HistoryOOFs, wanT3E3StatsDataSource=wanT3E3StatsDataSource, wanT1E1StatsInOctets=wanT1E1StatsInOctets, wanAal5HistoryOutPDUs=wanAal5HistoryOutPDUs, wanPppHistoryInUtilization=wanPppHistoryInUtilization, wanT1E1HistoryLOMFs=wanT1E1HistoryLOMFs, wanProtocolHistory=wanProtocolHistory, wanAal5PvcHistoryInPDUs=wanAal5PvcHistoryInPDUs, wanHssiHistoryRxRingOverruns=wanHssiHistoryRxRingOverruns, wanAal5StatsInOctets=wanAal5StatsInOctets, wanAal5PvcStatsUpTime=wanAal5PvcStatsUpTime, wanVSeriesHistoryInAbortedFrames=wanVSeriesHistoryInAbortedFrames, wanAal5PvcStatsState=wanAal5PvcStatsState, wanFrPvcStatsInFECNs=wanFrPvcStatsInFECNs, wanX25PvcHistoryOutUtilization=wanX25PvcHistoryOutUtilization, wanFrStatsTable=wanFrStatsTable, wanT1E1HistoryOutUtilization=wanT1E1HistoryOutUtilization, wanAtmStatsConnectionEvents=wanAtmStatsConnectionEvents, wanFrStatsOutFrames=wanFrStatsOutFrames, wanPppHistoryOutUtilization=wanPppHistoryOutUtilization, wanT3E3HistoryOutUtilization=wanT3E3HistoryOutUtilization, wanAtmHistoryOutLOSs=wanAtmHistoryOutLOSs, wanHssiStatsRxRingOverruns=wanHssiStatsRxRingOverruns, wanAtmHistoryOutIncorrectMsgs=wanAtmHistoryOutIncorrectMsgs, wanT1E1StatsOutOctets=wanT1E1StatsOutOctets, wanFrHistoryInDEs=wanFrHistoryInDEs, wanX25PvcStatsInInterrupts=wanX25PvcStatsInInterrupts, wanVSeriesStatsOutOverruns=wanVSeriesStatsOutOverruns, wanPppHistoryOutBadFCSs=wanPppHistoryOutBadFCSs, wanVSeriesStatsOutAbortedFrames=wanVSeriesStatsOutAbortedFrames, wanT1E1StatsPCVs=wanT1E1StatsPCVs, wanHssiStatsTable=wanHssiStatsTable, wanAal5PvcHistoryInOctets=wanAal5PvcHistoryInOctets, wanFrHistoryDropEvents=wanFrHistoryDropEvents, wanAtmHistoryInLOFs=wanAtmHistoryInLOFs, wanAtmStatsInPartyEvents=wanAtmStatsInPartyEvents, wanProtocolStats=wanProtocolStats, wanFrHistoryInFrames=wanFrHistoryInFrames, wanT3E3StatsPCVs=wanT3E3StatsPCVs, wanT1E1HistoryInOctets=wanT1E1HistoryInOctets, wanAtmStatsOutLOPs=wanAtmStatsOutLOPs, wanFrHistoryOutBECNs=wanFrHistoryOutBECNs, wanX25PvcStatsUpTime=wanX25PvcStatsUpTime, wanX25StatsOwner=wanX25StatsOwner, wanHssiStatsOutFrames=wanHssiStatsOutFrames, wanFrPvcHistoryDropEvents=wanFrPvcHistoryDropEvents, wanAal5PvcHistoryIndex=wanAal5PvcHistoryIndex, wanFrHistoryEntry=wanFrHistoryEntry, system=system, wanAal5PvcStatsIndex=wanAal5PvcStatsIndex, wanFrHistoryInOctets=wanFrHistoryInOctets, wanHssiHistoryTxCmplProcessings=wanHssiHistoryTxCmplProcessings, wanFrStatsInDEs=wanFrStatsInDEs, wanHssiHistoryTxRingErrors=wanHssiHistoryTxRingErrors, wanX25PvcHistoryIndex=wanX25PvcHistoryIndex, wanFrStatsOutDEs=wanFrStatsOutDEs, wanHssiHistoryRxRingErrors=wanHssiHistoryRxRingErrors, wanX25PvcStatsEntry=wanX25PvcStatsEntry, wanAtmHistoryOutLOPs=wanAtmHistoryOutLOPs, wanAtmStatsOutCLP1=wanAtmStatsOutCLP1, wanHssiStatsTxUnderruns=wanHssiStatsTxUnderruns, wanX25StatsOutFailures=wanX25StatsOutFailures, wanAtmHistoryOutLOFs=wanAtmHistoryOutLOFs, wanX25PvcStatsIndex=wanX25PvcStatsIndex, wanX25HistoryOutFrames=wanX25HistoryOutFrames, wanAtmStatsInSVCs=wanAtmStatsInSVCs, wanAal5PvcStatsEntry=wanAal5PvcStatsEntry, wanFrPvcHistoryOutBECNs=wanFrPvcHistoryOutBECNs, wanFrPvcHistoryOutFrames=wanFrPvcHistoryOutFrames, wanAal5PvcHistoryInUtilization=wanAal5PvcHistoryInUtilization, wanX25HistoryDropEvents=wanX25HistoryDropEvents, wanX25StatsInAccusedErrors=wanX25StatsInAccusedErrors, wanX25StatsProviderResets=wanX25StatsProviderResets, wanAtmStatsDropEvents=wanAtmStatsDropEvents, wanT3E3HistoryInOctets=wanT3E3HistoryInOctets, wanT1E1StatsFarLOMFs=wanT1E1StatsFarLOMFs, wanX25StatsInAttempts=wanX25StatsInAttempts, wanX25StatsOutInterrupts=wanX25StatsOutInterrupts, wanX25PvcStatsDataSource=wanX25PvcStatsDataSource, wanT3E3StatsPSESs=wanT3E3StatsPSESs, wanX25HistoryInFailures=wanX25HistoryInFailures, wanVSeriesHistoryInUtilization=wanVSeriesHistoryInUtilization, wanX25HistoryIndex=wanX25HistoryIndex, wanX25PvcHistoryDropEvents=wanX25PvcHistoryDropEvents, wanVSeriesStatsInFrames=wanVSeriesStatsInFrames, wanT1E1HistoryCSSs=wanT1E1HistoryCSSs, wanAtmStatsErroredPDUs=wanAtmStatsErroredPDUs, wanX25PvcStatsProviderResets=wanX25PvcStatsProviderResets, wanFrHistoryInUtilization=wanFrHistoryInUtilization, wanAtmStatsOutRestartErrors=wanAtmStatsOutRestartErrors, wanT1E1HistoryTable=wanT1E1HistoryTable, wanAtmStatsOutExpiries=wanAtmStatsOutExpiries, wanPvcHistory=wanPvcHistory, wanFrHistoryInFECNs=wanFrHistoryInFECNs, wanAal5StatsOutCells=wanAal5StatsOutCells, wanT3E3StatsOutOctets=wanT3E3StatsOutOctets, wanAal5PvcStatsInCLP1=wanAal5PvcStatsInCLP1, wanAtmHistoryOutSVCs=wanAtmHistoryOutSVCs, wanX25HistoryInAccusedErrors=wanX25HistoryInAccusedErrors, wanT3E3StatsOOFs=wanT3E3StatsOOFs, wanAtmStatsOutSVCs=wanAtmStatsOutSVCs, wanAal5HistoryIntervalStart=wanAal5HistoryIntervalStart, wanFrPvcHistoryStateChanges=wanFrPvcHistoryStateChanges, wanT3E3HistoryDropEvents=wanT3E3HistoryDropEvents, wanHssiHistoryInOctets=wanHssiHistoryInOctets, wanX25StatsInFrames=wanX25StatsInFrames, wanAal5HistoryOutSVCs=wanAal5HistoryOutSVCs, wanT3E3HistoryAISs=wanT3E3HistoryAISs, wanAtmHistoryOutResourcesUnavailable=wanAtmHistoryOutResourcesUnavailable, wanT1E1StatsSEFSs=wanT1E1StatsSEFSs, wanHssiStatsIndex=wanHssiStatsIndex, wanVSeriesHistoryInOverruns=wanVSeriesHistoryInOverruns, wanPppHistoryOutFrames=wanPppHistoryOutFrames, wanPvcStats=wanPvcStats, wanFrPvcStatsTable=wanFrPvcStatsTable, wanX25PvcHistoryInOctets=wanX25PvcHistoryInOctets, wanAtmStatsInRoutesUnavailable=wanAtmStatsInRoutesUnavailable, wanPppStatsOutBadControls=wanPppStatsOutBadControls, wanAtmStatsInIncorrectMsgs=wanAtmStatsInIncorrectMsgs, wanFrPvcStatsDropEvents=wanFrPvcStatsDropEvents, wanAtmHistoryInSVCs=wanAtmHistoryInSVCs, wanFrPvcStatsStatus=wanFrPvcStatsStatus, wanAtmHistoryOutUtilization=wanAtmHistoryOutUtilization, wanT3E3StatsLOSs=wanT3E3StatsLOSs, wanAtmHistoryInLOSs=wanAtmHistoryInLOSs, wanAal5HistoryOutOctets=wanAal5HistoryOutOctets, wanAtmStatsInCLP1=wanAtmStatsInCLP1, wanX25HistoryInFrames=wanX25HistoryInFrames, wanT1E1HistorySEFSs=wanT1E1HistorySEFSs, wanHssiHistoryOutUtilization=wanHssiHistoryOutUtilization, wanVSeriesHistoryInFCSs=wanVSeriesHistoryInFCSs, wanPppStatsOutBadAddresses=wanPppStatsOutBadAddresses, wanAtmStatsOutLOSs=wanAtmStatsOutLOSs, wanT1E1HistoryLOFs=wanT1E1HistoryLOFs, wanFrPvcHistoryInBECNs=wanFrPvcHistoryInBECNs, wanT3E3StatsOwner=wanT3E3StatsOwner, wanT3E3HistoryCSESs=wanT3E3HistoryCSESs, wanX25StatsInRejects=wanX25StatsInRejects, wanFrStatsIndex=wanFrStatsIndex, wanT3E3StatsLESs=wanT3E3StatsLESs, wanAtmStatsDataSource=wanAtmStatsDataSource, wanFrPvcStatsInFrames=wanFrPvcStatsInFrames, wanAtmHistoryOutUnsuccessfulCalls=wanAtmHistoryOutUnsuccessfulCalls, wanT3E3HistoryLOFs=wanT3E3HistoryLOFs, wanT1E1StatsBESs=wanT1E1StatsBESs, wanAtmStatsTable=wanAtmStatsTable, wanHssiHistoryEntry=wanHssiHistoryEntry, wanAal5HistoryInOversizedSDUs=wanAal5HistoryInOversizedSDUs, wanAal5HistoryTable=wanAal5HistoryTable, wanAal5HistoryInOctets=wanAal5HistoryInOctets, wanHistoryMIBObjects=wanHistoryMIBObjects, wanAtmStatsOutLOFs=wanAtmStatsOutLOFs, wanX25StatsEntry=wanX25StatsEntry, wanT1E1HistoryUASs=wanT1E1HistoryUASs, wanAal5HistoryInPDUs=wanAal5HistoryInPDUs, wanAal5PvcStatsInCRCs=wanAal5PvcStatsInCRCs, wanVSeriesHistoryIndex=wanVSeriesHistoryIndex, wanVSeriesStatsInAbortedFrames=wanVSeriesStatsInAbortedFrames, wanAal5PvcStatsDropEvents=wanAal5PvcStatsDropEvents, wanPppStatsDropEvents=wanPppStatsDropEvents, wanAal5StatsInSVCs=wanAal5StatsInSVCs, wanAtmHistoryConnectionEvents=wanAtmHistoryConnectionEvents, wanX25HistoryTable=wanX25HistoryTable, wanAtmHistoryEntry=wanAtmHistoryEntry, wanFrHistoryOutUtilization=wanFrHistoryOutUtilization, wanAal5HistoryIndex=wanAal5HistoryIndex, wanAal5HistoryEntry=wanAal5HistoryEntry, wanHssiHistoryOutOctets=wanHssiHistoryOutOctets, wanFrPvcHistoryInFECNs=wanFrPvcHistoryInFECNs, wanHssiHistoryRxCrcErrors=wanHssiHistoryRxCrcErrors, wanX25HistoryInUtilization=wanX25HistoryInUtilization, wanPppHistoryInBadControls=wanPppHistoryInBadControls, wanAal5HistoryInCRCs=wanAal5HistoryInCRCs, wanHssiStatsInFrames=wanHssiStatsInFrames, wanAtmHistoryErroredPDUs=wanAtmHistoryErroredPDUs, wanAal5StatsOwner=wanAal5StatsOwner, wanFrHistoryIndex=wanFrHistoryIndex, wanVSeriesHistoryOutAbortedFrames=wanVSeriesHistoryOutAbortedFrames, wanPppStatsInBadAddresses=wanPppStatsInBadAddresses, wanX25StatsStatus=wanX25StatsStatus, wanT1E1HistoryIndex=wanT1E1HistoryIndex, wanAal5StatsOutPDUs=wanAal5StatsOutPDUs, wanT3E3HistoryUASs=wanT3E3HistoryUASs, wanStatsMIBObjects=wanStatsMIBObjects, wanT3E3StatsCESs=wanT3E3StatsCESs, wanFrPvcHistoryTable=wanFrPvcHistoryTable, wanT3E3HistoryRAIs=wanT3E3HistoryRAIs, wanT1E1HistoryLCVs=wanT1E1HistoryLCVs, wanAtmHistoryDropEvents=wanAtmHistoryDropEvents, wanFrPvcStatsInBECNs=wanFrPvcStatsInBECNs, wanAtmStatsInLOFs=wanAtmStatsInLOFs, wanT1E1StatsRAIs=wanT1E1StatsRAIs, wanAal5StatsInCRCs=wanAal5StatsInCRCs, wanAal5PvcHistoryOutOctets=wanAal5PvcHistoryOutOctets, wanT1E1HistoryDropEvents=wanT1E1HistoryDropEvents, wanVSeriesStatsDataSource=wanVSeriesStatsDataSource, wanAal5HistoryInCLP1=wanAal5HistoryInCLP1, wanFrStatsDropEvents=wanFrStatsDropEvents, wanAal5StatsTable=wanAal5StatsTable, wanX25HistoryOutRejects=wanX25HistoryOutRejects, wanAtmHistoryIntervalStart=wanAtmHistoryIntervalStart, wanAtmHistoryInUnsuccessfulCalls=wanAtmHistoryInUnsuccessfulCalls, wanAal5PvcHistoryOutCLP1=wanAal5PvcHistoryOutCLP1, wanHssiStatsDropEvents=wanHssiStatsDropEvents, general=general, wanHssiStatsRxAborts=wanHssiStatsRxAborts, wanHssiStatsOutOctets=wanHssiStatsOutOctets)
mibBuilder.exportSymbols("WANSTATS-MIB", wanVSeriesStatsInOctets=wanVSeriesStatsInOctets, wanX25PvcStatsStatus=wanX25PvcStatsStatus, wanAal5HistorySampleIndex=wanAal5HistorySampleIndex, wanHssiHistoryTable=wanHssiHistoryTable, wanVSeriesStatsInterruptedFrames=wanVSeriesStatsInterruptedFrames, wanHssiHistoryTxUnderruns=wanHssiHistoryTxUnderruns, wanPppStatsOwner=wanPppStatsOwner, wanAal5StatsStatus=wanAal5StatsStatus, wanPppStatsInBadFCSs=wanPppStatsInBadFCSs, wanHssiHistoryRxOverruns=wanHssiHistoryRxOverruns, wanT3E3StatsUASs=wanT3E3StatsUASs, wanAal5PvcStatsDownTime=wanAal5PvcStatsDownTime, wanVSeriesHistoryEntry=wanVSeriesHistoryEntry, wanT3E3HistorySEFSs=wanT3E3HistorySEFSs, wanX25StatsOutOctets=wanX25StatsOutOctets, wanAtmHistoryInRestartErrors=wanAtmHistoryInRestartErrors, wanHssiStatsPortOpErrors=wanHssiStatsPortOpErrors, wanVSeriesStatsIndex=wanVSeriesStatsIndex, wanX25StatsInResets=wanX25StatsInResets, wanT3E3StatsCSESs=wanT3E3StatsCSESs, wanX25PvcStatsStateChanges=wanX25PvcStatsStateChanges, wanPppHistoryInBadAddresses=wanPppHistoryInBadAddresses, wanVSeriesStatsInFCSs=wanVSeriesStatsInFCSs, wanX25StatsInOctets=wanX25StatsInOctets, wanAtmHistoryTable=wanAtmHistoryTable, wanFrStatsOutFECNs=wanFrStatsOutFECNs, wanHssiStatsTxAborts=wanHssiStatsTxAborts, wanT1E1StatsDropEvents=wanT1E1StatsDropEvents, wanT3E3HistoryOOFs=wanT3E3HistoryOOFs, wanX25PvcHistoryInFrames=wanX25PvcHistoryInFrames, wanAtmHistoryOutLOCs=wanAtmHistoryOutLOCs, wanT1E1HistorySampleIndex=wanT1E1HistorySampleIndex, wanX25StatsProviderClears=wanX25StatsProviderClears, statsExtension=statsExtension, wanT3E3StatsDropEvents=wanT3E3StatsDropEvents, wanFrStatsInFrames=wanFrStatsInFrames, wanX25PvcHistorySampleIndex=wanX25PvcHistorySampleIndex, wanAal5PvcStatsTable=wanAal5PvcStatsTable, wanAal5PvcHistoryUpTime=wanAal5PvcHistoryUpTime, wanAtmStatsInCells=wanAtmStatsInCells, wanVSeriesHistoryOutFrames=wanVSeriesHistoryOutFrames, wanT1E1StatsLOSs=wanT1E1StatsLOSs, wanT1E1HistoryLESs=wanT1E1HistoryLESs, wanT1E1StatsDataSource=wanT1E1StatsDataSource, hp=hp, wanHssiHistoryRxAborts=wanHssiHistoryRxAborts, wanAtmStatsInRestartErrors=wanAtmStatsInRestartErrors, wanPppStatsOutFrames=wanPppStatsOutFrames, wanX25HistoryOutOctets=wanX25HistoryOutOctets, wanX25PvcHistoryStateChanges=wanX25PvcHistoryStateChanges, wanVSeriesStatsTable=wanVSeriesStatsTable, wanAal5HistoryOutOversizedSDUs=wanAal5HistoryOutOversizedSDUs, wanT1E1StatsDMs=wanT1E1StatsDMs, wanX25PvcHistoryOutResets=wanX25PvcHistoryOutResets, wanPppStatsOutBadFCSs=wanPppStatsOutBadFCSs, wanT1E1StatsESs=wanT1E1StatsESs, wanVSeriesHistoryOutOctets=wanVSeriesHistoryOutOctets, wanT3E3HistoryPESs=wanT3E3HistoryPESs, wanVSeriesHistoryOutFCSs=wanVSeriesHistoryOutFCSs, wanFrStatsOutOctets=wanFrStatsOutOctets, wanT3E3HistoryIntervalStart=wanT3E3HistoryIntervalStart, wanPppHistoryInOctets=wanPppHistoryInOctets, wanPppStatsInFrames=wanPppStatsInFrames, netElement=netElement, wanT3E3StatsTable=wanT3E3StatsTable, wanX25StatsTable=wanX25StatsTable, wanAtmHistoryInLOPs=wanAtmHistoryInLOPs, wanX25StatsOutResets=wanX25StatsOutResets, wanT1E1StatsOutFrames=wanT1E1StatsOutFrames, wanT1E1HistoryAISs=wanT1E1HistoryAISs, wanT3E3StatsOutFrames=wanT3E3StatsOutFrames, wanAtmHistoryInLOCs=wanAtmHistoryInLOCs, wanX25PvcHistoryOutFrames=wanX25PvcHistoryOutFrames, wanT1E1HistoryFarLOMFs=wanT1E1HistoryFarLOMFs, wanAal5PvcStatsOutOversizedSDUs=wanAal5PvcStatsOutOversizedSDUs, wanFrPvcStatsDataSource=wanFrPvcStatsDataSource, wanFrStatsInOctets=wanFrStatsInOctets, wanPppHistoryIntervalStart=wanPppHistoryIntervalStart, wanAtmStatsIndex=wanAtmStatsIndex, wanAtmStatsInUnsuccessfulCalls=wanAtmStatsInUnsuccessfulCalls, wanAal5PvcStatsInOversizedSDUs=wanAal5PvcStatsInOversizedSDUs, wanFrPvcStatsInOctets=wanFrPvcStatsInOctets, wanX25HistoryEntry=wanX25HistoryEntry, wanT3E3HistoryCESs=wanT3E3HistoryCESs, wanT1E1StatsIndex=wanT1E1StatsIndex)
