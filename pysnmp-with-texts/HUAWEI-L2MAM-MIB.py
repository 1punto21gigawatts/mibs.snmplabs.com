#
# PySNMP MIB module HUAWEI-L2MAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-L2MAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
PhysicalIndex, entPhysicalIndex, entPhysicalName = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex", "entPhysicalName")
hwBaseTrapSeverity, hwBaseTrapProbableCause, hwBaseTrapEventType = mibBuilder.importSymbols("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity", "hwBaseTrapProbableCause", "hwBaseTrapEventType")
hwL2IfPortName, = mibBuilder.importSymbols("HUAWEI-L2IF-MIB", "hwL2IfPortName")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
hwVplsVsiName, = mibBuilder.importSymbols("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName")
ifDescr, InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "InterfaceIndexOrZero", "InterfaceIndex")
EnableValue, = mibBuilder.importSymbols("NQA-MIB", "EnableValue")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanIdOrNone, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone", "VlanId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter32, TimeTicks, NotificationType, Integer32, ModuleIdentity, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, MibIdentifier, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "TimeTicks", "NotificationType", "Integer32", "ModuleIdentity", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "MibIdentifier", "iso", "ObjectIdentity")
TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
hwL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42))
hwL2MAM = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2))
hwL2MAM.setRevisions(('2015-08-25 00:00', '2015-08-06 00:00', '2015-07-23 00:00', '2014-12-19 23:43', '2014-07-25 09:45', '2014-06-16 09:45', '2014-06-06 09:45', '2014-01-21 00:00', '2014-05-10 00:00', '2014-03-13 00:00', '2013-09-07 00:00', '2013-05-24 00:00', '2013-05-14 00:00', '2004-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwL2MAM.setRevisionsDescriptions(('Modify hwCfgFdbPort SYNTAX from InterfaceIndex to InterfaceIndexOrZero. ', 'Modify hwDynFdbPort of HwdbDynFdbEntry. ', 'Add alarm node hwBdMacLimitOverThresholdAlarm and hwBdMacLimitOverThresholdAlarmResume. ', 'Add alarm node hwPwMacSpoofingAttackAlarm and hwPwMacSpoofingAttackRecover. ', 'Delete hwMacHopPortName5-8 of hwMacHopAlarmTable . ', 'Add alarm node hwPstBroadcastLostAlarm and hwPstBroadcastLostAlarmResume. ', 'Delet alarm node hwVllByPassPWOverGRENotSupportForwardRising. ', 'Add hwMacHopPort of hwMacHopAlarmTable . ', 'Delete hwMacHopMac and hwMacHopSlotId of hwMacHopAlarmTable . ', 'Add hwMacHopAlarmTable and two traps hwMacHopAlarmRisingThreshold and hwMacHopAlarmFallingThreshold for Mac hop alram. ', 'Fix the errors checked by a tool.', 'Add alarm node hwVplsOverGRENotSupportForwardRising and hwVllByPassPWOverGRENotSupportForwardRising. ', 'Add alarm node hwMacLimitRuleNumRaisingThreshold and hwMacLimitRuleNumFallingThreshold . ', ' V1.00, Inital version. ',))
if mibBuilder.loadTexts: hwL2MAM.setLastUpdated('201508250000Z')
if mibBuilder.loadTexts: hwL2MAM.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwL2MAM.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwL2MAM.setDescription('This is the layer 2 mac-address management. It contains the layer 2 mac-address forwarding information currently operating on this device. And also contains the information of mac-limit rule. ')
hwL2MAMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1))
class VlanIndex(TextualConvention, Unsigned32):
    description = 'A value used to index per-VLAN tables: values of 0 and 4095 are not permitted; if the value is between 1 and 4094 inclusive, it represents an IEEE 802.1Q VLAN-ID with global scope within a given bridged domain (see VlanId textual convention). If the value is greater than 4095 then it represents a VLAN with scope local to the particular agent, i.e. one without a global VLAN-ID assigned to it. Such VLANs are outside the scope of IEEE 802.1Q but it is convenient to be able to manage them in the same way using this MIB.'
    status = 'current'

hwL2MaxMacLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2MaxMacLimit.setStatus('current')
if mibBuilder.loadTexts: hwL2MaxMacLimit.setDescription('The maximum of Mac-address limit rule.')
hwdbCfgFdbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2), )
if mibBuilder.loadTexts: hwdbCfgFdbTable.setStatus('current')
if mibBuilder.loadTexts: hwdbCfgFdbTable.setDescription('The layer 2 Configured mac-address forwarding table .The table that contains the layer 2 mac-address forwarding information currently operating on this device.')
hwdbCfgFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwCfgFdbMac"), (0, "HUAWEI-L2MAM-MIB", "hwCfgFdbVlanId"), (0, "HUAWEI-L2MAM-MIB", "hwCfgFdbVsiName"))
if mibBuilder.loadTexts: hwdbCfgFdbEntry.setStatus('current')
if mibBuilder.loadTexts: hwdbCfgFdbEntry.setDescription('Entries of The layer 2 mac-address forwarding table.')
hwCfgFdbMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwCfgFdbMac.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbMac.setDescription("A unicast MAC address for which the device contains it's information in the mac-address table. The mac-address can't be a special address or multicast address.")
hwCfgFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 2), VlanIndex().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwCfgFdbVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbVlanId.setDescription('The VLAN name or other identifier referring to the VLAN which is correlative to the hwFdbMac.')
hwCfgFdbVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwCfgFdbVsiName.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbVsiName.setDescription('The VSI-ID or other identifier referring to the VSI which is correlative to the hwFdbMac.')
hwCfgFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgFdbPort.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbPort.setDescription('The forwarding port. The port must be an ethernet port. And the port must be contained by the hwFdbVlanId or allow the hwFdbVlanId get across through itself.')
hwCfgFdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("static", 2), ("blackhole", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgFdbType.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbType.setDescription("The mac-address table item type of this entry. The meanings of the values are: static(2)- the mac-address is configured by user, doesn't aging out, and this entry doesn't lost after the device/FSU is reset or FSU is pulled out. blackhole(3)- the mac-address is configured by user for discarding frame which contains specific destination mac-address, doesn't aging out, and this entry doesn't lost after the device/FSU is reset or FSU is pulled out. When the type is dynamic ,the item can't be created.")
hwCfgFdbRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgFdbRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbRowstatus.setDescription('The operating state of the row.')
hwCfgFdbAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgFdbAtmPort.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbAtmPort.setDescription('The forwarding port. The port must be an atm port. ')
hwCfgFdbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgFdbVpi.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbVpi.setDescription('The Virtual Path Identifier.')
hwCfgFdbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2047), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgFdbVci.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbVci.setDescription('The Virtual Connection Identifier.')
hwCfgFdbCeDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noCeDefault", 0), ("ceDefault", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgFdbCeDefault.setStatus('current')
if mibBuilder.loadTexts: hwCfgFdbCeDefault.setDescription("The flag indicates whether the MAC address entry is configed according to ce-default-vlan. 'no-ce-default(0)' indicates no, 'ce-default(1)' indicates yes")
hwdbDynFdbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3), )
if mibBuilder.loadTexts: hwdbDynFdbTable.setStatus('current')
if mibBuilder.loadTexts: hwdbDynFdbTable.setDescription('The layer 2 Dynamic (Leaned)mac-address forwarding table .The table that contains the layer 2 mac-address forwarding information currently operating on this device.')
hwdbDynFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwDynFdbMac"), (0, "HUAWEI-L2MAM-MIB", "hwDynFdbVlanId"), (0, "HUAWEI-L2MAM-MIB", "hwDynFdbVsiName"))
if mibBuilder.loadTexts: hwdbDynFdbEntry.setStatus('current')
if mibBuilder.loadTexts: hwdbDynFdbEntry.setDescription('Entries of The layer 2 mac-address forwarding table.')
hwDynFdbMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwDynFdbMac.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbMac.setDescription("A unicast MAC address for which the device contains it's information in the mac-address table. The mac-address can't be a special address or multicast address.")
hwDynFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 2), VlanIndex().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwDynFdbVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbVlanId.setDescription('The VLAN name or other identifier referring to the VLAN which is correlative to the hwFdbMac.')
hwDynFdbVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwDynFdbVsiName.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbVsiName.setDescription('The VSI-ID or other identifier referring to the VSI which is correlative to the hwFdbMac.')
hwDynFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDynFdbPort.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbPort.setDescription('The forwarding port. The port must be an ethernet port. And the port must be contained by the hwFdbVlanId or allow the hwFdbVlanId get across through itself.')
hwDynFdbAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDynFdbAtmPort.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbAtmPort.setDescription('The forwarding port. The port must be an atm port. ')
hwDynFdbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDynFdbVpi.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbVpi.setDescription('The Virtual Path Identifier.')
hwDynFdbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2047), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDynFdbVci.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbVci.setDescription('The Virtual Connection Identifier.')
hwDynFdbRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDynFdbRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwDynFdbRowstatus.setDescription('The operating state of the row.')
hwDynSecurityFdbToStaticEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 3, 1, 9), EnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDynSecurityFdbToStaticEnable.setStatus('current')
if mibBuilder.loadTexts: hwDynSecurityFdbToStaticEnable.setDescription("When this object is set to 'Enable(1)',if port security is enabled , the dynamic mac will convert to static.")
hwMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4), )
if mibBuilder.loadTexts: hwMacLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitTable.setDescription('A table containing the mac-address learning-limit rule information for device. It can limit on ethernet interface,vlan,ethernet interface + vlan.')
hwMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacLimitPort"), (0, "HUAWEI-L2MAM-MIB", "hwMacLimitVlanId"), (0, "HUAWEI-L2MAM-MIB", "hwMacLimitVsiName"))
if mibBuilder.loadTexts: hwMacLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitEntry.setDescription('Entries of the mac-address learning-limit table.')
hwMacLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwMacLimitPort.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitPort.setDescription('The port number which will be configured mac-limit.')
hwMacLimitVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacLimitVlanId.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitVlanId.setDescription('The vlan id which will be configured mac-limit.')
hwMacLimitVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacLimitVsiName.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitVsiName.setDescription('The vsi name which will be configured mac-limit.')
hwMacLimitMaxMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitMaxMac.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitMaxMac.setDescription("The maximum mac address. When the value is '0', the meaning is that there isn't limiting rule to the mac-address number.")
hwMacLimitMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitMaxRate.setDescription("The max mac-address learning rate. When the valu e is '0', the meaning is that there isn't limiting rule to the learning rate.")
hwMacLimitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitAction.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitAction.setDescription('The mac-address limit action of this entry. The meanings of the values are: discard(1)- Discard packets forward(2)- Forward packets.')
hwMacLimitAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitAlarm.setDescription('The mac-limit alarm switch of this entry. The meanings of the values are: disable(1), enable(2)')
hwMacLimitRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRowstatus.setDescription('The operating state of the row.')
hwMacAddressLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacAddressLearn.setStatus('current')
if mibBuilder.loadTexts: hwMacAddressLearn.setDescription('The flag of enable Mac address learn.')
hwMacDynAddressLearnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacDynAddressLearnNum.setStatus('current')
if mibBuilder.loadTexts: hwMacDynAddressLearnNum.setDescription('The number of learned dynamic MAC address .')
hwMacSecureAddressLearnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacSecureAddressLearnNum.setStatus('current')
if mibBuilder.loadTexts: hwMacSecureAddressLearnNum.setDescription('The number of learned secure MAC address .')
hwMacUsageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 5), )
if mibBuilder.loadTexts: hwMacUsageTable.setStatus('current')
if mibBuilder.loadTexts: hwMacUsageTable.setDescription('MAC usage table')
hwMacUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwMacUsageEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacUsageEntry.setDescription('MAC usage entry')
hwMacEntityUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacEntityUsage.setStatus('current')
if mibBuilder.loadTexts: hwMacEntityUsage.setDescription('MAC usage in every IO board')
hwMacEntityUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacEntityUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacEntityUsageThreshold.setDescription('MAC usage range')
hwMacHopAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38), )
if mibBuilder.loadTexts: hwMacHopAlarmTable.setStatus('current')
if mibBuilder.loadTexts: hwMacHopAlarmTable.setDescription('A table containing the mac hop alarm information.')
hwMacHopAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacHopVlan"), (0, "HUAWEI-L2MAM-MIB", "hwMacHopVsiName"), (0, "HUAWEI-L2MAM-MIB", "hwMacHopBdID"))
if mibBuilder.loadTexts: hwMacHopAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacHopAlarmEntry.setDescription('Entries of mac hop alarm information for interface table.')
hwMacHopVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopVlan.setStatus('current')
if mibBuilder.loadTexts: hwMacHopVlan.setDescription('The VLAN ID of mac hop.')
hwMacHopVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopVsiName.setStatus('current')
if mibBuilder.loadTexts: hwMacHopVsiName.setDescription('The VSI of mac hop.')
hwMacHopBdID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopBdID.setStatus('current')
if mibBuilder.loadTexts: hwMacHopBdID.setDescription('The BD id of mac hop.')
hwMacHopPortName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopPortName1.setStatus('current')
if mibBuilder.loadTexts: hwMacHopPortName1.setDescription('The Port name of Mac-hopping.')
hwMacHopPortName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopPortName2.setStatus('current')
if mibBuilder.loadTexts: hwMacHopPortName2.setDescription('The Port name of Mac-hopping.')
hwMacHopPortName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopPortName3.setStatus('current')
if mibBuilder.loadTexts: hwMacHopPortName3.setDescription('The Port name of Mac-hopping.')
hwMacHopPortName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopPortName4.setStatus('current')
if mibBuilder.loadTexts: hwMacHopPortName4.setDescription('The Port name of Mac-hopping.')
hwMacHopPWInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 38, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacHopPWInfo.setStatus('current')
if mibBuilder.loadTexts: hwMacHopPWInfo.setDescription('The PW info of Mac-hopping.')
hwdbCfg3tupleFdbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 6), )
if mibBuilder.loadTexts: hwdbCfg3tupleFdbTable.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbTable.setDescription('The layer 2 configured mac-address forwarding table .The table that contains the layer 2 mac-address forwarding information currently operating on this device.')
hwdbCfg3tupleFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 6, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwdbCfg3tupleFdbMac"), (0, "HUAWEI-L2MAM-MIB", "hwdbCfg3tupleFdbVlanId"), (0, "HUAWEI-L2MAM-MIB", "hwdbCfg3tupleFdbInPort"))
if mibBuilder.loadTexts: hwdbCfg3tupleFdbEntry.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbEntry.setDescription('Entries of The layer 2 mac-address forwarding table.')
hwdbCfg3tupleFdbMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwdbCfg3tupleFdbMac.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbMac.setDescription("A unicast MAC address for which the device contains it's information in the mac-address table. The mac-address can't be a special address or multicast address.")
hwdbCfg3tupleFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwdbCfg3tupleFdbVlanId.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbVlanId.setDescription('The VLAN name or other identifier referring to the VLAN which is correlative to the hwFdbMac.')
hwdbCfg3tupleFdbInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 6, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: hwdbCfg3tupleFdbInPort.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbInPort.setDescription('The input port. The port must be an ethernet port. And the port must be contained by the hwFdbVlanId or allow the hwFdbVlanId get across through itself.')
hwdbCfg3tupleFdbOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 6, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwdbCfg3tupleFdbOutPort.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbOutPort.setDescription('The forwarding port. The port must be an ethernet port. And the port must be contained by the hwFdbVlanId or allow the hwFdbVlanId get across through itself.')
hwdbCfg3tupleFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwdbCfg3tupleFdbRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbRowStatus.setDescription('The operating state of the row.')
hwPwMacSpoofingAttackMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 39), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPwMacSpoofingAttackMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwPwMacSpoofingAttackMacAddr.setDescription('A unicast MAC address for PW mac spoofing.')
hwBdMacLimitBdId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 40), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBdMacLimitBdId.setStatus('current')
if mibBuilder.loadTexts: hwBdMacLimitBdId.setDescription('The bd id which will be configured mac-limit.')
hwBdMacLimitMaxMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 41), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBdMacLimitMaxMac.setStatus('current')
if mibBuilder.loadTexts: hwBdMacLimitMaxMac.setDescription("The maximum mac address. When the value is '0', the meaning is that there isn't limiting rule to the mac-address number.")
hwL2MacTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7))
hwMacUsageRaisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-L2MAM-MIB", "hwMacEntityUsage"), ("HUAWEI-L2MAM-MIB", "hwMacEntityUsageThreshold"))
if mibBuilder.loadTexts: hwMacUsageRaisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacUsageRaisingThreshold.setDescription('Beyond the configurated Mac usage')
hwMacUsageFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-L2MAM-MIB", "hwMacEntityUsage"), ("HUAWEI-L2MAM-MIB", "hwMacEntityUsageThreshold"))
if mibBuilder.loadTexts: hwMacUsageFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacUsageFallingThreshold.setDescription('Resume the alarm of Mac usage')
hwMacLimitNumRaisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 3)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitMaxMac"), ("HUAWEI-L2IF-MIB", "hwL2IfPortName"))
if mibBuilder.loadTexts: hwMacLimitNumRaisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitNumRaisingThreshold.setDescription('Beyond the mac limited learning number ')
hwMacLimitNumFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 4)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitMaxMac"), ("HUAWEI-L2IF-MIB", "hwL2IfPortName"))
if mibBuilder.loadTexts: hwMacLimitNumFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitNumFallingThreshold.setDescription('Resume the alarm of Mac usage')
hwUntargetMacNumAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 5)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwUntargetMacNum"))
if mibBuilder.loadTexts: hwUntargetMacNumAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUntargetMacNumAlarm.setDescription('Warning of untarget mac-address numbers.')
hwPortSecRcvInsecurePktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 6)).setObjects(("IF-MIB", "ifDescr"), ("HUAWEI-L2MAM-MIB", "hwPortSecurityProtectAction"))
if mibBuilder.loadTexts: hwPortSecRcvInsecurePktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPortSecRcvInsecurePktAlarm.setDescription('Alarm of port perform the protect action shutdown or restrict when receiving insecure mac packets in the interface.')
hwPwMacLimitNumRaisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 7)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwPwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitMaxMac"))
if mibBuilder.loadTexts: hwPwMacLimitNumRaisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitNumRaisingThreshold.setDescription('The number of MAC addresses that are learnt based on the PW reaches the upper limit.')
hwPwMacLimitNumFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 8)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwPwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitMaxMac"))
if mibBuilder.loadTexts: hwPwMacLimitNumFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitNumFallingThreshold.setDescription('The number of MAC addresses that are learnt based on the PW falls below the upper limit.')
hwPortStickyReachMaxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 9))
if mibBuilder.loadTexts: hwPortStickyReachMaxAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPortStickyReachMaxAlarm.setDescription('An alarm is generated when the number of sticky MAC address entries reaches the maximum value.')
hwRecIllegalMacPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 10))
if mibBuilder.loadTexts: hwRecIllegalMacPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwRecIllegalMacPktAlarm.setDescription('The MAC addresses that received are illegal.')
hwMacLimitOverThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 11)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitMaxMac"), ("HUAWEI-L2IF-MIB", "hwL2IfPortName"), ("HUAWEI-L2MAM-MIB", "hwMacLimitVlanId"), ("HUAWEI-L2MAM-MIB", "hwMacLimitVsiName"))
if mibBuilder.loadTexts: hwMacLimitOverThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitOverThresholdAlarm.setDescription('Beyond the mac limited learning number .')
hwMacFlappingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 12)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacflappingMac"), ("HUAWEI-L2MAM-MIB", "hwMacFlappingVlan"), ("HUAWEI-L2IF-MIB", "hwL2IfPortName"), ("HUAWEI-L2IF-MIB", "hwL2IfPortName"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMacFlappingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMacFlappingAlarm.setDescription(' Mac flapping alarm .')
hwSlotMacLimitNumRaisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 13)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitMaxMac"), ("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlotMacLimitNumRaisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitNumRaisingThreshold.setDescription('The number of MAC addresses that are learnt based on the SLOT reaches the upper limit.')
hwSlotMacLimitNumFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 14)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitMaxMac"), ("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlotMacLimitNumFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitNumFallingThreshold.setDescription('The number of MAC addresses that are learnt based on the SLOT falls below the upper limit.')
hwL2ProtocolTunnelDropThresholdRaising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 15)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapPortName"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapProtocolName"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapDropThreshold"))
if mibBuilder.loadTexts: hwL2ProtocolTunnelDropThresholdRaising.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtocolTunnelDropThresholdRaising.setDescription('The number of the protocol transmit on the port reach the drop threshold.')
hwL2ProtocolTunnelDropThresholdFalling = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 16)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapPortName"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapProtocolName"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapDropThreshold"))
if mibBuilder.loadTexts: hwL2ProtocolTunnelDropThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtocolTunnelDropThresholdFalling.setDescription('The number of the protocol transmit on the port below the drop threshold.')
hwVsiMacLimitNumRaisingThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 17)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacLimitVsiName"))
if mibBuilder.loadTexts: hwVsiMacLimitNumRaisingThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwVsiMacLimitNumRaisingThresholdAlarm.setDescription('The vsi Beyond the mac limited learning number .')
hwVsiMacLimitNumRaisingThresholdAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 18)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacLimitVsiName"))
if mibBuilder.loadTexts: hwVsiMacLimitNumRaisingThresholdAlarmClear.setStatus('current')
if mibBuilder.loadTexts: hwVsiMacLimitNumRaisingThresholdAlarmClear.setDescription('The vsi release from the mac limited learning number .')
hwMacLimitOverThresholdAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 19)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-L2MAM-MIB", "hwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitMaxMac"), ("HUAWEI-L2IF-MIB", "hwL2IfPortName"), ("HUAWEI-L2MAM-MIB", "hwMacLimitVlanId"), ("HUAWEI-L2MAM-MIB", "hwMacLimitVsiName"))
if mibBuilder.loadTexts: hwMacLimitOverThresholdAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitOverThresholdAlarmResume.setDescription('Less than the mac limited learning number .')
hwSlotMacNumRaisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 20)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacSlotStatistics"), ("HUAWEI-L2MAM-MIB", "hwMacSlotStatisticsSpecify"))
if mibBuilder.loadTexts: hwSlotMacNumRaisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacNumRaisingThreshold.setDescription('This notification indicates the MAC usage of the slot raising the threshold.')
hwSlotMacNumFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 21)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacSlotStatistics"), ("HUAWEI-L2MAM-MIB", "hwMacSlotStatisticsSpecify"))
if mibBuilder.loadTexts: hwSlotMacNumFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacNumFallingThreshold.setDescription('This notification indicates the MAC usage of the slot falling the threshold.')
hwMacLimitRuleNumRaisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 22)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-L2MAM-MIB", "hwMacRuleDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleMaxMac"))
if mibBuilder.loadTexts: hwMacLimitRuleNumRaisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRuleNumRaisingThreshold.setDescription('Mac address is beyond the threshold of the global mac limit rule ')
hwMacLimitRuleNumFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 23)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-L2MAM-MIB", "hwMacRuleDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleMaxMac"))
if mibBuilder.loadTexts: hwMacLimitRuleNumFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRuleNumFallingThreshold.setDescription('Mac address is fall behind the threshold of the global mac limit rule. ')
hwVplsOverGRENotSupportForwardRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 24)).setObjects(("HUAWEI-L2MAM-MIB", "hwVplsOverGreVsiName"), ("HUAWEI-L2MAM-MIB", "hwRemoteIp"))
if mibBuilder.loadTexts: hwVplsOverGRENotSupportForwardRising.setStatus('current')
if mibBuilder.loadTexts: hwVplsOverGRENotSupportForwardRising.setDescription('The public network tunnel used to carry the VPLS PW is a GRE tunnel and the VPLS PW cannot forward traffic. ')
hwVplsOverGRENotSupportForwardRisingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 25)).setObjects(("HUAWEI-L2MAM-MIB", "hwVplsOverGreVsiName"), ("HUAWEI-L2MAM-MIB", "hwRemoteIp"))
if mibBuilder.loadTexts: hwVplsOverGRENotSupportForwardRisingResume.setStatus('current')
if mibBuilder.loadTexts: hwVplsOverGRENotSupportForwardRisingResume.setDescription('The public network tunnel used to carry the VPLS PW is a non-GRE tunnel and the VPLS PW can forward traffic again. ')
hwIfInputUnucFlowRisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 28)).setObjects(("HUAWEI-L2MAM-MIB", "hwUNUCPortName"), ("HUAWEI-L2MAM-MIB", "hwUNUCPortAlarmThreshold"), ("HUAWEI-L2MAM-MIB", "hwUNUCPortRealFlow"))
if mibBuilder.loadTexts: hwIfInputUnucFlowRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfInputUnucFlowRisingThreshold.setDescription('Unknown unicast flow is beyond the alarm threshold. ')
hwIfInputUnucFlowFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 29)).setObjects(("HUAWEI-L2MAM-MIB", "hwUNUCPortName"), ("HUAWEI-L2MAM-MIB", "hwUNUCPortAlarmThreshold"), ("HUAWEI-L2MAM-MIB", "hwUNUCPortRealFlow"))
if mibBuilder.loadTexts: hwIfInputUnucFlowFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfInputUnucFlowFallingThreshold.setDescription('Unknown unicast flow is fall behind the alarm threshold. ')
hwMacHopAlarmRisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 30)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacHopVlan"), ("HUAWEI-L2MAM-MIB", "hwMacHopVsiName"), ("HUAWEI-L2MAM-MIB", "hwMacHopBdID"), ("HUAWEI-L2MAM-MIB", "hwMacHopPortName1"), ("HUAWEI-L2MAM-MIB", "hwMacHopPortName2"), ("HUAWEI-L2MAM-MIB", "hwMacHopPortName3"), ("HUAWEI-L2MAM-MIB", "hwMacHopPortName4"), ("HUAWEI-L2MAM-MIB", "hwMacHopPWInfo"))
if mibBuilder.loadTexts: hwMacHopAlarmRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacHopAlarmRisingThreshold.setDescription('Mac hop is beyond the alarm threshold. ')
hwMacHopAlarmFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 31)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacHopVlan"), ("HUAWEI-L2MAM-MIB", "hwMacHopVsiName"), ("HUAWEI-L2MAM-MIB", "hwMacHopBdID"))
if mibBuilder.loadTexts: hwMacHopAlarmFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMacHopAlarmFallingThreshold.setDescription('Mac hop is fall behind the alarm threshold. ')
hwPstBroadcastLostAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 32)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPstBroadcastLostAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPstBroadcastLostAlarm.setDescription('The board cannot receive pst broadcast packet from other boards in one minute.')
hwPstBroadcastLostResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 33)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPstBroadcastLostResume.setStatus('current')
if mibBuilder.loadTexts: hwPstBroadcastLostResume.setDescription('The board can receive pst broadcast packet from other boards in one minute.')
hwPwMacSpoofingAttackAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 34)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-L2MAM-MIB", "hwPwMacSpoofingAttackMacAddr"))
if mibBuilder.loadTexts: hwPwMacSpoofingAttackAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPwMacSpoofingAttackAlarm.setDescription('A PW received MAC spoofing packets from an interface. ')
hwPwMacSpoofingAttackAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 35)).setObjects(("HUAWEI-VPLS-EXT-MIB", "hwVplsVsiName"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwMacSpoofingAttackAlarmClear.setStatus('current')
if mibBuilder.loadTexts: hwPwMacSpoofingAttackAlarmClear.setDescription('The alarm indicating that a PW received MAC spoofing packets from an interface was cleared. ')
hwBdMacLimitOverThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 36)).setObjects(("HUAWEI-L2MAM-MIB", "hwBdMacLimitBdId"), ("HUAWEI-L2MAM-MIB", "hwBdMacLimitMaxMac"))
if mibBuilder.loadTexts: hwBdMacLimitOverThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBdMacLimitOverThresholdAlarm.setDescription('Beyond the mac limited learning number. ')
hwBdMacLimitOverThresholdAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 7, 37)).setObjects(("HUAWEI-L2MAM-MIB", "hwBdMacLimitBdId"), ("HUAWEI-L2MAM-MIB", "hwBdMacLimitMaxMac"))
if mibBuilder.loadTexts: hwBdMacLimitOverThresholdAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwBdMacLimitOverThresholdAlarmResume.setDescription('Less than the mac limited learning number. ')
hwUntargetMacNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUntargetMacNum.setStatus('current')
if mibBuilder.loadTexts: hwUntargetMacNum.setDescription('The number of untarget mac-address.')
hwMacAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 1000000), ValueRangeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwMacAgingTime.setDescription("The interval that the hardware deletes any entry whose hit bit is cleared and clears the hit bit of the remaining entries.The default value is 300 seconds.'0'means the MAC entries will be never aged.")
hwMacRestrict = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRestrict.setStatus('current')
if mibBuilder.loadTexts: hwMacRestrict.setDescription('This object indicates whether MAC address learning restrict has been enabled for the system.')
hwPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11), )
if mibBuilder.loadTexts: hwPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityTable.setDescription('A table containing the port security information for device. It can protect the port from inaccessible mac.')
hwPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwPortSecurityPort"))
if mibBuilder.loadTexts: hwPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityEntry.setDescription('Entries of the port security table.')
hwPortSecurityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwPortSecurityPort.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityPort.setDescription('The port number which will be configured port security.')
hwPortSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityEnabled.setDescription("When this object is set to 'enabled(1)' Port security is enabled on this port else disabled.")
hwPortSecurityProtectAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("restrict", 1), ("protect", 2), ("shutdown", 3), ("noaction", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortSecurityProtectAction.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityProtectAction.setDescription('The port security protect action of this entry. The meanings of the values are: restrict(1)- shutdown the port protect(2)- discard the unknow source mac packets and not learn shutdown(3)- send trap noaction(4)- broadcast the packet .')
hwPortSecurityAllDynToStaticEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11, 1, 4), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortSecurityAllDynToStaticEnable.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityAllDynToStaticEnable.setDescription("When this object is set to 'enable(1)' all dynamic mac-address on the Port will convert to static.")
hwPortSecurityAllDynToStickyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11, 1, 5), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortSecurityAllDynToStickyEnable.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityAllDynToStickyEnable.setDescription('When this object is set to enable and port security is enabled, the dynamic MAC address entry will be changed to a sticky MAC address entry.')
hwPortSecurityMaxMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortSecurityMaxMacNum.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityMaxMacNum.setDescription('The maximum mac address can be learned based on the port.')
hwMacLimitGlobalRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12), )
if mibBuilder.loadTexts: hwMacLimitGlobalRuleTable.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitGlobalRuleTable.setDescription('A table containing the global mac-address learning-limit rules information for device.')
hwMacLimitGlobalRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacLimitGlobalRuleName"))
if mibBuilder.loadTexts: hwMacLimitGlobalRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitGlobalRuleEntry.setDescription('Entries of the global mac-address learning-limit rule table.')
hwMacLimitGlobalRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwMacLimitGlobalRuleName.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitGlobalRuleName.setDescription('The global mac-address learning-limit rule name.')
hwMacLimitRuleMaxMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitRuleMaxMac.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRuleMaxMac.setDescription("The maximum mac address. When the value is '0', the meaning is that there isn't limiting rule to the mac-address number.")
hwMacLimitRuleMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitRuleMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRuleMaxRate.setDescription("The max mac-address learning rate. When the valu e is '0', the meaning is that there isn't limiting rule to the learning rate.")
hwMacLimitRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitRuleAction.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRuleAction.setDescription('The mac-address limit action of this entry. The meanings of the values are: discard(1)- Discard packets forward(2)- Forward packets.')
hwMacLimitRuleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitRuleAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRuleAlarm.setDescription('The mac-limit alarm switch of this entry. The meanings of the values are: disable(1), enable(2)')
hwMacLimitRuleRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitRuleRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitRuleRowstatus.setDescription('The operating state of the row.')
hwMacRuleDynAddressLearnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 12, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRuleDynAddressLearnNum.setStatus('current')
if mibBuilder.loadTexts: hwMacRuleDynAddressLearnNum.setDescription('The number of dynamic MAC address learned by the board.')
hwMacLimitApplyRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 13), )
if mibBuilder.loadTexts: hwMacLimitApplyRuleTable.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitApplyRuleTable.setDescription('A table containing the global mac-address learning-limit rules and apply ports.')
hwMacLimitApplyRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 13, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacLimitApplyPort"), (0, "HUAWEI-L2MAM-MIB", "hwMacLimitApplyVlanId"))
if mibBuilder.loadTexts: hwMacLimitApplyRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitApplyRuleEntry.setDescription('Entries of the global mac-address learning-limit rules and apply ports table.')
hwMacLimitApplyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 13, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwMacLimitApplyPort.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitApplyPort.setDescription('The port number which apply the global mac-address learning-limit rule.')
hwMacLimitApplyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwMacLimitApplyVlanId.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitApplyVlanId.setDescription('The vlan id which apply the global mac-address learning-limit rule.')
hwMacLimitApplyRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 13, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitApplyRuleName.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitApplyRuleName.setDescription('The global mac-address learning-limit rule name.')
hwMacLimitApplyRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 13, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLimitApplyRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitApplyRowstatus.setDescription('The operating state of the row.')
hwMacGlobalStatistics = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacGlobalStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMacGlobalStatistics.setDescription('The number of the global mac-address items.')
hwMacIfStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 15), )
if mibBuilder.loadTexts: hwMacIfStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwMacIfStatisticsTable.setDescription('A table showing the number of mac-address items by interface index.')
hwMacIfStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 15, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacIfStatisticsIfIndex"))
if mibBuilder.loadTexts: hwMacIfStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacIfStatisticsEntry.setDescription('Entries of the statistics of mac-address table.')
hwMacIfStatisticsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 15, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwMacIfStatisticsIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMacIfStatisticsIfIndex.setDescription('The interface index which is correlative to the hwIfMacStatistics table.')
hwMacIfStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacIfStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMacIfStatistics.setDescription('The number of the mac-address items.')
hwMacSlotStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 16), )
if mibBuilder.loadTexts: hwMacSlotStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwMacSlotStatisticsTable.setDescription('A table showing the number of mac-address items by slot ID.')
hwMacSlotStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 16, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacSlotStatisticsSlotId"))
if mibBuilder.loadTexts: hwMacSlotStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacSlotStatisticsEntry.setDescription('Entries of the statistics of mac-address table.')
hwMacSlotStatisticsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwMacSlotStatisticsSlotId.setStatus('current')
if mibBuilder.loadTexts: hwMacSlotStatisticsSlotId.setDescription('The slot ID which is correlative to the hwMacSlotStatistics table.')
hwMacSlotStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacSlotStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMacSlotStatistics.setDescription('The number of the mac-address items by slot ID.')
hwMacSlotStatisticsSpecify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacSlotStatisticsSpecify.setStatus('current')
if mibBuilder.loadTexts: hwMacSlotStatisticsSpecify.setDescription('The specify max number of the mac-address items by slot ID.')
hwMacVlanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 17), )
if mibBuilder.loadTexts: hwMacVlanStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwMacVlanStatisticsTable.setDescription('A table showing the number of mac-address items by VLAN ID.')
hwMacVlanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 17, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacVlanStatisticsVlanId"))
if mibBuilder.loadTexts: hwMacVlanStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacVlanStatisticsEntry.setDescription('Entries of the statistics of mac-address table.')
hwMacVlanStatisticsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 17, 1, 1), VlanId())
if mibBuilder.loadTexts: hwMacVlanStatisticsVlanId.setStatus('current')
if mibBuilder.loadTexts: hwMacVlanStatisticsVlanId.setDescription('The VLAN ID which is correlative to the hwMacVlanStatistics table.')
hwMacVlanStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacVlanStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMacVlanStatistics.setDescription('The number of the mac-address items.')
hwMacVsiStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 18), )
if mibBuilder.loadTexts: hwMacVsiStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwMacVsiStatisticsTable.setDescription('A table showing the number of mac-address items by VSI name.')
hwMacVsiStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 18, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacVsiStatisticsVsiName"))
if mibBuilder.loadTexts: hwMacVsiStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacVsiStatisticsEntry.setDescription('Entries of the statistics of mac-address table.')
hwMacVsiStatisticsVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hwMacVsiStatisticsVsiName.setStatus('current')
if mibBuilder.loadTexts: hwMacVsiStatisticsVsiName.setDescription('The VSI name which is correlative to the hwMacVsiStatistics table.')
hwMacVsiStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacVsiStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMacVsiStatistics.setDescription('The number of the mac-address items.')
hwPwMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19), )
if mibBuilder.loadTexts: hwPwMacLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitTable.setDescription('This is a rule table for PW-based MAC learning limit.')
hwPwMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwPwMacLimitVsiName"), (0, "HUAWEI-L2MAM-MIB", "hwPwMacLimitPwName"))
if mibBuilder.loadTexts: hwPwMacLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitEntry.setDescription('Entries of a rule table for PW-based MAC learning limit.')
hwPwMacLimitVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwPwMacLimitVsiName.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitVsiName.setDescription('This object indicates the name of the VSI that is configured with PW-based MAC learning limit.')
hwPwMacLimitPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: hwPwMacLimitPwName.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitPwName.setDescription('This object indicates the name of the PW that is configured with PW-based MAC learning limit.')
hwPwMacLimitMaxMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwMacLimitMaxMac.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitMaxMac.setDescription('The value of this object specifies the maximum number of MAC addresses that can be learnt. 0 indicates no limit.')
hwPwMacLimitMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwMacLimitMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitMaxRate.setDescription('The value of this object specifies the maximum rate for MAC address learning. 0 indicates no limit.')
hwPwMacLimitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwMacLimitAction.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitAction.setDescription('The value of this object specifies whether packets are forwarded or discarded after the number of MAC addresses that are learnt reaches the upper limit: 1: packets are discarded 2: packets are forwarded')
hwPwMacLimitAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwMacLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitAlarm.setDescription('The value of this object specifies whether the alarm is enabled or disabled after the number of MAC addresses that are learnt reaches the upper limit: 1: alarm is enabled 2: alarm is disabled')
hwPwMacLimitRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwMacLimitRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwPwMacLimitRowstatus.setDescription('This object indicates the RowStatus of hwPwMacLimitTable.')
hwPwMacAddressLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 8), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwMacAddressLearn.setStatus('current')
if mibBuilder.loadTexts: hwPwMacAddressLearn.setDescription('The object indicates whether MAC learning is enabled.')
hwPwMacDynAddressLearnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwMacDynAddressLearnNum.setStatus('current')
if mibBuilder.loadTexts: hwPwMacDynAddressLearnNum.setDescription('The value of this object specifies the number of dynamic MAC addresses that are learnt.')
hwMacSpoofingDefendTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 20), )
if mibBuilder.loadTexts: hwMacSpoofingDefendTable.setStatus('current')
if mibBuilder.loadTexts: hwMacSpoofingDefendTable.setDescription('A table enable the MAC spoofing defend.')
hwMacSpoofingDefendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 20, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacSpoofingDefendPort"))
if mibBuilder.loadTexts: hwMacSpoofingDefendEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacSpoofingDefendEntry.setDescription('Entries of the MAC spoofing defend table.')
hwMacSpoofingDefendPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 20, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwMacSpoofingDefendPort.setStatus('current')
if mibBuilder.loadTexts: hwMacSpoofingDefendPort.setDescription('The port number which will be configured 1.1.1 MAC spoofing defend.')
hwMacSpoofingDefendEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 20, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacSpoofingDefendEnabled.setStatus('current')
if mibBuilder.loadTexts: hwMacSpoofingDefendEnabled.setDescription("When this object is set to 'enabled(1)' MAC spoofing defend is enabled on this port else disabled.")
hwDiscardIllegalMacEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 21), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDiscardIllegalMacEnable.setStatus('current')
if mibBuilder.loadTexts: hwDiscardIllegalMacEnable.setDescription("When this object is set to 'enabled(1)' illegal MAC will be discarded.")
hwDiscardIllegalMacAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 22), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDiscardIllegalMacAlarm.setStatus('current')
if mibBuilder.loadTexts: hwDiscardIllegalMacAlarm.setDescription("When this object is set to 'enabled(1)' discard illegal MAC alarm is enabled else disabled.")
hwMacSpoofingDefend = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 23), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacSpoofingDefend.setStatus('current')
if mibBuilder.loadTexts: hwMacSpoofingDefend.setDescription("When this object is set to 'enabled(1)' MAC spoofing defend is enabled on global else disabled.")
hwL2MacFlappingTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 24))
hwMacflappingMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 24, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacflappingMac.setStatus('current')
if mibBuilder.loadTexts: hwMacflappingMac.setDescription('The flapping mac-address.')
hwMacFlappingVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacFlappingVlan.setStatus('current')
if mibBuilder.loadTexts: hwMacFlappingVlan.setDescription('The vlan of flapping mac.')
hwSlotMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25), )
if mibBuilder.loadTexts: hwSlotMacLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitTable.setDescription('This is a rule table for SLOT-based MAC learning limit.')
hwSlotMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwSlotMacLimitId"))
if mibBuilder.loadTexts: hwSlotMacLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitEntry.setDescription('Entries of a rule table for SLOT-based MAC learning limit.')
hwSlotMacLimitId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25, 1, 1), Integer32())
if mibBuilder.loadTexts: hwSlotMacLimitId.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitId.setDescription('This object indicates id of the SLOT that is configured with SLOT-based MAC learning limit.')
hwSlotMacLimitMaxMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotMacLimitMaxMac.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitMaxMac.setDescription('The value of this object specifies the maximum number of MAC addresses that can be learnt. 0 indicates no limit.')
hwSlotMacLimitMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotMacLimitMaxRate.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitMaxRate.setDescription('The value of this object specifies the maximum rate for MAC address learning. 0 indicates no limit.')
hwSlotMacLimitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotMacLimitAction.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitAction.setDescription('The value of this object specifies whether packets are forwarded or discarded after the number of MAC addresses that are learnt reaches the upper limit: 1: packets are discarded 2: packets are forwarded')
hwSlotMacLimitAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotMacLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitAlarm.setDescription('The value of this object specifies whether the alarm is enabled or disabled after the number of MAC addresses that are learnt reaches the upper limit: 1: alarm is enabled 2: alarm is disabled')
hwSlotMacLimitRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 25, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotMacLimitRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwSlotMacLimitRowstatus.setDescription('This object indicates the RowStatus of hwSlotMacLimitTable.')
hwL2ProtocolTunnelTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 26))
hwL2ProtocolTunnelTrapPortName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 26, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2ProtocolTunnelTrapPortName.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtocolTunnelTrapPortName.setDescription('The port name for layer 2 protocol tunnel trap.')
hwL2ProtocolTunnelTrapProtocolName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 26, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2ProtocolTunnelTrapProtocolName.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtocolTunnelTrapProtocolName.setDescription('The protocol name for layer 2 protocol tunnel trap.')
hwL2ProtocolTunnelTrapDropThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 26, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2ProtocolTunnelTrapDropThreshold.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtocolTunnelTrapDropThreshold.setDescription('The drop rangle of layer 2 protocol tunnel.')
hwL2ProtclTnlStdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27), )
if mibBuilder.loadTexts: hwL2ProtclTnlStdTable.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdTable.setDescription('Group-MAC configuration table of standard L2 protocol tunnel.')
hwL2ProtclTnlStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStdProtclName"))
if mibBuilder.loadTexts: hwL2ProtclTnlStdEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdEntry.setDescription('This object indicates Group-MAC configuration table for standard L2 protocol tunnel.')
hwL2ProtclTnlStdProtclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwL2ProtclTnlStdProtclName.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdProtclName.setDescription('This object indicates protocol name of standard L2 protocol tunnel.')
hwL2ProtclTnlStdProtclMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2ProtclTnlStdProtclMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdProtclMacAddr.setDescription('This object indicates protocol MAC-Address of standard L2 protocol tunnel.')
hwL2ProtclTnlStdEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetii", 1), ("snap", 2), ("llc", 3), ("others", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2ProtclTnlStdEncapType.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdEncapType.setDescription('This object indicates encapsulation type of standard L2 protocol tunnel.')
hwL2ProtclTnlStdProtclType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2ProtclTnlStdProtclType.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdProtclType.setDescription('This object indicates protocol type of standard L2 protocol tunnel.')
hwL2ProtclTnlStdGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2ProtclTnlStdGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdGroupMacAddr.setDescription('This object indicates group-MAC of standard L2 protocol tunnel.')
hwL2ProtclTnlStdGroupDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2ProtclTnlStdGroupDefault.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdGroupDefault.setDescription('This object indicates default group-MAC(0100-0ccd-cdd0) of standard L2 protocol tunnel.')
hwL2ProtclTnlStdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 27, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2ProtclTnlStdPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdPriority.setDescription('This object indicates priority of standard L2 protocol tunnel.')
hwL2ProtclTnlCusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28), )
if mibBuilder.loadTexts: hwL2ProtclTnlCusTable.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusTable.setDescription('Group-MAC configuration table of customize L2 protocol tunnel.')
hwL2ProtclTnlCusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusProtclName"))
if mibBuilder.loadTexts: hwL2ProtclTnlCusEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusEntry.setDescription('This object indicates Group-MAC configuration table for customize L2 protocol tunnel.')
hwL2ProtclTnlCusProtclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwL2ProtclTnlCusProtclName.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusProtclName.setDescription('This object indicates protocol name of customize L2 protocol tunnel.')
hwL2ProtclTnlCusProtclMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlCusProtclMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusProtclMacAddr.setDescription('This object indicates protocol MAC-Address of customize L2 protocol tunnel.')
hwL2ProtclTnlCusEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetii", 1), ("snap", 2), ("llc", 3), ("others", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlCusEncapType.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusEncapType.setDescription('This object indicates encapsulation type of customize L2 protocol tunnel.')
hwL2ProtclTnlCusProtclType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlCusProtclType.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusProtclType.setDescription('This object indicates protocol type of customize L2 protocol tunnel.')
hwL2ProtclTnlCusGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlCusGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusGroupMacAddr.setDescription('This object indicates group-MAC of customize L2 protocol tunnel.')
hwL2ProtclTnlCusGroupDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlCusGroupDefault.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusGroupDefault.setDescription('This object indicates default group-MAC(0100-0ccd-cdd0) of customize L2 protocol tunnel.')
hwL2ProtclTnlCusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlCusPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusPriority.setDescription('This object indicates priority of customize L2 protocol tunnel.')
hwL2ProtclTnlCusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 28, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlCusRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writeable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQSubIfTermTable pointing to the row, the agent must also destroy the corresponding entries in hwL2ProtclTnlCusTable.")
hwL2ProtclTnlEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29), )
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTable.setDescription('Port configuration table of L2 protocol tunnel.')
hwL2ProtclTnlEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwL2ProtclTnlEnableIfIndex"), (0, "HUAWEI-L2MAM-MIB", "hwL2ProtclTnlEnableProtclName"))
if mibBuilder.loadTexts: hwL2ProtclTnlEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableEntry.setDescription('This object indicates port configuration table of L2 protocol tunnel.')
hwL2ProtclTnlEnableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2ProtclTnlEnableIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableIfIndex.setDescription('This object indicates interface index of port configuration of L2 protocol tunnel.')
hwL2ProtclTnlEnableProtclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwL2ProtclTnlEnableProtclName.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableProtclName.setDescription('This object indicates protocol name of port configuration of L2 protocol tunnel.')
hwL2ProtclTnlEnableTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTransMode.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTransMode.setDescription('This object indicates transparent mode of port configuration of L2 protocol tunnel.')
hwL2ProtclTnlEnableTagListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTagListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTagListLow.setDescription('This object indicates VLAN list low of port configuration of L2 protocol tunnel.')
hwL2ProtclTnlEnableTagListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTagListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableTagListHigh.setDescription('This object indicates VLAN list high of port configuration of L2 protocol tunnel.')
hwL2ProtclTnlEnableDropthresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2ProtclTnlEnableDropthresholdRate.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableDropthresholdRate.setDescription('This object indicates drop threshold rate(packet per second) of port configuration of L2 protocol tunnel.')
hwL2ProtclTnlEnableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 29, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2ProtclTnlEnableRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writeable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQSubIfTermTable pointing to the row, the agent must also destroy the corresponding entries in hwL2ProtclTnlEnableTable.")
hwL2ProtclTnlStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30), )
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsTable.setDescription('Statistics table of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStatisticsIfIndex"), (0, "HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStatisticsProtclName"))
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsEntry.setDescription('This object indicates statistics table of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsIfIndex.setDescription('This object indicates interface index of statistics table of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsProtclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsProtclName.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsProtclName.setDescription('This object indicates protocol name of statistics table of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsDropthrhldRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsDropthrhldRate.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsDropthrhldRate.setDescription('This object indicates drop threshold rate(packets per second) of statistics table of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsInputPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsInputPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsInputPkts.setDescription('This object indicates the number of input packets of statistics table of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsOutputPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsOutputPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsOutputPkts.setDescription('This object indicates the number of output packets of statistics table of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 30, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsDropPkts.setDescription('This object indicates the number of drop packets of statistics table of L2 protocol tunnel.')
hwBridgeMacAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(60, 1000000), ValueRangeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBridgeMacAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwBridgeMacAgingTime.setDescription("The interval that the hardware deletes any entry whose hit bit is cleared and clears the hit bit of the remaining entries.The default value is 300 seconds.'0'means the MAC entries will be never aged.")
hwCfgMacAddrQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32), )
if mibBuilder.loadTexts: hwCfgMacAddrQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryTable.setDescription('The query table of layer 2 Configured mac-address forwarding table.')
hwCfgMacAddrQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryVlanId"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryVsiName"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQuerySiName"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryBridgeId"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryMacAddr"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryConditionMode"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryConditionStringA"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryConditionStringB"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryConditionDigitA"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryConditionDigitB"), (0, "HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryConditionDigitC"))
if mibBuilder.loadTexts: hwCfgMacAddrQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryEntry.setDescription('Match entries of layer 2 Configured mac-address forwarding table lookup.')
hwCfgMacAddrQueryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 1), VlanIdOrNone())
if mibBuilder.loadTexts: hwCfgMacAddrQueryVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryVlanId.setDescription('The VLAN ID for index of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwCfgMacAddrQueryVsiName.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryVsiName.setDescription('The vsi name for index of layer 2 Configured mac-address query table.')
hwCfgMacAddrQuerySiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwCfgMacAddrQuerySiName.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQuerySiName.setDescription('The service instance name for index of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwCfgMacAddrQueryBridgeId.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryBridgeId.setDescription('The bridge ID for index of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 5), MacAddress())
if mibBuilder.loadTexts: hwCfgMacAddrQueryMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryMacAddr.setDescription('A unicast MAC address for index of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryConditionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("showall", 1), ("showbymac", 2), ("showbymacvlan", 3), ("showbytype", 4), ("showbytypevlan", 5), ("showbytypeport", 6), ("showbytypeportvlan", 7), ("showbyvlan", 8), ("showbyport", 9), ("showbyportvlan", 10), ("showbymacvsi", 11), ("showbytypevsi", 12), ("showbytypeportvsi", 13), ("showbyvsi", 14), ("showbyportvsi", 15))))
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionMode.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionMode.setDescription('Mode for query condition of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryConditionStringA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionStringA.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionStringA.setDescription('String A (may be VSI or SI etc.) for query condition of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryConditionStringB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionStringB.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionStringB.setDescription('String B (may be MAC or MAC type etc.) for query condition of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryConditionDigitA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 9), Unsigned32())
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionDigitA.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionDigitA.setDescription('Digit A (may be VLAN ID etc.) for query condition of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryConditionDigitB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 10), Unsigned32())
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionDigitB.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionDigitB.setDescription('Digit B (may be IF index etc.) for query condition of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryConditionDigitC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 11), Unsigned32())
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionDigitC.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryConditionDigitC.setDescription('Digit C (other integer info) for query condition of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryType.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryType.setDescription('The entry type for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryIfIndex.setDescription('The interface index for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryPeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 14), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryPeVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryPeVlanId.setDescription('The PE VLAN ID for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryCeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 15), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryCeVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryCeVlanId.setDescription('The CE VLAN ID for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryCedefaultFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nocedefault", 0), ("cedefault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryCedefaultFlag.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryCedefaultFlag.setDescription('The CE default flag for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 17), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryAtmIfIndex.setDescription('The ATM interface index for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryVpi.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryVpi.setDescription('The VPI for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryVci.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryVci.setDescription('The VCI for match item of layer 2 Configured mac-address query table.')
hwCfgMacAddrQueryMacTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 32, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgMacAddrQueryMacTunnel.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryMacTunnel.setDescription('The MAC tunnel for match item of layer 2 Configured mac-address query table.')
hwDynMacAddrQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33), )
if mibBuilder.loadTexts: hwDynMacAddrQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryTable.setDescription('The query table of layer 2 dynamic mac-address forwarding table.')
hwDynMacAddrQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryVlanId"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryVsiName"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQuerySiName"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryBridgeId"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryMacAddr"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryConditionMode"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryConditionStringA"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryConditionStringB"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryConditionDigitA"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryConditionDigitB"), (0, "HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryConditionDigitC"))
if mibBuilder.loadTexts: hwDynMacAddrQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryEntry.setDescription('Match entries of layer 2 dynamic mac-address forwarding table lookup.')
hwDynMacAddrQueryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 1), VlanIdOrNone())
if mibBuilder.loadTexts: hwDynMacAddrQueryVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryVlanId.setDescription('The VLAN ID for index of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwDynMacAddrQueryVsiName.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryVsiName.setDescription('The vsi name for index of layer 2 dynamic mac-address query table.')
hwDynMacAddrQuerySiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwDynMacAddrQuerySiName.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQuerySiName.setDescription('The service instance name for index of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwDynMacAddrQueryBridgeId.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryBridgeId.setDescription('The bridge ID for index of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 5), MacAddress())
if mibBuilder.loadTexts: hwDynMacAddrQueryMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryMacAddr.setDescription('A unicast MAC address for index of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryConditionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("showall", 1), ("showbymac", 2), ("showbymacvlan", 3), ("showbytype", 4), ("showbytypevlan", 5), ("showbytypeport", 6), ("showbytypeportvlan", 7), ("showbyvlan", 8), ("showbyport", 9), ("showbyportvlan", 10), ("showbymacvsi", 11), ("showbytypevsi", 12), ("showbytypeportvsi", 13), ("showbyvsi", 14), ("showbyportvsi", 15), ("showbyvsipw", 16), ("showbytypeslot", 17), ("showbytypeslotsourceslot", 18), ("showbytypeslotvlan", 19), ("showbytypeslotport", 20), ("showbytypeslotportvlan", 21), ("showbytypeslotvsi", 22), ("showbytypeslotportvsi", 23), ("showbytypeslotvsipw", 24))))
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionMode.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionMode.setDescription('Mode for query condition of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryConditionStringA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionStringA.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionStringA.setDescription('String A (may be VSI or SI etc.) for query condition of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryConditionStringB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionStringB.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionStringB.setDescription('String B (may be MAC or MAC type etc.) for query condition of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryConditionDigitA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 9), Unsigned32())
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionDigitA.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionDigitA.setDescription('Digit A (may be VLAN ID etc.) for query condition of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryConditionDigitB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 10), Unsigned32())
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionDigitB.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionDigitB.setDescription('Digit B (may be IF index etc.) for query condition of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryConditionDigitC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 11), Unsigned32())
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionDigitC.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryConditionDigitC.setDescription('Digit C (other integer info) for query condition of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryType.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryType.setDescription('The entry type for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryIfIndex.setDescription('The interface index for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryPeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 14), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryPeVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryPeVlanId.setDescription('The PE VLAN ID for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryCeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 15), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryCeVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryCeVlanId.setDescription('The CE VLAN ID for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryAtmIfIndex.setDescription('The ATM interface index for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryVpi.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryVpi.setDescription('The VPI for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryVci.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryVci.setDescription('The VCI for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryPeerIp.setDescription('The peer ip address for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryPwId.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryPwId.setDescription('The PW ID for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryMacTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryMacTunnel.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryMacTunnel.setDescription('The MAC tunnel for match item of layer 2 dynamic mac-address query table.')
hwDynMacAddrQueryAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 33, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDynMacAddrQueryAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryAgingTime.setDescription('The aging time for match item of layer 2 dynamic mac-address query table.')
hwMacInfoQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34), )
if mibBuilder.loadTexts: hwMacInfoQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryTable.setDescription('The MAC address information of layer 2 mac-address database.')
hwMacInfoQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwMacInfoQueryConditionMode"), (0, "HUAWEI-L2MAM-MIB", "hwMacInfoQueryConditionStringA"), (0, "HUAWEI-L2MAM-MIB", "hwMacInfoQueryConditionStringB"), (0, "HUAWEI-L2MAM-MIB", "hwMacInfoQueryConditionStringC"), (0, "HUAWEI-L2MAM-MIB", "hwMacInfoQueryConditionDigitA"), (0, "HUAWEI-L2MAM-MIB", "hwMacInfoQueryConditionDigitB"), (0, "HUAWEI-L2MAM-MIB", "hwMacInfoQueryConditionDigitC"))
if mibBuilder.loadTexts: hwMacInfoQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryEntry.setDescription('Match information of layer 2 mac-address database.')
hwMacInfoQueryConditionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("showtotalnumberbyall", 1), ("showtotalnumberbytype", 2), ("showtotalnumberbytypevlan", 3), ("showtotalnumberbytypeport", 4), ("showtotalnumberbytypeportvlan", 5), ("showtotalnumberbyvlan", 6), ("showtotalnumberbyport", 7), ("showtotalnumberbyportvlan", 8), ("showtotalnumberbytypevsi", 9), ("showtotalnumberbytypeportvsi", 10), ("showtotalnumberbyvsi", 11), ("showtotalnumberbyportvsi", 12), ("showtotalnumberbyvsipw", 13), ("showtotalnumberbytypeslot", 14), ("showtotalnumberbytypeslotvlan", 15), ("showtotalnumberbytypeslotport", 16), ("showtotalnumberbytypeslotportvlan", 17), ("showtotalnumberbytypeslotvsi", 18), ("showtotalnumberbytypeslotportvsi", 19), ("showtotalnumberbytypeslotvsipw", 20), ("showcapacity", 21))))
if mibBuilder.loadTexts: hwMacInfoQueryConditionMode.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryConditionMode.setDescription('Mode for query condition of layer 2 dynamic mac-address query table.')
hwMacInfoQueryConditionStringA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwMacInfoQueryConditionStringA.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryConditionStringA.setDescription('String A (may be VSI or SI etc.) for query condition of layer 2 mac-address database.')
hwMacInfoQueryConditionStringB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: hwMacInfoQueryConditionStringB.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryConditionStringB.setDescription('String B (may be MAC or MAC type etc.) for query condition of layer 2 mac-address database.')
hwMacInfoQueryConditionStringC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwMacInfoQueryConditionStringC.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryConditionStringC.setDescription('String C (may be MAC tunnel etc.) for query condition of layer 2 mac-address database.')
hwMacInfoQueryConditionDigitA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 5), Unsigned32())
if mibBuilder.loadTexts: hwMacInfoQueryConditionDigitA.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryConditionDigitA.setDescription('Digit A (may be VLAN ID etc.) for query condition of layer 2 mac-address database.')
hwMacInfoQueryConditionDigitB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 6), Unsigned32())
if mibBuilder.loadTexts: hwMacInfoQueryConditionDigitB.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryConditionDigitB.setDescription('Digit B (may be IF index etc.) for query condition of layer 2 mac-address database.')
hwMacInfoQueryConditionDigitC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 7), Unsigned32())
if mibBuilder.loadTexts: hwMacInfoQueryConditionDigitC.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryConditionDigitC.setDescription('Digit C (other integer info) for query condition of layer 2 mac-address database.')
hwMacInfoQueryTotalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacInfoQueryTotalNumber.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryTotalNumber.setDescription('The total number for match condition of layer 2 mac-address database.')
hwMacInfoQueryTotalLocalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacInfoQueryTotalLocalNumber.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryTotalLocalNumber.setDescription('The total local number for match condition of layer 2 mac-address database.')
hwMacInfoQueryTotalRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacInfoQueryTotalRemoteNumber.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryTotalRemoteNumber.setDescription('The total remote number for match condition of layer 2 mac-address database.')
hwMacInfoQueryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 34, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacInfoQueryCapacity.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryCapacity.setDescription('The capacity for match condition of layer 2 mac-address database.')
hwVplsOverGreTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 35), )
if mibBuilder.loadTexts: hwVplsOverGreTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsOverGreTable.setDescription('A table containing the VPLS over GRE information for device.')
hwVplsOverGreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 35, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwVplsOverGrePwId"))
if mibBuilder.loadTexts: hwVplsOverGreEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsOverGreEntry.setDescription('Entries of the VPLS over GRE table.')
hwVplsOverGrePwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 35, 1, 1), Integer32())
if mibBuilder.loadTexts: hwVplsOverGrePwId.setStatus('current')
if mibBuilder.loadTexts: hwVplsOverGrePwId.setDescription('The PW ID which will be configured over GRE.')
hwRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 35, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRemoteIp.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIp.setDescription('The remote ip address of the PW ID.')
hwVplsOverGreVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 35, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVplsOverGreVsiName.setStatus('current')
if mibBuilder.loadTexts: hwVplsOverGreVsiName.setDescription('The vsi name which will be configured over GRE.')
hwVllByPassOverGreTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 36), )
if mibBuilder.loadTexts: hwVllByPassOverGreTable.setStatus('current')
if mibBuilder.loadTexts: hwVllByPassOverGreTable.setDescription('A table containing the ByPass PW for VLL over GRE information for device.')
hwVllByPassOverGreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 36, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwVLLACPortIndex"))
if mibBuilder.loadTexts: hwVllByPassOverGreEntry.setStatus('current')
if mibBuilder.loadTexts: hwVllByPassOverGreEntry.setDescription('Entries of the ByPass PW for VLL over GRE table.')
hwVLLACPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 36, 1, 1), Integer32())
if mibBuilder.loadTexts: hwVLLACPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwVLLACPortIndex.setDescription('The port index which will be configured ByPass for VLL.')
hwVLLACPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 36, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVLLACPortName.setStatus('current')
if mibBuilder.loadTexts: hwVLLACPortName.setDescription('The Port name which will be configured ByPass for VLL.')
hwUnucFlowAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 37), )
if mibBuilder.loadTexts: hwUnucFlowAlarmTable.setStatus('current')
if mibBuilder.loadTexts: hwUnucFlowAlarmTable.setDescription('A table containing the unknown unicast alarm information for interface.')
hwUnucFlowAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 37, 1), ).setIndexNames((0, "HUAWEI-L2MAM-MIB", "hwUNUCPortIndex"))
if mibBuilder.loadTexts: hwUnucFlowAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: hwUnucFlowAlarmEntry.setDescription('Entries of unknown unicast alarm information for interface table.')
hwUNUCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: hwUNUCPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwUNUCPortIndex.setDescription('The port index which will be configured unknown unicast alarm.')
hwUNUCPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 37, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUNUCPortName.setStatus('current')
if mibBuilder.loadTexts: hwUNUCPortName.setDescription('The Port name which will be configured unknown unicast alarm.')
hwUNUCPortAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 37, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUNUCPortAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwUNUCPortAlarmThreshold.setDescription('The port alarm threshold which will be configured unknown unicast alarm.')
hwUNUCPortRealFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 1, 37, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUNUCPortRealFlow.setStatus('current')
if mibBuilder.loadTexts: hwUNUCPortRealFlow.setDescription('The port real unuc flow.')
hwL2MAMConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2))
hwL2MAMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1))
hwL2MAMCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 2))
hwL2MAMCfgFdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 1)).setObjects(("HUAWEI-L2MAM-MIB", "hwCfgFdbPort"), ("HUAWEI-L2MAM-MIB", "hwCfgFdbType"), ("HUAWEI-L2MAM-MIB", "hwCfgFdbAtmPort"), ("HUAWEI-L2MAM-MIB", "hwCfgFdbVpi"), ("HUAWEI-L2MAM-MIB", "hwCfgFdbVci"), ("HUAWEI-L2MAM-MIB", "hwCfgFdbRowstatus"), ("HUAWEI-L2MAM-MIB", "hwCfgFdbCeDefault"), ("HUAWEI-L2MAM-MIB", "hwUntargetMacNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2MAMCfgFdbGroup = hwL2MAMCfgFdbGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2MAMCfgFdbGroup.setDescription('A collection of objects providing information about level 2 configured mac-address table.')
hwL2MAMDynFdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 2)).setObjects(("HUAWEI-L2MAM-MIB", "hwDynFdbPort"), ("HUAWEI-L2MAM-MIB", "hwDynFdbAtmPort"), ("HUAWEI-L2MAM-MIB", "hwDynFdbVpi"), ("HUAWEI-L2MAM-MIB", "hwDynFdbVci"), ("HUAWEI-L2MAM-MIB", "hwDynFdbRowstatus"), ("HUAWEI-L2MAM-MIB", "hwDynSecurityFdbToStaticEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2MAMDynFdbGroup = hwL2MAMDynFdbGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2MAMDynFdbGroup.setDescription('A collection of objects providing information about level 2 Dynamic mac-address table.')
hwL2MAMMacLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 3)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacLimitMaxMac"), ("HUAWEI-L2MAM-MIB", "hwMacLimitMaxRate"), ("HUAWEI-L2MAM-MIB", "hwMacLimitAction"), ("HUAWEI-L2MAM-MIB", "hwMacLimitAlarm"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRowstatus"), ("HUAWEI-L2MAM-MIB", "hwL2MaxMacLimit"), ("HUAWEI-L2MAM-MIB", "hwMacAddressLearn"), ("HUAWEI-L2MAM-MIB", "hwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacSecureAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleMaxMac"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleMaxRate"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleAction"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleAlarm"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleRowstatus"), ("HUAWEI-L2MAM-MIB", "hwMacRuleDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwMacLimitApplyRuleName"), ("HUAWEI-L2MAM-MIB", "hwMacLimitApplyRowstatus"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitMaxMac"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitMaxRate"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitAction"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitAlarm"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitRowstatus"), ("HUAWEI-L2MAM-MIB", "hwPwMacAddressLearn"), ("HUAWEI-L2MAM-MIB", "hwPwMacDynAddressLearnNum"), ("HUAWEI-L2MAM-MIB", "hwSlotMacLimitMaxMac"), ("HUAWEI-L2MAM-MIB", "hwSlotMacLimitMaxRate"), ("HUAWEI-L2MAM-MIB", "hwSlotMacLimitAction"), ("HUAWEI-L2MAM-MIB", "hwSlotMacLimitAlarm"), ("HUAWEI-L2MAM-MIB", "hwSlotMacLimitRowstatus"), ("HUAWEI-L2MAM-MIB", "hwBridgeMacAgingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2MAMMacLimitGroup = hwL2MAMMacLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2MAMMacLimitGroup.setDescription('A collection of objects providing information about mac-address limit rules.')
hwL2MAMMacUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 4)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacEntityUsage"), ("HUAWEI-L2MAM-MIB", "hwMacEntityUsageThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2MAMMacUsageGroup = hwL2MAMMacUsageGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2MAMMacUsageGroup.setDescription('A collection of objects providing information about mac-address usage.')
hwdbCfg3tupleFdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 5)).setObjects(("HUAWEI-L2MAM-MIB", "hwdbCfg3tupleFdbOutPort"), ("HUAWEI-L2MAM-MIB", "hwdbCfg3tupleFdbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwdbCfg3tupleFdbGroup = hwdbCfg3tupleFdbGroup.setStatus('current')
if mibBuilder.loadTexts: hwdbCfg3tupleFdbGroup.setDescription('A collection of objects providing information about level 2 configured 3-tuple mac-address table.')
hwL2MAMObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 6)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacAgingTime"), ("HUAWEI-L2MAM-MIB", "hwMacRestrict"), ("HUAWEI-L2MAM-MIB", "hwMacGlobalStatistics"), ("HUAWEI-L2MAM-MIB", "hwDiscardIllegalMacEnable"), ("HUAWEI-L2MAM-MIB", "hwDiscardIllegalMacAlarm"), ("HUAWEI-L2MAM-MIB", "hwMacSpoofingDefend"), ("HUAWEI-L2MAM-MIB", "hwMacflappingMac"), ("HUAWEI-L2MAM-MIB", "hwMacFlappingVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2MAMObjectsGroup = hwL2MAMObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2MAMObjectsGroup.setDescription('A collection of objects providing information about mac-address configuration.')
hwPortSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 7)).setObjects(("HUAWEI-L2MAM-MIB", "hwPortSecurityEnabled"), ("HUAWEI-L2MAM-MIB", "hwPortSecurityProtectAction"), ("HUAWEI-L2MAM-MIB", "hwPortSecurityAllDynToStaticEnable"), ("HUAWEI-L2MAM-MIB", "hwPortSecurityAllDynToStickyEnable"), ("HUAWEI-L2MAM-MIB", "hwPortSecurityMaxMacNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortSecurityGroup = hwPortSecurityGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortSecurityGroup.setDescription('A table containing the port security information for device. It can protect the port from unaccessible mac.')
hwMacIfStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 8)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacIfStatistics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacIfStatisticsGroup = hwMacIfStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacIfStatisticsGroup.setDescription('A collection of objects providing information about mac-address statistics by interface index.')
hwMacSlotStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 9)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacSlotStatistics"), ("HUAWEI-L2MAM-MIB", "hwMacSlotStatisticsSpecify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacSlotStatisticsGroup = hwMacSlotStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacSlotStatisticsGroup.setDescription('A collection of objects providing information about mac-address statistics by slot ID.')
hwMacVlanStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 10)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacVlanStatistics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacVlanStatisticsGroup = hwMacVlanStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacVlanStatisticsGroup.setDescription('A collection of objects providing information about mac-address statistics by VLAN ID.')
hwMacVsiStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 11)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacVsiStatistics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacVsiStatisticsGroup = hwMacVsiStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacVsiStatisticsGroup.setDescription('A collection of objects providing information about mac-address statistics by VSI name.')
hwMacSpoofingDefendGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 12)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacSpoofingDefendEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacSpoofingDefendGroup = hwMacSpoofingDefendGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacSpoofingDefendGroup.setDescription('A collection of objects providing information about MAC spoofing defend.')
hwL2ProtocolTunnelTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 13)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapPortName"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapProtocolName"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelTrapDropThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2ProtocolTunnelTrapGroup = hwL2ProtocolTunnelTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtocolTunnelTrapGroup.setDescription('A collection of items of objects information of L2 Protocol Tunnel Trap notify.')
hwL2ProtclTnlStdProtclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 14)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStdProtclMacAddr"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStdEncapType"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStdProtclType"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStdGroupMacAddr"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStdGroupDefault"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStdPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2ProtclTnlStdProtclGroup = hwL2ProtclTnlStdProtclGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStdProtclGroup.setDescription('A collection of items of configuration table of standard L2 protocol tunnel.')
hwL2ProtclTnlCusProtclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 15)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusProtclMacAddr"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusEncapType"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusProtclType"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusGroupMacAddr"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusGroupDefault"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusPriority"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlCusRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2ProtclTnlCusProtclGroup = hwL2ProtclTnlCusProtclGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlCusProtclGroup.setDescription('A collection of items of configuration table of customize L2 protocol tunnel.')
hwL2ProtclTnlEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 16)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlEnableTransMode"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlEnableTagListLow"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlEnableTagListHigh"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlEnableDropthresholdRate"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlEnableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2ProtclTnlEnableGroup = hwL2ProtclTnlEnableGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlEnableGroup.setDescription('A collection of items of port configuration of L2 protocol tunnel.')
hwL2ProtclTnlStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 17)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStatisticsDropthrhldRate"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStatisticsInputPkts"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStatisticsOutputPkts"), ("HUAWEI-L2MAM-MIB", "hwL2ProtclTnlStatisticsDropPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2ProtclTnlStatisticsGroup = hwL2ProtclTnlStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2ProtclTnlStatisticsGroup.setDescription('A collection of items of port statistics of L2 protocol tunnel.')
hwCfgMacAddrQueryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 18)).setObjects(("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryType"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryIfIndex"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryPeVlanId"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryCeVlanId"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryCedefaultFlag"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryAtmIfIndex"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryVpi"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryVci"), ("HUAWEI-L2MAM-MIB", "hwCfgMacAddrQueryMacTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCfgMacAddrQueryTableGroup = hwCfgMacAddrQueryTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwCfgMacAddrQueryTableGroup.setDescription('A collection of items of layer 2 Configured mac-address query table.')
hwDynMacAddrQueryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 19)).setObjects(("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryType"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryIfIndex"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryPeVlanId"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryCeVlanId"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryAtmIfIndex"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryVpi"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryVci"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryPeerIp"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryPwId"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryMacTunnel"), ("HUAWEI-L2MAM-MIB", "hwDynMacAddrQueryAgingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDynMacAddrQueryTableGroup = hwDynMacAddrQueryTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwDynMacAddrQueryTableGroup.setDescription('A collection of items of layer 2 dynamic mac-address query table.')
hwMacInfoQueryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 1, 20)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacInfoQueryTotalNumber"), ("HUAWEI-L2MAM-MIB", "hwMacInfoQueryTotalLocalNumber"), ("HUAWEI-L2MAM-MIB", "hwMacInfoQueryTotalRemoteNumber"), ("HUAWEI-L2MAM-MIB", "hwMacInfoQueryCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacInfoQueryTableGroup = hwMacInfoQueryTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacInfoQueryTableGroup.setDescription('A collection of items of layer 2 mac-address database query.')
hwL2MAMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 2, 1)).setObjects(("HUAWEI-L2MAM-MIB", "hwL2MAMCfgFdbGroup"), ("HUAWEI-L2MAM-MIB", "hwL2MAMDynFdbGroup"), ("HUAWEI-L2MAM-MIB", "hwL2MAMMacLimitGroup"), ("HUAWEI-L2MAM-MIB", "hwL2MAMMacUsageGroup"), ("HUAWEI-L2MAM-MIB", "hwdbCfg3tupleFdbGroup"), ("HUAWEI-L2MAM-MIB", "hwMacIfStatisticsGroup"), ("HUAWEI-L2MAM-MIB", "hwMacSlotStatisticsGroup"), ("HUAWEI-L2MAM-MIB", "hwMacVlanStatisticsGroup"), ("HUAWEI-L2MAM-MIB", "hwMacVsiStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2MAMCompliance = hwL2MAMCompliance.setStatus('current')
if mibBuilder.loadTexts: hwL2MAMCompliance.setDescription('The compliance statement for device support of Level 2 Mac-address management.')
hwL2MACTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 3))
hwBaseTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 2, 2, 3, 2)).setObjects(("HUAWEI-L2MAM-MIB", "hwMacUsageRaisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwMacUsageFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwMacLimitNumRaisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwMacLimitNumFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwUntargetMacNumAlarm"), ("HUAWEI-L2MAM-MIB", "hwPortSecRcvInsecurePktAlarm"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitNumRaisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwPwMacLimitNumFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwPortStickyReachMaxAlarm"), ("HUAWEI-L2MAM-MIB", "hwRecIllegalMacPktAlarm"), ("HUAWEI-L2MAM-MIB", "hwMacLimitOverThresholdAlarm"), ("HUAWEI-L2MAM-MIB", "hwMacFlappingAlarm"), ("HUAWEI-L2MAM-MIB", "hwSlotMacLimitNumRaisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwSlotMacLimitNumFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelDropThresholdRaising"), ("HUAWEI-L2MAM-MIB", "hwL2ProtocolTunnelDropThresholdFalling"), ("HUAWEI-L2MAM-MIB", "hwVsiMacLimitNumRaisingThresholdAlarm"), ("HUAWEI-L2MAM-MIB", "hwVsiMacLimitNumRaisingThresholdAlarmClear"), ("HUAWEI-L2MAM-MIB", "hwMacLimitOverThresholdAlarmResume"), ("HUAWEI-L2MAM-MIB", "hwSlotMacNumRaisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwSlotMacNumFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleNumRaisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwMacLimitRuleNumFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwVplsOverGRENotSupportForwardRising"), ("HUAWEI-L2MAM-MIB", "hwVplsOverGRENotSupportForwardRisingResume"), ("HUAWEI-L2MAM-MIB", "hwIfInputUnucFlowRisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwIfInputUnucFlowFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwMacHopAlarmRisingThreshold"), ("HUAWEI-L2MAM-MIB", "hwMacHopAlarmFallingThreshold"), ("HUAWEI-L2MAM-MIB", "hwPstBroadcastLostAlarm"), ("HUAWEI-L2MAM-MIB", "hwPstBroadcastLostResume"), ("HUAWEI-L2MAM-MIB", "hwBdMacLimitOverThresholdAlarm"), ("HUAWEI-L2MAM-MIB", "hwBdMacLimitOverThresholdAlarmResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBaseTrapGroup = hwBaseTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapGroup.setDescription('L2 MAC tap group.')
mibBuilder.exportSymbols("HUAWEI-L2MAM-MIB", hwBdMacLimitOverThresholdAlarm=hwBdMacLimitOverThresholdAlarm, hwPwMacLimitMaxMac=hwPwMacLimitMaxMac, hwMacSlotStatisticsTable=hwMacSlotStatisticsTable, hwCfgMacAddrQueryMacAddr=hwCfgMacAddrQueryMacAddr, hwPortSecurityMaxMacNum=hwPortSecurityMaxMacNum, hwMacVsiStatisticsEntry=hwMacVsiStatisticsEntry, hwDynMacAddrQueryConditionStringB=hwDynMacAddrQueryConditionStringB, hwCfgMacAddrQueryMacTunnel=hwCfgMacAddrQueryMacTunnel, hwL2ProtocolTunnelTrapGroup=hwL2ProtocolTunnelTrapGroup, hwdbCfg3tupleFdbGroup=hwdbCfg3tupleFdbGroup, hwCfgFdbMac=hwCfgFdbMac, hwSlotMacLimitMaxRate=hwSlotMacLimitMaxRate, hwCfgFdbAtmPort=hwCfgFdbAtmPort, hwDynMacAddrQueryBridgeId=hwDynMacAddrQueryBridgeId, hwPwMacSpoofingAttackMacAddr=hwPwMacSpoofingAttackMacAddr, hwMacInfoQueryEntry=hwMacInfoQueryEntry, hwL2ProtclTnlStdProtclGroup=hwL2ProtclTnlStdProtclGroup, hwMacIfStatisticsGroup=hwMacIfStatisticsGroup, hwSlotMacNumFallingThreshold=hwSlotMacNumFallingThreshold, hwMacLimitPort=hwMacLimitPort, hwL2MAMObjectsGroup=hwL2MAMObjectsGroup, hwL2ProtclTnlStdProtclName=hwL2ProtclTnlStdProtclName, hwCfgMacAddrQueryConditionStringB=hwCfgMacAddrQueryConditionStringB, hwCfgMacAddrQueryTableGroup=hwCfgMacAddrQueryTableGroup, hwMacSecureAddressLearnNum=hwMacSecureAddressLearnNum, hwUnucFlowAlarmTable=hwUnucFlowAlarmTable, hwVllByPassOverGreTable=hwVllByPassOverGreTable, hwMacRestrict=hwMacRestrict, hwMacAddressLearn=hwMacAddressLearn, hwMacInfoQueryTable=hwMacInfoQueryTable, hwMacInfoQueryCapacity=hwMacInfoQueryCapacity, hwDynFdbAtmPort=hwDynFdbAtmPort, hwDynMacAddrQueryVlanId=hwDynMacAddrQueryVlanId, hwL2MAMMacLimitGroup=hwL2MAMMacLimitGroup, hwPortSecurityAllDynToStickyEnable=hwPortSecurityAllDynToStickyEnable, hwMacSlotStatistics=hwMacSlotStatistics, hwMacSlotStatisticsSpecify=hwMacSlotStatisticsSpecify, hwUntargetMacNumAlarm=hwUntargetMacNumAlarm, hwL2MAM=hwL2MAM, hwMacLimitApplyPort=hwMacLimitApplyPort, hwMacLimitRuleMaxMac=hwMacLimitRuleMaxMac, hwDynMacAddrQueryEntry=hwDynMacAddrQueryEntry, hwDynMacAddrQueryAtmIfIndex=hwDynMacAddrQueryAtmIfIndex, hwMacHopVlan=hwMacHopVlan, hwL2ProtclTnlStatisticsOutputPkts=hwL2ProtclTnlStatisticsOutputPkts, hwDynMacAddrQueryConditionMode=hwDynMacAddrQueryConditionMode, hwL2ProtclTnlStatisticsProtclName=hwL2ProtclTnlStatisticsProtclName, hwL2ProtclTnlCusEncapType=hwL2ProtclTnlCusEncapType, hwSlotMacLimitMaxMac=hwSlotMacLimitMaxMac, hwCfgMacAddrQueryConditionMode=hwCfgMacAddrQueryConditionMode, hwDynMacAddrQueryVsiName=hwDynMacAddrQueryVsiName, hwdbCfgFdbEntry=hwdbCfgFdbEntry, hwMacHopAlarmEntry=hwMacHopAlarmEntry, hwPortSecurityEnabled=hwPortSecurityEnabled, hwSlotMacNumRaisingThreshold=hwSlotMacNumRaisingThreshold, hwMacInfoQueryTotalNumber=hwMacInfoQueryTotalNumber, hwCfgMacAddrQueryVci=hwCfgMacAddrQueryVci, hwL2ProtocolTunnelDropThresholdRaising=hwL2ProtocolTunnelDropThresholdRaising, hwMacLimitAlarm=hwMacLimitAlarm, hwPwMacLimitRowstatus=hwPwMacLimitRowstatus, hwDynMacAddrQueryConditionDigitA=hwDynMacAddrQueryConditionDigitA, hwdbCfg3tupleFdbVlanId=hwdbCfg3tupleFdbVlanId, hwdbCfg3tupleFdbInPort=hwdbCfg3tupleFdbInPort, hwCfgMacAddrQueryBridgeId=hwCfgMacAddrQueryBridgeId, hwMacEntityUsage=hwMacEntityUsage, hwL2ProtclTnlStatisticsInputPkts=hwL2ProtclTnlStatisticsInputPkts, hwPortStickyReachMaxAlarm=hwPortStickyReachMaxAlarm, hwPwMacLimitAction=hwPwMacLimitAction, hwL2ProtclTnlCusTable=hwL2ProtclTnlCusTable, hwdbDynFdbEntry=hwdbDynFdbEntry, hwMacAgingTime=hwMacAgingTime, hwSlotMacLimitAlarm=hwSlotMacLimitAlarm, hwL2ProtclTnlStatisticsIfIndex=hwL2ProtclTnlStatisticsIfIndex, hwCfgMacAddrQueryConditionDigitC=hwCfgMacAddrQueryConditionDigitC, hwVplsOverGreEntry=hwVplsOverGreEntry, hwCfgFdbVci=hwCfgFdbVci, hwL2ProtclTnlCusEntry=hwL2ProtclTnlCusEntry, hwL2ProtocolTunnelTrapPortName=hwL2ProtocolTunnelTrapPortName, hwMacVlanStatisticsGroup=hwMacVlanStatisticsGroup, hwdbDynFdbTable=hwdbDynFdbTable, hwBdMacLimitBdId=hwBdMacLimitBdId, hwPortSecurityAllDynToStaticEnable=hwPortSecurityAllDynToStaticEnable, hwPortSecurityEntry=hwPortSecurityEntry, hwMacLimitApplyRuleTable=hwMacLimitApplyRuleTable, hwL2MacFlappingTrapObjects=hwL2MacFlappingTrapObjects, hwL2MAMCompliances=hwL2MAMCompliances, hwPwMacLimitEntry=hwPwMacLimitEntry, VlanIndex=VlanIndex, hwMacLimitMaxMac=hwMacLimitMaxMac, hwCfgMacAddrQueryCedefaultFlag=hwCfgMacAddrQueryCedefaultFlag, hwBdMacLimitOverThresholdAlarmResume=hwBdMacLimitOverThresholdAlarmResume, hwVllByPassOverGreEntry=hwVllByPassOverGreEntry, hwMacLimitOverThresholdAlarmResume=hwMacLimitOverThresholdAlarmResume, hwCfgFdbPort=hwCfgFdbPort, hwCfgMacAddrQueryConditionDigitA=hwCfgMacAddrQueryConditionDigitA, hwL2MAMConformance=hwL2MAMConformance, hwMacSlotStatisticsGroup=hwMacSlotStatisticsGroup, hwDynMacAddrQueryPwId=hwDynMacAddrQueryPwId, hwVplsOverGreVsiName=hwVplsOverGreVsiName, hwMacLimitApplyVlanId=hwMacLimitApplyVlanId, hwCfgFdbVpi=hwCfgFdbVpi, hwDynFdbVci=hwDynFdbVci, hwMacLimitApplyRowstatus=hwMacLimitApplyRowstatus, hwMacSlotStatisticsEntry=hwMacSlotStatisticsEntry, hwMacIfStatistics=hwMacIfStatistics, hwMacHopPWInfo=hwMacHopPWInfo, hwPwMacSpoofingAttackAlarmClear=hwPwMacSpoofingAttackAlarmClear, hwIfInputUnucFlowRisingThreshold=hwIfInputUnucFlowRisingThreshold, hwdbCfg3tupleFdbRowStatus=hwdbCfg3tupleFdbRowStatus, hwPwMacLimitNumRaisingThreshold=hwPwMacLimitNumRaisingThreshold, hwMacVsiStatistics=hwMacVsiStatistics, hwL2ProtclTnlStdEntry=hwL2ProtclTnlStdEntry, hwMacHopPortName1=hwMacHopPortName1, hwL2MacTraps=hwL2MacTraps, hwMacLimitApplyRuleName=hwMacLimitApplyRuleName, hwMacLimitEntry=hwMacLimitEntry, hwMacVlanStatistics=hwMacVlanStatistics, hwSlotMacLimitNumRaisingThreshold=hwSlotMacLimitNumRaisingThreshold, hwPwMacLimitVsiName=hwPwMacLimitVsiName, hwdbCfg3tupleFdbTable=hwdbCfg3tupleFdbTable, hwMacSpoofingDefendGroup=hwMacSpoofingDefendGroup, hwCfgMacAddrQueryEntry=hwCfgMacAddrQueryEntry, hwCfgMacAddrQueryTable=hwCfgMacAddrQueryTable, hwL2ProtocolTunnelTrapProtocolName=hwL2ProtocolTunnelTrapProtocolName, hwL2MAMMacUsageGroup=hwL2MAMMacUsageGroup, hwDynMacAddrQueryConditionDigitB=hwDynMacAddrQueryConditionDigitB, hwL2ProtclTnlCusProtclMacAddr=hwL2ProtclTnlCusProtclMacAddr, hwMacInfoQueryTotalLocalNumber=hwMacInfoQueryTotalLocalNumber, hwL2MaxMacLimit=hwL2MaxMacLimit, hwDynMacAddrQueryConditionDigitC=hwDynMacAddrQueryConditionDigitC, hwDynMacAddrQueryPeerIp=hwDynMacAddrQueryPeerIp, hwMacInfoQueryTableGroup=hwMacInfoQueryTableGroup, hwL2MAMCompliance=hwL2MAMCompliance, hwL2MACTrapGroups=hwL2MACTrapGroups, hwPwMacAddressLearn=hwPwMacAddressLearn, hwIfInputUnucFlowFallingThreshold=hwIfInputUnucFlowFallingThreshold, hwCfgFdbRowstatus=hwCfgFdbRowstatus, hwBridgeMacAgingTime=hwBridgeMacAgingTime, hwMacInfoQueryConditionStringA=hwMacInfoQueryConditionStringA, hwBdMacLimitMaxMac=hwBdMacLimitMaxMac, hwDynMacAddrQueryMacTunnel=hwDynMacAddrQueryMacTunnel, hwCfgMacAddrQueryVlanId=hwCfgMacAddrQueryVlanId, hwL2ProtocolTunnelDropThresholdFalling=hwL2ProtocolTunnelDropThresholdFalling, hwDynMacAddrQueryAgingTime=hwDynMacAddrQueryAgingTime, hwCfgMacAddrQueryCeVlanId=hwCfgMacAddrQueryCeVlanId, hwPortSecurityGroup=hwPortSecurityGroup, hwDynFdbRowstatus=hwDynFdbRowstatus, hwSlotMacLimitAction=hwSlotMacLimitAction, hwVplsOverGRENotSupportForwardRising=hwVplsOverGRENotSupportForwardRising, hwL2ProtocolTunnelTrapObjects=hwL2ProtocolTunnelTrapObjects, hwL2ProtclTnlStatisticsDropPkts=hwL2ProtclTnlStatisticsDropPkts, hwCfgMacAddrQueryAtmIfIndex=hwCfgMacAddrQueryAtmIfIndex, hwVLLACPortName=hwVLLACPortName, hwVsiMacLimitNumRaisingThresholdAlarmClear=hwVsiMacLimitNumRaisingThresholdAlarmClear, hwRemoteIp=hwRemoteIp, hwMacVlanStatisticsEntry=hwMacVlanStatisticsEntry, hwDynMacAddrQueryCeVlanId=hwDynMacAddrQueryCeVlanId, hwMacLimitMaxRate=hwMacLimitMaxRate, hwMacLimitNumRaisingThreshold=hwMacLimitNumRaisingThreshold, hwMacUsageFallingThreshold=hwMacUsageFallingThreshold, hwL2ProtocolTunnelTrapDropThreshold=hwL2ProtocolTunnelTrapDropThreshold, hwCfgFdbType=hwCfgFdbType, hwMacLimitRuleNumRaisingThreshold=hwMacLimitRuleNumRaisingThreshold, hwDynFdbVlanId=hwDynFdbVlanId, hwMacInfoQueryConditionDigitC=hwMacInfoQueryConditionDigitC, hwMacLimitRuleAlarm=hwMacLimitRuleAlarm, hwMacLimitAction=hwMacLimitAction, hwMacRuleDynAddressLearnNum=hwMacRuleDynAddressLearnNum, hwDynMacAddrQueryVci=hwDynMacAddrQueryVci, hwVsiMacLimitNumRaisingThresholdAlarm=hwVsiMacLimitNumRaisingThresholdAlarm, hwPwMacLimitTable=hwPwMacLimitTable, hwDynFdbVsiName=hwDynFdbVsiName, hwMacVlanStatisticsVlanId=hwMacVlanStatisticsVlanId, hwL2MAMGroups=hwL2MAMGroups, hwL2ProtclTnlEnableRowStatus=hwL2ProtclTnlEnableRowStatus, hwMacFlappingVlan=hwMacFlappingVlan, hwMacHopPortName4=hwMacHopPortName4, hwL2ProtclTnlStdGroupDefault=hwL2ProtclTnlStdGroupDefault, hwL2ProtclTnlStdPriority=hwL2ProtclTnlStdPriority, hwL2ProtclTnlCusPriority=hwL2ProtclTnlCusPriority, hwMacDynAddressLearnNum=hwMacDynAddressLearnNum, hwSlotMacLimitTable=hwSlotMacLimitTable, hwMacSpoofingDefend=hwMacSpoofingDefend, hwdbCfg3tupleFdbEntry=hwdbCfg3tupleFdbEntry, PYSNMP_MODULE_ID=hwL2MAM, hwMacInfoQueryConditionDigitA=hwMacInfoQueryConditionDigitA, hwSlotMacLimitRowstatus=hwSlotMacLimitRowstatus, hwPortSecurityProtectAction=hwPortSecurityProtectAction, hwMacLimitRuleAction=hwMacLimitRuleAction, hwL2MAMCfgFdbGroup=hwL2MAMCfgFdbGroup, hwL2ProtclTnlStatisticsGroup=hwL2ProtclTnlStatisticsGroup, hwL2ProtclTnlStdEncapType=hwL2ProtclTnlStdEncapType, hwDynMacAddrQueryConditionStringA=hwDynMacAddrQueryConditionStringA, hwdbCfgFdbTable=hwdbCfgFdbTable, hwPortSecurityPort=hwPortSecurityPort, hwMacUsageRaisingThreshold=hwMacUsageRaisingThreshold, hwMacHopBdID=hwMacHopBdID, hwSlotMacLimitId=hwSlotMacLimitId, hwL2ProtclTnlEnableTagListHigh=hwL2ProtclTnlEnableTagListHigh, hwPortSecRcvInsecurePktAlarm=hwPortSecRcvInsecurePktAlarm, hwCfgMacAddrQueryVpi=hwCfgMacAddrQueryVpi, hwPwMacLimitPwName=hwPwMacLimitPwName, hwMacIfStatisticsIfIndex=hwMacIfStatisticsIfIndex, hwDynFdbVpi=hwDynFdbVpi, hwCfgMacAddrQueryConditionStringA=hwCfgMacAddrQueryConditionStringA, hwL2ProtclTnlStatisticsDropthrhldRate=hwL2ProtclTnlStatisticsDropthrhldRate, hwUNUCPortName=hwUNUCPortName, hwDiscardIllegalMacEnable=hwDiscardIllegalMacEnable, hwDynMacAddrQueryVpi=hwDynMacAddrQueryVpi, hwdbCfg3tupleFdbOutPort=hwdbCfg3tupleFdbOutPort, hwSlotMacLimitEntry=hwSlotMacLimitEntry, hwCfgFdbCeDefault=hwCfgFdbCeDefault, hwMacHopPortName3=hwMacHopPortName3, hwMacInfoQueryTotalRemoteNumber=hwMacInfoQueryTotalRemoteNumber, hwMacLimitRowstatus=hwMacLimitRowstatus, hwVplsOverGreTable=hwVplsOverGreTable, hwBaseTrapGroup=hwBaseTrapGroup, hwDynMacAddrQueryMacAddr=hwDynMacAddrQueryMacAddr, hwL2ProtclTnlEnableGroup=hwL2ProtclTnlEnableGroup, hwMacflappingMac=hwMacflappingMac, hwDynMacAddrQueryTable=hwDynMacAddrQueryTable, hwL2ProtclTnlStdGroupMacAddr=hwL2ProtclTnlStdGroupMacAddr, hwVplsOverGRENotSupportForwardRisingResume=hwVplsOverGRENotSupportForwardRisingResume, hwUntargetMacNum=hwUntargetMacNum, hwSlotMacLimitNumFallingThreshold=hwSlotMacLimitNumFallingThreshold, hwL2ProtclTnlStdTable=hwL2ProtclTnlStdTable, hwMacLimitTable=hwMacLimitTable, hwMacVsiStatisticsTable=hwMacVsiStatisticsTable, hwMacUsageEntry=hwMacUsageEntry, hwMacHopVsiName=hwMacHopVsiName, hwL2ProtclTnlEnableDropthresholdRate=hwL2ProtclTnlEnableDropthresholdRate, hwMacInfoQueryConditionDigitB=hwMacInfoQueryConditionDigitB, hwMacLimitGlobalRuleEntry=hwMacLimitGlobalRuleEntry, hwMacSpoofingDefendEnabled=hwMacSpoofingDefendEnabled, hwMacInfoQueryConditionStringC=hwMacInfoQueryConditionStringC, hwDynMacAddrQueryType=hwDynMacAddrQueryType, hwMacLimitVsiName=hwMacLimitVsiName, hwL2ProtclTnlEnableEntry=hwL2ProtclTnlEnableEntry, hwMacInfoQueryConditionStringB=hwMacInfoQueryConditionStringB, hwMacLimitRuleNumFallingThreshold=hwMacLimitRuleNumFallingThreshold, hwMacUsageTable=hwMacUsageTable, hwdbCfg3tupleFdbMac=hwdbCfg3tupleFdbMac, hwDynMacAddrQueryPeVlanId=hwDynMacAddrQueryPeVlanId, hwMacSpoofingDefendPort=hwMacSpoofingDefendPort, hwL2ProtclTnlEnableProtclName=hwL2ProtclTnlEnableProtclName, hwVLLACPortIndex=hwVLLACPortIndex, hwL2ProtclTnlCusProtclGroup=hwL2ProtclTnlCusProtclGroup, hwL2Mgmt=hwL2Mgmt, hwMacLimitNumFallingThreshold=hwMacLimitNumFallingThreshold, hwUNUCPortIndex=hwUNUCPortIndex, hwVplsOverGrePwId=hwVplsOverGrePwId, hwL2ProtclTnlEnableIfIndex=hwL2ProtclTnlEnableIfIndex, hwMacFlappingAlarm=hwMacFlappingAlarm, hwMacLimitApplyRuleEntry=hwMacLimitApplyRuleEntry)
mibBuilder.exportSymbols("HUAWEI-L2MAM-MIB", hwMacSpoofingDefendTable=hwMacSpoofingDefendTable, hwCfgMacAddrQuerySiName=hwCfgMacAddrQuerySiName, hwMacSpoofingDefendEntry=hwMacSpoofingDefendEntry, hwCfgFdbVlanId=hwCfgFdbVlanId, hwL2ProtclTnlStdProtclMacAddr=hwL2ProtclTnlStdProtclMacAddr, hwMacLimitVlanId=hwMacLimitVlanId, hwDynSecurityFdbToStaticEnable=hwDynSecurityFdbToStaticEnable, hwMacVlanStatisticsTable=hwMacVlanStatisticsTable, hwDynMacAddrQuerySiName=hwDynMacAddrQuerySiName, hwRecIllegalMacPktAlarm=hwRecIllegalMacPktAlarm, hwL2ProtclTnlStdProtclType=hwL2ProtclTnlStdProtclType, hwCfgMacAddrQueryVsiName=hwCfgMacAddrQueryVsiName, hwL2ProtclTnlEnableTagListLow=hwL2ProtclTnlEnableTagListLow, hwMacSlotStatisticsSlotId=hwMacSlotStatisticsSlotId, hwL2ProtclTnlEnableTable=hwL2ProtclTnlEnableTable, hwL2ProtclTnlEnableTransMode=hwL2ProtclTnlEnableTransMode, hwMacHopAlarmFallingThreshold=hwMacHopAlarmFallingThreshold, hwMacLimitRuleMaxRate=hwMacLimitRuleMaxRate, hwUnucFlowAlarmEntry=hwUnucFlowAlarmEntry, hwMacGlobalStatistics=hwMacGlobalStatistics, hwMacHopAlarmTable=hwMacHopAlarmTable, hwMacLimitGlobalRuleTable=hwMacLimitGlobalRuleTable, hwPstBroadcastLostAlarm=hwPstBroadcastLostAlarm, hwUNUCPortAlarmThreshold=hwUNUCPortAlarmThreshold, hwL2MAMDynFdbGroup=hwL2MAMDynFdbGroup, hwMacInfoQueryConditionMode=hwMacInfoQueryConditionMode, hwCfgMacAddrQueryType=hwCfgMacAddrQueryType, hwPstBroadcastLostResume=hwPstBroadcastLostResume, hwL2ProtclTnlCusRowStatus=hwL2ProtclTnlCusRowStatus, hwCfgMacAddrQueryConditionDigitB=hwCfgMacAddrQueryConditionDigitB, hwDynMacAddrQueryTableGroup=hwDynMacAddrQueryTableGroup, hwMacVsiStatisticsGroup=hwMacVsiStatisticsGroup, hwMacIfStatisticsTable=hwMacIfStatisticsTable, hwUNUCPortRealFlow=hwUNUCPortRealFlow, hwL2MAMObjects=hwL2MAMObjects, hwCfgFdbVsiName=hwCfgFdbVsiName, hwPortSecurityTable=hwPortSecurityTable, hwDynMacAddrQueryIfIndex=hwDynMacAddrQueryIfIndex, hwL2ProtclTnlCusGroupMacAddr=hwL2ProtclTnlCusGroupMacAddr, hwL2ProtclTnlCusGroupDefault=hwL2ProtclTnlCusGroupDefault, hwL2ProtclTnlCusProtclName=hwL2ProtclTnlCusProtclName, hwCfgMacAddrQueryIfIndex=hwCfgMacAddrQueryIfIndex, hwL2ProtclTnlCusProtclType=hwL2ProtclTnlCusProtclType, hwMacLimitGlobalRuleName=hwMacLimitGlobalRuleName, hwDynFdbPort=hwDynFdbPort, hwMacLimitRuleRowstatus=hwMacLimitRuleRowstatus, hwMacIfStatisticsEntry=hwMacIfStatisticsEntry, hwPwMacLimitAlarm=hwPwMacLimitAlarm, hwMacHopAlarmRisingThreshold=hwMacHopAlarmRisingThreshold, hwDiscardIllegalMacAlarm=hwDiscardIllegalMacAlarm, hwPwMacDynAddressLearnNum=hwPwMacDynAddressLearnNum, hwPwMacLimitMaxRate=hwPwMacLimitMaxRate, hwL2ProtclTnlStatisticsTable=hwL2ProtclTnlStatisticsTable, hwPwMacSpoofingAttackAlarm=hwPwMacSpoofingAttackAlarm, hwL2ProtclTnlStatisticsEntry=hwL2ProtclTnlStatisticsEntry, hwDynFdbMac=hwDynFdbMac, hwMacVsiStatisticsVsiName=hwMacVsiStatisticsVsiName, hwMacLimitOverThresholdAlarm=hwMacLimitOverThresholdAlarm, hwMacHopPortName2=hwMacHopPortName2, hwMacEntityUsageThreshold=hwMacEntityUsageThreshold, hwPwMacLimitNumFallingThreshold=hwPwMacLimitNumFallingThreshold, hwCfgMacAddrQueryPeVlanId=hwCfgMacAddrQueryPeVlanId)
