#
# PySNMP MIB module DOCS-SUBMGT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-SUBMGT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:53:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
docsIfCmtsCmStatusEntry, docsIfCmtsCmStatusIndex = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusEntry", "docsIfCmtsCmStatusIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, TimeTicks, iso, Unsigned32, MibIdentifier, ModuleIdentity, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ObjectIdentity, experimental, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "iso", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ObjectIdentity", "experimental", "NotificationType", "Integer32")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
docsSubMgt = ModuleIdentity((1, 3, 6, 1, 3, 83, 4))
if mibBuilder.loadTexts: docsSubMgt.setLastUpdated('200503220000Z')
if mibBuilder.loadTexts: docsSubMgt.setOrganization('IETF IPCDN Working Group')
if mibBuilder.loadTexts: docsSubMgt.setContactInfo(' Wilson Sawyer Postal: Arris Interactive 6 Riverside Drive Andover, MA 01810 U.S.A. Phone: +1 978 946 4711 E-mail: wsawyer@ieee.org')
if mibBuilder.loadTexts: docsSubMgt.setDescription('This is the CMTS centric subscriber management MIB for DOCSIS compliant CMTS. This will be rooted in experimental space with a future transition to be incorporated into the cable device MIB.')
docsSubMgtObjects = MibIdentifier((1, 3, 6, 1, 3, 83, 4, 1))
class IpV4orV6Addr(TextualConvention, OctetString):
    description = 'An IP V4 or V6 address expressed as an octet string. The zero length string is equal to both 0.0.0.0 and the IPv6 :0 address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
docsSubMgtCpeControlTable = MibTable((1, 3, 6, 1, 3, 83, 4, 1, 1), )
if mibBuilder.loadTexts: docsSubMgtCpeControlTable.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeControlTable.setDescription('This table extends the docsIfCmtsCmStatusTable and adds 4 objects which reflect the state of subscriber management on a particular CM.')
docsSubMgtCpeControlEntry = MibTableRow((1, 3, 6, 1, 3, 83, 4, 1, 1, 1), )
docsIfCmtsCmStatusEntry.registerAugmentions(("DOCS-SUBMGT-MIB", "docsSubMgtCpeControlEntry"))
docsSubMgtCpeControlEntry.setIndexNames(*docsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: docsSubMgtCpeControlEntry.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeControlEntry.setDescription('A row in the docsSubMgtCpeControlTable. All the values are either set from the system default, or are set from objects included in the DOCSIS registration request sent upstream to the CMTS from the CM.')
docsSubMgtCpeControlMaxCpeIp = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCpeControlMaxCpeIp.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeControlMaxCpeIp.setDescription('The number of simultaneous IP addresses permitted behind the CM. If this is set to zero, all CPE traffic from the CM is dropped. If the provisioning object corresponding to docsSubMgtCpeIpTable includes more CPE IP address entries for this modem than the value of this object, then this object is set to the count of the number of rows in docsSubMgtCpeIpTable that have the same docsIfCmtsCmStatusIndex value. (E.g. if the CM has 5 IP addresses specified for it, this value is 5). This limit applies to learned and docsis-provisioned entries, but does not limit entries added through some administrative process at the CMTS. If not set through DOCSIS provisioning, this object defaults to docsSubMgtCpeMaxIpDefault. Note that this object is only meaningful if docsSubMgtCpeControlActive is true.')
docsSubMgtCpeControlActive = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCpeControlActive.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeControlActive.setDescription('If this is set to true, CMTS based CPE control is active and all the actions required by the various filter tables and controls apply at the CMTS. If this is set to false, no subscriber management filtering is done at the CMTS (but other filters may apply). If not set through DOCSIS provisioning, this object defaults to docsSubMgtCpeActiveDefault.')
docsSubMgtCpeControlLearnable = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCpeControlLearnable.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeControlLearnable.setDescription('If this is set to true, the CMTS may learn up to docsSubMgtMaxCpeIp addresses (less any DOCSIS-provisioned entries) related to this CM. Those IP addresses are added (by internal process) to the docsSubMgtCpeIpTable. The nature of the learning mechanism is not specified here. If not set through DOCSIS provisioning, this object defaults to docsSubMgtCpeLearnableDefault. Note that this object is only meaningful if docsSubMgtCpeControlActive is true.')
docsSubMgtCpeControlReset = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCpeControlReset.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeControlReset.setDescription("This object always returns false on read. If this object is set to true, the rows with 'learned' addresses in docsSubMgtCpeIpTable for this CM are deleted from that table.")
docsSubMgtCpeMaxIpDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCpeMaxIpDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeMaxIpDefault.setDescription('The default value for docsSubMgtCpeControlMaxCpeIp if not signaled in the DOCSIS Registration request. Upon initial CMTS initialization, this defaults to 16.')
docsSubMgtCpeActiveDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCpeActiveDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeActiveDefault.setDescription('The default value for docsSubMgtCpeControlActive if not signaled in the DOCSIS Registration request. Upon initial CMTS initialization, this defaults to false.')
docsSubMgtCpeLearnableDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCpeLearnableDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeLearnableDefault.setDescription('The default value for docsSubMgtCpeControlLearnable if not signaled in the DOCSIS Registration request. Upon initial CMTS initialization, this defaults to true.')
docsSubMgtCpeIpTable = MibTable((1, 3, 6, 1, 3, 83, 4, 1, 5), )
if mibBuilder.loadTexts: docsSubMgtCpeIpTable.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeIpTable.setDescription('A table of CPE IP addresses known on a per CM basis.')
docsSubMgtCpeIpEntry = MibTableRow((1, 3, 6, 1, 3, 83, 4, 1, 5, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsCmStatusIndex"), (0, "DOCS-SUBMGT-MIB", "docsSubMgtCpeIpIndex"))
if mibBuilder.loadTexts: docsSubMgtCpeIpEntry.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeIpEntry.setDescription("An entry in the docsSubMgtCpeIpTable. The first index is the specific modem we're referring to, the second index is the specific CPE IP entry.")
docsSubMgtCpeIpIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: docsSubMgtCpeIpIndex.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeIpIndex.setDescription('The index of this CPE IP address relative to the indexed CM. An entry is created either through the included CPE IP addresses in the provisioning object, or via learning. If a CMTS receives an IP packet from a CM that contains a source IP address which does not match one of the docsSubMgtCpeIpAddr entries for this CM, one of two things occurs. If the number of entries is less than docsSubMgtCpeControlMaxCpeIp, the source address is added to the table and the packet is forwarded. If the number of entries equals the docsSubMgtCpeControlMaxCpeIp, AND docsSubMgtCpeControlActive is true, then the packet is dropped. Otherwise the packet is forwarded. ')
docsSubMgtCpeIpAddr = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 5, 1, 2), IpV4orV6Addr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSubMgtCpeIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeIpAddr.setDescription('The IP address either set from provisioning or learned via wiretapping. See docsSubMgtCpeIpIndex for the mechanism.')
docsSubMgtCpeIpLearned = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSubMgtCpeIpLearned.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeIpLearned.setDescription('If true, this entry was learned from IP packets sent upstream rather than from the provisioning objects.')
docsSubMgtCpeType = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cpe", 1), ("ps", 2), ("mta", 3), ("stb", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSubMgtCpeType.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCpeType.setDescription(" The type of CPE based on the classification below: 'cpe' Regular CPE clients. 'ps' CableHome Portal Server (PS) 'mta' PacketCable Multimedia Terminal Adapter (MTA) 'stb' Digital Setop Box (STB).")
docsSubMgtPktFilterTable = MibTable((1, 3, 6, 1, 3, 83, 4, 1, 6), )
if mibBuilder.loadTexts: docsSubMgtPktFilterTable.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterTable.setDescription('A table of filter or classifier criteria. Classifiers are assigned by group to the individual CMs. That assignment is made via the configuration objects sent upstream from the CM to the CMTS during registration.')
docsSubMgtPktFilterEntry = MibTableRow((1, 3, 6, 1, 3, 83, 4, 1, 6, 1), ).setIndexNames((0, "DOCS-SUBMGT-MIB", "docsSubMgtPktFilterGroup"), (0, "DOCS-SUBMGT-MIB", "docsSubMgtPktFilterIndex"))
if mibBuilder.loadTexts: docsSubMgtPktFilterEntry.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterEntry.setDescription('An entry in the docsSubMgtPktFilterTable.')
docsSubMgtPktFilterGroup = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: docsSubMgtPktFilterGroup.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterGroup.setDescription('Identifies an ordered group of filters. Each modem may be associated with a filter group for its upstream traffic (docsSubMgtCmFilterUpstream) and a filter group for its downstream traffic (docsSubMgtCmFilterDownstream). Typically, many modems will use the same filter group.')
docsSubMgtPktFilterIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: docsSubMgtPktFilterIndex.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterIndex.setDescription('An index which describes the ordering of a set of filter specifications within the group. Filters are applied in index order.')
docsSubMgtPktFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 3), IpV4orV6Addr().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterSrcAddr.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterSrcAddr.setDescription("The source IP address to match in the packet to be classified. By default, this is the all-zero's IP v4 and v6 address. A packet matches the SrcAddr filter if the following is true: AND (FilterSrcAddr, FilterSrcMask) == AND (Packet SrcAddr, FilterSrcMask). The mask value is applied to both the match value in this table and to the packet IP address.")
docsSubMgtPktFilterSrcMask = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 4), IpV4orV6Addr().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterSrcMask.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterSrcMask.setDescription("A bit mask that is to be applied to the source address prior to matching. This, taken with the SrcAddr specifies a matching criteria. By default, the pair specifies a filter which matches all source addresses. This mask is not necessarily the same as a subnet mask, but for IPv4 addresses the 1's bits must be leftmost and contiguous. IPv6 masks have no such restriction.")
docsSubMgtPktFilterDstAddr = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 5), IpV4orV6Addr().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterDstAddr.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterDstAddr.setDescription("The destination IP address to match in the packet to be classified. By default, this is the all-zero's IP v4 and v6 address. A packet matches the DstAddr filter if the following is true: AND (FilterDstAddr, FilterDstMask) == AND (Packet DstAddr, FilterDstMask). The mask value is applied to both the match value in this table and to the packet IP address.")
docsSubMgtPktFilterDstMask = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 6), IpV4orV6Addr().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterDstMask.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterDstMask.setDescription("A bit mask that is to be applied to the destination address prior to matching. This, taken with the DstAddr specifies a matching criteria. By default, the pair specifies a filter which matches all destination addresses. This mask is not necessarily the same as a subnet mask, but for IPv4 addresses the 1's bits must be leftmost and contiguous. IPv6 masks have no such restriction.")
docsSubMgtPktFilterUlp = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterUlp.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterUlp.setDescription('Upper level protocol to match. If this value is 256, matches ALL ULP values. Otherwise, this matches the specific protocol value. Note that if the packet ULP is either 6 (tcp) or 17 (udp), then docsSubMgtPktTcpUdpFilterTable must also be consulted (if its entry exists) to see if this entry matches. Obviously, if this value is neither tcp, udp nor 256, then that table need not be matched against.')
docsSubMgtPktFilterTosValue = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterTosValue.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterTosValue.setDescription('The TOS value to match in the IP packet.')
docsSubMgtPktFilterTosMask = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterTosMask.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterTosMask.setDescription('The mask to apply against the TOS value to be matched in the IP packet. The default for both these objects taken together matches all TOS values. A packet matches this filter if the following is true: AND (FilterTosValue, FilterTosMask) == AND (Packet TOS Value, FilterTosMask).')
docsSubMgtPktFilterAction = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2))).clone('accept')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterAction.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterAction.setDescription('The action to take upon this filter matching. Accept means to accept the packet for further processing. Drop means to drop the packet.')
docsSubMgtPktFilterMatches = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSubMgtPktFilterMatches.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterMatches.setDescription('This object counts the number of times this specific rule has been matched. This is incremented any time this rule is encountered and all components match. It is only incremented for the first (lowest-indexed) filter matching a packet.')
docsSubMgtPktFilterStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 6, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtPktFilterStatus.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPktFilterStatus.setDescription('Standard rowStatus object for creating this row. Any object in this row which is writable may be changed at any time while the row is active.')
docsSubMgtTcpUdpFilterTable = MibTable((1, 3, 6, 1, 3, 83, 4, 1, 7), )
if mibBuilder.loadTexts: docsSubMgtTcpUdpFilterTable.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtTcpUdpFilterTable.setDescription("This is an adjunct to docsSubMgtPktFilterTable. It provides optional filtering based on elements in TCP or UDP headers. This table is separate from docsSubMgtPktFilterTable only because it is expected to be used more rarely. This table is not consulted unless the upper-layer protocol is TCP, UDP, or 'any'.")
docsSubMgtTcpUdpFilterEntry = MibTableRow((1, 3, 6, 1, 3, 83, 4, 1, 7, 1), ).setIndexNames((0, "DOCS-SUBMGT-MIB", "docsSubMgtPktFilterGroup"), (0, "DOCS-SUBMGT-MIB", "docsSubMgtPktFilterIndex"))
if mibBuilder.loadTexts: docsSubMgtTcpUdpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtTcpUdpFilterEntry.setDescription('Defines filtering criteria for TCP and UDP headers.')
docsSubMgtTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtTcpUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtTcpUdpSrcPort.setDescription('The source port to match. 65536 matches any value in the TCP or UDP source port field.')
docsSubMgtTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtTcpUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtTcpUdpDstPort.setDescription('The destination port to match. 65536 matches any value in the TCP or UDP destination port field.')
docsSubMgtTcpFlagValues = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 7, 1, 3), Bits().clone(namedValues=NamedValues(("urgent", 0), ("ack", 1), ("push", 2), ("reset", 3), ("syn", 4), ("fin", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtTcpFlagValues.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtTcpFlagValues.setDescription('The value of the flags of interest. The value of this object MUST always be a subset (proper or otherwise) of docsSubMgtTcpFlagMask. An attempt to violate this constraint returns an inconsistentValue error for an SNMPv2 or v3 agent and a badValue error for an SNMPv1 agent.')
docsSubMgtTcpFlagMask = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 7, 1, 4), Bits().clone(namedValues=NamedValues(("urgent", 0), ("ack", 1), ("push", 2), ("reset", 3), ("syn", 4), ("fin", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtTcpFlagMask.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtTcpFlagMask.setDescription('This bit set indicates the flags of interest in the TCP header for the packet to be matched. For example to match all packets where the urgent bit is set, but that are not either syn or fin, the value of docsSubMgtTcpFlagValues would be { urgent }, and the value of this object would be { urgent, syn, fin }')
docsSubMgtTcpUdpStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSubMgtTcpUdpStatus.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtTcpUdpStatus.setDescription('Standard row object for this table. Any object in the conceptual row may be modified regardless of whether this row is active or not.')
docsSubMgtCmFilterTable = MibTable((1, 3, 6, 1, 3, 83, 4, 1, 8), )
if mibBuilder.loadTexts: docsSubMgtCmFilterTable.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCmFilterTable.setDescription('Binds filter groups to modems. This table identifies for each modem the upstream and downstream filter groups that apply to packets for that modem. Zero is used as a distinguished value to mean no filter group.')
docsSubMgtCmFilterEntry = MibTableRow((1, 3, 6, 1, 3, 83, 4, 1, 8, 1), )
docsIfCmtsCmStatusEntry.registerAugmentions(("DOCS-SUBMGT-MIB", "docsSubMgtCmFilterEntry"))
docsSubMgtCmFilterEntry.setIndexNames(*docsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: docsSubMgtCmFilterEntry.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCmFilterEntry.setDescription('Binds a filter group to each direction of traffic for a modem.')
docsSubMgtSubFilterDownstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtSubFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtSubFilterDownstream.setDescription('The filter group applied to traffic destined for subscribers attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtSubFilterDownDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS during registration. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic destined to hosts attached to this CM.')
docsSubMgtSubFilterUpstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtSubFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtSubFilterUpstream.setDescription('The filter group applied to traffic originating from subscribers attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtSubFilterUpDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic originating from hosts attached to this CM.')
docsSubMgtCmFilterDownstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCmFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCmFilterDownstream.setDescription('The filter group applied to traffic destined for the referenced CM itself. This is set upon row creation to either the default (docsSubMgtCmFilterDownDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS during registration. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic destined to this CM.')
docsSubMgtCmFilterUpstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCmFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCmFilterUpstream.setDescription('The filter group applied to traffic originating from the referenced CM itself. This is set upon row creation to either the default (docsSubMgtCmFilterUpDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic originating from this CM.')
docsSubMgtPsFilterDownstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtPsFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPsFilterDownstream.setDescription('The filter group applied to traffic destined for CableHome portal servers attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtPsFilterDownDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS during registration. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic destined to portal servers attached to this CM.')
docsSubMgtPsFilterUpstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtPsFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPsFilterUpstream.setDescription('The filter group applied to traffic originating from CableHome portal servers attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtPsFilterUpDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic originating from portal servers attached to this CM.')
docsSubMgtMtaFilterDownstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtMtaFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtMtaFilterDownstream.setDescription('The filter group applied to traffic destined for MTAs attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtMtaFilterDownDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS during registration. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic destined to MTAs attached to this CM.')
docsSubMgtMtaFilterUpstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtMtaFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtMtaFilterUpstream.setDescription('The filter group applied to traffic originating from MTAs attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtMtaFilterUpDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic originating from MTAs attached to this CM.')
docsSubMgtStbFilterDownstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtStbFilterDownstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtStbFilterDownstream.setDescription('The filter group applied to traffic destined for STBs attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtStbFilterDownDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS during registration. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic destined to STBs attached to this CM.')
docsSubMgtStbFilterUpstream = MibTableColumn((1, 3, 6, 1, 3, 83, 4, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtStbFilterUpstream.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtStbFilterUpstream.setDescription('The filter group applied to traffic originating from STBs attached to the referenced CM. This is set upon row creation to either the default (docsSubMgtStbFilterUpDefault), or to the value in the provisioning object sent upstream from the CM to the CMTS. The value of this object is a pointer into the docsSubMgtPktFilterTable and refers to all filter rows with matching docsSubMgtPktFilterGroup indices. If there are no matching filter rows in that table, or if this object is set to zero, no filtering is applied to traffic originating from STBs attached to this CM.')
docsSubMgtSubFilterDownDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtSubFilterDownDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtSubFilterDownDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtSubFilterDownstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtSubFilterUpDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtSubFilterUpDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtSubFilterUpDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtSubFilterUpstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtCmFilterDownDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCmFilterDownDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCmFilterDownDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtCmFilterDownstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtCmFilterUpDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtCmFilterUpDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtCmFilterUpDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtCmFilterUpstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtPsFilterDownDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtPsFilterDownDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPsFilterDownDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtPsFilterDownstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtPsFilterUpDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtPsFilterUpDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtPsFilterUpDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtPsFilterUpstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtMtaFilterDownDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtMtaFilterDownDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtMtaFilterDownDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtMtaFilterDownstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtMtaFilterUpDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtMtaFilterUpDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtMtaFilterUpDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtMtaFilterUpstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtStbFilterDownDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtStbFilterDownDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtStbFilterDownDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtStbFilterDownstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtStbFilterUpDefault = MibScalar((1, 3, 6, 1, 3, 83, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSubMgtStbFilterUpDefault.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtStbFilterUpDefault.setDescription('Upon a row creation in docsSubMgtCmFilterTable, docsSubMgtStbFilterUpstream is set to this value if no provisioning object is present to override it. This object is persistent across CMTS reboots. Upon initial CMTS initialization, this defaults to 0.')
docsSubMgtNotification = MibIdentifier((1, 3, 6, 1, 3, 83, 4, 2))
docsSubMgtConformance = MibIdentifier((1, 3, 6, 1, 3, 83, 4, 3))
docsSubMgtCompliances = MibIdentifier((1, 3, 6, 1, 3, 83, 4, 3, 1))
docsSubMgtGroups = MibIdentifier((1, 3, 6, 1, 3, 83, 4, 3, 2))
docsSubMgtBasicCompliance = ModuleCompliance((1, 3, 6, 1, 3, 83, 4, 3, 1, 1)).setObjects(("DOCS-SUBMGT-MIB", "docsSubMgtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsSubMgtBasicCompliance = docsSubMgtBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtBasicCompliance.setDescription('The compliance statement for CMTS devices that implement CMTS centric subscriber management.')
docsSubMgtGroup = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 3, 2, 1)).setObjects(("DOCS-SUBMGT-MIB", "docsSubMgtCpeControlMaxCpeIp"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeControlActive"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeControlLearnable"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeControlReset"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeMaxIpDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeActiveDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeLearnableDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeIpAddr"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeIpLearned"), ("DOCS-SUBMGT-MIB", "docsSubMgtCpeType"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterSrcAddr"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterSrcMask"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterDstAddr"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterDstMask"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterUlp"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterTosValue"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterTosMask"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterAction"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterMatches"), ("DOCS-SUBMGT-MIB", "docsSubMgtPktFilterStatus"), ("DOCS-SUBMGT-MIB", "docsSubMgtTcpUdpSrcPort"), ("DOCS-SUBMGT-MIB", "docsSubMgtTcpUdpDstPort"), ("DOCS-SUBMGT-MIB", "docsSubMgtTcpFlagValues"), ("DOCS-SUBMGT-MIB", "docsSubMgtTcpFlagMask"), ("DOCS-SUBMGT-MIB", "docsSubMgtTcpUdpStatus"), ("DOCS-SUBMGT-MIB", "docsSubMgtSubFilterDownstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtSubFilterUpstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtCmFilterDownstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtCmFilterUpstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtPsFilterDownstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtPsFilterUpstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtMtaFilterDownstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtMtaFilterUpstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtStbFilterDownstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtStbFilterUpstream"), ("DOCS-SUBMGT-MIB", "docsSubMgtSubFilterDownDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtSubFilterUpDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtCmFilterDownDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtCmFilterUpDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtPsFilterDownDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtPsFilterUpDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtMtaFilterDownDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtMtaFilterUpDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtStbFilterDownDefault"), ("DOCS-SUBMGT-MIB", "docsSubMgtStbFilterUpDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsSubMgtGroup = docsSubMgtGroup.setStatus('current')
if mibBuilder.loadTexts: docsSubMgtGroup.setDescription('The objects use to managed host-based cable modems via a set of CMTS enforced controls.')
mibBuilder.exportSymbols("DOCS-SUBMGT-MIB", docsSubMgtTcpFlagValues=docsSubMgtTcpFlagValues, docsSubMgtCmFilterDownDefault=docsSubMgtCmFilterDownDefault, docsSubMgtCmFilterEntry=docsSubMgtCmFilterEntry, docsSubMgtCpeLearnableDefault=docsSubMgtCpeLearnableDefault, docsSubMgtMtaFilterUpstream=docsSubMgtMtaFilterUpstream, PYSNMP_MODULE_ID=docsSubMgt, docsSubMgtNotification=docsSubMgtNotification, docsSubMgtCmFilterUpstream=docsSubMgtCmFilterUpstream, docsSubMgtPsFilterDownDefault=docsSubMgtPsFilterDownDefault, docsSubMgtTcpUdpDstPort=docsSubMgtTcpUdpDstPort, docsSubMgtSubFilterUpstream=docsSubMgtSubFilterUpstream, docsSubMgtCpeIpIndex=docsSubMgtCpeIpIndex, docsSubMgtSubFilterDownDefault=docsSubMgtSubFilterDownDefault, docsSubMgtCpeControlMaxCpeIp=docsSubMgtCpeControlMaxCpeIp, docsSubMgtCpeControlTable=docsSubMgtCpeControlTable, docsSubMgtCpeType=docsSubMgtCpeType, docsSubMgtPsFilterDownstream=docsSubMgtPsFilterDownstream, docsSubMgtCpeIpAddr=docsSubMgtCpeIpAddr, docsSubMgtPktFilterEntry=docsSubMgtPktFilterEntry, docsSubMgtPktFilterGroup=docsSubMgtPktFilterGroup, docsSubMgtPsFilterUpstream=docsSubMgtPsFilterUpstream, docsSubMgtStbFilterUpstream=docsSubMgtStbFilterUpstream, docsSubMgtPktFilterIndex=docsSubMgtPktFilterIndex, docsSubMgtMtaFilterDownDefault=docsSubMgtMtaFilterDownDefault, docsSubMgtCpeControlEntry=docsSubMgtCpeControlEntry, docsSubMgtPktFilterUlp=docsSubMgtPktFilterUlp, docsSubMgtPktFilterMatches=docsSubMgtPktFilterMatches, docsSubMgtPktFilterTosValue=docsSubMgtPktFilterTosValue, docsSubMgtStbFilterDownDefault=docsSubMgtStbFilterDownDefault, docsSubMgtTcpFlagMask=docsSubMgtTcpFlagMask, docsSubMgt=docsSubMgt, docsSubMgtCpeIpEntry=docsSubMgtCpeIpEntry, docsSubMgtStbFilterDownstream=docsSubMgtStbFilterDownstream, docsSubMgtStbFilterUpDefault=docsSubMgtStbFilterUpDefault, docsSubMgtGroups=docsSubMgtGroups, IpV4orV6Addr=IpV4orV6Addr, docsSubMgtPktFilterSrcAddr=docsSubMgtPktFilterSrcAddr, docsSubMgtCmFilterDownstream=docsSubMgtCmFilterDownstream, docsSubMgtPsFilterUpDefault=docsSubMgtPsFilterUpDefault, docsSubMgtCpeActiveDefault=docsSubMgtCpeActiveDefault, docsSubMgtSubFilterDownstream=docsSubMgtSubFilterDownstream, docsSubMgtMtaFilterUpDefault=docsSubMgtMtaFilterUpDefault, docsSubMgtPktFilterTosMask=docsSubMgtPktFilterTosMask, docsSubMgtPktFilterAction=docsSubMgtPktFilterAction, docsSubMgtSubFilterUpDefault=docsSubMgtSubFilterUpDefault, docsSubMgtGroup=docsSubMgtGroup, docsSubMgtPktFilterStatus=docsSubMgtPktFilterStatus, docsSubMgtTcpUdpSrcPort=docsSubMgtTcpUdpSrcPort, docsSubMgtObjects=docsSubMgtObjects, docsSubMgtConformance=docsSubMgtConformance, docsSubMgtPktFilterTable=docsSubMgtPktFilterTable, docsSubMgtCpeControlLearnable=docsSubMgtCpeControlLearnable, docsSubMgtCpeMaxIpDefault=docsSubMgtCpeMaxIpDefault, docsSubMgtCompliances=docsSubMgtCompliances, docsSubMgtCpeIpLearned=docsSubMgtCpeIpLearned, docsSubMgtBasicCompliance=docsSubMgtBasicCompliance, docsSubMgtCmFilterTable=docsSubMgtCmFilterTable, docsSubMgtPktFilterSrcMask=docsSubMgtPktFilterSrcMask, docsSubMgtTcpUdpFilterEntry=docsSubMgtTcpUdpFilterEntry, docsSubMgtMtaFilterDownstream=docsSubMgtMtaFilterDownstream, docsSubMgtCpeControlReset=docsSubMgtCpeControlReset, docsSubMgtCpeIpTable=docsSubMgtCpeIpTable, docsSubMgtPktFilterDstAddr=docsSubMgtPktFilterDstAddr, docsSubMgtCmFilterUpDefault=docsSubMgtCmFilterUpDefault, docsSubMgtPktFilterDstMask=docsSubMgtPktFilterDstMask, docsSubMgtCpeControlActive=docsSubMgtCpeControlActive, docsSubMgtTcpUdpStatus=docsSubMgtTcpUdpStatus, docsSubMgtTcpUdpFilterTable=docsSubMgtTcpUdpFilterTable)
