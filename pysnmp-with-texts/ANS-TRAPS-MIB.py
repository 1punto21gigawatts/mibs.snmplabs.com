#
# PySNMP MIB module ANS-TRAPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANS-TRAPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AlarmSeverity, InstancePointer, AlarmType = mibBuilder.importSymbols("ANS-ALARM-MIB", "AlarmSeverity", "InstancePointer", "AlarmType")
mlpmpR115, RowStatus, DateAndTime, common, RowPointer = mibBuilder.importSymbols("ANS-COMMON-MIB", "mlpmpR115", "RowStatus", "DateAndTime", "common", "RowPointer")
board, subrack, systemNode, slot = mibBuilder.importSymbols("ANS-EQUIPMENT-MIB", "board", "subrack", "systemNode", "slot")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysDescr, sysName, sysLocation, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysName", "sysLocation", "sysContact")
Counter32, ModuleIdentity, IpAddress, Unsigned32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, NotificationType, MibIdentifier, NotificationType, Counter64, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "IpAddress", "Unsigned32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "NotificationType", "MibIdentifier", "NotificationType", "Counter64", "iso", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 7))
ansIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 1), RowPointer())
if mibBuilder.loadTexts: ansIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: ansIdentifier.setDescription('A reference to the affected entity. ')
alarmingObject = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 11), InstancePointer())
if mibBuilder.loadTexts: alarmingObject.setStatus('mandatory')
if mibBuilder.loadTexts: alarmingObject.setDescription('The alarming object. Identifies either a variable in the group of variables belonging to the alarming object, or a row in a table representing the alarming object.')
alarmType = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 12), AlarmType())
if mibBuilder.loadTexts: alarmType.setStatus('mandatory')
if mibBuilder.loadTexts: alarmType.setDescription('The type of the alarm.')
alarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 13), AlarmSeverity())
if mibBuilder.loadTexts: alarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: alarmSeverity.setDescription('The perceived severity of the fault.')
alarmTime = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 14), DateAndTime())
if mibBuilder.loadTexts: alarmTime.setStatus('mandatory')
if mibBuilder.loadTexts: alarmTime.setDescription('The time the fault was detected.')
alarmInformation = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 15), DisplayString())
if mibBuilder.loadTexts: alarmInformation.setStatus('mandatory')
if mibBuilder.loadTexts: alarmInformation.setDescription('Additional information pin-pointing the problem. If not provided, this string shall be of zero length.')
eventTime = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 17), DateAndTime())
if mibBuilder.loadTexts: eventTime.setStatus('mandatory')
if mibBuilder.loadTexts: eventTime.setDescription('The time the event occured.')
ntId = MibScalar((1, 3, 6, 1, 4, 1, 193, 96, 115, 7, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: ntId.setStatus('mandatory')
if mibBuilder.loadTexts: ntId.setDescription('Customer id or network terminal id or radio terminal id')
cellbusFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2) + (0,5)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: cellbusFailure.setDescription('This is sent when a Cellbus has a defect that is longer than 2.5+/-0.5 seconds.')
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2) + (0,6)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: fanFailure.setDescription("Is sent when a fan failure has been detected in the subrack (this could be based on detection of over_temperature in the subrack) An alarm ceasing report (alarm severity ='cleared') will be sent when an indication that the fan is back in operation has been detected.")
powerFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2) + (0,7)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: powerFailure.setDescription("Is sent when a power failure has been detected in the subrack. An alarm ceasing report (alarm severity = 'cleared') will be sent when an indication that the power is back on has been detected.")
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,1)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: communicationLost.setDescription("Is sent when a the communication to a subrack has been lost. An alarm ceasing report (alarm severity = 'cleared') will be sent when the communication has been re-established. The alarm type is by default 'communication alarm'.")
boardReplaced = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,2)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: boardReplaced.setDescription('Is sent when the insertion of a circuit board that matches the configured data for the slot (but not the serial number) has been detected.')
boardRemovedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,4)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: boardRemovedAlarm.setDescription("Is sent when the removal of a matching circuit board from a slot has been detected. An alarm ceasing report (alarm severity = 'cleared') will be sent when a board is inserted in the slot, or when the configuration data is cleared for the slot. The alarm type is by default 'equipment alarm'.")
boardMismatch = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,6)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: boardMismatch.setDescription("Is sent when the insertion of a circuit board that does not match the configured data for the slot has been detected. An alarm ceasing report (alarm severity = 'cleared') will be sent when matching configuration data is set for the slot, when the configuration data is cleared for the slot, or when the board is removed. The alarm type is by default 'equipment alarm'.")
boardUnrecognized = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,7)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: boardUnrecognized.setDescription("Is sent when the insertion of a circuit board in a slot has been detected, but the board ID is not recognizable (or not valid for this system). An alarm ceasing report (alarm severity = 'cleared') will be sent when the board is removed. The alarm type is by default 'equipment alarm'.")
powerLoss = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,8)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: powerLoss.setDescription('Is sent when a power loss occurs at a board.')
interfaceFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,9)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: interfaceFailure.setDescription('Is sent when an interface on a board has failed.')
softwareDownloadInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,25)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: softwareDownloadInProgress.setDescription('Sent when the board software is being downloaded')
softwareDownloadDone = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,26)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: softwareDownloadDone.setDescription('This is sent when the software is downloaded')
atRollbacked = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,46)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: atRollbacked.setDescription('This is sent when the software is downloaded')
communicationError = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,9)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: communicationError.setDescription("Is sent when a communication error condition has been entered (or ceased) on a circuit board. The alarm type is by default 'equipment alarm'.")
startError = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,12)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: startError.setDescription("Is sent when a start error condition has been entered (or ceased) on a circuit board. The alarm type is by default 'equipment alarm'.")
laserPower = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,13)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: laserPower.setDescription('This is sent when a failure of the laser power occurs.')
dpSoftwareFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,15)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: dpSoftwareFailure.setDescription('This is sent if the DP software fails.')
bufferOverflow = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,16)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: bufferOverflow.setDescription('This is sent when a buffer overflows for a while')
bufferUnderflow = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,17)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: bufferUnderflow.setDescription('This is sent when a buffer underflows for a while')
downLoadLmFailed = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,19)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: downLoadLmFailed.setDescription('This is sent when the downloading of a new Load Module (LM) to a Device Processor (DP) fails')
incorrectSwVersion = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,21)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: incorrectSwVersion.setDescription('This is sent when a board has been loaded with the incorrect version of software.')
loopBackFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,22)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: loopBackFailure.setDescription('This is sent when a loopback has failed.')
vpAis = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,23)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: vpAis.setDescription('This is sent when a VP AIS alarm occurs.')
vpRdi = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,24)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: vpRdi.setDescription('This is sent when a VP RDI alarm occurs.')
msAis = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,27)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: msAis.setDescription('This is sent when Alarm Indication Signal is received for more than 2.5 seconds on a Multiplexer Section.')
msRdi = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,28)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: msRdi.setDescription('This is sent when Remote Defect Indication is received for more than 2.5 seconds on a Multiplexer Section.')
pathRdi = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,29)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: pathRdi.setDescription('This is sent when Remote Defect Indication is received for more than 2.5 seconds on a Path.')
pathAis = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,30)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: pathAis.setDescription('This is sent when Alarm Indication Signal is received for more than 2.5 seconds on a Path.')
macModemSwDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,18)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macModemSwDownloadFailure.setDescription('the download from the MAC EPROM active or passive towards the passive area of modem has failed')
macRadioSwDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,20)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macRadioSwDownloadFailure.setDescription('the download from the MAC EPROM active or passive towards the passive area of radio has failed')
macIncorrSwVersModem = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,42)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macIncorrSwVersModem.setDescription('The active loadmodule in the modem contains an incorrect SW version.')
macIncorrSwVersRadio = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,43)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macIncorrSwVersRadio.setDescription('The active loadmodule in the radio contains an incorrect SW version.')
macSwdlFromActiveToModemInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,44)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macSwdlFromActiveToModemInProgress.setDescription('the download from the MAC FPROM active towards the passive area of modem is in progress (in Background)')
macSwdlFromActiveToRadioInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,45)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macSwdlFromActiveToRadioInProgress.setDescription('the download from the MAC FPROM active towards the passive area of modem is in progress (in Background)')
macSwdlFromPassiveToModemInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,47)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macSwdlFromPassiveToModemInProgress.setDescription('the download from the MAC FPROM passive towards the active area of modem is in progress (in Background)')
macSwdlFromPassiveToRadioInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,48)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macSwdlFromPassiveToRadioInProgress.setDescription('the download from the MAC FPROM passive towards the active area of radio is in progress (in Background)')
macKeepAliveFail = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,49)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macKeepAliveFail.setDescription("MAC-Radio Control Communication Link Failure. The ping toward the radio doesn't come back to the mac three consecutive times")
macRestart = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,50)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macRestart.setDescription('MAC DP Restarted')
macModemRestart = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,51)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macModemRestart.setDescription('Modem DP Restarted')
macControlChannel = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,37)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macControlChannel.setDescription('No communication with modem processor.')
macRclFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,38)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macRclFailure.setDescription('Unknown RCL command from de-framer.')
macCbrOverflow = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,39)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macCbrOverflow.setDescription('CBR buffer overflow.')
macSwException = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,40)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macSwException.setDescription('Software exception on MAC DP.')
macHwException = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4) + (0,41)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macHwException.setDescription('Hardware exception.')
macSignonFailed = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3) + (0,12)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: macSignonFailed.setDescription('Sent when the AT which should be signed on is lost.')
atControlChannel = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,63)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: atControlChannel.setDescription('No communication with modem processor.')
radioTxOn = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,77)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioTxOn.setDescription('Transmitter always on.')
radioVco = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,78)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioVco.setDescription('Radio VCO has a reduced margin.')
radioTxLevel = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,79)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioTxLevel.setDescription('Unable to adjust radio output power level.')
radioTxVco = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,104)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioTxVco.setDescription('The TX VCO has reached a reduced action margin in the Radio Unit.')
modemLofTdm = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,83)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemLofTdm.setDescription('Loss of synchronization.')
suMismatch = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,65)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: suMismatch.setDescription('A SU of wrong type has been inserted in a configured SU slot.')
suPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,66)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: suPowerFailure.setDescription('Power failure on a SU.')
suInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,67)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: suInitFailure.setDescription('Initialization of a SU failed.')
suUnsupportedType = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,68)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: suUnsupportedType.setDescription('SU of a type which is not supported was inserted.')
suHwFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,69)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: suHwFailure.setDescription('HW failure on a SU.')
aal1SarFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,106)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: aal1SarFailure.setDescription('Sent when a temporary loss of traffic due to AAL1 device failure is detected.')
radioTxLos = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,70)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioTxLos.setDescription('IF input level from modem too low.')
radioRfOut = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,71)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioRfOut.setDescription('RF output level to antenna too low.')
radioTxFreq = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,72)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioTxFreq.setDescription('Transmit frequency incorrect.')
radioTxOffFail = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,52)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioTxOffFail.setDescription('The radio is set off but is still trasmitting')
radioRxIfc = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,73)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioRxIfc.setDescription('Rx intermediate IF PLL unlocked.')
radioRxFreq = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,74)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioRxFreq.setDescription('Receive frequency incorrect.')
radioHighTemperature = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,76)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioHighTemperature.setDescription('Outdoor temperature above limit.')
radioRestart = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,53)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioRestart.setDescription('Restart of the Radio DP')
radioIrsLoss = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,94)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioIrsLoss.setDescription('RF input power level too low on average on all the transmitting terminals')
modemEberUp = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,100)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemEberUp.setDescription('Uplink Eber received in modem is above limit.')
modemEberDown = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,101)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemEberDown.setDescription('Downlink Eber received in modem is above limit.')
modemRxlFinUp = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,102)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemRxlFinUp.setDescription('Uplink IF input level from RAU too low.')
modemRxlFinDown = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,103)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemRxlFinDown.setDescription('Downlink IF input level from RAU too low.')
modemRauPow = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,82)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemRauPow.setDescription('RAU power supply failure.')
modemModInd = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,85)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemModInd.setDescription('Unable to adjust modulation index.')
modemSwException = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,86)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemSwException.setDescription('Software exception.')
modemHwException = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,87)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemHwException.setDescription('Hardware error.')
modemControlChannel = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,88)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemControlChannel.setDescription('No communication with radio unit processor.')
swDownloadFailureRadio = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,54)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: swDownloadFailureRadio.setDescription('the download from the NU FPROM active or passive towards the passive area of radio has failed')
swDownloadFailureModem = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,55)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: swDownloadFailureModem.setDescription('the download from the NU FPROM active or passive towards the passive area of modem has failed')
incorrectSwVersModem = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,56)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: incorrectSwVersModem.setDescription('the active LM in the modem contains an incorrect SW version')
incorrectSwVersRadio = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,58)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: incorrectSwVersRadio.setDescription('the active LM in the radio contains an incorrect SW version')
swdlFromActiveToModemInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,59)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: swdlFromActiveToModemInProgress.setDescription('the download from the NU FPROM active towards the passive area of modem is in progress (in Background)')
swdlFromActiveToRadioInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,75)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: swdlFromActiveToRadioInProgress.setDescription('the download from the NU FPROM active towards the passive area of radio is in progress (in Background)')
swdlFromPassiveToModemInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,80)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: swdlFromPassiveToModemInProgress.setDescription('the download from the NU FPROM passive towards the active area of modem is in progress (in Background)')
swdlFromPassiveToRadioInProgress = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,81)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: swdlFromPassiveToRadioInProgress.setDescription('the download from the NU FPROM passive towards the active area of radio is in progress (in Background)')
radioMismatch = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,84)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioMismatch.setDescription('UKL received different from UKL configured')
radioFrequencyMismatch = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,111)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: radioFrequencyMismatch.setDescription('Configured Frequency is not within the restricted frequency range of the installed Radio Unit')
ethernetLossOfCarrier = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,90)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: ethernetLossOfCarrier.setDescription('Sent if ethernet port detects loss of carrier.')
aal1Starvation = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,91)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: aal1Starvation.setDescription('Sent when a buffer-underflow condition is detected.')
lossOfRefClock = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,92)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: lossOfRefClock.setDescription('Sent when the 8 kHz clock is lost.')
systemUp = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,0)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: systemUp.setDescription('This is sent when the CP has initialised.')
systemAudit = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,57)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: systemAudit.setDescription('Generated by the CP to notify that a CP start/restart is ongoing.')
protectionSchemeNotRespected = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,10)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: protectionSchemeNotRespected.setDescription('his is sent when boards not respecting the protection scheme are present in the subrack.')
rnSwitched = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,11)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: rnSwitched.setDescription('A switch between a providing_service RN board with a cold_standby one has been performed.')
masterLinkSwitched = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,107)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: masterLinkSwitched.setDescription('A switch between the link that is giving the synchronization at the system node.')
licenseCapacityEvent = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,108)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: licenseCapacityEvent.setDescription('This event is sent when 85%, 90% or 95% of license capacity is reached.')
licenseExpirationEvent = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,109)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: licenseExpirationEvent.setDescription('This event is sent once a day starting from 10 days before expiration date.')
hostidMismatch = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,110)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"), ("ANS-TRAPS-MIB", "eventTime"))
if mibBuilder.loadTexts: hostidMismatch.setDescription('This event is sent at System Restart if a hostid mismatch exists.')
subrackCreated = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,32)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: subrackCreated.setDescription('A new subrack is created.')
systemNodeCreated = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,33)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: systemNodeCreated.setDescription('A new system node is created.')
systemNodeDeleted = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,34)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: systemNodeDeleted.setDescription('A system node is deleted.')
subrackDeleted = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,35)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: subrackDeleted.setDescription('A subrack is deleted.')
cbrQueueFull = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,36)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: cbrQueueFull.setDescription('Temporary buffer overflow.')
signOnComplete = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,37)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: signOnComplete.setDescription('This is a notification that the sign on of an NT/AT is completed.')
modemRestart = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,89)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: modemRestart.setDescription('This is a notification that the sign on of an NT/AT is completed.')
alarmDisturbance = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,38)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: alarmDisturbance.setDescription('This notification is sent if an alarm state changes frequently.')
selfTestOk = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,39)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: selfTestOk.setDescription('Loop on radio is working, i.e. mac, modem and radio have no faults.')
selfTestFailedOnRadio = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,40)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: selfTestFailedOnRadio.setDescription('Loop on radio does not work, i.e. mac or modem or radio faulty.')
selfTestFailedOnModem = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,96)).setObjects(("ANS-TRAPS-MIB", "ansIdentifier"), ("ANS-TRAPS-MIB", "eventTime"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: selfTestFailedOnModem.setDescription('Loop on modem does not work, i.e. mac or modem faulty.')
los = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,1)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: los.setDescription('This is sent when a Loss Of Signal has been detected.')
lof = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,2)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: lof.setDescription('This is sent when a Loss Of Frame has been detected.')
lop = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,3)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: lop.setDescription('This is sent when a Loss Of Pointer has been detected.')
ais = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,4)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: ais.setDescription('This is sent when an Alarm Indication Signal has been detected.')
lofMf = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,95)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: lofMf.setDescription('This is sent when a Loss Of MultiFrame has been detected.')
rai = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,6)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: rai.setDescription('This is sent when a Remote Alarm Indication has been detected.')
lossOfCellDelineation = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,8)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: lossOfCellDelineation.setDescription('This is sent when loss of cell delineation has been detected.')
subrackMismatch = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,31)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: subrackMismatch.setDescription('The subrack is wrongly configured in the configuration files. Power Management enabled even if no check in the hardware is performed.')
externalAlarm1 = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,62)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: externalAlarm1.setDescription("Is sent when an external alarm has been detected in the subrack (this is based on detection of relay alarm on input MISC 1 of the subrack ). An alarm ceasing report (alarm severity = 'cleared') will be sent when an indication that the external alarm is ceased has been detected.")
externalAlarm2 = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,64)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: externalAlarm2.setDescription("Is sent when an external alarm has been detected in the subrack (this is based on detection of relay alarm on input MISC 2 of the subrack ). An alarm ceasing report (alarm severity = 'cleared') will be sent when an indication that the external alarm is ceased has been detected.")
mcnWarning = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,60)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: mcnWarning.setDescription('')
lossOfNetSync = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,61)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: lossOfNetSync.setDescription('This is sent when critical alarms are detected at DPSW level on a specific board (ET/CE), which is master for the network.')
diskFull = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,97)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: diskFull.setDescription('The filesystem on a disk in the CP is almost full.')
hwFailure = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,98)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: hwFailure.setDescription('Sent when DP has reported faulty HW.')
suRemoved = NotificationType((1, 3, 6, 1, 4, 1, 193, 96, 115, 1) + (0,99)).setObjects(("ANS-TRAPS-MIB", "alarmingObject"), ("ANS-TRAPS-MIB", "alarmType"), ("ANS-TRAPS-MIB", "alarmSeverity"), ("ANS-TRAPS-MIB", "alarmTime"), ("ANS-TRAPS-MIB", "alarmInformation"), ("ANS-TRAPS-MIB", "ntId"))
if mibBuilder.loadTexts: suRemoved.setDescription('Sent when SU has been removed.')
mibBuilder.exportSymbols("ANS-TRAPS-MIB", macIncorrSwVersRadio=macIncorrSwVersRadio, signOnComplete=signOnComplete, suPowerFailure=suPowerFailure, modemControlChannel=modemControlChannel, hwFailure=hwFailure, macSwdlFromPassiveToRadioInProgress=macSwdlFromPassiveToRadioInProgress, macSwdlFromActiveToRadioInProgress=macSwdlFromActiveToRadioInProgress, radioTxOffFail=radioTxOffFail, swdlFromPassiveToRadioInProgress=swdlFromPassiveToRadioInProgress, subrackCreated=subrackCreated, radioRfOut=radioRfOut, modemHwException=modemHwException, macModemRestart=macModemRestart, boardReplaced=boardReplaced, macModemSwDownloadFailure=macModemSwDownloadFailure, lop=lop, lofMf=lofMf, pathRdi=pathRdi, macSignonFailed=macSignonFailed, radioFrequencyMismatch=radioFrequencyMismatch, boardUnrecognized=boardUnrecognized, alarmTime=alarmTime, radioVco=radioVco, modemModInd=modemModInd, modemRauPow=modemRauPow, loopBackFailure=loopBackFailure, subrackDeleted=subrackDeleted, alarmingObject=alarmingObject, bufferOverflow=bufferOverflow, alarmInformation=alarmInformation, selfTestFailedOnModem=selfTestFailedOnModem, modemRxlFinUp=modemRxlFinUp, mcnWarning=mcnWarning, los=los, macKeepAliveFail=macKeepAliveFail, systemNodeDeleted=systemNodeDeleted, swDownloadFailureRadio=swDownloadFailureRadio, laserPower=laserPower, communicationError=communicationError, boardRemovedAlarm=boardRemovedAlarm, macSwException=macSwException, powerFailure=powerFailure, incorrectSwVersion=incorrectSwVersion, radioHighTemperature=radioHighTemperature, pathAis=pathAis, radioTxLevel=radioTxLevel, suMismatch=suMismatch, rai=rai, vpRdi=vpRdi, macSwdlFromPassiveToModemInProgress=macSwdlFromPassiveToModemInProgress, bufferUnderflow=bufferUnderflow, radioTxOn=radioTxOn, macControlChannel=macControlChannel, macSwdlFromActiveToModemInProgress=macSwdlFromActiveToModemInProgress, suUnsupportedType=suUnsupportedType, fanFailure=fanFailure, systemAudit=systemAudit, swDownloadFailureModem=swDownloadFailureModem, ethernetLossOfCarrier=ethernetLossOfCarrier, lossOfNetSync=lossOfNetSync, ansIdentifier=ansIdentifier, modemLofTdm=modemLofTdm, modemEberUp=modemEberUp, macIncorrSwVersModem=macIncorrSwVersModem, protectionSchemeNotRespected=protectionSchemeNotRespected, swdlFromActiveToRadioInProgress=swdlFromActiveToRadioInProgress, traps=traps, selfTestFailedOnRadio=selfTestFailedOnRadio, lof=lof, externalAlarm2=externalAlarm2, selfTestOk=selfTestOk, aal1Starvation=aal1Starvation, macHwException=macHwException, swdlFromActiveToModemInProgress=swdlFromActiveToModemInProgress, ntId=ntId, radioRxFreq=radioRxFreq, rnSwitched=rnSwitched, suRemoved=suRemoved, cbrQueueFull=cbrQueueFull, communicationLost=communicationLost, powerLoss=powerLoss, modemRestart=modemRestart, externalAlarm1=externalAlarm1, atRollbacked=atRollbacked, modemEberDown=modemEberDown, licenseExpirationEvent=licenseExpirationEvent, interfaceFailure=interfaceFailure, modemSwException=modemSwException, startError=startError, vpAis=vpAis, systemNodeCreated=systemNodeCreated, eventTime=eventTime, macRadioSwDownloadFailure=macRadioSwDownloadFailure, diskFull=diskFull, radioTxFreq=radioTxFreq, aal1SarFailure=aal1SarFailure, lossOfCellDelineation=lossOfCellDelineation, incorrectSwVersRadio=incorrectSwVersRadio, msRdi=msRdi, swdlFromPassiveToModemInProgress=swdlFromPassiveToModemInProgress, lossOfRefClock=lossOfRefClock, downLoadLmFailed=downLoadLmFailed, licenseCapacityEvent=licenseCapacityEvent, subrackMismatch=subrackMismatch, macCbrOverflow=macCbrOverflow, suInitFailure=suInitFailure, boardMismatch=boardMismatch, ais=ais, atControlChannel=atControlChannel, radioIrsLoss=radioIrsLoss, cellbusFailure=cellbusFailure, softwareDownloadInProgress=softwareDownloadInProgress, radioMismatch=radioMismatch, suHwFailure=suHwFailure, radioTxLos=radioTxLos, radioRxIfc=radioRxIfc, softwareDownloadDone=softwareDownloadDone, radioRestart=radioRestart, alarmSeverity=alarmSeverity, modemRxlFinDown=modemRxlFinDown, dpSoftwareFailure=dpSoftwareFailure, hostidMismatch=hostidMismatch, alarmType=alarmType, msAis=msAis, masterLinkSwitched=masterLinkSwitched, radioTxVco=radioTxVco, macRestart=macRestart, alarmDisturbance=alarmDisturbance, macRclFailure=macRclFailure, systemUp=systemUp, incorrectSwVersModem=incorrectSwVersModem)
