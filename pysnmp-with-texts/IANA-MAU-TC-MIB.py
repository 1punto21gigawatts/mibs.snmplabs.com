#
# PySNMP MIB module IANA-MAU-TC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IANA-MAU-TC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Integer32, IpAddress, mib_2, Counter32, Bits, ObjectIdentity, Gauge32, Counter64, iso, ModuleIdentity, TimeTicks, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "IpAddress", "mib-2", "Counter32", "Bits", "ObjectIdentity", "Gauge32", "Counter64", "iso", "ModuleIdentity", "TimeTicks", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ianaMauTC = ModuleIdentity((1, 3, 6, 1, 2, 1, 26, 7))
ianaMauTC.setRevisions(('2004-10-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ianaMauTC.setRevisionsDescriptions(('Initial version of this MIB as published in RFC XXX.',))
if mibBuilder.loadTexts: ianaMauTC.setLastUpdated('200410240000Z')
if mibBuilder.loadTexts: ianaMauTC.setOrganization('IANA')
if mibBuilder.loadTexts: ianaMauTC.setContactInfo(' Internet Assigned Numbers Authority Postal: ICANN 4676 Admiralty Way, Suite 330 Marina del Rey, CA 90292 Tel: +1 310 823 9358 E-Mail: iana@iana.org')
if mibBuilder.loadTexts: ianaMauTC.setDescription('This MIB module defines dot3MauType OBJECT-IDENTITIES and IANAifMauListBits and JackType Textual Conventions, specifying enumerated values of the ifMauTypeListBits and ifJackType objects respectively, defined in the MAU-MIB. A Standards Action (as defined in RFC 2434) is REQUIRED for the addition of the new MAU types, so that any prospective assignments are documented in an RFC. Any document that proposes such an addition is REQUIRED to note any special properties of the MAU types that it defines -- for example, side effects on the ifStackTable such as are noted in RFC 3636 Section 3.4.1 for 10GBASE-W MAUs.')
class IANAifMauTypeListBits(TextualConvention, Bits):
    description = "This data type is used as the syntax of the ifMauTypeListBits object in the (updated) definition of MAU-MIB's ifMauTable. The definition of this textual convention with the addition of newly assigned values is published periodically by the IANA, in either the Assigned Numbers RFC, or some derivative of it specific to Internet Network Management number assignments. (The latest arrangements can be obtained by contacting the IANA.) Requests for new values should be made to IANA via email (iana@iana.org). Note that changes in this textual convention SHALL be synchronized with relevant changes in the dot3MauType OBJECT-IDENTITIES."
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("bAUI", 1), ("b10base5", 2), ("bFoirl", 3), ("b10base2", 4), ("b10baseT", 5), ("b10baseFP", 6), ("b10baseFB", 7), ("b10baseFL", 8), ("b10broad36", 9), ("b10baseTHD", 10), ("b10baseTFD", 11), ("b10baseFLHD", 12), ("b10baseFLFD", 13), ("b100baseT4", 14), ("b100baseTXHD", 15), ("b100baseTXFD", 16), ("b100baseFXHD", 17), ("b100baseFXFD", 18), ("b100baseT2HD", 19), ("b100baseT2FD", 20), ("b1000baseXHD", 21), ("b1000baseXFD", 22), ("b1000baseLXHD", 23), ("b1000baseLXFD", 24), ("b1000baseSXHD", 25), ("b1000baseSXFD", 26), ("b1000baseCXHD", 27), ("b1000baseCXFD", 28), ("b1000baseTHD", 29), ("b1000baseTFD", 30), ("b10GbaseX", 31), ("b10GbaseLX4", 32), ("b10GbaseR", 33), ("b10GbaseER", 34), ("b10GbaseLR", 35), ("b10GbaseSR", 36), ("b10GbaseW", 37), ("b10GbaseEW", 38), ("b10GbaseLW", 39), ("b10GbaseSW", 40), ("b10GbaseCX4", 41), ("b2BaseTL", 42), ("b10PassTS", 43), ("b100BaseBX10D", 44), ("b100BaseBX10U", 45), ("b100BaseLX10", 46), ("b1000BaseBX10D", 47), ("b1000BaseBX10U", 48), ("b1000BaseLX10", 49), ("b1000BasePX10D", 50), ("b1000BasePX10U", 51), ("b1000BasePX20D", 52), ("b1000BasePX20U", 53))

class JackType(TextualConvention, Integer32):
    description = "Common enumeration values for repeater and interface MAU jack types. This data type is used as the syntax of the ifJackType and rpJackType objects in the (updated) definition of MAU-MIB's ifJackTable and RpJackTable respectively. The definition of this textual convention with the addition of newly assigned values is published periodically by the IANA, in either the Assigned Numbers RFC, or some derivative of it specific to Internet Network Management number assignments. (The latest arrangements can be obtained by contacting the IANA.) Requests for new values should be made to IANA via email (iana@iana.org)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("rj45", 2), ("rj45S", 3), ("db9", 4), ("bnc", 5), ("fAUI", 6), ("mAUI", 7), ("fiberSC", 8), ("fiberMIC", 9), ("fiberST", 10), ("telco", 11), ("mtrj", 12), ("hssdc", 13), ("fiberLC", 14), ("cx4", 15))

dot3MauType = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 4))
dot3MauTypeAUI = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 1))
if mibBuilder.loadTexts: dot3MauTypeAUI.setStatus('current')
if mibBuilder.loadTexts: dot3MauTypeAUI.setDescription('no internal MAU, view from AUI')
if mibBuilder.loadTexts: dot3MauTypeAUI.setReference('[IEEE 802.3 Std.], Section 7')
dot3MauType10Base5 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 2))
if mibBuilder.loadTexts: dot3MauType10Base5.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10Base5.setDescription('thick coax MAU')
if mibBuilder.loadTexts: dot3MauType10Base5.setReference('[IEEE 802.3 Std.], Section 7')
dot3MauTypeFoirl = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 3))
if mibBuilder.loadTexts: dot3MauTypeFoirl.setStatus('current')
if mibBuilder.loadTexts: dot3MauTypeFoirl.setDescription('FOIRL MAU')
if mibBuilder.loadTexts: dot3MauTypeFoirl.setReference('[IEEE 802.3 Std.], Section 9.9')
dot3MauType10Base2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 4))
if mibBuilder.loadTexts: dot3MauType10Base2.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10Base2.setDescription('thin coax MAU')
if mibBuilder.loadTexts: dot3MauType10Base2.setReference('[IEEE 802.3 Std.], Section 10')
dot3MauType10BaseT = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 5))
if mibBuilder.loadTexts: dot3MauType10BaseT.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseT.setDescription('UTP MAU. Note that it is strongly recommended that agents return either dot3MauType10BaseTHD or dot3MauType10BaseTFD if the duplex mode is known. However, management applications should be prepared to receive this MAU type value from older agent implementations.')
if mibBuilder.loadTexts: dot3MauType10BaseT.setReference('[IEEE 802.3 Std.], Section 14')
dot3MauType10BaseFP = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 6))
if mibBuilder.loadTexts: dot3MauType10BaseFP.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFP.setDescription('passive fiber MAU')
if mibBuilder.loadTexts: dot3MauType10BaseFP.setReference('[IEEE 802.3 Std.], Section 16')
dot3MauType10BaseFB = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 7))
if mibBuilder.loadTexts: dot3MauType10BaseFB.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFB.setDescription('sync fiber MAU')
if mibBuilder.loadTexts: dot3MauType10BaseFB.setReference('[IEEE 802.3 Std.], Section 17')
dot3MauType10BaseFL = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 8))
if mibBuilder.loadTexts: dot3MauType10BaseFL.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFL.setDescription('async fiber MAU. Note that it is strongly recommended that agents return either dot3MauType10BaseFLHD or dot3MauType10BaseFLFD if the duplex mode is known. However, management applications should be prepared to receive this MAU type value from older agent implementations.')
if mibBuilder.loadTexts: dot3MauType10BaseFL.setReference('[IEEE 802.3 Std.], Section 18')
dot3MauType10Broad36 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 9))
if mibBuilder.loadTexts: dot3MauType10Broad36.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10Broad36.setDescription('broadband DTE MAU. Note that 10BROAD36 MAUs can be attached to interfaces but not to repeaters.')
if mibBuilder.loadTexts: dot3MauType10Broad36.setReference('[IEEE 802.3 Std.], Section 11')
dot3MauType10BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 10))
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setDescription('UTP MAU, half duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setReference('[IEEE 802.3 Std.], Section 14')
dot3MauType10BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 11))
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setDescription('UTP MAU, full duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setReference('[IEEE 802.3 Std.], Section 14')
dot3MauType10BaseFLHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 12))
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setDescription('async fiber MAU, half duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setReference('[IEEE 802.3 Std.], Section 18')
dot3MauType10BaseFLFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 13))
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setDescription('async fiber MAU, full duplex mode')
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setReference('[IEEE 802.3 Std.], Section 18')
dot3MauType100BaseT4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 14))
if mibBuilder.loadTexts: dot3MauType100BaseT4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseT4.setDescription('4 pair category 3 UTP')
if mibBuilder.loadTexts: dot3MauType100BaseT4.setReference('[IEEE 802.3 Std.], Section 23')
dot3MauType100BaseTXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 15))
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setDescription('2 pair category 5 UTP, half duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setReference('[IEEE 802.3 Std.], Section 25')
dot3MauType100BaseTXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 16))
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setDescription('2 pair category 5 UTP, full duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setReference('[IEEE 802.3 Std.], Section 25')
dot3MauType100BaseFXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 17))
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setDescription('X fiber over PMT, half duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setReference('[IEEE 802.3 Std.], Section 26')
dot3MauType100BaseFXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 18))
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setDescription('X fiber over PMT, full duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setReference('[IEEE 802.3 Std.], Section 26')
dot3MauType100BaseT2HD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 19))
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setDescription('2 pair category 3 UTP, half duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setReference('[IEEE 802.3 Std.], Section 32')
dot3MauType100BaseT2FD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 20))
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setDescription('2 pair category 3 UTP, full duplex mode')
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setReference('[IEEE 802.3 Std.], Section 32')
dot3MauType1000BaseXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 21))
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setDescription('PCS/PMA, unknown PMD, half duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setReference('[IEEE 802.3 Std.], Section 36')
dot3MauType1000BaseXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 22))
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setDescription('PCS/PMA, unknown PMD, full duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setReference('[IEEE 802.3 Std.], Section 36')
dot3MauType1000BaseLXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 23))
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setDescription('Fiber over long-wavelength laser, half duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setReference('[IEEE 802.3 Std.], Section 38')
dot3MauType1000BaseLXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 24))
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setDescription('Fiber over long-wavelength laser, full duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setReference('[IEEE 802.3 Std.], Section 38')
dot3MauType1000BaseSXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 25))
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setDescription('Fiber over short-wavelength laser, half duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setReference('[IEEE 802.3 Std.], Section 38')
dot3MauType1000BaseSXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 26))
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setDescription('Fiber over short-wavelength laser, full duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setReference('[IEEE 802.3 Std.], Section 38')
dot3MauType1000BaseCXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 27))
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setDescription('Copper over 150-Ohm balanced cable, half duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setReference('[IEEE 802.3 Std.], Section 39')
dot3MauType1000BaseCXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 28))
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setDescription('Copper over 150-Ohm balanced cable, full duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setReference('[IEEE 802.3 Std.], Section 39')
dot3MauType1000BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 29))
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setDescription('Four-pair Category 5 UTP, half duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setReference('[IEEE 802.3 Std.], Section 40')
dot3MauType1000BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 30))
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setDescription('Four-pair Category 5 UTP, full duplex mode')
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setReference('[IEEE 802.3 Std.], Section 40')
dot3MauType10GigBaseX = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 31))
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setDescription('X PCS/PMA, unknown PMD.')
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setReference('[IEEE 802.3 Std.], Section 48')
dot3MauType10GigBaseLX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 32))
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setDescription('X fiber over WWDM optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setReference('[IEEE 802.3 Std.], Section 53')
dot3MauType10GigBaseR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 33))
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setDescription('R PCS/PMA, unknown PMD.')
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setReference('[IEEE 802.3 Std.], Section 49')
dot3MauType10GigBaseER = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 34))
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setDescription('R fiber over 1550 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setReference('[IEEE 802.3 Std.], Section 52')
dot3MauType10GigBaseLR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 35))
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setDescription('R fiber over 1310 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setReference('[IEEE 802.3 Std.], Section 52')
dot3MauType10GigBaseSR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 36))
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setDescription('R fiber over 850 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setReference('[IEEE 802.3 Std.], Section 52')
dot3MauType10GigBaseW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 37))
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setDescription('W PCS/PMA, unknown PMD.')
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setReference('[IEEE 802.3 Std.], Section 49 and 50')
dot3MauType10GigBaseEW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 38))
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setDescription('W fiber over 1550 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setReference('[IEEE 802.3 Std.], Section 52')
dot3MauType10GigBaseLW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 39))
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setDescription('W fiber over 1310 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setReference('[IEEE 802.3 Std.], Section 52')
dot3MauType10GigBaseSW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 40))
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setDescription('W fiber over 850 nm optics')
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setReference('[IEEE 802.3 Std.], Section 52')
dot3MauType10GigBaseCX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 41))
if mibBuilder.loadTexts: dot3MauType10GigBaseCX4.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10GigBaseCX4.setDescription('X copper over 8 pair 100-Ohm balanced cable')
if mibBuilder.loadTexts: dot3MauType10GigBaseCX4.setReference('[IEEE 802.3 Std.], Section 54')
dot3MauType2BaseTL = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 42))
if mibBuilder.loadTexts: dot3MauType2BaseTL.setStatus('current')
if mibBuilder.loadTexts: dot3MauType2BaseTL.setDescription('Voice grade UTP copper, up to 2700m ')
if mibBuilder.loadTexts: dot3MauType2BaseTL.setReference('[IEEE 802.3 Std.], Sections 61 and 63; [EFM-CU-MIB]')
dot3MauType10PassTS = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 43))
if mibBuilder.loadTexts: dot3MauType10PassTS.setStatus('current')
if mibBuilder.loadTexts: dot3MauType10PassTS.setDescription('Voice grade UTP copper, up to 750m')
if mibBuilder.loadTexts: dot3MauType10PassTS.setReference('[IEEE 802.3 Std.], Sections 61 and 62; [EFM-CU-MIB]')
dot3MauType100BaseBX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 44))
if mibBuilder.loadTexts: dot3MauType100BaseBX10D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseBX10D.setDescription('One single-mode fiber OLT')
if mibBuilder.loadTexts: dot3MauType100BaseBX10D.setReference('[IEEE 802.3 Std.], Section 58')
dot3MauType100BaseBX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 45))
if mibBuilder.loadTexts: dot3MauType100BaseBX10U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseBX10U.setDescription('One single-mode fiber ONU')
if mibBuilder.loadTexts: dot3MauType100BaseBX10U.setReference('[IEEE 802.3 Std.], Section 58')
dot3MauType100BaseLX10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 46))
if mibBuilder.loadTexts: dot3MauType100BaseLX10.setStatus('current')
if mibBuilder.loadTexts: dot3MauType100BaseLX10.setDescription('Two fiber')
if mibBuilder.loadTexts: dot3MauType100BaseLX10.setReference('[IEEE 802.3 Std.], Section 58')
dot3MauType1000BaseBX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 47))
if mibBuilder.loadTexts: dot3MauType1000BaseBX10D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10D.setDescription('One single-mode fiber OLT')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10D.setReference('[IEEE 802.3 Std.], Section 59')
dot3MauType1000BaseBX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 48))
if mibBuilder.loadTexts: dot3MauType1000BaseBX10U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10U.setDescription('One single-mode fiber ONU')
if mibBuilder.loadTexts: dot3MauType1000BaseBX10U.setReference('[IEEE 802.3 Std.], Section 59')
dot3MauType1000BaseLX10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 49))
if mibBuilder.loadTexts: dot3MauType1000BaseLX10.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BaseLX10.setDescription('Two fiber 10km')
if mibBuilder.loadTexts: dot3MauType1000BaseLX10.setReference('[IEEE 802.3 Std.], Section 59')
dot3MauType1000BasePX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 50))
if mibBuilder.loadTexts: dot3MauType1000BasePX10D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX10D.setDescription('One single-mode fiber OMP OLT 10km')
if mibBuilder.loadTexts: dot3MauType1000BasePX10D.setReference('[IEEE 802.3 Std.], Section 60')
dot3MauType1000BasePX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 51))
if mibBuilder.loadTexts: dot3MauType1000BasePX10U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX10U.setDescription('One single-mode fiber OMP ONU 10km')
if mibBuilder.loadTexts: dot3MauType1000BasePX10U.setReference('[IEEE 802.3 Std.], Section 60')
dot3MauType1000BasePX20D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 52))
if mibBuilder.loadTexts: dot3MauType1000BasePX20D.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX20D.setDescription('One single-mode fiber OMP OLT 20km')
if mibBuilder.loadTexts: dot3MauType1000BasePX20D.setReference('[IEEE 802.3 Std.], Section 60')
dot3MauType1000BasePX20U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 53))
if mibBuilder.loadTexts: dot3MauType1000BasePX20U.setStatus('current')
if mibBuilder.loadTexts: dot3MauType1000BasePX20U.setDescription('One single-mode fiber OMP ONU 20km')
if mibBuilder.loadTexts: dot3MauType1000BasePX20U.setReference('[IEEE 802.3 Std.], Section 60')
mibBuilder.exportSymbols("IANA-MAU-TC-MIB", dot3MauType1000BaseTFD=dot3MauType1000BaseTFD, PYSNMP_MODULE_ID=ianaMauTC, IANAifMauTypeListBits=IANAifMauTypeListBits, dot3MauTypeFoirl=dot3MauTypeFoirl, dot3MauType100BaseT2FD=dot3MauType100BaseT2FD, dot3MauType10Base5=dot3MauType10Base5, dot3MauType10GigBaseSR=dot3MauType10GigBaseSR, dot3MauType100BaseTXFD=dot3MauType100BaseTXFD, dot3MauType10GigBaseLR=dot3MauType10GigBaseLR, dot3MauType10BaseFB=dot3MauType10BaseFB, ianaMauTC=ianaMauTC, dot3MauType10Broad36=dot3MauType10Broad36, dot3MauType10GigBaseEW=dot3MauType10GigBaseEW, dot3MauType10BaseT=dot3MauType10BaseT, dot3MauType1000BasePX20D=dot3MauType1000BasePX20D, dot3MauType1000BaseXHD=dot3MauType1000BaseXHD, dot3MauType10BaseFLFD=dot3MauType10BaseFLFD, dot3MauType100BaseT4=dot3MauType100BaseT4, dot3MauType10GigBaseLX4=dot3MauType10GigBaseLX4, dot3MauType10BaseFLHD=dot3MauType10BaseFLHD, dot3MauType10GigBaseER=dot3MauType10GigBaseER, dot3MauType100BaseFXHD=dot3MauType100BaseFXHD, dot3MauType10GigBaseSW=dot3MauType10GigBaseSW, dot3MauType100BaseBX10U=dot3MauType100BaseBX10U, dot3MauType10GigBaseLW=dot3MauType10GigBaseLW, dot3MauType1000BasePX10D=dot3MauType1000BasePX10D, dot3MauType10BaseTHD=dot3MauType10BaseTHD, dot3MauType1000BaseBX10U=dot3MauType1000BaseBX10U, dot3MauType10Base2=dot3MauType10Base2, dot3MauType10BaseFL=dot3MauType10BaseFL, dot3MauType10BaseTFD=dot3MauType10BaseTFD, dot3MauType1000BaseBX10D=dot3MauType1000BaseBX10D, dot3MauType1000BaseXFD=dot3MauType1000BaseXFD, dot3MauType10GigBaseCX4=dot3MauType10GigBaseCX4, dot3MauType1000BaseCXFD=dot3MauType1000BaseCXFD, dot3MauType100BaseT2HD=dot3MauType100BaseT2HD, dot3MauTypeAUI=dot3MauTypeAUI, dot3MauType1000BaseLXHD=dot3MauType1000BaseLXHD, dot3MauType2BaseTL=dot3MauType2BaseTL, dot3MauType10PassTS=dot3MauType10PassTS, dot3MauType10GigBaseW=dot3MauType10GigBaseW, dot3MauType100BaseBX10D=dot3MauType100BaseBX10D, JackType=JackType, dot3MauType=dot3MauType, dot3MauType100BaseTXHD=dot3MauType100BaseTXHD, dot3MauType10GigBaseR=dot3MauType10GigBaseR, dot3MauType1000BaseTHD=dot3MauType1000BaseTHD, dot3MauType10BaseFP=dot3MauType10BaseFP, dot3MauType10GigBaseX=dot3MauType10GigBaseX, dot3MauType1000BaseCXHD=dot3MauType1000BaseCXHD, dot3MauType1000BaseLX10=dot3MauType1000BaseLX10, dot3MauType1000BaseLXFD=dot3MauType1000BaseLXFD, dot3MauType1000BasePX20U=dot3MauType1000BasePX20U, dot3MauType1000BaseSXFD=dot3MauType1000BaseSXFD, dot3MauType100BaseLX10=dot3MauType100BaseLX10, dot3MauType100BaseFXFD=dot3MauType100BaseFXFD, dot3MauType1000BaseSXHD=dot3MauType1000BaseSXHD, dot3MauType1000BasePX10U=dot3MauType1000BasePX10U)
