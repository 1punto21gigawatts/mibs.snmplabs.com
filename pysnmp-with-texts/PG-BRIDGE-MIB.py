#
# PySNMP MIB module PG-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PG-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Counter32, NotificationType, Gauge32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, mib_2, ModuleIdentity, TimeTicks, Bits, NotificationType, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Counter32", "NotificationType", "Gauge32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "mib-2", "ModuleIdentity", "TimeTicks", "Bits", "NotificationType", "Integer32", "IpAddress")
PhysAddress, TextualConvention, RowStatus, MacAddress, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "RowStatus", "MacAddress", "TruthValue", "DisplayString")
class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

pgsessionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 8))
if mibBuilder.loadTexts: pgsessionMIB.setLastUpdated('9812170000Z')
if mibBuilder.loadTexts: pgsessionMIB.setOrganization('Pairgain Technology')
if mibBuilder.loadTexts: pgsessionMIB.setContactInfo('Abbas Dadabhoy')
if mibBuilder.loadTexts: pgsessionMIB.setDescription('The module defines MIB for Bridge configuration and stats')
pgSessionPort = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1))
pgDot1dBase = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2))
pgDot1dBasePort = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3))
pgDot1dStpPort = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4))
pgDot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5))
pgDot1dStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6))
pgVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7))
pgSessionRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8))
pgIfindexToSlotPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9))
pgBridgePortToSlotPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10))
pgSessionPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1), )
if mibBuilder.loadTexts: pgSessionPortTable.setReference('')
if mibBuilder.loadTexts: pgSessionPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortTable.setDescription('A table that contains port database information for the Bridge/Router Engine. This table primarily applies to the logical port of ATM PVC in Avidia chassis')
pgSessionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortVpi"), (0, "PG-BRIDGE-MIB", "pgSessionPortVci"))
if mibBuilder.loadTexts: pgSessionPortEntry.setReference('')
if mibBuilder.loadTexts: pgSessionPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortEntry.setDescription('Entries in a table that contains port database information for the Bridge/Router Engine. This table primarily applies to the logical port of ATM PVC in Avidia chassis')
pgSessionInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionInstance.setReference('')
if mibBuilder.loadTexts: pgSessionInstance.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionInstance.setDescription('The following three Indexes refer to a Session Logical Port. pgSessionInstance The Bridge Instance Identifier. Multiple bridge instances may be running on the Avidia Chassis. This Object identifies which bridge instance the user wishes to address. pgSessionPortVpi On an AMC Card, this value is always 0. On an OC3 Card, this is the external VPI number. On Cell or Frame based Channel cards, this value is the internal VPI number of the PVC terminating into the Bridge slot. pgSessionPortVci On an AMC Card, this value is always between 1024 and (MAX_BRT_PVCIF -1) for WAN or the VLAN Identifier in which this ethernet port belongs. On an OC3 Card, this is the external VCI number. On Cell or Frame based Channel cards, this value is the internal VCI number of the PVC terminating into the Bridge slot. ')
pgSessionPortVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortVpi.setReference('')
if mibBuilder.loadTexts: pgSessionPortVpi.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortVpi.setDescription('The following three Indexes refer to a Session Logical Port. pgSessionInstance The Bridge Instance Identifier. Multiple bridge instances may be running on the Avidia Chassis. This Object identifies which bridge instance the user wishes to address. pgSessionPortVpi On an AMC Card, this value is always 0. On an OC3 Card, this is the external VPI number. On Cell or Frame based Channel cards, this value is the internal VPI number of the PVC terminating into the Bridge slot. pgSessionPortVci On an AMC Card, this value is always between 1024 and (MAX_BRT_PVCIF -1) for WAN or the VLAN Identifier in which this ethernet port belongs. On an OC3 Card, this is the external VCI number. On Cell or Frame based Channel cards, this value is the internal VCI number of the PVC terminating into the Bridge slot. ')
pgSessionPortVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortVci.setReference('')
if mibBuilder.loadTexts: pgSessionPortVci.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortVci.setDescription('The following three Indexes refer to a Session Logical Port. pgSessionInstance The Bridge Instance Identifier. Multiple bridge instances may be running on the Avidia Chassis. This Object identifies which bridge instance the user wishes to address. pgSessionPortVpi On an AMC Card, this value is always 0. On an OC3 Card, this is the external VPI number. On the Cell or Frame based Channel cards, this value is the internal VPI number of the PVC terminating into the Bridge slot. pgSessionPortVci On an AMC Card, this value is always between 1024 and (MAX_BRT_PVCIF -1) for WAN or the VLAN Identifier in which this ethernet port belongs. On an OC3 Card, this is the external VCI number. On the Cell or Frame based Channel cards, this value is the internal VCI number of the PVC terminating into the Bridge slot. ')
pgSessionPortSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortSlotNum.setReference('')
if mibBuilder.loadTexts: pgSessionPortSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortSlotNum.setDescription('The number of the remote (external) Card slot')
pgSessionPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortNum.setReference('')
if mibBuilder.loadTexts: pgSessionPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortNum.setDescription('The Physical Port number of the card, for which this logical port number is addressed. On an AMC Card, the values are 1 or 2 for Ethernet port 1 or 2. On an OC3 Card, the values are 1 or 2 for the OC3 line number. On Cell or Frame based Channel cards, the value is the physical xDSL port number.')
pgSessionPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortIfIndex.setReference('')
if mibBuilder.loadTexts: pgSessionPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortIfIndex.setDescription('This is the Interface Index returned by the Logical Layer Manager that is used to retrieve statistics (ifEntery) for the port defined in this MIB. A pgSessionPortIfIndex is created for each session Port. This object does not attach to the TCP/IP stack.')
pgSessionPortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortBridgePort.setReference('')
if mibBuilder.loadTexts: pgSessionPortBridgePort.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortBridgePort.setDescription('This is the bridge port number returned when a port is configured using the indexes for this row. This port is referenced by the Bridge code and other bridge-related configuration.')
pgSessionPortRouterGroupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortRouterGroupInterface.setReference('')
if mibBuilder.loadTexts: pgSessionPortRouterGroupInterface.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortRouterGroupInterface.setDescription('This object is an index into a row in the pgSessionRouterGroupTable that is created by the Logical Layer Manager. It is used to attach this session port to the TCP/IP stack. When a session port needs an IP route entry, a row is created in the pgSessionRouterGroupTable and its index is used in this MIB to map this session base port to the pgSessionGroupTable row.')
pgSessionPortVlanIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortVlanIdentifier.setReference('')
if mibBuilder.loadTexts: pgSessionPortVlanIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortVlanIdentifier.setDescription('The identifier of the 802.1q VLAN group to which this port belongs. The system always has a VLAN group entry defined with the group identifier value of 1.')
pgSessionPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortServiceType.setReference('')
if mibBuilder.loadTexts: pgSessionPortServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortServiceType.setDescription('This field shows the type of service enabled for the port. Bit Positions: 7 6 5 4 3 2 1 0 | | | | | ---- Bridging | ------------ Routing -------------------- PPP The services can be enabled or disabled by a logical OR with the existing value.')
pgSessionPortSubscriberName = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortSubscriberName.setReference('')
if mibBuilder.loadTexts: pgSessionPortSubscriberName.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortSubscriberName.setDescription('The name of the subscriber to whom this Port is assigned.')
pgSessionPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionPortRowStatus.setDescription('This object allows table entries to be created and deleted. The RowStatus should be out of the ACTIVE state for other columns to be modified.')
pgDot1dBaseTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1), )
if mibBuilder.loadTexts: pgDot1dBaseTable.setReference('')
if mibBuilder.loadTexts: pgDot1dBaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dBaseTable.setDescription('A table that contains global database information for the Bridge Engine.')
pgDot1dBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"))
if mibBuilder.loadTexts: pgDot1dBaseEntry.setReference('')
if mibBuilder.loadTexts: pgDot1dBaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dBaseEntry.setDescription('Table entries that contain global database information for the Bridge Engine.')
pgDot1dBaseBrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dBaseBrEnable.setReference('')
if mibBuilder.loadTexts: pgDot1dBaseBrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dBaseBrEnable.setDescription('Status of the Bridge. The Bridge code can be enabled or disabled based on this flag. This MIB is implementation dependent.')
pgDot1dBaseBrStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dBaseBrStpEnable.setReference('')
if mibBuilder.loadTexts: pgDot1dBaseBrStpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dBaseBrStpEnable.setDescription('The admin status of Spanning Tree Protocol. This object enables the user to run Spanning Tree.')
pgDot1dBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dBaseBridgeAddress.setReference('IEEE 802.1D-1990: Sections 6.4.1.1.3 and 3.12.5 -- dot1dBaseBridgeAddress')
if mibBuilder.loadTexts: pgDot1dBaseBridgeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dBaseBridgeAddress.setDescription('The MAC address used to create a unique identifier for the bridge. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required that this address be unique. When concatenated with dot1dStpPriority, a unique BridgeIdentifier is formed, for use by the Spanning Tree Protocol.')
pgDot1dBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dBaseNumPorts.setReference('IEEE 802.1D-1990: Section 6.4.1.1.3 -- dot1dBaseNumPorts')
if mibBuilder.loadTexts: pgDot1dBaseNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
pgDot1dBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dBaseType.setDescription('The type of bridging this bridge can perform. The type of bridging performed by a bridge is indicated by entries in the port table for the given type.')
pgDot1dTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpLearnedEntryDiscards.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: pgDot1dTpLearnedEntryDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpLearnedEntryDiscards.setDescription('The total number of Forwarding Database entries that have been or would have been learned, but have been discarded due to a lack of space in the Forwarding Database. If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full, reducing subnetwork performance. If this counter has a significant value but is not presently increasing, it indicates that the problem has occurred but is not persistent.')
pgDot1dTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dTpAgingTime.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: pgDot1dTpAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information. 802.1D-1990 recommends a default of 300 seconds.')
pgdot1dBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1), )
if mibBuilder.loadTexts: pgdot1dBasePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dBasePortTable.setDescription('A table that contains generic information about every port that is associated with this bridge. Transparent, source-route, and srt ports are included.')
pgdot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortBridgePort"))
if mibBuilder.loadTexts: pgdot1dBasePortEntry.setReference('IEEE 802.1D-1990: Section 6.4.2, 6.6.1')
if mibBuilder.loadTexts: pgdot1dBasePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dBasePortEntry.setDescription('A list of information for each port that is associated with the bridge.')
pgdot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePort.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dBasePort.setDescription('The logical port number of the port for which this entry contains bridge management information.')
pgdot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dBasePortIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this port.')
pgdot1dBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dBasePortCircuit.setDescription('For a port which (potentially) has the same dot1dBasePortIfIndex value as another port on the same bridge, this object contains the name of an object instance unique to this port. For example, in the case where multiple ports correspond one- to-one with multiple X.25 virtual circuits, this value might identify an object instance, such as the first instance, associated with the X.25 virtual circuit that corresponds to this port. For a port that has a unique dot1dBasePortIfIndex value , this object can have the value { 0 0 }.')
pgdot1dBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortDelayExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: pgdot1dBasePortDelayExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dBasePortDelayExceededDiscards.setDescription('The number of frames discarded by this port due to excessive transit delay through the bridge. It is incremented by both transparent and source route bridges.')
pgdot1dBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortMtuExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: pgdot1dBasePortMtuExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dBasePortMtuExceededDiscards.setDescription('The number of frames discarded by this port due to an excessive size. It is incremented by both transparent and source route bridges.')
pgdot1dStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1), )
if mibBuilder.loadTexts: pgdot1dStpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
pgdot1dStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortBridgePort"))
if mibBuilder.loadTexts: pgdot1dStpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
pgdot1dStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPort.setReference('IEEE 802.1D-1990: Section 6.8.2.1.2')
if mibBuilder.loadTexts: pgdot1dStpPort.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPort.setDescription('The logical number of the port for which this entry contains Spanning Tree Protocol management information.')
pgdot1dStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortPriority.setReference('IEEE 802.1D-1990: Section 4.5.5.1')
if mibBuilder.loadTexts: pgdot1dStpPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortPriority.setDescription('The value of the priority field that is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of dot1dStpPort.')
pgdot1dStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortState.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: pgdot1dStpPortState.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortState.setDescription("The port's current state as defined by the Spanning Tree Protocol application. This state controls what action a port takes when it receives a frame. If the bridge detects a port that is malfunctioning it places that port into the broken (6) state. Disabled ports (see dot1dStpPortEnable) have a value of disabled (1).")
pgdot1dStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortEnable.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: pgdot1dStpPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortEnable.setDescription('The enabled/disabled status of the port.')
pgdot1dStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortPathCost.setReference('IEEE 802.1D-1990: Section 4.5.5.3')
if mibBuilder.loadTexts: pgdot1dStpPortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortPathCost.setDescription('The path cost of this port. This cost is used to calculate the cost of paths that include this port that are directed toward the spanning tree root. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.')
pgdot1dStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.5.4')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
pgdot1dStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedCost.setReference('IEEE 802.1D-1990: Section 4.5.5.5')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
pgdot1dStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedBridge.setReference('IEEE 802.1D-1990: Section 4.5.5.6')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedBridge.setDescription("The Bridge Identifier of the port's Designated Bridge for this port's segment.")
pgdot1dStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedPort.setReference('IEEE 802.1D-1990: Section 4.5.5.7')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
pgdot1dStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
pgdot1dStpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgdot1dStpPortRowStatus.setDescription('This object allows table entries to be created and deleted. The RowStatus should be out of the ACTIVE state for other columns to be modified.')
pgDot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1), )
if mibBuilder.loadTexts: pgDot1dTpFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
pgDot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgDot1dTpFdbAddress"))
if mibBuilder.loadTexts: pgDot1dTpFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information.')
pgDot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpFdbAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: pgDot1dTpFdbAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpFdbAddress.setDescription('A unicast MAC address for which the bridge has forwarding and/or filtering information.')
pgDot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpFdbPort.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpFdbPort.setDescription("Either the value '0' or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of pgDot1dTpFdbAddress has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address (e.g. in the pgDot1dStaticTable). Implementors are encouraged to assign the port value to this object whenever it is learned, even for addresses for which the corresponding value of pgDot1dTpFdbStatus is not learned(3).")
pgDot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpFdbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpFdbStatus.setDescription("The status of this entry. The meanings of the values are: other(1) : none of the following. This includes the case in which some other MIB object (not the corresponding instance of pgDot1dTpFdbPort, nor an entry in the pgDot1dStaticTable) is being used to determine if and how frames addressed to the value of the corresponding instance of pgDot1dTpFdbAddress are being forwarded. invalid(2) : this entry is not longer valid (e.g., it was learned but has since aged-out), but has not yet been flushed from the table. learned(3) : the value of the corresponding instance of pgDot1dTpFdbPort was learned, and is being used. self(4) : the value of the corresponding instance of pgDot1dTpFdbAddress represents one of the bridge's addresses. The corresponding instance of pgDot1dTpFdbPort indicates which of the bridge's ports has this address. mgmt(5) : the value of the corresponding instance of pgDot1dTpFdbAddress is also the value of an existing instance of pgDot1dStaticAddress.")
pgDot1dTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2), )
if mibBuilder.loadTexts: pgDot1dTpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpPortTable.setDescription('A table that contains information about every port that is associated with this transparent bridge.')
pgDot1dTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgDot1dTpPort"))
if mibBuilder.loadTexts: pgDot1dTpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpPortEntry.setDescription('A list of information for each port of a transparent bridge.')
pgDot1dTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPort.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpPort.setDescription('The port number of the port for which this entry contains Transparent bridging management information.')
pgDot1dTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortMaxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpPortMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
pgDot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortInFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: pgDot1dTpPortInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpPortInFrames.setDescription('The number of frames that have been received by this port from its segment. Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
pgDot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortOutFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: pgDot1dTpPortOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpPortOutFrames.setDescription('The number of frames that have been transmitted by this port to its segment. Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
pgDot1dTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortInDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: pgDot1dTpPortInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dTpPortInDiscards.setDescription('Count of valid frames received which were discarded (i.e., filtered) by the Forwarding Process.')
pgDot1dStaticTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1), )
if mibBuilder.loadTexts: pgDot1dStaticTable.setReference('IEEE 802.1D-1990: Section 6.7.2')
if mibBuilder.loadTexts: pgDot1dStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dStaticTable.setDescription('A table containing filtering information configured into the bridge by (local or network) management, specifying the set of ports to which frames received from specific ports and containing specific destination addresses are allowed to be forwarded. The value of zero in this table as the port number from which frames with a specific destination address are received, is used to specify all ports for which there is no specific entry in this table for that particular destination address. Entries are valid for unicast and for group/broadcast addresses.')
pgDot1dStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgDot1dStaticAddress"), (0, "PG-BRIDGE-MIB", "pgDot1dStaticReceivePort"))
if mibBuilder.loadTexts: pgDot1dStaticEntry.setReference('IEEE 802.1D-1990: Section 6.7.2')
if mibBuilder.loadTexts: pgDot1dStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dStaticEntry.setDescription('Filtering information configured into the bridge by (local or network) management, specifying the set of ports to which frames received from a specific port and containing a specific destination address are allowed to be forwarded.')
pgDot1dStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: pgDot1dStaticAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dStaticAddress.setDescription("The destination MAC address in a frame to which this entry's filtering information applies. This object can take the value of a unicast address, a group address or the broadcast address.")
pgDot1dStaticReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticReceivePort.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dStaticReceivePort.setDescription("Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply. A value of zero indicates that this entry applies to all ports of the bridge for which there is no other applicable entry.")
pgDot1dStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticAllowedToGoTo.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dStaticAllowedToGoTo.setDescription("The set of ports to which frames received from a specific port, and destined for a specific MAC address, are allowed to be forwarded. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length.")
pgDot1dStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgDot1dStaticStatus.setDescription('This object indicates the status of this entry. The default value is permanent(3). other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object removes the corresponding entry. permanent(3) - this entry is currently in use and will remain so after the next reset of the bridge. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the bridge. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
pgVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1), )
if mibBuilder.loadTexts: pgVlanGroupTable.setReference('')
if mibBuilder.loadTexts: pgVlanGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgVlanGroupTable.setDescription('')
pgVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgBrVlanGroupIdentifier"))
if mibBuilder.loadTexts: pgVlanGroupEntry.setReference('')
if mibBuilder.loadTexts: pgVlanGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgVlanGroupEntry.setDescription('')
pgBrVlanGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupIdentifier.setReference('')
if mibBuilder.loadTexts: pgBrVlanGroupIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupIdentifier.setDescription('The value that defines the VLAN group indentifier. The system will always have a VLAN group entry defined with the group identifier value of 1.')
pgBrVlanGroupWanBcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupWanBcEnable.setReference('')
if mibBuilder.loadTexts: pgBrVlanGroupWanBcEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupWanBcEnable.setDescription('Flag that defines whether broadcast messages are allowed. When disabled, a packet with an unknown destination MAC address may not be flooded into the WAN ports.')
pgBrVlanGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupName.setReference('')
if mibBuilder.loadTexts: pgBrVlanGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupName.setDescription('String identifier to the VLAN group. Used only for display.')
pgBrVlanGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupMode.setReference('')
if mibBuilder.loadTexts: pgBrVlanGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupMode.setDescription('Determines whether data with a unicast MAC address can be forwarded between configured Vlans.')
pgBrVlanGroupTag = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupTag.setReference('')
if mibBuilder.loadTexts: pgBrVlanGroupTag.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupTag.setDescription('802.1Q enable/disable.')
pgBrVlanGroupStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpEnable.setReference('')
if mibBuilder.loadTexts: pgBrVlanGroupStpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpEnable.setDescription('STP status of the VLAN group. This object is not used until VLAN implementation is complete.')
pgBrVlanGroupStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpProtocolSpecification.setDescription("An indication of which Spanning Tree Protocol version is being run. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol. IEEE 802.1d implementations return 'ieee8021d(3)'. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version, a new value will be defined.")
pgBrVlanGroupStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpPriority.setReference('IEEE 802.1D-1990: Section 4.5.3.7 -- dot1dStpPriority')
if mibBuilder.loadTexts: pgBrVlanGroupStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are defined by the value of dot1dBaseBridgeAddress.')
pgBrVlanGroupStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpTimeSinceTopologyChange.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3 -- dot1dStpTimeSinceTopologyChange')
if mibBuilder.loadTexts: pgBrVlanGroupStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
pgBrVlanGroupStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpTopChanges.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3 -- dot1dStpTopChanges')
if mibBuilder.loadTexts: pgBrVlanGroupStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
pgBrVlanGroupStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.3.1 -- dot1dStpDesignatedRoot')
if mibBuilder.loadTexts: pgBrVlanGroupStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpDesignatedRoot.setDescription('The bridge identifier of the spanning tree root as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
pgBrVlanGroupStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpRootCost.setReference('IEEE 802.1D-1990: Section 4.5.3.2 -- dot1dStpRootCost')
if mibBuilder.loadTexts: pgBrVlanGroupStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
pgBrVlanGroupStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpRootPort.setReference('IEEE 802.1D-1990: Section 4.5.3.3 -- dot1dStpRootPort')
if mibBuilder.loadTexts: pgBrVlanGroupStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpRootPort.setDescription('The port number of the port that offers the lowest cost path from this bridge to the root bridge.')
pgBrVlanGroupStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.4 -- dot1dStpMaxAge')
if mibBuilder.loadTexts: pgBrVlanGroupStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
pgBrVlanGroupStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 15), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.5 -- dot1dStpHelloTime')
if mibBuilder.loadTexts: pgBrVlanGroupStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
pgBrVlanGroupStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpHoldTime.setReference('IEEE 802.1D-1990: Section 4.5.3.14 -- dot1dStpHoldTime')
if mibBuilder.loadTexts: pgBrVlanGroupStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
pgBrVlanGroupStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 17), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.6 -- dot1dStpForwardDelay')
if mibBuilder.loadTexts: pgBrVlanGroupStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpForwardDelay.setDescription('This time value, in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. (Note that this value is the one that this bridge is currently using, in contrast to dot1dStpBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.)')
pgBrVlanGroupStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 18), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.8 -- dot1dStpBridgeMaxAge')
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of pgBrVlanGroupStpBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
pgBrVlanGroupStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 19), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.9 -- dot1dStpBridgeHelloTime')
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D- 1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
pgBrVlanGroupStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 20), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.10 -- dot1dStpBridgeForwardDelay')
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of dot1dStpBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value that is not a whole number of seconds.')
pgBrVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 21), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgBrVlanGroupRowStatus.setDescription('This object allows table entries to be created and deleted. The RowStatus should be out of the ACTIVE state for other columns to be modified.')
pgSessionRouterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1), )
if mibBuilder.loadTexts: pgSessionRouterGroupTable.setReference('')
if mibBuilder.loadTexts: pgSessionRouterGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionRouterGroupTable.setDescription('This row is used to create an IP route for the TCP/IP stack using a Logical Layer Interface. The pgSessionGroupIfIndex is used to map a row in the pgSessionPortTable to this Group Interface. The name suggests that multiple instances of pgSessionPortEntry can be grouped into a single pgSessionRouterGroupEntry to save on IP address space.')
pgSessionRouterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortRouterGroupInterface"))
if mibBuilder.loadTexts: pgSessionRouterGroupEntry.setReference('')
if mibBuilder.loadTexts: pgSessionRouterGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionRouterGroupEntry.setDescription('')
pgSessionGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionGroupIpAddress.setReference('')
if mibBuilder.loadTexts: pgSessionGroupIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionGroupIpAddress.setDescription('IP address of this interface')
pgSessionGroupSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionGroupSubnetMask.setReference('')
if mibBuilder.loadTexts: pgSessionGroupSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionGroupSubnetMask.setDescription('Subnet mask of the LAN into which this interface belongs.')
pgSessionGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionGroupRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgSessionGroupRowStatus.setDescription('This object allows table entries to be created and deleted. The RowStatus should be out of the ACTIVE state for other columns to be modified.')
pgIfindexToSlotPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1), )
if mibBuilder.loadTexts: pgIfindexToSlotPortMapTable.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapTable.setDescription('A table that contains mapping between the ifIndex and solt, port, VPI, and VCI values of the remote side.')
pgIfindexToSlotPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgIfindexToSlotPortMapEntry.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapEntry.setDescription('A table that contains mapping between the ifIndex and solt, port, internal VPI, internal VCI, external VPI, and external VCI values of the remote side.')
pgIfindexToSlotPortMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapSlot.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapSlot.setDescription('The slot number of the remote device of the PVC between the device and the AMC.')
pgIfindexToSlotPortMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapPort.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapPort.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapPort.setDescription('The port number of the remote device of the PVC between the device and the AMC.')
pgIfindexToSlotPortMapIntVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVpi.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVpi.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVpi.setDescription('The internal VPI number of the AMC.')
pgIfindexToSlotPortMapIntVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVci.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVci.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVci.setDescription('The internal VCI number of the AMC.')
pgIfindexToSlotPortMapExtVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVpi.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVpi.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVpi.setDescription('The external VPI number of the remote device of the PVC between the device and the AMC.')
pgIfindexToSlotPortMapExtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVci.setReference('')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVci.setStatus('mandatory')
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVci.setDescription('The external VCI number of the remote device of the PVC between the device and the AMC.')
pgBridgePortToSlotPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1), )
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapTable.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapTable.setDescription('A table that contains mapping between a BridgePort and the remote solt, port, VPI, and VCI.')
pgBridgePortToSlotPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortBridgePort"))
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapEntry.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapEntry.setDescription('A table that contains mapping between a BridgePort and the remote solt, port, internal VPI, internal VCI, external VPI, and external VCI values of the remote side.')
pgBridgePortToSlotPortMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapSlot.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapSlot.setDescription('The slot number of the remote device of the PVC between the device and the AMC.')
pgBridgePortToSlotPortMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapPort.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapPort.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapPort.setDescription('The port number of the remote device of the PVC between the device and the AMC.')
pgBridgePortToSlotPortMapIntVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVpi.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVpi.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVpi.setDescription('The internal VPI number of the AMC. ')
pgBridgePortToSlotPortMapIntVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVci.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVci.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVci.setDescription('The internal VCI number of the AMC. ')
pgBridgePortToSlotPortMapExtVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVpi.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVpi.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVpi.setDescription('The external VPI number of the remote device of the PVC between the device and the AMC.')
pgBridgePortToSlotPortMapExtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVci.setReference('')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVci.setStatus('mandatory')
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVci.setDescription('The external VCI number of the remote device of the PVC between the device and the AMC.')
mibBuilder.exportSymbols("PG-BRIDGE-MIB", pgdot1dBasePortEntry=pgdot1dBasePortEntry, pgSessionPortEntry=pgSessionPortEntry, pgBrVlanGroupStpTimeSinceTopologyChange=pgBrVlanGroupStpTimeSinceTopologyChange, pgDot1dBaseEntry=pgDot1dBaseEntry, pgBrVlanGroupStpPriority=pgBrVlanGroupStpPriority, pgBrVlanGroupStpMaxAge=pgBrVlanGroupStpMaxAge, pgBrVlanGroupStpRootPort=pgBrVlanGroupStpRootPort, pgSessionRouterGroupEntry=pgSessionRouterGroupEntry, pgBridgePortToSlotPortMapExtVci=pgBridgePortToSlotPortMapExtVci, pgIfindexToSlotPortMap=pgIfindexToSlotPortMap, pgDot1dTpAgingTime=pgDot1dTpAgingTime, pgdot1dStpPortEnable=pgdot1dStpPortEnable, pgDot1dTpFdbAddress=pgDot1dTpFdbAddress, pgIfindexToSlotPortMapIntVci=pgIfindexToSlotPortMapIntVci, pgBrVlanGroupStpDesignatedRoot=pgBrVlanGroupStpDesignatedRoot, pgDot1dStaticTable=pgDot1dStaticTable, pgDot1dTpPortTable=pgDot1dTpPortTable, pgdot1dStpPortDesignatedPort=pgdot1dStpPortDesignatedPort, pgDot1dBaseType=pgDot1dBaseType, pgBridgePortToSlotPortMapPort=pgBridgePortToSlotPortMapPort, pgBridgePortToSlotPortMap=pgBridgePortToSlotPortMap, pgdot1dStpPortPathCost=pgdot1dStpPortPathCost, pgdot1dBasePortMtuExceededDiscards=pgdot1dBasePortMtuExceededDiscards, pgDot1dStaticReceivePort=pgDot1dStaticReceivePort, pgBrVlanGroupStpTopChanges=pgBrVlanGroupStpTopChanges, pgSessionInstance=pgSessionInstance, pgdot1dBasePortIfIndex=pgdot1dBasePortIfIndex, pgdot1dStpPortForwardTransitions=pgdot1dStpPortForwardTransitions, pgDot1dBaseBrStpEnable=pgDot1dBaseBrStpEnable, pgBrVlanGroupTag=pgBrVlanGroupTag, pgBridgePortToSlotPortMapTable=pgBridgePortToSlotPortMapTable, pgSessionPortSubscriberName=pgSessionPortSubscriberName, pgSessionPortVci=pgSessionPortVci, pgBridgePortToSlotPortMapIntVci=pgBridgePortToSlotPortMapIntVci, pgVlanGroupTable=pgVlanGroupTable, pgSessionPortTable=pgSessionPortTable, pgDot1dBaseBrEnable=pgDot1dBaseBrEnable, pgDot1dStatic=pgDot1dStatic, pgSessionGroupRowStatus=pgSessionGroupRowStatus, pgBridgePortToSlotPortMapExtVpi=pgBridgePortToSlotPortMapExtVpi, pgIfindexToSlotPortMapPort=pgIfindexToSlotPortMapPort, pgDot1dTpFdbPort=pgDot1dTpFdbPort, pgIfindexToSlotPortMapTable=pgIfindexToSlotPortMapTable, pgBrVlanGroupStpProtocolSpecification=pgBrVlanGroupStpProtocolSpecification, pgDot1dStaticAddress=pgDot1dStaticAddress, pgSessionPortServiceType=pgSessionPortServiceType, pgIfindexToSlotPortMapExtVci=pgIfindexToSlotPortMapExtVci, pgVlanGroupEntry=pgVlanGroupEntry, pgSessionRouterGroupTable=pgSessionRouterGroupTable, pgBrVlanGroupStpForwardDelay=pgBrVlanGroupStpForwardDelay, pgBridgePortToSlotPortMapSlot=pgBridgePortToSlotPortMapSlot, pgSessionPortSlotNum=pgSessionPortSlotNum, pgDot1dTpFdbEntry=pgDot1dTpFdbEntry, pgBrVlanGroupStpHoldTime=pgBrVlanGroupStpHoldTime, pgDot1dTpPortInDiscards=pgDot1dTpPortInDiscards, pgSessionPortNum=pgSessionPortNum, pgdot1dStpPortDesignatedRoot=pgdot1dStpPortDesignatedRoot, pgSessionPort=pgSessionPort, pgBrVlanGroupMode=pgBrVlanGroupMode, pgsessionMIB=pgsessionMIB, pgBridgePortToSlotPortMapEntry=pgBridgePortToSlotPortMapEntry, pgBrVlanGroupStpBridgeHelloTime=pgBrVlanGroupStpBridgeHelloTime, pgdot1dBasePortCircuit=pgdot1dBasePortCircuit, pgdot1dStpPort=pgdot1dStpPort, Timeout=Timeout, pgdot1dStpPortTable=pgdot1dStpPortTable, pgBrVlanGroupStpHelloTime=pgBrVlanGroupStpHelloTime, pgIfindexToSlotPortMapSlot=pgIfindexToSlotPortMapSlot, pgDot1dBaseTable=pgDot1dBaseTable, pgDot1dTpPortEntry=pgDot1dTpPortEntry, pgBrVlanGroupName=pgBrVlanGroupName, pgSessionPortRowStatus=pgSessionPortRowStatus, pgdot1dStpPortDesignatedBridge=pgdot1dStpPortDesignatedBridge, pgSessionGroupSubnetMask=pgSessionGroupSubnetMask, pgBrVlanGroupWanBcEnable=pgBrVlanGroupWanBcEnable, pgSessionPortIfIndex=pgSessionPortIfIndex, pgDot1dTpPortMaxInfo=pgDot1dTpPortMaxInfo, pgVlanGroup=pgVlanGroup, pgBrVlanGroupStpBridgeForwardDelay=pgBrVlanGroupStpBridgeForwardDelay, PYSNMP_MODULE_ID=pgsessionMIB, pgIfindexToSlotPortMapEntry=pgIfindexToSlotPortMapEntry, pgdot1dStpPortState=pgdot1dStpPortState, pgDot1dStaticEntry=pgDot1dStaticEntry, pgIfindexToSlotPortMapExtVpi=pgIfindexToSlotPortMapExtVpi, pgDot1dTp=pgDot1dTp, pgDot1dTpFdbStatus=pgDot1dTpFdbStatus, pgdot1dStpPortRowStatus=pgdot1dStpPortRowStatus, pgdot1dBasePortTable=pgdot1dBasePortTable, pgSessionPortVpi=pgSessionPortVpi, pgDot1dBaseBridgeAddress=pgDot1dBaseBridgeAddress, pgSessionRouterGroup=pgSessionRouterGroup, pgDot1dTpPort=pgDot1dTpPort, pgBrVlanGroupIdentifier=pgBrVlanGroupIdentifier, pgBrVlanGroupRowStatus=pgBrVlanGroupRowStatus, pgDot1dStaticStatus=pgDot1dStaticStatus, pgDot1dTpLearnedEntryDiscards=pgDot1dTpLearnedEntryDiscards, pgBrVlanGroupStpBridgeMaxAge=pgBrVlanGroupStpBridgeMaxAge, pgDot1dBase=pgDot1dBase, pgSessionGroupIpAddress=pgSessionGroupIpAddress, pgDot1dStpPort=pgDot1dStpPort, pgdot1dStpPortEntry=pgdot1dStpPortEntry, pgdot1dStpPortPriority=pgdot1dStpPortPriority, pgDot1dBaseNumPorts=pgDot1dBaseNumPorts, pgdot1dBasePort=pgdot1dBasePort, pgDot1dTpFdbTable=pgDot1dTpFdbTable, pgDot1dStaticAllowedToGoTo=pgDot1dStaticAllowedToGoTo, pgdot1dBasePortDelayExceededDiscards=pgdot1dBasePortDelayExceededDiscards, pgDot1dBasePort=pgDot1dBasePort, BridgeId=BridgeId, pgBrVlanGroupStpEnable=pgBrVlanGroupStpEnable, pgSessionPortRouterGroupInterface=pgSessionPortRouterGroupInterface, pgDot1dTpPortOutFrames=pgDot1dTpPortOutFrames, pgDot1dTpPortInFrames=pgDot1dTpPortInFrames, pgdot1dStpPortDesignatedCost=pgdot1dStpPortDesignatedCost, pgBrVlanGroupStpRootCost=pgBrVlanGroupStpRootCost, pgIfindexToSlotPortMapIntVpi=pgIfindexToSlotPortMapIntVpi, pgBridgePortToSlotPortMapIntVpi=pgBridgePortToSlotPortMapIntVpi, pgSessionPortBridgePort=pgSessionPortBridgePort, pgSessionPortVlanIdentifier=pgSessionPortVlanIdentifier)
