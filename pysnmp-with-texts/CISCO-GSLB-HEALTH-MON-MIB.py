#
# PySNMP MIB module CISCO-GSLB-HEALTH-MON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GSLB-HEALTH-MON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cgdAnswerId, = mibBuilder.importSymbols("CISCO-GSLB-DNS-MIB", "cgdAnswerId")
CiscoGslbKeepaliveMethod, CiscoGslbKalapType, CiscoGslbKeepaliveStatus, CiscoGslbKeepaliveRate, CiscoGslbTerminationMethod, CiscoGslbKeepaliveTargetType = mibBuilder.importSymbols("CISCO-GSLB-TC-MIB", "CiscoGslbKeepaliveMethod", "CiscoGslbKalapType", "CiscoGslbKeepaliveStatus", "CiscoGslbKeepaliveRate", "CiscoGslbTerminationMethod", "CiscoGslbKeepaliveTargetType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
ObjectIdentity, Gauge32, Bits, MibIdentifier, Counter32, iso, Integer32, ModuleIdentity, TimeTicks, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Bits", "MibIdentifier", "Counter32", "iso", "Integer32", "ModuleIdentity", "TimeTicks", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64")
TextualConvention, RowStatus, TruthValue, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString", "StorageType")
ciscoGslbHealthMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 600))
ciscoGslbHealthMonMIB.setRevisions(('2007-04-09 00:00', '2006-12-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGslbHealthMonMIB.setRevisionsDescriptions(('-Added the following objects to ciscoGslbGeneralConfigGroup: cghMonDroppedKalNotifs cghMonKalTrapRateLimit -Added a new group ciscoGslbGeneralConfigRateLimitGroup.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGslbHealthMonMIB.setLastUpdated('200704090000Z')
if mibBuilder.loadTexts: ciscoGslbHealthMonMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGslbHealthMonMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-slb@cisco.com')
if mibBuilder.loadTexts: ciscoGslbHealthMonMIB.setDescription("The MIB defines objects related to global keepalive properties in GSLB devices. It contains the tables for keep alive configuration and statistics. It also defines related notifications. Acronyms and their description: Keepalive : Keepalive is a method by which the GSLB device periodically checks to see if a resource associated with an answer is still active. The action of checking is known as a keepalive probe. Shared -keepalive : The GSLB device supports the use of shared keepalives to minimize traffic between the GSLB device and the SLBs(Server Load Balancing) that it is monitoring. A shared keepalive identifies a common IP address or resource that provides status for multiple answers. Shared keepalives periodically provide state information (online, offline) of the resources to the GSLB device. VIP : Virtual IP Addresses are used by SLBs to represent content hosted on one or more servers under their control. The use of VIPs is to route content to the proper requesting host without exposing the device's internal IP address. CAPP : Content Application Peering Protocol(CAPP) is a protocol used for intercommunication between content switching devices. Answer : Refers to resources to which the GSLB device resolves DNS requests that it receives. There are three possible types of answers: Virtual IP (VIP) : Addresses associated with a SLB, a web server, a cache, etc. Name Server (NS) : Configured DNS name server on the network that can answer queries that the GSLB device can not resolve. Content Routing : A device which uses a Agent (CRA) resolution process called DNS race to send identical and simultaneous responses back to client D-proxy for proximity determination. HTTPHEAD : The HTTP HEAD keepalive type sends a TCP format HTTP HEAD request to a web server at an address you specify, returning the online status of the device (in the form of a 200 response) as well as information on the web page status and content size.")
ciscoGslbHealthMonMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 0))
ciscoGslbHealthMonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 1))
ciscoGslbHealthMonMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 2))
cghMonNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 1))
cghMonNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 2))
cghMonKalGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3))
cghMonKal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4))
cghMonNsQueryDomainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 1), SnmpAdminString().clone('.')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cghMonNsQueryDomainName.setStatus('current')
if mibBuilder.loadTexts: cghMonNsQueryDomainName.setDescription("This object specifies the default doman name for a keepalive identified by cghMonKalMethod value of 'ns'.")
cghMonCappHash = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 2), SnmpAdminString().clone('hash-not-set')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cghMonCappHash.setStatus('current')
if mibBuilder.loadTexts: cghMonCappHash.setDescription("This object specifies the default alphanumeric value used to encrypt CAPP data. A keepalive with cghMonKalMethod as 'kalap' uses CAPP for inter-communication between GSLB devices.")
cghMonHttpHeadPath = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 3), SnmpAdminString().clone('/')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cghMonHttpHeadPath.setStatus('current')
if mibBuilder.loadTexts: cghMonHttpHeadPath.setDescription("This object specifies the default path relative to the server website, for a keepalive with cghMonKalMethod as 'httphead'.")
cghMonHttpHeadConnTermMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 4), CiscoGslbTerminationMethod().clone('reset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cghMonHttpHeadConnTermMethod.setStatus('current')
if mibBuilder.loadTexts: cghMonHttpHeadConnTermMethod.setDescription("This object specifies the default connection termination method for a keepalive with cghMonKalMethod as 'httphead'.")
cghMonTcpConnTermMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 5), CiscoGslbTerminationMethod().clone('reset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cghMonTcpConnTermMethod.setStatus('current')
if mibBuilder.loadTexts: cghMonTcpConnTermMethod.setDescription("This object specifies the default connection termination method for a keepalive with cghMonKalMethod as 'tcp'.")
cghMonCraDecay = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cghMonCraDecay.setStatus('current')
if mibBuilder.loadTexts: cghMonCraDecay.setDescription("This object is used for a keepalive with cghMonKalMethod as 'cra', to specify how heavily GSLB should weigh recent DNS Round Trip Time (RTT) probe results relative to earlier RTT metrics, with 1 indicating that recent results should not be weighed any more than previous RTT results.")
cghMonTotalConfiguredProbes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonTotalConfiguredProbes.setStatus('current')
if mibBuilder.loadTexts: cghMonTotalConfiguredProbes.setDescription('This object specifies the total number of keepalive probes configured on the GSLB device by the administrator. This value corresponds to the number of entries in the cghMonKalConfigTable.')
cghMonDroppedKalNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 8), Unsigned32()).setUnits('traps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonDroppedKalNotifs.setStatus('current')
if mibBuilder.loadTexts: cghMonDroppedKalNotifs.setDescription('The value of this object is the total number of ciscoGslbKalEventStatus notifications dropped since the network management portion of the system was last re-initialized. These notifications are dropped when the limit configured in cghMonKalTrapRateLimit is reached.')
cghMonKalTrapRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setUnits('traps per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalTrapRateLimit.setStatus('current')
if mibBuilder.loadTexts: cghMonKalTrapRateLimit.setDescription('This object specifies the maximum rate at which the ciscoGslbKalEventStatus notifications can be sent.')
cghMonKalParameterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10), )
if mibBuilder.loadTexts: cghMonKalParameterTable.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterTable.setDescription('This table is used to configure the default parameters associated with each keepalive method, identified by cghMonKalParameterMethod.')
cghMonKalParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1), ).setIndexNames((0, "CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterMethod"))
if mibBuilder.loadTexts: cghMonKalParameterEntry.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterEntry.setDescription("An entry in cghMonKalParameterTable. Each entry contains default values for a keepalive probe method, identified by cghMonKalParameterMethod. Entries can be added/modified/deleted by administrator action. If the value of cghMonKalParameterStorageType is 'permanent' then the corresponding entry cannot be deleted.")
cghMonKalParameterMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 1), CiscoGslbKeepaliveMethod())
if mibBuilder.loadTexts: cghMonKalParameterMethod.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterMethod.setDescription('This object specifies the method used for the keepalive.')
cghMonKalParameterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 2), CiscoGslbKeepaliveRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterRate.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterRate.setDescription("This object specifies the global rate setting for a keepalive method, identified by cghMonKalParameterMethod. It is not valid when cghMonKalParameterMethod is 'ns' or 'cra'.")
cghMonKalParameterMinimumFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterMinimumFrequency.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterMinimumFrequency.setDescription("This object specifies the minimum interval with which the GSLB device attempts to schedule keepalives. It is valid when cghMonKalParameterMethod is 'cra' or 'ns'. And also, it is valid when cghMonKalParameterMethod is 'tcp', 'icmp', 'httphead' or 'kalap', provided cghMonKalParameterRate is 'standard'.")
cghMonKalParameterResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterResponseTimeout.setDescription("This object specifies the length of time allowed before retransmission of data to a device that is not responding to a request. This object is valid when cghMonKalParameterMethod is 'tcp' or 'httphead', provided cghMonKalParameterRate is 'standard'.")
cghMonKalParameterFastRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('retries').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterFastRetries.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterFastRetries.setDescription("This object specifies the number of times that the GSLB device retransmits a packet before declaring an answer offline. This object is valid when cghMonKalParameterRate is 'fast'.")
cghMonKalParameterFastSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('probes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterFastSuccessfulProbes.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterFastSuccessfulProbes.setDescription("This object specifies the number of consecutive successful keepalive attempts (probes) that must be recognized by the GSLB device before bringing an answer back online (and reintroducing it into the GSLB network). This object is valid when cghMonKalParameterRate is 'fast'.")
cghMonKalParameterDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 7), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterDestPort.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalParameterDestPort.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterDestPort.setDescription("This object specifies the port on the remote device, identified by cgdAnswerAddress, to which the keepalive is sent. This object is valid when cghMonKalParameterMethod is 'tcp' or 'httphead'.")
cghMonKalParameterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterStorageType.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterStorageType.setDescription("This object specifies the storage type for this conceptual row. If the value of this object in the row is 'permanent', then that corresponding row cannot be deleted, it can only be modified.")
cghMonKalParameterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 3, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalParameterRowStatus.setStatus('current')
if mibBuilder.loadTexts: cghMonKalParameterRowStatus.setDescription('This object is used to create/delete an entry in the cghMonKalParameterTable.')
cghMonKalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1), )
if mibBuilder.loadTexts: cghMonKalConfigTable.setStatus('current')
if mibBuilder.loadTexts: cghMonKalConfigTable.setDescription('This table is used for configuring keepalives. It consists a list of configuration entries for each keepalive configured.')
cghMonKalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalId"))
if mibBuilder.loadTexts: cghMonKalConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cghMonKalConfigEntry.setDescription('An entry containing configuration entities for a keepalive instance. Entries can be added/deleted/modified by administrator action. The following objects are mandatory for a row creation: cghMonKalMethod cghMonKalTargetType.')
cghMonKalId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cghMonKalId.setStatus('current')
if mibBuilder.loadTexts: cghMonKalId.setDescription('This object uniquely identifies a keepalive.')
cghMonKalTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 2), CiscoGslbKeepaliveTargetType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalTargetType.setStatus('current')
if mibBuilder.loadTexts: cghMonKalTargetType.setDescription('This object specifies the answer type to which this keepalive is associated.')
cghMonKalMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 3), CiscoGslbKeepaliveMethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalMethod.setStatus('current')
if mibBuilder.loadTexts: cghMonKalMethod.setDescription('This object specifies the keepalive method.')
cghMonKalAnswerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalAnswerId.setReference('cgdAnswerTable from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalAnswerId.setStatus('current')
if mibBuilder.loadTexts: cghMonKalAnswerId.setDescription("This object is used to associate an answer with this keepalive instance. Its value must be same as the value configured in cgdAnswerTable. This object is mandatory for a row creation, the only expection being when cghMonKalTargetType has a value 'shared'.")
cghMonKalPrimaryTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalPrimaryTargetType.setStatus('current')
if mibBuilder.loadTexts: cghMonKalPrimaryTargetType.setDescription('This object specifies the primary target device IP address type used by this keepalive.')
cghMonKalPrimaryTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalPrimaryTarget.setStatus('current')
if mibBuilder.loadTexts: cghMonKalPrimaryTarget.setDescription("This object specifies the primary target device IP address used by this keepalive. The type of IP address is identified by cghMonKalPrimaryTargetType. This object is mandatory provided cghMonKalTargetType is 'shared'.")
cghMonKalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalEnable.setStatus('current')
if mibBuilder.loadTexts: cghMonKalEnable.setDescription("This object is used to activate/deactivate a keepalive by setting the state to either 'true'/'false' respectively.")
cghMonKalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalDelay.setStatus('current')
if mibBuilder.loadTexts: cghMonKalDelay.setDescription("This object specifies one-way delay time in milliseconds. This value is used by the GSLB device to calculate a static round-trip time (RTT), with the one-way delay constituting one-half of the round-trip time. This object is valid when cghMonKalMethod is 'cra' provided cghMonKalEnable is 'false'.")
cghMonKalKalapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 9), CiscoGslbKalapType().clone('kalapByVip')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalKalapType.setStatus('current')
if mibBuilder.loadTexts: cghMonKalKalapType.setDescription("This object specifies the type of kalap for a keepalive. This object is valid when cghMonKalTargetType is 'kalap'.")
cghMonKalTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalTagName.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalTagName.setStatus('current')
if mibBuilder.loadTexts: cghMonKalTagName.setDescription("This object specifies the tag for identifying a specific target, identified by cgdAnswerAddress object, on content switching device. This object is valid when cghMonKalMethod is 'kalap' provided cghMonKalKalapType is 'kalapByTag'.")
cghMonKalDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 11), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalDestPort.setStatus('current')
if mibBuilder.loadTexts: cghMonKalDestPort.setDescription('This object specifies the port on the remote device that is to receive the TCP/HTTPHEAD keepalive probe from the GSLB device. The default value for this object is got from cghMonKalParameterDestPort in the default properties table (cghMonKalParameterTable).')
cghMonKalCappSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalCappSecure.setStatus('current')
if mibBuilder.loadTexts: cghMonKalCappSecure.setDescription("This object specifies whether or not the keepalive uses CAPP encryption. This object is valid when cghMonKalMethod is 'kalap'.")
cghMonKalCappHash = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalCappHash.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalCappHash.setStatus('current')
if mibBuilder.loadTexts: cghMonKalCappHash.setDescription("This object specifies the alphanumeric value used to encrypt interbox communications, which uses CAPP. The same value needs to be the configured on the remote GSLB device, identified by cgdAnswerAddress . This object is valid when cghMonKalMethod is 'kalap' provided cghMonKalCappSecure is 'true'. The default for this object is the value of cghMonCappHash.")
cghMonKalQueryDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalQueryDomainName.setStatus('current')
if mibBuilder.loadTexts: cghMonKalQueryDomainName.setDescription('This object specifies the name of the domain name server to which an ns keepalive is sent. The default for this object is the value of cghMonNsQueryDomainName.')
cghMonKalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 15), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalPath.setStatus('current')
if mibBuilder.loadTexts: cghMonKalPath.setDescription('This object specifies the server website queried in HTTPHEAD keepalive. The default for this object is the value of cghMonHttpHeadPath.')
cghMonKalHostTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalHostTag.setStatus('current')
if mibBuilder.loadTexts: cghMonKalHostTag.setDescription("This object specifies an optional domain name that is sent to the VIP as part of the HTTPHEAD query. This tag allows an SLB to resolve the keepalive request to a particular website even when multiple sites are represented by the same VIP. This is object is valid when cghMonKalMethod is 'httphead'.")
cghMonKalSecondaryTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 17), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalSecondaryTargetType.setStatus('current')
if mibBuilder.loadTexts: cghMonKalSecondaryTargetType.setDescription("This object specifies the secondary target device IP address type used by this keepalive. This object is valid when cghMonKalMethod is 'kalap'.")
cghMonKalSecondaryTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 18), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalSecondaryTarget.setStatus('current')
if mibBuilder.loadTexts: cghMonKalSecondaryTarget.setDescription("This object specifies the secondary target device IP address used by this keepalive. The type of IP address is identified by cghMonKalSecondaryTargetType object. Secondary target is used when the primary target is not available. This object is valid when cghMonKalMethod is 'kalap'.")
cghMonKalFastRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 19), Unsigned32()).setUnits('retries').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalFastRetries.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalFastRetries.setStatus('current')
if mibBuilder.loadTexts: cghMonKalFastRetries.setDescription('This object specifies the number of times the GSLB device retransmits a keepalive probe before declaring the target, identified by cgdAnswerAddress, offline. The value of this object is by default got from the default properties table (cghMonKalParameterTable), from the row identified by cghMonKalMethod.')
cghMonKalFastSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 20), Unsigned32()).setUnits('probes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalFastSuccessfulProbes.setStatus('current')
if mibBuilder.loadTexts: cghMonKalFastSuccessfulProbes.setDescription('This object specifies the number of consecutive successful keepalive attempts that must be recognized by the GSLB device before bringing an answer back online. The value of this object is by default got from the default properties table (cghMonKalParameterTable), from the row identified by cghMonKalMethod.')
cghMonKalStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 21), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalStorageType.setStatus('current')
if mibBuilder.loadTexts: cghMonKalStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cghMonKalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 1, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalRowStatus.setStatus('current')
if mibBuilder.loadTexts: cghMonKalRowStatus.setDescription('This object is used to create/delete an entry in the cghMonKalConfigTable.')
cghMonKalSharedAnswerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 2), )
if mibBuilder.loadTexts: cghMonKalSharedAnswerTable.setStatus('current')
if mibBuilder.loadTexts: cghMonKalSharedAnswerTable.setDescription('This table is used for associating a shared keepalive with an answer.')
cghMonKalSharedAnswerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdAnswerId"), (0, "CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalId"))
if mibBuilder.loadTexts: cghMonKalSharedAnswerEntry.setStatus('current')
if mibBuilder.loadTexts: cghMonKalSharedAnswerEntry.setDescription('An entry containing the per shared keepalive to answer association. Entries can be added/deleted by administrator action. Entries are added when a shared keepalive is required to be associated with an answer.')
cghMonKalShAnsStoragetype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 2, 1, 1), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalShAnsStoragetype.setStatus('current')
if mibBuilder.loadTexts: cghMonKalShAnsStoragetype.setDescription('This object specifies the storage type for this conceptual row.')
cghMonKalShAnsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cghMonKalShAnsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cghMonKalShAnsRowStatus.setDescription('This object is used to create/delete an entry in the cghMonKalSharedAnswerTable.')
cghMonKalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3), )
if mibBuilder.loadTexts: cghMonKalStatsTable.setStatus('current')
if mibBuilder.loadTexts: cghMonKalStatsTable.setDescription('This table provides the statistics of each keepalive configured on the device.')
cghMonKalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1), )
cghMonKalConfigEntry.registerAugmentions(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalStatsEntry"))
cghMonKalStatsEntry.setIndexNames(*cghMonKalConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cghMonKalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cghMonKalStatsEntry.setDescription('An entry containing statistics for a keepalive instance. Entries are added/deleted when the corresponding entries in the cghMonKalConfigTable are added/deleted.')
cghMonKalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 1), CiscoGslbKeepaliveStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalStatus.setStatus('current')
if mibBuilder.loadTexts: cghMonKalStatus.setDescription('This object provides the status of the keepalive.')
cghMonKalSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 2), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalSentProbes.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalSentProbes.setStatus('current')
if mibBuilder.loadTexts: cghMonKalSentProbes.setDescription('This object specifies the total number of keepalive probes sent to the remote device, identified by cgdAnswerAddress. This value of this object is sum of cghMonKalPositiveProbes & cghMonKalNegativeProbes')
cghMonKalReceivedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 3), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalReceivedProbes.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalReceivedProbes.setStatus('current')
if mibBuilder.loadTexts: cghMonKalReceivedProbes.setDescription('This object specifies the total number of keepalive probes received from the remote device, identified by cgdAnswerAddress object.')
cghMonKalPositiveProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 4), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalPositiveProbes.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalPositiveProbes.setStatus('current')
if mibBuilder.loadTexts: cghMonKalPositiveProbes.setDescription('This object specifies the total number of keepalive probes sent to the remote device, identified by cgdAnswerAddress object, that resulted in a positive response.')
cghMonKalNegativeProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 5), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalNegativeProbes.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalNegativeProbes.setStatus('current')
if mibBuilder.loadTexts: cghMonKalNegativeProbes.setDescription('This object specifies the total number of keepalive probes sent to the remote device, identified by cgdAnswerAddress object, that resulted in a negative response.')
cghMonKalStatusTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalStatusTransitions.setStatus('current')
if mibBuilder.loadTexts: cghMonKalStatusTransitions.setDescription("This object specifies the total number of status transitions of cghMonKalStatus, from 'offline' to 'online' and vice versa.")
cghMonKalDynamicLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalDynamicLoad.setReference('cgdAnswerAddress from CISCO-GSLB-DNS-MIB.')
if mibBuilder.loadTexts: cghMonKalDynamicLoad.setStatus('current')
if mibBuilder.loadTexts: cghMonKalDynamicLoad.setDescription('This object speifies the dynamic load value on the remote device, identified by cgdAnswerAddress object, associated with this keepalive.')
cghMonKalVIPFailovers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cghMonKalVIPFailovers.setStatus('current')
if mibBuilder.loadTexts: cghMonKalVIPFailovers.setDescription('This object specifies the number of times the VIP switched from primary to secondary target and vice versa. The primary and secondary targets are identified by cghMonKalSecondaryTarget and cghMonKalPrimaryTarget objects respectively.')
cghMonKalNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cghMonKalNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cghMonKalNotifEnable.setDescription('This object defines the administrative state of sending notifications to signal the transition of the status of keepalives.')
cghMonKalPrevStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 600, 1, 2, 1), CiscoGslbKeepaliveStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cghMonKalPrevStatus.setStatus('current')
if mibBuilder.loadTexts: cghMonKalPrevStatus.setDescription('This object is used for sending the value of cghMonKalStatus before transitioning to new state.')
ciscoGslbKalEventStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 600, 0, 1)).setObjects(("SNMPv2-MIB", "sysName"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPrimaryTargetType"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPrimaryTarget"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalMethod"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPrevStatus"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalStatus"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonDroppedKalNotifs"))
if mibBuilder.loadTexts: ciscoGslbKalEventStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbKalEventStatus.setDescription('This notification is sent when ever the value of cghMonKalStatus changes.')
ciscoGslbHealthMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 1))
ciscoGslbHealthMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2))
ciscoGslbHealthMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 1, 1)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbGeneralConfigGroup"), ("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbKalParameterGroup"), ("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbKalConfigGroup"), ("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbKalStatsGroup"), ("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbKalNotifControlGroup"), ("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbKalNotifObjectsGroup"), ("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbKalNotificationGroup"), ("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbGeneralConfigRateLimitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbHealthMonMIBCompliance = ciscoGslbHealthMonMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGslbHealthMonMIBCompliance.setDescription('Compliance statement for entities which implement the Cisco GSLB HEALTH MON MIB')
ciscoGslbGeneralConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 1)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonNsQueryDomainName"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonCappHash"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonHttpHeadPath"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonHttpHeadConnTermMethod"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonCraDecay"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonTcpConnTermMethod"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonTotalConfiguredProbes"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonDroppedKalNotifs"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalTrapRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbGeneralConfigGroup = ciscoGslbGeneralConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbGeneralConfigGroup.setDescription('A collection of objects providing general GSLB keepalive configuration.')
ciscoGslbKalParameterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 2)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterRate"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterMinimumFrequency"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterResponseTimeout"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterFastRetries"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterFastSuccessfulProbes"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterDestPort"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterStorageType"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalParameterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbKalParameterGroup = ciscoGslbKalParameterGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbKalParameterGroup.setDescription('A collection of objects providing general GSLB keepalive parameter configuration.')
ciscoGslbKalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 3)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalTargetType"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalMethod"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalAnswerId"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPrimaryTargetType"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPrimaryTarget"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalEnable"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalDelay"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalKalapType"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalTagName"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalDestPort"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalCappSecure"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalCappHash"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalQueryDomainName"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPath"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalHostTag"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalSecondaryTargetType"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalSecondaryTarget"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalFastRetries"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalFastSuccessfulProbes"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalStorageType"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalRowStatus"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalShAnsStoragetype"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalShAnsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbKalConfigGroup = ciscoGslbKalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbKalConfigGroup.setDescription('A collection of objects providing per keepalive configuration.')
ciscoGslbKalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 4)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalStatus"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalSentProbes"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalReceivedProbes"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPositiveProbes"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalNegativeProbes"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalStatusTransitions"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalDynamicLoad"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalVIPFailovers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbKalStatsGroup = ciscoGslbKalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbKalStatsGroup.setDescription('A collection of objects providing per keepalive status and statistics.')
ciscoGslbKalNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 5)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbKalNotifControlGroup = ciscoGslbKalNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbKalNotifControlGroup.setDescription('This group of objects controls the sending of notifications defined in this MIB module.')
ciscoGslbKalNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 6)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalPrevStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbKalNotifObjectsGroup = ciscoGslbKalNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbKalNotifObjectsGroup.setDescription('This group of objects is used to convey information for notifications defined in this MIB module.')
ciscoGslbKalNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 7)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "ciscoGslbKalEventStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbKalNotificationGroup = ciscoGslbKalNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbKalNotificationGroup.setDescription('A collection of objects providing GSLB events.')
ciscoGslbGeneralConfigRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 600, 2, 2, 8)).setObjects(("CISCO-GSLB-HEALTH-MON-MIB", "cghMonDroppedKalNotifs"), ("CISCO-GSLB-HEALTH-MON-MIB", "cghMonKalTrapRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbGeneralConfigRateLimitGroup = ciscoGslbGeneralConfigRateLimitGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbGeneralConfigRateLimitGroup.setDescription('A collection of objects providing information on notifications dropped and rate limit for notifications.')
mibBuilder.exportSymbols("CISCO-GSLB-HEALTH-MON-MIB", PYSNMP_MODULE_ID=ciscoGslbHealthMonMIB, cghMonKalSharedAnswerTable=cghMonKalSharedAnswerTable, cghMonKalStatsEntry=cghMonKalStatsEntry, cghMonKalSharedAnswerEntry=cghMonKalSharedAnswerEntry, cghMonKalParameterDestPort=cghMonKalParameterDestPort, cghMonKalParameterFastRetries=cghMonKalParameterFastRetries, cghMonKalPrimaryTargetType=cghMonKalPrimaryTargetType, cghMonKalStatus=cghMonKalStatus, cghMonKalTargetType=cghMonKalTargetType, cghMonTotalConfiguredProbes=cghMonTotalConfiguredProbes, ciscoGslbHealthMonMIBGroups=ciscoGslbHealthMonMIBGroups, cghMonKalNotifEnable=cghMonKalNotifEnable, cghMonKalPrimaryTarget=cghMonKalPrimaryTarget, ciscoGslbGeneralConfigRateLimitGroup=ciscoGslbGeneralConfigRateLimitGroup, cghMonCappHash=cghMonCappHash, ciscoGslbHealthMonMIBCompliance=ciscoGslbHealthMonMIBCompliance, cghMonKalPositiveProbes=cghMonKalPositiveProbes, cghMonKalParameterResponseTimeout=cghMonKalParameterResponseTimeout, cghMonKalGeneralConfig=cghMonKalGeneralConfig, cghMonKal=cghMonKal, ciscoGslbKalNotifControlGroup=ciscoGslbKalNotifControlGroup, cghMonTcpConnTermMethod=cghMonTcpConnTermMethod, cghMonKalCappSecure=cghMonKalCappSecure, cghMonKalParameterRowStatus=cghMonKalParameterRowStatus, cghMonKalDynamicLoad=cghMonKalDynamicLoad, cghMonKalStatsTable=cghMonKalStatsTable, cghMonKalFastRetries=cghMonKalFastRetries, cghMonKalKalapType=cghMonKalKalapType, cghMonKalTrapRateLimit=cghMonKalTrapRateLimit, cghMonKalReceivedProbes=cghMonKalReceivedProbes, cghMonKalMethod=cghMonKalMethod, ciscoGslbGeneralConfigGroup=ciscoGslbGeneralConfigGroup, ciscoGslbKalStatsGroup=ciscoGslbKalStatsGroup, ciscoGslbHealthMonMIB=ciscoGslbHealthMonMIB, cghMonDroppedKalNotifs=cghMonDroppedKalNotifs, ciscoGslbHealthMonMIBCompliances=ciscoGslbHealthMonMIBCompliances, cghMonKalParameterRate=cghMonKalParameterRate, cghMonHttpHeadPath=cghMonHttpHeadPath, cghMonKalSecondaryTargetType=cghMonKalSecondaryTargetType, cghMonKalPath=cghMonKalPath, ciscoGslbKalNotifObjectsGroup=ciscoGslbKalNotifObjectsGroup, cghMonKalSentProbes=cghMonKalSentProbes, cghMonKalEnable=cghMonKalEnable, cghMonKalQueryDomainName=cghMonKalQueryDomainName, ciscoGslbKalConfigGroup=ciscoGslbKalConfigGroup, cghMonNotifObjects=cghMonNotifObjects, ciscoGslbKalEventStatus=ciscoGslbKalEventStatus, ciscoGslbKalParameterGroup=ciscoGslbKalParameterGroup, cghMonKalId=cghMonKalId, cghMonKalPrevStatus=cghMonKalPrevStatus, cghMonKalFastSuccessfulProbes=cghMonKalFastSuccessfulProbes, cghMonKalParameterEntry=cghMonKalParameterEntry, cghMonKalVIPFailovers=cghMonKalVIPFailovers, cghMonKalShAnsStoragetype=cghMonKalShAnsStoragetype, ciscoGslbKalNotificationGroup=ciscoGslbKalNotificationGroup, cghMonKalTagName=cghMonKalTagName, cghMonKalParameterFastSuccessfulProbes=cghMonKalParameterFastSuccessfulProbes, cghMonKalNegativeProbes=cghMonKalNegativeProbes, ciscoGslbHealthMonMIBConform=ciscoGslbHealthMonMIBConform, cghMonKalCappHash=cghMonKalCappHash, cghMonKalParameterMethod=cghMonKalParameterMethod, cghMonCraDecay=cghMonCraDecay, cghMonKalHostTag=cghMonKalHostTag, cghMonKalParameterTable=cghMonKalParameterTable, cghMonKalAnswerId=cghMonKalAnswerId, cghMonKalConfigEntry=cghMonKalConfigEntry, cghMonKalRowStatus=cghMonKalRowStatus, cghMonKalShAnsRowStatus=cghMonKalShAnsRowStatus, cghMonHttpHeadConnTermMethod=cghMonHttpHeadConnTermMethod, cghMonKalStatusTransitions=cghMonKalStatusTransitions, cghMonKalParameterStorageType=cghMonKalParameterStorageType, cghMonKalParameterMinimumFrequency=cghMonKalParameterMinimumFrequency, cghMonNotifControl=cghMonNotifControl, ciscoGslbHealthMonMIBNotifs=ciscoGslbHealthMonMIBNotifs, cghMonKalSecondaryTarget=cghMonKalSecondaryTarget, ciscoGslbHealthMonMIBObjects=ciscoGslbHealthMonMIBObjects, cghMonNsQueryDomainName=cghMonNsQueryDomainName, cghMonKalDestPort=cghMonKalDestPort, cghMonKalDelay=cghMonKalDelay, cghMonKalConfigTable=cghMonKalConfigTable, cghMonKalStorageType=cghMonKalStorageType)
