#
# PySNMP MIB module A3COM-HUAWEI-IKE-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-IKE-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:05:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Integer32, IpAddress, TimeTicks, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, NotificationType, iso, Counter64, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "IpAddress", "TimeTicks", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "NotificationType", "iso", "Counter64", "Counter32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cIKEMonitor = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30))
if mibBuilder.loadTexts: h3cIKEMonitor.setLastUpdated('200410260000Z')
if mibBuilder.loadTexts: h3cIKEMonitor.setOrganization('Huawei-3COM Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cIKEMonitor.setContactInfo('Huawei 3Com Technologies Co.,Ltd. Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei-3com.com Zip:100085')
if mibBuilder.loadTexts: h3cIKEMonitor.setDescription('The MIB is designed to get statistic information of IKE tunnels. With this MIB, we can get information of a certain IKE tunnel or all IKE tunnels')
class H3cIKENegoMode(TextualConvention, Integer32):
    description = 'The IKE negotiation mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 4, 32))
    namedValues = NamedValues(("mainMode", 2), ("aggressiveMode", 4), ("quickMode", 32))

class H3cIKEAuthMethod(TextualConvention, Integer32):
    description = 'The authentication method used in IKE negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3))
    namedValues = NamedValues(("preSharedKey", 1), ("rsaSignatures", 3))

class H3cDiffHellmanGrp(TextualConvention, Integer32):
    description = 'The Diffie Hellman Group used in IKE and IPSec negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 5, 14))
    namedValues = NamedValues(("modp768", 1), ("modp1024", 2), ("modp1536", 5), ("modp2048", 14))

class H3cEncryptAlgo(TextualConvention, Integer32):
    description = 'The encryption algorithm used in IKE and IPSec negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("desCbc", 1), ("ideaCbc", 2), ("blowfishCbc", 3), ("rc5R16B64Cbc", 4), ("tripleDesCbc", 5), ("castCbc", 6), ("aesCbc", 7), ("aesCbc128", 8), ("aesCbc192", 9), ("aesCbc256", 10))

class H3cAuthAlgo(TextualConvention, Integer32):
    description = 'The authentication algorithm used in IKE negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("md5", 1), ("sha", 2))

class H3cSaProtocol(TextualConvention, Integer32):
    description = 'The protocol of security association.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("reserved", 0), ("isakmp", 1), ("ah", 2), ("esp", 3), ("ipcomp", 4))

class H3cTrapStatus(TextualConvention, Integer32):
    description = 'The switch which determines whether send a trap or not.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class H3cIKEIDType(TextualConvention, Integer32):
    description = 'The type of IKE Identity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("reserved", 0), ("ipv4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8), ("derAsn1Dn", 9), ("derAsn1Gn", 10), ("keyId", 11))

class H3cTrafficType(TextualConvention, Integer32):
    description = 'The type of the data flow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ipv4Addr", 1), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8))

class H3cIKETunnelState(TextualConvention, Integer32):
    description = 'The state of the IKE tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("timeout", 2))

h3cIKEObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1))
h3cIKETunnelTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1), )
if mibBuilder.loadTexts: h3cIKETunnelTable.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelTable.setDescription('The IPSec Phase-1 Internet Key Exchange Tunnel Table. There is one entry in this table for each active IPSec Phase-1 IKE Tunnel.')
h3cIKETunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunIndex"))
if mibBuilder.loadTexts: h3cIKETunnelEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelEntry.setDescription('The entry contains the information about h3cIKETunnelTable, such as negotiate mode, encryption algorithm and authentication algorithm, etc.')
h3cIKETunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIKETunIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunIndex.setDescription('The index of the IPSec Phase-1 IKE Tunnel Table. The value of the index is a number which begins at one and is incremented with each tunnel that is created. The value of this object will wrap at 2,147,483,647.')
h3cIKETunLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 2), H3cIKEIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunLocalType.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunLocalType.setDescription('The type of local peer identity.')
h3cIKETunLocalValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunLocalValue1.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunLocalValue1.setDescription('The value of the local peer identity. If the local peer type is an IP Address, then this is the IP Address used to identify the local peer. If the local peer type is a host name, then this is the host name used to identify the local peer. If the local peer type is IP subnet, then this is the value of the subnet. If the local peer type is IP address range, then this is the value of beginning IP address of the range.')
h3cIKETunLocalValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunLocalValue2.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunLocalValue2.setDescription("The second specification of local peer's IP address. If the local peer type is single IP address or single name, then this is zero-length. If the local peer type is IP subnet, then this is the value of the subnet mask. If the local peer type is IP address range, then this is the value of ending IP address of the range.")
h3cIKETunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunLocalAddr.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunLocalAddr.setDescription('The IP address of the local endpoint for the IPSec Phase-1 IKE Tunnel.')
h3cIKETunRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 6), H3cIKEIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunRemoteType.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunRemoteType.setDescription('The type of remote peer identity. The remote peer may be identified by: 1. an IP address, or 2. a host name.')
h3cIKETunRemoteValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunRemoteValue1.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunRemoteValue1.setDescription('The value of the remote peer identity. If the remote peer type is an IP Address, then this is the IP Address used to identify the remote peer. If the remote peer type is a host name, then this is the host name used to identify the remote peer. If the remote peer type is IP subnet, then this is the value of the subnet. If the remote peer type is IP address range, then this is the value of beginning IP address of the range.')
h3cIKETunRemoteValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunRemoteValue2.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunRemoteValue2.setDescription("The second specification of remote peer's IP address. If the remote peer type is single IP address or single name, then this is zero-length. If the remote peer type is IP subnet, then this is the value of the subnet mask. If the remote peer type is IP address range, then this is the value of ending IP address of the range.")
h3cIKETunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunRemoteAddr.setDescription('The IP address of the remote peer for the IPSec Phase-1 IKE Tunnel.')
h3cIKETunInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInitiator.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInitiator.setDescription('The initiator of this tunnel.')
h3cIKETunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 11), H3cIKENegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunNegoMode.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunNegoMode.setDescription('The negotiation mode of the IPSec Phase-1 IKE Tunnel.')
h3cIKETunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 12), H3cDiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunDiffHellmanGrp.setDescription('The Diffie Hellman Group used in the IPSec Phase-1 IKE negotiations.')
h3cIKETunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 13), H3cEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunEncryptAlgo.setDescription('The encryption algorithm used in the IPSec Phase-1 IKE negotiations.')
h3cIKETunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 14), H3cAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunHashAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunHashAlgo.setDescription('The hash algorithm used in the IPSec Phase-1 IKE negotiations.')
h3cIKETunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 15), H3cIKEAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunAuthMethod.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunAuthMethod.setDescription('The authentication method used in the IPSec Phase-1 IKE negotiations.')
h3cIKETunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunLifeTime.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunLifeTime.setDescription('The negotiated LifeTime of the IPSec Phase-1 IKE Tunnel in seconds.')
h3cIKETunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunActiveTime.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunActiveTime.setDescription('The duration the IPSec Phase-1 IKE tunnel has been active in seconds.')
h3cIKETunRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunRemainTime.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunRemainTime.setDescription('The security association remaining time in seconds.')
h3cIKETunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunTotalRefreshes.setDescription('The total number of security association refreshing performed.')
h3cIKETunState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 20), H3cIKETunnelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunState.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunState.setDescription('The State of IKE Tunnel.')
h3cIKETunDpdIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 21), Integer32().clone(10)).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunDpdIntervalTime.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunDpdIntervalTime.setDescription("The time that trigger DPD request. If ipsec message is expected to be sent out and the interval time between current time and the last time receiving peer's IPSec message is bigger than this time, DPD request would be triggered.")
h3cIKETunDpdTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 1, 1, 22), Integer32().clone(5)).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunDpdTimeOut.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunDpdTimeOut.setDescription('The overtime of single DPD request. If DPD requests are refused three times, all security associations related would be deleted.')
h3cIKETunnelStatTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2), )
if mibBuilder.loadTexts: h3cIKETunnelStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelStatTable.setDescription('The IPsec Phase-1 IKE Tunnel Statistic Table.')
h3cIKETunnelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunIndex"))
if mibBuilder.loadTexts: h3cIKETunnelStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelStatEntry.setDescription('The entry contains the information of h3cIKETunnelStatTable, such as the number of packets sent and received by the IKE tunnel, etc.')
h3cIKETunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInOctets.setDescription('The total number of octets received by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInPkts.setDescription('The total number of packets received by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInDropPkts.setDescription('The total number of packets dropped by this IPSec Phase-1 IKE Tunnel during receiving process.')
h3cIKETunInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInP2Exchgs.setDescription('The total number of IPSec Phase-2 exchanges received by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunInP2ExchgRejets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInP2ExchgRejets.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInP2ExchgRejets.setDescription('The total number of IPSec Phase-2 exchanges received and rejected by this IPSec Phase-1 Tunnel.')
h3cIKETunInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInP2SaDelRequests.setDescription('The total number of IPSec Phase-2 security association deleting requests received by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunInP1SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInP1SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInP1SaDelRequests.setDescription('The total number of IPSec Phase-1 security association deleting requests.')
h3cIKETunInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunInNotifys.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunInNotifys.setDescription('The total number of notifications received by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutOctets.setDescription('The total number of octets sent by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutPkts.setDescription('The total number of packets sent by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutDropPkts.setDescription('The total number of packets dropped by this IPSec Phase-1 IKE Tunnel during sending process.')
h3cIKETunOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutP2Exchgs.setDescription('The total number of IPSec Phase-2 exchanges sent by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutP2ExchgRejects.setDescription('The total number of IPSec Phase-2 exchanges sent and rejected by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutP2SaDelRequests.setDescription('The total number of IPSec Phase-2 security association deleting requests sent by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunOutP1SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutP1SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutP1SaDelRequests.setDescription('The total number of IPSec Phase-1 security association deleting requests sent by this IPSec Phase-1 IKE Tunnel.')
h3cIKETunOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKETunOutNotifys.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunOutNotifys.setDescription('The total number of notifications sent by this IPSec Phase-1 Tunnel.')
h3cIKEGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3))
h3cIKEGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalActiveTunnels.setDescription('The number of currently active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInOctets.setDescription('The total number of octets received by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInPkts.setDescription('The total number of packets received by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInDropPkts.setDescription('The total number of packets which were dropped during receiving process by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInP2Exchgs.setDescription('The total number of IPSec Phase-2 exchanges received by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInP2ExchgRejects.setDescription('The total number of IPSec Phase-2 exchanges which were received and rejected by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInP2SaDelRequests.setDescription('The total number of IPSec Phase-2 security association deleting requests received by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInNotifys = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInNotifys.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInNotifys.setDescription('The total number of notifications received by all IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalOutOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalOutOctets.setDescription('The total number of octets sent by all currently and previously active and IPSec Phase-1 IKE Tunnels. ')
h3cIKEGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalOutPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalOutPkts.setDescription('The total number of packets sent by all currently and previously active and IPSec Phase-1 Tunnels.')
h3cIKEGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalOutDropPkts.setDescription('The total number of packets which were dropped during sending process by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalOutP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalOutP2Exchgs.setDescription('The total number of IPSec Phase-2 exchanges which were sent by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalOutP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalOutP2ExchgRejects.setDescription('The total number of IPSec Phase-2 exchanges which were sent and rejected by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalOutP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalOutP2SaDelRequests.setDescription('The total number of IPSec Phase-2 SA deleting requests sent by all currently and previously active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalOutNotifys = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalOutNotifys.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalOutNotifys.setDescription('The total number of notifications sent by all active IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInitTunnels = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInitTunnels.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInitTunnels.setDescription('The total number of IPSec Phase-1 IKE Tunnels which were locally initiated.')
h3cIKEGlobalInitTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInitTunnelFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInitTunnelFails.setDescription('The total number of IPSec Phase-1 IKE Tunnels which were locally initiated and failed to activate.')
h3cIKEGlobalRespTunnels = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalRespTunnels.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalRespTunnels.setDescription('The total number of IPSec Phase-1 IKE Tunnels which were remotely initiated.')
h3cIKEGlobalRespTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalRespTunnelFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalRespTunnelFails.setDescription('The total number of IPSec Phase-1 IKE Tunnels which were remotely initiated and failed to activate.')
h3cIKEGlobalAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalAuthFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalAuthFails.setDescription('The total number of authentications which ended in failure by all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalNoSaFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalNoSaFails.setDescription('The total number of non-existent Security Association in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInvalidCookieFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInvalidCookieFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInvalidCookieFails.setDescription('The total number of invalid cookie in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalAttrNotSuppFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalAttrNotSuppFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalAttrNotSuppFails.setDescription('The total number of attributes not supported in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalNoProposalChosenFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalNoProposalChosenFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalNoProposalChosenFails.setDescription('The total number of no proposal chosen in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalUnsportExchTypeFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalUnsportExchTypeFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalUnsportExchTypeFails.setDescription('The total number of unsupported exchange type in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInvalidIdFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInvalidIdFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInvalidIdFails.setDescription('The total number of invalid id Information in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInvalidProFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInvalidProFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInvalidProFails.setDescription('The total number of invalid protocol id in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalCertTypeUnsuppFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalCertTypeUnsuppFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalCertTypeUnsuppFails.setDescription('The total number of certificate type unsupported in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInvalidCertAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInvalidCertAuthFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInvalidCertAuthFails.setDescription('The total number of failures because of invalid certificate authority which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalInvalidSignFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalInvalidSignFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalInvalidSignFails.setDescription('The total number of failures because of the invalid signature which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKEGlobalCertUnavailableFails = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 3, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIKEGlobalCertUnavailableFails.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalCertUnavailableFails.setDescription('The total number of certificate unavailable in failures which occurred during processing of all current and previous IPSec Phase-1 IKE Tunnels.')
h3cIKETrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 4))
h3cIKEProposalNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 4, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIKEProposalNumber.setStatus('current')
if mibBuilder.loadTexts: h3cIKEProposalNumber.setDescription("The IKE proposal's number with a trap.")
h3cIKEProposalSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 4, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIKEProposalSize.setStatus('current')
if mibBuilder.loadTexts: h3cIKEProposalSize.setDescription('The number of IKE proposals with a trap.')
h3cIKEIdInformation = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 4, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIKEIdInformation.setStatus('current')
if mibBuilder.loadTexts: h3cIKEIdInformation.setDescription('The id information with a trap.')
h3cIKEProtocolNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 4, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIKEProtocolNum.setStatus('current')
if mibBuilder.loadTexts: h3cIKEProtocolNum.setDescription('The protocol number with a trap')
h3cIKECertInformation = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 4, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIKECertInformation.setStatus('current')
if mibBuilder.loadTexts: h3cIKECertInformation.setDescription('The certificate information with a trap.')
h3cIKETrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5))
h3cIKETrapGlobalCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 1), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKETrapGlobalCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKETrapGlobalCntl.setDescription('Indicates whether all IKE traps should be generated.')
h3cIKETunnelStartTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 2), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKETunnelStartTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelStartTrapCntl.setDescription('Indicates whether h3cIKETunnelStart traps should be generated.')
h3cIKETunnelStopTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 3), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKETunnelStopTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelStopTrapCntl.setDescription('Indicates whether h3cIKETunnelStop traps should be generated.')
h3cIKENoSaTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 4), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKENoSaTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKENoSaTrapCntl.setDescription('Indicates whether h3cIKENoSaFailure traps should be generated.')
h3cIKEEncryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 5), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEEncryFailureTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEEncryFailureTrapCntl.setDescription('Indicates whether h3cIKEEncryFailFailure traps should be generated.')
h3cIKEDecryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 6), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEDecryFailureTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEDecryFailureTrapCntl.setDescription('Indicates whether h3cIKEDecryFailFailure traps should be generated.')
h3cIKEInvalidProposalTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 7), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEInvalidProposalTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidProposalTrapCntl.setDescription('Indicates whether h3cIKEInvalidProposalFailure traps should be generated.')
h3cIKEAuthFailTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 8), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEAuthFailTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEAuthFailTrapCntl.setDescription('Indicates whether h3cIKEAuthFailFailure traps should be generated.')
h3cIKEInvalidCookieTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 9), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEInvalidCookieTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidCookieTrapCntl.setDescription('Indicates whether h3cIKEInvalidCookieFailure traps should be generated.')
h3cIKEInvalidSpiTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 10), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEInvalidSpiTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidSpiTrapCntl.setDescription('Indicates whether h3cIKEInvalidSpiFailure traps should be generated.')
h3cIKEAttrNotSuppTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 11), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEAttrNotSuppTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEAttrNotSuppTrapCntl.setDescription('Indicates whether h3cIKEAttrNotSuppFailure traps should be generated.')
h3cIKEUnsportExchTypeTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 12), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEUnsportExchTypeTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEUnsportExchTypeTrapCntl.setDescription('Indicates whether h3cIKEUnsportExchTypeFailure traps should be generated.')
h3cIKEInvalidIdTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 13), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEInvalidIdTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidIdTrapCntl.setDescription('Indicates whether h3cIKEInvalidIdFailure traps should be generated.')
h3cIKEInvalidProtocolTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 14), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEInvalidProtocolTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidProtocolTrapCntl.setDescription('Indicates whether h3cIKEInvalidProtocolFailure traps should be generated.')
h3cIKECertTypeUnsuppTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 15), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKECertTypeUnsuppTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKECertTypeUnsuppTrapCntl.setDescription('Indicates whether h3cIKECertTypeUnsuppFailure traps should be generated.')
h3cIKEInvalidCertAuthTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 16), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEInvalidCertAuthTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidCertAuthTrapCntl.setDescription('Indicates whether h3cIKEInvalidCertAuthFailure traps should be generated.')
h3cIKEInvalidSignTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 17), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEInvalidSignTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidSignTrapCntl.setDescription('Indicates whether h3cIKEInvalidSignFailure traps should be generated.')
h3cIKECertUnavailableTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 18), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKECertUnavailableTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKECertUnavailableTrapCntl.setDescription('Indicates whether h3cIKECertUnavailableFailure traps should be generated.')
h3cIKEProposalAddTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 19), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEProposalAddTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEProposalAddTrapCntl.setDescription('Indicates whether h3cIKEProposalAdd traps should be generated.')
h3cIKEProposalDelTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 5, 20), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIKEProposalDelTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIKEProposalDelTrapCntl.setDescription('Indicates whether h3cIKEProposalDel traps should be generated.')
h3cIKETrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6))
h3cIKENotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1))
h3cIKETunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 1)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLifeTime"))
if mibBuilder.loadTexts: h3cIKETunnelStart.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelStart.setDescription('This notification is generated when an IPSec Phase-1 IKE Tunnel is created.')
h3cIKETunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 2)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunActiveTime"))
if mibBuilder.loadTexts: h3cIKETunnelStop.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelStop.setDescription('This notification is generated when an IPSec Phase-1 IKE Tunnel is deleted.')
h3cIKENoSaFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 3)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKENoSaFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKENoSaFailure.setDescription('This notification is generated when the IKE tunnel has a non-existent SA error.')
h3cIKEEncryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 4)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKEEncryFailFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEEncryFailFailure.setDescription('This notification is generated when the IKE tunnel has an encrypting failure.')
h3cIKEDecryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 5)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKEDecryFailFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEDecryFailFailure.setDescription('This notification is generated when the IKE tunnel has a decrypting failure.')
h3cIKEInvalidProposalFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 6)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKEInvalidProposalFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidProposalFailure.setDescription('This notification is generated when the IPSec phase-1 invalid proposal occurs.')
h3cIKEAuthFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 7)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKEAuthFailFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEAuthFailFailure.setDescription('This notification is generated when the IPSec phase-1 authentication failure occurs.')
h3cIKEInvalidCookieFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 8)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKEInvalidCookieFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidCookieFailure.setDescription('This notification is generated when the IPSec phase-1 invalid cookie failure occurs.')
h3cIKEAttrNotSuppFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 9)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKEAttrNotSuppFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEAttrNotSuppFailure.setDescription('This notification is generated when the IPSec phase-1 unsupported attribute failure occurs.')
h3cIKEUnsportExchTypeFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 10)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: h3cIKEUnsportExchTypeFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEUnsportExchTypeFailure.setDescription('This notification is generated when the IPSec phase-1 unsupported exchange type failure occurs.')
h3cIKEInvalidIdFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 11)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEIdInformation"))
if mibBuilder.loadTexts: h3cIKEInvalidIdFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidIdFailure.setDescription('This notification is generated when the IPSec phase-1 invalid id failure occurs.')
h3cIKEInvalidProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 12)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProtocolNum"))
if mibBuilder.loadTexts: h3cIKEInvalidProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidProtocolFailure.setDescription('This notification is generated when the processing for an IPSec Phase-1 IKE Tunnel has a protocol related errors.')
h3cIKECertTypeUnsuppFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 13)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertInformation"))
if mibBuilder.loadTexts: h3cIKECertTypeUnsuppFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKECertTypeUnsuppFailure.setDescription('This notification is generated when the IPSec phase-1 unsupported certificate type failure occurs.')
h3cIKEInvalidCertAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 14)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertInformation"))
if mibBuilder.loadTexts: h3cIKEInvalidCertAuthFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKEInvalidCertAuthFailure.setDescription('This notification is generated when the IPSec phase-1 invalid certificate authorization failure occurs.')
h3cIKElInvalidSignFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 15)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertInformation"))
if mibBuilder.loadTexts: h3cIKElInvalidSignFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKElInvalidSignFailure.setDescription('This notification is generated when the IPSec phase-1 invalid signature failure occurs.')
h3cIKECertUnavailableFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 16)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertInformation"))
if mibBuilder.loadTexts: h3cIKECertUnavailableFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIKECertUnavailableFailure.setDescription('This notification is generated when the IPSec phase-1 certificate unavailable failure occurs.')
h3cIKEProposalAdd = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 17)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalNumber"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalSize"))
if mibBuilder.loadTexts: h3cIKEProposalAdd.setStatus('current')
if mibBuilder.loadTexts: h3cIKEProposalAdd.setDescription('This notification is generated when an IKE proposal is added.')
h3cIKEProposalDel = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 1, 6, 1, 18)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalNumber"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalSize"))
if mibBuilder.loadTexts: h3cIKEProposalDel.setStatus('current')
if mibBuilder.loadTexts: h3cIKEProposalDel.setDescription('This notification is generated when an IKE proposal is deleted.')
h3cIKEConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2))
h3cIKECompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 1))
h3cIKEGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 2))
h3cIKECompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 1, 1)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunnelTableGroup"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunnelStatTableGroup"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalStatsGroup"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETrapObjectGroup"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETrapCntlGroup"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIKECompliance = h3cIKECompliance.setStatus('current')
if mibBuilder.loadTexts: h3cIKECompliance.setDescription(' ')
h3cIKETunnelTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 2, 1)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalType"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalValue1"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalValue2"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLocalAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteType"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteValue1"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteValue2"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemoteAddr"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInitiator"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunNegoMode"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunDiffHellmanGrp"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunEncryptAlgo"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunHashAlgo"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunAuthMethod"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunLifeTime"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunActiveTime"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunRemainTime"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunTotalRefreshes"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunState"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunDpdIntervalTime"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunDpdTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIKETunnelTableGroup = h3cIKETunnelTableGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelTableGroup.setDescription("The group contains the IKE tunnel's property information.")
h3cIKETunnelStatTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 2, 2)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInOctets"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInDropPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInP2Exchgs"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInP2ExchgRejets"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInP2SaDelRequests"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInP1SaDelRequests"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunInNotifys"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutOctets"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutDropPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutP2Exchgs"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutP2ExchgRejects"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutP2SaDelRequests"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutP1SaDelRequests"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunOutNotifys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIKETunnelStatTableGroup = h3cIKETunnelStatTableGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIKETunnelStatTableGroup.setDescription("The group contains the IKE tunnel's statistic information.")
h3cIKEGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 2, 3)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalActiveTunnels"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInOctets"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInDropPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInP2Exchgs"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInP2ExchgRejects"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInP2SaDelRequests"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInNotifys"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalOutOctets"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalOutPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalOutDropPkts"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalOutP2Exchgs"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalOutP2ExchgRejects"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalOutP2SaDelRequests"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalOutNotifys"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInitTunnels"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInitTunnelFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalRespTunnels"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalRespTunnelFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalAuthFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalNoSaFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInvalidCookieFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalAttrNotSuppFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalNoProposalChosenFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalUnsportExchTypeFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInvalidIdFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInvalidProFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalCertTypeUnsuppFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInvalidCertAuthFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalInvalidSignFails"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEGlobalCertUnavailableFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIKEGlobalStatsGroup = h3cIKEGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIKEGlobalStatsGroup.setDescription("The group contains all of the IKE tunnel's statistic information.")
h3cIKETrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 2, 4)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalNumber"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalSize"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEIdInformation"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProtocolNum"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertInformation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIKETrapObjectGroup = h3cIKETrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIKETrapObjectGroup.setDescription('The group contains all of trap objects of IKE tunnels.')
h3cIKETrapCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 2, 5)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETrapGlobalCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunnelStartTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunnelStopTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKENoSaTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEEncryFailureTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEDecryFailureTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidProposalTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEAuthFailTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidCookieTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidSpiTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEAttrNotSuppTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEUnsportExchTypeTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidIdTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidProtocolTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertTypeUnsuppTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidCertAuthTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidSignTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertUnavailableTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalAddTrapCntl"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalDelTrapCntl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIKETrapCntlGroup = h3cIKETrapCntlGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIKETrapCntlGroup.setDescription('The group contains all of trap switches of IKE tunnels.')
h3cIKETrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 30, 2, 2, 6)).setObjects(("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunnelStart"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKETunnelStop"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKENoSaFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEEncryFailFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEDecryFailFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidProposalFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEAuthFailFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidCookieFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEAttrNotSuppFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEUnsportExchTypeFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidIdFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidProtocolFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertTypeUnsuppFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEInvalidCertAuthFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKElInvalidSignFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKECertUnavailableFailure"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalAdd"), ("A3COM-HUAWEI-IKE-MONITOR-MIB", "h3cIKEProposalDel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIKETrapGroup = h3cIKETrapGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIKETrapGroup.setDescription('The group contains all of trap of IKE tunnels.')
mibBuilder.exportSymbols("A3COM-HUAWEI-IKE-MONITOR-MIB", h3cIKETunOutOctets=h3cIKETunOutOctets, h3cIKEAuthFailFailure=h3cIKEAuthFailFailure, h3cIKETunInOctets=h3cIKETunInOctets, h3cIKETunnelStartTrapCntl=h3cIKETunnelStartTrapCntl, h3cIKETunDpdTimeOut=h3cIKETunDpdTimeOut, h3cIKEUnsportExchTypeTrapCntl=h3cIKEUnsportExchTypeTrapCntl, h3cIKETunDpdIntervalTime=h3cIKETunDpdIntervalTime, h3cIKEInvalidIdTrapCntl=h3cIKEInvalidIdTrapCntl, h3cIKEAuthFailTrapCntl=h3cIKEAuthFailTrapCntl, h3cIKETrapCntlGroup=h3cIKETrapCntlGroup, h3cIKECertUnavailableTrapCntl=h3cIKECertUnavailableTrapCntl, h3cIKETrap=h3cIKETrap, h3cIKETunLocalType=h3cIKETunLocalType, h3cIKETunHashAlgo=h3cIKETunHashAlgo, h3cIKEGlobalAttrNotSuppFails=h3cIKEGlobalAttrNotSuppFails, H3cAuthAlgo=H3cAuthAlgo, h3cIKETunOutP2ExchgRejects=h3cIKETunOutP2ExchgRejects, h3cIKEGlobalInvalidIdFails=h3cIKEGlobalInvalidIdFails, h3cIKEInvalidCookieFailure=h3cIKEInvalidCookieFailure, h3cIKEGlobalOutP2ExchgRejects=h3cIKEGlobalOutP2ExchgRejects, h3cIKEGlobalCertTypeUnsuppFails=h3cIKEGlobalCertTypeUnsuppFails, h3cIKECompliances=h3cIKECompliances, h3cIKETunRemoteType=h3cIKETunRemoteType, h3cIKEGlobalInvalidCookieFails=h3cIKEGlobalInvalidCookieFails, h3cIKECertInformation=h3cIKECertInformation, h3cIKETunnelStop=h3cIKETunnelStop, h3cIKEGlobalInPkts=h3cIKEGlobalInPkts, h3cIKEGlobalInP2SaDelRequests=h3cIKEGlobalInP2SaDelRequests, h3cIKEProposalSize=h3cIKEProposalSize, h3cIKEGlobalNoProposalChosenFails=h3cIKEGlobalNoProposalChosenFails, h3cIKETunnelStatTable=h3cIKETunnelStatTable, h3cIKEGlobalUnsportExchTypeFails=h3cIKEGlobalUnsportExchTypeFails, h3cIKETunInP1SaDelRequests=h3cIKETunInP1SaDelRequests, H3cIKETunnelState=H3cIKETunnelState, h3cIKETunState=h3cIKETunState, h3cIKEProtocolNum=h3cIKEProtocolNum, h3cIKEAttrNotSuppFailure=h3cIKEAttrNotSuppFailure, h3cIKETunDiffHellmanGrp=h3cIKETunDiffHellmanGrp, h3cIKEGlobalStats=h3cIKEGlobalStats, h3cIKEInvalidCertAuthTrapCntl=h3cIKEInvalidCertAuthTrapCntl, h3cIKEGlobalOutP2Exchgs=h3cIKEGlobalOutP2Exchgs, h3cIKETunnelStart=h3cIKETunnelStart, h3cIKEGlobalRespTunnelFails=h3cIKEGlobalRespTunnelFails, h3cIKETunnelTable=h3cIKETunnelTable, h3cIKETunnelEntry=h3cIKETunnelEntry, h3cIKEGlobalActiveTunnels=h3cIKEGlobalActiveTunnels, h3cIKETrapGroup=h3cIKETrapGroup, H3cSaProtocol=H3cSaProtocol, h3cIKEGlobalInP2ExchgRejects=h3cIKEGlobalInP2ExchgRejects, h3cIKEGlobalInitTunnels=h3cIKEGlobalInitTunnels, h3cIKEGlobalStatsGroup=h3cIKEGlobalStatsGroup, h3cIKETunAuthMethod=h3cIKETunAuthMethod, h3cIKEAttrNotSuppTrapCntl=h3cIKEAttrNotSuppTrapCntl, h3cIKEEncryFailFailure=h3cIKEEncryFailFailure, H3cTrafficType=H3cTrafficType, h3cIKETrapCntl=h3cIKETrapCntl, h3cIKEDecryFailureTrapCntl=h3cIKEDecryFailureTrapCntl, h3cIKEInvalidCookieTrapCntl=h3cIKEInvalidCookieTrapCntl, h3cIKETrapObjectGroup=h3cIKETrapObjectGroup, h3cIKEGlobalInitTunnelFails=h3cIKEGlobalInitTunnelFails, H3cIKEAuthMethod=H3cIKEAuthMethod, h3cIKENoSaFailure=h3cIKENoSaFailure, h3cIKETunActiveTime=h3cIKETunActiveTime, h3cIKECertTypeUnsuppFailure=h3cIKECertTypeUnsuppFailure, h3cIKEProposalNumber=h3cIKEProposalNumber, h3cIKETunnelStatTableGroup=h3cIKETunnelStatTableGroup, h3cIKETrapObject=h3cIKETrapObject, h3cIKETunOutP2SaDelRequests=h3cIKETunOutP2SaDelRequests, h3cIKETunIndex=h3cIKETunIndex, h3cIKETrapGlobalCntl=h3cIKETrapGlobalCntl, h3cIKETunInP2Exchgs=h3cIKETunInP2Exchgs, h3cIKEIdInformation=h3cIKEIdInformation, h3cIKETunOutDropPkts=h3cIKETunOutDropPkts, h3cIKEInvalidCertAuthFailure=h3cIKEInvalidCertAuthFailure, h3cIKEGlobalNoSaFails=h3cIKEGlobalNoSaFails, h3cIKETunInP2SaDelRequests=h3cIKETunInP2SaDelRequests, h3cIKETunTotalRefreshes=h3cIKETunTotalRefreshes, h3cIKEInvalidProposalFailure=h3cIKEInvalidProposalFailure, h3cIKETunnelTableGroup=h3cIKETunnelTableGroup, h3cIKElInvalidSignFailure=h3cIKElInvalidSignFailure, h3cIKEGlobalOutDropPkts=h3cIKEGlobalOutDropPkts, h3cIKEGroups=h3cIKEGroups, h3cIKEMonitor=h3cIKEMonitor, h3cIKEObjects=h3cIKEObjects, h3cIKEProposalAdd=h3cIKEProposalAdd, h3cIKETunNegoMode=h3cIKETunNegoMode, h3cIKETunOutNotifys=h3cIKETunOutNotifys, h3cIKETunRemoteValue2=h3cIKETunRemoteValue2, h3cIKEInvalidProposalTrapCntl=h3cIKEInvalidProposalTrapCntl, h3cIKEProposalDel=h3cIKEProposalDel, h3cIKEInvalidIdFailure=h3cIKEInvalidIdFailure, h3cIKETunLocalValue1=h3cIKETunLocalValue1, h3cIKETunOutP1SaDelRequests=h3cIKETunOutP1SaDelRequests, h3cIKETunInPkts=h3cIKETunInPkts, h3cIKEGlobalAuthFails=h3cIKEGlobalAuthFails, H3cIKENegoMode=H3cIKENegoMode, h3cIKETunInP2ExchgRejets=h3cIKETunInP2ExchgRejets, h3cIKETunnelStatEntry=h3cIKETunnelStatEntry, H3cDiffHellmanGrp=H3cDiffHellmanGrp, h3cIKEDecryFailFailure=h3cIKEDecryFailFailure, h3cIKEConformance=h3cIKEConformance, h3cIKEGlobalCertUnavailableFails=h3cIKEGlobalCertUnavailableFails, h3cIKETunEncryptAlgo=h3cIKETunEncryptAlgo, h3cIKETunInDropPkts=h3cIKETunInDropPkts, h3cIKEGlobalOutNotifys=h3cIKEGlobalOutNotifys, H3cEncryptAlgo=H3cEncryptAlgo, h3cIKEGlobalOutP2SaDelRequests=h3cIKEGlobalOutP2SaDelRequests, h3cIKETunLocalValue2=h3cIKETunLocalValue2, h3cIKETunRemoteAddr=h3cIKETunRemoteAddr, PYSNMP_MODULE_ID=h3cIKEMonitor, h3cIKECompliance=h3cIKECompliance, h3cIKEGlobalInP2Exchgs=h3cIKEGlobalInP2Exchgs, h3cIKEProposalAddTrapCntl=h3cIKEProposalAddTrapCntl, h3cIKECertTypeUnsuppTrapCntl=h3cIKECertTypeUnsuppTrapCntl, h3cIKEGlobalInvalidProFails=h3cIKEGlobalInvalidProFails, h3cIKEProposalDelTrapCntl=h3cIKEProposalDelTrapCntl, h3cIKETunRemoteValue1=h3cIKETunRemoteValue1, h3cIKEGlobalInNotifys=h3cIKEGlobalInNotifys, h3cIKEGlobalOutPkts=h3cIKEGlobalOutPkts, h3cIKETunInNotifys=h3cIKETunInNotifys, h3cIKEInvalidSignTrapCntl=h3cIKEInvalidSignTrapCntl, h3cIKETunInitiator=h3cIKETunInitiator, h3cIKECertUnavailableFailure=h3cIKECertUnavailableFailure, h3cIKETunRemainTime=h3cIKETunRemainTime, h3cIKEUnsportExchTypeFailure=h3cIKEUnsportExchTypeFailure, h3cIKEInvalidSpiTrapCntl=h3cIKEInvalidSpiTrapCntl, h3cIKETunLocalAddr=h3cIKETunLocalAddr, h3cIKEInvalidProtocolTrapCntl=h3cIKEInvalidProtocolTrapCntl, h3cIKEEncryFailureTrapCntl=h3cIKEEncryFailureTrapCntl, h3cIKETunOutP2Exchgs=h3cIKETunOutP2Exchgs, h3cIKEGlobalInvalidSignFails=h3cIKEGlobalInvalidSignFails, H3cTrapStatus=H3cTrapStatus, h3cIKETunnelStopTrapCntl=h3cIKETunnelStopTrapCntl, H3cIKEIDType=H3cIKEIDType, h3cIKETunOutPkts=h3cIKETunOutPkts, h3cIKEGlobalRespTunnels=h3cIKEGlobalRespTunnels, h3cIKETunLifeTime=h3cIKETunLifeTime, h3cIKEGlobalInvalidCertAuthFails=h3cIKEGlobalInvalidCertAuthFails, h3cIKENoSaTrapCntl=h3cIKENoSaTrapCntl, h3cIKENotifications=h3cIKENotifications, h3cIKEInvalidProtocolFailure=h3cIKEInvalidProtocolFailure, h3cIKEGlobalInDropPkts=h3cIKEGlobalInDropPkts, h3cIKEGlobalOutOctets=h3cIKEGlobalOutOctets, h3cIKEGlobalInOctets=h3cIKEGlobalInOctets)
