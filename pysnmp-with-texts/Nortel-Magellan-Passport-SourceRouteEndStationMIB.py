#
# PySNMP MIB module Nortel-Magellan-Passport-SourceRouteEndStationMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-SourceRouteEndStationMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
Counter32, StorageType, Unsigned32, DisplayString, RowStatus, Gauge32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Counter32", "StorageType", "Unsigned32", "DisplayString", "RowStatus", "Gauge32")
AsciiStringIndex, AsciiString, HexString, DashedHexString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiStringIndex", "AsciiString", "HexString", "DashedHexString", "NonReplicated")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
vrIndex, vr = mibBuilder.importSymbols("Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex", "vr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Counter64, TimeTicks, Unsigned32, Bits, iso, MibIdentifier, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks", "Unsigned32", "Bits", "iso", "MibIdentifier", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sourceRouteEndStationMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54))
vrSres = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13))
vrSresRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 1), )
if mibBuilder.loadTexts: vrSresRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRowStatusTable.setDescription('This entry controls the addition and deletion of vrSres components.')
vrSresRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"))
if mibBuilder.loadTexts: vrSresRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRowStatusEntry.setDescription('A single entry in the table represents a single vrSres component.')
vrSresRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSresRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSres components. These components can be added and deleted.')
vrSresComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSresStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresStorageType.setDescription('This variable represents the storage type value for the vrSres tables.')
vrSresIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrSresIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresIndex.setDescription('This variable represents the index for the vrSres tables.')
vrSresAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 10), )
if mibBuilder.loadTexts: vrSresAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
vrSresAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"))
if mibBuilder.loadTexts: vrSresAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresAdminControlEntry.setDescription('An entry in the vrSresAdminControlTable.')
vrSresSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresSnmpAdminStatus.setDescription('This attribute is used to set the desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed. Changing this attribute from its default value of up is not allowed at this time.')
vrSresProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 11), )
if mibBuilder.loadTexts: vrSresProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresProvTable.setDescription('This group contains the provisioned attributes for the SourceRouteEndStation component.')
vrSresProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"))
if mibBuilder.loadTexts: vrSresProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresProvEntry.setDescription('An entry in the vrSresProvTable.')
vrSresRouteTableNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSresRouteTableNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRouteTableNumEntries.setDescription('This attribute identifies the maximum number of entries in the SourceRouteEndStation routing table. Before you change it, check the network configuration to see how many protocol ports, such as IpPort or IpxPort, under Vr Pp have endStationSupport set to enable. The value of routeTableNumEntries also depends on the VirtualRouter attribute sresMaxHeapSpace. Consider the following attributes of the SourceRouteEndStation component when adjusting this number: - rtEntriesUsed - rtEntriesFree - rtEntriesDenied')
vrSresAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSresAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresAgingTime.setDescription('This attribute specifies the time period used in seconds, to age out learned entries in the routing table.')
vrSresRouteDescriptorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 14)).clone(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresRouteDescriptorLength.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRouteDescriptorLength.setDescription('This attribute indicates the maximum number of route descriptors supported by this implementation. The maximum number of hops will be one less because one route descriptor is always required for the destination. This attribute affects the amount of memory used by the route entry table. The larger this attribute is, the more memory the route entry table will use.')
vrSresOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 12), )
if mibBuilder.loadTexts: vrSresOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vrSresOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"))
if mibBuilder.loadTexts: vrSresOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresOperStatusEntry.setDescription('An entry in the vrSresOperStatusTable.')
vrSresSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vrSresStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 13), )
if mibBuilder.loadTexts: vrSresStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vrSresStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"))
if mibBuilder.loadTexts: vrSresStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresStateEntry.setDescription('An entry in the vrSresStateTable.')
vrSresAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vrSresOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vrSresUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vrSresOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 14), )
if mibBuilder.loadTexts: vrSresOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresOperTable.setDescription('This group contains the operational attributes for the SourceRouteEndStation component.')
vrSresOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"))
if mibBuilder.loadTexts: vrSresOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresOperEntry.setDescription('An entry in the vrSresOperTable.')
vrSresRtEntriesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresRtEntriesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRtEntriesUsed.setDescription('This attribute specifies the total number of SourceRouteEndStation routing table entries. The value is limited by the attribute routeTableNumEntries, which is a provisionable attribute. If the value is consistently approaching the value of routeTableNumEntries, it is advisable to increase the value provisioned for routeTableNumEntries. It indicates a potential shortage of routing table entries in the future.')
vrSresRtEntriesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 14, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresRtEntriesFree.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRtEntriesFree.setDescription('This attribute is indicative of the number of Sres routing table entries free. A consistently high value for this attribute indicates that there is a resource surplus here, in terms of the memory requirements of the routing table. This surplus could be utilized elsewhere if need be. The value of this attribute is directly influenced by the value of the attribute routeTableNumEntries.')
vrSresRtEntriesDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresRtEntriesDenied.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresRtEntriesDenied.setDescription('This attribute counts the number of times a SourceRouteEndStation routing table entry was unavailable. Each count indicates an instance of a new route which could not be learned because of a lack of routing table entries. A rapid increase indicates a shortage of routing table entries. To rectify this, increase the number of routing table entries through the provisioned attribute routeTableNumEntries under the SourceRouteEndStation component. This counter wraps around its maximum value of 4294967295.')
vrSresRe = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2))
vrSresReRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 1), )
if mibBuilder.loadTexts: vrSresReRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrSresRe components.')
vrSresReRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresReDestMacAddressIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresReProtocolPortNameIndex"))
if mibBuilder.loadTexts: vrSresReRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReRowStatusEntry.setDescription('A single entry in the table represents a single vrSresRe component.')
vrSresReRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresReRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSresRe components. These components cannot be added nor deleted.')
vrSresReComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresReComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSresReStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresReStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReStorageType.setDescription('This variable represents the storage type value for the vrSresRe tables.')
vrSresReDestMacAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: vrSresReDestMacAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReDestMacAddressIndex.setDescription('This variable represents an index for the vrSresRe tables.')
vrSresReProtocolPortNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: vrSresReProtocolPortNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReProtocolPortNameIndex.setDescription('This variable represents an index for the vrSresRe tables.')
vrSresReOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 10), )
if mibBuilder.loadTexts: vrSresReOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains information relating to a source routing destination address.')
vrSresReOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresReDestMacAddressIndex"), (0, "Nortel-Magellan-Passport-SourceRouteEndStationMIB", "vrSresReProtocolPortNameIndex"))
if mibBuilder.loadTexts: vrSresReOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReOperEntry.setDescription('An entry in the vrSresReOperTable.')
vrSresReRouteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 10, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresReRouteControl.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReRouteControl.setDescription('This is the value of the routing control field for this route.')
vrSresReRifLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresReRifLength.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReRifLength.setDescription('This attribute is used to display the length of the routing information field in the routing control field.')
vrSresReRdDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("leftToRight", 0), ("rightToLeft", 1), ("noRif", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresReRdDirection.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReRdDirection.setDescription('This attribute indicates the direction to use routing descriptors (RDs). If set to leftToRight the routing descriptors, displayed in routeDescr, will be interpreted from left to right. If set to rightToLeft they will be interpreted from right to left. If rifLength is zero, this attribute will be set to noRif to indicate that there are no routing descriptors to be read.')
vrSresReRouteDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 13, 2, 10, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSresReRouteDescr.setStatus('mandatory')
if mibBuilder.loadTexts: vrSresReRouteDescr.setDescription('This is the embedded sequence of bridge and ring IDs for this route. For destinations on the local ring, the value of this attribute is the zero- length string. Refer to rdDirection for the direction in which to read the route descriptors. The format of the hexadecimal data displayed is as follows: 12 bit Ring Number - 4 bit Bridge Number... XXX-X XXX-X XXX-X...')
sourceRouteEndStationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 1))
sourceRouteEndStationGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 1, 4))
sourceRouteEndStationGroupBD01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 1, 4, 2))
sourceRouteEndStationGroupBD01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 1, 4, 2, 2))
sourceRouteEndStationCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 3))
sourceRouteEndStationCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 3, 4))
sourceRouteEndStationCapabilitiesBD01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 3, 4, 2))
sourceRouteEndStationCapabilitiesBD01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 54, 3, 4, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-SourceRouteEndStationMIB", vrSresRowStatusTable=vrSresRowStatusTable, vrSresStorageType=vrSresStorageType, vrSresStateEntry=vrSresStateEntry, vrSresUsageState=vrSresUsageState, vrSresIndex=vrSresIndex, vrSresOperTable=vrSresOperTable, sourceRouteEndStationGroupBD=sourceRouteEndStationGroupBD, sourceRouteEndStationGroup=sourceRouteEndStationGroup, vrSresProvTable=vrSresProvTable, vrSresOperStatusTable=vrSresOperStatusTable, vrSresReOperTable=vrSresReOperTable, vrSresReStorageType=vrSresReStorageType, vrSresReRowStatusTable=vrSresReRowStatusTable, vrSresReRouteControl=vrSresReRouteControl, vrSresRe=vrSresRe, sourceRouteEndStationMIB=sourceRouteEndStationMIB, vrSresRtEntriesFree=vrSresRtEntriesFree, vrSresRowStatus=vrSresRowStatus, vrSresRouteDescriptorLength=vrSresRouteDescriptorLength, vrSresStateTable=vrSresStateTable, vrSresReDestMacAddressIndex=vrSresReDestMacAddressIndex, vrSresReRowStatusEntry=vrSresReRowStatusEntry, vrSresSnmpAdminStatus=vrSresSnmpAdminStatus, vrSresRtEntriesDenied=vrSresRtEntriesDenied, vrSresReProtocolPortNameIndex=vrSresReProtocolPortNameIndex, vrSresOperStatusEntry=vrSresOperStatusEntry, sourceRouteEndStationCapabilities=sourceRouteEndStationCapabilities, vrSresReRdDirection=vrSresReRdDirection, vrSres=vrSres, vrSresProvEntry=vrSresProvEntry, sourceRouteEndStationCapabilitiesBD=sourceRouteEndStationCapabilitiesBD, vrSresSnmpOperStatus=vrSresSnmpOperStatus, vrSresReOperEntry=vrSresReOperEntry, vrSresReRouteDescr=vrSresReRouteDescr, sourceRouteEndStationGroupBD01=sourceRouteEndStationGroupBD01, vrSresReComponentName=vrSresReComponentName, vrSresAgingTime=vrSresAgingTime, sourceRouteEndStationCapabilitiesBD01A=sourceRouteEndStationCapabilitiesBD01A, vrSresOperEntry=vrSresOperEntry, sourceRouteEndStationCapabilitiesBD01=sourceRouteEndStationCapabilitiesBD01, vrSresRtEntriesUsed=vrSresRtEntriesUsed, vrSresRowStatusEntry=vrSresRowStatusEntry, vrSresReRifLength=vrSresReRifLength, vrSresComponentName=vrSresComponentName, vrSresAdminState=vrSresAdminState, vrSresAdminControlTable=vrSresAdminControlTable, vrSresOperationalState=vrSresOperationalState, vrSresRouteTableNumEntries=vrSresRouteTableNumEntries, sourceRouteEndStationGroupBD01A=sourceRouteEndStationGroupBD01A, vrSresAdminControlEntry=vrSresAdminControlEntry, vrSresReRowStatus=vrSresReRowStatus)
