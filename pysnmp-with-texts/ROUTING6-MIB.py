#
# PySNMP MIB module ROUTING6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ROUTING6-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
Ipv6Address, Ipv6IfIndex, Ipv6AddressPrefix, Ipv6IfIndexOrZero, Ipv6AddressIfIdentifier = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address", "Ipv6IfIndex", "Ipv6AddressPrefix", "Ipv6IfIndexOrZero", "Ipv6AddressIfIdentifier")
RouterID, AreaID = mibBuilder.importSymbols("OSPF-MIB", "RouterID", "AreaID")
ospfv3AreaEntry, ospfv3IfEntry, ospfv3VirtIfEntry = mibBuilder.importSymbols("OSPFV3-MIB", "ospfv3AreaEntry", "ospfv3IfEntry", "ospfv3VirtIfEntry")
switch, = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, TimeTicks, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Bits, Counter64, Unsigned32, Integer32, Gauge32, IpAddress, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "TimeTicks", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Bits", "Counter64", "Unsigned32", "Integer32", "Gauge32", "IpAddress", "NotificationType", "MibIdentifier")
TruthValue, VariablePointer, TextualConvention, RowPointer, RowStatus, PhysAddress, MacAddress, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "VariablePointer", "TextualConvention", "RowPointer", "RowStatus", "PhysAddress", "MacAddress", "TimeStamp", "DisplayString")
routingIpv6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 30))
routingIpv6.setRevisions(('2011-08-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: routingIpv6.setRevisionsDescriptions(('Updated for release',))
if mibBuilder.loadTexts: routingIpv6.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: routingIpv6.setOrganization('Quanta Computer Inc.')
if mibBuilder.loadTexts: routingIpv6.setContactInfo(' Customer Support Postal: Quanta Computer Inc. 4, Wen Ming 1 St., Kuei Shan Hsiang, Tao Yuan Shien, Taiwan, R.O.C. Tel: +886 3 328 0050 E-Mail: strong.chen@quantatw.com')
if mibBuilder.loadTexts: routingIpv6.setDescription('The Quanta Private MIB for FastPath Ipv6 Routing')
class SpfTimerRange(TextualConvention, Integer32):
    description = 'The range of intervals on which Spf timers can be configured.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class AutoCostRefBw(TextualConvention, Unsigned32):
    description = 'The value of reference bandwidth from which ospf calculates metric cost.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967)

agentIpv6Group = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1))
agentIpv6RoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RoutingMode.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RoutingMode.setDescription('Administratively enables/disables ipv6 unicast routing on the switch.')
agentIpv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2), )
if mibBuilder.loadTexts: agentIpv6InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceTable.setDescription('')
agentIpv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6InterfaceIfIndex"))
if mibBuilder.loadTexts: agentIpv6InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceEntry.setDescription('')
agentIpv6InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6InterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceIfIndex.setDescription('The IfIndex associated with this instance.')
agentIpv6InterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1280, 1500), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceMtuValue.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceMtuValue.setDescription('Configures the MTU value for this interface.If it is not yet configured, retrieving the value of this object results in a zero value. Setting the value zero to this object effectively un-configures the MTU.')
agentIpv6InterfaceDadTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceDadTransmits.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceDadTransmits.setDescription('Configures the dad transmits value for this interface.')
agentIpv6InterfaceLinkLocalOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceLinkLocalOnly.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceLinkLocalOnly.setDescription('When enabled, interface is capable of ipv6 operation without a global address. In this case, an eui-64 based link-local address is used. ')
agentIpv6InterfaceIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpUnreachables.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpUnreachables.setDescription('If this object is enable, it indicates that ICMPv6 unreachables can be sent on this interface.')
agentIpv6InterfaceAutoconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceAutoconfig.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceAutoconfig.setDescription('If this object is enabled, it indicates that the IPv6 address is automatically generated using IPv6 stateless address auto configuration.')
agentIpv6InterfaceDhcpClient = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceDhcpClient.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceDhcpClient.setDescription('If this object is enabled, the interface uses DHCPv6 Client protocol to acquire an IPv6 address.')
agentIpv6RouterAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3), )
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementTable.setDescription('There is no global administrative flag for router advertisement. The global routing flag (agentIpv6RoutingMode) will be used for this purpose. If routing is disabled, router advertisement is disabled as well.')
agentIpv6RouterAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6RouterAdvertisementIfIndex"))
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementEntry.setDescription('')
agentIpv6RouterAdvertisementIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementIfIndex.setDescription('Interface Number to configure Router Advertisement on.')
agentIpv6RouterAdvertisementSuppressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementSuppressMode.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementSuppressMode.setDescription('Enable or disable router advertisement suppression on the interface.')
agentIpv6RouterAdvertisementMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMaxAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMaxAdvertisementInterval.setDescription('Maximum time allowed between sending router advertisements from the interface. (Max * 0.75 >= Min)')
agentIpv6RouterAdvertisementMinAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMinAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMinAdvertisementInterval.setDescription('Mimimum time allowed between sending router advertisements from the interface. (Max * 0.75 >= Min)')
agentIpv6RouterAdvertisementAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementAdvertisementLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementAdvertisementLifetime.setDescription('Value of lifetime field of router advertisement sent from the interface. This value must be greater than or equal to agentIpv6RouterAdvertisementMaxAdvertisementInterval.')
agentIpv6RouterAdvertisementNbrSolicitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementNbrSolicitInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementNbrSolicitInterval.setDescription('Value of retrans time field of router advertisement sent from the interface. A value of 0 means this router does not specifiy the interval. The valid value range is 1000..4294967295')
agentIpv6RouterAdvertisementReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementReachableTime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementReachableTime.setDescription('Value of reachable time field of router advertisement sent from the interface. A value of 0 means this router does not specifiy the interval.')
agentIpv6RouterAdvertisementManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementManagedFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementManagedFlag.setDescription('Value of managed config field of router advertisement sent from the interface.')
agentIpv6RouterAdvertisementOtherFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementOtherFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementOtherFlag.setDescription('Value of other config field of router advertisement sent from the interface.')
agentIpv6AddrPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4), )
if mibBuilder.loadTexts: agentIpv6AddrPrefixTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixTable.setDescription('The list of IPv6 address prefixes of IPv6 interfaces.')
agentIpv6AddrPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6InterfaceIfIndex"), (0, "ROUTING6-MIB", "agentIpv6AddrPrefix"), (0, "ROUTING6-MIB", "agentIpv6AddrPrefixLength"))
if mibBuilder.loadTexts: agentIpv6AddrPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixEntry.setDescription('An interface entry containing objects of a particular IPv6 address prefix.')
agentIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefix.setDescription('The prefix associated with the this interface.')
agentIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: agentIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixLength.setDescription('The length of the prefix (in bits).')
agentIpv6AddrPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixOnLinkFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixOnLinkFlag.setDescription("This object has the value 'true(1)', if this prefix can be used for on-link determination and the value 'false(2)' otherwise.")
agentIpv6AddrPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAutonomousFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAutonomousFlag.setDescription('Autonomous address configuration flag. When true(1), indicates that this prefix can be used for autonomous address configuration (i.e. can be used to form a local interface address). If false(2), it is not used to autoconfigure a local interface address.')
agentIpv6AddrPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvPreferredLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvPreferredLifetime.setDescription('It is the length of time in seconds that this prefix will remain preferred, i.e. time until deprecation. A value of 4,294,967,295 represents infinity. The address generated from a deprecated prefix should no longer be used as a source address in new communications, but packets received on such an interface are processed as expected.')
agentIpv6AddrPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 4, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvValidLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvValidLifetime.setDescription('It is the length of time in seconds that this prefix will remain valid, i.e. time until invalidation. A value of 4,294,967,295 represents infinity. The address generated from an invalidated prefix should not appear as the destination or source address of a packet.')
agentIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 5), )
if mibBuilder.loadTexts: agentIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrTable.setDescription("The table of addressing information relevant to this node's interface addresses.")
agentIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 5, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6InterfaceIfIndex"), (0, "ROUTING6-MIB", "agentIpv6AddrAddress"))
if mibBuilder.loadTexts: agentIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrEntry.setDescription("The addressing information for one of this node's interface addresses.")
agentIpv6AddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 5, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6AddrAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrAddress.setDescription("The IPv6 address to which this entry's addressing information pertains.")
agentIpv6AddrPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrPfxLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPfxLength.setDescription('The length of the prefix (in bits) associated with the IPv6 address of this entry.')
agentIpv6AddrEui64Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrEui64Flag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrEui64Flag.setDescription("This object has the value 'true(1)', if this address uses and eui-64 generated interface identifier and the value 'false(2)' otherwise.")
agentIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrStatus.setDescription('Creates a new entry in the Address table. Allowed values are: createAndGo(4) - Creates an entry in this table, associating the address with a given interface. The agentIpv6NetMask object must be set during creation. destroy(6) - Removes the associated address from the interface.')
agentIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6), )
if mibBuilder.loadTexts: agentIpv6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteTable.setDescription('IPv6 Static Routing table. This table contains an entry for each valid IPv6 static unicast route that can be used for packet forwarding determination.')
agentIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6StaticRouteDest"), (0, "ROUTING6-MIB", "agentIpv6StaticRoutePfxLength"), (0, "ROUTING6-MIB", "agentIpv6StaticRouteIfIndex"), (0, "ROUTING6-MIB", "agentIpv6StaticRouteNextHop"))
if mibBuilder.loadTexts: agentIpv6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteEntry.setDescription('A routing entry.')
agentIpv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentIpv6StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteDest.setDescription('The destination IPv6 address of this route. This object may not take a Multicast address value.')
agentIpv6StaticRoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: agentIpv6StaticRoutePfxLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRoutePfxLength.setDescription('Indicates the prefix length of the destination address.')
agentIpv6StaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6, 1, 3), Ipv6IfIndexOrZero())
if mibBuilder.loadTexts: agentIpv6StaticRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ipv6IfIndex. For routes with global address next hop this value can be zero.')
agentIpv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6, 1, 4), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteNextHop.setDescription('The address of the next system en route. ')
agentIpv6StaticRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6StaticRoutePreference.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRoutePreference.setDescription('The routing preference metric for this route. A lower value is more preferred.')
agentIpv6StaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6StaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteStatus.setDescription('Creates a new entry in the Address table. Allowed values are: createAndGo(4) - Creates an entry in this table. destroy(6) - Removes the associated route from the interface.')
agentIpv6ServicePortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7))
agentIpv6ServicePortPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 1), )
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixTable.setDescription('IPv6 Service Port Prefix Table. This table contains an entry for each valid IPv6 prefix configured on the Service Port.')
agentIpv6ServicePortPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 1, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6ServicePortPrefixIndex"))
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixEntry.setDescription('An IPv6 Service Port Prefix entry.')
agentIpv6ServicePortPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixIndex.setDescription('The index of the Ipv6 Prefix Address configured on the Service Port. Removal of a row will cause index values to be reassigned.')
agentIpv6ServicePortPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortPrefix.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefix.setDescription('The Ipv6 Prefix Address configured on the Service Port.')
agentIpv6ServicePortPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixLength.setDescription('The length of the IPv6 Prefix Address.')
agentIpv6ServicePortDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 2), )
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterTable.setDescription('IPv6 Service Port Default Router Table. This table contains an entry for each valid IPv6 Default Router configured on the Service Port.')
agentIpv6ServicePortDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 2, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6ServicePortDefaultRouterIndex"))
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterEntry.setDescription('An IPv6 Service Port Default Router entry.')
agentIpv6ServicePortDefaultRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterIndex.setDescription('The index of the IPv6 Default Router Address configured on the Service Port. Removal of a row will cause index values to be reassigned.')
agentIpv6ServicePortDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouter.setDescription('The Address of the IPv6 Default Router configured on the Service Port.')
agentIpv6ServicePortNbrTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 3), )
if mibBuilder.loadTexts: agentIpv6ServicePortNbrTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrTable.setDescription('IPv6 Service Port Neighbor Table. This table contains an entry for each valid IPv6 Neighbor configured on the Service Port.')
agentIpv6ServicePortNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 3, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6ServicePortNbrAddr"))
if mibBuilder.loadTexts: agentIpv6ServicePortNbrEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrEntry.setDescription('An IPv6 Service Port Neighbor entry.')
agentIpv6ServicePortNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 3, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6ServicePortNbrAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrAddr.setDescription('The Ipv6 Address of a neighbor switch visible to the Service Port.')
agentIpv6ServicePortNbrPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrPhysAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrPhysAddr.setDescription('The MacAddress of the neighboring switch.')
agentIpv6ServicePortNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrState.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrState.setDescription('The state of the neighboring switch: reachable(1) - The neighbor is reachable by this switch. stale(2) - Information about the neighbor is scheduled for deletion. delay(3) - No information has been received from neighbor during delay period. probe(4) - Switch is attempting to probe for this neighbor. unknown(6) - Unknown status.')
agentIpv6ServicePortNbrUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrUpdated.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrUpdated.setDescription('The last sysUpTime that this neighbor has been updated.')
agentIpv6ServicePortNbrIsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrIsRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrIsRouter.setDescription('Returns true(1) if the neighbor machine is a router, false(2) otherwise.')
agentIpv6ServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6ServicePortConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortConfigProtocol.setDescription("The switch's ServicePort IPv6 config protocol")
agentIpv6ServicePortDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 7, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6ServicePortDhcpRestart.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDhcpRestart.setDescription("The switch's ServicePort IPv6 DHCP Restart")
agentIpv6NeighborGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9))
agentIpv6NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1), )
if mibBuilder.loadTexts: agentIpv6NeighborTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborTable.setDescription('IPv6 Neighbor Table. This table contains an entry for each valid IPv6 Neighbor configured')
agentIpv6NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6NeighborIfIndex"), (0, "ROUTING6-MIB", "agentIpv6NeighborAddress"))
if mibBuilder.loadTexts: agentIpv6NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborEntry.setDescription('An IPv6 Neighbor entry.')
agentIpv6NeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1, 1, 1), Ipv6IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborIfIndex.setDescription('A unique non-zero value identifying the particular IPv6 interface.')
agentIpv6NeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NeighborAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborAddress.setDescription('The Ipv6 Address of a neighbor switch visible')
agentIpv6NeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NeighborMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborMacAddress.setDescription('The MacAddress of the neighboring switch.')
agentIpv6NeighborIsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NeighborIsRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborIsRouter.setDescription('Returns true(1) if the neighbor machine is a router, false(2) otherwise.')
agentIpv6NeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NeighborState.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborState.setDescription('The state of the neighboring switch: reachable(1) - The neighbor is reachable by this switch. stale(2) - Information about the neighbor is scheduled for deletion. delay(3) - No information has been received from neighbor during delay period. probe(4) - Switch is attempting to probe for this neighbor. unknown(6) - Unknown status.')
agentIpv6NeighborLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NeighborLastUpdated.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborLastUpdated.setDescription('The last sysUpTime that this neighbor has been updated.')
agentIpv6StaticNeighbor = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 2), )
if mibBuilder.loadTexts: agentIpv6StaticNeighbor.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighbor.setDescription('IPv6 static Neighbor Table. This table contains an entry for each valid IPv6 static Neighbor configured')
agentIpv6StaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 2, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentIpv6StaticNeighborIfIndex"))
if mibBuilder.loadTexts: agentIpv6StaticNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighborEntry.setDescription('An IPv6 static Neighbor entry.')
agentIpv6StaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 2, 1, 1), Ipv6IfIndex())
if mibBuilder.loadTexts: agentIpv6StaticNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighborIfIndex.setDescription('A unique non-zero value identifying the particular IPv6 interface.')
agentIpv6StaticNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6StaticNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighborAddress.setDescription('The Ipv6 Address of a static neighbor switch visible')
agentIpv6StaticNeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6StaticNeighborMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighborMacAddress.setDescription('The MacAddress of the static neighboring switch.')
agentIpv6StaticNeighborRowAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6StaticNeighborRowAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighborRowAddress.setDescription('The Ipv6 Address of a static neighbor switch visible')
agentIpv6StaticNeighborRowMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6StaticNeighborRowMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighborRowMacAddress.setDescription('The MacAddress of the static neighboring switch.')
agentIpv6StaticNeighborRowStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 9, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6StaticNeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticNeighborRowStatus.setDescription('Creates a new entry in the Neighbor table. Allowed values are: createAndGo(4) - Creates an entry in this table. destroy(6) - Removes the associated address from the interface.')
agentRouterRipngConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2))
agentRouterRipngAdminState = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngAdminState.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngAdminState.setDescription('Sets the administrative mode of RIPng in the router.')
agentRouterRipngSplitHorizonMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("poisonReverse", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngSplitHorizonMode.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngSplitHorizonMode.setDescription('Sets the RIPng split horizon operating mode in the router. A value of none(1) means split horizon processing is disabled. When set to simple(2), the simple split horizon technique is used. When set to poisonReverse(3), the split horizon with poison reverse technique is used. The default split horizon mode is simple(2).')
agentRouterRipngDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngDefaultMetric.setDescription('Default metric of redistributed routes, when RIPng redistributes from other protocols. {0} indicates that the parameter is not configured, this value should not be set. Valid range for set is (1..15).')
agentRouterRipngDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngDefaultMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngDefaultMetricConfigured.setDescription("Flag to determine whether RIPng default-metric is configured or not. Set to 'false' to unconfigure the default route metric. Set to 'true' is not allowed.")
agentRouterRipngDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngDefaultInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngDefaultInfoOriginate.setDescription('Flag to determine, whether RIPng can advertise a default-route learned from another protocol.')
agentRouterRipngDistance = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngDistance.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngDistance.setDescription('Configure the distance value for RIPng routes.')
agentRouterRipngUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngUpdateTime.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngUpdateTime.setDescription('Configure the Ripng update time.')
agentRouterRipngGarbageTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngGarbageTime.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngGarbageTime.setDescription('Configure the Ripng garbage time.')
agentRouterRipngTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipngTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipngTimeoutTime.setDescription('Configure the Ripng timeout time.')
agentRipngRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 9), )
if mibBuilder.loadTexts: agentRipngRouteRedistTable.setStatus('current')
if mibBuilder.loadTexts: agentRipngRouteRedistTable.setDescription('This table contains the MIB objects required to configure route-redistribution for RIPng. Here, RIPng is the Destination protocol and the source protocols can be any of : BGP, OSPF, Static, Connected.')
agentRipngRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 9, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentRipngRouteRedistSource"))
if mibBuilder.loadTexts: agentRipngRouteRedistEntry.setStatus('current')
if mibBuilder.loadTexts: agentRipngRouteRedistEntry.setDescription('')
agentRipngRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("ospf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRipngRouteRedistSource.setStatus('current')
if mibBuilder.loadTexts: agentRipngRouteRedistSource.setDescription('Source route, from which RIPng can redistribute routes. This object also acts as the identifier for the RIP redistribution Table entry.')
agentRipngRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipngRouteRedistMode.setStatus('current')
if mibBuilder.loadTexts: agentRipngRouteRedistMode.setDescription('User enabels/disables route-redistribution for a particular source protocol.')
agentRipngRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipngRouteRedistMetric.setStatus('current')
if mibBuilder.loadTexts: agentRipngRouteRedistMetric.setDescription('Metric used for redistributing a particular source protocol route into RIPng. {0} indicates that the parameter is not configured, this value should not be set. Valid range for set is (1..15).')
agentRipngRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 9, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipngRouteRedistMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentRipngRouteRedistMetricConfigured.setDescription("Flag to determine whether RIPng redistribute-metric is configured or not. Set to 'false' to unconfigure redistribute metric. Set to 'true' is not allowed.")
agentRipngIfTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 13), )
if mibBuilder.loadTexts: agentRipngIfTable.setStatus('current')
if mibBuilder.loadTexts: agentRipngIfTable.setDescription('The Ripng Interface Table describes the inter- faces from the viewpoint of Ripng.')
agentRipngIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 13, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentRipngIfIndex"))
if mibBuilder.loadTexts: agentRipngIfEntry.setStatus('current')
if mibBuilder.loadTexts: agentRipngIfEntry.setDescription('The Ripng Interface Entry describes one inter- face from the viewpoint of Ripng.')
agentRipngIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRipngIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentRipngIfIndex.setDescription('The IfIndex associated with this instance.')
agentRipngIfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipngIfAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentRipngIfAdminMode.setDescription('Configures interface mode of Ripng.')
agentRipngIfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipngIfPassiveMode.setStatus('current')
if mibBuilder.loadTexts: agentRipngIfPassiveMode.setDescription('Flag to determine whether the interface is passive. A passive interface will not participate in the Ripng adjacency formation.')
agentRouterOspfv3ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3))
agentOspfv3DefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultMetric.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultMetric.setDescription('Default metric of redistributed routes, when OSPFv3 redistributes from other protocols.')
agentOspfv3DefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultMetricConfigured.setDescription('Flag to determine whether OSPFv3 default-metric is configured or not.')
agentOspfv3DefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginate.setDescription('Flag to determine, whether OSPFv3 can advertise a default-route learned from another protocol.')
agentOspfv3DefaultInfoOriginateAlways = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateAlways.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateAlways.setDescription("When this flag is true, the router advertises 0.0.0.0/0.0.0.0 always. Without this option, OSPF will only advertise 0.0.0.0/0.0.0.0 if the router's forwarding table contains a default route.")
agentOspfv3DefaultInfoOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateMetric.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateMetric.setDescription('Metric of the default route,which OSPF advertises when learned from other protocol.')
agentOspfv3DefaultInfoOriginateMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateMetricConfigured.setDescription('Flag to determine whether OSPF default-info originate metric is configured or not.')
agentOspfv3DefaultInfoOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateMetricType.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultInfoOriginateMetricType.setDescription('Metric Type of the default route,which OSPF advertises when learned from other protocol. It can be 1(external type 1) or 2(external type 2).')
agentOspfv3RouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8), )
if mibBuilder.loadTexts: agentOspfv3RouteRedistTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistTable.setDescription('This table contains the MIB objects required to configure route-redistribution for OSPF. Here, OSPF is the Destination protocol and the source protocols can be any of : BGP, RIP, Static, Connected.')
agentOspfv3RouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentOspfv3RouteRedistSource"))
if mibBuilder.loadTexts: agentOspfv3RouteRedistEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistEntry.setDescription('')
agentOspfv3RouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3RouteRedistSource.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistSource.setDescription('Source protocol, from which OSPF can redistribute routes. This object also acts as the identifier for the OSPF redistribution Table entry.')
agentOspfv3RouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3RouteRedistMode.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistMode.setDescription('User enabels/disables route-redistribution for a particular source protocol.')
agentOspfv3RouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3RouteRedistMetric.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistMetric.setDescription('Metric used for redistributing a particular source protocol route into OSPF.')
agentOspfv3RouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3RouteRedistMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistMetricConfigured.setDescription('Flag to determine whether OSPF redistribute-metric is configured or not.')
agentOspfv3RouteRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone('externalType2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3RouteRedistMetricType.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistMetricType.setDescription('Metric Type of routes,which OSPF redistributes from other source protocols. It can be 1(external type 1) or 2(external type 2).')
agentOspfv3RouteRedistTag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3RouteRedistTag.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3RouteRedistTag.setDescription('It specifies the tag field in routes redistributed by OSPF.')
agentOspfv3IfTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 9), )
if mibBuilder.loadTexts: agentOspfv3IfTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3IfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF. Augments ospfIfTable from the OSPF-MIB.')
agentOspfv3IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 9, 1), )
ospfv3IfEntry.registerAugmentions(("ROUTING6-MIB", "agentOspfv3IfEntry"))
agentOspfv3IfEntry.setIndexNames(*ospfv3IfEntry.getIndexNames())
if mibBuilder.loadTexts: agentOspfv3IfEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3IfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF. Augments ospfIfEntry in OSPF-MIB.')
agentOspfv3IfIpMtuIgnoreFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3IfIpMtuIgnoreFlag.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3IfIpMtuIgnoreFlag.setDescription('Configures the IP MTU Ignore Flag value for this OSPF interface.')
agentOspfv3IfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3IfPassiveMode.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3IfPassiveMode.setDescription('Flag to determine whether the interface is passive. A passive interface will not participate in the OSPF adjacency formation.')
agentOspfv3LsdbTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10), )
if mibBuilder.loadTexts: agentOspfv3LsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: agentOspfv3LsdbTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbTable.setDescription("The OSPF Process's Link State Database.")
agentOspfv3LsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentOspfv3LsdbAreaId"), (0, "ROUTING6-MIB", "agentOspfv3LsdbType"), (0, "ROUTING6-MIB", "agentOspfv3LsdbLsid"), (0, "ROUTING6-MIB", "agentOspfv3LsdbRouterId"))
if mibBuilder.loadTexts: agentOspfv3LsdbEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbEntry.setDescription('A single Link State Advertisement.')
agentOspfv3LsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: agentOspfv3LsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
agentOspfv3LsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("illegalLSA", 0), ("routerLink", 1), ("networkLink", 2), ("interNetwork", 3), ("interRouter", 4), ("asExternal", 5), ("multicastGroup", 6), ("nssaExternal", 7), ("link", 8), ("intraPrefix", 9), ("unknownLink", 10), ("unknownArea", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: agentOspfv3LsdbType.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
agentOspfv3LsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: agentOspfv3LsdbLsid.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
agentOspfv3LsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: agentOspfv3LsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
agentOspfv3LsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: agentOspfv3LsdbSequence.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
agentOspfv3LsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: agentOspfv3LsdbAge.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
agentOspfv3LsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: agentOspfv3LsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
agentOspfv3LsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3LsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: agentOspfv3LsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3LsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
agentOspfv3AutoCostRefBw = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 14), AutoCostRefBw().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3AutoCostRefBw.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AutoCostRefBw.setDescription('Auto cost refernece bandwidth of the router interafaces for ospf metric calculations. It can be an integer from 1 to 4294967. The default reference bandwidth is 100 Mbps.')
agentOspfv3AsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18), )
if mibBuilder.loadTexts: agentOspfv3AsLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: agentOspfv3AsLsdbTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbTable.setDescription("The OSPF Process's AS-scope LSA Link State Database. The Database contains the AS-scope Link State Advertisements from throughout the areas that the device is attached to. This table is identical to the OSPF LSDB Table in format, but contains only AS-scope Link State Advertisements. The purpose is to allow AS-scope LSAs to be displayed once for the router rather than once in each non-stub area.")
agentOspfv3AsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentOspfv3AsLsdbType"), (0, "ROUTING6-MIB", "agentOspfv3AsLsdbLsid"), (0, "ROUTING6-MIB", "agentOspfv3AsLsdbRouterId"))
if mibBuilder.loadTexts: agentOspfv3AsLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbEntry.setDescription('A single Link State Advertisement.')
agentOspfv3AsLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("illegalLSA", 0), ("routerLink", 1), ("networkLink", 2), ("interNetwork", 3), ("interRouter", 4), ("asExternal", 5), ("multicastGroup", 6), ("nssaExternal", 7), ("link", 8), ("intraPrefix", 9), ("unknownLink", 10), ("unknownArea", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3AsLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: agentOspfv3AsLsdbType.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
agentOspfv3AsLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3AsLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: agentOspfv3AsLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
agentOspfv3AsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3AsLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: agentOspfv3AsLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
agentOspfv3AsLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3AsLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: agentOspfv3AsLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.")
agentOspfv3AsLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3AsLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: agentOspfv3AsLsdbAge.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
agentOspfv3AsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3AsLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: agentOspfv3AsLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
agentOspfv3AsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfv3AsLsdbAdvertisement.setReference('OSPF Version 3, Section 12 Link State Adver- tisements. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
if mibBuilder.loadTexts: agentOspfv3AsLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3AsLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
agentOspfv3DefaultPassiveMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 3, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfv3DefaultPassiveMode.setStatus('current')
if mibBuilder.loadTexts: agentOspfv3DefaultPassiveMode.setDescription('Flag to determine, whether all the interfaces are passive interfaces by default. A passive interface will not participate in the OSPFv3 adjacency formation.')
agentIpv6IcmpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 10))
agentIpv6IcmpRateLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitInterval.setDescription('Specifies the time interval between tokens being placed in the bucket for ICMP Ratelimit.')
agentIpv6IcmpRateLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitBurstSize.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitBurstSize.setDescription('Specifies the number of tokens to be placed after timeout.')
agentDhcp6ClientParametersTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11), )
if mibBuilder.loadTexts: agentDhcp6ClientParametersTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientParametersTable.setDescription('Information about the DHCPv6 Client parameters on the interfaces.')
agentDhcp6ClientParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1), ).setIndexNames((0, "ROUTING6-MIB", "agentDhcp6ClientInterfaceIndex"))
if mibBuilder.loadTexts: agentDhcp6ClientParametersEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientParametersEntry.setDescription('DHCPv6 Client information on an interface.')
agentDhcp6ClientInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientInterfaceIndex.setDescription('The Interface index on which the IPv6 address is leased by the DHCPv6 Server.')
agentDhcp6ClientPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 2), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientPrefix.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientPrefix.setDescription('The IPv6 Prefix leased by the DHCPv6 Server.')
agentDhcp6ClientPrefixlength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientPrefixlength.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientPrefixlength.setDescription('The Prefix length corresponding to the IPv6 Prefix leased by the DHCPv6 Server.')
agentDhcp6ClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 0), ("solicit", 1), ("request", 2), ("active", 3), ("renew", 4), ("rebind", 5), ("release", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientState.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientState.setDescription('The State of the DHCPv6 Client on this interface.')
agentDhcp6ClientServerDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientServerDUID.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientServerDUID.setDescription('The DHCPv6 Unique Identifier of the DHCPv6 Server on this interface.')
agentDhcp6ClientT1Time = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientT1Time.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientT1Time.setDescription('The T1 (in seconds) time as indicated by the DHCPv6 Server. T1 value indicates the time interval after which the address is requested for renewal.')
agentDhcp6ClientT2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientT2Time.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientT2Time.setDescription('The T2 (in seconds) time as indicated by the DHCPv6 Server. T2 value indicates the time interval after which the Client sends Rebind message to the Server incase there are no replies to the Renew messages.')
agentDhcp6ClientIAID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientIAID.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientIAID.setDescription('An identifier for an identity association chosen by this Client.')
agentDhcp6ClientPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientPreferredLifeTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientPreferredLifeTime.setDescription('The time (in seconds) that the IPv6 address is leased by the DHCPv6 Server.')
agentDhcp6ClientValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientValidLifeTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientValidLifeTime.setDescription('The time (in seconds) that the IPv6 address is leased by the DHCPv6 Server.')
agentDhcp6ClientRenewTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientRenewTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientRenewTime.setDescription('The time (in seconds) remaining to send a DHCPv6 Renew request to DHCPv6 Server for the leased address.')
agentDhcp6ClientExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 30, 1, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientExpireTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientExpireTime.setDescription('The time (in seconds) when the DHCPv6 leased address expires.')
mibBuilder.exportSymbols("ROUTING6-MIB", agentIpv6ServicePortDefaultRouterTable=agentIpv6ServicePortDefaultRouterTable, agentIpv6RouterAdvertisementIfIndex=agentIpv6RouterAdvertisementIfIndex, agentIpv6RouterAdvertisementMinAdvertisementInterval=agentIpv6RouterAdvertisementMinAdvertisementInterval, agentIpv6StaticRouteTable=agentIpv6StaticRouteTable, agentIpv6InterfaceAutoconfig=agentIpv6InterfaceAutoconfig, agentRouterRipngTimeoutTime=agentRouterRipngTimeoutTime, agentRipngIfIndex=agentRipngIfIndex, agentIpv6ServicePortNbrTable=agentIpv6ServicePortNbrTable, agentOspfv3RouteRedistSource=agentOspfv3RouteRedistSource, agentIpv6ServicePortNbrState=agentIpv6ServicePortNbrState, agentIpv6ServicePortPrefixTable=agentIpv6ServicePortPrefixTable, agentIpv6InterfaceIcmpUnreachables=agentIpv6InterfaceIcmpUnreachables, agentIpv6AddrStatus=agentIpv6AddrStatus, agentIpv6RouterAdvertisementOtherFlag=agentIpv6RouterAdvertisementOtherFlag, agentRouterRipngConfigGroup=agentRouterRipngConfigGroup, routingIpv6=routingIpv6, agentIpv6ServicePortPrefixIndex=agentIpv6ServicePortPrefixIndex, agentDhcp6ClientPrefixlength=agentDhcp6ClientPrefixlength, agentDhcp6ClientExpireTime=agentDhcp6ClientExpireTime, agentRouterRipngDefaultMetricConfigured=agentRouterRipngDefaultMetricConfigured, agentOspfv3AsLsdbLsid=agentOspfv3AsLsdbLsid, agentIpv6AddrEui64Flag=agentIpv6AddrEui64Flag, agentIpv6StaticNeighbor=agentIpv6StaticNeighbor, agentIpv6ServicePortConfigProtocol=agentIpv6ServicePortConfigProtocol, agentIpv6NeighborIfIndex=agentIpv6NeighborIfIndex, agentIpv6StaticNeighborRowMacAddress=agentIpv6StaticNeighborRowMacAddress, agentOspfv3DefaultInfoOriginateAlways=agentOspfv3DefaultInfoOriginateAlways, agentDhcp6ClientInterfaceIndex=agentDhcp6ClientInterfaceIndex, agentRouterRipngDefaultInfoOriginate=agentRouterRipngDefaultInfoOriginate, agentIpv6ServicePortGroup=agentIpv6ServicePortGroup, agentOspfv3DefaultInfoOriginate=agentOspfv3DefaultInfoOriginate, agentOspfv3RouteRedistMetric=agentOspfv3RouteRedistMetric, agentOspfv3AsLsdbSequence=agentOspfv3AsLsdbSequence, agentDhcp6ClientPrefix=agentDhcp6ClientPrefix, agentIpv6AddrTable=agentIpv6AddrTable, agentIpv6StaticNeighborRowAddress=agentIpv6StaticNeighborRowAddress, agentRipngRouteRedistSource=agentRipngRouteRedistSource, agentOspfv3LsdbSequence=agentOspfv3LsdbSequence, agentOspfv3LsdbChecksum=agentOspfv3LsdbChecksum, agentDhcp6ClientIAID=agentDhcp6ClientIAID, agentIpv6RouterAdvertisementTable=agentIpv6RouterAdvertisementTable, agentIpv6AddrPrefixLength=agentIpv6AddrPrefixLength, agentIpv6ServicePortNbrPhysAddr=agentIpv6ServicePortNbrPhysAddr, agentOspfv3DefaultMetric=agentOspfv3DefaultMetric, agentIpv6AddrEntry=agentIpv6AddrEntry, agentDhcp6ClientServerDUID=agentDhcp6ClientServerDUID, agentIpv6ServicePortDefaultRouterIndex=agentIpv6ServicePortDefaultRouterIndex, agentIpv6ServicePortNbrEntry=agentIpv6ServicePortNbrEntry, agentRipngIfEntry=agentRipngIfEntry, agentOspfv3IfPassiveMode=agentOspfv3IfPassiveMode, agentIpv6InterfaceEntry=agentIpv6InterfaceEntry, agentOspfv3AsLsdbEntry=agentOspfv3AsLsdbEntry, agentRipngIfAdminMode=agentRipngIfAdminMode, agentRipngIfPassiveMode=agentRipngIfPassiveMode, agentIpv6ServicePortDefaultRouterEntry=agentIpv6ServicePortDefaultRouterEntry, agentIpv6RoutingMode=agentIpv6RoutingMode, agentDhcp6ClientPreferredLifeTime=agentDhcp6ClientPreferredLifeTime, agentOspfv3AsLsdbAge=agentOspfv3AsLsdbAge, agentIpv6ServicePortNbrIsRouter=agentIpv6ServicePortNbrIsRouter, agentRouterRipngAdminState=agentRouterRipngAdminState, SpfTimerRange=SpfTimerRange, agentIpv6AddrPfxLength=agentIpv6AddrPfxLength, agentDhcp6ClientState=agentDhcp6ClientState, agentIpv6ServicePortDhcpRestart=agentIpv6ServicePortDhcpRestart, agentIpv6RouterAdvertisementAdvertisementLifetime=agentIpv6RouterAdvertisementAdvertisementLifetime, agentIpv6NeighborState=agentIpv6NeighborState, agentIpv6InterfaceIfIndex=agentIpv6InterfaceIfIndex, agentDhcp6ClientParametersTable=agentDhcp6ClientParametersTable, agentIpv6AddrAddress=agentIpv6AddrAddress, agentIpv6RouterAdvertisementNbrSolicitInterval=agentIpv6RouterAdvertisementNbrSolicitInterval, agentRouterRipngUpdateTime=agentRouterRipngUpdateTime, agentIpv6NeighborGroup=agentIpv6NeighborGroup, agentOspfv3DefaultInfoOriginateMetric=agentOspfv3DefaultInfoOriginateMetric, agentIpv6ServicePortPrefixEntry=agentIpv6ServicePortPrefixEntry, agentIpv6AddrPrefixAutonomousFlag=agentIpv6AddrPrefixAutonomousFlag, agentIpv6InterfaceTable=agentIpv6InterfaceTable, agentOspfv3RouteRedistEntry=agentOspfv3RouteRedistEntry, agentDhcp6ClientRenewTime=agentDhcp6ClientRenewTime, agentOspfv3DefaultInfoOriginateMetricConfigured=agentOspfv3DefaultInfoOriginateMetricConfigured, agentOspfv3IfTable=agentOspfv3IfTable, agentIpv6RouterAdvertisementReachableTime=agentIpv6RouterAdvertisementReachableTime, PYSNMP_MODULE_ID=routingIpv6, agentIpv6ServicePortPrefixLength=agentIpv6ServicePortPrefixLength, agentIpv6StaticNeighborAddress=agentIpv6StaticNeighborAddress, agentOspfv3DefaultInfoOriginateMetricType=agentOspfv3DefaultInfoOriginateMetricType, agentRipngRouteRedistMetricConfigured=agentRipngRouteRedistMetricConfigured, agentOspfv3LsdbEntry=agentOspfv3LsdbEntry, agentIpv6AddrPrefixOnLinkFlag=agentIpv6AddrPrefixOnLinkFlag, agentIpv6AddrPrefixAdvPreferredLifetime=agentIpv6AddrPrefixAdvPreferredLifetime, agentIpv6StaticNeighborIfIndex=agentIpv6StaticNeighborIfIndex, agentRipngIfTable=agentRipngIfTable, agentRipngRouteRedistMetric=agentRipngRouteRedistMetric, agentIpv6Group=agentIpv6Group, agentDhcp6ClientParametersEntry=agentDhcp6ClientParametersEntry, AutoCostRefBw=AutoCostRefBw, agentIpv6NeighborAddress=agentIpv6NeighborAddress, agentIpv6AddrPrefixTable=agentIpv6AddrPrefixTable, agentIpv6NeighborMacAddress=agentIpv6NeighborMacAddress, agentIpv6StaticRouteIfIndex=agentIpv6StaticRouteIfIndex, agentOspfv3AsLsdbRouterId=agentOspfv3AsLsdbRouterId, agentIpv6InterfaceDadTransmits=agentIpv6InterfaceDadTransmits, agentIpv6NeighborTable=agentIpv6NeighborTable, agentIpv6StaticNeighborRowStatus=agentIpv6StaticNeighborRowStatus, agentIpv6RouterAdvertisementSuppressMode=agentIpv6RouterAdvertisementSuppressMode, agentIpv6IcmpRateLimitBurstSize=agentIpv6IcmpRateLimitBurstSize, agentOspfv3LsdbAdvertisement=agentOspfv3LsdbAdvertisement, agentIpv6RouterAdvertisementEntry=agentIpv6RouterAdvertisementEntry, agentDhcp6ClientValidLifeTime=agentDhcp6ClientValidLifeTime, agentOspfv3AsLsdbType=agentOspfv3AsLsdbType, agentIpv6IcmpRateLimitInterval=agentIpv6IcmpRateLimitInterval, agentIpv6AddrPrefix=agentIpv6AddrPrefix, agentIpv6StaticRouteEntry=agentIpv6StaticRouteEntry, agentOspfv3RouteRedistMetricConfigured=agentOspfv3RouteRedistMetricConfigured, agentIpv6ServicePortPrefix=agentIpv6ServicePortPrefix, agentOspfv3LsdbType=agentOspfv3LsdbType, agentOspfv3AutoCostRefBw=agentOspfv3AutoCostRefBw, agentIpv6IcmpControlGroup=agentIpv6IcmpControlGroup, agentOspfv3RouteRedistMode=agentOspfv3RouteRedistMode, agentIpv6StaticNeighborMacAddress=agentIpv6StaticNeighborMacAddress, agentRipngRouteRedistEntry=agentRipngRouteRedistEntry, agentOspfv3LsdbLsid=agentOspfv3LsdbLsid, agentIpv6StaticNeighborEntry=agentIpv6StaticNeighborEntry, agentIpv6StaticRouteStatus=agentIpv6StaticRouteStatus, agentRouterRipngDefaultMetric=agentRouterRipngDefaultMetric, agentOspfv3AsLsdbTable=agentOspfv3AsLsdbTable, agentIpv6NeighborEntry=agentIpv6NeighborEntry, agentDhcp6ClientT1Time=agentDhcp6ClientT1Time, agentOspfv3DefaultMetricConfigured=agentOspfv3DefaultMetricConfigured, agentRouterRipngGarbageTime=agentRouterRipngGarbageTime, agentIpv6InterfaceMtuValue=agentIpv6InterfaceMtuValue, agentIpv6ServicePortNbrUpdated=agentIpv6ServicePortNbrUpdated, agentIpv6RouterAdvertisementMaxAdvertisementInterval=agentIpv6RouterAdvertisementMaxAdvertisementInterval, agentIpv6StaticRoutePfxLength=agentIpv6StaticRoutePfxLength, agentOspfv3RouteRedistTable=agentOspfv3RouteRedistTable, agentRipngRouteRedistMode=agentRipngRouteRedistMode, agentRouterRipngSplitHorizonMode=agentRouterRipngSplitHorizonMode, agentIpv6ServicePortNbrAddr=agentIpv6ServicePortNbrAddr, agentRouterOspfv3ConfigGroup=agentRouterOspfv3ConfigGroup, agentIpv6ServicePortDefaultRouter=agentIpv6ServicePortDefaultRouter, agentOspfv3IfIpMtuIgnoreFlag=agentOspfv3IfIpMtuIgnoreFlag, agentDhcp6ClientT2Time=agentDhcp6ClientT2Time, agentOspfv3RouteRedistMetricType=agentOspfv3RouteRedistMetricType, agentIpv6InterfaceLinkLocalOnly=agentIpv6InterfaceLinkLocalOnly, agentIpv6NeighborIsRouter=agentIpv6NeighborIsRouter, agentIpv6StaticRoutePreference=agentIpv6StaticRoutePreference, agentIpv6RouterAdvertisementManagedFlag=agentIpv6RouterAdvertisementManagedFlag, agentOspfv3DefaultPassiveMode=agentOspfv3DefaultPassiveMode, agentOspfv3LsdbRouterId=agentOspfv3LsdbRouterId, agentIpv6InterfaceDhcpClient=agentIpv6InterfaceDhcpClient, agentOspfv3RouteRedistTag=agentOspfv3RouteRedistTag, agentIpv6AddrPrefixEntry=agentIpv6AddrPrefixEntry, agentIpv6StaticRouteDest=agentIpv6StaticRouteDest, agentIpv6AddrPrefixAdvValidLifetime=agentIpv6AddrPrefixAdvValidLifetime, agentOspfv3LsdbAreaId=agentOspfv3LsdbAreaId, agentIpv6StaticRouteNextHop=agentIpv6StaticRouteNextHop, agentOspfv3IfEntry=agentOspfv3IfEntry, agentRipngRouteRedistTable=agentRipngRouteRedistTable, agentOspfv3AsLsdbChecksum=agentOspfv3AsLsdbChecksum, agentOspfv3LsdbTable=agentOspfv3LsdbTable, agentIpv6NeighborLastUpdated=agentIpv6NeighborLastUpdated, agentOspfv3AsLsdbAdvertisement=agentOspfv3AsLsdbAdvertisement, agentOspfv3LsdbAge=agentOspfv3LsdbAge, agentRouterRipngDistance=agentRouterRipngDistance)
