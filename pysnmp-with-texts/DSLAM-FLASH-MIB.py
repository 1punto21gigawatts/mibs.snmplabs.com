#
# PySNMP MIB module DSLAM-FLASH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSLAM-FLASH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, enterprises, ModuleIdentity, TimeTicks, Gauge32, Counter64, Unsigned32, IpAddress, Bits, NotificationType, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "ModuleIdentity", "TimeTicks", "Gauge32", "Counter64", "Unsigned32", "IpAddress", "Bits", "NotificationType", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pgDSLAMFlashMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 5))
if mibBuilder.loadTexts: pgDSLAMFlashMIB.setLastUpdated('9803260000Z')
if mibBuilder.loadTexts: pgDSLAMFlashMIB.setOrganization('Pairgain Technology')
if mibBuilder.loadTexts: pgDSLAMFlashMIB.setContactInfo('')
if mibBuilder.loadTexts: pgDSLAMFlashMIB.setDescription('The module defines the MIB for utilizing the DSLAM flash')
pgDSLAMFlashObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1))
pgDSLAMFlashOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMFlashOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFlashOperStatus.setDescription('This object contains the result of the most recent flash test, or the value none(1) if no tests have been requested since the last reset.')
pgDSLAMFlashDownLoad = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFlashDownLoad.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFlashDownLoad.setDescription('Write to this variable to initiate a TFTP download. syntax: <remotehost>:<full path to remote file>,<slot>[,<file name>]')
pgDSLAMFlashUpLoad = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFlashUpLoad.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFlashUpLoad.setDescription('Write to this variable to initiate a TFTP upload. syntax: <slot>,<file name>,<remotehost>:<full path to remote file>')
pgDSLAMFlashCopyFile = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFlashCopyFile.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFlashCopyFile.setDescription('Write to this variable to copy a file from card to card. syntax: <slot>,<file name>,<slot>[,<file name>]')
pgModemXferTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5), )
if mibBuilder.loadTexts: pgModemXferTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgModemXferTable.setDescription('The DSLAM Modem File Transfer Table.')
pgModemXferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgModemXferEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgModemXferEntry.setDescription('Entry in the DSLAM Modem File Transfer Table.')
pgModemXferOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgModemXferOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgModemXferOperStatus.setDescription('This object contains the result of the most recently requested modem file transfer access, or the value none(1) if no action have been requested since the last reset.')
pgModemXferSourceFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgModemXferSourceFilename.setStatus('mandatory')
if mibBuilder.loadTexts: pgModemXferSourceFilename.setDescription('Specify source filename.')
pgModemXferDestinationFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgModemXferDestinationFilename.setStatus('optional')
if mibBuilder.loadTexts: pgModemXferDestinationFilename.setDescription('Specify destination filename.')
pgModemXferAction = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("abort", 1), ("download", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pgModemXferAction.setStatus('mandatory')
if mibBuilder.loadTexts: pgModemXferAction.setDescription('Specify the desired download action. The options are as follows: download - Download the file specified by pgModemXferSourceFilename to the modem that is attached to ifIndex. The file must be present on the card that contains the ifIndex. Specifying pgModemXferDestinationFilename is optional and valid only for ADSL modems. abort - Abort current file transfer.')
mibBuilder.exportSymbols("DSLAM-FLASH-MIB", pgModemXferSourceFilename=pgModemXferSourceFilename, pgDSLAMFlashMIB=pgDSLAMFlashMIB, pgDSLAMFlashObjects=pgDSLAMFlashObjects, pgModemXferEntry=pgModemXferEntry, pgModemXferDestinationFilename=pgModemXferDestinationFilename, pgDSLAMFlashCopyFile=pgDSLAMFlashCopyFile, pgModemXferOperStatus=pgModemXferOperStatus, pgDSLAMFlashOperStatus=pgDSLAMFlashOperStatus, pgDSLAMFlashDownLoad=pgDSLAMFlashDownLoad, pgDSLAMFlashUpLoad=pgDSLAMFlashUpLoad, pgModemXferTable=pgModemXferTable, pgModemXferAction=pgModemXferAction, PYSNMP_MODULE_ID=pgDSLAMFlashMIB)
