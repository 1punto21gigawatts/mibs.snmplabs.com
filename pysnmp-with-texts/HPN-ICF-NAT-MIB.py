#
# PySNMP MIB module HPN-ICF-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, IpAddress, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, iso, ObjectIdentity, Bits, Counter64, TimeTicks, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "iso", "ObjectIdentity", "Bits", "Counter64", "TimeTicks", "Counter32", "NotificationType")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hpnicfNat = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18))
hpnicfNat.setRevisions(('2005-01-20 15:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfNat.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfNat.setLastUpdated('200409170100Z')
if mibBuilder.loadTexts: hpnicfNat.setOrganization('')
if mibBuilder.loadTexts: hpnicfNat.setContactInfo('')
if mibBuilder.loadTexts: hpnicfNat.setDescription('This MIB contains objects to manage configuration of NAT. There are no constraints on this MIB.')
hpnicfNATGlobalVars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1))
hpnicfNATClearSession = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 1))
hpnicfNATClearSessionSlotNo = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATClearSessionSlotNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATClearSessionSlotNo.setDescription("The number of NAT board in which administrator wants to clear data of the session. In router, the value is 255 because no NAT board in it. This node only supports 'set' operation. The return value of 'get' operation is meaningless.")
hpnicfNATBLConnectLimitPara = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 2))
hpnicfNATBLConnectHighValue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 20000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLConnectHighValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConnectHighValue.setDescription('The maximal connection amount. If the connection amount exceeds the value, the IP address will be added into blacklist. The IP address will not be removed from blacklist until the connection amount is less than the minimal connection amount.')
hpnicfNATBLConnectLowValue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 20000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLConnectLowValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConnectLowValue.setDescription('The minimal connection amount.')
hpnicfNATBLConnectHighRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 21474836)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLConnectHighRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConnectHighRate.setDescription('The maximal connection rate(in second). If the connection rate exceed the value, the IP address will be added into blacklist. The IP address will not be removed from blacklist until the connection rate is less than the minimal connection rate.')
hpnicfNATBLConnectLowRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 21474836)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLConnectLowRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConnectLowRate.setDescription('The minimal connection rate(in second).')
hpnicfNATBLSpecialConnectHighRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 21474836)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLSpecialConnectHighRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLSpecialConnectHighRate.setDescription('The maximal special connection rate(in second). When administrator wants to control the speed of connection, he can selects the connection speed rate or special connection rate.')
hpnicfNATBLSpecialConnectLowRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 21474836)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLSpecialConnectLowRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLSpecialConnectLowRate.setDescription('The minimal special connection rate(in second).')
hpnicfNATBLCtrlEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 3))
hpnicfNATBLConnectSumEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLConnectSumEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConnectSumEnable.setDescription('Enable or disable the connection amount control.')
hpnicfNATBLConnectRateEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLConnectRateEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConnectRateEnable.setDescription('Enable or disable the connection rate control.')
hpnicfNATNPTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 4))
hpnicfNATNPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("slow", 2))).clone('fast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATNPAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATNPAgingTime.setDescription('There are two kinds of aging time in NP. One is fast and the other is slow. Administrator can select one or other. The defalult is fast.')
hpnicfNATMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2))
hpnicfNATPoolInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1), )
if mibBuilder.loadTexts: hpnicfNATPoolInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolInfoTable.setDescription('NAT address pool table : The address in the pool is the IP address in the global network. The pool can span 255 IP addresses.All address pools configured by administrator are recorded in this table.')
hpnicfNATPoolInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATPoolIdx"))
if mibBuilder.loadTexts: hpnicfNATPoolInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolInfoEntry.setDescription('The entry of NAT address pool table.')
hpnicfNATPoolIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 320)))
if mibBuilder.loadTexts: hpnicfNATPoolIdx.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolIdx.setDescription('Index of the address pool: The index uniquely indicates the address pool in the system, and its range is from 1 to 320. ')
hpnicfNATPoolStartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATPoolStartIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolStartIpAddr.setDescription('The start IP address of address pool: It must be less than or equal to the end IP address.')
hpnicfNATPoolEndIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATPoolEndIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolEndIpAddr.setDescription('The end IP address of address pool: It must be more than or equal to the start IP address.')
hpnicfNATPoolSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATPoolSlotNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolSlotNo.setDescription('The number of NAT board to which the address pool is bound. The address translation is processed by this NAT board . The relation between address pool and slotNo is n:1. When the address pool is not bound to the NAT board,the value is 255. ')
hpnicfNATPoolRefCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATPoolRefCounter.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolRefCounter.setDescription('The counter of reference. A address pool can be associated with more than one ACL and the counter of reference is recorded in this field. When the address pool is not associated with ACL, the value is 0.')
hpnicfNATPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATPoolRowStatus.setDescription("Only support 'destroy' and 'createAndGo'. If hpnicfNATPoolIdx, hpnicfNATPoolStartIpAddr and hpnicfNATPoolEndIpAddr were provided correctly, its value is changed 'active'.")
hpnicfNATOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 2), )
if mibBuilder.loadTexts: hpnicfNATOutboundTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATOutboundTable.setDescription('NAT out bound table: through associating ACL number, address pool with NAT board, administrator can designate which inside IP address can be translated to global IP address in the pool and the translation is processed by which NAT board.')
hpnicfNATOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATOutboundAclNo"))
if mibBuilder.loadTexts: hpnicfNATOutboundEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATOutboundEntry.setDescription('The entry of NAT out bound table.')
hpnicfNATOutboundAclNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 3999)))
if mibBuilder.loadTexts: hpnicfNATOutboundAclNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATOutboundAclNo.setDescription('The number of ACL(Access Control List). When the packet accords with the rule in the ACL, its source IP address will be translated to IP address in Address pool.')
hpnicfNATOutboundPoolIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 320), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATOutboundPoolIdx.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATOutboundPoolIdx.setDescription("The index of address pool in hpnicfNATPoolInfoTable. when administrator doesn't use the address pool and use the IP address of the interface as the address of global network, the value is 2147483647.")
hpnicfNATOutboundIsNoPat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATOutboundIsNoPat.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATOutboundIsNoPat.setDescription("Whether to use no pat manner. The translation of no pat is that the translation doesn't use the port information of packet.")
hpnicfNATOutboundSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATOutboundSlotNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATOutboundSlotNo.setDescription('The number of NAT board. In router, the value is 255 because no NAT board in it.')
hpnicfNATOutboundRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATOutboundRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATOutboundRowStatus.setDescription("Only support 'destroy' and 'createAndGo'. If hpnicfNATOutboundAclNo or hpnicfNATOutboundAclNo and hpnicfNATOutboundPoolIdx were provided correctly, its value is changed 'active'.")
hpnicfNATServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3), )
if mibBuilder.loadTexts: hpnicfNATServerTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerTable.setDescription('NAT inside Server Table. Administrator can configure server in the private network which can provide service for people in the public network. The translation map is : (InsideIP , InsidePort--> GlobalIP, GlobalPort ) (InsideIP + 1 , InsidePort--> GlobalIP, GlobalPort + 1) (InsideIP + 2 , InsidePort--> GlobalIP, GlobalPort + 2) ... ... ... (InsideIP+n(=InsideIP2),InsidePort--> GlobalIP,GlobalPort+n(=GlobalPort2)) ')
hpnicfNATServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATServerProType"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATServerGlobalIP"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATServerStartGlobalPort"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATServerVpnIndex"))
if mibBuilder.loadTexts: hpnicfNATServerEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerEntry.setDescription('The entry of NAT inside server table.')
hpnicfNATServerProType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpnicfNATServerProType.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerProType.setDescription('The type of protocol: icmp(1), tcp(6), udp(17) and others.')
hpnicfNATServerGlobalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: hpnicfNATServerGlobalIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerGlobalIP.setDescription('The global IP address of Inside Server.')
hpnicfNATServerStartGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfNATServerStartGlobalPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerStartGlobalPort.setDescription('The start global port of Inside Server. When the port need not be configured, the value is 0.')
hpnicfNATServerEndGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATServerEndGlobalPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerEndGlobalPort.setDescription("The end global port of Inside Server. When administrator doesn't configure a series of inside server, the value is 0. If the value is not zero, the value of (GlobalPort2-GlobalPort) must be equal to (InsideIP2 - InsideIP).")
hpnicfNATServerStartInsideIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATServerStartInsideIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerStartInsideIP.setDescription('The start private IP address of Inside Server.')
hpnicfNATServerEndInsideIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATServerEndInsideIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerEndInsideIP.setDescription("The end private IP address of Inside Server. When administrator doesn't configure a series of inside server, the value is 0.0.0.0.")
hpnicfNATServerInsidePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATServerInsidePort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerInsidePort.setDescription('The private port of Inside Server.')
hpnicfNATServerSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATServerSlotNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerSlotNo.setDescription('The number of NAT board. In router, the value is 255 because no NAT board in it.')
hpnicfNATServerVpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfNATServerVpnIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerVpnIndex.setDescription('The VPN index of server.')
hpnicfNATServerAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATServerAclNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerAclNumber.setDescription('Number of basic or advanced acl.')
hpnicfNATServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATServerRowStatus.setDescription("Only support 'destroy' and 'createAndGo'. If hpnicfNATServerProType, hpnicfNATServerGlobalIP, hpnicfNATServerGlobalPort and hpnicfNATServerInsideIP were provided correctly, its value is changed 'active'.")
hpnicfNATTimeOutTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 4), )
if mibBuilder.loadTexts: hpnicfNATTimeOutTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATTimeOutTable.setDescription('NAT Time out Table. When a connection is established, if there are not any actives in this connection between the time, it will be disconnected.')
hpnicfNATTimeOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATTimeOutProtocol"))
if mibBuilder.loadTexts: hpnicfNATTimeOutEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATTimeOutEntry.setDescription('The entry of NAT Time out Table.')
hpnicfNATTimeOutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("pptp", 4), ("dns", 5), ("tcpFin", 6), ("tcpSyn", 7), ("ftpCtrl", 8), ("ftpData", 9))))
if mibBuilder.loadTexts: hpnicfNATTimeOutProtocol.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATTimeOutProtocol.setDescription('The type of protocol.')
hpnicfNATTimeOutTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATTimeOutTimeValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATTimeOutTimeValue.setDescription('The time of time out.')
hpnicfNATBLEnableTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 5), )
if mibBuilder.loadTexts: hpnicfNATBLEnableTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLEnableTable.setDescription("NAT blacklist function Enable Table. In this table, administrator can decide whether to start the function of blacklist in the NAT board. When the function of blacklist can't be set for a NAT board, the number of NAT board is 256.")
hpnicfNATBLEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATBLEnableSlotNo"))
if mibBuilder.loadTexts: hpnicfNATBLEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLEnableEntry.setDescription('The entry of NAT blacklist Enable Table.')
hpnicfNATBLEnableSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: hpnicfNATBLEnableSlotNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLEnableSlotNo.setDescription("The number of NAT board. When the function of blacklist can't be set for a NAT board, the value is 255.")
hpnicfNATBLEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATBLEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLEnable.setDescription('Start or stop of function of balcklist.')
hpnicfNATBLIPConnectLimitParaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 6), )
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitParaTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitParaTable.setDescription('The table of connection control of special IP address. In this table, administrator can decide to adopt which manner to control the connection which IP address is the special IP address.')
hpnicfNATBLIPConnectLimitParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATBLIPConnectLimitParaIP"))
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitParaEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitParaEntry.setDescription('The entry of the table of connection control of special IP address.')
hpnicfNATBLIPConnectLimitParaIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitParaIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitParaIP.setDescription('The special IP address. The IP is private IP address.')
hpnicfNATBLIPConnectHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 20000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATBLIPConnectHighValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIPConnectHighValue.setDescription('The maximal connection amount. It must be more than the minimal connection amount.')
hpnicfNATBLIPConnectLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 20000)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLowValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLowValue.setDescription('The minimal connection amount. It must be less than the maximal connection amount.')
hpnicfNATBLIPUseSpecialConnectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATBLIPUseSpecialConnectRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIPUseSpecialConnectRate.setDescription('Whether to use the special connection rate control.')
hpnicfNATBLIPConnectLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIPConnectLimitRowStatus.setDescription("Only support 'destroy' and 'createAndGo'. If hpnicfNATBLIPConnectHighValue, hpnicfNATBLIPConnectLowValue and hpnicfNATBLIPUseSpecialConnectRate were provided correctly, its value is changed 'active'.")
hpnicfNATBLManagerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 7), )
if mibBuilder.loadTexts: hpnicfNATBLManagerTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLManagerTable.setDescription("The management table of blacklist. The table doesn't support 'getnext' operation.")
hpnicfNATBLManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATBLIpAdress"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATBLSlotNo"))
if mibBuilder.loadTexts: hpnicfNATBLManagerEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLManagerEntry.setDescription('The entry of management table of blacklist.')
hpnicfNATBLIpAdress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpnicfNATBLIpAdress.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLIpAdress.setDescription('The IP address of entry of blacklist.')
hpnicfNATBLSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: hpnicfNATBLSlotNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLSlotNo.setDescription('The number of NAT board.')
hpnicfNATBLConSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATBLConSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConSum.setDescription('The connection amount.')
hpnicfNATBLConSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATBLConSpd.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATBLConSpd.setDescription('The state of connection rate: red(1) : the connection rate is above the upper limit. yellow(2): the connection rate is between the upper and lower limit. green(3) : the conneciton rate is below the lower limit.')
hpnicfNATStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8), )
if mibBuilder.loadTexts: hpnicfNATStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatTable.setDescription('The statistics information table of NAT module.')
hpnicfNATStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATStatNATBoardNo"))
if mibBuilder.loadTexts: hpnicfNATStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatEntry.setDescription('The entry of statistics information table of NAT module.')
hpnicfNATStatNATBoardNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: hpnicfNATStatNATBoardNo.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatNATBoardNo.setDescription('The number of NAT board. In router, the value is 255 because no NAT board in it.')
hpnicfNATStatActiveTblCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatActiveTblCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatActiveTblCount.setDescription('Active PAT session count In software.')
hpnicfNATStatActiveTblCountInNP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatActiveTblCountInNP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatActiveTblCountInNP.setDescription('Active PAT session count In NP.')
hpnicfNATStatActiveNatTblCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatActiveNatTblCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatActiveNatTblCount.setDescription('Active NO-PAT session count.')
hpnicfNATStatActiveSvrTblCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatActiveSvrTblCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatActiveSvrTblCount.setDescription('Active SERVER session count.')
hpnicfNATStatActivePoolTblCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatActivePoolTblCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatActivePoolTblCount.setDescription('Active address pool session count.')
hpnicfNATStatNumOfUsedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatNumOfUsedPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatNumOfUsedPort.setDescription('The number of used port in NP.')
hpnicfNATStatNumOfGoodPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatNumOfGoodPkt.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatNumOfGoodPkt.setDescription('The number of good packet in NP.')
hpnicfNATStatNumOfBadPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStatNumOfBadPkt.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStatNumOfBadPkt.setDescription('The number of bad packet in NP.')
hpnicfNATStaticSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATStaticSessionCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticSessionCount.setDescription('Active STATIC session count.')
hpnicfNATFragmentSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATFragmentSessionCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATFragmentSessionCount.setDescription('Active fragment packet session count.')
hpnicfNATSequenceSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATSequenceSessionCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSequenceSessionCount.setDescription('Active session table count hash by private IP.')
hpnicfNATLogCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATLogCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATLogCount.setDescription('Buffered Nat LOG table count.')
hpnicfNATSessionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9), )
if mibBuilder.loadTexts: hpnicfNATSessionTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionTable.setDescription('The nat session information table. There is the address translation information in the table. The sketch map of connection is pc1(private Net)------------------>NAT Device ------------------>Server(public Net) InsideIP, InsidePort---->translating to GlobalIP, GlobalPort------>PeerIP, PeerPort. ')
hpnicfNATSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATSessionHashNumber"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATSessionProtocol"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATSessionInsideIP"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATSessionInsidePort"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATSessionPeerIP"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATSessionPeerPort"), (0, "HPN-ICF-NAT-MIB", "hpnicfNATSessionVpnIndex"))
if mibBuilder.loadTexts: hpnicfNATSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionEntry.setDescription('The entry of session information table.')
hpnicfNATSessionHashNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300000)))
if mibBuilder.loadTexts: hpnicfNATSessionHashNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionHashNumber.setDescription('The row number of the hash table.')
hpnicfNATSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpnicfNATSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionProtocol.setDescription('The protocol type of session.')
hpnicfNATSessionGlobalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATSessionGlobalIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionGlobalIP.setDescription('The global IP of session. ')
hpnicfNATSessionGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATSessionGlobalPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionGlobalPort.setDescription('The global port of session.')
hpnicfNATSessionInsideIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 5), IpAddress())
if mibBuilder.loadTexts: hpnicfNATSessionInsideIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionInsideIP.setDescription('The Inside IP of session.')
hpnicfNATSessionInsidePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfNATSessionInsidePort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionInsidePort.setDescription('The Inside port of session.')
hpnicfNATSessionPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 7), IpAddress())
if mibBuilder.loadTexts: hpnicfNATSessionPeerIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionPeerIP.setDescription('The peer IP of session.')
hpnicfNATSessionPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfNATSessionPeerPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionPeerPort.setDescription('The peer port of session.')
hpnicfNATSessionVpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpnicfNATSessionVpnIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionVpnIndex.setDescription('The VPN index of session.')
hpnicfNATSessionTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATSessionTTL.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionTTL.setDescription('The TTL of session.')
hpnicfNATSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATSessionStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionStatus.setDescription('The status of session.')
hpnicfNATSessionLeftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 9, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNATSessionLeftTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATSessionLeftTime.setDescription('The Left time of session.')
hpnicfNATStaticConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 10), )
if mibBuilder.loadTexts: hpnicfNATStaticConfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticConfTable.setDescription('Static Nat configuration table.')
hpnicfNATStaticConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATStaticInsideIp"))
if mibBuilder.loadTexts: hpnicfNATStaticConfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticConfEntry.setDescription('Configure static Nat.')
hpnicfNATStaticInsideIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 10, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpnicfNATStaticInsideIp.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticInsideIp.setDescription('Inside ip address.')
hpnicfNATStaticGlobalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 10, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATStaticGlobalIp.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticGlobalIp.setDescription('Global Ip address.')
hpnicfNATStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticRowStatus.setDescription("Only support 'destroy' and 'createAndGo'. If hpnicfNATStaticInsideIp and hpnicfNATStaticGlobalIp were provided correctly, its value is changed 'active'.")
hpnicfNATStaticEnableTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 11), )
if mibBuilder.loadTexts: hpnicfNATStaticEnableTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticEnableTable.setDescription('Active the static Nat on interface.')
hpnicfNATStaticEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfNATStaticEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticEnableEntry.setDescription('Active the static Nat on interface.')
hpnicfNATStaticEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfNATStaticEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATStaticEnable.setDescription('Enable/disable the static Nat on the interface(hpnicfNatStaticEnableIfIndex). disable (0) enable (1) ')
hpnicfNATDnsMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12), )
if mibBuilder.loadTexts: hpnicfNATDnsMapTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapTable.setDescription('This table is used to set mapping of DNS.')
hpnicfNATDnsMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12, 1), ).setIndexNames((0, "HPN-ICF-NAT-MIB", "hpnicfNATDnsMapDomainName"))
if mibBuilder.loadTexts: hpnicfNATDnsMapEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapEntry.setDescription('The entry of hpnicfNATDnsMapTable.')
hpnicfNATDnsMapDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12, 1, 1), DisplayString())
if mibBuilder.loadTexts: hpnicfNATDnsMapDomainName.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapDomainName.setDescription('Domain name.')
hpnicfNATDnsMapGlobalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATDnsMapGlobalIp.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapGlobalIp.setDescription('Global IP address.')
hpnicfNATDnsMapGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATDnsMapGlobalPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapGlobalPort.setDescription(' Global port number.')
hpnicfNATDnsMapProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("typeTCP", 1), ("typeUDP", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATDnsMapProtocolType.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapProtocolType.setDescription('TCP Transmission Control Protocol. UDP User Datagram Protocol.')
hpnicfNATDnsMapLastUseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12, 1, 5), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATDnsMapLastUseTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapLastUseTime.setDescription("Its value is the time that the device uses from startup to last use 'Dns Map'record. If the value is 0,the device never use this record.")
hpnicfNATDnsMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 18, 2, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNATDnsMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNATDnsMapRowStatus.setDescription("Only support 'destroy' and 'createAndGo'. If hpnicfNATDnsMapDomainName, hpnicfNATDnsMapGlobalIp and hpnicfNATDnsMapGlobalPortor hpnicfNATDnsMapDomainName, hpnicfNATDnsMapGlobalIp, hpnicfNATDnsMapGlobalPort and hpnicfNATDnsMapProtocolType were provided correctly, its value is changed 'active'.")
mibBuilder.exportSymbols("HPN-ICF-NAT-MIB", hpnicfNATBLConnectLowRate=hpnicfNATBLConnectLowRate, hpnicfNATBLSpecialConnectHighRate=hpnicfNATBLSpecialConnectHighRate, hpnicfNATDnsMapTable=hpnicfNATDnsMapTable, hpnicfNATSessionStatus=hpnicfNATSessionStatus, hpnicfNATBLSlotNo=hpnicfNATBLSlotNo, hpnicfNATServerSlotNo=hpnicfNATServerSlotNo, hpnicfNATOutboundEntry=hpnicfNATOutboundEntry, hpnicfNATServerStartGlobalPort=hpnicfNATServerStartGlobalPort, hpnicfNATBLEnableSlotNo=hpnicfNATBLEnableSlotNo, hpnicfNATStatEntry=hpnicfNATStatEntry, hpnicfNATBLConSpd=hpnicfNATBLConSpd, hpnicfNATPoolRefCounter=hpnicfNATPoolRefCounter, hpnicfNATPoolInfoTable=hpnicfNATPoolInfoTable, hpnicfNATServerEntry=hpnicfNATServerEntry, hpnicfNATOutboundPoolIdx=hpnicfNATOutboundPoolIdx, hpnicfNATServerEndInsideIP=hpnicfNATServerEndInsideIP, hpnicfNATTimeOutTimeValue=hpnicfNATTimeOutTimeValue, hpnicfNATStaticConfTable=hpnicfNATStaticConfTable, hpnicfNATSequenceSessionCount=hpnicfNATSequenceSessionCount, hpnicfNATServerTable=hpnicfNATServerTable, hpnicfNATStaticInsideIp=hpnicfNATStaticInsideIp, hpnicfNATSessionPeerIP=hpnicfNATSessionPeerIP, hpnicfNATSessionTTL=hpnicfNATSessionTTL, hpnicfNATDnsMapGlobalPort=hpnicfNATDnsMapGlobalPort, hpnicfNATNPAgingTime=hpnicfNATNPAgingTime, hpnicfNATDnsMapGlobalIp=hpnicfNATDnsMapGlobalIp, hpnicfNATOutboundTable=hpnicfNATOutboundTable, hpnicfNATBLCtrlEnable=hpnicfNATBLCtrlEnable, hpnicfNATBLIPConnectLowValue=hpnicfNATBLIPConnectLowValue, hpnicfNATStatNATBoardNo=hpnicfNATStatNATBoardNo, hpnicfNATPoolEndIpAddr=hpnicfNATPoolEndIpAddr, hpnicfNATServerInsidePort=hpnicfNATServerInsidePort, hpnicfNATPoolRowStatus=hpnicfNATPoolRowStatus, hpnicfNATDnsMapProtocolType=hpnicfNATDnsMapProtocolType, hpnicfNATBLIPConnectLimitParaTable=hpnicfNATBLIPConnectLimitParaTable, hpnicfNATPoolInfoEntry=hpnicfNATPoolInfoEntry, hpnicfNATServerVpnIndex=hpnicfNATServerVpnIndex, hpnicfNATSessionTable=hpnicfNATSessionTable, PYSNMP_MODULE_ID=hpnicfNat, hpnicfNATBLEnable=hpnicfNATBLEnable, hpnicfNATGlobalVars=hpnicfNATGlobalVars, hpnicfNATSessionGlobalPort=hpnicfNATSessionGlobalPort, hpnicfNATStaticSessionCount=hpnicfNATStaticSessionCount, hpnicfNATBLConnectRateEnable=hpnicfNATBLConnectRateEnable, hpnicfNATBLConnectHighValue=hpnicfNATBLConnectHighValue, hpnicfNATPoolSlotNo=hpnicfNATPoolSlotNo, hpnicfNATBLConSum=hpnicfNATBLConSum, hpnicfNATServerRowStatus=hpnicfNATServerRowStatus, hpnicfNATSessionLeftTime=hpnicfNATSessionLeftTime, hpnicfNATSessionInsidePort=hpnicfNATSessionInsidePort, hpnicfNATBLIpAdress=hpnicfNATBLIpAdress, hpnicfNATBLEnableTable=hpnicfNATBLEnableTable, hpnicfNATDnsMapEntry=hpnicfNATDnsMapEntry, hpnicfNATBLConnectHighRate=hpnicfNATBLConnectHighRate, hpnicfNATBLManagerTable=hpnicfNATBLManagerTable, hpnicfNATNPTimer=hpnicfNATNPTimer, hpnicfNATBLSpecialConnectLowRate=hpnicfNATBLSpecialConnectLowRate, hpnicfNATMibObjects=hpnicfNATMibObjects, hpnicfNATSessionEntry=hpnicfNATSessionEntry, hpnicfNATFragmentSessionCount=hpnicfNATFragmentSessionCount, hpnicfNATServerProType=hpnicfNATServerProType, hpnicfNATDnsMapRowStatus=hpnicfNATDnsMapRowStatus, hpnicfNATServerStartInsideIP=hpnicfNATServerStartInsideIP, hpnicfNATBLConnectLowValue=hpnicfNATBLConnectLowValue, hpnicfNATBLIPConnectLimitRowStatus=hpnicfNATBLIPConnectLimitRowStatus, hpnicfNATBLIPConnectLimitParaIP=hpnicfNATBLIPConnectLimitParaIP, hpnicfNATServerAclNumber=hpnicfNATServerAclNumber, hpnicfNATStaticEnableTable=hpnicfNATStaticEnableTable, hpnicfNATStatActiveTblCount=hpnicfNATStatActiveTblCount, hpnicfNATTimeOutProtocol=hpnicfNATTimeOutProtocol, hpnicfNATStatActiveTblCountInNP=hpnicfNATStatActiveTblCountInNP, hpnicfNATTimeOutEntry=hpnicfNATTimeOutEntry, hpnicfNATBLConnectSumEnable=hpnicfNATBLConnectSumEnable, hpnicfNATStatNumOfUsedPort=hpnicfNATStatNumOfUsedPort, hpnicfNATBLIPUseSpecialConnectRate=hpnicfNATBLIPUseSpecialConnectRate, hpnicfNATBLIPConnectHighValue=hpnicfNATBLIPConnectHighValue, hpnicfNATStaticEnableEntry=hpnicfNATStaticEnableEntry, hpnicfNATBLConnectLimitPara=hpnicfNATBLConnectLimitPara, hpnicfNATOutboundSlotNo=hpnicfNATOutboundSlotNo, hpnicfNATDnsMapDomainName=hpnicfNATDnsMapDomainName, hpnicfNATClearSession=hpnicfNATClearSession, hpnicfNATStaticEnable=hpnicfNATStaticEnable, hpnicfNATStatActiveSvrTblCount=hpnicfNATStatActiveSvrTblCount, hpnicfNATOutboundRowStatus=hpnicfNATOutboundRowStatus, hpnicfNATStaticGlobalIp=hpnicfNATStaticGlobalIp, hpnicfNATSessionGlobalIP=hpnicfNATSessionGlobalIP, hpnicfNATPoolStartIpAddr=hpnicfNATPoolStartIpAddr, hpnicfNATStaticConfEntry=hpnicfNATStaticConfEntry, hpnicfNATBLEnableEntry=hpnicfNATBLEnableEntry, hpnicfNATStatActivePoolTblCount=hpnicfNATStatActivePoolTblCount, hpnicfNATStatNumOfGoodPkt=hpnicfNATStatNumOfGoodPkt, hpnicfNATDnsMapLastUseTime=hpnicfNATDnsMapLastUseTime, hpnicfNATTimeOutTable=hpnicfNATTimeOutTable, hpnicfNATPoolIdx=hpnicfNATPoolIdx, hpnicfNATSessionProtocol=hpnicfNATSessionProtocol, hpnicfNATClearSessionSlotNo=hpnicfNATClearSessionSlotNo, hpnicfNat=hpnicfNat, hpnicfNATLogCount=hpnicfNATLogCount, hpnicfNATServerGlobalIP=hpnicfNATServerGlobalIP, hpnicfNATOutboundIsNoPat=hpnicfNATOutboundIsNoPat, hpnicfNATSessionHashNumber=hpnicfNATSessionHashNumber, hpnicfNATServerEndGlobalPort=hpnicfNATServerEndGlobalPort, hpnicfNATStatActiveNatTblCount=hpnicfNATStatActiveNatTblCount, hpnicfNATStatTable=hpnicfNATStatTable, hpnicfNATStaticRowStatus=hpnicfNATStaticRowStatus, hpnicfNATStatNumOfBadPkt=hpnicfNATStatNumOfBadPkt, hpnicfNATOutboundAclNo=hpnicfNATOutboundAclNo, hpnicfNATBLManagerEntry=hpnicfNATBLManagerEntry, hpnicfNATSessionPeerPort=hpnicfNATSessionPeerPort, hpnicfNATSessionInsideIP=hpnicfNATSessionInsideIP, hpnicfNATBLIPConnectLimitParaEntry=hpnicfNATBLIPConnectLimitParaEntry, hpnicfNATSessionVpnIndex=hpnicfNATSessionVpnIndex)
