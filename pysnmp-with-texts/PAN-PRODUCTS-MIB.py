#
# PySNMP MIB module PAN-PRODUCTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAN-PRODUCTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
panModules, panProductsMibs = mibBuilder.importSymbols("PAN-GLOBAL-REG", "panModules", "panProductsMibs")
TcChassisType, = mibBuilder.importSymbols("PAN-GLOBAL-TC", "TcChassisType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, MibIdentifier, Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, Counter64, IpAddress, ObjectIdentity, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "MibIdentifier", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "Counter64", "IpAddress", "ObjectIdentity", "NotificationType", "iso")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
panProductsMibsModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 25461, 1, 1, 4))
panProductsMibsModule.setRevisions(('2013-04-15 16:50', '2011-02-09 16:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: panProductsMibsModule.setRevisionsDescriptions((' Rev 2.0 Updated with PA-7000, GP-100 and WF-500 products.', ' Rev 1.0 Initial version of MIB module PAN-PRODUCTS-MIB.',))
if mibBuilder.loadTexts: panProductsMibsModule.setLastUpdated('201304151650Z')
if mibBuilder.loadTexts: panProductsMibsModule.setOrganization('Palo Alto Networks')
if mibBuilder.loadTexts: panProductsMibsModule.setContactInfo(' Customer Support Palo Alto Networks 4401 Great America Pkwy Santa Clara, CA 95054-1211 +1 866-898-9087 support at paloaltonetworks dot com')
if mibBuilder.loadTexts: panProductsMibsModule.setDescription(" A MIB module containing definitions of managed objects implemented by specific Palo Alto Networks' products.")
panPA_4050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 1)).setLabel("panPA-4050")
if mibBuilder.loadTexts: panPA_4050.setStatus('current')
if mibBuilder.loadTexts: panPA_4050.setDescription(' Sub-tree for PA-4050 specific objects.')
panPA_4020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 2)).setLabel("panPA-4020")
if mibBuilder.loadTexts: panPA_4020.setStatus('current')
if mibBuilder.loadTexts: panPA_4020.setDescription(' Sub-tree for PA-4020 specific objects.')
panPA_2050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 3)).setLabel("panPA-2050")
if mibBuilder.loadTexts: panPA_2050.setStatus('current')
if mibBuilder.loadTexts: panPA_2050.setDescription(' Sub-tree for PA-2050 specific objects.')
panPA_2020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 4)).setLabel("panPA-2020")
if mibBuilder.loadTexts: panPA_2020.setStatus('current')
if mibBuilder.loadTexts: panPA_2020.setDescription(' Sub-tree for PA-2020 specific objects.')
panPA_4060 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 5)).setLabel("panPA-4060")
if mibBuilder.loadTexts: panPA_4060.setStatus('current')
if mibBuilder.loadTexts: panPA_4060.setDescription(' Sub-tree for PA-4060 specific objects.')
panPA_500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 6)).setLabel("panPA-500")
if mibBuilder.loadTexts: panPA_500.setStatus('current')
if mibBuilder.loadTexts: panPA_500.setDescription(' Sub-tree for PA-500 specific objects.')
panPanorama = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 7))
if mibBuilder.loadTexts: panPanorama.setStatus('current')
if mibBuilder.loadTexts: panPanorama.setDescription(' Sub-tree for Panorama specific objects.')
panPA_5060 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 8)).setLabel("panPA-5060")
if mibBuilder.loadTexts: panPA_5060.setStatus('current')
if mibBuilder.loadTexts: panPA_5060.setDescription(' Sub-tree for PA-5060 specific objects.')
panPA_5050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 9)).setLabel("panPA-5050")
if mibBuilder.loadTexts: panPA_5050.setStatus('current')
if mibBuilder.loadTexts: panPA_5050.setDescription(' Sub-tree for PA-5050 specific objects.')
panPA_5020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 11)).setLabel("panPA-5020")
if mibBuilder.loadTexts: panPA_5020.setStatus('current')
if mibBuilder.loadTexts: panPA_5020.setDescription(' Sub-tree for PA-5020 specific objects.')
panPA_200 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 12)).setLabel("panPA-200")
if mibBuilder.loadTexts: panPA_200.setStatus('current')
if mibBuilder.loadTexts: panPA_200.setDescription(' Sub-tree for PA-200 specific objects.')
panPA_3050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 17)).setLabel("panPA-3050")
if mibBuilder.loadTexts: panPA_3050.setStatus('current')
if mibBuilder.loadTexts: panPA_3050.setDescription(' Sub-tree for PA-3050 specific objects.')
panPA_3020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 18)).setLabel("panPA-3020")
if mibBuilder.loadTexts: panPA_3020.setStatus('current')
if mibBuilder.loadTexts: panPA_3020.setDescription(' Sub-tree for PA-3020 specific objects.')
panPA_VM = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 29)).setLabel("panPA-VM")
if mibBuilder.loadTexts: panPA_VM.setStatus('current')
if mibBuilder.loadTexts: panPA_VM.setDescription(' Sub-tree for PA-VM specific objects.')
panM_100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 30)).setLabel("panM-100")
if mibBuilder.loadTexts: panM_100.setStatus('current')
if mibBuilder.loadTexts: panM_100.setDescription(' Sub-tree for M-100 specific objects.')
panPA_7050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 31)).setLabel("panPA-7050")
if mibBuilder.loadTexts: panPA_7050.setStatus('current')
if mibBuilder.loadTexts: panPA_7050.setDescription(' Sub-tree for PA-7050 specific objects.')
panGP_100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 32)).setLabel("panGP-100")
if mibBuilder.loadTexts: panGP_100.setStatus('current')
if mibBuilder.loadTexts: panGP_100.setDescription(' Sub-tree for GP-100 specific objects.')
panWF_500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 33)).setLabel("panWF-500")
if mibBuilder.loadTexts: panWF_500.setStatus('current')
if mibBuilder.loadTexts: panWF_500.setDescription(' Sub-tree for WF-500 specific objects.')
panProcessingCards = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100))
if mibBuilder.loadTexts: panProcessingCards.setStatus('current')
if mibBuilder.loadTexts: panProcessingCards.setDescription(' Sub-tree for Processing line card specific objects.')
panFans = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 101))
if mibBuilder.loadTexts: panFans.setStatus('current')
if mibBuilder.loadTexts: panFans.setDescription(' Sub-tree for Fan specific objects.')
panPowerSupplies = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 102))
if mibBuilder.loadTexts: panPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: panPowerSupplies.setDescription(' Sub-tree for Power supply specific objects.')
panPA_7000_SMC = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100, 1)).setLabel("panPA-7000-SMC")
if mibBuilder.loadTexts: panPA_7000_SMC.setStatus('current')
if mibBuilder.loadTexts: panPA_7000_SMC.setDescription(' PA-7000 series Switch management card.')
panPA_7000_LPC = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100, 2)).setLabel("panPA-7000-LPC")
if mibBuilder.loadTexts: panPA_7000_LPC.setStatus('current')
if mibBuilder.loadTexts: panPA_7000_LPC.setDescription(' PA-7000 series Log Processing card.')
panPA_7000_20G_NPC = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100, 3)).setLabel("panPA-7000-20G-NPC")
if mibBuilder.loadTexts: panPA_7000_20G_NPC.setStatus('current')
if mibBuilder.loadTexts: panPA_7000_20G_NPC.setDescription(' PA-7000 series 20G Network Processing card.')
mibBuilder.exportSymbols("PAN-PRODUCTS-MIB", panPA_7050=panPA_7050, PYSNMP_MODULE_ID=panProductsMibsModule, panPA_5020=panPA_5020, panPA_2050=panPA_2050, panPA_5060=panPA_5060, panPowerSupplies=panPowerSupplies, panFans=panFans, panProcessingCards=panProcessingCards, panPanorama=panPanorama, panPA_3050=panPA_3050, panProductsMibsModule=panProductsMibsModule, panPA_200=panPA_200, panWF_500=panWF_500, panPA_7000_20G_NPC=panPA_7000_20G_NPC, panPA_3020=panPA_3020, panPA_500=panPA_500, panPA_7000_SMC=panPA_7000_SMC, panM_100=panM_100, panPA_2020=panPA_2020, panPA_VM=panPA_VM, panGP_100=panGP_100, panPA_5050=panPA_5050, panPA_4050=panPA_4050, panPA_7000_LPC=panPA_7000_LPC, panPA_4060=panPA_4060, panPA_4020=panPA_4020)
