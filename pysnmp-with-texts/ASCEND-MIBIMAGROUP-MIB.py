#
# PySNMP MIB module ASCEND-MIBIMAGROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBIMAGROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, iso, ObjectIdentity, NotificationType, ModuleIdentity, IpAddress, Counter64, Unsigned32, TimeTicks, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "iso", "ObjectIdentity", "NotificationType", "ModuleIdentity", "IpAddress", "Counter64", "Unsigned32", "TimeTicks", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibimaGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 23))
mibimaGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 23, 1), )
if mibBuilder.loadTexts: mibimaGroupConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibimaGroupConfigTable.setDescription('A list of mibimaGroupConfig profile entries.')
mibimaGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1), ).setIndexNames((0, "ASCEND-MIBIMAGROUP-MIB", "imaGroupConfig-Name"))
if mibBuilder.loadTexts: mibimaGroupConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibimaGroupConfigEntry.setDescription('A mibimaGroupConfig entry containing objects that maps to the parameters of mibimaGroupConfig profile.')
imaGroupConfig_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 1), DisplayString()).setLabel("imaGroupConfig-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupConfig_Name.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_Name.setDescription('Name of IMA Group Config profile.')
imaGroupConfig_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Active.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_Active.setDescription('TRUE if the line is enabled, otherwise FALSE.')
imaGroupConfig_NailedGroup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 3), Integer32()).setLabel("imaGroupConfig-NailedGroup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_NailedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_NailedGroup.setDescription('The nailed group to which this IMA group belongs to')
imaGroupConfig_GroupSymmetryMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("symmetricOperation", 2), ("asymmetricOperation", 3), ("configurationAsymmetric", 4)))).setLabel("imaGroupConfig-GroupSymmetryMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_GroupSymmetryMode.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_GroupSymmetryMode.setDescription('Symmetry mode of group to which this link belongs to')
imaGroupConfig_Version = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("v10", 2), ("v11", 4)))).setLabel("imaGroupConfig-Version").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Version.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_Version.setDescription('IMA spec version')
imaGroupConfig_DoVersionFallback = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-DoVersionFallback").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_DoVersionFallback.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_DoVersionFallback.setDescription('Automatically fall back to v 1.0 if FE is detected to be v 1.0, otherwise move to configAborted state')
imaGroupConfig_IgnoreLineup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("systemDefined", 1), ("no", 2), ("yes", 3)))).setLabel("imaGroupConfig-IgnoreLineup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_IgnoreLineup.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_IgnoreLineup.setDescription('Ignore line up value for this IMA Group.')
imaGroupConfig_Lasr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-Lasr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Lasr.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_Lasr.setDescription('enable/disable LASR (Link addition and slow recovery) procedures')
imaGroupConfig_NeTxClkMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ctc", 2), ("itc", 3)))).setLabel("imaGroupConfig-NeTxClkMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_NeTxClkMode.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_NeTxClkMode.setDescription('Group Clocking mode')
imaGroupConfig_TxMinNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 9), Integer32()).setLabel("imaGroupConfig-TxMinNumLinks").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TxMinNumLinks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_TxMinNumLinks.setDescription('Minimum Number of Tx Links to be active for group to remain in operational state')
imaGroupConfig_RxMinNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 10), Integer32()).setLabel("imaGroupConfig-RxMinNumLinks").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_RxMinNumLinks.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_RxMinNumLinks.setDescription('Minimum Number of Rx Links to be active for group to remain in operational state')
imaGroupConfig_ImaId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 11), Integer32()).setLabel("imaGroupConfig-ImaId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_ImaId.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_ImaId.setDescription('IMA ID of the group')
imaGroupConfig_FrameLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257))).clone(namedValues=NamedValues(("n-32", 33), ("n-64", 65), ("n-128", 129), ("n-256", 257)))).setLabel("imaGroupConfig-FrameLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_FrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_FrameLength.setDescription('Frame length for the group (M)')
imaGroupConfig_DiffDelayMax = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 13), Integer32()).setLabel("imaGroupConfig-DiffDelayMax").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_DiffDelayMax.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_DiffDelayMax.setDescription('Maximum differential delay of group in msec')
imaGroupConfig_CheckFarEndImaId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-CheckFarEndImaId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_CheckFarEndImaId.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_CheckFarEndImaId.setDescription('check/compare the expected-far-end-ima-id with the far-end IMA ID during group start up')
imaGroupConfig_ExpectedFarEndImaId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 15), Integer32()).setLabel("imaGroupConfig-ExpectedFarEndImaId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_ExpectedFarEndImaId.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_ExpectedFarEndImaId.setDescription('if check-far-end-ima-id set to yes, then the far-end IMA ID is compared against this number during group startup, GSM moves to ConfigAborted if it does not match')
imaGroupConfig_FarEndCheckFrameLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("imaGroupConfig-FarEndCheckFrameLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_FarEndCheckFrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_FarEndCheckFrameLength.setDescription('check/compare the Expected frame length with the far-end frame length during group start up')
imaGroupConfig_ExpectedFarEndFrameLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257))).clone(namedValues=NamedValues(("n-32", 33), ("n-64", 65), ("n-128", 129), ("n-256", 257)))).setLabel("imaGroupConfig-ExpectedFarEndFrameLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_ExpectedFarEndFrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_ExpectedFarEndFrameLength.setDescription('If far-end-check-frame-length is set to yes, then the far-end frame length is compared against this number during group startup, GSM moves to ConfigAborted, if it does not match.')
imaGroupConfig_AtmIfDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 18), Integer32()).setLabel("imaGroupConfig-AtmIfDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_AtmIfDelay.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_AtmIfDelay.setDescription('minimum time (in seconds) between the subsequent ATM layer (ie IDCR changes) indications')
imaGroupConfig_TppTestLink = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 19), Integer32()).setLabel("imaGroupConfig-TppTestLink").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TppTestLink.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_TppTestLink.setDescription('Designate a link index as the test link for use in the Test Pattern Procedure.')
imaGroupConfig_TppTestPattern = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 20), Integer32()).setLabel("imaGroupConfig-TppTestPattern").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TppTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_TppTestPattern.setDescription('The test pattern transmitted in the ICP cell (octet 17) on the link during the IMA Test Pattern Procedure.')
imaGroupConfig_TppState = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("operating", 3)))).setLabel("imaGroupConfig-TppState").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_TppState.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_TppState.setDescription('Enable or disable the Test Pattern Procedure.')
imaGroupConfig_VpSwitchingVpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 22), Integer32()).setLabel("imaGroupConfig-VpSwitchingVpi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_VpSwitchingVpi.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_VpSwitchingVpi.setDescription('The Vpi to be used for the VP switching. Rest of the valid VPIs in valid vpi-vci-range will be used for the VC switching. Changes in this range will take effect immediately. THE USER SHOULD BE VERY CAREFUL WHILE CHANGING THIS VALUE BECAUSE ALL CONNECTIONS ON THE LIM WHERE THIS PORT BELONGS WILL BE DROPPED IN ORDER TO MAKE THIS NEW VALUE EFFECTIVE IMMEDIATELY.')
imaGroupConfig_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 23, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("imaGroupConfig-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupConfig_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: imaGroupConfig_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBIMAGROUP-MIB", imaGroupConfig_ImaId=imaGroupConfig_ImaId, imaGroupConfig_IgnoreLineup=imaGroupConfig_IgnoreLineup, imaGroupConfig_FarEndCheckFrameLength=imaGroupConfig_FarEndCheckFrameLength, imaGroupConfig_NailedGroup=imaGroupConfig_NailedGroup, imaGroupConfig_DiffDelayMax=imaGroupConfig_DiffDelayMax, imaGroupConfig_DoVersionFallback=imaGroupConfig_DoVersionFallback, imaGroupConfig_TppState=imaGroupConfig_TppState, imaGroupConfig_NeTxClkMode=imaGroupConfig_NeTxClkMode, imaGroupConfig_TppTestPattern=imaGroupConfig_TppTestPattern, imaGroupConfig_Name=imaGroupConfig_Name, imaGroupConfig_FrameLength=imaGroupConfig_FrameLength, imaGroupConfig_VpSwitchingVpi=imaGroupConfig_VpSwitchingVpi, imaGroupConfig_GroupSymmetryMode=imaGroupConfig_GroupSymmetryMode, mibimaGroupConfigEntry=mibimaGroupConfigEntry, DisplayString=DisplayString, imaGroupConfig_ExpectedFarEndFrameLength=imaGroupConfig_ExpectedFarEndFrameLength, imaGroupConfig_Version=imaGroupConfig_Version, imaGroupConfig_RxMinNumLinks=imaGroupConfig_RxMinNumLinks, imaGroupConfig_Lasr=imaGroupConfig_Lasr, imaGroupConfig_Action_o=imaGroupConfig_Action_o, imaGroupConfig_AtmIfDelay=imaGroupConfig_AtmIfDelay, imaGroupConfig_TxMinNumLinks=imaGroupConfig_TxMinNumLinks, mibimaGroupConfig=mibimaGroupConfig, mibimaGroupConfigTable=mibimaGroupConfigTable, imaGroupConfig_Active=imaGroupConfig_Active, imaGroupConfig_ExpectedFarEndImaId=imaGroupConfig_ExpectedFarEndImaId, imaGroupConfig_TppTestLink=imaGroupConfig_TppTestLink, imaGroupConfig_CheckFarEndImaId=imaGroupConfig_CheckFarEndImaId)
