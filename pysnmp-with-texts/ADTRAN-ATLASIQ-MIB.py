#
# PySNMP MIB module ADTRAN-ATLASIQ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-ATLASIQ-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:14:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adProducts, adProdPhysAddress, adMgmt = mibBuilder.importSymbols("ADTRAN-MIB", "adProducts", "adProdPhysAddress", "adMgmt")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
frCircuitDlci, frCircuitIfIndex = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitDlci", "frCircuitIfIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, ObjectIdentity, Unsigned32, IpAddress, iso, enterprises, MibIdentifier, NotificationType, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "ObjectIdentity", "Unsigned32", "IpAddress", "iso", "enterprises", "MibIdentifier", "NotificationType", "Gauge32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adATLASIQ = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 1, 155))
adATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154))
adATLASIQmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155))
adATLASIQSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 1))
adATLASIQNetPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 2))
adATLASIQDtePortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 3))
adATLASIQPvcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 4))
adATLASIQCurrentStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 5))
adATLASIQIntT1Status = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 6))
adATLASIQDayT1Status = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 7))
adATLASIQDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 8))
adATLASIQ1406Time = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 9))
adATLASIQDBUConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 10))
adATLASIQIntDBUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 11))
adATLASIQDayDBUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 12))
adATLASIQTrapManager = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 155, 13))
adATLASIQTOD = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 155, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASIQTOD.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQTOD.setDescription('Sets the Time of Day with format hh:mm.')
adATLASIQDate = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 155, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASIQDate.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQDate.setDescription('Sets the Date with the format MM-DD-YY.')
adATLASIQNetPortMaxPVCs = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 155, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASIQNetPortMaxPVCs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQNetPortMaxPVCs.setDescription('Sets the maxium PVCs supported by the IQ unit. (Range 1 -1000).')
adATLASIQNetPortHistIntervals = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 155, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASIQNetPortHistIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQNetPortHistIntervals.setDescription('Sets the number of history intervals for storage.')
adATLASIQNetPortHistIntervalsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 155, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASIQNetPortHistIntervalsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQNetPortHistIntervalsAvailable.setDescription('Returns the number of history intervals allowed based on the maxium number of PVCs selected.')
adATLASIQ1406TimeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 155, 9, 1), )
if mibBuilder.loadTexts: adATLASIQ1406TimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQ1406TimeTable.setDescription('n/a.')
adATLASIQ1406TimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 155, 9, 1, 1), ).setIndexNames((0, "ADTRAN-ATLASIQ-MIB", "adATLASIQ1406TimeSlotIndex"))
if mibBuilder.loadTexts: adATLASIQ1406TimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQ1406TimeEntry.setDescription('n/a')
adATLASIQ1406TimeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 155, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASIQ1406TimeSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQ1406TimeSlotIndex.setDescription('n/a.')
adATLASIQ1406TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 155, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASIQ1406TimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASIQ1406TimeStamp.setDescription('Time interval started. Format H:M if not midnight else M-D')
adATLASFrSwToBkup = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15440)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: adATLASFrSwToBkup.setDescription('This trap indicates that the indicated Virtual Circuit has switch to a backup state.')
adATLASFrSwToPrimary = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15441)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: adATLASFrSwToPrimary.setDescription('This trap indicates that the indicated Virtual Circuit has been restored to the primary state.')
mibBuilder.exportSymbols("ADTRAN-ATLASIQ-MIB", adATLASIQDBUConfig=adATLASIQDBUConfig, adATLASIQNetPortHistIntervalsAvailable=adATLASIQNetPortHistIntervalsAvailable, adATLASIQTOD=adATLASIQTOD, adATLASFrSwToBkup=adATLASFrSwToBkup, adATLASIQDiagnostic=adATLASIQDiagnostic, adATLASIQmg=adATLASIQmg, adATLASIQ1406TimeEntry=adATLASIQ1406TimeEntry, adATLASIQ1406TimeTable=adATLASIQ1406TimeTable, adATLASIQ1406TimeStamp=adATLASIQ1406TimeStamp, adATLASIQNetPortConfig=adATLASIQNetPortConfig, adATLASIQSystemConfig=adATLASIQSystemConfig, adATLASIQDate=adATLASIQDate, adATLASIQPvcConfig=adATLASIQPvcConfig, adATLASIQTrapManager=adATLASIQTrapManager, adATLASIQ1406TimeSlotIndex=adATLASIQ1406TimeSlotIndex, adATLASIQ=adATLASIQ, adATLASIQDayT1Status=adATLASIQDayT1Status, adATLASIQNetPortHistIntervals=adATLASIQNetPortHistIntervals, adATLASIQIntDBUStatus=adATLASIQIntDBUStatus, adATLASIQDayDBUStatus=adATLASIQDayDBUStatus, adATLASIQ1406Time=adATLASIQ1406Time, adATLASIQNetPortMaxPVCs=adATLASIQNetPortMaxPVCs, adATLASIQCurrentStatus=adATLASIQCurrentStatus, adATLASIQDtePortConfig=adATLASIQDtePortConfig, adATLASmg=adATLASmg, adATLASFrSwToPrimary=adATLASFrSwToPrimary, adATLASIQIntT1Status=adATLASIQIntT1Status)
