#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
groups, regModule = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "groups", "regModule")
IdromBinary16, Presence, Power, PowerLedStates, INT32withException, Index, PresenceLedStates, FaultLedStates = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "IdromBinary16", "Presence", "Power", "PowerLedStates", "INT32withException", "Index", "PresenceLedStates", "FaultLedStates")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Counter32, Counter64, IpAddress, MibIdentifier, NotificationType, Gauge32, ModuleIdentity, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Counter32", "Counter64", "IpAddress", "MibIdentifier", "NotificationType", "Gauge32", "ModuleIdentity", "Integer32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
multiFlexServerFanMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 16))
multiFlexServerFanMibModule.setRevisions(('2007-08-16 13:00', '2007-06-19 00:30', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-30 19:00', '2007-05-21 17:00', '2007-04-25 17:00', '2007-04-24 16:30', '2007-04-18 19:05', '2007-04-09 10:30', '2007-04-02 10:30', '2007-03-14 17:00', '2007-03-13 15:00', '2007-03-06 10:30', '2007-02-22 17:00', '2006-11-07 11:30', '2006-10-02 06:29',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: multiFlexServerFanMibModule.setRevisionsDescriptions(('Corrected a few entries that were marked as read-write when they should have been read-only', 'Finalized the Version information for the MIB based on information available/used by the rest of the system (e.g., the GUI/fwupdate) Dropped fanFruBmcFirmwareVersion. Added fanFruOpCodeVersion & fanFruBootBlockVersion.', 'Added the IdromBinary16 to represent the asset tag, part number, and serial number fields within the IDROM fields.', 'Corrected maximum/nominal IDROM parameters and comments', 'Moved Presence column to just after the index within fanFruTable', 'Added notApplicable and unknown states to various entries', 'Dropped fanFruNumOfAxis & fanFruFansPerAxis from fanFruTable', 'Dropped fanRpmSetting & fanCoefficient from the fanTable (minor column renumbering)', 'Moved the trees and chassis nodes around to accomodate the unique power supply characteristics', 'Renamed fanFruFirmwareVersion to fanFruBmcFirmwareVersion to be consistent in naming with the other subsystems', 'Updated comments to tag fields that may be either statically returned, or that may potentially be removed', 'Added fanFruNumOfFans, fanFruNumOfAxis, fanFruFansPerAxis, & fanFruInletTemperature to fanFruTable Dropped fanCoolingStatus & fanCoolingSpeed from fanFruTable Added new (replaced) doubly indexed fanTable (indices being the fan FRU and the individual fan within the fan FRU) Renumbered / reorganized accordingly', 'fanFruTable data now complies with IDROM (DID/DSD) information. Renumbered / reorganized accordingly', "Changed Mask representation from an Opaque to a DisplayString at the request of the architects such that it now is an ASCII representation of bit string reflecting the presence with the left most 'bit' being bit 1 and max* bits being represented.", 'Renamed MIB file and updated internal relevance to formal product name Multi-Flex Server', "Consolodated use of Presence datatype and changed 'chassis' to 'chassis'", "Partitioned off and created as it's own module",))
if mibBuilder.loadTexts: multiFlexServerFanMibModule.setLastUpdated('200708161300Z')
if mibBuilder.loadTexts: multiFlexServerFanMibModule.setOrganization('Intel Corporation')
if mibBuilder.loadTexts: multiFlexServerFanMibModule.setContactInfo('Brian Kurle Intel Corporation JF5-2-C3 Tel: 503-712-5032 E-Mail: brianx.j.kurle@intel.com')
if mibBuilder.loadTexts: multiFlexServerFanMibModule.setDescription('Fan Module of the Multi-Flex Server')
maxFanFrus = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxFanFrus.setStatus('current')
if mibBuilder.loadTexts: maxFanFrus.setDescription('Maximum number of Fans possible in this chassis.')
numOfFanFrus = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfFanFrus.setStatus('current')
if mibBuilder.loadTexts: numOfFanFrus.setDescription('The number of Fans in the system.')
fanFruPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPresenceMask.setStatus('current')
if mibBuilder.loadTexts: fanFruPresenceMask.setDescription("ASCII representation of bit string reflecting the presence of the fans with the left most 'bit' being bit 1 and maxFans bits being represented. Thus, '11011' would express that all fans (of five fans) are present except fan 3")
fans = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206))
if mibBuilder.loadTexts: fans.setStatus('current')
if mibBuilder.loadTexts: fans.setDescription('Container for Fan specific information as well as all components logically contained within.')
fanFruTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1), )
if mibBuilder.loadTexts: fanFruTable.setStatus('current')
if mibBuilder.loadTexts: fanFruTable.setDescription('Each row describes a Fan FRU in the chassis Current, this should include the 3 Fan FRUs (the two system Fan FRUs and the I/O Fan FRU) All system FRUs rows will be present')
fanFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruIndex"))
if mibBuilder.loadTexts: fanFruEntry.setStatus('current')
if mibBuilder.loadTexts: fanFruEntry.setDescription('..')
fanFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruIndex.setStatus('current')
if mibBuilder.loadTexts: fanFruIndex.setDescription('column used to identify a particular Fan FRU.')
fanFruPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPresence.setStatus('current')
if mibBuilder.loadTexts: fanFruPresence.setDescription('Flag whether this Fan FRU is present')
fanFruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruVendor.setStatus('current')
if mibBuilder.loadTexts: fanFruVendor.setDescription('Device manufacturer')
fanFruMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruMfgDate.setStatus('current')
if mibBuilder.loadTexts: fanFruMfgDate.setDescription('Manufacture date/time')
fanFruDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruDeviceName.setStatus('current')
if mibBuilder.loadTexts: fanFruDeviceName.setDescription('Device Name')
fanFruPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPart.setStatus('current')
if mibBuilder.loadTexts: fanFruPart.setDescription('Device Part Number')
fanFruSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 7), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruSerialNo.setStatus('current')
if mibBuilder.loadTexts: fanFruSerialNo.setDescription('Device Serial Number')
fanFruMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruMaximumPower.setStatus('current')
if mibBuilder.loadTexts: fanFruMaximumPower.setDescription('Static maximum power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Maximum power generation/consumption not known or specified')
fanFruNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 9), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruNominalPower.setStatus('current')
if mibBuilder.loadTexts: fanFruNominalPower.setDescription('Static Nominal power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
fanFruAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 10), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruAssetTag.setStatus('current')
if mibBuilder.loadTexts: fanFruAssetTag.setDescription('Asset Tag # of device')
fanFruPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 11), PowerLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPowerLed.setStatus('current')
if mibBuilder.loadTexts: fanFruPowerLed.setDescription('State of the Power LED on the Fan FRU')
fanFruFaultLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 12), FaultLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruFaultLed.setStatus('current')
if mibBuilder.loadTexts: fanFruFaultLed.setDescription('State of the Fault LED on the Fan FRU')
fanFruOpCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruOpCodeVersion.setStatus('current')
if mibBuilder.loadTexts: fanFruOpCodeVersion.setDescription('Op code version on the Fan FRU')
fanFruBootBlockVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruBootBlockVersion.setStatus('current')
if mibBuilder.loadTexts: fanFruBootBlockVersion.setDescription('Boot Block version on the Fan FRU')
fanFruNumOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 15), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruNumOfFans.setStatus('current')
if mibBuilder.loadTexts: fanFruNumOfFans.setDescription('Number of Fans contained within this FRU May be static data given the FRU')
fanFruInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 16), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruInletTemperature.setStatus('current')
if mibBuilder.loadTexts: fanFruInletTemperature.setDescription('FRU Inlet Temperature in Degrees Celsius')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
if mibBuilder.loadTexts: fanTable.setDescription('Each row describes a Fan in a Fan FRU (indexed by the Fan FRU and by individual Fan) Current, this should include the 3 Fan FRUs (the two system Fan FRUs and the I/O Fan FRU) The number of Fans is dependent upon the FRU (see fanFruNumOfFans in the fanFruTable for a particular FRU)')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
if mibBuilder.loadTexts: fanEntry.setDescription('..')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanIndex.setStatus('current')
if mibBuilder.loadTexts: fanIndex.setDescription("which fan within a FRU we're talking about")
fanRpmMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1))).clone(namedValues=NamedValues(("notApplicable", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRpmMinimum.setStatus('current')
if mibBuilder.loadTexts: fanRpmMinimum.setDescription('Minimum settable RPM Potentially to be removed - See Murali/Niel')
fanRpmMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1))).clone(namedValues=NamedValues(("notApplicable", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRpmMaximum.setStatus('current')
if mibBuilder.loadTexts: fanRpmMaximum.setDescription('Maximum settable RPM Potentially to be removed - See Murali/Niel')
fanRpmReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1, 0))).clone(namedValues=NamedValues(("notApplicable", -2), ("unknown", -1), ("notspinning", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRpmReading.setStatus('current')
if mibBuilder.loadTexts: fanRpmReading.setDescription("Fan's current RPM reading: 0 - Fan not spinning ffffh - Fan speed is currently in transition (not valid)")
fanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 16)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "maxFanFrus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "numOfFanFrus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPowerLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruFaultLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruOpCodeVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruBootBlockVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruNumOfFans"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruInletTemperature"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanRpmMinimum"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanRpmMaximum"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanRpmReading"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fanGroup = fanGroup.setStatus('current')
if mibBuilder.loadTexts: fanGroup.setDescription('Description.')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", fanFruOpCodeVersion=fanFruOpCodeVersion, fanFruFaultLed=fanFruFaultLed, fanTable=fanTable, fanFruInletTemperature=fanFruInletTemperature, maxFanFrus=maxFanFrus, fanFruDeviceName=fanFruDeviceName, fanFruBootBlockVersion=fanFruBootBlockVersion, fanFruPowerLed=fanFruPowerLed, fans=fans, numOfFanFrus=numOfFanFrus, fanFruPresence=fanFruPresence, fanFruPart=fanFruPart, fanFruEntry=fanFruEntry, fanFruSerialNo=fanFruSerialNo, fanIndex=fanIndex, fanRpmMaximum=fanRpmMaximum, fanFruTable=fanFruTable, fanGroup=fanGroup, fanFruMaximumPower=fanFruMaximumPower, fanFruPresenceMask=fanFruPresenceMask, fanEntry=fanEntry, fanFruMfgDate=fanFruMfgDate, multiFlexServerFanMibModule=multiFlexServerFanMibModule, fanFruNumOfFans=fanFruNumOfFans, fanRpmMinimum=fanRpmMinimum, PYSNMP_MODULE_ID=multiFlexServerFanMibModule, fanRpmReading=fanRpmReading, fanFruNominalPower=fanFruNominalPower, fanFruAssetTag=fanFruAssetTag, fanFruIndex=fanFruIndex, fanFruVendor=fanFruVendor)
