#
# PySNMP MIB module HH3C-LswINF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LswINF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hh3clswCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3clswCommon")
ifEntry, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifEntry", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Counter32, ObjectIdentity, Bits, TimeTicks, ModuleIdentity, Gauge32, iso, NotificationType, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Counter32", "ObjectIdentity", "Bits", "TimeTicks", "ModuleIdentity", "Gauge32", "iso", "NotificationType", "Unsigned32", "MibIdentifier", "Integer32")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
hh3cLswL2InfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5))
hh3cLswL2InfMib.setRevisions(('2001-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cLswL2InfMib.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: hh3cLswL2InfMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hh3cLswL2InfMib.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cLswL2InfMib.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cLswL2InfMib.setDescription('')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

class VlanIndex(TextualConvention, Unsigned32):
    description = 'A value used to index per-VLAN tables: values of 0 and 4095 are not permitted; if the value is between 1 and 4094 inclusive, it represents an IEEE 802.1Q VLAN-ID with global scope within a given bridged domain (see VlanId textual convention). If the value is greater than 4095 then it represents a VLAN with scope local to the particular agent, i.e. one without a global VLAN-ID assigned to it. Such VLANs are outside the scope of IEEE 802.1Q but it is convenient to be able to manage them in the same way using this MIB.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class InterfaceIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero, for each interface or interface sub-layer in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'

class DropDirection(TextualConvention, Integer32):
    description = 'Representing the direction of dropping packets, if applicable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disable", 1), ("enableInbound", 2), ("enableOutbound", 3), ("enableBoth", 4))

class SpeedModeFlag(TextualConvention, Bits):
    description = 'Type of Negotiable Speed mode.'
    status = 'current'
    namedValues = NamedValues(("s10M", 0), ("s100M", 1), ("s1000M", 2), ("s10000M", 3), ("s24000M", 4))

hh3cLswExtInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1))
hh3cifXXTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1), )
if mibBuilder.loadTexts: hh3cifXXTable.setStatus('current')
if mibBuilder.loadTexts: hh3cifXXTable.setDescription('Extended H3C private interface information table.')
hh3cifXXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1), )
ifEntry.registerAugmentions(("HH3C-LswINF-MIB", "hh3cifXXEntry"))
hh3cifXXEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cifXXEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cifXXEntry.setDescription('Entries of extended H3C private interface information table.')
hh3cifUnBoundPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifUnBoundPort.setStatus('current')
if mibBuilder.loadTexts: hh3cifUnBoundPort.setDescription('Whether it is the unbound port. (true indicates that the port is the main port of the aggregation or the port does not participate in the aggregation.)')
hh3cifISPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifISPhyPort.setStatus('current')
if mibBuilder.loadTexts: hh3cifISPhyPort.setDescription('Whether it is a physical interface.')
hh3cifAggregatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifAggregatePort.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregatePort.setDescription('Whether it is the aggregated port. (if the port participates in the aggregation, this value is true.)')
hh3cifMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifMirrorPort.setStatus('current')
if mibBuilder.loadTexts: hh3cifMirrorPort.setDescription('Whether it is a mirror port.')
hh3cifVLANType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vLANTrunk", 1), ("access", 2), ("hybrid", 3), ("fabric", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifVLANType.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANType.setDescription('port vlan types. hybrid (3) port can carry multiple VLANs. If fabric function is supported, fabric(4) means the port is a fabric port.')
hh3cifMcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifMcastControl.setStatus('current')
if mibBuilder.loadTexts: hh3cifMcastControl.setDescription('Broadcast storm suppression with the step length of 1, ranging from 1 to 100 percent. In some products the step is 5, ranging from 5 to 100.')
hh3cifFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifFlowControl.setStatus('current')
if mibBuilder.loadTexts: hh3cifFlowControl.setDescription('Flow control status.')
hh3cifSrcMacControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifSrcMacControl.setStatus('current')
if mibBuilder.loadTexts: hh3cifSrcMacControl.setDescription('Whether to filter by source MAC address.')
hh3cifClearStat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifClearStat.setStatus('current')
if mibBuilder.loadTexts: hh3cifClearStat.setDescription('Clear all port statistics. Read operation not supported.')
hh3cifXXBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifXXBasePortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cifXXBasePortIndex.setDescription('Index number of the port and the first port index of the device is 1.')
hh3cifXXDevPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifXXDevPortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cifXXDevPortIndex.setDescription('Device index of the port.')
hh3cifPpsMcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifPpsMcastControl.setStatus('current')
if mibBuilder.loadTexts: hh3cifPpsMcastControl.setDescription('The broadcast suppression with pps(packet per second) type. The max value is determined by the port type and product.')
hh3cifPpsBcastDisValControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifPpsBcastDisValControl.setStatus('current')
if mibBuilder.loadTexts: hh3cifPpsBcastDisValControl.setDescription("Control the port's pps(packet per second) broadcast suppression. When the port is enabled, its pps broadcast suppression value is the global disperse value, and when disabled, it doesn't suppress broadcast.")
hh3cifUniSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifUniSuppressionStep.setStatus('current')
if mibBuilder.loadTexts: hh3cifUniSuppressionStep.setDescription('The step of unicast suppression in ratio mode.')
hh3cifPpsUniSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifPpsUniSuppressionMax.setStatus('current')
if mibBuilder.loadTexts: hh3cifPpsUniSuppressionMax.setDescription('The max pps(packet per second) value of unicast suppression in pps mode.')
hh3cifMulSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifMulSuppressionStep.setStatus('current')
if mibBuilder.loadTexts: hh3cifMulSuppressionStep.setDescription('The step of multicast suppression in ratio mode.')
hh3cifPpsMulSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifPpsMulSuppressionMax.setStatus('current')
if mibBuilder.loadTexts: hh3cifPpsMulSuppressionMax.setDescription('The max pps(packet per second) value of multicast suppression in pps mode.')
hh3cifUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifUniSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifUniSuppression.setDescription('The unicast suppression with the ranging from 1 to 100 percent in ratio mode. The step is determined by hh3cifUniSuppressionStep.')
hh3cifPpsUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifPpsUniSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifPpsUniSuppression.setDescription('The unicast suppression in pps(packet per second) mode. The max value is determined by hh3cifPpsUniSuppressionMax.')
hh3cifMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifMulSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifMulSuppression.setDescription('The multicast suppression with ranging from 1 to 100 percent in ratio mode. The step is determined by hh3cifMulSuppressionStep.')
hh3cifPpsMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifPpsMulSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifPpsMulSuppression.setDescription('The multicast suppression in pps(packet per second) mode. The max pps value is determined by hh3cifPpsMulSuppressionMax.')
hh3cifComboActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifComboActivePort.setStatus('obsolete')
if mibBuilder.loadTexts: hh3cifComboActivePort.setDescription('Active port on combo interface.')
hh3cifBMbpsMulSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifBMbpsMulSuppressionMax.setStatus('current')
if mibBuilder.loadTexts: hh3cifBMbpsMulSuppressionMax.setDescription('The maximum value of the multicast suppression with bandwidth-based(Mbps) that a port can be configured.')
hh3cifBMbpsMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifBMbpsMulSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifBMbpsMulSuppression.setDescription('With bandwidth-based multicast suppression, the bandwidth is measured in Mbps. The upper limit of the multicast suppession with bandwidth-based(Mbps) is the value of hh3cifBMbpsMulSuppressionMax in the entry. The default value of hh3cifBMbpsMulSuppression is the value of hh3cifBMbpsMulSuppressionMax.')
hh3cifBKbpsMulSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifBKbpsMulSuppressionMax.setStatus('current')
if mibBuilder.loadTexts: hh3cifBKbpsMulSuppressionMax.setDescription('The maximum value of the multicast suppression with bandwidth-based(Kbps) that a port can be configured.')
hh3cifBKbpsMulSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifBKbpsMulSuppressionStep.setStatus('current')
if mibBuilder.loadTexts: hh3cifBKbpsMulSuppressionStep.setDescription('The step of multicast suppression with bandwidth-based(Kbps).')
hh3cifBKbpsMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifBKbpsMulSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifBKbpsMulSuppression.setDescription('With bandwidth-based multicast suppression, the bandwidth is measured in Kbps. The upper limit of the multicast suppession with bandwidth-based(Kbps) is the value of hh3cifBKbpsMulSuppressionMax in the entry. The value of hh3cifBKbpsMulSuppression must be multiple of the value of hh3cifBKbpsMulSuppressionStep. The default value of hh3cifBKbpsMulSuppression is the value of hh3cifBKbpsMulSuppressionMax.')
hh3cifUnknownPacketDropMul = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 28), DropDirection().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifUnknownPacketDropMul.setStatus('current')
if mibBuilder.loadTexts: hh3cifUnknownPacketDropMul.setDescription("Control the port's unknown-multicast packets drop. When inbound direction is enabled on this port, the port will drop unknown-multicast packets in inbound direction. When outbound direction is enabled on this port, the port will drop unknown-multicast packets in outbound direction. When both directions are enabled on this port, the port will drop unknown-multicast packets in both inbound and outbound directions.")
hh3cifUnknownPacketDropUni = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 29), DropDirection().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifUnknownPacketDropUni.setStatus('current')
if mibBuilder.loadTexts: hh3cifUnknownPacketDropUni.setDescription("Control the port's unknown-unicast packets drop. When inbound direction is enabled on this port, the port will drop unknown-unicast packets in inbound direction. When outbound direction is enabled on this port, the port will drop unknown-unicast packets in outbound direction. When both directions are enabled on this port, the port will drop unknown-unicast packets in both inbound and outbound directions.")
hh3cifBMbpsUniSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifBMbpsUniSuppressionMax.setStatus('current')
if mibBuilder.loadTexts: hh3cifBMbpsUniSuppressionMax.setDescription(' The maximum value of the unicast suppression with bandwidth-based (Mbps) that a port can be configured.')
hh3cifBMbpsUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifBMbpsUniSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifBMbpsUniSuppression.setDescription(' With bandwidth-based Unicast suppression, the bandwidth is measured in Mbps. The upper limit of the unicast suppession with bandwidth-based(Mbps) is the value of hh3cifBMbpsUniSuppressionMax in the entry. The default value of hh3cifBMbpsUniSuppression is the value of hh3cifBMbpsUniSuppressionMax.')
hh3cifBKbpsUniSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifBKbpsUniSuppressionMax.setStatus('current')
if mibBuilder.loadTexts: hh3cifBKbpsUniSuppressionMax.setDescription(' The maximum value of the unicast suppression with bandwidth-based (Kbps) that a port can be configured.')
hh3cifBKbpsUniSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifBKbpsUniSuppressionStep.setStatus('current')
if mibBuilder.loadTexts: hh3cifBKbpsUniSuppressionStep.setDescription(' The step of unicast suppression with bandwidth-based(Kbps).')
hh3cifBKbpsUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifBKbpsUniSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cifBKbpsUniSuppression.setDescription(' With bandwidth-based unicast suppression, the bandwidth is measured in Kbps. The upper limit of the unicast suppession with bandwidth-based(Kbps) is the value of hh3cifBKbpsUniSuppressionMax in the entry. The value of hh3cifBKbpsUniSuppression must be multiple of the value of hh3cifBKbpsUniSuppressionStep. The default value of hh3cifBKbpsUniSuppression is the value of hh3cifBKbpsUniSuppressionMax.')
hh3cifOutPayloadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifOutPayloadOctets.setStatus('current')
if mibBuilder.loadTexts: hh3cifOutPayloadOctets.setDescription(' The actual output octets of the interface.')
hh3cifInPayloadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifInPayloadOctets.setStatus('current')
if mibBuilder.loadTexts: hh3cifInPayloadOctets.setDescription(' The actual input octets of the interface.')
hh3cifInErrorPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifInErrorPktsRate.setStatus('current')
if mibBuilder.loadTexts: hh3cifInErrorPktsRate.setDescription(' The rate of inbound error packets on the interface.')
hh3cifInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifInPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cifInPkts.setDescription(' The number of packets received on the interface.')
hh3cifInNormalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifInNormalPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cifInNormalPkts.setDescription(' The number of normal packets received on the interface.')
hh3cifOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifOutPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cifOutPkts.setDescription(' The number of packets sent on the interface.')
hh3cifAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 2), )
if mibBuilder.loadTexts: hh3cifAggregateTable.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregateTable.setDescription('Port aggregation information table.')
hh3cifAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 2, 1), ).setIndexNames((0, "HH3C-LswINF-MIB", "hh3cifAggregatePortIndex"))
if mibBuilder.loadTexts: hh3cifAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregateEntry.setDescription('Port aggregation information table.')
hh3cifAggregatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifAggregatePortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregatePortIndex.setDescription('Index number of the main aggregated port.')
hh3cifAggregatePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifAggregatePortName.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregatePortName.setDescription('Aggregation group name.')
hh3cifAggregatePortListPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifAggregatePortListPorts.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregatePortListPorts.setDescription('Portlist of a aggregating.')
hh3cifAggregateModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("both", 2), ("round-robin", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifAggregateModel.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregateModel.setDescription('Load sharing mode for the port aggregation.')
hh3cifAggregateOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cifAggregateOperStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cifAggregateOperStatus.setDescription('Current operation status of the row.')
hh3cifHybridPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 3), )
if mibBuilder.loadTexts: hh3cifHybridPortTable.setStatus('current')
if mibBuilder.loadTexts: hh3cifHybridPortTable.setDescription('Hybrid-port configuration table.')
hh3cifHybridPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 3, 1), ).setIndexNames((0, "HH3C-LswINF-MIB", "hh3cifHybridPortIndex"))
if mibBuilder.loadTexts: hh3cifHybridPortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cifHybridPortEntry.setDescription('Hybrid-port configuration table.')
hh3cifHybridPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifHybridPortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cifHybridPortIndex.setDescription('Index number of Hybrid-port.')
hh3cifHybridTaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifHybridTaggedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hh3cifHybridTaggedVlanListLow.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each tagged VLAN of the hybrid port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is tagged in the set of VLANs; the VLAN is not tagged if its bit has a value of '0'.")
hh3cifHybridTaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifHybridTaggedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hh3cifHybridTaggedVlanListHigh.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each tagged VLAN of the hybrid port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is tagged in the set of VLANs; the VLAN is not tagged if its bit has a value of '0'.")
hh3cifHybridUnTaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifHybridUnTaggedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hh3cifHybridUnTaggedVlanListLow.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each untagged VLAN of the hybrid port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is untagged in the set of VLANs; the VLAN is not untagged if its bit has a value of '0'.")
hh3cifHybridUnTaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifHybridUnTaggedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hh3cifHybridUnTaggedVlanListHigh.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each untagged VLAN of the hybrid port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is untagged in the set of VLANs; the VLAN is not untagged if its bit has a value of '0'.")
hh3cifComboPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 4), )
if mibBuilder.loadTexts: hh3cifComboPortTable.setStatus('current')
if mibBuilder.loadTexts: hh3cifComboPortTable.setDescription('Combo-port table.')
hh3cifComboPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 4, 1), ).setIndexNames((0, "HH3C-LswINF-MIB", "hh3cifComboPortIndex"))
if mibBuilder.loadTexts: hh3cifComboPortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cifComboPortEntry.setDescription('The entry of hh3cifComboPortTable.')
hh3cifComboPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifComboPortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cifComboPortIndex.setDescription('The combo-port interface index. Its value is the same as the value of ifIndex in ifTable, but only includes indexes of the combo-port interfaces.')
hh3cifComboPortCurActive = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifComboPortCurActive.setStatus('current')
if mibBuilder.loadTexts: hh3cifComboPortCurActive.setDescription("Current active interface of combo interfaces. The value 'fiber' means the interface with fiber connector of the pair of combo-port interfaces is active. The value 'copper' means the interface with copper connector of the pair is active. The value 'na' means not supported.")
hh3cLswL2InfMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1))
hh3cSlotPortMax = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSlotPortMax.setStatus('current')
if mibBuilder.loadTexts: hh3cSlotPortMax.setDescription('Max ports of the slots.')
hh3cSwitchPortMax = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSwitchPortMax.setStatus('current')
if mibBuilder.loadTexts: hh3cSwitchPortMax.setDescription('Max ports that this switch includes.')
hh3cifVLANTrunkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3), )
if mibBuilder.loadTexts: hh3cifVLANTrunkStatusTable.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkStatusTable.setDescription('Gmosaic attributes on the VlanTrunk port.')
hh3cifVLANTrunkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3, 1), ).setIndexNames((0, "HH3C-LswINF-MIB", "hh3cifVLANTrunkIndex"))
if mibBuilder.loadTexts: hh3cifVLANTrunkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkStatusEntry.setDescription('Gmosaic attributes on the VlanTrunk port.')
hh3cifVLANTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifVLANTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkIndex.setDescription('Index number of the VLANTrunk interface.')
hh3cifVLANTrunkGvrpRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fixed", 2), ("forbidden", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifVLANTrunkGvrpRegistration.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkGvrpRegistration.setDescription('GMOSAIC registration information normal: This is the default configuration. Allow create, register and unregister vlans dynamiclly at this port. fixed: Aallow create and register vlan manually at this port. Prevent from unregistering vlans or registering known vlans of this port at another trunk port. forbidden: Unregister all vlans but vlan 1, forbid to create or register any other vlans at this port.')
hh3cifVLANTrunkPassListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifVLANTrunkPassListLow.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkPassListLow.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each actually passed VLAN of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is actually passed in the set of VLANs; the VLAN is not actually passed if its bit has a value of '0'.")
hh3cifVLANTrunkPassListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifVLANTrunkPassListHigh.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkPassListHigh.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each actually passed VLAN of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is actually passed in the set of VLANs; the VLAN is not actually passed if its bit has a value of '0'.")
hh3cifVLANTrunkAllowListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifVLANTrunkAllowListLow.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkAllowListLow.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each allowed VLAN of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is allowed in the set of VLANs; the VLAN is not allowed if its bit has a value of '0'.")
hh3cifVLANTrunkAllowListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifVLANTrunkAllowListHigh.setStatus('current')
if mibBuilder.loadTexts: hh3cifVLANTrunkAllowListHigh.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each allowed VLAN of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is allowed in the set of VLANs; the VLAN is not allowed if its bit has a value of '0'.")
hh3cethernetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4), )
if mibBuilder.loadTexts: hh3cethernetTable.setStatus('current')
if mibBuilder.loadTexts: hh3cethernetTable.setDescription('Ethernet port attribute table.')
hh3cethernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1), )
ifEntry.registerAugmentions(("HH3C-LswINF-MIB", "hh3cethernetEntry"))
hh3cethernetEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cethernetEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cethernetEntry.setDescription('Entries of Ethernet port attribute table')
hh3cifEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetDuplex.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetDuplex.setDescription('Ethernet interface mode.')
hh3cifEthernetMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetMTU.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetMTU.setDescription('MTU on the Ethernet interface.')
hh3cifEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 10, 100, 1000, 10000, 24000))).clone(namedValues=NamedValues(("auto", 0), ("s10M", 10), ("s100M", 100), ("s1000M", 1000), ("s10000M", 10000), ("s24000M", 24000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetSpeed.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetSpeed.setDescription('Ethernet interface speed.')
hh3cifEthernetMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi-ii", 1), ("mdi-x", 2), ("mdi-auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetMdi.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetMdi.setDescription('Type of the line connected to the port. MDI-II (straight-through cable): 1 MDI-X (crossover cable): 2 MDI-AUTO (auto-sensing): 3')
hh3cMaxMacLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMaxMacLearn.setStatus('current')
if mibBuilder.loadTexts: hh3cMaxMacLearn.setDescription('The maximum number of MAC addresses that the port can learn. The value -1 means that the number of Mac addresses that the port can learn is unlimited.')
hh3cifMacAddressLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifMacAddressLearn.setStatus('current')
if mibBuilder.loadTexts: hh3cifMacAddressLearn.setDescription('This object indicates if the interface is allowed to learn mac address. eanbled(1) means the interface can learn mac address, otherwise disabled(2) can be set.')
hh3cifEthernetTest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("test", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetTest.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetTest.setDescription('Test this interface. The actual testing will be different according to products. Read operation not supported.')
hh3cifMacAddrLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iVL", 1), ("sVL", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifMacAddrLearnMode.setStatus('current')
if mibBuilder.loadTexts: hh3cifMacAddrLearnMode.setDescription('Status indicates mac address learn mode of the interface. IVL(1) means independent VLAN learning. SVL means shared VLAN learning.')
hh3cifEthernetFlowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetFlowInterval.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetFlowInterval.setDescription('Set flow interval of the ethernet. The NMS should set value to integer which is a multiple of 5.')
hh3cifEthernetIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetIsolate.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetIsolate.setDescription("Isolate group means that all ports in the same isolate group can not send and receive packets each other. Each octet within this value specifies a set of eight isolate groups, with the first octet specifying isolate groups 1 through 8, the second octet specifying isolate groups 9 through 16, etc. Within each octet, the leftmost bit is the first bit. the first bit represents the lowest numbered isolate group, and the last bit represents the highest numbered isolate group. one port can belong to more than one isolate group. Thus, each isolate group is represented by a single bit within the value of this object. If that bit has a value of '1', then that isolate group includes this port; the port is not included if its bit has a value of '0'. for example, the first octet is '10000100' means that the port is included in the isolate group 1 and isolate group 6.")
hh3cifVlanVPNStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifVlanVPNStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cifVlanVPNStatus.setDescription('Vlan VPN enable status.')
hh3cifVlanVPNUplinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifVlanVPNUplinkStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cifVlanVPNUplinkStatus.setDescription('Vlan VPN uplink status.')
hh3cifVlanVPNTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifVlanVPNTPID.setStatus('current')
if mibBuilder.loadTexts: hh3cifVlanVPNTPID.setDescription('Port based Vlan VPN TPID(Tag Protocol Indentifier), default value is 0x8100. Please refer to hh3cVlanVPNTPIDMode to get more information.')
hh3cifIsolateGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifIsolateGroupID.setStatus('current')
if mibBuilder.loadTexts: hh3cifIsolateGroupID.setDescription('Isolate group identifier. Value zero means this interface does not belong to any isolate group.')
hh3cifisUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifisUplinkPort.setStatus('current')
if mibBuilder.loadTexts: hh3cifisUplinkPort.setDescription('Ethernet uplink status, default value is 2.')
hh3cifEthernetAutoSpeedMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 19), SpeedModeFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifEthernetAutoSpeedMask.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetAutoSpeedMask.setDescription("This object specifies which kinds of speed mode can be negotiated. Each bit corresponds to a kind of speed mode. If the value of a bit is '1', it means the corresponding speed mode is negotiable on the port. Otherwise the negotiation for that kind of speed mode is not supported on this port. If there are several negotiable speed modes, all bits for them are '1'. For example, if the speed mode 's10M' and 's1000M' can be negotiable, the value of this object is 0xA0.")
hh3cifEthernetAutoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 4, 1, 20), SpeedModeFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifEthernetAutoSpeed.setStatus('current')
if mibBuilder.loadTexts: hh3cifEthernetAutoSpeed.setDescription("This object indicates which kinds of speed mode are negotiable on this port. Only when a bit of hh3cifEthernetAutoSpeedMask is '1', the corresponding bit of this object can be set to '1', indicating the corresponding speed mode is negotiable. For example, if the value of hh3cifEthernetAutoSpeedMask is 0xA0, which indicates speed mode 's10M' and 's1000M' are negotiable, the possible value of this object should be one of the four values (0x00, 0x20, 0x80 and 0xA0). If the value of hh3cifEthernetSpeed is not 'auto', the value of this object is insignificant and should be ignored. The value length of this object should be as long as that of hh3cifEthernetAutoSpeedMask.")
hh3cIsolateGroupMax = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIsolateGroupMax.setStatus('current')
if mibBuilder.loadTexts: hh3cIsolateGroupMax.setDescription('Max isolate group that this device support, the value is zero means that the device does not support isolate group.')
hh3cGlobalBroadcastMaxPps = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cGlobalBroadcastMaxPps.setStatus('current')
if mibBuilder.loadTexts: hh3cGlobalBroadcastMaxPps.setDescription('The global max packets per second. When it is set, the value of BroadcastMaxPps in all ports will be changed to that setting.')
hh3cGlobalBroadcastMaxRatio = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cGlobalBroadcastMaxRatio.setStatus('current')
if mibBuilder.loadTexts: hh3cGlobalBroadcastMaxRatio.setDescription('The global max-ratio of broadcast from 0 to 100 percent. When it is set, the value of BroadcastMaxRatio in all ports will be changed to that setting.')
hh3cBpduTunnelStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBpduTunnelStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cBpduTunnelStatus.setDescription('Bpdu tunnel enable status.')
hh3cVlanVPNTPIDMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("global", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVlanVPNTPIDMode.setStatus('current')
if mibBuilder.loadTexts: hh3cVlanVPNTPIDMode.setDescription("Vlan VPN TPID mode. The value 'port-based' means VLAN VPN TPID value would be set based on port via hh3cifVlanVPNTPID. In this situation, hh3cVlanVPNTPID is meaningless and always return 0x8100. The value 'global' means VLAN VPN TPID value should be set globally via hh3cVlanVPNTPID. In this situation, hh3cifVlanVPNTPID in hh3cethernetTable has the same value with hh3cVlanVPNTPID.")
hh3cVlanVPNTPID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVlanVPNTPID.setStatus('current')
if mibBuilder.loadTexts: hh3cVlanVPNTPID.setDescription('Global Vlan VPN TPID(Tag Protocol Indentifier), default value is 0x8100.')
hh3cPortIsolateGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 11), )
if mibBuilder.loadTexts: hh3cPortIsolateGroupTable.setStatus('current')
if mibBuilder.loadTexts: hh3cPortIsolateGroupTable.setDescription('Isolate Group attribute table.')
hh3cPortIsolateGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 11, 1), ).setIndexNames((0, "HH3C-LswINF-MIB", "hh3cPortIsolateGroupIndex"))
if mibBuilder.loadTexts: hh3cPortIsolateGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cPortIsolateGroupEntry.setDescription('The entry of hh3cPortIsolateGroupTable.')
hh3cPortIsolateGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cPortIsolateGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cPortIsolateGroupIndex.setDescription('Port isolate group identifier. The index of the hh3cPortIsolateGroupTable. The value ranges from 1 to the limit of isolate group quantity.')
hh3cPortIsolateUplinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 11, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPortIsolateUplinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cPortIsolateUplinkIfIndex.setDescription('Index number of the uplink interface.')
hh3cPortIsolateGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPortIsolateGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cPortIsolateGroupRowStatus.setDescription('Current operation status of the row.')
hh3cPortIsolateGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPortIsolateGroupDescription.setStatus('current')
if mibBuilder.loadTexts: hh3cPortIsolateGroupDescription.setDescription('Port isolate group description, default value is zero-length string.')
hh3cMaxMacLearnRange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMaxMacLearnRange.setStatus('current')
if mibBuilder.loadTexts: hh3cMaxMacLearnRange.setDescription('The maximum number of MAC address that the port supports.')
mibBuilder.exportSymbols("HH3C-LswINF-MIB", hh3cMaxMacLearn=hh3cMaxMacLearn, hh3cifPpsUniSuppression=hh3cifPpsUniSuppression, hh3cifEthernetFlowInterval=hh3cifEthernetFlowInterval, hh3cifVLANType=hh3cifVLANType, hh3cGlobalBroadcastMaxRatio=hh3cGlobalBroadcastMaxRatio, hh3cifPpsMulSuppression=hh3cifPpsMulSuppression, hh3cifAggregateModel=hh3cifAggregateModel, hh3cIsolateGroupMax=hh3cIsolateGroupMax, hh3cifVLANTrunkAllowListLow=hh3cifVLANTrunkAllowListLow, hh3cifEthernetMdi=hh3cifEthernetMdi, hh3cifHybridPortIndex=hh3cifHybridPortIndex, hh3cVlanVPNTPID=hh3cVlanVPNTPID, hh3cifEthernetSpeed=hh3cifEthernetSpeed, hh3cifEthernetMTU=hh3cifEthernetMTU, hh3cifEthernetDuplex=hh3cifEthernetDuplex, hh3cLswL2InfMibObject=hh3cLswL2InfMibObject, hh3cifisUplinkPort=hh3cifisUplinkPort, hh3cifVLANTrunkPassListLow=hh3cifVLANTrunkPassListLow, hh3cBpduTunnelStatus=hh3cBpduTunnelStatus, hh3cifBMbpsUniSuppressionMax=hh3cifBMbpsUniSuppressionMax, hh3cifComboPortTable=hh3cifComboPortTable, SpeedModeFlag=SpeedModeFlag, hh3cifXXDevPortIndex=hh3cifXXDevPortIndex, hh3cifVlanVPNTPID=hh3cifVlanVPNTPID, hh3cifClearStat=hh3cifClearStat, hh3cifVLANTrunkAllowListHigh=hh3cifVLANTrunkAllowListHigh, hh3cifAggregatePort=hh3cifAggregatePort, hh3cPortIsolateGroupRowStatus=hh3cPortIsolateGroupRowStatus, hh3cPortIsolateGroupDescription=hh3cPortIsolateGroupDescription, hh3cifInNormalPkts=hh3cifInNormalPkts, hh3cifAggregatePortIndex=hh3cifAggregatePortIndex, hh3cifOutPayloadOctets=hh3cifOutPayloadOctets, hh3cifHybridUnTaggedVlanListHigh=hh3cifHybridUnTaggedVlanListHigh, hh3cifISPhyPort=hh3cifISPhyPort, hh3cifUnknownPacketDropMul=hh3cifUnknownPacketDropMul, hh3cifBKbpsUniSuppressionStep=hh3cifBKbpsUniSuppressionStep, hh3cifPpsMulSuppressionMax=hh3cifPpsMulSuppressionMax, hh3cifEthernetAutoSpeedMask=hh3cifEthernetAutoSpeedMask, hh3cifUniSuppression=hh3cifUniSuppression, hh3cifMacAddressLearn=hh3cifMacAddressLearn, hh3cPortIsolateGroupIndex=hh3cPortIsolateGroupIndex, hh3cifInPkts=hh3cifInPkts, hh3cifMcastControl=hh3cifMcastControl, hh3cifBKbpsUniSuppressionMax=hh3cifBKbpsUniSuppressionMax, hh3cifVLANTrunkStatusTable=hh3cifVLANTrunkStatusTable, hh3cLswL2InfMib=hh3cLswL2InfMib, hh3cifMulSuppressionStep=hh3cifMulSuppressionStep, DropDirection=DropDirection, hh3cifBMbpsMulSuppressionMax=hh3cifBMbpsMulSuppressionMax, hh3cifHybridTaggedVlanListHigh=hh3cifHybridTaggedVlanListHigh, hh3cifVLANTrunkStatusEntry=hh3cifVLANTrunkStatusEntry, hh3cifEthernetTest=hh3cifEthernetTest, hh3cifVLANTrunkIndex=hh3cifVLANTrunkIndex, hh3cifComboPortCurActive=hh3cifComboPortCurActive, PYSNMP_MODULE_ID=hh3cLswL2InfMib, hh3cPortIsolateGroupEntry=hh3cPortIsolateGroupEntry, hh3cifInPayloadOctets=hh3cifInPayloadOctets, hh3cifAggregatePortName=hh3cifAggregatePortName, hh3cifInErrorPktsRate=hh3cifInErrorPktsRate, hh3cifSrcMacControl=hh3cifSrcMacControl, InterfaceIndex=InterfaceIndex, hh3cifXXBasePortIndex=hh3cifXXBasePortIndex, hh3cifHybridPortTable=hh3cifHybridPortTable, hh3cSlotPortMax=hh3cSlotPortMax, hh3cifVLANTrunkGvrpRegistration=hh3cifVLANTrunkGvrpRegistration, hh3cPortIsolateUplinkIfIndex=hh3cPortIsolateUplinkIfIndex, hh3cLswExtInterface=hh3cLswExtInterface, hh3cifOutPkts=hh3cifOutPkts, hh3cifHybridTaggedVlanListLow=hh3cifHybridTaggedVlanListLow, hh3cifIsolateGroupID=hh3cifIsolateGroupID, PortList=PortList, hh3cPortIsolateGroupTable=hh3cPortIsolateGroupTable, hh3cifAggregateTable=hh3cifAggregateTable, hh3cifEthernetAutoSpeed=hh3cifEthernetAutoSpeed, hh3cifPpsUniSuppressionMax=hh3cifPpsUniSuppressionMax, hh3cifBKbpsUniSuppression=hh3cifBKbpsUniSuppression, VlanIndex=VlanIndex, hh3cifHybridUnTaggedVlanListLow=hh3cifHybridUnTaggedVlanListLow, hh3cifBKbpsMulSuppressionStep=hh3cifBKbpsMulSuppressionStep, hh3cSwitchPortMax=hh3cSwitchPortMax, hh3cifBMbpsUniSuppression=hh3cifBMbpsUniSuppression, hh3cifComboPortEntry=hh3cifComboPortEntry, hh3cifVlanVPNStatus=hh3cifVlanVPNStatus, hh3cifXXEntry=hh3cifXXEntry, hh3cifMirrorPort=hh3cifMirrorPort, hh3cifEthernetIsolate=hh3cifEthernetIsolate, hh3cifMulSuppression=hh3cifMulSuppression, hh3cGlobalBroadcastMaxPps=hh3cGlobalBroadcastMaxPps, hh3cifComboActivePort=hh3cifComboActivePort, hh3cifUniSuppressionStep=hh3cifUniSuppressionStep, hh3cifMacAddrLearnMode=hh3cifMacAddrLearnMode, hh3cifAggregateOperStatus=hh3cifAggregateOperStatus, hh3cifXXTable=hh3cifXXTable, hh3cifPpsMcastControl=hh3cifPpsMcastControl, hh3cifVlanVPNUplinkStatus=hh3cifVlanVPNUplinkStatus, hh3cifFlowControl=hh3cifFlowControl, hh3cifPpsBcastDisValControl=hh3cifPpsBcastDisValControl, hh3cMaxMacLearnRange=hh3cMaxMacLearnRange, hh3cethernetEntry=hh3cethernetEntry, hh3cifHybridPortEntry=hh3cifHybridPortEntry, hh3cethernetTable=hh3cethernetTable, hh3cifAggregateEntry=hh3cifAggregateEntry, hh3cifAggregatePortListPorts=hh3cifAggregatePortListPorts, hh3cifBKbpsMulSuppressionMax=hh3cifBKbpsMulSuppressionMax, hh3cifBMbpsMulSuppression=hh3cifBMbpsMulSuppression, hh3cVlanVPNTPIDMode=hh3cVlanVPNTPIDMode, hh3cifUnBoundPort=hh3cifUnBoundPort, hh3cifVLANTrunkPassListHigh=hh3cifVLANTrunkPassListHigh, hh3cifBKbpsMulSuppression=hh3cifBKbpsMulSuppression, hh3cifUnknownPacketDropUni=hh3cifUnknownPacketDropUni, hh3cifComboPortIndex=hh3cifComboPortIndex)
