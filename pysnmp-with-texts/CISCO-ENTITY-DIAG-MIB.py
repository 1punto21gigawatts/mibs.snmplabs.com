#
# PySNMP MIB module CISCO-ENTITY-DIAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENTITY-DIAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
CeDiagJobSuite, CeDiagDiagnosticLevel, CeDiagJobIdentifier, CeDiagTestList, CeDiagTestIdentifier, CeDiagPortList, CeDiagDiagnosticMethod, CeDiagErrorIdentifierOrZero, CeDiagErrorIdentifier = mibBuilder.importSymbols("CISCO-ENTITY-DIAG-TC-MIB", "CeDiagJobSuite", "CeDiagDiagnosticLevel", "CeDiagJobIdentifier", "CeDiagTestList", "CeDiagTestIdentifier", "CeDiagPortList", "CeDiagDiagnosticMethod", "CeDiagErrorIdentifierOrZero", "CeDiagErrorIdentifier")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
PhysicalIndex, entPhysicalIndex, entPhysicalDescr = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex", "entPhysicalDescr")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Gauge32, TimeTicks, Unsigned32, Counter32, ObjectIdentity, Integer32, iso, Counter64, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Gauge32", "TimeTicks", "Unsigned32", "Counter32", "ObjectIdentity", "Integer32", "iso", "Counter64", "IpAddress", "MibIdentifier")
DateAndTime, RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
ciscoEntityDiagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 350))
ciscoEntityDiagMIB.setRevisions(('2016-03-11 00:00', '2010-05-26 00:00', '2009-06-30 00:00', '2008-03-12 00:00', '2007-01-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEntityDiagMIB.setRevisionsDescriptions(('Added one new enumaration value disruptive(15) to ceDiagTestAttributes', 'Added ceDiagHMTestThreshWindowGroup.', 'Added ceDiagTestPerfLastTestMethodGroup. Updated Description of ceDiagTestPerfLastErrorID object.', 'Added ceDiagNotifControlGroup, ceDiagNotifErrorMsgGroup and ceDiagNotificationGroup.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoEntityDiagMIB.setLastUpdated('201603110000Z')
if mibBuilder.loadTexts: ciscoEntityDiagMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEntityDiagMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoEntityDiagMIB.setDescription("This MIB module defines the managed objects that describe the online diagnostics capabilities supported by the physical entities contained by the system, including chassis, modules, ports, power supplies, fans, and sensors. In order to manage the online diagnostic capabilities supported by a physical entity, it must be represented by a conceptual row in the entPhysicalTable of the ENTITY-MIB (RFC-2737). GLOSSARY Boot-up Diagnostic - a diagnostic consisting of tests intended to be executed in a reasonable timeframe when a physical entity boots. Diagnostic - a suite of tests intended to exercise the functional integrity of a physical entity. Diagnostic Level - the degree of completeness that a diagnostic will exercise a physical entity. Field Diagnostic - a special suite of tests intended to exercise the functional integrity of a physical entity in a manner that is possible when a physical entity is operational or running an operational image. Field Diagnostic Image - an image supporting field diagnostics. A physical entity has to be loaded with a field diagnostic image before field diagnostics can be executed on the physical entity. Health Monitoring - the process of running special non-intrusive online tests periodically on a physical entity for the purpose of tracking the overall condition of a physical entity. On-Demand Diagnostic - a diagnostic intended to be executed immediately upon request. Offline Diagnostic - a diagnostic that consists of tests that are disruptive in nature, and thus requires the physical entity being evaluated to be taken offline for the duration. Online Diagnostic - a diagnostic that consists of tests that are not disruptive in nature, and thus can be done without taking the physical entity offline. Physical Entity - an identifiable physical resource, such as a chassis, line card, power supply, or communication port. See RFC-2737, 'Entity MIB (Version 2)', K. McCloghrie and A. Bierman. Scheduled Diagnostic - a diagnostic intended to execute at some time in the future. There exist two types of scheduled diagnostics: 1) one-shot, which execute only once; and 2) periodic, which executes at a specific interval. Test - an exercise intended to determine the functional integrity of a component comprising a physical entity (e.g., a port might support an internal loopback test). Diagnostic Job - Consists of a diagnostic suite (i.e., a collection of tests) to be executed by a physical entity.")
ciscoEntityDiagMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 0))
ciscoEntityDiagMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1))
ciscoEntityDiagMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 2))
ceDiagDescriptions = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1))
ceDiagGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 2))
ceDiagEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3))
ceDiagOnDemand = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4))
ceDiagScheduled = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5))
ceDiagTest = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6))
ceDiagHealthMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7))
ceDiagEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8))
ceDiagNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 9))
ceDiagTestInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 1), )
if mibBuilder.loadTexts: ceDiagTestInfoTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestInfoTable.setDescription('This table describes the tests supported by each physical entity supporting online diagnostics. The table organizes tests into sets associated with the physical entity supporting those tests. The SNMP entity adds a set of tests corresponding to a physical entity upon detection of a physical entity supporting online diagnostics. The SNMP entity deletes a set of tests corresponding to a physical entity upon removal of the physical entity. The SNMP entity replaces a set of tests corresponding to a physical entity when the physical entity has been successfully loaded with a different image (e.g., the field diagnostic image).')
ceDiagTestInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagTestId"))
if mibBuilder.loadTexts: ceDiagTestInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestInfoEntry.setDescription('The description of a single test supported by a corresponding physical entity.')
ceDiagTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 1, 1, 1), CeDiagTestIdentifier())
if mibBuilder.loadTexts: ceDiagTestId.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestId.setDescription('This object indicates an arbitrary positive integer arbitrarily identifying the test.')
ceDiagTestText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestText.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestText.setDescription("This object indicates a human-readable description of the test. Examples include: 'Marching Pattern DRAM Test' 'Data Pins DRAM Test' 'Internal Loopback Test' 'External Loopback Test'")
ceDiagTestAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("minimal", 0), ("complete", 1), ("perPort", 2), ("fatal", 3), ("basicOnDemand", 4), ("standby", 5), ("parallel", 6), ("nonDisruptive", 7), ("hmAlwaysEnable", 8), ("hmFixedInterval", 9), ("nonHM", 10), ("proxy", 11), ("activeToStandby", 12), ("offline", 13), ("perDevice", 14), ("disruptive", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestAttributes.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestAttributes.setDescription("This object indicates a set of attributes characterizing the test: 'minimal' - indicates that this test will be executed during boot-up if ceDiagBootupLevel is set to 'minimal' or 'complete'. This test is also included in the minimal or complete test suites. 'complete' - indicates that this test will be executed during boot-up if ceDiagBootupLevel is set to 'complete'. This test is also included in the complete test suites. 'perPort' - indicates that this test is a executed for each port contained by the module. This test is also included in the perPort test suites. 'fatal' - indicates that if this test fails, then the diagnostic should fail indicating that a major error occurred. 'basicOnDemand' - indicates that this test will be run during the basic on demand job is run. 'standby' - indicates that this test can only be run if the physical entity is a standby unit and can only be executed from the standby unit. 'parallel' - indicates that this test can be executed in parallel with other tests without checking for resource availability. 'nonDisruptive' - indicates this test can be executed without disrupting the physical entity's normal operation. This test is also included in the nonDisruptive test suites. 'hmAlwaysEnabled' - indicates that a management application can not disable the use of this test for the purpose of health monitoring. 'hmFixedInterval' - indicates that a management application can not change the interval at which health monitoring executes this test. 'nonHM' - indicates that this test can not be used for health monitoring. 'proxy' - indicates that the test must be executed through a proxy. 'activeToStandby' - indicates that this test can only be run if the physical entity is a standby unit and can only be executed from the active unit. 'offline' - indicates that this test will not get a user confirmation when it is run. 'perDevice' - indicates that this test is a per device test. 'disruptive' - indicates that this test can be executed with disrupting the physical entity's normal operation. This test is also included in the disruptive test suites.")
ceDiagTestCustomAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 2), )
if mibBuilder.loadTexts: ceDiagTestCustomAttributeTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestCustomAttributeTable.setDescription('This table describes the additional custom based attributes of the tests listed in ceDiagTestInfoTable. These are attributes which have been customized by the platform supporting the tests.')
ceDiagTestCustomAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagTestId"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagTestCustomAttributeIndex"))
if mibBuilder.loadTexts: ceDiagTestCustomAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestCustomAttributeEntry.setDescription('The description of a single custom based attribute for a test supported by a corresponding physical entity.')
ceDiagTestCustomAttributeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceDiagTestCustomAttributeIndex.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestCustomAttributeIndex.setDescription('An arbitrary integer which identifies the custom based attribute of a test.')
ceDiagTestCustomAttributeDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestCustomAttributeDesc.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestCustomAttributeDesc.setDescription('This object provides a textual description of the custom based attribute of this test.')
ceDiagErrorInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 3), )
if mibBuilder.loadTexts: ceDiagErrorInfoTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagErrorInfoTable.setDescription('This table describes the errors indicated by a system supporting online diagnostics.')
ceDiagErrorInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-ENTITY-DIAG-MIB", "ceDiagErrorId"))
if mibBuilder.loadTexts: ceDiagErrorInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagErrorInfoEntry.setDescription('The description of a single online error.')
ceDiagErrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 3, 1, 1), CeDiagErrorIdentifier())
if mibBuilder.loadTexts: ceDiagErrorId.setStatus('current')
if mibBuilder.loadTexts: ceDiagErrorId.setDescription('This object indicates an arbitrary positive integer arbitrarily identifying the error.')
ceDiagErrorText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagErrorText.setStatus('current')
if mibBuilder.loadTexts: ceDiagErrorText.setDescription("This object indicates a human-readable description of the error. Examples include: 'DIAG_SUCCESS' 'DIAG_FAILURE' 'DIAG_NOT_SUPPORT' 'DIAG_SKIPPED'")
ceDiagBootupLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 2, 1), CeDiagDiagnosticLevel().clone('minimal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagBootupLevel.setStatus('current')
if mibBuilder.loadTexts: ceDiagBootupLevel.setDescription('This object specifies the level that physical entities will execute their boot-up diagnostic.')
ceDiagEntityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 1), )
if mibBuilder.loadTexts: ceDiagEntityTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityTable.setDescription('This table supports online diagnostic control and status for each physical entity that supporting the feature. The SNMP entity adds a conceptual row to this table corresponding to a physical entity upon detection of a physical entity supporting online diagnostics. The SNMP entity deletes a conceptual row from this table corresponding to a physical entity upon removal of the physical entity.')
ceDiagEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ceDiagEntityEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityEntry.setDescription("Online diagnostic control and status for a single physical entity supporting the feature. Observe that this data may not be accurate if the corresponding cefcModuleOperStatus (see the CISCO-ENTITY-FRU-CONTROL-MIB for further details) has a value of 'boot'.")
ceDiagEntityBootLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 1, 1, 1), CeDiagDiagnosticLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEntityBootLevel.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityBootLevel.setDescription('This object indicates the level that the physical entity executed its boot-up diagnostic.')
ceDiagEntityImageAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("fieldDiagnostic", 2))).clone('operational')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagEntityImageAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityImageAdminStatus.setDescription("This object specifies the desired image the physical entity should be running: 'operational' - the physical entity should be running the operational image. 'fieldDiagnostic' - the physical entity should be running the field diagnostic image.")
ceDiagEntityImageOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("fieldDiagnostic", 2), ("booting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEntityImageOperStatus.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityImageOperStatus.setDescription("This object indicates the actual image the physical entity is running: 'operational' - the physical entity is running the operational image. 'fieldDiagnostic' - the physical entity is running the field diagnostic image. 'booting' - the physical entity is booting; that is, there is no way of determining what image the physical entity is running because it is currently booting.")
ceDiagEntityFieldDiagnosticUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagEntityFieldDiagnosticUrl.setReference("RFC-1630, 'Universal Resource Identifiers in WWW', T. Berners-Lee.")
if mibBuilder.loadTexts: ceDiagEntityFieldDiagnosticUrl.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityFieldDiagnosticUrl.setDescription("This object specifies a URL (see RFC-1630) that specifies the location of the field diagnostic image. The following list provides some examples of URLs for the field diagnostic: file://disk0:/images/fd001 Describes a file with the path '/images/fd001' on 'disk0:' accessed locally. ftp://pop-server/usr/bin/fd001 Describes a file with the path '/usr/bin/fd001' on the host 'pop-server' accessed via FTP. tftp://pop-server/tftpout/fd001 Describes a file with the path '/tftpout/fd001' on the host 'pop-server' accessed via TFTP.")
ceDiagEntityCurrentTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 2), )
if mibBuilder.loadTexts: ceDiagEntityCurrentTestTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityCurrentTestTable.setDescription('This table contains the information about the current test executing on a physical entity.')
ceDiagEntityCurrentTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagTestId"))
if mibBuilder.loadTexts: ceDiagEntityCurrentTestEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityCurrentTestEntry.setDescription('A test which is currently executing on a particular physical entity.')
ceDiagEntityCurrentTestMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 3, 2, 1, 1), CeDiagDiagnosticMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEntityCurrentTestMethod.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityCurrentTestMethod.setDescription('This object indicates the method used to invoke the diagnostic that is executing this test.')
ceDiagOnDemandErrorAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagOnDemandErrorAllowed.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandErrorAllowed.setDescription("This object specifies the number of errors the physical entities will allow before aborting an on demand diagnostic job. A value of '0' indicates that the an unlimited number of errors are allowed for the on demand diagnostic job.")
ceDiagOnDemandErrorAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("continue", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagOnDemandErrorAction.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandErrorAction.setDescription("This object specifies how the physical entities in the system are to proceed when they encounter an error during an on demand diagnostic job. 'continue' - indicates that the physical entities will continue executing the on demand job. 'stop' - indicates that the physical entities will abort the on demand job.")
ceDiagOnDemandIterations = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagOnDemandIterations.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandIterations.setDescription('This object specifies the maximum number of iterations of an on demand job.')
ceDiagOnDemandJobTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 4), )
if mibBuilder.loadTexts: ceDiagOnDemandJobTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandJobTable.setDescription("This table contains a list of on demand jobs currently in the system. A row in this table can be created by setting the corresponding instance of ceDiagOnDemandJobRowStatus to 'createAndGo'. A row can be deleted by setting the corresponding instance of ceDiagOnDemandJobRowStatus to 'destroy'. Once the job is completed the corresponding row is deleted from the table. The individual results of the tests executed by this job are updated in ceDiagTestPerfTable.")
ceDiagOnDemandJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ceDiagOnDemandJobEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandJobEntry.setDescription('A on demand job currently executing on a particular physical entity which supports on demand diagnostics.')
ceDiagOnDemandJobSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 4, 1, 1), CeDiagJobSuite()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagOnDemandJobSuite.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandJobSuite.setDescription("This object indicates the various system predefined test suites the on demand job can choose from. If the value of this object is 'none', this job will run the tests specified by ceDiagOnDemandJobTestList. If the value of this object is 'complete', 'minimal', 'nonDisruptive' or 'perPort' the value of ceDiagOnDemandJobTestList is ignored.")
ceDiagOnDemandJobTestList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 4, 1, 2), CeDiagTestList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagOnDemandJobTestList.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandJobTestList.setDescription('This object specifies the user specified diagnostic suite (i.e., a set of tests) to be executed by the corresponding physical entity. The set of tests supported by this physical entity are specified in ceDiagTestInfoTable.')
ceDiagOnDemandJobPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 4, 1, 3), CeDiagPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagOnDemandJobPortList.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandJobPortList.setDescription('This object specifies the list of ports to be exercised by the corresponding physical entity when executing the diagnostic suite specified for the job.')
ceDiagOnDemandJobRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagOnDemandJobRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandJobRowStatus.setDescription("The status object used to manage the rows in this table. When set to active(1) the on demand job is submitted. When set to destroy(6) the on demand job is stopped. When the value of this object is 'active', values within this row cannot be modified, except by deleting and re-creating the row.")
ceDiagScheduledJobTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1), )
if mibBuilder.loadTexts: ceDiagScheduledJobTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobTable.setDescription("This table contains a list of scheduled jobs on the system. A row in this table can be created by setting the corresponding instance of ceDiagScheduledJobRowStatus to 'createAndGo'. A row can be deleted by setting the corresponding instance of ceDiagScheduledJobRowStatus to 'destroy'. Once the job is completed the corresponding row is deleted from the table. The individual results of the tests executed by this job are updated in ceDiagTestPerfTable.")
ceDiagScheduledJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobIndex"))
if mibBuilder.loadTexts: ceDiagScheduledJobEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobEntry.setDescription('A job currently scheduled on a particular physical entity.')
ceDiagScheduledJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 1), CeDiagJobIdentifier())
if mibBuilder.loadTexts: ceDiagScheduledJobIndex.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobIndex.setDescription('An arbitrary non-zero integer value that uniquely identifies a single scheduled job with respect to a physical entity.')
ceDiagScheduledJobType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scheduledOneShot", 1), ("scheduledPeriodicDaily", 2), ("scheduledPeriodicWeekly", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagScheduledJobType.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobType.setDescription("This object specifies the type of the scheduled job. 'scheduledOneShot' - the physical entity will invoke this job at the time specified by ceDiagScheduledJobStart. 'scheduledPeriodicDaily' - the physical entity will first invoke this job at the time specified by ceDiagScheduledJobStart and continue invoking it daily at the same time. 'scheduledPeriodicWeekly' - the corresponding physical entity will first invoke this job at the time and day of the week specified by ceDiagScheduledJobStart and ceDiagScheduledJobDayOfWeek, and continue to invoke it weekly at the same time and day.")
ceDiagScheduledJobStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 3), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagScheduledJobStart.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobStart.setDescription("This object specifies when a scheduled job will be executed. If the value of ceDiagScheduledJobType is 'scheduledOneShot', then this object only applies to the first execution of the job. If the value of ceDiagScheduledJobType is 'scheduledPeriodicDaily' or 'scheduledPeriodicWeekly', then the first four octets of this objects should be zero. If the physical entity's job queue already contains a job scheduled for execution at this time, then the process of submitting the job will fail.")
ceDiagScheduledJobDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("notApplicable", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagScheduledJobDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobDayOfWeek.setDescription("This object specifies the day of the week for a weekly periodic scheduled job. The value of of this object must be specified if the value of ceDiagScheduledJobType is 'scheduledPeriodicWeekly'. This value of this object is set to 'notApplicable' if the value of ceDiagScheduledJobType is 'scheduledOneShot' or 'scheduledPeriodicDaily'.")
ceDiagScheduledJobTestList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 5), CeDiagTestList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagScheduledJobTestList.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobTestList.setDescription('This object specifies the diagnostic suite (i.e., a set of tests) to be executed by the corresponding physical entity. The set of tests supported by this physical entity are specified in ceDiagTestInfoTable.')
ceDiagScheduledJobPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 6), CeDiagPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagScheduledJobPortList.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobPortList.setDescription('This object specifies the list of ports to be tested by the corresponding physical entity when executing the diagnostic suite specified for the job.')
ceDiagScheduledJobRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagScheduledJobRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobRowStatus.setDescription("The status object used to manage the rows in this table. When set to 'active' the scheduled job is submitted. When set to destroy(6) the scheduled job is cleared. When the value of this object is 'active', values within this row cannot be modified, except by deleting and re-creating the row.")
ceDiagScheduledJobSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 5, 1, 1, 8), CeDiagJobSuite()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagScheduledJobSuite.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobSuite.setDescription("This object indicates the various system predefined test suites the on scheduled job can choose from. If the value of this object is 'none', this job will run the tests specified by ceDiagScheduledJobTestList. If the value of this object is 'complete', 'minimal', 'nonDisruptive' or 'perPort' the value of ceDiagScheduledJobTestList is ignored.")
ceDiagTestPerfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1), )
if mibBuilder.loadTexts: ceDiagTestPerfTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfTable.setDescription('This table maintains data concerning the performance of tests executed by each physical entity supporting the online diagnostic feature. The table organizes tests into sets associated with the physical entity supporting those tests. The SNMP entity adds a set of tests corresponding to a physical entity upon detection of a physical entity supporting online diagnostics. The SNMP entity deletes a set of tests corresponding to a physical entity upon removal of the physical entity. The SNMP entity replaces a set of tests corresponding to a physical entity when the physical entity has been successfully loaded with a different image (e.g., the field diagnostic image).')
ceDiagTestPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagTestId"))
if mibBuilder.loadTexts: ceDiagTestPerfEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfEntry.setDescription('Data concerning the performance of a single test.')
ceDiagTestPerfLastResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fail", 2), ("pass", 3), ("skipped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfLastResult.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfLastResult.setDescription("This object indicates the result the last time this test was executed by the corresponding physical entity: 'unknown' - the corresponding physical entity has not executed the test. 'fail' - the test executed and detected at least one failure. 'pass' - the test executed without detecting a failure. 'skipped' - the test was skipped due to insufficient resources.")
ceDiagTestPerfLastErrorID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 2), CeDiagErrorIdentifierOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfLastErrorID.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfLastErrorID.setDescription('This object indicates the last error code of this test. Details of the non-zero error code can be found in the corresponding entry in ceDiagErrorInfoTable.')
ceDiagTestPerfLastRun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfLastRun.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfLastRun.setDescription("This object indicates the last time the corresponding physical entity executed this test. If the value of ceDiagTestPerfLastResult is 'unknown', then the value of this object is irrelevant.")
ceDiagTestPerfFirstFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfFirstFail.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfFirstFail.setDescription('This object indicates the first time the corresponding physical entity executed this test and it failed. The value of this object is irrelevant if the value of ceDiagTestPerfTotalFails is 0.')
ceDiagTestPerfLastSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfLastSuccess.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfLastSuccess.setDescription('This object indicates the last time the corresponding physical entity executed this test and it passed. The value 0x0000010100000000 indicates that the corresponding physical entity has not passed this test yet.')
ceDiagTestPeffLastFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPeffLastFail.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPeffLastFail.setDescription('This object indicates the last time the corresponding physical entity executed this test and it failed. If the value of ceDiagTestPerfTotalFails is 0, then the value of this object is irrelevant.')
ceDiagTestPerfTotalRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfTotalRuns.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfTotalRuns.setDescription('This object indicates the total number of times the corresponding physical entity has executed the test.')
ceDiagTestPerfTotalFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfTotalFails.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfTotalFails.setDescription('This object indicates the total number of times the corresponding physical entity has executed the test and the test resulted with a failure.')
ceDiagTestPerfConsecutiveFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfConsecutiveFails.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfConsecutiveFails.setDescription("This object indicates the consecutive number of times the corresponding physical entity has executed the test and it has failed. The value of this object will be reset to '0' when the physical entity executes the test and it succeeds.")
ceDiagTestPerfLastTestMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 6, 1, 1, 10), CeDiagDiagnosticMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagTestPerfLastTestMethod.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfLastTestMethod.setDescription('This object indicates the testing method used for the last time this test was executed by the corresponding physical entity.')
ceDiagHMSyslogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagHMSyslogEnabled.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMSyslogEnabled.setDescription('This object specifies whether the system will generate syslog messages due to the tests run by health monitor.')
ceDiagHMTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2), )
if mibBuilder.loadTexts: ceDiagHMTestTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestTable.setDescription('This table describes attributes specific to the health monitor for tests supported by a physical entity.')
ceDiagHMTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagTestId"))
if mibBuilder.loadTexts: ceDiagHMTestEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestEntry.setDescription('The attributes of a single test specific to the health monitor.')
ceDiagHMTestEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagHMTestEnabled.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestEnabled.setDescription('This object specifies whether this test is enabled for health monitor.')
ceDiagHMTestIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagHMTestIntervalMin.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestIntervalMin.setDescription('This object indicates the minimum interval which the health monitor can periodically invoke this test.')
ceDiagHMTestIntervalDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagHMTestIntervalDefault.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestIntervalDefault.setDescription("This object indicates the default interval which the health monitor will periodically invoke this test. A value of '0' indicates that the health monitor will not invoke the test.")
ceDiagHMTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagHMTestInterval.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestInterval.setDescription("This object specifies the interval at which the health monitor periodically invokes this test. A value of '0' indicates that the health monitor will not invoke the test. A value of '0' cannot be set.")
ceDiagHMTestThresholdDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagHMTestThresholdDefault.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestThresholdDefault.setDescription("This object indicates the default consecutive failure count threshold. When the specified failure count threshold is reached, the diagnostic test result is set to failure. A value of '0' indicates that the health monitor will not invoke this test.")
ceDiagHMTestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagHMTestThreshold.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestThreshold.setDescription("This object specifies the consecutive failure count threshold for this test. When the specified failure count threshold is reached, the diagnostic test result is set to failure. A value of '0' indicates that there is no failure count threshold for this test. This object is used in combination with ceDiagHMTestThreshWindowSuite and ceDiagHMTestThreshWindowSize to specify a sliding history window for which the threshold is monitored. When the value of ceDiagHMTestThreshWindowSuite is 'default', the sliding history window is in number of test runs, with a window size the same as the value of this object. If ceDiagHMTestThreshWindowSuite and ceDiagHMTestThreshWindowSize are not supported, the failure count threshold will be the consecutive failure count threshold.")
ceDiagHMTestThreshWindowSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("milliseconds", 2), ("seconds", 3), ("minutes", 4), ("hours", 5), ("days", 6), ("runs", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagHMTestThreshWindowSuite.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestThreshWindowSuite.setDescription("This object specifies a sliding history window parameter which is used in combination with ceDiagHMTestThreshold. When the specified failure count threshold is reached in this sliding history window, the diagnostic test result is set to failure. 'default' - The sliding history window is in number of test runs or executions, with a window size the same as ceDiagHMTestThreshold. 'milliseconds' - The sliding history window is in milli-seconds specified by ceDiagHMTestThreshWindowSize. 'seconds' - The sliding history window is in seconds specified by ceDiagHMTestThreshWindowSize. 'minutes' - The sliding history window is in minutes specified by ceDiagHMTestThreshWindowSize. 'hours' - The sliding history window is in hours specified by ceDiagHMTestThreshWindowSize. 'days' - The sliding history window is in days specified by ceDiagHMTestThreshWindowSize. 'runs' - The sliding history window is in number of test runs or executions specified by ceDiagHMTestThreshWindowSize. When the value of this object is 'default' the user cannot set any value for ceDiagHMTestThreshWindowSize. When the value of this object is not 'default', then the value of ceDiagHMTestThreshWindowSize cannot be zero (0).")
ceDiagHMTestThreshWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 7, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagHMTestThreshWindowSize.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestThreshWindowSize.setDescription("This object indicates the sliding history window size. When the value of ceDiagHMTestThreshWindowSuite is 'default', the user cannot set any value for this object. The value of zero (0) cannot be set.")
ceDiagEventLogSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagEventLogSize.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventLogSize.setDescription('This object specifies the maximum number of entries which the event log buffer can contain.')
ceDiagEventCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventCount.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventCount.setDescription('This object specifies the number of entries currently stored in the event log buffer.')
ceDiagEventMaxQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventMaxQueries.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventMaxQueries.setDescription('Maximum number of query entries allowed in the ceDiagEventQueryTable.')
ceDiagEventQueryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4), )
if mibBuilder.loadTexts: ceDiagEventQueryTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQueryTable.setDescription("A control table used to query the event log buffer. Each row instance in the table represents a query with its parameters. The resulting data for each instance of a query in this table is stored in the ceDiagEventResultTable. A row in this table can be created by setting the corresponding instance of ceDiagEventQueryStatus to 'createAndGo'. A row can be deleted by setting the corresponding instance of ceDiagEventQueryStatus to 'destroy'.")
ceDiagEventQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4, 1), ).setIndexNames((0, "CISCO-ENTITY-DIAG-MIB", "ceDiagEventQueryIndex"))
if mibBuilder.loadTexts: ceDiagEventQueryEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQueryEntry.setDescription("A conceptual row of the ceDiagEventQueryTable used to setup a event log buffer query to search for diagnostic events. The actual search is started by when the value of ceDiagEventQueryStatus is set to 'active'.")
ceDiagEventQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceDiagEventQueryIndex.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQueryIndex.setDescription('An arbitrary integer in the range of 1 to ceDiagEventMaxQueries to identify this control query.')
ceDiagEventQueryPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagEventQueryPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQueryPhysicalIndex.setDescription('This object specifies the physical entity for the event log buffer query. A value of zero indicates that the query will return events of all physical entities.')
ceDiagEventQuerySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("all", 0), ("info", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagEventQuerySeverity.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQuerySeverity.setDescription("This object specifies the severity of the event log buffer query. A value of 'all' indicates that the search will return events of all severities.")
ceDiagEventQueryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagEventQueryOwner.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQueryOwner.setDescription("The manager entity that configured this entry and is therefore using the resources assigned to it. It is used to model an administratively assigned name of the owner of a resource. It is recommended that this object have one or more the following information: IP address, management station name, network manager's name, location, or phone number.")
ceDiagEventQueryResultingRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventQueryResultingRows.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQueryResultingRows.setDescription('The result status of the query. Possible values are: -1 - Either the query has not been initiated or the agent is busy processing this query instance. Time to completion of the query processing depends on the complexity of the query and the number of matches that satisfy this query. 0..2147483647 - The search has ended and this is the number of rows in the ceDiagEventResultTable, resulting from this query.')
ceDiagEventQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceDiagEventQueryStatus.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventQueryStatus.setDescription("The status object used to manage rows in this table. When set to 'active', the query to search for diagnostic events is initiated. Once a row becomes active, values within the row cannot be modified, except by deleting and re-creating the row.")
ceDiagEventResultTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5), )
if mibBuilder.loadTexts: ceDiagEventResultTable.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultTable.setDescription('A table containing event log information corresponding to all the completed queries set up in ceDiagEventQueryTable. The query result will not become available until the current search is completed.')
ceDiagEventResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5, 1), ).setIndexNames((0, "CISCO-ENTITY-DIAG-MIB", "ceDiagEventQueryIndex"), (0, "CISCO-ENTITY-DIAG-MIB", "ceDiagEventResultIndex"))
if mibBuilder.loadTexts: ceDiagEventResultEntry.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultEntry.setDescription('A conceptual row in ceDiagEventResultTable, containing information about an event that matches the search criteria set in the corresponding row of ceDiagEventQueryTable.')
ceDiagEventResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceDiagEventResultIndex.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultIndex.setDescription('A positive integer which uniquely identifies a result entry matching a particular query.')
ceDiagEventResultPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventResultPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultPhysicalIndex.setDescription('This object specifies the physical entity corresponding to this event.')
ceDiagEventResultPhysicalDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventResultPhysicalDescr.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultPhysicalDescr.setDescription('This object specifies a textual description of physical entity corresponding to this event.')
ceDiagEventResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventResultTime.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultTime.setDescription('This object specifies the time at which this event occurred.')
ceDiagEventResultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("info", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventResultSeverity.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultSeverity.setDescription('This object indicates the severity of this event.')
ceDiagEventResultLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDiagEventResultLogText.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventResultLogText.setDescription('The text message of this event.')
ceDiagEventErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 8, 6), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ceDiagEventErrorMsg.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventErrorMsg.setDescription('The error message related to the notification.')
ceDiagEnableBootUpFailedNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagEnableBootUpFailedNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagEnableBootUpFailedNotif.setDescription("This variable specifies whether the system produces the ceDiagBootUpFailedNotif. A 'false' value will prevent ceDiagBootUpFailedNotif notifications from being generated by this system.")
ceDiagEnableHMThreshReachedNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagEnableHMThreshReachedNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagEnableHMThreshReachedNotif.setDescription("This variable specifies whether the system produces the ceDiagHMThresholdReachedNotif. A 'false' value will prevent ceDiagHMThresholdReachedNotif notifications from being generated by this system.")
ceDiagEnableHMTestRecoverNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 9, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagEnableHMTestRecoverNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagEnableHMTestRecoverNotif.setDescription("This variable specifies whether the system produces the ceDiagHMTestRecoverNotif. A 'false' value will prevent ceDiagHMTestRecoverNotif notifications from being generated by this system.")
ceDiagEnableSchedTestFailedNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 350, 1, 9, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceDiagEnableSchedTestFailedNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagEnableSchedTestFailedNotif.setDescription("This variable specifies whether the system produces the ceDiagScheduledTestFailedNotif. A 'false' value will prevent ceDiagScheduledTestFailedNotif notifications from being generated by this system.")
ceDiagBootUpFailedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 350, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityBootLevel"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventErrorMsg"))
if mibBuilder.loadTexts: ceDiagBootUpFailedNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagBootUpFailedNotif.setDescription('A ceDiagBootUpFailedNotif is sent if the online diagnostic discovers a boot up failure for a physical entity.')
ceDiagHMThresholdReachedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 350, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestThreshold"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestText"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestAttributes"))
if mibBuilder.loadTexts: ceDiagHMThresholdReachedNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMThresholdReachedNotif.setDescription('A ceDiagHMThresholdReachedNotif is sent if the number of consecutive failure of a Health Monitoring test reaches the configured threshold.')
ceDiagHMTestRecoverNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 350, 0, 3)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestText"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestAttributes"))
if mibBuilder.loadTexts: ceDiagHMTestRecoverNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestRecoverNotif.setDescription('A ceDiagHMTestRecoverNotif is sent when no error is detected for the first time on the same Health Monitoring test which previously triggered ceDiagHMThresholdReachedNotif.')
ceDiagScheduledTestFailedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 350, 0, 4)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestText"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventErrorMsg"))
if mibBuilder.loadTexts: ceDiagScheduledTestFailedNotif.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledTestFailedNotif.setDescription('A ceDiagScheduledTestFailedNotif is sent if a scheduled test failed.')
ciscoEntityDiagMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 1))
ciscoEntityDiagMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2))
ciscoEntityDiagMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 1, 1)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagDescrGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagGlobalConfigGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityImageGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHealthMonitorGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobSuiteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityDiagMIBComplianceRev1 = ciscoEntityDiagMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEntityDiagMIBComplianceRev1.setDescription('The compliance statement for SNMP entities that implement the CISCO-ENTITY-DIAG-MIB. Implementation of this MIB module is strongly recommended for any platform implementing the online diagnostic feature.')
ciscoEntityDiagMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 1, 2)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagDescrGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagGlobalConfigGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityImageGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHealthMonitorGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobSuiteGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotifControlGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotifErrorMsgGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityDiagMIBComplianceRev2 = ciscoEntityDiagMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEntityDiagMIBComplianceRev2.setDescription('The compliance statement for SNMP entities that implement the CISCO-ENTITY-DIAG-MIB. Implementation of this MIB module is strongly recommended for any platform implementing the online diagnostic feature. This statement is deprecated and superceded by ciscoEntityDiagMIBComplianceRev3.')
ciscoEntityDiagMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 1, 3)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagDescrGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagGlobalConfigGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityImageGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHealthMonitorGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobSuiteGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotifControlGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotifErrorMsgGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotificationGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfLastTestMethodGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityDiagMIBComplianceRev3 = ciscoEntityDiagMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEntityDiagMIBComplianceRev3.setDescription('The compliance statement for SNMP entities that implement the CISCO-ENTITY-DIAG-MIB. Implementation of this MIB module is strongly recommended for any platform implementing the online diagnostic feature. This statement is deprecated and superceded by ciscoEntityDiagMIBComplianceRev4.')
ciscoEntityDiagMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 1, 4)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagDescrGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagGlobalConfigGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityImageGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHealthMonitorGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobSuiteGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotifControlGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotifErrorMsgGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagNotificationGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfLastTestMethodGroup"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestThreshWindowGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityDiagMIBComplianceRev4 = ciscoEntityDiagMIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityDiagMIBComplianceRev4.setDescription('The compliance statement for SNMP entities that implement the CISCO-ENTITY-DIAG-MIB. Implementation of this MIB module is strongly recommended for any platform implementing the online diagnostic feature.')
ceDiagDescrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 1)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagTestText"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestAttributes"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestCustomAttributeDesc"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagErrorText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagDescrGroup = ceDiagDescrGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagDescrGroup.setDescription('A collection of managed objects that describe tests and errors supported by each physical entity.')
ceDiagGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 2)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagBootupLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagGlobalConfigGroup = ceDiagGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagGlobalConfigGroup.setDescription('A collection of managed objects that describe global configuration of the online diagnostic feature.')
ceDiagEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 3)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityBootLevel"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityCurrentTestMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagEntityGroup = ceDiagEntityGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityGroup.setDescription('A collection of managed objects that describe the state of a physical entity with respect ot the online diagnostic feature.')
ceDiagEntityImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 4)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityImageAdminStatus"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityImageOperStatus"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEntityFieldDiagnosticUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagEntityImageGroup = ceDiagEntityImageGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagEntityImageGroup.setDescription('A collection of managed objects that describe the diagnostic image which the physical entity is running.')
ceDiagOnDemandGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 5)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandErrorAllowed"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandErrorAction"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandIterations"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandJobSuite"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandJobTestList"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandJobPortList"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagOnDemandJobRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagOnDemandGroup = ceDiagOnDemandGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagOnDemandGroup.setDescription('A collection of managed objects that describe the diagnostic on demand diagnostic jobs on the system.')
ceDiagScheduledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 6)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobType"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobStart"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobDayOfWeek"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobTestList"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobPortList"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagScheduledGroup = ceDiagScheduledGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledGroup.setDescription('A collection of managed objects that describe the diagnostic on demand diagnostic jobs on the system.')
ceDiagTestPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 7)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfLastResult"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfLastErrorID"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfLastRun"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfFirstFail"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfLastSuccess"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPeffLastFail"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfTotalRuns"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfTotalFails"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfConsecutiveFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagTestPerfGroup = ceDiagTestPerfGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfGroup.setDescription('A collection of managed objects that describe the performance of tests supported by each physical entity.')
ceDiagHealthMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 8)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagHMSyslogEnabled"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestEnabled"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestIntervalMin"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestInterval"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestIntervalDefault"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestThresholdDefault"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagHealthMonitorGroup = ceDiagHealthMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagHealthMonitorGroup.setDescription('A collection of managed objects that describe tests and test configuration with relating to the health monitor.')
ceDiagEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 9)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagEventLogSize"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventCount"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventMaxQueries"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventQueryPhysicalIndex"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventQuerySeverity"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventQueryOwner"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventQueryResultingRows"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventQueryStatus"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventResultPhysicalIndex"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventResultPhysicalDescr"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventResultTime"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventResultSeverity"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEventResultLogText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagEventGroup = ceDiagEventGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagEventGroup.setDescription('A collection of managed objects that describe online diagnostic event history.')
ceDiagScheduledJobSuiteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 10)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledJobSuite"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagScheduledJobSuiteGroup = ceDiagScheduledJobSuiteGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagScheduledJobSuiteGroup.setDescription('A collection of managed objects that describe the test suite information for a diagnostic scheduled job.')
ceDiagNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 11)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagEnableBootUpFailedNotif"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEnableHMThreshReachedNotif"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEnableHMTestRecoverNotif"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagEnableSchedTestFailedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagNotifControlGroup = ceDiagNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagNotifControlGroup.setDescription('A collection of objects providing enabling/disabling of the boot up failed, health monitoring, and scheduled job notifications for online diagnostics.')
ceDiagNotifErrorMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 12)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagEventErrorMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagNotifErrorMsgGroup = ceDiagNotifErrorMsgGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagNotifErrorMsgGroup.setDescription('A collection of objects providing error message used by various notifications.')
ceDiagNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 13)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagBootUpFailedNotif"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMThresholdReachedNotif"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestRecoverNotif"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagScheduledTestFailedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagNotificationGroup = ceDiagNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagNotificationGroup.setDescription('A collection of notifications providing for boot up failed, health monitoring, and scheduled job within online diagnostics.')
ceDiagTestPerfLastTestMethodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 14)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagTestPerfLastTestMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagTestPerfLastTestMethodGroup = ceDiagTestPerfLastTestMethodGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagTestPerfLastTestMethodGroup.setDescription('A collection of managed objects that describe the last testing method for a diagnostic test.')
ceDiagHMTestThreshWindowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 350, 2, 2, 15)).setObjects(("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestThreshWindowSuite"), ("CISCO-ENTITY-DIAG-MIB", "ceDiagHMTestThreshWindowSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceDiagHMTestThreshWindowGroup = ceDiagHMTestThreshWindowGroup.setStatus('current')
if mibBuilder.loadTexts: ceDiagHMTestThreshWindowGroup.setDescription('A collection of managed objects that describe the sliding history window parameters for a Health Monitor diagnostic test.')
mibBuilder.exportSymbols("CISCO-ENTITY-DIAG-MIB", ceDiagHMTestThreshWindowSize=ceDiagHMTestThreshWindowSize, ceDiagOnDemandJobSuite=ceDiagOnDemandJobSuite, ceDiagTestCustomAttributeIndex=ceDiagTestCustomAttributeIndex, ceDiagEntityImageGroup=ceDiagEntityImageGroup, ceDiagTestPerfLastTestMethodGroup=ceDiagTestPerfLastTestMethodGroup, ceDiagEventErrorMsg=ceDiagEventErrorMsg, ceDiagEventLogSize=ceDiagEventLogSize, ceDiagTestPerfTotalRuns=ceDiagTestPerfTotalRuns, ciscoEntityDiagMIBConform=ciscoEntityDiagMIBConform, ciscoEntityDiagMIBComplianceRev1=ciscoEntityDiagMIBComplianceRev1, ceDiagNotifControlGroup=ceDiagNotifControlGroup, ceDiagTestCustomAttributeDesc=ceDiagTestCustomAttributeDesc, ceDiagEntityCurrentTestEntry=ceDiagEntityCurrentTestEntry, ceDiagScheduledJobTestList=ceDiagScheduledJobTestList, ceDiagHMTestInterval=ceDiagHMTestInterval, ceDiagEntityFieldDiagnosticUrl=ceDiagEntityFieldDiagnosticUrl, ceDiagEventResultIndex=ceDiagEventResultIndex, ceDiagOnDemandJobTestList=ceDiagOnDemandJobTestList, ceDiagScheduledJobTable=ceDiagScheduledJobTable, ceDiagEnableSchedTestFailedNotif=ceDiagEnableSchedTestFailedNotif, ceDiagHMTestThreshold=ceDiagHMTestThreshold, ceDiagEntityImageOperStatus=ceDiagEntityImageOperStatus, ceDiagEntity=ceDiagEntity, ciscoEntityDiagMIBCompliances=ciscoEntityDiagMIBCompliances, ceDiagHealthMonitor=ceDiagHealthMonitor, ceDiagBootUpFailedNotif=ceDiagBootUpFailedNotif, ceDiagEventQuerySeverity=ceDiagEventQuerySeverity, ceDiagScheduledJobSuite=ceDiagScheduledJobSuite, ceDiagScheduledJobEntry=ceDiagScheduledJobEntry, ceDiagTest=ceDiagTest, ceDiagHMTestRecoverNotif=ceDiagHMTestRecoverNotif, ceDiagTestPerfLastRun=ceDiagTestPerfLastRun, ciscoEntityDiagMIBComplianceRev2=ciscoEntityDiagMIBComplianceRev2, ceDiagOnDemandGroup=ceDiagOnDemandGroup, ceDiagErrorText=ceDiagErrorText, ceDiagEventQueryResultingRows=ceDiagEventQueryResultingRows, ceDiagScheduledJobStart=ceDiagScheduledJobStart, ceDiagHMTestEntry=ceDiagHMTestEntry, ceDiagEnableBootUpFailedNotif=ceDiagEnableBootUpFailedNotif, ceDiagTestPerfEntry=ceDiagTestPerfEntry, ceDiagTestPeffLastFail=ceDiagTestPeffLastFail, ciscoEntityDiagMIBComplianceRev3=ciscoEntityDiagMIBComplianceRev3, ceDiagEventQueryIndex=ceDiagEventQueryIndex, ciscoEntityDiagMIBObjects=ciscoEntityDiagMIBObjects, ceDiagTestAttributes=ceDiagTestAttributes, ceDiagEventResultPhysicalIndex=ceDiagEventResultPhysicalIndex, ceDiagScheduledTestFailedNotif=ceDiagScheduledTestFailedNotif, ceDiagGlobalConfigGroup=ceDiagGlobalConfigGroup, ceDiagTestPerfFirstFail=ceDiagTestPerfFirstFail, ceDiagEventResultPhysicalDescr=ceDiagEventResultPhysicalDescr, ciscoEntityDiagMIBNotifs=ciscoEntityDiagMIBNotifs, ceDiagErrorId=ceDiagErrorId, ciscoEntityDiagMIB=ciscoEntityDiagMIB, ceDiagHMTestIntervalDefault=ceDiagHMTestIntervalDefault, ceDiagOnDemandIterations=ceDiagOnDemandIterations, ceDiagGlobalConfig=ceDiagGlobalConfig, ceDiagHMTestTable=ceDiagHMTestTable, ceDiagOnDemandJobPortList=ceDiagOnDemandJobPortList, ceDiagTestPerfTable=ceDiagTestPerfTable, ceDiagHealthMonitorGroup=ceDiagHealthMonitorGroup, ceDiagTestCustomAttributeTable=ceDiagTestCustomAttributeTable, ceDiagEventGroup=ceDiagEventGroup, ceDiagEvents=ceDiagEvents, ceDiagTestPerfConsecutiveFails=ceDiagTestPerfConsecutiveFails, ceDiagErrorInfoEntry=ceDiagErrorInfoEntry, ceDiagEventCount=ceDiagEventCount, ceDiagTestPerfLastResult=ceDiagTestPerfLastResult, ceDiagTestInfoTable=ceDiagTestInfoTable, ceDiagNotificationGroup=ceDiagNotificationGroup, ciscoEntityDiagMIBComplianceRev4=ciscoEntityDiagMIBComplianceRev4, ceDiagOnDemandJobRowStatus=ceDiagOnDemandJobRowStatus, ceDiagEntityBootLevel=ceDiagEntityBootLevel, ceDiagHMTestEnabled=ceDiagHMTestEnabled, ceDiagScheduledJobIndex=ceDiagScheduledJobIndex, ceDiagScheduledGroup=ceDiagScheduledGroup, ceDiagEventQueryOwner=ceDiagEventQueryOwner, ceDiagDescriptions=ceDiagDescriptions, ceDiagTestId=ceDiagTestId, ceDiagOnDemand=ceDiagOnDemand, ceDiagErrorInfoTable=ceDiagErrorInfoTable, ceDiagScheduledJobType=ceDiagScheduledJobType, ceDiagNotificationControl=ceDiagNotificationControl, ceDiagEntityCurrentTestMethod=ceDiagEntityCurrentTestMethod, PYSNMP_MODULE_ID=ciscoEntityDiagMIB, ceDiagNotifErrorMsgGroup=ceDiagNotifErrorMsgGroup, ceDiagOnDemandErrorAllowed=ceDiagOnDemandErrorAllowed, ceDiagTestCustomAttributeEntry=ceDiagTestCustomAttributeEntry, ceDiagOnDemandJobEntry=ceDiagOnDemandJobEntry, ceDiagTestPerfTotalFails=ceDiagTestPerfTotalFails, ceDiagEventQueryPhysicalIndex=ceDiagEventQueryPhysicalIndex, ceDiagEnableHMThreshReachedNotif=ceDiagEnableHMThreshReachedNotif, ceDiagOnDemandErrorAction=ceDiagOnDemandErrorAction, ceDiagTestPerfGroup=ceDiagTestPerfGroup, ceDiagEnableHMTestRecoverNotif=ceDiagEnableHMTestRecoverNotif, ceDiagTestPerfLastErrorID=ceDiagTestPerfLastErrorID, ceDiagTestText=ceDiagTestText, ceDiagScheduledJobPortList=ceDiagScheduledJobPortList, ceDiagHMTestThreshWindowSuite=ceDiagHMTestThreshWindowSuite, ceDiagEventMaxQueries=ceDiagEventMaxQueries, ceDiagOnDemandJobTable=ceDiagOnDemandJobTable, ceDiagEntityGroup=ceDiagEntityGroup, ceDiagHMTestThreshWindowGroup=ceDiagHMTestThreshWindowGroup, ceDiagEventQueryStatus=ceDiagEventQueryStatus, ceDiagEventQueryTable=ceDiagEventQueryTable, ceDiagHMTestIntervalMin=ceDiagHMTestIntervalMin, ceDiagHMThresholdReachedNotif=ceDiagHMThresholdReachedNotif, ceDiagEventResultTime=ceDiagEventResultTime, ciscoEntityDiagMIBGroups=ciscoEntityDiagMIBGroups, ceDiagEventResultSeverity=ceDiagEventResultSeverity, ceDiagDescrGroup=ceDiagDescrGroup, ceDiagEventResultTable=ceDiagEventResultTable, ceDiagEntityTable=ceDiagEntityTable, ceDiagEventQueryEntry=ceDiagEventQueryEntry, ceDiagEntityEntry=ceDiagEntityEntry, ceDiagScheduledJobDayOfWeek=ceDiagScheduledJobDayOfWeek, ceDiagEntityImageAdminStatus=ceDiagEntityImageAdminStatus, ceDiagEntityCurrentTestTable=ceDiagEntityCurrentTestTable, ceDiagEventResultLogText=ceDiagEventResultLogText, ceDiagTestPerfLastSuccess=ceDiagTestPerfLastSuccess, ceDiagScheduled=ceDiagScheduled, ceDiagScheduledJobRowStatus=ceDiagScheduledJobRowStatus, ceDiagEventResultEntry=ceDiagEventResultEntry, ceDiagTestInfoEntry=ceDiagTestInfoEntry, ceDiagHMTestThresholdDefault=ceDiagHMTestThresholdDefault, ceDiagScheduledJobSuiteGroup=ceDiagScheduledJobSuiteGroup, ceDiagBootupLevel=ceDiagBootupLevel, ceDiagHMSyslogEnabled=ceDiagHMSyslogEnabled, ceDiagTestPerfLastTestMethod=ceDiagTestPerfLastTestMethod)
