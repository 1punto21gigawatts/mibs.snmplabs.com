#
# PySNMP MIB module NETBOTZ-PRD-BOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETBOTZ-PRD-BOT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
netBotz_ismetric, = mibBuilder.importSymbols("NETBOTZ-DEVICE-MIB", "netBotz-ismetric")
netBotz_products, = mibBuilder.importSymbols("NETBOTZ-MIB", "netBotz-products")
netBotz_prd_bot, = mibBuilder.importSymbols("NETBOTZ-PRODUCTS-MIB", "netBotz-prd-bot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, NotificationType, Integer32, IpAddress, Counter32, iso, TimeTicks, Counter64, ObjectIdentity, Gauge32, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "NotificationType", "Integer32", "IpAddress", "Counter32", "iso", "TimeTicks", "Counter64", "ObjectIdentity", "Gauge32", "Bits", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netBotz_prd_bot_temp = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 1), Integer32()).setLabel("netBotz-prd-bot-temp").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_temp.setReference('NetBotz Temperature Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_temp.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp.setDescription('The reading of the temperature probe, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_humidity = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 2), Integer32()).setLabel("netBotz-prd-bot-humidity").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_humidity.setReference('NetBotz Humidity Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity.setDescription('The reading of the humidity probe, in percent.')
netBotz_prd_bot_airflow = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 3), Integer32()).setLabel("netBotz-prd-bot-airflow").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_airflow.setReference('NetBotz Airflow Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow.setDescription('The reading of the airflow probe. Each unit represents approximately 40 feet/minute or 13 meters/minute of airflow velocity.')
netBotz_prd_bot_audio = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 4), Integer32()).setLabel("netBotz-prd-bot-audio").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_audio.setReference('NetBotz Audio Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_audio.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio.setDescription('The reading of the audio alarm probe on/off.')
netBotz_prd_bot_doorajar = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 5), Integer32()).setLabel("netBotz-prd-bot-doorajar").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_doorajar.setReference('NetBotz Door Switch Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_doorajar.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_doorajar.setDescription('The reading of the door switch probe open(0) or closed(1).')
netBotz_prd_bot_temp_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 6), Integer32()).setLabel("netBotz-prd-bot-temp-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_temp_min.setReference('NetBotz Temperature Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_min.setDescription('The temperature probe minimum, from 35 to 120 degrees F, or 1 to 50 degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_temp_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 7), Integer32()).setLabel("netBotz-prd-bot-temp-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_temp_max.setReference('NetBotz Temperature Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_max.setDescription('The temperature probe maximum, from 35 to 120 degrees F, or 1 to 50 degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_humidity_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 8), Integer32()).setLabel("netBotz-prd-bot-humidity-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_min.setReference('NetBotz Humidity Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_min.setDescription('The humidity probe minimum, from 10 to 90 percent.')
netBotz_prd_bot_humidity_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 9), Integer32()).setLabel("netBotz-prd-bot-humidity-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_max.setReference('NetBotz Humidity Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_max.setDescription('The humidity probe maximum, from 10 to 90 percent.')
netBotz_prd_bot_airflow_mins = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 10), Integer32()).setLabel("netBotz-prd-bot-airflow-mins").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_mins.setReference('NetBotz|Airflow minutes')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_mins.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_mins.setDescription('Minutes without airflow before alarm set.')
netBotz_prd_bot_audio_secs = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 11), Integer32()).setLabel("netBotz-prd-bot-audio-secs").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_audio_secs.setReference('NetBotz|Audio seconds')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_secs.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_secs.setDescription('Seconds of alarm audio before alarm set.')
netBotz_prd_bot_temp_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 12), Integer32()).setLabel("netBotz-prd-bot-temp-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_temp_enabled.setReference('NetBotz|Temperature Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_temp_enabled.setDescription('Temperature probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_hum_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 13), Integer32()).setLabel("netBotz-prd-bot-hum-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_hum_enabled.setReference('NetBotz|Humidity Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_hum_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_hum_enabled.setDescription('Humidity probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_air_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 14), Integer32()).setLabel("netBotz-prd-bot-air-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_air_enabled.setReference('NetBotz|Airflow Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_air_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_air_enabled.setDescription('Airflow probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_audio_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 15), Integer32()).setLabel("netBotz-prd-bot-audio-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_audio_enabled.setReference('NetBotz|Audio Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_enabled.setDescription('Audio probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_switch_state = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 16), Integer32()).setLabel("netBotz-prd-bot-switch-state").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_switch_state.setReference('NetBotz|Switch state setting')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_state.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_state.setDescription('Switch state setting. The state controls which condition of the door switch indicates an alarm. If set to 0, alarm is set when the switch is closed. If set to 1, alarm is set when the switch is open.')
netBotz_prd_bot_switch_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 17), Integer32()).setLabel("netBotz-prd-bot-switch-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_switch_enabled.setReference('NetBotz|Door Switch Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_switch_enabled.setDescription('Door switch enabled(1) or disabled(0).')
netBotz_prd_bot_audio_level = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 18), Integer32()).setLabel("netBotz-prd-bot-audio-level").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_audio_level.setReference('NetBotz|Audio Level')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_level.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_level.setDescription('Audio level setting. This is the relative audio level, from 0-11, above which an alarm will be sent.')
netBotz_prd_bot_doorpic_delay = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 19), Integer32()).setLabel("netBotz-prd-bot-doorpic-delay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_delay.setReference('NetBotz|Door Picture Delay')
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_delay.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_delay.setDescription('Number of seconds between door alert and first picture.')
netBotz_prd_bot_trap_index = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 20), Integer32()).setLabel("netBotz-prd-bot-trap-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_index.setReference('NetBotz Last Trap Index')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_index.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_index.setDescription('The crawler ID of the last trap.')
netBotz_prd_bot_trap_address = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 21), IpAddress()).setLabel("netBotz-prd-bot-trap-address").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_address.setReference('NetBotz Last Trap Address')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_address.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_address.setDescription('The IP address of the last trap.')
netBotz_prd_bot_trap_oid = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 22), ObjectIdentifier()).setLabel("netBotz-prd-bot-trap-oid").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_oid.setReference('NetBotz Last Trap OID')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_oid.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_oid.setDescription('The object id of the last trap.')
netBotz_prd_bot_trap_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 23), Integer32()).setLabel("netBotz-prd-bot-trap-value").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_value.setReference('NetBotz Last Trap Value')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_value.setDescription('The value of the last object trap.')
netBotz_prd_bot_trap_date = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 24), Integer32()).setLabel("netBotz-prd-bot-trap-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_trap_date.setReference('NetBotz Trap Date')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_date.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_date.setDescription('The date and time of a specific trap. This field contains the number of seconds elapsed since midnight (00:00:00), January 1, 1970')
netBotz_prd_bot_refresh = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 26), Integer32()).setLabel("netBotz-prd-bot-refresh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_refresh.setReference('NetBotz|Web Refresh')
if mibBuilder.loadTexts: netBotz_prd_bot_refresh.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_refresh.setDescription('Rate of web page refresh, in seconds. This must be greater than 5 seconds.')
netBotz_prd_bot_airflow_level = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 27), Integer32()).setLabel("netBotz-prd-bot-airflow-level").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_level.setReference('NetBotz|Airflow Alert Level')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_level.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_level.setDescription('Airflow alert level. This is the relative level of airflow below which an alarm will be sent. The range is 1-11. Each unit is approximately 40 feet/second or 13 meters/second of airflow velocity.')
netBotz_prd_bot_doorpic_count = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 28), Integer32()).setLabel("netBotz-prd-bot-doorpic-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_count.setReference('NetBotz|Door Picture Count')
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_count.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_doorpic_count.setDescription('Number of pictures to take when door activated. These pictures will be sent as attachments to the door alert e-mail. The range is from 0 to 5 pictures.')
netBotz_prd_bot_amps1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 29), Integer32()).setLabel("netBotz-prd-bot-amps1").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1.setReference('NetBotz Amperage[1] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1.setDescription('The reading of the first amperage probe, in milliamps.')
netBotz_prd_bot_amps1_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 30), Integer32()).setLabel("netBotz-prd-bot-amps1-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_enabled.setReference('NetBotz|Amperage[1] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_enabled.setDescription('Amperage[1] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps1_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 31), Integer32()).setLabel("netBotz-prd-bot-amps1-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_min.setReference('NetBotz Amperage[1] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_min.setDescription('The amperage[1] probe minimum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps1_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 32), Integer32()).setLabel("netBotz-prd-bot-amps1-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max.setReference('NetBotz Amperage[1] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max.setDescription('The amperage[1] probe maximum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 34), Integer32()).setLabel("netBotz-prd-bot-amps2").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2.setReference('NetBotz Amperage[2] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2.setDescription('The reading of the second amperage probe, in milliamps.')
netBotz_prd_bot_amps2_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 35), Integer32()).setLabel("netBotz-prd-bot-amps2-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_enabled.setReference('NetBotz|Amperage[2] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_enabled.setDescription('Amperage[2] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps2_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 36), Integer32()).setLabel("netBotz-prd-bot-amps2-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_min.setReference('NetBotz Amperage[2] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_min.setDescription('The amperage[2] probe minimum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps2_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 37), Integer32()).setLabel("netBotz-prd-bot-amps2-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max.setReference('NetBotz Amperage[2] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max.setDescription('The amperage[2] probe maximum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 39), Integer32()).setLabel("netBotz-prd-bot-amps3").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3.setReference('NetBotz Amperage[3] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3.setDescription('The reading of the third amperage probe, in milliamps.')
netBotz_prd_bot_amps3_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 40), Integer32()).setLabel("netBotz-prd-bot-amps3-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_enabled.setReference('NetBotz|Amperage[3] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_enabled.setDescription('Amperage[3] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps3_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 41), Integer32()).setLabel("netBotz-prd-bot-amps3-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_min.setReference('NetBotz Amperage[3] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_min.setDescription('The amperage[3] probe minimum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps3_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 42), Integer32()).setLabel("netBotz-prd-bot-amps3-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max.setReference('NetBotz Amperage[3] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max.setDescription('The amperage[3] probe maximum, from 0 to 30000 milliamps.')
netBotz_prd_bot_amps_total = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 44), Integer32()).setLabel("netBotz-prd-bot-amps-total").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total.setReference('NetBotz Total Amperage Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total.setDescription('The total of the readings of all amperage probes, in milliamps.')
netBotz_prd_bot_amps_total_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 45), Integer32()).setLabel("netBotz-prd-bot-amps-total-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_enabled.setReference('NetBotz|Total Amperage Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_enabled.setDescription('Total amperage alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps_total_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 46), Integer32()).setLabel("netBotz-prd-bot-amps-total-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_min.setReference('NetBotz Total Amperage Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_min.setDescription('The total amperage minimum, from 0 to 90000 milliamps.')
netBotz_prd_bot_amps_total_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 47), Integer32()).setLabel("netBotz-prd-bot-amps-total-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_max.setReference('NetBotz Total Amperage Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_max.setDescription('The total amperage maximum, from 0 to 90000 milliamps.')
netBotz_prd_bot_amps_total_support_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 48), DisplayString()).setLabel("netBotz-prd-bot-amps-total-support-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_support_enabled.setReference('NetBotz|Total Amperage Support Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_support_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps_total_support_enabled.setDescription('Total Amperage Support enabled(Y) or disabled(N).')
netBotz_prd_bot_amps1_uV_per_10mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 49), Integer32()).setLabel("netBotz-prd-bot-amps1-uV-per-10mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_uV_per_10mA.setReference('NetBotz uVolts To 10 mAmps 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_uV_per_10mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_uV_per_10mA.setDescription('The scaling factor used for the first amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps2_uV_per_10mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 50), Integer32()).setLabel("netBotz-prd-bot-amps2-uV-per-10mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_uV_per_10mA.setReference('NetBotz uVolts To 10 mAmps 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_uV_per_10mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_uV_per_10mA.setDescription('The scaling factor used for the second amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps3_uV_per_mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 51), Integer32()).setLabel("netBotz-prd-bot-amps3-uV-per-mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_uV_per_mA.setReference('NetBotz uVolts To 10 mAmps 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_uV_per_mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_uV_per_mA.setDescription('The scaling factor used for the third amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps1_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 52), Integer32()).setLabel("netBotz-prd-bot-amps1-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max_range.setReference('NetBotz Max milliAmps 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps1_max_range.setDescription('The maximum RMS milliamps measureable by the first Amp Detect.')
netBotz_prd_bot_amps2_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 53), Integer32()).setLabel("netBotz-prd-bot-amps2-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max_range.setReference('NetBotz Max milliAmps 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps2_max_range.setDescription('The maximum RMS milliamps measureable by the second Amp Detect.')
netBotz_prd_bot_amps3_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 54), Integer32()).setLabel("netBotz-prd-bot-amps3-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max_range.setReference('NetBotz Max milliAmps 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps3_max_range.setDescription('The maximum RMS milliamps measureable by the third Amp Detect.')
netBotz_prd_bot_amps4 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 55), Integer32()).setLabel("netBotz-prd-bot-amps4").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4.setReference('NetBotz Amperage[4] Probe')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4.setDescription('The reading of the fourth amperage probe, in milliamps.')
netBotz_prd_bot_amps4_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 56), Integer32()).setLabel("netBotz-prd-bot-amps4-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_enabled.setReference('NetBotz|Amperage[4] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_enabled.setDescription('Amperage[4] probe alarm enabled(1) or disabled(0).')
netBotz_prd_bot_amps4_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 57), Integer32()).setLabel("netBotz-prd-bot-amps4-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_min.setReference('NetBotz Amperage[4] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_min.setDescription('The amperage[4] probe minimum, in milliamps.')
netBotz_prd_bot_amps4_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 58), Integer32()).setLabel("netBotz-prd-bot-amps4-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max.setReference('NetBotz Amperage[4] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max.setDescription('The amperage[4] probe maximum, in milliamps.')
netBotz_prd_bot_amps4_uV_per_10mA = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 60), Integer32()).setLabel("netBotz-prd-bot-amps4-uV-per-10mA").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_uV_per_10mA.setReference('NetBotz uVolts To 10 mAmps 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_uV_per_10mA.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_uV_per_10mA.setDescription('The scaling factor used for the fourth amperage probe to convert microvolts measured from the Amp Detect into 10s of milliamps of current. Needs to be set based on the type of Amp Detect module installed.')
netBotz_prd_bot_amps4_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 61), Integer32()).setLabel("netBotz-prd-bot-amps4-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max_range.setReference('NetBotz Max milliAmps 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amps4_max_range.setDescription('The maximum RMS milliamps measureable by the fourth Amp Detect.')
netBotz_prd_bot_ext_temp1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 62), Integer32()).setLabel("netBotz-prd-bot-ext-temp1").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1.setReference('NetBotz External Temperature Probe 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1.setDescription('The reading of the external temperature probe on port 1, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 63), Integer32()).setLabel("netBotz-prd-bot-ext-temp2").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2.setReference('NetBotz External Temperature Probe 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2.setDescription('The reading of the external temperature probe on port 2, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 64), Integer32()).setLabel("netBotz-prd-bot-ext-temp3").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3.setReference('NetBotz External Temperature Probe 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3.setDescription('The reading of the external temperature probe on port 3, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp4 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 65), Integer32()).setLabel("netBotz-prd-bot-ext-temp4").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4.setReference('NetBotz External Temperature Probe 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4.setDescription('The reading of the external temperature probe on port 4, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp1_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 66), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_enabled.setReference('NetBotz|Ext Temp[1] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_enabled.setDescription('External temperature probe on port 1 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_temp1_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 67), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min.setReference('NetBotz Ext Temp[1] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min.setDescription('The external temperature probe on port 1 probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp1_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 68), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max.setReference('NetBotz Ext Temp[1] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max.setDescription('The external temperature probe on port 1 probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp2_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 69), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_enabled.setReference('NetBotz|Ext Temp[2] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_enabled.setDescription('External temperature probe on port 2 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_temp2_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 70), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min.setReference('NetBotz Ext Temp[2] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min.setDescription('The external temperature probe on port 2 probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp2_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 71), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max.setReference('NetBotz Ext Temp[2] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max.setDescription('The external temperature probe on port 2 probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp3_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 72), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_enabled.setReference('NetBotz|Ext Temp[3] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_enabled.setDescription('External temperature probe on port 3 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_temp3_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 73), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min.setReference('NetBotz Ext Temp[3] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min.setDescription('The external temperature probe on port 3 probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp3_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 74), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max.setReference('NetBotz Ext Temp[3] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max.setDescription('The external temperature probe on port 3 probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp4_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 75), Integer32()).setLabel("netBotz-prd-bot-ext-temp4-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_enabled.setReference('NetBotz|Ext Temp[4] Probe Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_enabled.setDescription('External temperature probe on port 4 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_temp4_min = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 76), Integer32()).setLabel("netBotz-prd-bot-ext-temp4-min").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_min.setReference('NetBotz Ext Temp[4] Probe Minimum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_min.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_min.setDescription('The external temperature probe on port 4 probe minimum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp4_max = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 77), Integer32()).setLabel("netBotz-prd-bot-ext-temp4-max").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_max.setReference('NetBotz Ext Temp[4] Probe Maximum')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_max.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_max.setDescription('The external temperature probe on port 4 probe maximum, in degrees F or degrees C (depends on netBotz-ismetric).')
netBotz_prd_bot_ext_temp1_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 78), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_per_degreeC.setReference('NetBotz uVolts To degrees C - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe on port 1 to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp1_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 79), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_at_0_degreeC.setReference('NetBotz uVolts at 0 degrees C - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe on port 1 of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp1_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 81), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max_range.setReference('NetBotz Max temperature supported - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_max_range.setDescription('The maximum temperature measureable by the temperature sensor installed on port 1, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp1_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 80), Integer32()).setLabel("netBotz-prd-bot-ext-temp1-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min_range.setReference('NetBotz min temperature supported - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_min_range.setDescription('The minimum temperature measureable by the temperature sensor installed on port 1, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 82), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_per_degreeC.setReference('NetBotz uVolts To degrees C - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe on port 2 to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 83), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_at_0_degreeC.setReference('NetBotz uVolts at 0 degrees C - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe on port 2 of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 85), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max_range.setReference('NetBotz Max temperature supported - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_max_range.setDescription('The maximum temperature measureable by the temperature sensor installed on port 2, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp2_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 84), Integer32()).setLabel("netBotz-prd-bot-ext-temp2-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min_range.setReference('NetBotz min temperature supported - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_min_range.setDescription('The minimum temperature measureable by the temperature sensor installed on port 2, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 86), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_per_degreeC.setReference('NetBotz uVolts To degrees C - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe on port 3 to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 87), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_at_0_degreeC.setReference('NetBotz uVolts at 0 degrees C - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe on port 3 of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 89), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max_range.setReference('NetBotz Max temperature supported - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_max_range.setDescription('The maximum temperature measureable by the temperature sensor installed on port 3, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp3_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 88), Integer32()).setLabel("netBotz-prd-bot-ext-temp3-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min_range.setReference('NetBotz min temperature supported - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_min_range.setDescription('The minimum temperature measureable by the temperature sensor installed on port 3, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp4_uV_per_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 90), Integer32()).setLabel("netBotz-prd-bot-ext-temp4-uV-per-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_uV_per_degreeC.setReference('NetBotz uVolts To degrees C - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_uV_per_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_uV_per_degreeC.setDescription('The scaling factor used for the external temperature probe on port 4 to convert microvolts measured from the temperature sensor into degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp4_uV_at_0_degreeC = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 91), Integer32()).setLabel("netBotz-prd-bot-ext-temp4-uV-at-0-degreeC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_uV_at_0_degreeC.setReference('NetBotz uVolts at 0 degrees C - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_uV_at_0_degreeC.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_uV_at_0_degreeC.setDescription('The offset used for the external temperature probe on port 4 of microvolts measured from the temperature sensor at zero degrees C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp4_max_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 93), Integer32()).setLabel("netBotz-prd-bot-ext-temp4-max-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_max_range.setReference('NetBotz Max temperature supported - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_max_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_max_range.setDescription('The maximum temperature measureable by the temperature sensor installed on port 4, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_temp4_min_range = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 92), Integer32()).setLabel("netBotz-prd-bot-ext-temp4-min-range").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_min_range.setReference('NetBotz min temperature supported - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_min_range.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_min_range.setDescription('The minimum temperature measureable by the temperature sensor installed on port 4, in tenths of a degree C. Needs to be set based on the type of temperature sensor module installed.')
netBotz_prd_bot_ext_port1_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 94), DisplayString()).setLabel("netBotz-prd-bot-ext-port1-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_id.setReference('NetBotz module ID port 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_id.setDescription('The module ID of the sensor module installed on port 1. Blank string indicates that no module is installed.')
netBotz_prd_bot_ext_port1_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 95), DisplayString()).setLabel("netBotz-prd-bot-ext-port1-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_type.setReference('NetBotz module type port 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port1_module_type.setDescription('The type of sensor module installed on port 1. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
netBotz_prd_bot_ext_port2_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 96), DisplayString()).setLabel("netBotz-prd-bot-ext-port2-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_id.setReference('NetBotz module ID port 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_id.setDescription('The module ID of the sensor module installed on port 2. Blank string indicates that no module is installed.')
netBotz_prd_bot_ext_port2_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 97), DisplayString()).setLabel("netBotz-prd-bot-ext-port2-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_type.setReference('NetBotz module type port 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port2_module_type.setDescription('The type of sensor module installed on port 2. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
netBotz_prd_bot_ext_port3_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 98), DisplayString()).setLabel("netBotz-prd-bot-ext-port3-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_id.setReference('NetBotz module ID port 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_id.setDescription('The module ID of the sensor module installed on port 3. Blank string indicates that no module is installed.')
netBotz_prd_bot_ext_port3_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 99), DisplayString()).setLabel("netBotz-prd-bot-ext-port3-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_type.setReference('NetBotz module type port 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port3_module_type.setDescription('The type of sensor module installed on port 3. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
netBotz_prd_bot_ext_port4_module_id = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 100), DisplayString()).setLabel("netBotz-prd-bot-ext-port4-module-id").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port4_module_id.setReference('NetBotz module ID port 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port4_module_id.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port4_module_id.setDescription('The module ID of the sensor module installed on port 4. Blank string indicates that no module is installed.')
netBotz_prd_bot_ext_port4_module_type = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 101), DisplayString()).setLabel("netBotz-prd-bot-ext-port4-module-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port4_module_type.setReference('NetBotz module type port 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port4_module_type.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_port4_module_type.setDescription('The type of sensor module installed on port 4. NONE=no module, AMP=AmpDetect module, TEMP=temperature sensor, DRY=dry contact sensor.')
netBotz_prd_bot_amp1_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 102), Integer32()).setLabel("netBotz-prd-bot-amp1-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 1.')
netBotz_prd_bot_amp1_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 103), Integer32()).setLabel("netBotz-prd-bot-amp1-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 1')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 1. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amp2_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 104), Integer32()).setLabel("netBotz-prd-bot-amp2-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 2.')
netBotz_prd_bot_amp2_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 105), Integer32()).setLabel("netBotz-prd-bot-amp2-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 2')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 2. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amp3_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 106), Integer32()).setLabel("netBotz-prd-bot-amp3-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 3.')
netBotz_prd_bot_amp3_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 107), Integer32()).setLabel("netBotz-prd-bot-amp3-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 3')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 3. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amp4_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 108), Integer32()).setLabel("netBotz-prd-bot-amp4-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the AmpDetect on port 4.')
netBotz_prd_bot_amp4_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 109), Integer32()).setLabel("netBotz-prd-bot-amp4-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - 4')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds on the AmpDetect on port 4. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_amptotal_total_amp_seconds = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 110), Integer32()).setLabel("netBotz-prd-bot-amptotal-total-amp-seconds").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds.setReference('NetBotz Total Amp-Seconds - total')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds.setDescription('The accumulated total of amp-seconds on the total of all AmpDetects.')
netBotz_prd_bot_amptotal_total_amp_seconds_since_time = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 111), Integer32()).setLabel("netBotz-prd-bot-amptotal-total-amp-seconds-since-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds_since_time.setReference('NetBotz Total Amp-Seconds reset time - total')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds_since_time.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_amptotal_total_amp_seconds_since_time.setDescription('The UTC time (seconds since 1/1/1970) of the beginning of the accumulated total of amp-seconds for all AmpDetects. Writing a value to this attribute resets the accumulated total amp-seconds and sets this time to the current time.')
netBotz_prd_bot_ext_dry1 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 112), Integer32()).setLabel("netBotz-prd-bot-ext-dry1").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1.setReference('NetBotz Ext Dry 1')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1.setDescription('The current value of the external dry contact sensor on Ext1: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry2 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 113), Integer32()).setLabel("netBotz-prd-bot-ext-dry2").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2.setReference('NetBotz Ext Dry 2')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2.setDescription('The current value of the external dry contact sensor on Ext2: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry3 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 114), Integer32()).setLabel("netBotz-prd-bot-ext-dry3").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3.setReference('NetBotz Ext Dry 3')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3.setDescription('The current value of the external dry contact sensor on Ext3: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry4 = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 115), Integer32()).setLabel("netBotz-prd-bot-ext-dry4").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4.setReference('NetBotz Ext Dry 4')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4.setDescription('The current value of the external dry contact sensor on Ext4: 0=Open, 1=Closed, -1=N/A')
netBotz_prd_bot_ext_dry1_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 116), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_alarm_value.setReference('NetBotz Ext Dry 1 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext1: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry1_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 117), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_enabled.setReference('NetBotz Ext Dry 1 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_enabled.setDescription('External dry contact sensor on Ext1 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry2_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 118), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_alarm_value.setReference('NetBotz Ext Dry 2 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext2: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry2_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 119), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_enabled.setReference('NetBotz Ext Dry 2 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_enabled.setDescription('External dry contact sensor on Ext2 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry3_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 120), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_alarm_value.setReference('NetBotz Ext Dry 3 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext3: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry3_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 121), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_enabled.setReference('NetBotz Ext Dry 3 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_enabled.setDescription('External dry contact sensor on Ext3 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry4_alarm_value = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 122), Integer32()).setLabel("netBotz-prd-bot-ext-dry4-alarm-value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_alarm_value.setReference('NetBotz Ext Dry 4 Alarm Value')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_alarm_value.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_alarm_value.setDescription('The value to generate alarms on for the external dry contact sensor on Ext4: 0=Open, 1=Closed')
netBotz_prd_bot_ext_dry4_enabled = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 123), Integer32()).setLabel("netBotz-prd-bot-ext-dry4-enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_enabled.setReference('NetBotz Ext Dry 4 Alarm Enabled')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_enabled.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_enabled.setDescription('External dry contact sensor on Ext4 alarm enabled(1) or disabled(0).')
netBotz_prd_bot_ext_dry1_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 124), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_label.setReference('NetBotz Ext Dry 1 Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_label.setDescription('The sensor name/label for the dry contact sensor on Ext1')
netBotz_prd_bot_ext_dry1_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 125), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_label.setReference('NetBotz Ext Dry 1 Open Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor on Ext1')
netBotz_prd_bot_ext_dry1_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 126), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_closed_label.setReference('NetBotz Ext Dry 1 Closed Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor on Ext1')
netBotz_prd_bot_ext_dry1_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 127), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_to_close_millis.setReference('NetBotz Ext Dry 1 Open-to-Closed Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext1 must read closed before the state is changed from open to closed.')
netBotz_prd_bot_ext_dry1_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 128), Integer32()).setLabel("netBotz-prd-bot-ext-dry1-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_close_to_open_millis.setReference('NetBotz Ext Dry 1 Closed-to-Open Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext1 must read openbefore the state is changed from closed to open.')
netBotz_prd_bot_ext_dry1_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 129), DisplayString()).setLabel("netBotz-prd-bot-ext-dry1-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_response.setReference('NetBotz Ext Dry 1 Response')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_response.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_response.setDescription('The type of alert response for the dry contact sensor on Ext1: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
netBotz_prd_bot_ext_dry2_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 130), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_label.setReference('NetBotz Ext Dry 2 Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_label.setDescription('The sensor name/label for the dry contact sensor on Ext2')
netBotz_prd_bot_ext_dry2_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 131), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_label.setReference('NetBotz Ext Dry 2 Open Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor on Ext2')
netBotz_prd_bot_ext_dry2_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 132), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_closed_label.setReference('NetBotz Ext Dry 2 Closed Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor on Ext2')
netBotz_prd_bot_ext_dry2_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 133), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_to_close_millis.setReference('NetBotz Ext Dry 2 Open-to-Closed Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext2 must read closed before the state is changed from open to closed.')
netBotz_prd_bot_ext_dry2_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 134), Integer32()).setLabel("netBotz-prd-bot-ext-dry2-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_close_to_open_millis.setReference('NetBotz Ext Dry 2 Closed-to-Open Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext2 must read openbefore the state is changed from closed to open.')
netBotz_prd_bot_ext_dry2_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 135), DisplayString()).setLabel("netBotz-prd-bot-ext-dry2-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_response.setReference('NetBotz Ext Dry 2 Response')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_response.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_response.setDescription('The type of alert response for the dry contact sensor on Ext2: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
netBotz_prd_bot_ext_dry3_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 136), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_label.setReference('NetBotz Ext Dry 3 Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_label.setDescription('The sensor name/label for the dry contact sensor on Ext3')
netBotz_prd_bot_ext_dry3_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 137), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_label.setReference('NetBotz Ext Dry 3 Open Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor on Ext3')
netBotz_prd_bot_ext_dry3_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 138), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_closed_label.setReference('NetBotz Ext Dry 3 Closed Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor on Ext3')
netBotz_prd_bot_ext_dry3_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 139), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_to_close_millis.setReference('NetBotz Ext Dry 3 Open-to-Closed Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext3 must read closed before the state is changed from open to closed.')
netBotz_prd_bot_ext_dry3_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 140), Integer32()).setLabel("netBotz-prd-bot-ext-dry3-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_close_to_open_millis.setReference('NetBotz Ext Dry 3 Closed-to-Open Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext3 must read openbefore the state is changed from closed to open.')
netBotz_prd_bot_ext_dry3_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 141), DisplayString()).setLabel("netBotz-prd-bot-ext-dry3-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_response.setReference('NetBotz Ext Dry 3 Response')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_response.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_response.setDescription('The type of alert response for the dry contact sensor on Ext3: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
netBotz_prd_bot_ext_dry4_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 142), DisplayString()).setLabel("netBotz-prd-bot-ext-dry4-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_label.setReference('NetBotz Ext Dry 4 Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_label.setDescription('The sensor name/label for the dry contact sensor on Ext4')
netBotz_prd_bot_ext_dry4_open_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 143), DisplayString()).setLabel("netBotz-prd-bot-ext-dry4-open-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_open_label.setReference('NetBotz Ext Dry 4 Open Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_open_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_open_label.setDescription('The sensor name/label for the open(0) state for the dry contact sensor on Ext4')
netBotz_prd_bot_ext_dry4_closed_label = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 144), DisplayString()).setLabel("netBotz-prd-bot-ext-dry4-closed-label").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_closed_label.setReference('NetBotz Ext Dry 4 Closed Label')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_closed_label.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_closed_label.setDescription('The sensor name/label for the closed(0) state for the dry contact sensor on Ext4')
netBotz_prd_bot_ext_dry4_open_to_close_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 145), Integer32()).setLabel("netBotz-prd-bot-ext-dry4-open-to-close-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_open_to_close_millis.setReference('NetBotz Ext Dry 4 Open-to-Closed Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_open_to_close_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_open_to_close_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext4 must read closed before the state is changed from open to closed.')
netBotz_prd_bot_ext_dry4_close_to_open_millis = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 146), Integer32()).setLabel("netBotz-prd-bot-ext-dry4-close-to-open-millis").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_close_to_open_millis.setReference('NetBotz Ext Dry 4 Closed-to-Open Millis')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_close_to_open_millis.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_close_to_open_millis.setDescription('The minimum number of milliseconds that the dry contact sensor on Ext4 must read openbefore the state is changed from closed to open.')
netBotz_prd_bot_ext_dry4_response = MibScalar((1, 3, 6, 1, 4, 1, 5528, 30, 10, 147), DisplayString()).setLabel("netBotz-prd-bot-ext-dry4-response").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_response.setReference('NetBotz Ext Dry 4 Response')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_response.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_response.setDescription('The type of alert response for the dry contact sensor on Ext4: ALERT=e-mail with no pictures, CAMERA=e-mail with pictures from camera.')
netBotz_prd_bot_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100)).setLabel("netBotz-prd-bot-traps")
netBotz_prd_bot_temperature_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1)).setLabel("netBotz-prd-bot-temperature-traps")
netBotz_prd_bot_humidity_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2)).setLabel("netBotz-prd-bot-humidity-traps")
netBotz_prd_bot_airflow_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 3)).setLabel("netBotz-prd-bot-airflow-traps")
netBotz_prd_bot_audio_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 4)).setLabel("netBotz-prd-bot-audio-traps")
netBotz_prd_bot_door_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 5)).setLabel("netBotz-prd-bot-door-traps")
netBotz_prd_bot_amp1_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6)).setLabel("netBotz-prd-bot-amp1-traps")
netBotz_prd_bot_amp2_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7)).setLabel("netBotz-prd-bot-amp2-traps")
netBotz_prd_bot_amp3_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8)).setLabel("netBotz-prd-bot-amp3-traps")
netBotz_prd_bot_amp4_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9)).setLabel("netBotz-prd-bot-amp4-traps")
netBotz_prd_bot_amp_total_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10)).setLabel("netBotz-prd-bot-amp-total-traps")
netBotz_prd_bot_ext_temp1_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11)).setLabel("netBotz-prd-bot-ext-temp1-traps")
netBotz_prd_bot_ext_temp2_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12)).setLabel("netBotz-prd-bot-ext-temp2-traps")
netBotz_prd_bot_ext_temp3_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13)).setLabel("netBotz-prd-bot-ext-temp3-traps")
netBotz_prd_bot_ext_temp4_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14)).setLabel("netBotz-prd-bot-ext-temp4-traps")
netBotz_prd_bot_ext_dry1_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 15)).setLabel("netBotz-prd-bot-ext-dry1-traps")
netBotz_prd_bot_ext_dry2_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 16)).setLabel("netBotz-prd-bot-ext-dry2-traps")
netBotz_prd_bot_ext_dry3_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 17)).setLabel("netBotz-prd-bot-ext-dry3-traps")
netBotz_prd_bot_ext_dry4_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 5528, 30, 100, 18)).setLabel("netBotz-prd-bot-ext-dry4-traps")
netBotz_prd_bot_temperature_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1) + (0,1)).setLabel("netBotz-prd-bot-temperature-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_low_trap.setDescription('Netbotz Temperature Low Trap. This trap indicates that the lower limit for temperature has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_low_trap.setReference('NetBotz Temperature Low Trap')
netBotz_prd_bot_temperature_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1) + (0,2)).setLabel("netBotz-prd-bot-temperature-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_high_trap.setDescription('Netbotz Temperature High Trap. This trap indicates that the upper limit for temperature has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_high_trap.setReference('NetBotz Temperature High Trap')
netBotz_prd_bot_temperature_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 1) + (0,3)).setLabel("netBotz-prd-bot-temperature-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_trap_clear.setDescription('Netbotz Temperature Cleared Trap. The trap has been cleared because the temperature value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_temperature_trap_clear.setReference('NetBotz Temperature Cleared Trap')
netBotz_prd_bot_humidity_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2) + (0,1)).setLabel("netBotz-prd-bot-humidity-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_low_trap.setDescription('Netbotz Humidity Low Trap. This trap indicates that the lower limit for humidity has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_low_trap.setReference('NetBotz Humidity Low Trap')
netBotz_prd_bot_humidity_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2) + (0,2)).setLabel("netBotz-prd-bot-humidity-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_high_trap.setDescription('Netbotz Humidity High Trap. This trap indicates that the upper limit for humidity has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_high_trap.setReference('NetBotz Humidity High Trap')
netBotz_prd_bot_humidity_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 2) + (0,3)).setLabel("netBotz-prd-bot-humidity-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_trap_clear.setDescription('Netbotz Humidity Cleared Trap. The trap has been cleared because the humidity value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_humidity_trap_clear.setReference('NetBotz Humidity Cleared Trap')
netBotz_prd_bot_airflow_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 3) + (0,1)).setLabel("netBotz-prd-bot-airflow-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_low_trap.setDescription('Netbotz Airflow Low Trap. This trap indicates that the lower limit for airflow has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_low_trap.setReference('NetBotz Airflow Low Trap')
netBotz_prd_bot_airflow_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 3) + (0,3)).setLabel("netBotz-prd-bot-airflow-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_trap_clear.setDescription('Netbotz Airflow Cleared Trap. The trap has been cleared because the airflow value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_airflow_trap_clear.setReference('NetBotz Airflow Cleared Trap')
netBotz_prd_bot_audio_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 4) + (0,2)).setLabel("netBotz-prd-bot-audio-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_audio_high_trap.setDescription('Netbotz Audio High Trap. This trap indicates that the upper limit for audio has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_high_trap.setReference('NetBotz Audio High Trap')
netBotz_prd_bot_audio_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 4) + (0,3)).setLabel("netBotz-prd-bot-audio-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_audio_trap_clear.setDescription('Netbotz Audio Cleared Trap. The trap has been cleared because the audio value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_audio_trap_clear.setReference('NetBotz Audio Cleared Trap')
netBotz_prd_bot_door_trap_tripped = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 5) + (0,2)).setLabel("netBotz-prd-bot-door-trap-tripped").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_tripped.setDescription('Netbotz Door Sensor Tripped Trap. This trap indicates that the door sensor has been triggered (i.e. opened, if the thresdhold has been set to trip on open, closed if otherwise).')
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_tripped.setReference('NetBotz Door Tripped Trap')
netBotz_prd_bot_door_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 5) + (0,3)).setLabel("netBotz-prd-bot-door-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_clear.setDescription('Netbotz Door Cleared Trap. The trap has been cleared because the door sensor has returned to normal (i.e. been closed, if the threshold has been set to trip on open).')
if mibBuilder.loadTexts: netBotz_prd_bot_door_trap_clear.setReference('NetBotz Door Cleared Trap')
netBotz_prd_bot_amp1_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,1)).setLabel("netBotz-prd-bot-amp1-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_low_trap.setDescription('Netbotz Amp1 Low Trap. This trap indicates that the lower limit for the first amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_low_trap.setReference('NetBotz Amp1 Low Trap')
netBotz_prd_bot_amp1_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,2)).setLabel("netBotz-prd-bot-amp1-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_high_trap.setDescription('Netbotz Amp1 High Trap. This trap indicates that the upper limit for the first amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_high_trap.setReference('NetBotz Amp1 High Trap')
netBotz_prd_bot_amp1_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,3)).setLabel("netBotz-prd-bot-amp1-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_trap_clear.setDescription('Netbotz Amp1 Cleared Trap. The trap has been cleared because the first amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_trap_clear.setReference('NetBotz Amp1 Cleared Trap')
netBotz_prd_bot_amp1_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,6)).setLabel("netBotz-prd-bot-amp1-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_unplugged.setDescription('Netbotz Amp 1 Sensor Unplugged Trap. The sensor for the first AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_unplugged.setReference('NetBotz Amp 1 Unplugged Trap')
netBotz_prd_bot_amp1_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 6) + (0,7)).setLabel("netBotz-prd-bot-amp1-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_replugged.setDescription('Netbotz Amp 1 Sensor Replugged Trap. The sensor for the first AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp1_sensor_replugged.setReference('NetBotz Amp 1 Replugged Trap')
netBotz_prd_bot_amp2_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,1)).setLabel("netBotz-prd-bot-amp2-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_low_trap.setDescription('Netbotz Amp2 Low Trap. This trap indicates that the lower limit for the second amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_low_trap.setReference('NetBotz Amp2 Low Trap')
netBotz_prd_bot_amp2_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,2)).setLabel("netBotz-prd-bot-amp2-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_high_trap.setDescription('Netbotz Amp2 High Trap. This trap indicates that the upper limit for the second amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_high_trap.setReference('NetBotz Amp2 High Trap')
netBotz_prd_bot_amp2_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,3)).setLabel("netBotz-prd-bot-amp2-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_trap_clear.setDescription('Netbotz Amp2 Cleared Trap. The trap has been cleared because the second amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_trap_clear.setReference('NetBotz Amp2 Cleared Trap')
netBotz_prd_bot_amp2_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,6)).setLabel("netBotz-prd-bot-amp2-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_unplugged.setDescription('Netbotz Amp 2 Sensor Unplugged Trap. The sensor for the second AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_unplugged.setReference('NetBotz Amp 2 Unplugged Trap')
netBotz_prd_bot_amp2_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 7) + (0,7)).setLabel("netBotz-prd-bot-amp2-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_replugged.setDescription('Netbotz Amp 2 Sensor Replugged Trap. The sensor for the second AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp2_sensor_replugged.setReference('NetBotz Amp 2 Replugged Trap')
netBotz_prd_bot_amp3_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,1)).setLabel("netBotz-prd-bot-amp3-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_low_trap.setDescription('Netbotz Amp3 Low Trap. This trap indicates that the lower limit for the third amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_low_trap.setReference('NetBotz Amp3 Low Trap')
netBotz_prd_bot_amp3_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,2)).setLabel("netBotz-prd-bot-amp3-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_high_trap.setDescription('Netbotz Amp3 High Trap. This trap indicates that the upper limit for the third amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_high_trap.setReference('NetBotz Amp3 High Trap')
netBotz_prd_bot_amp3_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,3)).setLabel("netBotz-prd-bot-amp3-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_trap_clear.setDescription('Netbotz Amp3 Cleared Trap. The trap has been cleared because the third amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_trap_clear.setReference('NetBotz Amp3 Cleared Trap')
netBotz_prd_bot_amp3_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,6)).setLabel("netBotz-prd-bot-amp3-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_unplugged.setDescription('Netbotz Amp 3 Sensor Unplugged Trap. The sensor for the third AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_unplugged.setReference('NetBotz Amp 3 Unplugged Trap')
netBotz_prd_bot_amp3_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 8) + (0,7)).setLabel("netBotz-prd-bot-amp3-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_replugged.setDescription('Netbotz Amp 3 Sensor Replugged Trap. The sensor for the third AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp3_sensor_replugged.setReference('NetBotz Amp 3 Replugged Trap')
netBotz_prd_bot_amp4_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,1)).setLabel("netBotz-prd-bot-amp4-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_low_trap.setDescription('Netbotz Amp4 Low Trap. This trap indicates that the lower limit for the fourth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_low_trap.setReference('NetBotz Amp4 Low Trap')
netBotz_prd_bot_amp4_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,2)).setLabel("netBotz-prd-bot-amp4-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_high_trap.setDescription('Netbotz Amp4 High Trap. This trap indicates that the upper limit for the fourth amp detect has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_high_trap.setReference('NetBotz Amp4 High Trap')
netBotz_prd_bot_amp4_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,3)).setLabel("netBotz-prd-bot-amp4-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_trap_clear.setDescription('Netbotz Amp4 Cleared Trap. The trap has been cleared because the fourth amp detect value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_trap_clear.setReference('NetBotz Amp4 Cleared Trap')
netBotz_prd_bot_amp4_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,6)).setLabel("netBotz-prd-bot-amp4-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_unplugged.setDescription('Netbotz Amp 4 Sensor Unplugged Trap. The sensor for the fourth AmpDetect is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_unplugged.setReference('NetBotz Amp 4 Unplugged Trap')
netBotz_prd_bot_amp4_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 9) + (0,7)).setLabel("netBotz-prd-bot-amp4-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_replugged.setDescription('Netbotz Amp 4 Sensor Replugged Trap. The sensor for the fourth AmpDetect was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp4_sensor_replugged.setReference('NetBotz Amp 4 Replugged Trap')
netBotz_prd_bot_amp_total_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10) + (0,1)).setLabel("netBotz-prd-bot-amp-total-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_low_trap.setDescription('Netbotz Total Amps Low Trap. This trap indicates that the lower limit for the total amperage has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_low_trap.setReference('NetBotz Total Amps Low Trap')
netBotz_prd_bot_amp_total_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10) + (0,2)).setLabel("netBotz-prd-bot-amp-total-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_high_trap.setDescription('Netbotz Total Amps High Trap. This trap indicates that the upper limit for the total amperage has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_high_trap.setReference('NetBotz Total Amps High Trap')
netBotz_prd_bot_amp_total_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 10) + (0,3)).setLabel("netBotz-prd-bot-amp-total-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_trap_clear.setDescription('Netbotz Total Amps Cleared Trap. The trap has been cleared because the total amperage value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_amp_total_trap_clear.setReference('NetBotz Total Amps Cleared Trap')
netBotz_prd_bot_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,1)).setLabel("netBotz-prd-bot-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_low_trap.setDescription('Netbotz Low Trap. This trap indicates that a lower limit has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_low_trap.setReference('NetBotz Low Trap')
netBotz_prd_bot_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,2)).setLabel("netBotz-prd-bot-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_high_trap.setDescription('Netbotz High Trap. This trap indicates that an upper limit has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_high_trap.setReference('NetBotz High Trap')
netBotz_prd_bot_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,3)).setLabel("netBotz-prd-bot-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_trap_clear.setDescription('Netbotz Cleared Trap. The trap has been cleared because the value has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_trap_clear.setReference('NetBotz Cleared Trap')
netBotz_prd_bot_offline_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,4)).setLabel("netBotz-prd-bot-offline-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_offline_trap.setDescription('Netbotz Device Offline Trap. This trap indicates that a device or function has been determined to be offline.')
if mibBuilder.loadTexts: netBotz_prd_bot_offline_trap.setReference('NetBotz Offline Trap')
netBotz_prd_bot_online_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 10) + (0,5)).setLabel("netBotz-prd-bot-online-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_online_trap.setDescription('Netbotz Device Online Trap. This trap indicates that a device or function has been determined to be online.')
if mibBuilder.loadTexts: netBotz_prd_bot_online_trap.setReference('NetBotz Online Trap')
netBotz_prd_bot_ext_temp1_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,1)).setLabel("netBotz-prd-bot-ext-temp1-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_low_trap.setDescription('Netbotz External Temperature 1 Low Trap. This trap indicates that the lower limit for external temperature probe on port 1 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_low_trap.setReference('NetBotz Ext Temperature 1 Low Trap')
netBotz_prd_bot_ext_temp1_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,2)).setLabel("netBotz-prd-bot-ext-temp1-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_high_trap.setDescription('Netbotz External Temperature 1 High Trap. This trap indicates that the upper limit for external temperature probe on port 1 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_high_trap.setReference('NetBotz Ext Temperature 1 High Trap')
netBotz_prd_bot_ext_temp1_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,3)).setLabel("netBotz-prd-bot-ext-temp1-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_trap_clear.setDescription('Netbotz External Temperature 1 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 1 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_trap_clear.setReference('NetBotz Ext Temperature 1 Cleared Trap')
netBotz_prd_bot_ext_temp1_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,6)).setLabel("netBotz-prd-bot-ext-temp1-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_unplugged.setDescription('Netbotz External Temperature 1 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_unplugged.setReference('NetBotz Ext Temperature 1 Unplugged Trap')
netBotz_prd_bot_ext_temp1_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 11) + (0,7)).setLabel("netBotz-prd-bot-ext-temp1-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_replugged.setDescription('Netbotz External Temperature 1 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp1_sensor_replugged.setReference('NetBotz Ext Temperature 1 Replugged Trap')
netBotz_prd_bot_ext_temp2_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,1)).setLabel("netBotz-prd-bot-ext-temp2-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_low_trap.setDescription('Netbotz External Temperature 2 Low Trap. This trap indicates that the lower limit for external temperature probe on port 2 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_low_trap.setReference('NetBotz Ext Temperature 2 Low Trap')
netBotz_prd_bot_ext_temp2_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,2)).setLabel("netBotz-prd-bot-ext-temp2-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_high_trap.setDescription('Netbotz External Temperature 2 High Trap. This trap indicates that the upper limit for external temperature probe on port 2 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_high_trap.setReference('NetBotz Ext Temperature 2 High Trap')
netBotz_prd_bot_ext_temp2_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,3)).setLabel("netBotz-prd-bot-ext-temp2-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_trap_clear.setDescription('Netbotz External Temperature 2 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 2 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_trap_clear.setReference('NetBotz Ext Temperature 2 Cleared Trap')
netBotz_prd_bot_ext_temp2_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,6)).setLabel("netBotz-prd-bot-ext-temp2-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_unplugged.setDescription('Netbotz External Temperature 2 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_unplugged.setReference('NetBotz Ext Temperature 2 Unplugged Trap')
netBotz_prd_bot_ext_temp2_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 12) + (0,7)).setLabel("netBotz-prd-bot-ext-temp2-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_replugged.setDescription('Netbotz External Temperature 2 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp2_sensor_replugged.setReference('NetBotz Ext Temperature 2 Replugged Trap')
netBotz_prd_bot_ext_temp3_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,1)).setLabel("netBotz-prd-bot-ext-temp3-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_low_trap.setDescription('Netbotz External Temperature 3 Low Trap. This trap indicates that the lower limit for external temperature probe on port 3 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_low_trap.setReference('NetBotz Ext Temperature 3 Low Trap')
netBotz_prd_bot_ext_temp3_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,2)).setLabel("netBotz-prd-bot-ext-temp3-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_high_trap.setDescription('Netbotz External Temperature 3 High Trap. This trap indicates that the upper limit for external temperature probe on port 3 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_high_trap.setReference('NetBotz Ext Temperature 3 High Trap')
netBotz_prd_bot_ext_temp3_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,3)).setLabel("netBotz-prd-bot-ext-temp3-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_trap_clear.setDescription('Netbotz External Temperature 3 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 3 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_trap_clear.setReference('NetBotz Ext Temperature 3 Cleared Trap')
netBotz_prd_bot_ext_temp3_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,6)).setLabel("netBotz-prd-bot-ext-temp3-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_unplugged.setDescription('Netbotz External Temperature 3 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_unplugged.setReference('NetBotz Ext Temperature 3 Unplugged Trap')
netBotz_prd_bot_ext_temp3_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 13) + (0,7)).setLabel("netBotz-prd-bot-ext-temp3-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_replugged.setDescription('Netbotz External Temperature 3 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp3_sensor_replugged.setReference('NetBotz Ext Temperature 3 Replugged Trap')
netBotz_prd_bot_ext_temp4_low_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,1)).setLabel("netBotz-prd-bot-ext-temp4-low-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_low_trap.setDescription('Netbotz External Temperature 4 Low Trap. This trap indicates that the lower limit for external temperature probe on port 4 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_low_trap.setReference('NetBotz Ext Temperature 4 Low Trap')
netBotz_prd_bot_ext_temp4_high_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,2)).setLabel("netBotz-prd-bot-ext-temp4-high-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_high_trap.setDescription('Netbotz External Temperature 4 High Trap. This trap indicates that the upper limit for external temperature probe on port 4 has been exceeded.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_high_trap.setReference('NetBotz Ext Temperature 4 High Trap')
netBotz_prd_bot_ext_temp4_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,3)).setLabel("netBotz-prd-bot-ext-temp4-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_trap_clear.setDescription('Netbotz External Temperature 4 Cleared Trap. The trap has been cleared because the temperature value for the temperature probe on port 4 has returned to acceptable limits.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_trap_clear.setReference('NetBotz Ext Temperature 4 Cleared Trap')
netBotz_prd_bot_ext_temp4_sensor_unplugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,6)).setLabel("netBotz-prd-bot-ext-temp4-sensor-unplugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_unplugged.setDescription('Netbotz External Temperature 4 Sensor Unplugged Trap. The sensor is unplugged or malfunctioning.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_unplugged.setReference('NetBotz Ext Temperature 4 Unplugged Trap')
netBotz_prd_bot_ext_temp4_sensor_replugged = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 14) + (0,7)).setLabel("netBotz-prd-bot-ext-temp4-sensor-replugged").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_replugged.setDescription('Netbotz External Temperature 4 Sensor Replugged Trap. The sensor was unplugged, but has been reconnected.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_temp4_sensor_replugged.setReference('NetBotz Ext Temperature 4 Replugged Trap')
netBotz_prd_bot_ext_dry1_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 15) + (0,2)).setLabel("netBotz-prd-bot-ext-dry1-triggered-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_triggered_trap.setDescription('Netbotz External Dry Contact 1 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext1 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_triggered_trap.setReference('NetBotz Ext Dry 1 Triggered Trap')
netBotz_prd_bot_ext_dry1_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 15) + (0,3)).setLabel("netBotz-prd-bot-ext-dry1-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_trap_clear.setDescription('Netbotz External Dry Contact 1 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext1 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry1_trap_clear.setReference('NetBotz Ext Dry 1 Cleared Trap')
netBotz_prd_bot_ext_dry2_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 16) + (0,2)).setLabel("netBotz-prd-bot-ext-dry2-triggered-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_triggered_trap.setDescription('Netbotz External Dry Contact 2 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext2 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_triggered_trap.setReference('NetBotz Ext Dry 2 Triggered Trap')
netBotz_prd_bot_ext_dry2_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 16) + (0,3)).setLabel("netBotz-prd-bot-ext-dry2-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_trap_clear.setDescription('Netbotz External Dry Contact 2 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext2 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry2_trap_clear.setReference('NetBotz Ext Dry 2 Cleared Trap')
netBotz_prd_bot_ext_dry3_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 17) + (0,2)).setLabel("netBotz-prd-bot-ext-dry3-triggered-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_triggered_trap.setDescription('Netbotz External Dry Contact 3 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext3 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_triggered_trap.setReference('NetBotz Ext Dry 3 Triggered Trap')
netBotz_prd_bot_ext_dry3_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 17) + (0,3)).setLabel("netBotz-prd-bot-ext-dry3-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_trap_clear.setDescription('Netbotz External Dry Contact 3 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext3 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry3_trap_clear.setReference('NetBotz Ext Dry 3 Cleared Trap')
netBotz_prd_bot_ext_dry4_triggered_trap = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 18) + (0,2)).setLabel("netBotz-prd-bot-ext-dry4-triggered-trap").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_triggered_trap.setDescription('Netbotz External Dry Contact 4 Triggered Trap. This trap indicates that the state of the dry contact sensor on Ext4 matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_triggered_trap.setReference('NetBotz Ext Dry 4 Triggered Trap')
netBotz_prd_bot_ext_dry4_trap_clear = NotificationType((1, 3, 6, 1, 4, 1, 5528, 30, 100, 18) + (0,3)).setLabel("netBotz-prd-bot-ext-dry4-trap-clear").setObjects(("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_index"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_address"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_oid"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_value"), ("NETBOTZ-PRD-BOT-MIB", "netBotz_prd_bot_trap_date"), ("NETBOTZ-DEVICE-MIB", "netBotz_ismetric"))
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_trap_clear.setDescription('Netbotz External Dry Contact 4 Cleared Trap. The trap has been cleared because the state of the dry contact sensor on Ext4 no longer matches the alarm value.')
if mibBuilder.loadTexts: netBotz_prd_bot_ext_dry4_trap_clear.setReference('NetBotz Ext Dry 4 Cleared Trap')
mibBuilder.exportSymbols("NETBOTZ-PRD-BOT-MIB", netBotz_prd_bot_ext_dry4_label=netBotz_prd_bot_ext_dry4_label, netBotz_prd_bot_ext_temp1_max_range=netBotz_prd_bot_ext_temp1_max_range, netBotz_prd_bot_ext_temp2_high_trap=netBotz_prd_bot_ext_temp2_high_trap, netBotz_prd_bot_ext_port2_module_id=netBotz_prd_bot_ext_port2_module_id, netBotz_prd_bot_ext_dry3_closed_label=netBotz_prd_bot_ext_dry3_closed_label, netBotz_prd_bot_amp1_high_trap=netBotz_prd_bot_amp1_high_trap, netBotz_prd_bot_ext_temp1_min_range=netBotz_prd_bot_ext_temp1_min_range, netBotz_prd_bot_ext_temp2_uV_at_0_degreeC=netBotz_prd_bot_ext_temp2_uV_at_0_degreeC, netBotz_prd_bot_ext_dry4_response=netBotz_prd_bot_ext_dry4_response, netBotz_prd_bot_amps_total_enabled=netBotz_prd_bot_amps_total_enabled, netBotz_prd_bot_amps_total_min=netBotz_prd_bot_amps_total_min, netBotz_prd_bot_ext_temp3_enabled=netBotz_prd_bot_ext_temp3_enabled, netBotz_prd_bot_ext_dry2_open_label=netBotz_prd_bot_ext_dry2_open_label, netBotz_prd_bot_ext_dry4_traps=netBotz_prd_bot_ext_dry4_traps, netBotz_prd_bot_ext_dry2_label=netBotz_prd_bot_ext_dry2_label, netBotz_prd_bot_amp2_high_trap=netBotz_prd_bot_amp2_high_trap, netBotz_prd_bot_ext_dry1_enabled=netBotz_prd_bot_ext_dry1_enabled, netBotz_prd_bot_doorajar=netBotz_prd_bot_doorajar, netBotz_prd_bot_ext_temp4_max=netBotz_prd_bot_ext_temp4_max, netBotz_prd_bot_amp3_trap_clear=netBotz_prd_bot_amp3_trap_clear, netBotz_prd_bot_amp1_trap_clear=netBotz_prd_bot_amp1_trap_clear, netBotz_prd_bot_airflow=netBotz_prd_bot_airflow, netBotz_prd_bot_amps2_enabled=netBotz_prd_bot_amps2_enabled, netBotz_prd_bot_ext_dry3_response=netBotz_prd_bot_ext_dry3_response, netBotz_prd_bot_amp3_total_amp_seconds=netBotz_prd_bot_amp3_total_amp_seconds, netBotz_prd_bot_amps1_enabled=netBotz_prd_bot_amps1_enabled, netBotz_prd_bot_humidity_max=netBotz_prd_bot_humidity_max, netBotz_prd_bot_amp2_sensor_replugged=netBotz_prd_bot_amp2_sensor_replugged, netBotz_prd_bot_refresh=netBotz_prd_bot_refresh, netBotz_prd_bot_ext_dry3_trap_clear=netBotz_prd_bot_ext_dry3_trap_clear, netBotz_prd_bot_ext_dry2_response=netBotz_prd_bot_ext_dry2_response, netBotz_prd_bot_amp4_sensor_unplugged=netBotz_prd_bot_amp4_sensor_unplugged, netBotz_prd_bot_trap_clear=netBotz_prd_bot_trap_clear, netBotz_prd_bot_amps3=netBotz_prd_bot_amps3, netBotz_prd_bot_ext_temp1_sensor_replugged=netBotz_prd_bot_ext_temp1_sensor_replugged, netBotz_prd_bot_airflow_low_trap=netBotz_prd_bot_airflow_low_trap, netBotz_prd_bot_ext_dry4_enabled=netBotz_prd_bot_ext_dry4_enabled, netBotz_prd_bot_ext_dry1_closed_label=netBotz_prd_bot_ext_dry1_closed_label, netBotz_prd_bot_ext_temp1_traps=netBotz_prd_bot_ext_temp1_traps, netBotz_prd_bot_ext_dry4=netBotz_prd_bot_ext_dry4, netBotz_prd_bot_amps_total=netBotz_prd_bot_amps_total, netBotz_prd_bot_door_traps=netBotz_prd_bot_door_traps, netBotz_prd_bot_humidity_min=netBotz_prd_bot_humidity_min, netBotz_prd_bot_audio_secs=netBotz_prd_bot_audio_secs, netBotz_prd_bot_ext_temp2_min_range=netBotz_prd_bot_ext_temp2_min_range, netBotz_prd_bot_ext_dry1_alarm_value=netBotz_prd_bot_ext_dry1_alarm_value, netBotz_prd_bot_ext_dry2_open_to_close_millis=netBotz_prd_bot_ext_dry2_open_to_close_millis, netBotz_prd_bot_ext_temp1_uV_at_0_degreeC=netBotz_prd_bot_ext_temp1_uV_at_0_degreeC, netBotz_prd_bot_ext_dry3_close_to_open_millis=netBotz_prd_bot_ext_dry3_close_to_open_millis, netBotz_prd_bot_ext_temp4_traps=netBotz_prd_bot_ext_temp4_traps, netBotz_prd_bot_amps2_max=netBotz_prd_bot_amps2_max, netBotz_prd_bot_amps4_max_range=netBotz_prd_bot_amps4_max_range, netBotz_prd_bot_ext_temp4=netBotz_prd_bot_ext_temp4, netBotz_prd_bot_ext_temp4_uV_per_degreeC=netBotz_prd_bot_ext_temp4_uV_per_degreeC, netBotz_prd_bot_ext_dry1_close_to_open_millis=netBotz_prd_bot_ext_dry1_close_to_open_millis, netBotz_prd_bot_amp2_sensor_unplugged=netBotz_prd_bot_amp2_sensor_unplugged, netBotz_prd_bot_temp_enabled=netBotz_prd_bot_temp_enabled, netBotz_prd_bot_ext_temp1_trap_clear=netBotz_prd_bot_ext_temp1_trap_clear, netBotz_prd_bot_ext_temp1=netBotz_prd_bot_ext_temp1, netBotz_prd_bot_ext_temp4_trap_clear=netBotz_prd_bot_ext_temp4_trap_clear, netBotz_prd_bot_doorpic_count=netBotz_prd_bot_doorpic_count, netBotz_prd_bot_amp4_high_trap=netBotz_prd_bot_amp4_high_trap, netBotz_prd_bot_ext_temp4_max_range=netBotz_prd_bot_ext_temp4_max_range, netBotz_prd_bot_ext_dry2_trap_clear=netBotz_prd_bot_ext_dry2_trap_clear, netBotz_prd_bot_ext_port2_module_type=netBotz_prd_bot_ext_port2_module_type, netBotz_prd_bot_humidity_low_trap=netBotz_prd_bot_humidity_low_trap, netBotz_prd_bot_trap_address=netBotz_prd_bot_trap_address, netBotz_prd_bot_traps=netBotz_prd_bot_traps, netBotz_prd_bot_temp=netBotz_prd_bot_temp, netBotz_prd_bot_amps4_uV_per_10mA=netBotz_prd_bot_amps4_uV_per_10mA, netBotz_prd_bot_ext_temp3_trap_clear=netBotz_prd_bot_ext_temp3_trap_clear, netBotz_prd_bot_airflow_level=netBotz_prd_bot_airflow_level, netBotz_prd_bot_ext_temp4_low_trap=netBotz_prd_bot_ext_temp4_low_trap, netBotz_prd_bot_trap_oid=netBotz_prd_bot_trap_oid, netBotz_prd_bot_ext_dry3_open_label=netBotz_prd_bot_ext_dry3_open_label, netBotz_prd_bot_audio_high_trap=netBotz_prd_bot_audio_high_trap, netBotz_prd_bot_amp4_total_amp_seconds=netBotz_prd_bot_amp4_total_amp_seconds, netBotz_prd_bot_ext_temp4_min_range=netBotz_prd_bot_ext_temp4_min_range, netBotz_prd_bot_ext_temp4_high_trap=netBotz_prd_bot_ext_temp4_high_trap, netBotz_prd_bot_ext_dry2_triggered_trap=netBotz_prd_bot_ext_dry2_triggered_trap, netBotz_prd_bot_amp_total_low_trap=netBotz_prd_bot_amp_total_low_trap, netBotz_prd_bot_temp_min=netBotz_prd_bot_temp_min, netBotz_prd_bot_ext_temp2_traps=netBotz_prd_bot_ext_temp2_traps, netBotz_prd_bot_amps1=netBotz_prd_bot_amps1, netBotz_prd_bot_amp3_low_trap=netBotz_prd_bot_amp3_low_trap, netBotz_prd_bot_ext_temp3_max=netBotz_prd_bot_ext_temp3_max, netBotz_prd_bot_ext_dry4_trap_clear=netBotz_prd_bot_ext_dry4_trap_clear, netBotz_prd_bot_amps3_max=netBotz_prd_bot_amps3_max, netBotz_prd_bot_ext_temp3=netBotz_prd_bot_ext_temp3, netBotz_prd_bot_trap_value=netBotz_prd_bot_trap_value, netBotz_prd_bot_amp3_traps=netBotz_prd_bot_amp3_traps, netBotz_prd_bot_amps3_max_range=netBotz_prd_bot_amps3_max_range, netBotz_prd_bot_ext_dry1_response=netBotz_prd_bot_ext_dry1_response, netBotz_prd_bot_ext_dry2_traps=netBotz_prd_bot_ext_dry2_traps, netBotz_prd_bot_amp1_sensor_replugged=netBotz_prd_bot_amp1_sensor_replugged, netBotz_prd_bot_ext_temp1_enabled=netBotz_prd_bot_ext_temp1_enabled, netBotz_prd_bot_ext_temp1_uV_per_degreeC=netBotz_prd_bot_ext_temp1_uV_per_degreeC, netBotz_prd_bot_ext_port3_module_type=netBotz_prd_bot_ext_port3_module_type, netBotz_prd_bot_ext_dry1_open_to_close_millis=netBotz_prd_bot_ext_dry1_open_to_close_millis, netBotz_prd_bot_temperature_trap_clear=netBotz_prd_bot_temperature_trap_clear, netBotz_prd_bot_high_trap=netBotz_prd_bot_high_trap, netBotz_prd_bot_ext_dry1_trap_clear=netBotz_prd_bot_ext_dry1_trap_clear, netBotz_prd_bot_amptotal_total_amp_seconds_since_time=netBotz_prd_bot_amptotal_total_amp_seconds_since_time, netBotz_prd_bot_amp1_total_amp_seconds=netBotz_prd_bot_amp1_total_amp_seconds, netBotz_prd_bot_low_trap=netBotz_prd_bot_low_trap, netBotz_prd_bot_amp1_traps=netBotz_prd_bot_amp1_traps, netBotz_prd_bot_ext_dry2_close_to_open_millis=netBotz_prd_bot_ext_dry2_close_to_open_millis, netBotz_prd_bot_amp_total_high_trap=netBotz_prd_bot_amp_total_high_trap, netBotz_prd_bot_ext_temp4_sensor_unplugged=netBotz_prd_bot_ext_temp4_sensor_unplugged, netBotz_prd_bot_ext_dry3_traps=netBotz_prd_bot_ext_dry3_traps, netBotz_prd_bot_amps3_enabled=netBotz_prd_bot_amps3_enabled, netBotz_prd_bot_amps3_uV_per_mA=netBotz_prd_bot_amps3_uV_per_mA, netBotz_prd_bot_amptotal_total_amp_seconds=netBotz_prd_bot_amptotal_total_amp_seconds, netBotz_prd_bot_amps2_min=netBotz_prd_bot_amps2_min, netBotz_prd_bot_ext_temp2_max_range=netBotz_prd_bot_ext_temp2_max_range, netBotz_prd_bot_amp1_low_trap=netBotz_prd_bot_amp1_low_trap, netBotz_prd_bot_ext_temp3_sensor_replugged=netBotz_prd_bot_ext_temp3_sensor_replugged, netBotz_prd_bot_ext_port4_module_type=netBotz_prd_bot_ext_port4_module_type, netBotz_prd_bot_humidity=netBotz_prd_bot_humidity, netBotz_prd_bot_amps4_min=netBotz_prd_bot_amps4_min, netBotz_prd_bot_amps1_max=netBotz_prd_bot_amps1_max, netBotz_prd_bot_ext_temp4_enabled=netBotz_prd_bot_ext_temp4_enabled, netBotz_prd_bot_amp2_total_amp_seconds_since_time=netBotz_prd_bot_amp2_total_amp_seconds_since_time, netBotz_prd_bot_ext_dry2_alarm_value=netBotz_prd_bot_ext_dry2_alarm_value, netBotz_prd_bot_ext_temp2_max=netBotz_prd_bot_ext_temp2_max, netBotz_prd_bot_trap_index=netBotz_prd_bot_trap_index, netBotz_prd_bot_ext_temp1_max=netBotz_prd_bot_ext_temp1_max, netBotz_prd_bot_audio_enabled=netBotz_prd_bot_audio_enabled, netBotz_prd_bot_ext_temp3_sensor_unplugged=netBotz_prd_bot_ext_temp3_sensor_unplugged, netBotz_prd_bot_amp2_total_amp_seconds=netBotz_prd_bot_amp2_total_amp_seconds, netBotz_prd_bot_temp_max=netBotz_prd_bot_temp_max, netBotz_prd_bot_ext_port1_module_type=netBotz_prd_bot_ext_port1_module_type, netBotz_prd_bot_ext_dry3_open_to_close_millis=netBotz_prd_bot_ext_dry3_open_to_close_millis, netBotz_prd_bot_ext_temp2=netBotz_prd_bot_ext_temp2, netBotz_prd_bot_ext_temp2_trap_clear=netBotz_prd_bot_ext_temp2_trap_clear, netBotz_prd_bot_ext_temp3_min=netBotz_prd_bot_ext_temp3_min, netBotz_prd_bot_amp3_sensor_unplugged=netBotz_prd_bot_amp3_sensor_unplugged, netBotz_prd_bot_trap_date=netBotz_prd_bot_trap_date, netBotz_prd_bot_amps3_min=netBotz_prd_bot_amps3_min, netBotz_prd_bot_ext_dry4_closed_label=netBotz_prd_bot_ext_dry4_closed_label, netBotz_prd_bot_amps_total_max=netBotz_prd_bot_amps_total_max, netBotz_prd_bot_amp1_sensor_unplugged=netBotz_prd_bot_amp1_sensor_unplugged, netBotz_prd_bot_amp2_trap_clear=netBotz_prd_bot_amp2_trap_clear, netBotz_prd_bot_ext_temp1_high_trap=netBotz_prd_bot_ext_temp1_high_trap, netBotz_prd_bot_amp2_traps=netBotz_prd_bot_amp2_traps, netBotz_prd_bot_ext_dry2_enabled=netBotz_prd_bot_ext_dry2_enabled, netBotz_prd_bot_amp4_traps=netBotz_prd_bot_amp4_traps, netBotz_prd_bot_ext_temp4_sensor_replugged=netBotz_prd_bot_ext_temp4_sensor_replugged, netBotz_prd_bot_ext_dry4_open_to_close_millis=netBotz_prd_bot_ext_dry4_open_to_close_millis, netBotz_prd_bot_air_enabled=netBotz_prd_bot_air_enabled, netBotz_prd_bot_amps_total_support_enabled=netBotz_prd_bot_amps_total_support_enabled, netBotz_prd_bot_ext_dry2=netBotz_prd_bot_ext_dry2, netBotz_prd_bot_amps2_max_range=netBotz_prd_bot_amps2_max_range, netBotz_prd_bot_airflow_traps=netBotz_prd_bot_airflow_traps, netBotz_prd_bot_ext_temp1_sensor_unplugged=netBotz_prd_bot_ext_temp1_sensor_unplugged, netBotz_prd_bot_amp_total_trap_clear=netBotz_prd_bot_amp_total_trap_clear, netBotz_prd_bot_airflow_trap_clear=netBotz_prd_bot_airflow_trap_clear, netBotz_prd_bot_temperature_traps=netBotz_prd_bot_temperature_traps, netBotz_prd_bot_ext_port1_module_id=netBotz_prd_bot_ext_port1_module_id, netBotz_prd_bot_ext_dry4_alarm_value=netBotz_prd_bot_ext_dry4_alarm_value, netBotz_prd_bot_online_trap=netBotz_prd_bot_online_trap, netBotz_prd_bot_doorpic_delay=netBotz_prd_bot_doorpic_delay, netBotz_prd_bot_ext_temp1_min=netBotz_prd_bot_ext_temp1_min, netBotz_prd_bot_ext_temp3_uV_at_0_degreeC=netBotz_prd_bot_ext_temp3_uV_at_0_degreeC, netBotz_prd_bot_ext_dry4_close_to_open_millis=netBotz_prd_bot_ext_dry4_close_to_open_millis, netBotz_prd_bot_amp3_sensor_replugged=netBotz_prd_bot_amp3_sensor_replugged, netBotz_prd_bot_amps4=netBotz_prd_bot_amps4, netBotz_prd_bot_ext_temp4_uV_at_0_degreeC=netBotz_prd_bot_ext_temp4_uV_at_0_degreeC, netBotz_prd_bot_ext_dry1_open_label=netBotz_prd_bot_ext_dry1_open_label, netBotz_prd_bot_ext_temp1_low_trap=netBotz_prd_bot_ext_temp1_low_trap, netBotz_prd_bot_ext_port4_module_id=netBotz_prd_bot_ext_port4_module_id, netBotz_prd_bot_temperature_high_trap=netBotz_prd_bot_temperature_high_trap, netBotz_prd_bot_airflow_mins=netBotz_prd_bot_airflow_mins, netBotz_prd_bot_ext_dry2_closed_label=netBotz_prd_bot_ext_dry2_closed_label, netBotz_prd_bot_audio_trap_clear=netBotz_prd_bot_audio_trap_clear, netBotz_prd_bot_amp3_total_amp_seconds_since_time=netBotz_prd_bot_amp3_total_amp_seconds_since_time, netBotz_prd_bot_ext_dry1_triggered_trap=netBotz_prd_bot_ext_dry1_triggered_trap, netBotz_prd_bot_ext_temp3_low_trap=netBotz_prd_bot_ext_temp3_low_trap, netBotz_prd_bot_ext_temp3_min_range=netBotz_prd_bot_ext_temp3_min_range, netBotz_prd_bot_amp_total_traps=netBotz_prd_bot_amp_total_traps, netBotz_prd_bot_ext_temp2_sensor_unplugged=netBotz_prd_bot_ext_temp2_sensor_unplugged, netBotz_prd_bot_amp2_low_trap=netBotz_prd_bot_amp2_low_trap, netBotz_prd_bot_ext_dry1_traps=netBotz_prd_bot_ext_dry1_traps, netBotz_prd_bot_temperature_low_trap=netBotz_prd_bot_temperature_low_trap, netBotz_prd_bot_amps2_uV_per_10mA=netBotz_prd_bot_amps2_uV_per_10mA, netBotz_prd_bot_ext_dry3_alarm_value=netBotz_prd_bot_ext_dry3_alarm_value, netBotz_prd_bot_audio_level=netBotz_prd_bot_audio_level, netBotz_prd_bot_ext_dry1=netBotz_prd_bot_ext_dry1, netBotz_prd_bot_amp4_low_trap=netBotz_prd_bot_amp4_low_trap, netBotz_prd_bot_ext_dry3_label=netBotz_prd_bot_ext_dry3_label, netBotz_prd_bot_ext_temp4_min=netBotz_prd_bot_ext_temp4_min, netBotz_prd_bot_ext_temp3_high_trap=netBotz_prd_bot_ext_temp3_high_trap, netBotz_prd_bot_offline_trap=netBotz_prd_bot_offline_trap, netBotz_prd_bot_ext_temp2_low_trap=netBotz_prd_bot_ext_temp2_low_trap, netBotz_prd_bot_ext_temp3_max_range=netBotz_prd_bot_ext_temp3_max_range, netBotz_prd_bot_ext_temp3_uV_per_degreeC=netBotz_prd_bot_ext_temp3_uV_per_degreeC, netBotz_prd_bot_audio_traps=netBotz_prd_bot_audio_traps, netBotz_prd_bot_door_trap_tripped=netBotz_prd_bot_door_trap_tripped, netBotz_prd_bot_ext_dry3_triggered_trap=netBotz_prd_bot_ext_dry3_triggered_trap, netBotz_prd_bot_ext_dry3=netBotz_prd_bot_ext_dry3, netBotz_prd_bot_amp4_trap_clear=netBotz_prd_bot_amp4_trap_clear, netBotz_prd_bot_ext_dry3_enabled=netBotz_prd_bot_ext_dry3_enabled, netBotz_prd_bot_humidity_trap_clear=netBotz_prd_bot_humidity_trap_clear, netBotz_prd_bot_switch_state=netBotz_prd_bot_switch_state, netBotz_prd_bot_amps1_uV_per_10mA=netBotz_prd_bot_amps1_uV_per_10mA, netBotz_prd_bot_ext_temp2_sensor_replugged=netBotz_prd_bot_ext_temp2_sensor_replugged, netBotz_prd_bot_amp3_high_trap=netBotz_prd_bot_amp3_high_trap, netBotz_prd_bot_ext_dry4_triggered_trap=netBotz_prd_bot_ext_dry4_triggered_trap, netBotz_prd_bot_audio=netBotz_prd_bot_audio, netBotz_prd_bot_ext_temp2_min=netBotz_prd_bot_ext_temp2_min, netBotz_prd_bot_amp4_total_amp_seconds_since_time=netBotz_prd_bot_amp4_total_amp_seconds_since_time, netBotz_prd_bot_amps2=netBotz_prd_bot_amps2, netBotz_prd_bot_ext_dry1_label=netBotz_prd_bot_ext_dry1_label, netBotz_prd_bot_amps4_max=netBotz_prd_bot_amps4_max, netBotz_prd_bot_ext_temp2_enabled=netBotz_prd_bot_ext_temp2_enabled, netBotz_prd_bot_amp1_total_amp_seconds_since_time=netBotz_prd_bot_amp1_total_amp_seconds_since_time, netBotz_prd_bot_hum_enabled=netBotz_prd_bot_hum_enabled, netBotz_prd_bot_amps1_min=netBotz_prd_bot_amps1_min, netBotz_prd_bot_amps4_enabled=netBotz_prd_bot_amps4_enabled, netBotz_prd_bot_door_trap_clear=netBotz_prd_bot_door_trap_clear, netBotz_prd_bot_ext_dry4_open_label=netBotz_prd_bot_ext_dry4_open_label, netBotz_prd_bot_switch_enabled=netBotz_prd_bot_switch_enabled, netBotz_prd_bot_amp4_sensor_replugged=netBotz_prd_bot_amp4_sensor_replugged, netBotz_prd_bot_ext_temp3_traps=netBotz_prd_bot_ext_temp3_traps, netBotz_prd_bot_ext_port3_module_id=netBotz_prd_bot_ext_port3_module_id, netBotz_prd_bot_ext_temp2_uV_per_degreeC=netBotz_prd_bot_ext_temp2_uV_per_degreeC, netBotz_prd_bot_humidity_traps=netBotz_prd_bot_humidity_traps, netBotz_prd_bot_humidity_high_trap=netBotz_prd_bot_humidity_high_trap, netBotz_prd_bot_amps1_max_range=netBotz_prd_bot_amps1_max_range)
