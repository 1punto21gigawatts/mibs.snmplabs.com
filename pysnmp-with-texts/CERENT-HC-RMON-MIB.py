#
# PySNMP MIB module CERENT-HC-RMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CERENT-HC-RMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cerentRequirements, cerentGeneric, cerentModules = mibBuilder.importSymbols("CERENT-GLOBAL-REGISTRY", "cerentRequirements", "cerentGeneric", "cerentModules")
mediaIndependentIndex, = mibBuilder.importSymbols("HC-RMON-MIB", "mediaIndependentIndex")
OwnerString, EntryStatus = mibBuilder.importSymbols("RMON-MIB", "OwnerString", "EntryStatus")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, NotificationType, TimeTicks, Integer32, Gauge32, ModuleIdentity, Unsigned32, IpAddress, Counter32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "NotificationType", "TimeTicks", "Integer32", "Gauge32", "ModuleIdentity", "Unsigned32", "IpAddress", "Counter32", "ObjectIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cerentHcRMON = ModuleIdentity((1, 3, 6, 1, 4, 1, 3607, 1, 10, 110))
cerentHcRMON.setRevisions(('1912-01-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cerentHcRMON.setRevisionsDescriptions(('The MIB module for managing remote monitoring device implementations. This MIB module is a proprietary extension of the HC-RMON-MIB.',))
if mibBuilder.loadTexts: cerentHcRMON.setLastUpdated('1201200000Z')
if mibBuilder.loadTexts: cerentHcRMON.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cerentHcRMON.setContactInfo('support@Cisco.com Postal: Cisco Systems 1450 N. McDowell Blvd. Petaluma, CA 94954 Tel: +1-877-323-7368')
if mibBuilder.loadTexts: cerentHcRMON.setDescription('The MIB module for managing remote monitoring device implementations. This MIB module is a proprietary extension of the HC-RMON-MIB (rfc-3273).')
cerentHcRmonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 70))
cerentHcRmon = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10))
cMediaIndependentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10), )
if mibBuilder.loadTexts: cMediaIndependentTable.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentTable.setDescription('Media independent statistics for promiscuous monitoring of any media. The following table defines media independent statistics that provide information for full and/or half-duplex links as well as high capacity links. This table is a proprietary extension of the mediaIndependentTable (rfc-3273).')
cMediaIndependentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1), ).setIndexNames((0, "HC-RMON-MIB", "mediaIndependentIndex"))
if mibBuilder.loadTexts: cMediaIndependentEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentEntry.setDescription('Media independent statistics for promiscuous monitoring of any media.')
cMediaIndependentInBadCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInBadCRC.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInBadCRC.setDescription('The total number of frames received on this interface which contained CRC error. ')
cMediaIndependentOutBadCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutBadCRC.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutBadCRC.setDescription('The total number of frames transmitted on this interface that contained CRC error. ')
cMediaIndependentInFramesTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInFramesTruncated.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInFramesTruncated.setDescription('The total number of frames received on this interface that were truncated. ')
cMediaIndependentInFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInFramesTooLong.setDescription('This object gives the number of frames received on this interface with a length greater than what was agreed to. ')
cMediaIndependentLinkRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentLinkRecoveries.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentLinkRecoveries.setDescription('The total number of link recoveries observed on this interface. ')
cMediaIndependentInDistanceExtBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInDistanceExtBuffers.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInDistanceExtBuffers.setDescription('The total number of distance extension buffers received on this interface. ')
cMediaIndependentOutDistanceExtBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutDistanceExtBuffers.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutDistanceExtBuffers.setDescription('The total number of distance extension buffers transmitted on this interface. ')
cMediaIndependentInCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInCredits.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInCredits.setDescription('The total number of credits received on this interface. ')
cMediaIndependentOutCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutCredits.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutCredits.setDescription('The total number of credits transmitted on this interface. ')
cMediaIndependentOutZeroCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutZeroCredits.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutZeroCredits.setDescription('The total number of zero credits transmitted on this interface. ')
cMediaIndependentInGfpSBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpSBitErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpSBitErr.setDescription('The total number of GFP Single Bit errors received on this interface. ')
cMediaIndependentInGfpMBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpMBitErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpMBitErr.setDescription('The total number of GFP multi bit errors received on this interface. ')
cMediaIndependentInGfpCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 130), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpCRCErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpCRCErr.setDescription('The total number of GFP CRC errors received on this interface. ')
cMediaIndependentInGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 140), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpFrames.setDescription('The total number of GFP data frames received on this interface. ')
cMediaIndependentInOverflowGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 150), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInOverflowGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInOverflowGfpFrames.setDescription('The higher word value of the total number of GFP data frames received on this interface. ')
cMediaIndependentInHighCapacityGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 160), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInHighCapacityGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInHighCapacityGfpFrames.setDescription('The total number of GFP data frames received on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependentOutGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 170), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutGfpFrames.setDescription('The total number of GFP data frames transmitted on this interface. ')
cMediaIndependentOutOverflowGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 180), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutOverflowGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutOverflowGfpFrames.setDescription('The higher word value of the total number of GFP data frames transmitted on this interface. ')
cMediaIndependentOutHighCapacityGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 190), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutHighCapacityGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutHighCapacityGfpFrames.setDescription('The total number of GFP data frames transmitted on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependentInGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpOctets.setDescription('The total number of GFP Octets received on this interface. ')
cMediaIndependentInOverflowGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 210), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInOverflowGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInOverflowGfpOctets.setDescription('The higher word value of the total number of GFP Octets received on this interface. ')
cMediaIndependentInHighCapacityGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 220), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInHighCapacityGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInHighCapacityGfpOctets.setDescription('The total number of GFP Octets received on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependentOutGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 230), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutGfpOctets.setDescription('The total number of GFP Octets transmitted on this interface. ')
cMediaIndependentOutOverflowGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 240), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutOverflowGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutOverflowGfpOctets.setDescription('The higher word value of the total number of GFP Octets transmitted on this interface. ')
cMediaIndependentOutHighCapacityGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 250), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutHighCapacityGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutHighCapacityGfpOctets.setDescription('The total number of GFP Octets transmitted on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependentInGfpTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 260), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpTypeInvalid.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpTypeInvalid.setDescription('The total number of GFP data frames received on this interface with an invalid type. ')
cMediaIndependentInGfpCIDInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 270), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpCIDInvalid.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpCIDInvalid.setDescription('The total number of GFP data frames received on this interface with an invalid Channel Indentifier. ')
cMediaIndependentInGfpLFDRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 280), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpLFDRaised.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpLFDRaised.setDescription('The total number of times GFP LFD alarm is raised on this interface. ')
cMediaIndependentInGfpCSFRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 290), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpCSFRaised.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpCSFRaised.setDescription('The total number of times GFP CSF alarm is raised on this interface. ')
cMediaIndependentGfpRoundTripLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 300), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentGfpRoundTripLatency.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentGfpRoundTripLatency.setDescription('The total number of GFP round trip latencies observed on this interface. ')
cMediaIndependent8b10bIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 310), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependent8b10bIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependent8b10bIdleSets.setDescription('This object gives the value of the number of 8b10b Idle sets encountered on this interface. ')
cMediaIndependentOverflow8b10bIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 320), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOverflow8b10bIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOverflow8b10bIdleSets.setDescription('This object gives the higher word value the number of 8b10b idle sets encountered on this interface. ')
cMediaIndependentHighCapacity8b10bIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 330), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHighCapacity8b10bIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHighCapacity8b10bIdleSets.setDescription('The counter associated with the number of 8b10b idle sets encountered on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependent8b10bNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 340), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependent8b10bNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependent8b10bNonIdleSets.setDescription('This object gives the value of the number of 8b10b non idle sets encountered on this interface. ')
cMediaIndependentOverflow8b10bNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 350), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOverflow8b10bNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOverflow8b10bNonIdleSets.setDescription('This object gives the higher word value the number of 8b10b non idle sets encountered on this interface. ')
cMediaIndependentHighCapacity8b10bNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 360), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHighCapacity8b10bNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHighCapacity8b10bNonIdleSets.setDescription('The counter associated with the number of 8b10b non-idle sets encountered on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependent8b10bDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 370), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependent8b10bDataSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependent8b10bDataSets.setDescription('This object gives the value of the number of 8b10b data ordered sets encountered on this interface. ')
cMediaIndependentOverflow8b10bDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 380), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOverflow8b10bDataSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOverflow8b10bDataSets.setDescription('This object gives the higher word value the number of 8b10b data ordered sets encountered on this interface. ')
cMediaIndependentHighCapacity8b10bDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 390), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHighCapacity8b10bDataSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHighCapacity8b10bDataSets.setDescription('The counter associated with the number of 8b10b data ordered sets encountered on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependent8b10bInvalidOrdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 400), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependent8b10bInvalidOrdSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependent8b10bInvalidOrdSets.setDescription('This object gives the value of the number of 8b10b invalid ordered sets encountered on this interface. ')
cMediaIndependent8b10bEncodingDispErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 410), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependent8b10bEncodingDispErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependent8b10bEncodingDispErr.setDescription('This object gives the value of the number of 8b10b encoding disparity errors encountered on this interface. ')
cMediaIndependent8b10bLossOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 420), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependent8b10bLossOfSync.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependent8b10bLossOfSync.setDescription('This object gives the value of the number of 8b10b Loss of Sync encountered on this interface. ')
cMediaIndependentInPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 430), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInPauseFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInPauseFrames.setDescription('This object gives the value of the number of received pause frames. ')
cMediaIndependentOutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 440), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutPauseFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutPauseFrames.setDescription('This object gives the value of the number of transmitted pause frames. ')
cMediaIndependentInPktsDroppedInternalCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 450), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInPktsDroppedInternalCongestion.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInPktsDroppedInternalCongestion.setDescription('This object gives the value of the number of incoming packeds dropped due to internal congestion. ')
cMediaIndependentOutPktsDroppedInternalCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 460), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutPktsDroppedInternalCongestion.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutPktsDroppedInternalCongestion.setDescription('This object gives the value of the number of outgoing packets dropped due to internal congestion. ')
cMediaIndependentInControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 470), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInControlFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInControlFrames.setDescription('This object gives the value of the number of received control frames. ')
cMediaIndependentInUnknownOpcodeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 480), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInUnknownOpcodeFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInUnknownOpcodeFrames.setDescription('This object gives the value of the number of received frames with unknown opcodes. ')
cMediaIndependentHdlcPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 490), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHdlcPktDrops.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHdlcPktDrops.setDescription('This object gives the value of the number of dropped hdlc packets. ')
cMediaIndependentHdlcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 500), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHdlcInOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHdlcInOctets.setDescription('This object gives the value of the number of hdlc octets received. ')
cMediaIndependentHdlcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 510), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHdlcOutOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHdlcOutOctets.setDescription('This object gives the value of the number of hdlc octets transmitted. ')
cMediaIndependentHdlcInAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 520), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHdlcInAborts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHdlcInAborts.setDescription('This object gives the value of the number of hdlc receive aborts. ')
cMediaIndependentInShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 530), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInShortPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInShortPkts.setDescription('This object gives the value of the number of short packets received. ')
cMediaIndependentOutShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 535), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutShortPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutShortPkts.setDescription('This object gives the value of the number of short packets transmitted. ')
cMediaIndependentOversizeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 540), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOversizeDropped.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOversizeDropped.setDescription('This object gives the value of the number of packet drops due to oversize. ')
cMediaIndependentInErrorBytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 550), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInErrorBytePkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInErrorBytePkts.setDescription('This object gives the value of the number of error byte packets received. ')
cMediaIndependentInFramingErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 560), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInFramingErrorPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInFramingErrorPkts.setDescription('This object gives the value of the number of packets with framing errors. ')
cMediaIndependentInJunkInterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 570), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInJunkInterPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInJunkInterPkts.setDescription('This object gives the value of the number of junk inter packets. ')
cMediaIndependentOutOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 580), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutOversizePkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutOversizePkts.setDescription('This object gives the value of the number of oversized outbound packets. ')
cMediaIndependentInPayloadCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 590), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInPayloadCrcErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInPayloadCrcErrors.setDescription('This object gives the value of the number of inbound packets with payload CRC errors. ')
cMediaIndependentOutPayloadCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 600), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutPayloadCrcErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutPayloadCrcErrors.setDescription('This object gives the value of the number of outbound packets with payload CRC errors. ')
cMediaIndependentInRecvrReady = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 610), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInRecvrReady.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInRecvrReady.setDescription('This object gives the inbound receiver ready count. ')
cMediaIndependentOutRecvrReady = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 620), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutRecvrReady.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutRecvrReady.setDescription('This object gives the outbound receiver ready count. ')
cMediaIndependent8b10bInvalidOrdSetsDispErrorsSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 630), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependent8b10bInvalidOrdSetsDispErrorsSum.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependent8b10bInvalidOrdSetsDispErrorsSum.setDescription('This object gives the sum of the number of 8b10b encoding disparity errors and invalid ordered sets encountered on this interface. ')
cMediaIndependentInGfpSblkCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 640), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentInGfpSblkCRCErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentInGfpSblkCRCErr.setDescription('The number of GFP single block crc errors observed on this interface. ')
cMediaIndependentOutFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 650), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutFramesTooLong.setDescription('This object gives the number of outbound frames on this interface with a length greater than what was agreed to. ')
cMediaIndependentPkts1519to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 660), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentPkts1519to1522Octets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentPkts1519to1522Octets.setDescription('The total number of packets (including bad packets) received that were between 1519 and 1522 octets in length inclusive (excluding framing bits but including FCS octets). ')
cMediaIndependentOutFramesTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 670), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentOutFramesTruncated.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentOutFramesTruncated.setDescription('The total number of frames received on this interface that were truncated. ')
cMediaIndependentPcsErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 680), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentPcsErrCount.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentPcsErrCount.setDescription('Pcs error count. ')
cMediaIndependentPcsErrCount2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 690), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentPcsErrCount2.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentPcsErrCount2.setDescription('Pcs error count2. ')
cMediaIndependentPcs49RxErrBer = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 700), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentPcs49RxErrBer.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentPcs49RxErrBer.setDescription('Pcs49RxErrBer count. ')
cMediaIndependentPcs49RxErrDec = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 710), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentPcs49RxErrDec.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentPcs49RxErrDec.setDescription('Pcs49RxErrDec count. ')
cMediaIndependentPkts1519toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 720), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentPkts1519toMaxOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentPkts1519toMaxOctets.setDescription('Ether packets 1519 to Max Octates')
cMediaIndependentRxLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 730), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentRxLcvErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentRxLcvErrors.setDescription('Rx Lcv Errors')
cMediaIndependentTxLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 740), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentTxLcvErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentTxLcvErrors.setDescription('Tx Lcv Errors')
cMediaIndependentGfpRxCmfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 750), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentGfpRxCmfFrame.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentGfpRxCmfFrame.setDescription('GFP Rx Cmf Frames')
cMediaIndependentGfpTxCmfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 760), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentGfpTxCmfFrame.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentGfpTxCmfFrame.setDescription('GFP Tx Cmf Frames')
cMediaIndependentPcsEgRxErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 10, 1, 770), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentPcsEgRxErrFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentPcsEgRxErrFrames.setDescription('PcsEgRxErrFrames count. ')
cMediaIndependentHistoryControlTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20), )
if mibBuilder.loadTexts: cMediaIndependentHistoryControlTable.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlTable.setDescription('A list of cMediaIndependentHistoryControl entries.')
cMediaIndependentHistoryControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1), ).setIndexNames((0, "CERENT-HC-RMON-MIB", "cMediaIndependentHistoryControlIndex"))
if mibBuilder.loadTexts: cMediaIndependentHistoryControlEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlEntry.setDescription('A list of parameters that set up a periodic sampling of statistics.')
cMediaIndependentHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cMediaIndependentHistoryControlIndex.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlIndex.setDescription('An index that uniquely identifies an entry in the cMediaIndependentHistoryControl table. Each such entry defines a set of samples at a particular interval for an interface on the device. ')
cMediaIndependentHistoryControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1, 20), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMediaIndependentHistoryControlDataSource.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlDataSource.setDescription('This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this cMediaIndependentHistoryControlEntry. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 2233 [17], for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. This object may not be modified if the associated cMediaIndependentHistoryControlStatus object is equal to valid(1). ')
cMediaIndependentHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMediaIndependentHistoryControlBucketsRequested.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlBucketsRequested.setDescription('The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this cMediaIndependentHistoryControlEntry. When this object is created or modified, the probe should set cMediaIndependentHistoryControlBucketsGranted as closely to this object as is possible for the particular implementation and available resources. ')
cMediaIndependentHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryControlBucketsGranted.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlBucketsGranted.setDescription('The number of discrete sampling intervals over which data shall be saved in the part of the media-specific table associated with this cMediaIndependentHistoryControlEntry. When the associated cMediaIndependentHistoryControlBucketsRequested object is created or modified, the probe should set this object as closely to the requested value as is possible for the particular probe implementation and available resources. When the number of buckets reaches the value of this object and a new bucket is to be added to the media-specific table, the oldest bucket associated with this cMediaIndependentHistoryControlEntry shall be deleted by the agent so that the new bucket can be added. When the value of this object changes to a value less than the current value, entries are deleted from the media-specific table associated with this cMediaIndependentHistoryControlEntry. Enough of the oldest of these entries shall be deleted by the agent so that their number remains less than or equal to the new value of this object. When the value of this object changes to a value greater than the current value, the number of associated media- specific entries may be allowed to grow. ')
cMediaIndependentHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMediaIndependentHistoryControlInterval.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlInterval.setDescription('The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this cMediaIndependentHistoryControlEntry. This interval can be set to any number of seconds between 1 and 3600 (1 hour). This object may not be modified if the associated cMediaIndependentHistoryControlStatus object is equal to valid(1). ')
cMediaIndependentHistoryControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1, 60), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMediaIndependentHistoryControlOwner.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it. ')
cMediaIndependentHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 20, 1, 70), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMediaIndependentHistoryControlStatus.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryControlStatus.setDescription('The status of this cMediaIndependentHistoryControl entry. Each instance of the media-specific table associated with this cMediaIndependentHistoryControlEntry will be deleted by the agent if this cMediaIndependentHistoryControlEntry is not equal to valid(1). ')
cMediaIndependentHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30), )
if mibBuilder.loadTexts: cMediaIndependentHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryTable.setDescription('Collection of media independent statistics for promiscuous monitoring of any media. This table reports data for the previous n intervals.')
cMediaIndependentHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1), ).setIndexNames((0, "CERENT-HC-RMON-MIB", "cMediaIndependentHistoryIndex"), (0, "CERENT-HC-RMON-MIB", "cMediaIndependentHistorySampleIndex"))
if mibBuilder.loadTexts: cMediaIndependentHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryEntry.setDescription('History of media independent statistics. ')
cMediaIndependentHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cMediaIndependentHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryIndex.setDescription('The history of which this entry is a part. The history identified by a particular value of this index is the same history as identified by the same value of cMediaIndependentHistoryControlIndex.')
cMediaIndependentHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cMediaIndependentHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same cMediaIndependentHistoryControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
cMediaIndependentHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryDropEvents.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryDropEvents.setDescription('The total number of events, in this interval, in which packets were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of packets dropped; it is just the number of times this condition has been detected. ')
cMediaIndependentHistoryDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryDroppedFrames.setDescription('The total number of frames, in this interval, which were received by the probe and therefore not accounted for in the cMediaIndependentHistoryDropEvents, but for which the probe chose not to count for this entry for whatever reason. Most often, this event occurs when the probe is out of some resources and decides to shed load from this collection. This count does not include packets that were not counted because they had MAC-layer errors. Note that, unlike the dropEvents counter, this number is the exact number of frames dropped. ')
cMediaIndependentHistoryInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received, in this interval, on a half-duplex link or on the inbound connection of a full-duplex link. ')
cMediaIndependentHistoryInOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowPkts.setDescription('The number of times the associated cMediaIndependentHistoryInPkts counter has overflowed in the particular interval. ')
cMediaIndependentHistoryInHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received in this interval, on a half-duplex link or on the inbound connection of a full-duplex link. ')
cMediaIndependentHistoryOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received, in this interval, on a full-duplex link in the direction of the network. ')
cMediaIndependentHistoryOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowPkts.setDescription('The number of times the associated cMediaIndependentHistoryOutPkts counter has overflowed in this interval. ')
cMediaIndependentHistoryOutHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received, in this interval, on a full-duplex link in the direction of the network. ')
cMediaIndependentHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInOctets.setDescription('The total number of octets of data (including those in bad packets) received, in this interval, (excluding framing bits but including FCS octets) on a half-duplex link or on the inbound connection of a full-duplex link. ')
cMediaIndependentHistoryInOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowOctets.setDescription('The number of times the associated cMediaIndependentHistoryInOctets counter has overflowed in this interval. ')
cMediaIndependentHistoryInHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityOctets.setDescription('The total number of octets of data (including those in bad packets) received, in this interval, (excluding framing bits but including FCS octets) on a half-duplex link or on the inbound connection of a full-duplex link. ')
cMediaIndependentHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 140), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOctets.setDescription('The total number of octets of data (including those in bad packets) received, in this interval, on a full-duplex link in the direction of the network (excluding framing bits but including FCS octets). ')
cMediaIndependentHistoryOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 150), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowOctets.setDescription('The number of times the associated cMediaIndependentHistoryOutOctets counter has overflowed in this interval. ')
cMediaIndependentHistoryOutHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 160), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityOctets.setDescription('The total number of octets of data (including those in bad packets) received, in this interval, on a full-duplex link in the direction of the network (excluding framing bits but including FCS octets). ')
cMediaIndependentHistoryInNUCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 170), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInNUCastPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInNUCastPkts.setDescription('The total number of non-unicast packets (including bad packets) received, in this interval, on a half-duplex link or on the inbound connection of a full-duplex link. ')
cMediaIndependentHistoryInNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 180), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInNUCastOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInNUCastOverflowPkts.setDescription('The number of times the associated cMediaIndependentHistoryInNUCastPkts counter has overflowed in this interval. ')
cMediaIndependentHistoryInNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 190), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInNUCastHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInNUCastHighCapacityPkts.setDescription('The total number of non-unicast packets (including bad packets) received, in this interval, on a half-duplex link or on the inbound connection of a full-duplex link. ')
cMediaIndependentHistoryOutNUCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutNUCastPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutNUCastPkts.setDescription('The total number of non-unicast packets (including bad packets) received, in this interval, on a full-duplex link in the direction of the network. ')
cMediaIndependentHistoryOutNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 210), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutNUCastOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutNUCastOverflowPkts.setDescription('The number of times the associated cMediaIndependentHistoryOutNUCastPkts counter has overflowed in this interval.')
cMediaIndependentHistoryOutNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 220), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutNUCastHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutNUCastHighCapacityPkts.setDescription('The total number of packets (including bad packets) received, in this interval, on a full-duplex link in the direction of the network.')
cMediaIndependentHistoryInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 230), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInErrors.setDescription('The total number of bad packets received, in this interval, on a half-duplex link or on the inbound connection of a full-duplex link.')
cMediaIndependentHistoryOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 240), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutErrors.setDescription('The total number of bad packets received, in this interval, on a full-duplex link in the direction of the network.')
cMediaIndependentHistoryInBadCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 250), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInBadCRC.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInBadCRC.setDescription('The total number of frames with invalid CRC observed on this interface, in this interval. ')
cMediaIndependentHistoryOutBadCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 260), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutBadCRC.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutBadCRC.setDescription('The total number of frames transmitted on this interface, in this interval, that had a CRC error. ')
cMediaIndependentHistoryInFramesTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 270), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInFramesTruncated.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInFramesTruncated.setDescription('The total number of frames received, in this interval, on this interface that were truncated. ')
cMediaIndependentHistoryInFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 280), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInFramesTooLong.setDescription('This object gives the number of frames received, in this interval, on this interface with a length greater than what was agreed to. ')
cMediaIndependentHistoryLinkRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 290), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryLinkRecoveries.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryLinkRecoveries.setDescription('The total number of link recoveries observed in this interval, on this interface. ')
cMediaIndependentHistoryInDistanceExtBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 300), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInDistanceExtBuffers.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInDistanceExtBuffers.setDescription('The total number of distance extension buffers received on this interface, in this interval. ')
cMediaIndependentHistoryOutDistanceExtBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 310), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutDistanceExtBuffers.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutDistanceExtBuffers.setDescription('The total number of distance extension buffers transmitted on this interface, in this interval. ')
cMediaIndependentHistoryInCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 320), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInCredits.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInCredits.setDescription('The total number of credits received on this interface, in this interval. ')
cMediaIndependentHistoryOutCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 330), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutCredits.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutCredits.setDescription('The total number of credits transmitted on this interface, in this interval. ')
cMediaIndependentHistoryOutZeroCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 340), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutZeroCredits.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutZeroCredits.setDescription('The total number of zero credits transmitted on this interface, in this interval. ')
cMediaIndependentHistoryInGfpSBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 350), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpSBitErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpSBitErr.setDescription('The total number of GFP Single Bit errors received on this interface, in this interval. ')
cMediaIndependentHistoryInGfpMBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 360), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpMBitErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpMBitErr.setDescription('The total number of GFP Multiple Bit errors received on this interface, in this interval. ')
cMediaIndependentHistoryInGfpCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 370), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpCRCErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpCRCErr.setDescription('The total number of GFP CRC errors received on this interface, in this interval. ')
cMediaIndependentHistoryInGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 380), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpFrames.setDescription('The number of GFP frames received on this interface, in this interval. ')
cMediaIndependentHistoryInOverflowGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 390), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowGfpFrames.setDescription('The higher word value of the total number of GFP frames received on this interface, in this interval. ')
cMediaIndependentHistoryInHighCapacityGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 400), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityGfpFrames.setDescription('The total number of GFP frames received on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependentHistoryOutGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 410), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutGfpFrames.setDescription('The total number of GFP frames transmitted on this interface, in this interval. ')
cMediaIndependentHistoryOutOverflowGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 420), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowGfpFrames.setDescription('The higher word value of the total number of GFP frames transmitted on this interface, in this interval. ')
cMediaIndependentHistoryOutHighCapacityGfpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 430), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityGfpFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityGfpFrames.setDescription('The total number of GFP frames transmitted on this interface, in this interval. SNMP V2/V3 managers should use this object. ')
cMediaIndependentHistoryInGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 440), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpOctets.setDescription('The number of GFP Octets received on this interface, in this interval. ')
cMediaIndependentHistoryInOverflowGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 450), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInOverflowGfpOctets.setDescription('The higher word value of the total number of GFP Octets received on this interface, in this interval. ')
cMediaIndependentHistoryInHighCapacityGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 460), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInHighCapacityGfpOctets.setDescription('The total number of GFP Octets received on this interface. SNMP V2/V3 managers should use this object. ')
cMediaIndependentHistoryOutGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 470), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutGfpOctets.setDescription('The total number of GFP Octets transmitted on this interface, in this interval. ')
cMediaIndependentHistoryOutOverflowGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 480), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOverflowGfpOctets.setDescription('The higher word value of the total number of GFP Octets transmitted on this interface, in this interval. ')
cMediaIndependentHistoryOutHighCapacityGfpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 490), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityGfpOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutHighCapacityGfpOctets.setDescription('The total number of GFP Octets transmitted on this interface, in this interval. SNMP V2/V3 managers should use this object. ')
cMediaIndependentHistoryInGfpTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 500), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpTypeInvalid.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpTypeInvalid.setDescription('The total number of GFP data frames receieved on this interface, in the spcified interval, which carried an invalid type. ')
cMediaIndependentHistoryInGfpCIDInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 510), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpCIDInvalid.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpCIDInvalid.setDescription('The total number of GFP data frames receieved on this interface, in the spcified interval, which carried an invalid channel Identifier. ')
cMediaIndependentHistoryInGfpLFDRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 520), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpLFDRaised.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpLFDRaised.setDescription('The total number of times GFP LFD alarm is raised on this interface, in this interval. ')
cMediaIndependentHistoryInGfpCSFRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 530), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpCSFRaised.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpCSFRaised.setDescription('The total number of times GFP CSF alarm is raised on this interface, in this interval. ')
cMediaIndependentHistoryGfpRoundTripLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 540), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryGfpRoundTripLatency.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryGfpRoundTripLatency.setDescription('The number of GFP round trip latencies observed on this interface, in this interval. ')
cMediaIndependentHistory8b10bIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 550), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bIdleSets.setDescription('This object gives the value of the number of 8b10b Idle sets encountered on the interface for this particular interval. ')
cMediaIndependentHistoryOverflow8b10bIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 560), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOverflow8b10bIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOverflow8b10bIdleSets.setDescription('This object gives the higher word value the number of 8b10b idle sets encountered on this interface for this particular interval. ')
cMediaIndependentHistoryHighCapacity8b10bIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 570), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryHighCapacity8b10bIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryHighCapacity8b10bIdleSets.setDescription('The counter associated with the number of 8b10b idle sets encountered on this interface in this particular interval. SNMP V2/V3 managers should use this object. ')
cMediaIndependentHistory8b10bNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 580), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bNonIdleSets.setDescription('This object gives the value of the number of 8b10b non idle sets encountered on this interface for this particular interval. ')
cMediaIndependentHistoryOverflow8b10bNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 590), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOverflow8b10bNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOverflow8b10bNonIdleSets.setDescription('This object gives the higher word value the number of 8b10b non idle sets encountered on this interface for the particular interval. ')
cMediaIndependentHistoryHighCapacity8b10bNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 600), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryHighCapacity8b10bNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryHighCapacity8b10bNonIdleSets.setDescription('The counter associated with the number of 8b10b non-idle sets encountered on this interface in the particular interval. SNMP V2/V3 managers should use this object. ')
cMediaIndependentHistory8b10bDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 610), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bDataSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bDataSets.setDescription('This object gives the value of the number of 8b10b data ordered sets encountered on this interface for this particular interval. ')
cMediaIndependentHistoryOverflow8b10bDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 620), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOverflow8b10bDataSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOverflow8b10bDataSets.setDescription('This object gives the higher word value the number of 8b10b data ordered sets encountered on this interface for this particular interval. ')
cMediaIndependentHistoryHighCapacity8b10bDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 630), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryHighCapacity8b10bDataSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryHighCapacity8b10bDataSets.setDescription('The counter associated with the number of 8b10b data ordered sets encountered on this interface in this particular interval. SNMP V2/V3 managers should use this object. ')
cMediaIndependentHistory8b10bInvalidOrdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 640), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bInvalidOrdSets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bInvalidOrdSets.setDescription('This object gives the value of the number of 8b10b invalid ordered sets encountered on this interface for this particular interval. ')
cMediaIndependentHistory8b10bEncodingDispErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 650), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bEncodingDispErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bEncodingDispErr.setDescription('This object gives the value of the number of 8b10b encoding disparity errors encountered on this interface for this particular interval. ')
cMediaIndependentHistory8b10bLossOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 660), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bLossOfSync.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bLossOfSync.setDescription('This object gives the value of the number of 8b10b Loss of Sync encountered on this interface for this particular interval. ')
cMediaIndependentHistoryInPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 670), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInPauseFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInPauseFrames.setDescription('This object gives the value of the number of received pause frames for this interval. ')
cMediaIndependentHistoryOutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 680), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPauseFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPauseFrames.setDescription('This object gives the value of the number of transmitted pause frames. ')
cMediaIndependentHistoryInPktsDroppedInternalCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 690), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInPktsDroppedInternalCongestion.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInPktsDroppedInternalCongestion.setDescription('This object gives the value of the number of incoming packeds dropped due to internal congestion in this interval. ')
cMediaIndependentHistoryOutPktsDroppedInternalCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 700), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPktsDroppedInternalCongestion.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPktsDroppedInternalCongestion.setDescription('This object gives the value of the number of outgoing packets dropped due to internal congestion in this interval. ')
cMediaIndependentHistoryInControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 710), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInControlFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInControlFrames.setDescription('This object gives the value of the number of received control frames in this interval. ')
cMediaIndependentHistoryInUnknownOpcodeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 720), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInUnknownOpcodeFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInUnknownOpcodeFrames.setDescription('This object gives the value of the number of received frames with unknown opcodes in this interval. ')
cMediaIndependentHistoryHdlcPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 730), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcPktDrops.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcPktDrops.setDescription('This object gives the value of the number of dropped hdlc packets in this interval. ')
cMediaIndependentHistoryHdlcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 740), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcInOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcInOctets.setDescription('This object gives the value of the number of hdlc octets received in this interval. ')
cMediaIndependentHistoryHdlcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 750), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcOutOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcOutOctets.setDescription('This object gives the value of the number of hdlc octets transmitted in this interval. ')
cMediaIndependentHistoryHdlcInAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 760), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcInAborts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryHdlcInAborts.setDescription('This object gives the value of the number of hdlc receive aborts in this interval. ')
cMediaIndependentHistoryInShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 770), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInShortPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInShortPkts.setDescription('This object gives the value of the number of short packets received in this interval. ')
cMediaIndependentHistoryOutShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 775), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutShortPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutShortPkts.setDescription('This object gives the value of the number of short packets transmitted in this interval. ')
cMediaIndependentHistoryOversizeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 780), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOversizeDropped.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOversizeDropped.setDescription('This object gives the value of the number of packet drops due to oversize in this interval. ')
cMediaIndependentHistoryInErrorBytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 790), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInErrorBytePkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInErrorBytePkts.setDescription('This object gives the value of the number of error byte packets received in this interval. ')
cMediaIndependentHistoryInFramingErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 800), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInFramingErrorPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInFramingErrorPkts.setDescription('This object gives the value of the number of packets with framing errors. ')
cMediaIndependentHistoryInJunkInterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 810), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInJunkInterPkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInJunkInterPkts.setDescription('This object gives the value of the number of junk inter packets in this interval. ')
cMediaIndependentHistoryOutOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 820), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOversizePkts.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutOversizePkts.setDescription('This object gives the value of the number of oversized outbound packets. ')
cMediaIndependentHistoryInPayloadCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 830), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInPayloadCrcErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInPayloadCrcErrors.setDescription('This object gives the value of the number of inbound packets with payload CRC errors in this interval. ')
cMediaIndependentHistoryOutPayloadCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 840), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPayloadCrcErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutPayloadCrcErrors.setDescription('This object gives the value of the number of outbound packets with payload CRC errors. ')
cMediaIndependentHistoryInRecvrReady = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 850), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInRecvrReady.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInRecvrReady.setDescription('This object gives the inbound receiver ready count for this interval. ')
cMediaIndependentHistoryOutRecvrReady = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 860), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutRecvrReady.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutRecvrReady.setDescription('This object gives the outbound receiver ready count for this interval. ')
cMediaIndependentHistory8b10bInvalidOrdSetsDispErrorsSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 870), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bInvalidOrdSetsDispErrorsSum.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistory8b10bInvalidOrdSetsDispErrorsSum.setDescription('This object gives the sum of the number of 8b10b encoding disparity errors and invalid ordered sets encountered, in this interval, on this interface. ')
cMediaIndependentHistoryInGfpSblkCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 880), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpSblkCRCErr.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryInGfpSblkCRCErr.setDescription('The number of GFP single block crc errors observed on this interface, in this interval. ')
cMediaIndependentHistoryOutFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 890), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutFramesTooLong.setDescription('This object gives the number of outbound frames in this interval, on this interface with a length greater than what was agreed to. ')
cMediaIndependentHistoryPkts1519to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 900), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryPkts1519to1522Octets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryPkts1519to1522Octets.setDescription('The total number of packets (including bad packets) received that were between 1519 and 1522 octets in length inclusive (excluding framing bits but including FCS octets). ')
cMediaIndependentHistoryOutFramesTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 910), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryOutFramesTruncated.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryOutFramesTruncated.setDescription('The total number of frames received, in this interval, on this interface that were truncated. ')
cMediaIndependentHistoryPcsErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 920), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryPcsErrCount.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryPcsErrCount.setDescription('Pcs error count. ')
cMediaIndependentHistoryPcsErrCount2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 930), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryPcsErrCount2.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryPcsErrCount2.setDescription('Pcs error count2. ')
cMediaIndependentHistoryPcs49RxErrBer = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 940), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryPcs49RxErrBer.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryPcs49RxErrBer.setDescription('Pcs49RxErrBer error count. ')
cMediaIndependentHistoryPcs49RxErrDec = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 950), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryPcs49RxErrDec.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryPcs49RxErrDec.setDescription('Pcs49RxErrDec error count. ')
cMediaIndependentHistoryPkts1519toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 960), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryPkts1519toMaxOctets.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryPkts1519toMaxOctets.setDescription('Packets 1519 to Max Octetes.')
cMediaIndependentHistoryRxLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 970), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryRxLcvErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryRxLcvErrors.setDescription('Rx Lcv Errors')
cMediaIndependentHistoryTxLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 980), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryTxLcvErrors.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryTxLcvErrors.setDescription('Tx Lcv Errors')
cMediaIndependentHistoryPcsEgRxErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 70, 10, 30, 1, 990), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMediaIndependentHistoryPcsEgRxErrFrames.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryPcsEgRxErrFrames.setDescription('PcsEgRxErrFrames count. ')
cerentHcRmonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 60))
cerentHcRmonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 60, 10))
cerentHcRmonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 60, 20))
cerentHcMediaIndependentCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3607, 5, 60, 10, 10)).setObjects()

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentHcMediaIndependentCompliance = cerentHcMediaIndependentCompliance.setStatus('current')
if mibBuilder.loadTexts: cerentHcMediaIndependentCompliance.setDescription('Describes the requirements for conformance to the High Capacity Media Independent Group.')
cMediaIndependentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 60, 20, 10)).setObjects(("CERENT-HC-RMON-MIB", "cMediaIndependentInBadCRC"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutBadCRC"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInFramesTruncated"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInFramesTooLong"), ("CERENT-HC-RMON-MIB", "cMediaIndependentLinkRecoveries"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInDistanceExtBuffers"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutDistanceExtBuffers"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInCredits"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutCredits"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutZeroCredits"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpSBitErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpMBitErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpCRCErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInOverflowGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInHighCapacityGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutOverflowGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutHighCapacityGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInOverflowGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInHighCapacityGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutOverflowGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutHighCapacityGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpTypeInvalid"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpCIDInvalid"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpLFDRaised"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpCSFRaised"), ("CERENT-HC-RMON-MIB", "cMediaIndependentGfpRoundTripLatency"), ("CERENT-HC-RMON-MIB", "cMediaIndependent8b10bIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOverflow8b10bIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHighCapacity8b10bIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependent8b10bNonIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOverflow8b10bNonIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHighCapacity8b10bNonIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependent8b10bDataSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOverflow8b10bDataSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHighCapacity8b10bDataSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependent8b10bInvalidOrdSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependent8b10bEncodingDispErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependent8b10bLossOfSync"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInPauseFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutPauseFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInPktsDroppedInternalCongestion"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutPktsDroppedInternalCongestion"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInControlFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInUnknownOpcodeFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHdlcPktDrops"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHdlcInOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHdlcOutOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHdlcInAborts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInShortPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutShortPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOversizeDropped"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInErrorBytePkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInFramingErrorPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInJunkInterPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutOversizePkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInPayloadCrcErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutPayloadCrcErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInRecvrReady"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutRecvrReady"), ("CERENT-HC-RMON-MIB", "cMediaIndependent8b10bInvalidOrdSetsDispErrorsSum"), ("CERENT-HC-RMON-MIB", "cMediaIndependentInGfpSblkCRCErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutFramesTooLong"), ("CERENT-HC-RMON-MIB", "cMediaIndependentPkts1519to1522Octets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentOutFramesTruncated"), ("CERENT-HC-RMON-MIB", "cMediaIndependentPcsErrCount"), ("CERENT-HC-RMON-MIB", "cMediaIndependentPcsErrCount2"), ("CERENT-HC-RMON-MIB", "cMediaIndependentPcs49RxErrBer"), ("CERENT-HC-RMON-MIB", "cMediaIndependentPcs49RxErrDec"), ("CERENT-HC-RMON-MIB", "cMediaIndependentPkts1519toMaxOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentRxLcvErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentTxLcvErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentGfpRxCmfFrame"), ("CERENT-HC-RMON-MIB", "cMediaIndependentGfpTxCmfFrame"), ("CERENT-HC-RMON-MIB", "cMediaIndependentPcsEgRxErrFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaIndependentGroup = cMediaIndependentGroup.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentGroup.setDescription('Collects utilization statistics for any type of network. ')
cMediaIndependenHistoryControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 60, 20, 20)).setObjects(("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryControlDataSource"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryControlBucketsRequested"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryControlBucketsGranted"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryControlInterval"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryControlOwner"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryControlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaIndependenHistoryControlGroup = cMediaIndependenHistoryControlGroup.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependenHistoryControlGroup.setDescription('The History Control Group.')
cMediaIndependentHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 60, 20, 30)).setObjects(("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryDropEvents"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryDroppedFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInOverflowPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInHighCapacityPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutOverflowPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutHighCapacityPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInOverflowOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInHighCapacityOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutOverflowOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutHighCapacityOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInNUCastPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInNUCastOverflowPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInNUCastHighCapacityPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutNUCastPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutNUCastOverflowPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutNUCastHighCapacityPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInBadCRC"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutBadCRC"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInFramesTruncated"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInFramesTooLong"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryLinkRecoveries"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInDistanceExtBuffers"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutDistanceExtBuffers"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInCredits"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutCredits"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutZeroCredits"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpSBitErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpMBitErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpCRCErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInOverflowGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInHighCapacityGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutOverflowGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutHighCapacityGfpFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInOverflowGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInHighCapacityGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutOverflowGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutHighCapacityGfpOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpTypeInvalid"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpCIDInvalid"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpLFDRaised"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpCSFRaised"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryGfpRoundTripLatency"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistory8b10bIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOverflow8b10bIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryHighCapacity8b10bIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistory8b10bNonIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOverflow8b10bNonIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryHighCapacity8b10bNonIdleSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistory8b10bDataSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOverflow8b10bDataSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryHighCapacity8b10bDataSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistory8b10bInvalidOrdSets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistory8b10bEncodingDispErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistory8b10bLossOfSync"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInPauseFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutPauseFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInPktsDroppedInternalCongestion"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutPktsDroppedInternalCongestion"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInControlFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInUnknownOpcodeFrames"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryHdlcPktDrops"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryHdlcInOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryHdlcOutOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryHdlcInAborts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInShortPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutShortPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOversizeDropped"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInErrorBytePkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInFramingErrorPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInJunkInterPkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutOversizePkts"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInPayloadCrcErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutPayloadCrcErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInRecvrReady"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutRecvrReady"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistory8b10bInvalidOrdSetsDispErrorsSum"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryInGfpSblkCRCErr"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutFramesTooLong"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryPkts1519to1522Octets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryOutFramesTruncated"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryPcsErrCount"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryPcsErrCount2"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryPcs49RxErrBer"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryPcs49RxErrDec"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryPkts1519toMaxOctets"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryRxLcvErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryTxLcvErrors"), ("CERENT-HC-RMON-MIB", "cMediaIndependentHistoryPcsEgRxErrFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMediaIndependentHistoryGroup = cMediaIndependentHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cMediaIndependentHistoryGroup.setDescription('Collects history of utilization statistics for any type of network. ')
mibBuilder.exportSymbols("CERENT-HC-RMON-MIB", cMediaIndependentHistoryOutPkts=cMediaIndependentHistoryOutPkts, cMediaIndependentInGfpSblkCRCErr=cMediaIndependentInGfpSblkCRCErr, cMediaIndependentHistoryOutCredits=cMediaIndependentHistoryOutCredits, cMediaIndependentGfpTxCmfFrame=cMediaIndependentGfpTxCmfFrame, cMediaIndependentHistoryInNUCastOverflowPkts=cMediaIndependentHistoryInNUCastOverflowPkts, cMediaIndependentHistoryHdlcOutOctets=cMediaIndependentHistoryHdlcOutOctets, cMediaIndependentInBadCRC=cMediaIndependentInBadCRC, cMediaIndependentHistoryGfpRoundTripLatency=cMediaIndependentHistoryGfpRoundTripLatency, cMediaIndependentOutBadCRC=cMediaIndependentOutBadCRC, cMediaIndependentHistoryControlBucketsGranted=cMediaIndependentHistoryControlBucketsGranted, cMediaIndependentOverflow8b10bIdleSets=cMediaIndependentOverflow8b10bIdleSets, cMediaIndependentHistory8b10bDataSets=cMediaIndependentHistory8b10bDataSets, cMediaIndependentOversizeDropped=cMediaIndependentOversizeDropped, cMediaIndependentHistoryOutOverflowOctets=cMediaIndependentHistoryOutOverflowOctets, cMediaIndependentHistoryInPayloadCrcErrors=cMediaIndependentHistoryInPayloadCrcErrors, cMediaIndependentTxLcvErrors=cMediaIndependentTxLcvErrors, cMediaIndependentInCredits=cMediaIndependentInCredits, cMediaIndependentHistoryOutFramesTooLong=cMediaIndependentHistoryOutFramesTooLong, cMediaIndependentOutPauseFrames=cMediaIndependentOutPauseFrames, cMediaIndependentHistoryInPkts=cMediaIndependentHistoryInPkts, cMediaIndependentHistoryInHighCapacityOctets=cMediaIndependentHistoryInHighCapacityOctets, PYSNMP_MODULE_ID=cerentHcRMON, cMediaIndependentHistoryControlInterval=cMediaIndependentHistoryControlInterval, cMediaIndependentHistoryHighCapacity8b10bNonIdleSets=cMediaIndependentHistoryHighCapacity8b10bNonIdleSets, cMediaIndependentOutShortPkts=cMediaIndependentOutShortPkts, cMediaIndependentPcs49RxErrDec=cMediaIndependentPcs49RxErrDec, cMediaIndependentInShortPkts=cMediaIndependentInShortPkts, cMediaIndependentGfpRxCmfFrame=cMediaIndependentGfpRxCmfFrame, cMediaIndependentHistoryControlStatus=cMediaIndependentHistoryControlStatus, cMediaIndependentHistoryDroppedFrames=cMediaIndependentHistoryDroppedFrames, cMediaIndependentHistoryOutNUCastOverflowPkts=cMediaIndependentHistoryOutNUCastOverflowPkts, cMediaIndependentHistoryPkts1519to1522Octets=cMediaIndependentHistoryPkts1519to1522Octets, cMediaIndependentOutRecvrReady=cMediaIndependentOutRecvrReady, cMediaIndependentInGfpFrames=cMediaIndependentInGfpFrames, cMediaIndependentInGfpMBitErr=cMediaIndependentInGfpMBitErr, cMediaIndependentHistoryInPauseFrames=cMediaIndependentHistoryInPauseFrames, cMediaIndependentInPayloadCrcErrors=cMediaIndependentInPayloadCrcErrors, cMediaIndependent8b10bEncodingDispErr=cMediaIndependent8b10bEncodingDispErr, cerentHcRmonMIBObjects=cerentHcRmonMIBObjects, cMediaIndependentInJunkInterPkts=cMediaIndependentInJunkInterPkts, cMediaIndependentOutGfpFrames=cMediaIndependentOutGfpFrames, cMediaIndependentHistoryControlTable=cMediaIndependentHistoryControlTable, cMediaIndependentHistory8b10bIdleSets=cMediaIndependentHistory8b10bIdleSets, cMediaIndependentHistoryInGfpSblkCRCErr=cMediaIndependentHistoryInGfpSblkCRCErr, cerentHcRMON=cerentHcRMON, cMediaIndependentOutZeroCredits=cMediaIndependentOutZeroCredits, cMediaIndependentHistoryOutHighCapacityGfpFrames=cMediaIndependentHistoryOutHighCapacityGfpFrames, cMediaIndependentHistoryOversizeDropped=cMediaIndependentHistoryOversizeDropped, cMediaIndependentGfpRoundTripLatency=cMediaIndependentGfpRoundTripLatency, cMediaIndependentTable=cMediaIndependentTable, cMediaIndependentHistoryInGfpSBitErr=cMediaIndependentHistoryInGfpSBitErr, cMediaIndependentHistoryEntry=cMediaIndependentHistoryEntry, cMediaIndependentHistoryInHighCapacityGfpFrames=cMediaIndependentHistoryInHighCapacityGfpFrames, cMediaIndependentHistoryInGfpMBitErr=cMediaIndependentHistoryInGfpMBitErr, cMediaIndependentHighCapacity8b10bDataSets=cMediaIndependentHighCapacity8b10bDataSets, cMediaIndependentHistoryInHighCapacityGfpOctets=cMediaIndependentHistoryInHighCapacityGfpOctets, cMediaIndependentHistoryInJunkInterPkts=cMediaIndependentHistoryInJunkInterPkts, cMediaIndependentOutGfpOctets=cMediaIndependentOutGfpOctets, cMediaIndependentRxLcvErrors=cMediaIndependentRxLcvErrors, cMediaIndependentHdlcInAborts=cMediaIndependentHdlcInAborts, cMediaIndependentInDistanceExtBuffers=cMediaIndependentInDistanceExtBuffers, cMediaIndependentHistoryOverflow8b10bDataSets=cMediaIndependentHistoryOverflow8b10bDataSets, cMediaIndependentHistoryInGfpCIDInvalid=cMediaIndependentHistoryInGfpCIDInvalid, cMediaIndependentOutPktsDroppedInternalCongestion=cMediaIndependentOutPktsDroppedInternalCongestion, cMediaIndependenHistoryControlGroup=cMediaIndependenHistoryControlGroup, cMediaIndependentHistoryInOverflowGfpFrames=cMediaIndependentHistoryInOverflowGfpFrames, cMediaIndependentHistoryInOverflowGfpOctets=cMediaIndependentHistoryInOverflowGfpOctets, cMediaIndependentHistoryControlDataSource=cMediaIndependentHistoryControlDataSource, cMediaIndependentHistoryInControlFrames=cMediaIndependentHistoryInControlFrames, cMediaIndependentHistory8b10bLossOfSync=cMediaIndependentHistory8b10bLossOfSync, cMediaIndependentHistory8b10bInvalidOrdSetsDispErrorsSum=cMediaIndependentHistory8b10bInvalidOrdSetsDispErrorsSum, cMediaIndependentHistoryGroup=cMediaIndependentHistoryGroup, cMediaIndependentHistoryPcsErrCount=cMediaIndependentHistoryPcsErrCount, cMediaIndependentGroup=cMediaIndependentGroup, cMediaIndependentInGfpOctets=cMediaIndependentInGfpOctets, cMediaIndependentHistoryOutBadCRC=cMediaIndependentHistoryOutBadCRC, cMediaIndependentPkts1519toMaxOctets=cMediaIndependentPkts1519toMaxOctets, cMediaIndependentHistoryHdlcInOctets=cMediaIndependentHistoryHdlcInOctets, cMediaIndependentHistoryOutGfpOctets=cMediaIndependentHistoryOutGfpOctets, cMediaIndependentInGfpCRCErr=cMediaIndependentInGfpCRCErr, cMediaIndependentHistory8b10bEncodingDispErr=cMediaIndependentHistory8b10bEncodingDispErr, cMediaIndependentInFramesTooLong=cMediaIndependentInFramesTooLong, cMediaIndependentOutPayloadCrcErrors=cMediaIndependentOutPayloadCrcErrors, cMediaIndependentInErrorBytePkts=cMediaIndependentInErrorBytePkts, cMediaIndependentOutFramesTooLong=cMediaIndependentOutFramesTooLong, cMediaIndependentHistoryInErrorBytePkts=cMediaIndependentHistoryInErrorBytePkts, cMediaIndependentOutHighCapacityGfpFrames=cMediaIndependentOutHighCapacityGfpFrames, cMediaIndependentHistoryPcsEgRxErrFrames=cMediaIndependentHistoryPcsEgRxErrFrames, cMediaIndependentPcsErrCount=cMediaIndependentPcsErrCount, cMediaIndependentHistoryHdlcInAborts=cMediaIndependentHistoryHdlcInAborts, cMediaIndependent8b10bLossOfSync=cMediaIndependent8b10bLossOfSync, cMediaIndependent8b10bNonIdleSets=cMediaIndependent8b10bNonIdleSets, cMediaIndependentInRecvrReady=cMediaIndependentInRecvrReady, cMediaIndependent8b10bIdleSets=cMediaIndependent8b10bIdleSets, cMediaIndependentLinkRecoveries=cMediaIndependentLinkRecoveries, cMediaIndependentHistoryControlOwner=cMediaIndependentHistoryControlOwner, cMediaIndependentOverflow8b10bDataSets=cMediaIndependentOverflow8b10bDataSets, cMediaIndependentHistoryOutOverflowPkts=cMediaIndependentHistoryOutOverflowPkts, cMediaIndependentHistoryOutHighCapacityPkts=cMediaIndependentHistoryOutHighCapacityPkts, cMediaIndependentEntry=cMediaIndependentEntry, cMediaIndependentHistoryTxLcvErrors=cMediaIndependentHistoryTxLcvErrors, cMediaIndependentHistoryInFramesTooLong=cMediaIndependentHistoryInFramesTooLong, cMediaIndependentInOverflowGfpOctets=cMediaIndependentInOverflowGfpOctets, cMediaIndependentPcsErrCount2=cMediaIndependentPcsErrCount2, cMediaIndependentHistoryIndex=cMediaIndependentHistoryIndex, cMediaIndependentHistoryOutOversizePkts=cMediaIndependentHistoryOutOversizePkts, cerentHcRmonMIBGroups=cerentHcRmonMIBGroups, cMediaIndependentHistoryPkts1519toMaxOctets=cMediaIndependentHistoryPkts1519toMaxOctets, cMediaIndependentInGfpLFDRaised=cMediaIndependentInGfpLFDRaised, cMediaIndependentHistoryHdlcPktDrops=cMediaIndependentHistoryHdlcPktDrops, cMediaIndependentHistoryPcs49RxErrBer=cMediaIndependentHistoryPcs49RxErrBer, cMediaIndependentInHighCapacityGfpOctets=cMediaIndependentInHighCapacityGfpOctets, cMediaIndependentInGfpTypeInvalid=cMediaIndependentInGfpTypeInvalid, cMediaIndependentHistoryOutOctets=cMediaIndependentHistoryOutOctets, cMediaIndependentInPauseFrames=cMediaIndependentInPauseFrames, cerentHcRmon=cerentHcRmon, cMediaIndependentHistoryOutHighCapacityOctets=cMediaIndependentHistoryOutHighCapacityOctets, cMediaIndependentOutOverflowGfpOctets=cMediaIndependentOutOverflowGfpOctets, cMediaIndependentInHighCapacityGfpFrames=cMediaIndependentInHighCapacityGfpFrames, cMediaIndependentInOverflowGfpFrames=cMediaIndependentInOverflowGfpFrames, cMediaIndependentInUnknownOpcodeFrames=cMediaIndependentInUnknownOpcodeFrames, cMediaIndependentHistoryDropEvents=cMediaIndependentHistoryDropEvents, cMediaIndependentHistoryPcs49RxErrDec=cMediaIndependentHistoryPcs49RxErrDec, cMediaIndependentHistoryOutRecvrReady=cMediaIndependentHistoryOutRecvrReady, cMediaIndependentOutFramesTruncated=cMediaIndependentOutFramesTruncated, cMediaIndependentOutCredits=cMediaIndependentOutCredits, cMediaIndependentHistoryInCredits=cMediaIndependentHistoryInCredits, cMediaIndependent8b10bDataSets=cMediaIndependent8b10bDataSets, cMediaIndependentHistoryInNUCastHighCapacityPkts=cMediaIndependentHistoryInNUCastHighCapacityPkts, cMediaIndependentHistoryInPktsDroppedInternalCongestion=cMediaIndependentHistoryInPktsDroppedInternalCongestion, cMediaIndependentHistoryInHighCapacityPkts=cMediaIndependentHistoryInHighCapacityPkts, cMediaIndependentInControlFrames=cMediaIndependentInControlFrames, cMediaIndependentHighCapacity8b10bIdleSets=cMediaIndependentHighCapacity8b10bIdleSets, cMediaIndependentInFramingErrorPkts=cMediaIndependentInFramingErrorPkts, cMediaIndependentHistoryControlBucketsRequested=cMediaIndependentHistoryControlBucketsRequested, cMediaIndependentOutDistanceExtBuffers=cMediaIndependentOutDistanceExtBuffers, cMediaIndependentHistoryControlIndex=cMediaIndependentHistoryControlIndex, cMediaIndependentHistoryInFramesTruncated=cMediaIndependentHistoryInFramesTruncated, cMediaIndependentHistoryInGfpOctets=cMediaIndependentHistoryInGfpOctets, cMediaIndependent8b10bInvalidOrdSetsDispErrorsSum=cMediaIndependent8b10bInvalidOrdSetsDispErrorsSum, cMediaIndependentOverflow8b10bNonIdleSets=cMediaIndependentOverflow8b10bNonIdleSets, cMediaIndependentHdlcPktDrops=cMediaIndependentHdlcPktDrops, cMediaIndependentHistoryInBadCRC=cMediaIndependentHistoryInBadCRC, cMediaIndependentHistoryInOverflowOctets=cMediaIndependentHistoryInOverflowOctets, cMediaIndependentHistoryInUnknownOpcodeFrames=cMediaIndependentHistoryInUnknownOpcodeFrames, cMediaIndependentInPktsDroppedInternalCongestion=cMediaIndependentInPktsDroppedInternalCongestion, cMediaIndependentHistoryInNUCastPkts=cMediaIndependentHistoryInNUCastPkts, cMediaIndependentHistoryOutShortPkts=cMediaIndependentHistoryOutShortPkts, cMediaIndependentOutOverflowGfpFrames=cMediaIndependentOutOverflowGfpFrames, cMediaIndependentHistoryInRecvrReady=cMediaIndependentHistoryInRecvrReady, cMediaIndependentHistoryOutOverflowGfpFrames=cMediaIndependentHistoryOutOverflowGfpFrames, cMediaIndependentHistoryInOctets=cMediaIndependentHistoryInOctets, cMediaIndependentOutHighCapacityGfpOctets=cMediaIndependentOutHighCapacityGfpOctets, cMediaIndependentPcsEgRxErrFrames=cMediaIndependentPcsEgRxErrFrames, cMediaIndependentHistoryInErrors=cMediaIndependentHistoryInErrors, cMediaIndependentHistoryInDistanceExtBuffers=cMediaIndependentHistoryInDistanceExtBuffers, cMediaIndependentHistory8b10bNonIdleSets=cMediaIndependentHistory8b10bNonIdleSets, cMediaIndependentOutOversizePkts=cMediaIndependentOutOversizePkts, cMediaIndependentHistoryLinkRecoveries=cMediaIndependentHistoryLinkRecoveries, cMediaIndependentHistory8b10bInvalidOrdSets=cMediaIndependentHistory8b10bInvalidOrdSets, cerentHcRmonMIBCompliances=cerentHcRmonMIBCompliances, cMediaIndependentHistorySampleIndex=cMediaIndependentHistorySampleIndex, cMediaIndependentHistoryOutOverflowGfpOctets=cMediaIndependentHistoryOutOverflowGfpOctets, cMediaIndependentHistoryOutGfpFrames=cMediaIndependentHistoryOutGfpFrames, cMediaIndependentHdlcInOctets=cMediaIndependentHdlcInOctets, cMediaIndependentInGfpCIDInvalid=cMediaIndependentInGfpCIDInvalid, cMediaIndependentHistoryOutErrors=cMediaIndependentHistoryOutErrors, cMediaIndependentHistoryControlEntry=cMediaIndependentHistoryControlEntry, cMediaIndependentHistoryInGfpLFDRaised=cMediaIndependentHistoryInGfpLFDRaised, cerentHcRmonMIBConformance=cerentHcRmonMIBConformance, cMediaIndependentHistoryOverflow8b10bIdleSets=cMediaIndependentHistoryOverflow8b10bIdleSets, cMediaIndependentHistoryInFramingErrorPkts=cMediaIndependentHistoryInFramingErrorPkts, cMediaIndependentHistoryOutDistanceExtBuffers=cMediaIndependentHistoryOutDistanceExtBuffers, cMediaIndependentPcs49RxErrBer=cMediaIndependentPcs49RxErrBer, cMediaIndependentPkts1519to1522Octets=cMediaIndependentPkts1519to1522Octets, cMediaIndependent8b10bInvalidOrdSets=cMediaIndependent8b10bInvalidOrdSets, cMediaIndependentHistoryOutNUCastHighCapacityPkts=cMediaIndependentHistoryOutNUCastHighCapacityPkts, cMediaIndependentHdlcOutOctets=cMediaIndependentHdlcOutOctets, cMediaIndependentHistoryTable=cMediaIndependentHistoryTable, cMediaIndependentHistoryInGfpFrames=cMediaIndependentHistoryInGfpFrames, cMediaIndependentHistoryHighCapacity8b10bDataSets=cMediaIndependentHistoryHighCapacity8b10bDataSets, cMediaIndependentInFramesTruncated=cMediaIndependentInFramesTruncated, cMediaIndependentHistoryOutPktsDroppedInternalCongestion=cMediaIndependentHistoryOutPktsDroppedInternalCongestion, cerentHcMediaIndependentCompliance=cerentHcMediaIndependentCompliance, cMediaIndependentHistoryInGfpTypeInvalid=cMediaIndependentHistoryInGfpTypeInvalid, cMediaIndependentHistoryOutZeroCredits=cMediaIndependentHistoryOutZeroCredits, cMediaIndependentHistoryRxLcvErrors=cMediaIndependentHistoryRxLcvErrors, cMediaIndependentHistoryInShortPkts=cMediaIndependentHistoryInShortPkts, cMediaIndependentHistoryOutPayloadCrcErrors=cMediaIndependentHistoryOutPayloadCrcErrors, cMediaIndependentHistoryOutHighCapacityGfpOctets=cMediaIndependentHistoryOutHighCapacityGfpOctets, cMediaIndependentHistoryInGfpCRCErr=cMediaIndependentHistoryInGfpCRCErr, cMediaIndependentHistoryHighCapacity8b10bIdleSets=cMediaIndependentHistoryHighCapacity8b10bIdleSets, cMediaIndependentHistoryOverflow8b10bNonIdleSets=cMediaIndependentHistoryOverflow8b10bNonIdleSets, cMediaIndependentHistoryOutPauseFrames=cMediaIndependentHistoryOutPauseFrames, cMediaIndependentInGfpCSFRaised=cMediaIndependentInGfpCSFRaised, cMediaIndependentHistoryInGfpCSFRaised=cMediaIndependentHistoryInGfpCSFRaised, cMediaIndependentHistoryOutFramesTruncated=cMediaIndependentHistoryOutFramesTruncated, cMediaIndependentHistoryPcsErrCount2=cMediaIndependentHistoryPcsErrCount2, cMediaIndependentInGfpSBitErr=cMediaIndependentInGfpSBitErr, cMediaIndependentHighCapacity8b10bNonIdleSets=cMediaIndependentHighCapacity8b10bNonIdleSets, cMediaIndependentHistoryOutNUCastPkts=cMediaIndependentHistoryOutNUCastPkts, cMediaIndependentHistoryInOverflowPkts=cMediaIndependentHistoryInOverflowPkts)
