#
# PySNMP MIB module EICON-SDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EICON-SDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, ObjectIdentity, IpAddress, iso, Gauge32, ModuleIdentity, Unsigned32, MibIdentifier, NotificationType, Counter32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "ObjectIdentity", "IpAddress", "iso", "Gauge32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "Counter32", "Bits", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
class OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("disabled", 2), ("ready", 3), ("active", 4), ("busy", 5))

class AdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("start", 1), ("stop", 2), ("dump", 3), ("test", 4), ("invalid", 5))

class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class LinkRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

class StationAddr(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

sdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2))
sdlcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1), )
if mibBuilder.loadTexts: sdlcCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgTable.setDescription('The SDLC configuration attributes table, one row per port. This information comes from the configuration file (db).')
sdlcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1), ).setIndexNames((0, "EICON-SDLC-MIB", "sdlcCfgPortRef"))
if mibBuilder.loadTexts: sdlcCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgEntry.setDescription('The set of SDLC configuration attributes for one port.')
sdlcCfgPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgPortRef.setDescription('The Id of the port, equal to portIndex from the port group. It identifies the port to which the configuration parameters apply. ')
sdlcCfgMaxLinkStation = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 2), LinkRef().clone(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgMaxLinkStation.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgMaxLinkStation.setDescription('Maximum number of stations for this port (1..32), default is 9.')
sdlcCfgT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(2900)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgT1.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgT1.setDescription('Check point timer, default is 2900.')
sdlcCfgT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgT2.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgT2.setDescription('Poll delay timer, default is 200.')
sdlcCfgT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(15000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgT3.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgT3.setDescription('Slow poll timer, default is 15000.')
sdlcCfgT4 = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(60000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgT4.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgT4.setDescription('Idle timer, default is 60000.')
sdlcCfgMaxFrameSz = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(267, 8203)).clone(267)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgMaxFrameSz.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgMaxFrameSz.setDescription('Number of octets per frame (N1), default is 267.')
sdlcCfgMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgMaxRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgMaxRetryCount.setDescription('Maximum retry count (N2), default is 10.')
sdlcCfgMaxWindowSz = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCfgMaxWindowSz.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCfgMaxWindowSz.setDescription('Maximum window size (K), default is 7.')
sdlcInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2), )
if mibBuilder.loadTexts: sdlcInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoTable.setDescription('The dynamic (status) attributes table, one row per port (line).')
sdlcInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1), ).setIndexNames((0, "EICON-SDLC-MIB", "sdlcInfoPortRef"))
if mibBuilder.loadTexts: sdlcInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoEntry.setDescription('The set of status attributes for one port (line).')
sdlcInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoPortRef.setDescription('The Id of the port, equal to portIndex from the port group. It identifies the port to which the information parameters apply. ')
sdlcInfoAdminStatusCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcInfoAdminStatusCtr.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoAdminStatusCtr.setDescription('The control parameter, used to stop or start the SDLC port.')
sdlcInfoOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 3), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoOperStatus.setDescription('The status of the SDLC line.')
sdlcInfoDial = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("dial-up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoDial.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoDial.setDescription('The value indicates whether the port is connected to a leased line or to a dial-up line.')
sdlcInfoDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoDuplex.setDescription('The value indicates the type of the device to which the port is connected. The mode of transmission/reception can be full or half duplex.')
sdlcInfoMaxFrameSz = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoMaxFrameSz.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoMaxFrameSz.setDescription('The maximum frame size ')
sdlcInfoMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoMaxRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoMaxRetryCount.setDescription('The number of retries for negative acknowledgement of a frame.')
sdlcInfoMaxWindowSz = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoMaxWindowSz.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoMaxWindowSz.setDescription('Maximum window size.')
sdlcInfoMaxLinkStation = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoMaxLinkStation.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoMaxLinkStation.setDescription('The number of multi-drop stations defined for that line.')
sdlcInfoNbStationInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoNbStationInUse.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoNbStationInUse.setDescription('The number of stations currently in use.')
sdlcInfoStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoStartTime.setDescription('The time at which the line was started. Equals to sysUpTime.')
sdlcInfoModemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcInfoModemTime.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcInfoModemTime.setDescription('The time at which the modem state changed. Equals to sysUpTime.')
sdlcLinkInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3), )
if mibBuilder.loadTexts: sdlcLinkInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoTable.setDescription('Dynamic attributes table, one row per link station')
sdlcLinkInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1), ).setIndexNames((0, "EICON-SDLC-MIB", "sdlcLinkInfoPortRef"), (0, "EICON-SDLC-MIB", "sdlcLinkInfoStationAddr"))
if mibBuilder.loadTexts: sdlcLinkInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoEntry.setDescription('The set of dynamic attributes for one link station.')
sdlcLinkInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoPortRef.setDescription('The Id of the port, equal to portIndex from the port group. It identifies the port to which the information parameters apply. ')
sdlcLinkInfoStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 2), StationAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoStationAddr.setDescription('The address of the station attached to the line. This number represents a logical connection number and is assigned by protocol software.')
sdlcLinkInfoAdminStatusCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLinkInfoAdminStatusCtr.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoAdminStatusCtr.setDescription('The control parameter used to close the connection.')
sdlcLinkInfoProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("closed", 1), ("closing", 2), ("opening", 3), ("opened", 4), ("resetting", 5), ("wait-reset", 6), ("wait-open", 7), ("xid-send", 8), ("xid-recv", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoProtocolState.setDescription('The protocol state of the SDLC link.')
sdlcLinkInfoUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("closed", 1), ("closing", 2), ("opening", 3), ("opened", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoUserState.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoUserState.setDescription('The user state of the connection.')
sdlcLinkInfoStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secondary", 1), ("primary", 2), ("negotiable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoStationType.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoStationType.setDescription('The type of link station.')
sdlcLinkInfoStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoStartTime.setDescription('The time at which this link was started. Equals to sysUpTime.')
sdlcLinkInfoChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoChangeTime.setDescription('The time at which the link state changed. Equals to sysUpTime.')
sdlcLinkInfoDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoDataTime.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoDataTime.setDescription('The time of non-poll data. Equals to sysUpTime.')
sdlcLinkInfoMaxOut = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoMaxOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoMaxOut.setDescription('Maximum number of output frames per window.')
sdlcLinkInfoMaxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoMaxIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoMaxIn.setDescription('Maximum number of input frames per window.')
sdlcLinkInfoMaxData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoMaxData.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoMaxData.setDescription(' Maximum number of octets per frame.')
sdlcLinkInfoLocalBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoLocalBusy.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoLocalBusy.setDescription('Busy state flag.')
sdlcLinkInfoRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoRemoteBusy.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoRemoteBusy.setDescription('Busy state flag.')
sdlcLinkInfoNS = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoNS.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoNS.setDescription('The NS counter.')
sdlcLinkInfoNR = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoNR.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoNR.setDescription('The NR counter.')
sdlcLinkInfoLNR = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkInfoLNR.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkInfoLNR.setDescription('Last received sequence number.')
sdlcCountTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4), )
if mibBuilder.loadTexts: sdlcCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountTable.setDescription('The runtime counters table, one row per port')
sdlcCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1), ).setIndexNames((0, "EICON-SDLC-MIB", "sdlcCountPortRef"))
if mibBuilder.loadTexts: sdlcCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountEntry.setDescription('The set of counters values for one port.')
sdlcCountPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountPortRef.setDescription('The Id of the port, equal to portIndex from the port group. It identifies the port to which the information parameters apply. ')
sdlcCountT1expires = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountT1expires.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountT1expires.setDescription(' The number of times the Checkpoint Timer (T1) protocol timer has been exceeded.')
sdlcCountRetransmis = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountRetransmis.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountRetransmis.setDescription('The number of retransmitted frames. ')
sdlcCountSNRMTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountSNRMTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountSNRMTxs.setDescription('The number of set normal response mode U-frames transmitted. ')
sdlcCountSNRMRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountSNRMRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountSNRMRxs.setDescription('The number of set normal response mode U-frames received. ')
sdlcCountDISCTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountDISCTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountDISCTxs.setDescription('The number of disconnect U-frames sent. ')
sdlcCountDISCRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountDISCRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountDISCRxs.setDescription('The number of disconnect U-frames received. ')
sdlcCountUAsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountUAsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountUAsTxs.setDescription('The number of unnumbered acknowledgement U-frames sent. ')
sdlcCountUAsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountUAsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountUAsRxs.setDescription('The number of unnumbered acknowledgement U-frames received. ')
sdlcCountDMsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountDMsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountDMsTxs.setDescription('The number of disconnected mode U-frames sent. ')
sdlcCountDMsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountDMsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountDMsRxs.setDescription('The number of disconnected mode U-frames received. ')
sdlcCountFRMRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountFRMRsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountFRMRsTxs.setDescription('The number of frame reject U-frames sent. ')
sdlcCountFRMRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountFRMRsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountFRMRsRxs.setDescription('The number of frame reject U-frames received. ')
sdlcCountXIDsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountXIDsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountXIDsTxs.setDescription('The number of XID U-frames sent. ')
sdlcCountXIDsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountXIDsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountXIDsRxs.setDescription('The number of XID U-frames received. ')
sdlcCountINFOsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountINFOsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountINFOsTxs.setDescription('The number of information U-frames sent. ')
sdlcCountINFOsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountINFOsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountINFOsRxs.setDescription('The number of information frames received. ')
sdlcCountRRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountRRsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountRRsTxs.setDescription('The number of receiver ready I-frames sent. ')
sdlcCountRRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountRRsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountRRsRxs.setDescription('The number of receiver ready I-frames received. ')
sdlcCountRNRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountRNRsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountRNRsTxs.setDescription('The number of receiver not ready I-frames sent. ')
sdlcCountRNRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountRNRsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountRNRsRxs.setDescription('The number of receiver not ready I-frames received. ')
sdlcCountREJsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountREJsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountREJsTxs.setDescription('The number of reject I-frames sent. ')
sdlcCountREJsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountREJsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountREJsRxs.setDescription('The number of reject I-frames received. ')
sdlcCountTestTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountTestTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountTestTxs.setDescription('The number of TEST U-frames sent. ')
sdlcCountTestRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountTestRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountTestRxs.setDescription('The number of TEST U-frames received. ')
sdlcCountBadFcsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountBadFcsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountBadFcsTxs.setDescription('The number of bad U-frames sent. ')
sdlcCountBadFcsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountBadFcsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountBadFcsRxs.setDescription('The number of bad U-frames received. ')
sdlcCountAbortTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountAbortTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountAbortTxs.setDescription('The number of Abort U-frames sent. ')
sdlcCountAbortRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountAbortRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountAbortRxs.setDescription('The number of Abort U-frames received. ')
sdlcCountTxUnderRs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountTxUnderRs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountTxUnderRs.setDescription('The number of times an underrun occured.')
sdlcCountRxOverRs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountRxOverRs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountRxOverRs.setDescription('The number of times an overrun occured.')
sdlcCountUnknowTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountUnknowTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountUnknowTxs.setDescription('The number of unknown frames transmitted.')
sdlcCountUnknowRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCountUnknowRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCountUnknowRxs.setDescription('The number of unknown frames recieved.')
sdlcLinkCountTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5), )
if mibBuilder.loadTexts: sdlcLinkCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountTable.setDescription('The runtime counters table, one row per link station.')
sdlcLinkCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1), ).setIndexNames((0, "EICON-SDLC-MIB", "sdlcLinkCountPortRef"), (0, "EICON-SDLC-MIB", "sdlcLinkCountStationRef"))
if mibBuilder.loadTexts: sdlcLinkCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountEntry.setDescription('The set of counters values for one specific link station.')
sdlcLinkCountPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountPortRef.setDescription('The Id of the port, equal to portIndex from the port group. It identifies the port to which the information parameters apply. ')
sdlcLinkCountStationRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 2), StationAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountStationRef.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountStationRef.setDescription('The address of the station attached to the line. This number represents a logical connection number and is assigned by protocol software. Equals to sdlcLinkInfoAddr.')
sdlcLinkCountT1expires = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountT1expires.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountT1expires.setDescription(' The number of times the Checkpoint timer (T1) protocol timer has been exceeded.')
sdlcLinkCountRetransmis = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountRetransmis.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountRetransmis.setDescription('The number of retransmitted frames. ')
sdlcLinkCountSNRMTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountSNRMTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountSNRMTxs.setDescription('The number of set normal response mode U-frames transmitted. ')
sdlcLinkCountSNRMRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountSNRMRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountSNRMRxs.setDescription('The number of set normal response mode U-frames received. ')
sdlcLinkCountDISCTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountDISCTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountDISCTxs.setDescription('The number of disconnect U-frames sent. ')
sdlcLinkCountDISCRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountDISCRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountDISCRxs.setDescription('The number of disconnect U-frames received. ')
sdlcLinkCountUAsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountUAsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountUAsTxs.setDescription('The number of unnumbered acknowledgement U-frames sent. ')
sdlcLinkCountUAsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountUAsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountUAsRxs.setDescription('The number of unnumbered acknowledgement U-frames recvd.')
sdlcLinkCountDMsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountDMsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountDMsTxs.setDescription('The number of disconnected mode U-frames sent. ')
sdlcLinkCountDMsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountDMsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountDMsRxs.setDescription('The number of disconnected mode U-frames received. ')
sdlcLinkCountFRMRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountFRMRsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountFRMRsTxs.setDescription('The number of frame reject U-frames sent. ')
sdlcLinkCountFRMRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountFRMRsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountFRMRsRxs.setDescription('The number of frame reject U-frames received. ')
sdlcLinkCountXIDsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountXIDsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountXIDsTxs.setDescription('The number of XID U-frames sent. ')
sdlcLinkCountXIDsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountXIDsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountXIDsRxs.setDescription('The number of XID U-frames received. ')
sdlcLinkCountINFOsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountINFOsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountINFOsTxs.setDescription('The number of information U-frames sent. ')
sdlcLinkCountINFOsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountINFOsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountINFOsRxs.setDescription('The number of information U-frames received. ')
sdlcLinkCountRRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountRRsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountRRsTxs.setDescription('The number of receiver ready I-frames sent.')
sdlcLinkCountRRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountRRsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountRRsRxs.setDescription('The number of receiver ready I-frames received.')
sdlcLinkCountRNRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountRNRsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountRNRsTxs.setDescription('The number of receiver not ready I-frames sent.')
sdlcLinkCountRNRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountRNRsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountRNRsRxs.setDescription('The number of receiver not ready I-frames received.')
sdlcLinkCountREJsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountREJsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountREJsTxs.setDescription('The number of reject I-frames sent.')
sdlcLinkCountREJsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountREJsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountREJsRxs.setDescription('The number of reject I-frames received.')
sdlcLinkCountTestTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountTestTxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountTestTxs.setDescription('The number of TEST U-frames sent.')
sdlcLinkCountTestRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLinkCountTestRxs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLinkCountTestRxs.setDescription('The number of TEST U-frames received.')
mibBuilder.exportSymbols("EICON-SDLC-MIB", sdlcCountSNRMRxs=sdlcCountSNRMRxs, sdlcCountDISCRxs=sdlcCountDISCRxs, sdlcCountTestRxs=sdlcCountTestRxs, sdlcCfgMaxRetryCount=sdlcCfgMaxRetryCount, sdlcCfgT2=sdlcCfgT2, sdlcLinkInfoStationAddr=sdlcLinkInfoStationAddr, sdlcLinkCountINFOsRxs=sdlcLinkCountINFOsRxs, sdlcCountDMsRxs=sdlcCountDMsRxs, sdlcCfgPortRef=sdlcCfgPortRef, sdlcLinkCountT1expires=sdlcLinkCountT1expires, sdlcLinkInfoProtocolState=sdlcLinkInfoProtocolState, sdlcCountRNRsRxs=sdlcCountRNRsRxs, sdlcInfoMaxWindowSz=sdlcInfoMaxWindowSz, sdlcLinkInfoStationType=sdlcLinkInfoStationType, sdlcLinkInfoChangeTime=sdlcLinkInfoChangeTime, sdlcInfoMaxRetryCount=sdlcInfoMaxRetryCount, sdlcLinkCountRNRsRxs=sdlcLinkCountRNRsRxs, sdlcLinkCountRNRsTxs=sdlcLinkCountRNRsTxs, sdlcInfoAdminStatusCtr=sdlcInfoAdminStatusCtr, sdlcCountRxOverRs=sdlcCountRxOverRs, sdlcCountTable=sdlcCountTable, sdlcCountRNRsTxs=sdlcCountRNRsTxs, sdlcCountFRMRsTxs=sdlcCountFRMRsTxs, sdlcLinkCountSNRMRxs=sdlcLinkCountSNRMRxs, sdlcInfoNbStationInUse=sdlcInfoNbStationInUse, sdlcLinkInfoMaxData=sdlcLinkInfoMaxData, sdlcLinkInfoPortRef=sdlcLinkInfoPortRef, sdlcLinkCountEntry=sdlcLinkCountEntry, sdlcLinkCountINFOsTxs=sdlcLinkCountINFOsTxs, sdlcLinkCountDMsTxs=sdlcLinkCountDMsTxs, sdlcLinkCountXIDsTxs=sdlcLinkCountXIDsTxs, sdlcInfoMaxLinkStation=sdlcInfoMaxLinkStation, sdlcInfoStartTime=sdlcInfoStartTime, sdlcCfgT3=sdlcCfgT3, sdlcLinkInfoMaxOut=sdlcLinkInfoMaxOut, StationAddr=StationAddr, sdlcCountRRsRxs=sdlcCountRRsRxs, sdlcInfoTable=sdlcInfoTable, management=management, sdlcCountXIDsTxs=sdlcCountXIDsTxs, sdlcCountREJsTxs=sdlcCountREJsTxs, sdlcCfgEntry=sdlcCfgEntry, sdlc=sdlc, sdlcLinkCountXIDsRxs=sdlcLinkCountXIDsRxs, sdlcCountTxUnderRs=sdlcCountTxUnderRs, sdlcCountUAsRxs=sdlcCountUAsRxs, sdlcLinkCountDMsRxs=sdlcLinkCountDMsRxs, sdlcCountDISCTxs=sdlcCountDISCTxs, module=module, sdlcCfgMaxLinkStation=sdlcCfgMaxLinkStation, AdminState=AdminState, sdlcCountTestTxs=sdlcCountTestTxs, sdlcCountREJsRxs=sdlcCountREJsRxs, sdlcLinkInfoNR=sdlcLinkInfoNR, sdlcCfgT4=sdlcCfgT4, sdlcLinkInfoRemoteBusy=sdlcLinkInfoRemoteBusy, sdlcLinkInfoLocalBusy=sdlcLinkInfoLocalBusy, sdlcCountSNRMTxs=sdlcCountSNRMTxs, sdlcLinkCountSNRMTxs=sdlcLinkCountSNRMTxs, sdlcLinkCountFRMRsRxs=sdlcLinkCountFRMRsRxs, sdlcCountAbortTxs=sdlcCountAbortTxs, sdlcCountUnknowRxs=sdlcCountUnknowRxs, sdlcCountRRsTxs=sdlcCountRRsTxs, OperState=OperState, sdlcLinkInfoUserState=sdlcLinkInfoUserState, sdlcLinkInfoTable=sdlcLinkInfoTable, sdlcCountINFOsTxs=sdlcCountINFOsTxs, sdlcLinkInfoAdminStatusCtr=sdlcLinkInfoAdminStatusCtr, sdlcCfgT1=sdlcCfgT1, sdlcCountT1expires=sdlcCountT1expires, sdlcInfoOperStatus=sdlcInfoOperStatus, sdlcLinkCountRetransmis=sdlcLinkCountRetransmis, sdlcLinkCountREJsRxs=sdlcLinkCountREJsRxs, sdlcInfoModemTime=sdlcInfoModemTime, sdlcCountFRMRsRxs=sdlcCountFRMRsRxs, sdlcLinkCountTestTxs=sdlcLinkCountTestTxs, sdlcCountBadFcsTxs=sdlcCountBadFcsTxs, sdlcInfoDial=sdlcInfoDial, sdlcLinkInfoEntry=sdlcLinkInfoEntry, sdlcInfoEntry=sdlcInfoEntry, sdlcLinkCountFRMRsTxs=sdlcLinkCountFRMRsTxs, sdlcLinkInfoMaxIn=sdlcLinkInfoMaxIn, sdlcLinkCountPortRef=sdlcLinkCountPortRef, sdlcCfgMaxFrameSz=sdlcCfgMaxFrameSz, LinkRef=LinkRef, sdlcCountPortRef=sdlcCountPortRef, sdlcCountINFOsRxs=sdlcCountINFOsRxs, sdlcInfoMaxFrameSz=sdlcInfoMaxFrameSz, sdlcCountRetransmis=sdlcCountRetransmis, sdlcLinkCountUAsTxs=sdlcLinkCountUAsTxs, sdlcCountXIDsRxs=sdlcCountXIDsRxs, sdlcCountUnknowTxs=sdlcCountUnknowTxs, sdlcCountEntry=sdlcCountEntry, mibv2=mibv2, sdlcInfoPortRef=sdlcInfoPortRef, PortRef=PortRef, sdlcCountBadFcsRxs=sdlcCountBadFcsRxs, eicon=eicon, sdlcLinkCountRRsTxs=sdlcLinkCountRRsTxs, sdlcCfgMaxWindowSz=sdlcCfgMaxWindowSz, sdlcCountUAsTxs=sdlcCountUAsTxs, sdlcCfgTable=sdlcCfgTable, sdlcLinkInfoStartTime=sdlcLinkInfoStartTime, sdlcLinkCountStationRef=sdlcLinkCountStationRef, sdlcCountDMsTxs=sdlcCountDMsTxs, sdlcLinkCountTable=sdlcLinkCountTable, sdlcInfoDuplex=sdlcInfoDuplex, sdlcLinkCountDISCRxs=sdlcLinkCountDISCRxs, sdlcLinkCountUAsRxs=sdlcLinkCountUAsRxs, sdlcLinkCountDISCTxs=sdlcLinkCountDISCTxs, sdlcLinkCountREJsTxs=sdlcLinkCountREJsTxs, sdlcLinkCountTestRxs=sdlcLinkCountTestRxs, sdlcLinkInfoDataTime=sdlcLinkInfoDataTime, sdlcLinkCountRRsRxs=sdlcLinkCountRRsRxs, sdlcLinkInfoNS=sdlcLinkInfoNS, sdlcLinkInfoLNR=sdlcLinkInfoLNR, sdlcCountAbortRxs=sdlcCountAbortRxs)
