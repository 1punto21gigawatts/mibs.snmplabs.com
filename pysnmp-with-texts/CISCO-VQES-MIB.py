#
# PySNMP MIB module CISCO-VQES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VQES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, Integer32, Bits, TimeTicks, ObjectIdentity, IpAddress, NotificationType, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "Integer32", "Bits", "TimeTicks", "ObjectIdentity", "IpAddress", "NotificationType", "ModuleIdentity", "MibIdentifier")
TextualConvention, DisplayString, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "TruthValue")
ciscoVqeSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 942))
ciscoVqeSMIB.setRevisions(('2010-01-14 11:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVqeSMIB.setRevisionsDescriptions(('Initial version of the MIB',))
if mibBuilder.loadTexts: ciscoVqeSMIB.setLastUpdated('201002050000Z')
if mibBuilder.loadTexts: ciscoVqeSMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVqeSMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: bxb-iptv-team@cisco.com')
if mibBuilder.loadTexts: ciscoVqeSMIB.setDescription('This MIB module defines a set of objects for monitoring the Visual Quality Experience Server (VQE-S) operational status. VQE-S receives the channel lineups from the VQE Channel Provisioning Tool. Each channel is uniquely identified with a Service Delivery Protocol (SDP) description, including: - IP multicast address - Real-Time Protocol (RTP) port number - Real-Time Control Protocol (RTCP) port number - Unicast feedback target address - RTP and RTCP port numbers VQE-S supports Error Repair (ER) and Rapid Channel Change (RCC) technologies to improve the delivery of IPTV video services. When a VQE client (VQE-C) notices a missing packet or a group of missing packets, it sends an RTCP Feedback Generic NACK to the VQE-S. The VQE-S looks into its cache, and if it has any of the requested packets, it sends them immediately to the VQE-C as RTP retransmission repair packets. When the VQE-C detects a channel change, it immediately sends an RTCP Picture Loss Indication (PLI) NACK to the VQE-S to request the information for the VQE-C to recover its picture. Both ER and RCC are unicast retransmissions. ')
ciscoVqeSMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 0))
ciscoVqeSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 1))
ciscoVqeSMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 2))
cvqsControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 1))
cvqsChannelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2))
cvqsErrorRepair = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 3))
cvqsRCC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 4))
cvqsCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 5))
cvqsNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvqsNotificationsEnable.setStatus('current')
if mibBuilder.loadTexts: cvqsNotificationsEnable.setDescription('This object specifies whether cvqsChannelUp and cvqsChannelDown notifications will be generated or not. A false value will prevent these notifications from being generated.')
cvqsNumberofChannels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsNumberofChannels.setStatus('current')
if mibBuilder.loadTexts: cvqsNumberofChannels.setDescription('This object indicates total number of channels in the channel lineup configuration.')
cvqsActiveChannels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsActiveChannels.setStatus('current')
if mibBuilder.loadTexts: cvqsActiveChannels.setDescription('This object indicates total number of channels successfully parsed from the channel lineup.')
cvqsLastUpdatedTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsLastUpdatedTime.setStatus('current')
if mibBuilder.loadTexts: cvqsLastUpdatedTime.setDescription('This object indicates the time when the channel lineup was last updated.')
cvqsChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4), )
if mibBuilder.loadTexts: cvqsChannelTable.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelTable.setDescription('This table contains the list of channels (i.e., the channel lineup) this VQE-S is servicing.')
cvqsChannelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-VQES-MIB", "cvqsChannelIndex"))
if mibBuilder.loadTexts: cvqsChannelTableEntry.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelTableEntry.setDescription('This entry contains information about one channel seviced by the VQE-S system. The entry is created and removed via the Net-SNMP cache helper.')
cvqsChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cvqsChannelIndex.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelIndex.setDescription('An arbitrary integer-value that uniquely identifies this channel.')
cvqsChannelMulticastIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsChannelMulticastIPType.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelMulticastIPType.setDescription('This object indicates the address type of channel multicast IP address.')
cvqsChannelMulticastIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsChannelMulticastIPAddr.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelMulticastIPAddr.setDescription("This object indicates the channel's multicast IP address.")
cvqsChannelMulticastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsChannelMulticastPort.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelMulticastPort.setDescription("This object indicates the channel's multicast port number.")
cvqsChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inoperative", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsChannelStatus.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelStatus.setDescription('This object indicates the current status of this channel.')
cvqsChannelMemberPopulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsChannelMemberPopulation.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelMemberPopulation.setDescription('This object indicates the number of VQE clients listening to this channel.')
cvqsTotalReceivedERMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 3, 1), Counter64()).setUnits('ER requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalReceivedERMsgs.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalReceivedERMsgs.setDescription('This object indicates the total number of requests for ER (Generic NACK RTCP) messages received.')
cvqsTotalReceivedInvalidERMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 3, 2), Counter64()).setUnits('ER requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalReceivedInvalidERMsgs.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalReceivedInvalidERMsgs.setDescription('This object indicates the number of requests for ER (Generic NACK RTCP messages) received that were invalid.')
cvqsTotalReceivedERPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 3, 3), Counter64()).setUnits('ER packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalReceivedERPkts.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalReceivedERPkts.setDescription('This object indicates the total number of RTP packets requested for retransmission.')
cvqsTotalSentERPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 3, 4), Counter64()).setUnits('ER packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalSentERPkts.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalSentERPkts.setDescription('This object indicates the total number of retransmitted RTP packets.')
cvqsTotalReceivedRCCs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 4, 1), Counter64()).setUnits('RCC requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalReceivedRCCs.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalReceivedRCCs.setDescription('This object indicates the total number of RCC requests received by the VQE-S.')
cvqsTotalAcceptedRCCs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 4, 2), Counter64()).setUnits('RCC requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalAcceptedRCCs.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalAcceptedRCCs.setDescription('This object indicates the total number of RCC requests accepted by the VQE-S.')
cvqsTotalRefusedRCCs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 4, 3), Counter64()).setUnits('RCC requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalRefusedRCCs.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalRefusedRCCs.setDescription('This object indicates the total number of RCC requests not accepted by the VQE-S.')
cvqsTotalRTCPReceivers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 5, 1), Gauge32()).setUnits('RTCP receivers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsTotalRTCPReceivers.setStatus('current')
if mibBuilder.loadTexts: cvqsTotalRTCPReceivers.setDescription('This object indicates the number of currently active RTCP receivers.')
cvqsRejectedRTCPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 5, 2), Counter64()).setUnits('RTCP packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsRejectedRTCPs.setStatus('current')
if mibBuilder.loadTexts: cvqsRejectedRTCPs.setDescription('This object indicates the number of received RTCP packets (ER requests, RCC requests or Receiver Reports) rejected by the VQE-S due to active RTCP receivers in VQE-S reaching their limit of accepting RTCP requests.')
cvqsRejectedERs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 5, 3), Counter64()).setUnits('ER requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsRejectedERs.setStatus('current')
if mibBuilder.loadTexts: cvqsRejectedERs.setDescription('This object indicates the number of received ER requests rejected by the VQE-S due to VQE-S reaching its limit of accepting ER requests.')
cvqsRejectedRCCs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 942, 1, 5, 4), Counter64()).setUnits('RCC requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvqsRejectedRCCs.setStatus('current')
if mibBuilder.loadTexts: cvqsRejectedRCCs.setDescription('This object indicates the number of received RCC requests rejected by the VQE-S due to VQE-S reaching its limit of accepting RCC requests.')
cvqsChannelUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 942, 0, 1)).setObjects(("CISCO-VQES-MIB", "cvqsChannelMulticastIPType"), ("CISCO-VQES-MIB", "cvqsChannelMulticastIPAddr"), ("CISCO-VQES-MIB", "cvqsChannelMulticastPort"))
if mibBuilder.loadTexts: cvqsChannelUp.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelUp.setDescription('This notification indicates that a VQE-S channel status is changed to ACTIVE.')
cvqsChannelDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 942, 0, 2)).setObjects(("CISCO-VQES-MIB", "cvqsChannelMulticastIPType"), ("CISCO-VQES-MIB", "cvqsChannelMulticastIPAddr"), ("CISCO-VQES-MIB", "cvqsChannelMulticastPort"))
if mibBuilder.loadTexts: cvqsChannelDown.setStatus('current')
if mibBuilder.loadTexts: cvqsChannelDown.setDescription('This notification indicates that a VQE-S channel status is changed to INACTIVE or INOPERATIVE.')
cvqsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 1))
cvqsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 2))
cvqsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 1, 1)).setObjects(("CISCO-VQES-MIB", "ciscoVqeSControlGroup"), ("CISCO-VQES-MIB", "ciscoVqeSChannelGroup"), ("CISCO-VQES-MIB", "ciscoVqeSERGroup"), ("CISCO-VQES-MIB", "ciscoVqeSRCCGroup"), ("CISCO-VQES-MIB", "ciscoVqeSCapacityGroup"), ("CISCO-VQES-MIB", "ciscoVqeSNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvqsMIBCompliance = cvqsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cvqsMIBCompliance.setDescription('The compliance statement for entities which implement this MIB.')
ciscoVqeSControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 2, 1)).setObjects(("CISCO-VQES-MIB", "cvqsNotificationsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVqeSControlGroup = ciscoVqeSControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVqeSControlGroup.setDescription('A collection of objects providing the VQE-S control information.')
ciscoVqeSChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 2, 2)).setObjects(("CISCO-VQES-MIB", "cvqsNumberofChannels"), ("CISCO-VQES-MIB", "cvqsActiveChannels"), ("CISCO-VQES-MIB", "cvqsLastUpdatedTime"), ("CISCO-VQES-MIB", "cvqsChannelMulticastIPType"), ("CISCO-VQES-MIB", "cvqsChannelMulticastIPAddr"), ("CISCO-VQES-MIB", "cvqsChannelMulticastPort"), ("CISCO-VQES-MIB", "cvqsChannelStatus"), ("CISCO-VQES-MIB", "cvqsChannelMemberPopulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVqeSChannelGroup = ciscoVqeSChannelGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVqeSChannelGroup.setDescription('A collection of objects providing the VQE-S channel information.')
ciscoVqeSERGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 2, 3)).setObjects(("CISCO-VQES-MIB", "cvqsTotalReceivedERMsgs"), ("CISCO-VQES-MIB", "cvqsTotalReceivedInvalidERMsgs"), ("CISCO-VQES-MIB", "cvqsTotalReceivedERPkts"), ("CISCO-VQES-MIB", "cvqsTotalSentERPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVqeSERGroup = ciscoVqeSERGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVqeSERGroup.setDescription('A collection of objects providing the VQE-S Error Repair information.')
ciscoVqeSRCCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 2, 4)).setObjects(("CISCO-VQES-MIB", "cvqsTotalReceivedRCCs"), ("CISCO-VQES-MIB", "cvqsTotalAcceptedRCCs"), ("CISCO-VQES-MIB", "cvqsTotalRefusedRCCs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVqeSRCCGroup = ciscoVqeSRCCGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVqeSRCCGroup.setDescription('A collection of objects providing the VQE-S Rapid Channel Change information.')
ciscoVqeSCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 2, 5)).setObjects(("CISCO-VQES-MIB", "cvqsTotalRTCPReceivers"), ("CISCO-VQES-MIB", "cvqsRejectedRTCPs"), ("CISCO-VQES-MIB", "cvqsRejectedERs"), ("CISCO-VQES-MIB", "cvqsRejectedRCCs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVqeSCapacityGroup = ciscoVqeSCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVqeSCapacityGroup.setDescription('A collection of objects providing the VQE-S Capacity information.')
ciscoVqeSNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 942, 2, 2, 6)).setObjects(("CISCO-VQES-MIB", "cvqsChannelUp"), ("CISCO-VQES-MIB", "cvqsChannelDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVqeSNotifGroup = ciscoVqeSNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVqeSNotifGroup.setDescription('This group contains the collection of all the notifications for a Cisco VQE-S Entity.')
mibBuilder.exportSymbols("CISCO-VQES-MIB", ciscoVqeSChannelGroup=ciscoVqeSChannelGroup, cvqsNotificationsEnable=cvqsNotificationsEnable, cvqsRejectedRTCPs=cvqsRejectedRTCPs, ciscoVqeSMIB=ciscoVqeSMIB, cvqsTotalReceivedRCCs=cvqsTotalReceivedRCCs, cvqsErrorRepair=cvqsErrorRepair, cvqsChannelStatus=cvqsChannelStatus, cvqsMIBGroups=cvqsMIBGroups, cvqsChannelTable=cvqsChannelTable, cvqsRejectedERs=cvqsRejectedERs, PYSNMP_MODULE_ID=ciscoVqeSMIB, cvqsTotalAcceptedRCCs=cvqsTotalAcceptedRCCs, cvqsChannelTableEntry=cvqsChannelTableEntry, cvqsChannelMulticastIPType=cvqsChannelMulticastIPType, ciscoVqeSControlGroup=ciscoVqeSControlGroup, cvqsChannelIndex=cvqsChannelIndex, cvqsChannelDown=cvqsChannelDown, ciscoVqeSMIBObjects=ciscoVqeSMIBObjects, ciscoVqeSERGroup=ciscoVqeSERGroup, ciscoVqeSMIBConform=ciscoVqeSMIBConform, cvqsChannelUp=cvqsChannelUp, cvqsNumberofChannels=cvqsNumberofChannels, ciscoVqeSCapacityGroup=ciscoVqeSCapacityGroup, ciscoVqeSMIBNotifs=ciscoVqeSMIBNotifs, cvqsTotalReceivedInvalidERMsgs=cvqsTotalReceivedInvalidERMsgs, cvqsChannelMulticastIPAddr=cvqsChannelMulticastIPAddr, cvqsActiveChannels=cvqsActiveChannels, cvqsCapacity=cvqsCapacity, cvqsTotalRTCPReceivers=cvqsTotalRTCPReceivers, cvqsRCC=cvqsRCC, cvqsTotalReceivedERMsgs=cvqsTotalReceivedERMsgs, cvqsLastUpdatedTime=cvqsLastUpdatedTime, ciscoVqeSNotifGroup=ciscoVqeSNotifGroup, ciscoVqeSRCCGroup=ciscoVqeSRCCGroup, cvqsMIBCompliances=cvqsMIBCompliances, cvqsRejectedRCCs=cvqsRejectedRCCs, cvqsControlInfo=cvqsControlInfo, cvqsChannelMulticastPort=cvqsChannelMulticastPort, cvqsChannelMemberPopulation=cvqsChannelMemberPopulation, cvqsTotalSentERPkts=cvqsTotalSentERPkts, cvqsMIBCompliance=cvqsMIBCompliance, cvqsTotalReceivedERPkts=cvqsTotalReceivedERPkts, cvqsTotalRefusedRCCs=cvqsTotalRefusedRCCs, cvqsChannelInfo=cvqsChannelInfo)
